quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"// test of minimization using new minimizer classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testMinimizer.cxx:3,test,test,3,math/minuit2/test/testMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testMinimizer.cxx,1,['test'],['test']
Testability,"// test of minimization usingnew minimizer classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,test,test,3,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,1,['test'],['test']
Testability,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:3,test,test,3,math/mathmore/test/testMCIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx,1,['test'],['test']
Testability,"// test of operation with a constant;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test of symmetric matrices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test of tformula neeeded to be run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test of virtuality two times",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test on rotations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testIterator.cxx:3,test,test,3,math/genvector/test/testIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testIterator.cxx,1,['test'],['test']
Testability,"// test one event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:3,test,test,3,math/mathcore/src/DistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx,1,['test'],['test']
Testability,"// test operation involving 2 expressions; // (check bug 35076); // reset initial matrices to avoid numerical problems",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test operator += , -=",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test operator = from identity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test option E of ProjectionXY",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test option W of ProjectionXY; // The error fails when built with weights. It is not properly calculated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test ordering label alphabetically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,8,['test'],['test']
Testability,"// test ordering label for one histo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test ordering label in content ascending order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,4,['test'],['test']
Testability,"// test ordering label in content ascending order; //h2->LabelsOption(""<"", ""y"");; //TProfile2D* h0 = static_cast<TProfile2D*> ( h2->Clone(""h2clone"") );; // then order labels alphabetically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test ordering label in content descending order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,4,['test'],['test']
Testability,"// test outside range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,test,test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,2,['test'],['test']
Testability,"// test overflow",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tprofile2poly.cxx:3,test,test,3,hist/hist/test/test_tprofile2poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tprofile2poly.cxx,3,['test'],['test']
Testability,"// test parabola using Brent Root Finder ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,test,test,3,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,2,['test'],['test']
Testability,"// test parameter order with more than 10 parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test parameters (use interval of tolPar*err), where err is parameter error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,test,test,3,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// test parameters order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test parsing polynomials (bug ROOT-7312)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test parsing variables/parameters of user-defined functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test passing a CDF distribution object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test passing a PDF distribution object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test performance of all vectors operations +,- and *; // results on mactelm g++ 4.01 showing ROOT::Math performs best overall; //v3 = v1+v2 v2 += v1 v3 = v1-v2 v2 -= v1 v2 = a*v1 v1 *= a v2 = v1/a v1 /= a; // 0.59 0.57 0.58 0.56 0.69 0.7 1.65 1.64 2D; // 0.79 0.79 0.78 0.8 0.97 0.95 1.85 1.84 3D; // 1.07 1.07 1.07 1.07 1.32 1.31 1.72 1.71 4D; // ROOT Physics Vector (TVector's):; //v3 = v1+v2 v2 += v1 v3 = v1-v2 v2 -= v1 v2 = a*v1 v1 *= a; // 4.4 0.97 4.41 0.96 4.43 1.13 2D; // 5.44 1.25 5.48 1.24 6.12 1.46 3D; // 17.65 7.32 17.65 7.35 10.25 7.79 4D; // CLHEP Vector (HepVector's):; //v3 = v1+v2 v2 += v1 v3 = v1-v2 v2 -= v1 v2 = a*v1 v1 *= a; // 0.57 0.55 0.56 0.55 0.7 0.7 2D; // 0.8 0.79 0.78 0.77 0.96 0.94 2.7 3.7 3D; // 1.06 1.02 1.06 1.02 1.26 1.26 2.99 3.98 4D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/vectorOperation.cxx:3,test,test,3,math/genvector/test/vectorOperation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/vectorOperation.cxx,1,['test'],['test']
Testability,"// test place at with sym matrices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test place vector in matrices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test place_at (insertion) of all type of matrices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test polynomial are linear and have right number",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test product of one vs the other",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress3D.cxx:3,test,test,3,math/genvector/test/stress3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress3D.cxx,1,['test'],['test']
Testability,"// test program for quasi random numbers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx:3,test,test,3,math/mathmore/test/testQuasiRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx,1,['test'],['test']
Testability,"// test quality (use cdf to avoid zero bins)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,3,['test'],['test']
Testability,// test remaining MIVs; // This code is temporary.; // Better to somehow test all remaining subscripts simultaneously.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['test'],['test']
Testability,"// test results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx:3,test,test,3,math/mathcore/test/stdsort.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx,1,['test'],['test']
Testability,"// test returning the full sequence",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCpu.cxx:3,test,test,3,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCpu.cxx,2,['test'],['test']
Testability,"// test returning the full sequence and dense layer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx:3,test,test,3,tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,5,['test'],['test']
Testability,"// test root finding algorithm for finding inverse of cdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,test,test,3,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,2,['test'],['test']
Testability,"// test root finding algorithm for finding inverse of cdf using derivatives",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,test,test,3,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,1,['test'],['test']
Testability,"// test root finding algorithm for finding inverse of cdf using drivatives",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,test,test,3,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['test'],['test']
Testability,"// test rotation maticies:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,"// test rotations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,test,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// test rotations using the matrix for multiplications",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,1,['test'],['test']
Testability,// test rsp size,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// test same prelacements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test sample quantiles; // function TMath::Quantiles and indirectly also TMath::kOrdStat; // compare with results from R (hardcoded in the test); // L.M 9/11/2011",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx:3,test,test,3,math/mathcore/test/testSampleQuantiles.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx,2,['test'],['test']
Testability,"// test scaling:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,// test separable subscripts,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['test'],['test']
Testability,"// test setDiagonal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test setting the mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx:3,test,test,3,math/unuran/test/unuranMulti2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx,2,['test'],['test']
Testability,"// test sign function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test single sided limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:3,test,test,3,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,1,['test'],['test']
Testability,"// test slices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test smatrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx:3,test,test,3,math/smatrix/test/testInversion.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx,1,['test'],['test']
Testability,"// test snapshotting two trees to the same file opened in ""UPDATE"" mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,test,test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,"// test snapshotting two trees with different names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,test,test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,4,['test'],['test']
Testability,"// test snapshotting two trees with same name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,test,test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,2,['test'],['test']
Testability,"// test special characters in parameter names (bug ROOT-8303); // test with operator ^, @ and predefined functions (pol, gaus, etc..)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,2,['test'],['test']
Testability,"// test split expression without passing the number of folds",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:3,test,test,3,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['test'],['test']
Testability,"// test ssq function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test statistic value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:3,test,test,3,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['test'],['test']
Testability,"// test statistic value; // Create a HypoTestResult representing the current state of this hypoPoint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:3,test,test,3,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['test'],['test']
Testability,"// test statistical functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx:3,test,test,3,math/mathcore/test/stress/testStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx,2,['test'],['test']
Testability,"// test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx:3,test,test,3,hist/hist/test/test_TH2Poly_BinError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx,1,['test'],['test']
Testability,"// test storing as Double32_t; // dictionary exist only for square matrices between 3 and 6",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:3,test,test,3,math/mathcore/test/stress/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx,1,['test'],['test']
Testability,"// test subtraction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,"// test subvector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test that applying transformation + Inverse is identity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,test,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// test that func parameters have not been changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx:3,test,test,3,math/mathmore/test/testDerivation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx,1,['test'],['test']
Testability,"// test that it's possible to register the same alias in different branches of the computation graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_interface.cxx:3,test,test,3,tree/dataframe/test/dataframe_interface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_interface.cxx,1,['test'],['test']
Testability,"// test that quantile value correspond:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,test,test,3,math/mathmore/test/StatFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx,4,['test'],['test']
Testability,"// test that with READ_WITHOUT_GLOBALREGISTRATION the file does not end up in the global list of files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileTests.cxx:3,test,test,3,io/io/test/TFileTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileTests.cxx,2,['test'],['test']
Testability,"// test the 95% confidence intervals; // taken from: http://people.na.infn.it/~lista/cgi/binomial/binomial.pl; //; // format: (k,n) -> lower bound, upper bound; // (0,0) -> 0, 1; // (3,7) -> 0.099, 0.816; // (0,8) -> 0, 0.369; // (3,12) -> 0.055, 0.572; // (2,14) -> 0.018, 0.428; // (5,18) -> 0.097, 0.535; // (15,30) -> 0.313, 0.687; // (10,10) -> 0.692, 1.000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:3,test,test,3,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// test the 95% confidence intervals; // taken from: http://people.na.infn.it/~lista/cgi/binomial/binomial.pl; //; // format: (k,n) -> lower bound, upper bound; // (0,0) -> 0, 1; // (3,7) -> 0.129, 0.775; // (0,8) -> 0, 0.321; // (3,12) -> 0.072, 0.548; // (2,14) -> 0.026, 0.418; // (5,18) -> 0.106, 0.531; // (15,30) -> 0.324, 0.676; // (10,10) -> 0.733, 1.000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:3,test,test,3,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// test the 95% confidence intervals; // taken from: http://www.measuringusability.com/wald.htm; //; // format: (k,n) -> lower bound, upper bound; // (0,0) -> 0, 1; // (3,7) -> 0.062, 0.795; // (0,8) -> 0, 0; // (3,12) -> 0.005, 0.495; // (2,14) -> 0, 0.326; // (5,18) -> 0.071, 0.485; // (15,30) -> 0.321, 0.679; // (10,10) -> 1, 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:3,test,test,3,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// test the 95% confidence intervals; // taken from: http://www.measuringusability.com/wald.htm; //; // format: (k,n) -> lower bound, upper bound; // (0,0) -> 0, 1; // (3,7) -> 0.158, 0.750; // (0,8) -> 0, 0.324; // (3,12) -> 0.089, 0.532; // (2,14) -> 0.040, 0.399; // (5,18) -> 0.125, 0.509; // (15,30) -> 0.332, 0.669; // (10,10) -> 0.722, 1.000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:3,test,test,3,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// test the 95% confidence intervals; // taken from:; // ""Interval Estimation for a Binomial Proportion"" Brown, Cai, DasGupta; // Table 5; //; // format: (k,n) -> lower bound, upper bound; // (0,0) -> 0.002, 0.998; // (3,7) -> 0.139, 0.766; // (0,8) -> 0, 0.262; // (3,12) -> 0.076, 0.529; // (2,14) -> 0.031, 0.385; // (5,18) -> 0.115, 0.506; // (15,30) -> 0.328, 0.672; // (10,10) -> 0.783, 1.000; //; // alpha = k + 0.5; // beta = n - k + 0.5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:3,test,test,3,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// test the RooHistFunc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,test,test,3,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['test'],['test']
Testability,"// test the RooHistPdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,test,test,3,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['test'],['test']
Testability,"// test the estimator value for the parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx:3,test,test,3,tmva/tmva/src/MCFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MCFitter.cxx,1,['test'],['test']
Testability,"// test the exponent notations in numbers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test the io",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:3,test,test,3,math/mathcore/test/stress/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx,6,['test'],['test']
Testability,"// test the matrix if D2 is not equal to 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx:3,test,test,3,math/mathcore/test/stress/testSVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx,3,['test'],['test']
Testability,"// test the method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:3,test,test,3,tmva/tmva/inc/TMVA/MethodCuts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h,1,['test'],['test']
Testability,"// test the net; // Logic : Y = X * K; // Let X = I, Then Y = I * K => Y = K; // I = (1 x batchSize x nFeatures)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:3,test,test,3,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,2,"['Log', 'test']","['Logic', 'test']"
Testability,"// test the operator ""? : """,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test the operator ^",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test the quality by looking at the cdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSimple.cxx:3,test,test,3,math/unuran/test/unuranSimple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSimple.cxx,1,['test'],['test']
Testability,"// test the quantile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:3,test,test,3,math/mathcore/test/stress/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h,3,['test'],['test']
Testability,"// test the rotation and transformations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress3D.cxx:3,test,test,3,math/genvector/test/stress3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress3D.cxx,1,['test'],['test']
Testability,"// test the tensor API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:3,test,test,3,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,2,['test'],['test']
Testability,"// test the tree quality.. in terms of Misclassification",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:3,test,test,3,tmva/tmva/src/CCTreeWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx,2,['test'],['test']
Testability,"// test the universal methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,1,['test'],['test']
Testability,"// test the values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:3,test,test,3,math/mathmore/test/testMCIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx,1,['test'],['test']
Testability,"// test the various option : case no mode (average) and shortes (no central); // cannot be done with TGraphAsymmErrors. ROOT-10324 is missing mode central; // that is now fixed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:3,test,test,3,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// test the vector tags",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,test,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,4,['test'],['test']
Testability,"// test this value against our lower fit limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:3,test,test,3,roofit/roofitcore/src/RooAbsRealLValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx,1,['test'],['test']
Testability,"// test this value against our upper fit limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:3,test,test,3,roofit/roofitcore/src/RooAbsRealLValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx,1,['test'],['test']
Testability,"// test to re-order some histos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test to see if t0 is behind the ray:; // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,; // in order to always return an intersect point that is in front of the ray.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// test to see if t1 is behind the ray - if so, return null",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// test tokenizer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,test,test,3,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// test tree nmin cut -> for debug purposes; // the routine will generate trees with stopping cut on N(eve) given by; // a fraction between [20,N(eve)-1].; //; // MakeForestRnd();; // exit(1);; //; // Init RuleFit object and create rule ensemble; // + make forest & rules",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:3,test,test,3,tmva/tmva/src/MethodRuleFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx,1,['test'],['test']
Testability,"// test unary minus:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,"// test unuran using the string interface to generate numbers according to the normal distributions; // compare CPU performancecwith TRandom::Gaus and opitonally GSL (using MathMore ) and CLHEP for; // generating normal distributed random numbers; //; // run within ROOT (.x unuranSimple.cxx+) or pass any extra parameter in the command line to get; // a graphics output; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSimple.cxx:3,test,test,3,math/unuran/test/unuranSimple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSimple.cxx,1,['test'],['test']
Testability,"// test uses fBits so don't move next line",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:3,test,test,3,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,2,['test'],['test']
Testability,"// test using 1D Distribution object interface; // and compare results and CPU performances using TF1::GetRandom; //; // run within ROOT (.x unuranDistr.cxx+) or pass any extra parameter in the command line to get; // a graphics output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx:3,test,test,3,math/unuran/test/unuranDistr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx,1,['test'],['test']
Testability,"// test using DistSampler options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,2,['test'],['test']
Testability,"// test using GSL multi fit (L.M. method)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test using GSL multi min method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test using Multi-dim (2D) Distribution object interface; // and compare results and CPU performances using TF2::GetRandom; //; // run within ROOT (.x unuranMulti2D.cxx+) or pass any extra parameter in the command line to get; // a graphics output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx:3,test,test,3,math/unuran/test/unuranMulti2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx,1,['test'],['test']
Testability,"// test using Multi-dim Distribution object interface; // and compare results and CPU performances using TF3::GetRandom in case of 3D; // and test also case of dim = 10 and 100; //; // run within ROOT (.x unuranMultiDim.cxx+) or pass any extra parameter in the command line to get; // a graphics output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx:3,test,test,3,math/unuran/test/unuranMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx,2,['test'],['test']
Testability,"// test using Unuran string API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test using a Multidim pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test using a Multidim pdf using also mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test using a different generator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:3,test,test,3,math/mathmore/test/testMCIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx,1,['test'],['test']
Testability,"// test using a discreate PDF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test using binned likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test using binomial distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,1,['test'],['test']
Testability,"// test using discrete distribution.; // Generate numbers from a given probability vector or from a discrete distribution like; // the Poisson distribution.; // Compare also the Unuran method for generating Poisson numbers with TRandom::Poisson; //; // run within ROOT (.x unuranDiscrete.cxx+) or pass any extra parameter in the command line to get; // a graphics output (./unuranDiscrete 1 )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,1,['test'],['test']
Testability,"// test using iterators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test using reset gate after =On as for cudnn",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx:3,test,test,3,tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,1,['test'],['test']
Testability,"// test using self inversion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx:3,test,test,3,math/smatrix/test/testInversion.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx,1,['test'],['test']
Testability,"// test using string API from a probability vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test validity of the fit and print result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,test,test,3,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// test vector of tracks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx:3,test,test,3,math/genvector/test/testVectorIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx,1,['test'],['test']
Testability,// test whether host endianness matches target,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelDAGToDAG.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelDAGToDAG.cpp,1,['test'],['test']
Testability,"// test whether user-defined and parametrized functions can be nested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test whether value of parameter name carries through",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test whether we need scrollbars",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:3,test,test,3,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,2,['test'],['test']
Testability,"// test whether we need vertical scrollbar or not",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:3,test,test,3,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['test'],['test']
Testability,"// test whitespaces in par name and cloning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test with 512 bits, longer keys may not work",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TSystemTests.cxx:3,test,test,3,core/base/test/TSystemTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TSystemTests.cxx,1,['test'],['test']
Testability,"// test with ::",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test with CLHEP matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:3,test,test,3,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['test'],['test']
Testability,"// test with ChebyQuad function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,test,test,3,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,3,['test'],['test']
Testability,"// test with DataLoader and output file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testEnvelope.cxx:3,test,test,3,tmva/tmva/test/envelope/testEnvelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testEnvelope.cxx,1,['test'],['test']
Testability,"// test with Powell function (4d); // minimum is at F(0,0,0,0) = 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:3,test,test,3,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,2,['test'],['test']
Testability,"// test with TF1::GetRandom",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx:3,test,test,3,math/unuran/test/unuranDistr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx,1,['test'],['test']
Testability,"// test with TMath",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:3,test,test,3,math/mathcore/test/testTStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx,2,['test'],['test']
Testability,"// test with Wood function (4d); // minimum : F(1,1,1,1) = 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:3,test,test,3,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,2,['test'],['test']
Testability,"// test with a dense layer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx:3,test,test,3,tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,3,['test'],['test']
Testability,"// test with a dense layer (does not work for large input , why ???)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagationCpu.cxx:3,test,test,3,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagationCpu.cxx,1,['test'],['test']
Testability,"// test with a function; // Poisson distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,1,['test'],['test']
Testability,"// test with a graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:3,test,test,3,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['test'],['test']
Testability,"// test with a simple quadratic function 2d; // minimum is at F(0,0) = 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:3,test,test,3,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,2,['test'],['test']
Testability,"// test with avg pooling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,test,test,3,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,"// test with batch normalization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,test,test,3,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,// test with bounding box in local space,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,3,['test'],['test']
Testability,// test with bounding sphere first,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,// test with bounding sphere in world space,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,3,['test'],['test']
Testability,"// test with copy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test with cos(x) + 1.0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testChebyshev.cxx:3,test,test,3,math/mathmore/test/testChebyshev.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testChebyshev.cxx,1,['test'],['test']
Testability,"// test with fletcher trigonometric function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,test,test,3,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,3,['test'],['test']
Testability,"// test with full range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:3,test,test,3,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['test']
Testability,"// test with linear fitter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test with linear fitter; // for this test need to pass a multi-dim function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:3,test,test,3,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,2,['test'],['test']
Testability,"// test with lists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testIterator.cxx:3,test,test,3,math/genvector/test/testIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testIterator.cxx,1,['test'],['test']
Testability,"// test with max pooling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,test,test,3,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,"// test with restricted range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:3,test,test,3,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['test']
Testability,"// test with symmetric matrices; // double d1[6]={1,2,3,4,5,6};",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test with vectors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test without DataLoader or output file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testEnvelope.cxx:3,test,test,3,tmva/tmva/test/envelope/testEnvelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testEnvelope.cxx,1,['test'],['test']
Testability,"// test without gradient",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test x4 + 5x^2 + 4 = 0; //4 imaginary roots (x-i)(x+i)(x-2i)(x+2i)=0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,test,test,3,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// test x^4 - 16 = 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,test,test,3,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// test x^4-8x^3+12x^2+16x+4=0; // 4 real roots where 2 are degeenrates",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,test,test,3,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// test...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMenu.cxx:3,test,test,3,gui/gui/src/TGMenu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMenu.cxx,1,['test'],['test']
Testability,"// testConvBackwardPass<TReference<double>>(batchSizeTest1, imgDepthTest1, imgHeightTest1, imgWidthTest1, batchDepth,; // batchHeight, batchWidth);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:3,test,testConvBackwardPass,3,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,3,['test'],['testConvBackwardPass']
Testability,"// testFullRNN(size_t batchSize, size_t stateSize, size_t inputSize, size_t outputSize); // reconstruct 8 bit vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx:3,test,testFullRNN,3,tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx,4,['test'],['testFullRNN']
Testability,"// testList.push_back(new TestHypoTestInverter2(fref, writeRef, verbose, kFrequentist, kSimpleLR, 10));; // testList.push_back(new TestHypoTestInverter2(fref, writeRef, verbose, kFrequentist, kSimpleLR, 20));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:3,test,testList,3,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,2,['test'],['testList']
Testability,// testModifiable was false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:3,test,testModifiable,3,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['test'],['testModifiable']
Testability,"// testRDIV -; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*j]; // where i and j are induction variables, c1 and c2 are loop invariant,; // and a1 and a2 are constant, we can solve it exactly with an easy adaptation; // of the Exact SIV test, the Restricted Double Index Variable (RDIV) test.; // It doesn't make sense to talk about distance or direction in this case,; // so there's no point in making special versions of the Strong SIV test or; // the Weak-crossing SIV test.; //; // With minor algebra, this test can also be used for things like; // [c1 + a1*i + a2*j][c2].; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,testRDIV,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,6,['test'],"['test', 'testRDIV']"
Testability,"// testSIV -; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 - a2*i]; // where i is an induction variable, c1 and c2 are loop invariant, and a1 and; // a2 are constant, we attack it with an SIV test. While they can all be; // solved with the Exact SIV test, it's worthwhile to use simpler tests when; // they apply; they're cheaper and sometimes more precise.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,testSIV,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,4,['test'],"['test', 'testSIV', 'tests']"
Testability,// testSetjmp() (Emscripten),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:3,test,testSetjmp,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,test,testStatType,3,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,6,"['Test', 'test']","['TestStat', 'test', 'testStatType']"
Testability,"// testZIV -; // When we have a pair of subscripts of the form [c1] and [c2],; // where c1 and c2 are both loop invariant, we attack it using; // the ZIV test. Basically, we test by comparing the two values,; // but there are actually three possible results:; // 1) the values are equal, so there's a dependence; // 2) the values are different, so there's no dependence; // 3) the values might be equal, so we have to assume a dependence.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,testZIV,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,3,['test'],"['test', 'testZIV']"
Testability,// testc -> testz.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,test,testc,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],"['testc', 'testz']"
Testability,// tested by transaction-test I'm adding,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:3,test,tested,3,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['test'],"['test', 'tested']"
Testability,"// tested to be sufficient for the scan of the Bayesian posterior; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,test,tested,3,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['test'],['tested']
Testability,"// tested with https://regex101.com/ on trick sequences; // such flamingo_flyA_003, flamingo_run1_003, crdeath0059",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:3,test,tested,3,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,1,['test'],['tested']
Testability,"// tester class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx:3,test,tester,3,math/unuran/test/unuranDistr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx,1,['test'],['tester']
Testability,"// testgrad functor; // from function object implementing both",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,testgrad,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['testgrad']
Testability,"// testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:3,test,testing,3,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['test'],['testing']
Testability,"// testing ApplyInverse on Point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,testing,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['testing']
Testability,"// testing ApplyInverse on Vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,testing,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['testing']
Testability,"// testing angles:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing assignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,1,['test'],['testing']
Testability,"// testing boosts:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing candidate gate bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,2,['test'],['testing']
Testability,"// testing components:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing each single tree with hard-coded file names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:3,test,testing,3,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['test'],['testing']
Testability,"// testing foget gate bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,1,['test'],['testing']
Testability,"// testing for case of: Rx = add(Rx,#s7)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:3,test,testing,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,1,['test'],['testing']
Testability,"// testing input gate bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,1,['test'],['testing']
Testability,"// testing methods and Train/Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:3,test,testing,3,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,2,"['Test', 'test']","['Test', 'testing']"
Testability,"// testing output gate bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,1,['test'],['testing']
Testability,"// testing ptot and pt:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing reset gate bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,1,['test'],['testing']
Testability,"// testing rotations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing scalar and vector product:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing scalar products:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,testing,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['testing']
Testability,"// testing specific possibility (after zoom, draw with ""same"", log, etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:3,test,testing,3,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,4,"['log', 'test']","['log', 'testing']"
Testability,"// testing update gate bias gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h:3,test,testing,3,tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,1,['test'],['testing']
Testability,"// testing value for an unknown future column type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:3,test,testing,3,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,1,['test'],['testing']
Testability,"// testing vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,test,testing,3,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// testing::internal::CaptureStderr();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx:3,test,testing,3,core/meta/test/testHashRecursiveRemove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx,1,['test'],['testing']
Testability,// testnzc -> testnzc (no change).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,test,testnzc,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],['testnzc']
Testability,"// testpoint object in float for quick BVH interaction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx:3,test,testpoint,3,geom/geom/src/TGeoParallelWorld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx,3,['test'],['testpoint']
Testability,"// tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3,test,tests,3,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,2,['test'],['tests']
Testability,"// tests fail if we don't have this cast...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/res/ROOT/RSha256.hxx:3,test,tests,3,core/foundation/res/ROOT/RSha256.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/res/ROOT/RSha256.hxx,1,['test'],['tests']
Testability,"// tests failing testMerge3DExtendX, testMerge3DExtendZ,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['tests']
Testability,"// tests to check that the output in the file is right",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:3,test,tests,3,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,1,['test'],['tests']
Testability,"// tests with scientific notations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,tests,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['tests']
Testability,// testz -> testc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,test,testz,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],"['testc', 'testz']"
Testability,"// text to grep for in the logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h:27,log,logs,27,gui/sessionviewer/inc/TProofProgressLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h,1,['log'],['logs']
Testability,"// the below contains a a hack to cut off variations that go below 0; // this is needed because with interpolation code 4, which is the default, interpolation is done in; // log-space. hence, values <= 0 result in NaN which propagate throughout the model and cause evaluations to; // fail if you know a nicer way to solve this, please go ahead and fix the lines below",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx:174,log,log-space,174,roofit/hs3/src/JSONFactories_HistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx,1,['log'],['log-space']
Testability,"// the constraint pdfs, they are RooPoisson so we can't have tests that accidentally; // pass because of the symmetry of normalizing over x or mu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx:61,test,tests,61,roofit/roofitcore/test/testGlobalObservables.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx,1,['test'],['tests']
Testability,"// the empty/default constructor is taken for these tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:52,test,tests,52,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// the first 6 ranges, are logically correct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:27,log,logically,27,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['log'],['logically']
Testability,"// the following four are mutable because DoEval is const (in child classes); // Reset the *largest* negative log-likelihood value we have seen so far:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:110,log,log-likelihood,110,roofit/roofitcore/src/RooAbsMinimizerFcn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h,1,['log'],['log-likelihood']
Testability,"// the last sub-pattern isn't conatained in the test string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:48,test,test,48,core/dictgen/src/BaseSelectionRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx,1,['test'],['test']
Testability,"// the last value is larger than number of events to test that; // number of component tasks:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:53,test,test,53,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,1,['test'],['test']
Testability,"// the log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h:7,log,log,7,gui/sessionviewer/inc/TProofProgressLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h,1,['log'],['log']
Testability,"// the matrix of covariance 'within class' reflects the dispersion of the; // events relative to the center of gravity of their own class; // assert required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:142,assert,assert,142,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['assert'],['assert']
Testability,"// the mutable declaration is needed to use the logger in const methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h:48,log,logger,48,tmva/tmva/inc/TMVA/Configurable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Configurable.h,1,['log'],['logger']
Testability,"// the next line is where most of the time will be spent; // generating the sampling dist of the test statistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:97,test,test,97,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// the point is in the section bounded by izl and izh Z planes; // compute Rmin and Rmax and test the value of R squared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPcon.cxx:93,test,test,93,geom/geom/src/TGeoPcon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPcon.cxx,1,['test'],['test']
Testability,"// the point of this test is to see whether clean-up of ZeroMQ resources is done properly without calling any; // destructors (which is what happens when you call _Exit() instead of regularly ending the program by reaching the; // end of main()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx:21,test,test,21,roofit/multiprocess/test/test_Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx,1,['test'],['test']
Testability,"// the problem is that I can only place logical volumes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/vecgeom/src/TGeoVGShape.cxx:40,log,logical,40,geom/vecgeom/src/TGeoVGShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/vecgeom/src/TGeoVGShape.cxx,1,['log'],['logical']
Testability,"// the test calls in different blocks; // the distinctions are arbitrary:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:7,test,test,7,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],['test']
Testability,"// the test for 0x1100 is here to avoid the function call in the Latin case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:7,test,test,7,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,2,['test'],['test']
Testability,"// the test values for initialisation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:7,test,test,7,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],['test']
Testability,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram h4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:366,test,test,366,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram p4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:366,test,test,366,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// this assert is for historical reasons. Don't remove it unless you understand all the consequences.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:8,assert,assert,8,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['assert'],['assert']
Testability,"// this can happen if all pdfs are extended then the coef is effectively the; // expected number of events; // TODO: test behaviour of xRooNode under this scenario (are histograms correct?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:117,test,test,117,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['test'],['test']
Testability,"// this can take a few minutes in some configurations; // TEST(RWLock, VeryLargeconcurrentReadsAndWritesSpin); // {; // concurrentReadsAndWrites(gRWMutexSpin,10,200,gRepetition / 100000);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx:58,TEST,TEST,58,core/thread/test/testRWLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx,1,['TEST'],['TEST']
Testability,"// this does not compile oin Windows, since it does not understand the default arguments; // It does not work for gcc 4.3 either.; // #ifndef _WIN32; // ROOT::Math::Functor1D f9(&tf1,&TF1::Eval);; // TestTime(f9);; // ROOT::Math::Functor f10(&tf1,&TF1::EvalPar,tf1.GetNdim());; // TestTime(f10);; // #endif; // test with rootit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:200,Test,TestTime,200,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,3,"['Test', 'test']","['TestTime', 'test']"
Testability,// this does not work correctly - draw range ignored when calculating normals; // even worse - shift 2 makes complete logic wrong while wrong triangle are extracted; // Let see if it will be fixed https://github.com/mrdoob/three.js/issues/15560,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:118,log,logic,118,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,1,['log'],['logic']
Testability,"// this does not work satisfactory TMVA_test.addTest(new RegressionUnitTestWithDeviation( TMVA::Types::kMLP, ""MLP"",; // ""!H:!V:VarTransform=Norm:NeuronType=tanh:NCycles=300:HiddenLayers=N+20:TestRate=6:TrainingMethod=BP:Sampling=0.3:SamplingEpoch=0.8:ConvergenceImprove=1e-6:ConvergenceTests=15:!UseRegulator""; // , 0.4, 0.8, 0.2, 0.5 )); SVM regression does not work TMVA_test.addTest(new RegressionUnitTestWithDeviation(; // TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"" , 0., 1., 0., 1. ));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:191,Test,TestRate,191,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['Test'],['TestRate']
Testability,"// this happens when loaded hypoSpace from a hypoSpaceInverterResult; // set relUncert to infinity so that we don't test any new points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:116,test,test,116,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,2,['test'],['test']
Testability,"// this holds for all cases we test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxy.cxx:31,test,test,31,tree/treeplayer/src/TBranchProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxy.cxx,1,['test'],['test']
Testability,"// this is a regression test for an issue that was hidden by RVec's small buffer optimization; // when the variations don't fit in the smalll buffer and we are varying multiple columns simultaneously,; // RVariation was changing the address of the varied values between entries, resulting in invalid reads; // on the part of the RVariationReader.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:24,test,test,24,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['test'],['test']
Testability,"// this is a regression test for https://github.com/root-project/root/issues/6796",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:24,test,test,24,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['test'],['test']
Testability,"// this is a regression test, we used to read from wrong addresses in this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:24,test,test,24,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['test'],['test']
Testability,"// this is a tricky case for our internal logic as we have to distinguish varying a column of RVec type; // from varying multiple columns: in both cases the Vary expression returns an RVec<RVec<..>>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:42,log,logic,42,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['log'],['logic']
Testability,"// this is for CNN weights that are in row-major formats; //assert(B.GetShape().size() == 4); // weights shape should be 4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:60,assert,assert,60,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,1,['assert'],['assert']
Testability,"// this is only a temporary solution for the testing; // FIXME:: Extend to a real test!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:45,test,testing,45,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],"['test', 'testing']"
Testability,// this is only for debugging - test inversion of whole geometry,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:32,test,test,32,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// this is only relevant if BinnedLikelihood active; // = sum[ N_i! ] since LnGamma(N_i+1) ~= N_i!; // need to also subtract off sum[ N_i*log(width_i) ] in order to have formula: binnedLL = unbinnedLL + binnedDataTerm; // note this is 0 if all the bin widths are 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:138,log,log,138,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['log'],['log']
Testability,"// this is test will now work",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:11,test,test,11,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// this macro can be called from an interactive ROOT session via the command:; // Root > .x test2html.cxx; // It generates the html files for some of the ROOT test programs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx:159,test,test,159,test/test2html.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx,1,['test'],['test']
Testability,"// this macro serves to assess the convergence of the MLP ANN. ; // It compares the error estimator for the training and testing samples.; // If overtraining occurred, the estimator for the training sample should ; // monotoneously decrease, while the estimator of the testing sample should ; // show a minimum after which it increases.; // input: - Input file (result from TMVA),; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/annconvergencetest.h:121,test,testing,121,tmva/tmvagui/inc/TMVA/annconvergencetest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/annconvergencetest.h,2,['test'],['testing']
Testability,"// this macro serves to assess the convergence of the MLP ANN.; // It compares the error estimator for the training and testing samples.; // If overtraining occurred, the estimator for the training sample should; // monotoneously decrease, while the estimator of the testing sample should; // show a minimum after which it increases.; // input: - Input file (result from TMVA),; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/annconvergencetest.cxx:120,test,testing,120,tmva/tmvagui/src/annconvergencetest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/annconvergencetest.cxx,2,['test'],['testing']
Testability,"// this method called to test for convergence status at; // at the end of each interior-point iteration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpSolverBase.h:25,test,test,25,math/quadp/inc/TQpSolverBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpSolverBase.h,1,['test'],['test']
Testability,"// this should assert at run time; // B.Place_at(S,1,0);; // B.Place_at(2*S,1,0);; // place general in symmetric should fail to compiler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:15,assert,assert,15,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['assert'],['assert']
Testability,"// this should run assert; // sA = A.Sub<SMatrix<double,2,3,MatRepStd<double,2,3> > > (0,2);; // sB = B.Sub<SMatrix<double,2,2,MatRepSym<double,2> > > (0,1);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:19,assert,assert,19,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['assert'],['assert']
Testability,"// this test case (as all others) is usually run twice, in IMT and non-IMT mode,; // but we only want to create the TRandom object once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx:8,test,test,8,tree/dataframe/test/dataframe_simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx,1,['test'],['test']
Testability,"// this test fails in some machines (skip by default)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx:8,test,test,8,math/genvector/test/coordinates4D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx,1,['test'],['test']
Testability,"// this test program compares the I/O performance obtained with; // all STL collections of objects or pointers to objects and also; // Root collection class TClonesArray.; // Trees in compression and non compression mode are created for each; // of the following cases:; // -STLcollection<THit>; // -STLcollection<THit*>; // -TClonesArray(TObjHit) in no split mode; // -TClonesArray(TObjHit) in split mode; // where:; // THit is a class not derived from TObject; // TObjHit derives from TObject and THit; //; // run with; // bench; // or; // bench -m to stream objects memberwise; //; // The test prints a summary table comparing performances for all above cases; // (CPU, file size, compression factors).; // Reference numbers on a Pentium IV 2.4 Ghz machine are given as reference.; // Authors: Rene Brun, Markus Frank",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:8,test,test,8,test/bench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx,2,['test'],['test']
Testability,"// this test was roottest's root/dataframe/test_splitcoll_arrayview.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_splitcoll_arrayview.cxx:8,test,test,8,tree/dataframe/test/dataframe_splitcoll_arrayview.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_splitcoll_arrayview.cxx,1,['test'],['test']
Testability,"// this test will fail miserably if sigma2 is large since; // binning does not use events outside range; // data.InRange=false is not doing since the bin data will; // consider only data in the range !!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:8,test,test,8,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['test'],['test']
Testability,"// this tests https://github.com/root-project/root/issues/8276",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx:8,test,tests,8,tree/dataframe/test/dataframe_helpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx,1,['test'],['tests']
Testability,// this value used for logz scale drawing,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:23,log,logz,23,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['logz']
Testability,"// this will be executed first, then while conditioned checked; // as an exit condition for the loop.; // the next line is where most of the time will be spent; // generating the sampling dist of the test statistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:200,test,test,200,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// this would be probably an assert given that this state is not reachable unless a mistake is somewhere",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:29,assert,assert,29,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['assert'],['assert']
Testability,// this.ymin_nz = hmin_nz; // value can be used to show optimal log scale,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:64,log,log,64,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// time saving self-test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:20,test,test,20,hist/hist/inc/Math/WrappedMultiTF1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h,11,['test'],['test']
Testability,"// time to compute training and test errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:32,test,test,32,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,"// timesteps, batchsize, statesize, inputsize; // testLSTMBackpropagation<TReference<double>>(1, 2, 1, 10, 1e-5);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.cxx:50,test,testLSTMBackpropagation,50,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.cxx,1,['test'],['testLSTMBackpropagation']
Testability,// tmp = x 'opposite logical shift' y,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,log,logical,21,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logical']
Testability,// to avoid a nan from log(0)*0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:23,log,log,23,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['log']
Testability,"// to avoid a nan from log(0)*0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/PdfFuncMathCore.h:23,log,log,23,math/mathcore/inc/Math/PdfFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/PdfFuncMathCore.h,2,['log'],['log']
Testability,"// to avoid cases in chi2-test of profiles when error is zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:26,test,test,26,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// to debug the test and print matrices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:16,test,test,16,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,3,['test'],['test']
Testability,"// to select a fit in the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:26,test,test,26,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// to test abstract class handling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:6,test,test,6,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['test']
Testability,"// tool = new ExpectedErrorPruneTool(logfile);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:37,log,logfile,37,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['log'],['logfile']
Testability,"// top logaritmic viewview",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveCaloLegoGL.h:7,log,logaritmic,7,graf3d/eve/inc/TEveCaloLegoGL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveCaloLegoGL.h,1,['log'],['logaritmic']
Testability,"// total sum of x,y,z,t (for testing first addition)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:29,test,testing,29,math/mathcore/test/stress/VectorTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h,2,['test'],['testing']
Testability,"// transient frame for logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressDialog.h:23,log,logs,23,gui/sessionviewer/inc/TProofProgressDialog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressDialog.h,1,['log'],['logs']
Testability,"// true if using ROOT's new/delete; //----- Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:75,test,test,75,core/base/inc/TStorage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h,1,['test'],['test']
Testability,"// try here without shuffling the labels to not test random label order in list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:48,test,test,48,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// try shuffling the labels to test random label order in list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:31,test,test,31,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// typedef resolution testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:22,test,testing,22,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,"// uncapped test statistic is equal to onesidednegative when k is positive, and equal to 1.0 - difference between; // twosided and onesidednegative when k is negative ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:12,test,test,12,roofit/xroofit/src/Asymptotics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx,1,['test'],['test']
Testability,// undefined logical immediate encoding,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:13,log,logical,13,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,3,['log'],['logical']
Testability,"// unrolll loop to have test printing component when failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:24,test,test,24,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// unused, single-thread test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx:25,test,test,25,tree/dataframe/test/dataframe_helpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx,2,['test'],['test']
Testability,"// update logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:10,log,logger,10,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,2,['log'],['logger']
Testability,"// upper limit on test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h:18,test,test,18,roofit/roostats/inc/RooStats/ConfidenceBelt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h,1,['test'],['test']
Testability,"// upper limit test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:15,test,test,15,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,1,['test'],['test']
Testability,"// use TClass directly, to enable auto-loading; class may be stubbed (eg. for; // function returns) or forward declared, leading to a non-null TClass that is; // otherwise invalid/unusable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:61,stub,stubbed,61,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['stub'],['stubbed']
Testability,"// use TRandom2 (which is based on TUUId to generate the seed; // TRandom2 works fairly well and has been tested against example; // layout in https://savannah.cern.ch/bugs/?99516",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:106,test,tested,106,math/mathcore/src/TRandom3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx,1,['test'],['tested']
Testability,"// use a fixed seed to be able to reproduce tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:44,test,tests,44,math/mathcore/test/stress/VectorTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h,4,['test'],['tests']
Testability,"// use array pre-allocated in tree->Draw . This is faster; // assert(x != 0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:62,assert,assert,62,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['assert'],['assert']
Testability,"// use empty bins in log-likelihood fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:21,log,log-likelihood,21,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['log'],['log-likelihood']
Testability,"// use for h3 same label as for h2 to test the merging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:38,test,test,38,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,6,['test'],['test']
Testability,"// use function in logx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:19,log,logx,19,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['log'],['logx']
Testability,"// use kIdentity for debugging; // FCLayer_t* l1 = net.AddDenseLayer(outputSize, EActivationFunction::kIdentity);; // test fails if using VDT and tanh",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:118,test,test,118,tmva/tmva/test/DNN/TestBackpropagationDL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h,1,['test'],['test']
Testability,"// use line to indicate tested points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:24,test,tested,24,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['test'],['tested']
Testability,"// use the poisson log-lokelihood (Baker-Cousins chi2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:19,log,log-lokelihood,19,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['log'],['log-lokelihood']
Testability,"// use the profile likelihood ratio as the test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:43,test,test,43,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,1,['test'],['test']
Testability,"// used for unit tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:17,test,tests,17,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,2,['test'],['tests']
Testability,// used if section has no attributes but has a stub size,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp:47,stub,stub,47,interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,1,['stub'],['stub']
Testability,"// user specified contour levels; // kCanRebin = BIT(11), // can rebin axis; // kLogX = BIT(15), // X-axis in log scale",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:110,log,log,110,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// using declaration testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:21,test,testing,21,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,"// v1.SetElements(vw.begin(),vw.end() ); // this assert at run-time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:49,assert,assert,49,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['assert'],['assert']
Testability,// v_cmp_class_* etc. use a 10-bit mask for what operation is checked.; // The result is true if any of these tests are true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h:110,test,tests,110,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,1,['test'],['tests']
Testability,// value can be used to show optimal log scale,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:37,log,log,37,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// value used for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:18,test,testing,18,math/mathcore/test/stress/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h,13,['test'],['testing']
Testability,"// variable bin test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:16,test,test,16,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// variable ranking; // Log() << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:24,Log,Log,24,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Log'],['Log']
Testability,"// very conservative, this is a numerically difficult test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:54,test,test,54,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['test'],['test']
Testability,"// virtual void SetUp() { }; // FIXME: We cannot rely on TearDown because it is executed at the end of; // every test. This triggers another bug in the dictionary generation phase,; // possibly due to concurrent file system operations.; //virtual void TearDown() {; // If there are failures we want to keep the created files.; //if (!::testing::Test::HasFatalFailure()); // cleanup();; //}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:113,test,test,113,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,3,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"// void TFumiliMinimizer::FcnGrad( int &, double * g, double & f, double * x , int iflag ) {; // // implementation of FCN static function used internally by TFumili.; // // Adapt IMultiGradFunction interface to TFumili FCN static function in the case of user; // // provided gradient.; // ROOT::Math::IMultiGradFunction * gFunc = dynamic_cast<ROOT::Math::IMultiGradFunction *> ( fgFunc);; // assert(gFunc != 0);; // f = gFunc->operator()(x);; // // calculates also derivatives; // if (iflag == 2) gFunc->Gradient(x,g);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:392,assert,assert,392,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['assert'],['assert']
Testability,"// volume is centered around test value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:29,test,test,29,tmva/tmva/src/MethodPDERS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx,1,['test'],['test']
Testability,"// we first check if the last sub-pattern is contained in the test string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:62,test,test,62,core/dictgen/src/BaseSelectionRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx,1,['test'],['test']
Testability,"// we like the logo to sit a bit above the histo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/tmvaglob.cxx:15,log,logo,15,tmva/tmvagui/src/tmvaglob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/tmvaglob.cxx,1,['log'],['logo']
Testability,"// we want to split only over components so we can test component-offsets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:51,test,test,51,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,1,['test'],['test']
Testability,"// we want to split only over components so we can test component-offsets precisely; // (event-offsets give more variation)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:51,test,test,51,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,2,['test'],['test']
Testability,"// weakCrossingSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.2; //; // When we have a pair of subscripts of the form [c1 + a*i] and [c2 - a*i],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the; // Weak-Crossing SIV test.; //; // Given c1 + a*i = c2 - a*i', we can look for the intersection of; // the two lines, where i = i', yielding; //; // c1 + a*i = c2 - a*i; // 2a*i = c2 - c1; // i = (c2 - c1)/2a; //; // If i < 0, there is no dependence.; // If i > upperbound, there is no dependence.; // If i = 0 (i.e., if c1 = c2), there's a dependence with distance = 0.; // If i = upperbound, there's a dependence with distance = 0.; // If i is integral, there's a dependence (all directions).; // If the non-integer part = 1/2, there's a dependence (<> directions).; // Otherwise, there's no dependence.; //; // Can prove independence. Failing that,; // can sometimes refine the directions.; // Can determine iteration for splitting.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:66,Test,Testing,66,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['Test', 'test']","['Testing', 'test']"
Testability,"// weakZeroDstSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.2; //; // When we have a pair of subscripts of the form [c1 + a*i] and [c2],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the; // Weak-Zero SIV test.; //; // Given; //; // c1 + a*i = c2; //; // we get; //; // i = (c2 - c1)/a; //; // If i is not an integer, there's no dependence.; // If i < 0 or > UB, there's no dependence.; // If i = 0, the direction is <= and peeling the; // 1st iteration will break the dependence.; // If i = UB, the direction is >= and peeling the; // last iteration will break the dependence.; // Otherwise, the direction is *.; //; // Can prove independence. Failing that, we can sometimes refine; // the directions. Can sometimes show that first or last; // iteration carries all the dependences (so worth peeling).; //; // (see also weakZeroSrcSIVtest); //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:65,Test,Testing,65,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['Test', 'test']","['Testing', 'test']"
Testability,"// weakZeroSrcSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.2; //; // When we have a pair of subscripts of the form [c1] and [c2 + a*i],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the; // Weak-Zero SIV test.; //; // Given; //; // c1 = c2 + a*i; //; // we get; //; // (c1 - c2)/a = i; //; // If i is not an integer, there's no dependence.; // If i < 0 or > UB, there's no dependence.; // If i = 0, the direction is >= and peeling the; // 1st iteration will break the dependence.; // If i = UB, the direction is <= and peeling the; // last iteration will break the dependence.; // Otherwise, the direction is *.; //; // Can prove independence. Failing that, we can sometimes refine; // the directions. Can sometimes show that first or last; // iteration carries all the dependences (so worth peeling).; //; // (see also weakZeroDstSIVtest); //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:65,Test,Testing,65,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['Test', 'test']","['Testing', 'test']"
Testability,"// what about nested types?; // Note: The split of CXXDecl information here is intentional, the; // gdb tests will depend on a certain ordering at printout. The debug; // information offsets are still correct if we merge them all together; // though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:104,test,tests,104,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['test'],['tests']
Testability,"// when running this test order is important for random number. Need to keep same order as; // in reference file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,test,test,21,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// when several points as same X differs, need complete logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:56,log,logic,56,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// when several points at same X differs, need complete logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:56,log,logic,56,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// when using analytical gradient use as step size a dummy value of 1; // maybe could do better using user given parameter step sizes; // tested using inverse of G2() gives worse behaviour",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NegativeG2LineSearch.cxx:138,test,tested,138,math/minuit2/src/NegativeG2LineSearch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NegativeG2LineSearch.cxx,1,['test'],['tested']
Testability,"// why evaluate the last point again, can't we cache it?; // kbelasco: commenting out lines below to add/test caching support; //RooStats::SetParameters(&x, &fParameters);; //xL = fFunction->getVal();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:105,test,test,105,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['test'],['test']
Testability,"// without mathcore pdf are missing so skip cdf test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:48,test,test,48,math/mathmore/test/testStatFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx,1,['test'],['test']
Testability,"// write test tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:9,test,test,9,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,2,['test'],['test']
Testability,"// write test/training trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:9,test,test,9,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,2,['test'],['test']
Testability,"// x86 256-bit horizontal ops are defined in a non-obvious way. Each 128-bit; // half of the result is calculated independently from the 128-bit halves of; // the inputs, so that makes the index-checking logic below more complicated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:204,log,logic,204,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// xRooNode tests;; // for(int i=0;i<ir->ArraySize();i++) {; // tests.push_back(std::make_shared<xRooNode>(TString::Format(""%g"",ir->GetXValue(i)),*ir->GetResult(i),*this));; // }; // appendChildren(tests);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:12,test,tests,12,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,3,['test'],['tests']
Testability,// xor/add with SMIN (signmask) are logically equivalent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,log,logically,36,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logically']
Testability,"// you plot for the individual classifiers. Note, here the ""statistics"" still need to be calculated as you are in the testing phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:118,test,testing,118,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['test'],['testing']
Testability,"// {'deviance', 'exponential'}, optional (default='deviance'); //loss function to be optimized. 'deviance' refers to; //deviance (= logistic regression) for classification; //with probabilistic outputs. For loss 'exponential' gradient; //boosting recovers the AdaBoost algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:132,log,logistic,132,tmva/pymva/inc/TMVA/MethodPyGTB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h,1,['log'],['logistic']
Testability,"// {dHi, dLo} = {aHi, aLo} >> Amt; // - if (Amt>=size) then; // dLo = aHi >> (Amt-size); // dHi = aHi >> Amt (this is either all 0 or all 1); // else; // dLo = (aLo >>logic Amt) | (aHi << (size-Amt)); // dHi = aHi >> Amt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:167,log,logic,167,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['log'],['logic']
Testability,"// | testOptDebug;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:5,test,testOptDebug,5,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['testOptDebug']
Testability,"// |Remainder| is always <= |Dividend|. If D is 32-bit, then so is R.; // DIV doesn't work because of the edge case 0xf..f 8000 0000 / (long)-1; // Logical operations use a sign extended 12-bit immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:148,Log,Logical,148,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['Log'],['Logical']
Testability,"// ||||||||||||||||||||||||||END MC LOOP|||||||||||||||||||||||||||||; //------------------------------------------------------------------; //--- predefine logics of searching for the best division edge ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:157,log,logics,157,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['log'],['logics']
Testability,"// ~raw_ostream asserts that the buffer is empty. This isn't necessary; // with raw_null_ostream, but it's better to have raw_null_ostream follow; // the rules than to change the rules just for raw_null_ostream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:16,assert,asserts,16,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,1,['assert'],['asserts']
Testability,"//! cache logicals during scene rebuilds",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScenePad.h:10,log,logicals,10,graf3d/gl/inc/TGLScenePad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScenePad.h,1,['log'],['logicals']
Testability,"//! cache logicals during scene rebuilds; // Debug tracing (for scene rebuilds)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h:10,log,logicals,10,graf3d/gl/inc/TGLViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h,1,['log'],['logicals']
Testability,"//! message logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:12,log,logger,12,tmva/tmva/inc/TMVA/FitterBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h,7,['log'],['logger']
Testability,"//! message logger, static to save resources",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:12,log,logger,12,tmva/tmva/src/TNeuron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx,2,['log'],['logger']
Testability,"//! output stream to save logging information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:26,log,logging,26,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,1,['log'],['logging']
Testability,"//! temporary event when testing on a different DataSet than the own one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:25,test,testing,25,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['test'],['testing']
Testability,"//! the associated logical shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLPhysicalShape.h:19,log,logical,19,graf3d/gl/inc/TGLPhysicalShape.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLPhysicalShape.h,1,['log'],['logical']
Testability,"//#define TABLE_TRIM_BLANK 1; // Debug must be turned on for testing to work.; //#define DEBUG",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:61,test,testing,61,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['test'],['testing']
Testability,"//#define TEST_STATIC_CHECK // for testing compiler failures (static check)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:35,test,testing,35,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['testing']
Testability,"//#ifndef __CINT__; // int main() {; // testUserFunc( );; //}; //#endif",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testUserFunc.cxx:40,test,testUserFunc,40,math/minuit2/test/testUserFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testUserFunc.cxx,1,['test'],['testUserFunc']
Testability,"//%test.%d = icmp eq i8 %tape.%d, 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,test,test,3,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,1,['test'],['test']
Testability,"//%test.%d = icmp uge i8 *%head.%d, %arrmax",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,test,test,3,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,1,['test'],['test']
Testability,"//%test.%d = icmp ult i8 *%head.%d, %arr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,test,test,3,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,1,['test'],['test']
Testability,"//%test.%d = or i1 %test.%d, %test.%d",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,test,test,3,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,3,['test'],['test']
Testability,"//*******************************************************************************************************************; // GenVector tests; //*******************************************************************************************************************; // trait for getting vector name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:132,test,tests,132,math/mathcore/test/stress/VectorTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h,2,['test'],['tests']
Testability,"//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // RooStats Unit Test S.T.R.E.S.S. Suite //; // Authors: Ioan Gabriel Bucur, Lorenzo Moneta, Wouter Verkerke //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; ////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:105,Test,Test,105,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"//- Copy memoryview buffers =================================================; // The functions in this section take a source and a destination buffer; // with the same logical structure: format, itemsize, ndim and shape; // are identical, with ndim > 0.; // Check for the presence of suboffsets in the first dimension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:169,log,logical,169,bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,1,['log'],['logical']
Testability,"//- X86Insertwait.cpp - Strict-Fp:Insert wait instruction X87 instructions --//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the pass which insert x86 wait instructions after each; // X87 instructions when strict float is enabled.; //; // The logic to insert a wait instruction after an X87 instruction is as below:; // 1. If the X87 instruction don't raise float exception nor is a load/store; // instruction, or is a x87 control instruction, don't insert wait.; // 2. If the X87 instruction is an instruction which the following instruction; // is an X87 exception synchronizing X87 instruction, don't insert wait.; // 3. For other situations, insert wait instruction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InsertWait.cpp:518,log,logic,518,interpreter/llvm-project/llvm/lib/Target/X86/X86InsertWait.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InsertWait.cpp,1,['log'],['logic']
Testability,"//- helpers for testing array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx:16,test,testing,16,bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,2,['test'],['testing']
Testability,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:95,test,test,95,test/stressShapes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx,5,['test'],['test']
Testability,"//---- System Logging ---------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/unix/inc/TUnixSystem.h:14,Log,Logging,14,core/unix/inc/TUnixSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/inc/TUnixSystem.h,1,['Log'],['Logging']
Testability,"//---- System Logging ----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Open connection to system log daemon. For the use of the options and; /// facility see the Unix openlog man page.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:14,Log,Logging,14,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,2,"['Log', 'log']","['Logging', 'log']"
Testability,"//----- Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:39,test,test,39,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,1,['test'],['test']
Testability,"//--------- create Tab widget and some composite frames for Tab testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:64,test,testing,64,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,2,['test'],['testing']
Testability,"//--------------------------------------------------------------------------------------; // test of Svector of dim 3 or 4; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,test,test,93,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"//--------------------------------------------------------------------------------------; // test of a track an object containing vector and matrices; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,test,test,93,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"//--------------------------------------------------------------------------------------; // test of all physics vector (GenVector's); //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,test,test,93,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"//--------------------------------------------------------------------------------------; // test of generic SMatrix; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,test,test,93,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"//--------------------------------------------------------------------------------------; // test of generic Svector; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx:93,test,test,93,math/mathcore/test/stress/testSVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx,2,['test'],['test']
Testability,//------------------------------------------------------------------------------; // Utilities to work with Benchmark measures.; // A class that measures stats over benchmark measures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:108,Benchmark,Benchmark,108,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,//-------------------------------------------------------------------------; // 2.5.1.4 Arithmetic and Logical Operations.; //-------------------------------------------------------------------------,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVLocation.cpp:103,Log,Logical,103,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVLocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVLocation.cpp,1,['Log'],['Logical']
Testability,"//------------------------------------------------------------------------; // Test allocation functions and compatibility check; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:79,Test,Test,79,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,2,['Test'],['Test']
Testability,"//------------------------------------------------------------------------====//; // High-level ""driver"" logic for uninitialized values analysis.; //====------------------------------------------------------------------------//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:105,log,logic,105,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['log'],['logic']
Testability,"//----------------------------------------------------------------------; // Methods for handling the chain of uses of this Value.; //; // Materializing a function can introduce new uses, so these methods come in; // two variants:; // The methods that start with materialized_ check the uses that are; // currently known given which functions are materialized. Be very careful; // when using them since you might not get all uses.; // The methods that don't start with materialized_ assert that modules is; // fully materialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:483,assert,assert,483,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['assert'],['assert']
Testability,"//------------------------------------------------------------------; //--- predefine logics of searching for the best division edge ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:86,log,logics,86,tmva/tmva/src/PDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx,1,['log'],['logics']
Testability,"/// ""Cast"" to type T, asserting if we don't have an implicit conversion.; /// We use this to put code in a template that will only be valid for certain; /// instantiations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:22,assert,asserting,22,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['assert'],['asserting']
Testability,"/// ------------------------------------------------------------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// E",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:106,log,logic,106,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,1,['log'],['logic']
Testability,"/// < Invalid indicates there is no way to represent the cost as a; /// numeric value. This state exists to represent a possible issue,; /// e.g. if the cost-model knows the operation cannot be expanded; /// into a valid code-sequence by the code-generator. While some; /// passes may assert that the calculated cost must be valid, it is; /// up to individual passes how to interpret an Invalid cost. For; /// example, a transformation pass could choose not to perform a; /// transformation if the resulting cost would end up Invalid.; /// Because some passes may assert a cost is Valid, it is not; /// recommended to use Invalid costs to model 'Unknown'.; /// Note that Invalid is semantically different from a (very) high,; /// but valid cost, which intentionally indicates no issue, but; /// rather a strong preference not to select a certain operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:285,assert,assert,285,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,2,['assert'],['assert']
Testability,"/// @brief Dumps a macro ""filename.C"" that can be used to test and debug the generated code and gradient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFuncWrapper.cxx:58,test,test,58,roofit/roofitcore/src/RooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFuncWrapper.cxx,1,['test'],['test']
Testability,"/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; /// through a TCollection. This requires the collection to contain elements; /// of the type requested (or a derived class). Any deviation from this expectation; /// will only be caught/reported by an assert in debug builds.; ///; /// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:282,assert,assert,282,core/cont/inc/TCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h,1,['assert'],['assert']
Testability,"/// @}; /// @name Convenience Predicates; /// @{; /// Test whether the architecture is 64-bit; ///; /// Note that this tests for 64-bit pointer width, and nothing else. Note; /// that we intentionally expose only three predicates, 64-bit, 32-bit, and; /// 16-bit. The inner details of pointer width for particular architectures; /// is not summed up in the triple, and so only a coarse grained predicate; /// system is provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:54,Test,Test,54,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,2,"['Test', 'test']","['Test', 'tests']"
Testability,"/// @}; /// Switch to a new logical file. This is used to implement the '.file; /// ""foo.c""' assembler directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:28,log,logical,28,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['log'],['logical']
Testability,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:69,log,logical,69,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,"['Log', 'log']","['LogicalTy', 'logical']"
Testability,/// @}; /// The function that computes the number of loop iterations. Can be evaluated; /// before entering the loop but after the syntactical loop's init; /// statement(s).; ///; /// Function signature: void(LogicalTy &Result); /// Any values necessary to compute the distance are captures of the closure.; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:209,Log,LogicalTy,209,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['Log'],['LogicalTy']
Testability,/// @}; /// \name Mathematics Operations; /// @{; /// \returns the floor log base 2 of this APInt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:73,log,log,73,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['log']
Testability,/// @}; /// \name Target Relaxation Interfaces; /// @{; /// Check whether the given instruction may need relaxation.; ///; /// \param Inst - The instruction to test.; /// \param STI - The MCSubtargetInfo in effect when the instruction was; /// encoded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:160,test,test,160,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,1,['test'],['test']
Testability,"/// @}; /// \name Value Tests; /// @{; /// Determine if this APInt just has one word to store value.; ///; /// \returns true if the number of bits <= 64, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:24,Test,Tests,24,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['Test'],['Tests']
Testability,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:25,test,test,25,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,['test'],['test']
Testability,"/// A 32-bit GOT delta.; ///; /// Delta from the global offset table to the target.; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int32; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:188,ASSERT,ASSERTION,188,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,1,['ASSERT'],['ASSERTION']
Testability,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:50,stub,stub,50,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,4,['stub'],['stub']
Testability,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:50,stub,stub,50,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,4,['stub'],['stub']
Testability,"/// A 64-bit GOT delta.; ///; /// Delta from the global offset table to the target; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int64; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:187,ASSERT,ASSERTION,187,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,1,['ASSERT'],['ASSERTION']
Testability,"/// A Clang configuration for end-to-end tests that can be converted to; /// command line arguments for the driver.; ///; /// The configuration is represented as typed, named values, making it easier; /// and safer to work with compared to an array of string command line flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h:41,test,tests,41,interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h,1,['test'],['tests']
Testability,"/// A ExecutorProcessControl instance that asserts if any of its methods are; /// used. Suitable for use is unit tests, and by ORC clients who haven't moved; /// to ExecutorProcessControl-based APIs yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:43,assert,asserts,43,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,2,"['assert', 'test']","['asserts', 'tests']"
Testability,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:523,ASSERT,ASSERTION,523,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32/ targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:524,ASSERT,ASSERTION,524,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to Delta64 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta64 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:523,ASSERT,ASSERTION,523,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to Page20 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page20 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT/PLT builder pass inserted; /// by default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:525,ASSERT,ASSERTION,525,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to Page21 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page21 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:521,ASSERT,ASSERTION,521,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to Pageoffset12 pointing at; /// the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:533,ASSERT,ASSERTION,533,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadREXRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadREXRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:561,ASSERT,ASSERTION,561,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:555,ASSERT,ASSERTION,555,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta32FromGOT pointing at the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32FromGOT; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:559,ASSERT,ASSERTION,559,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta64FromGOT; /// pointing at the GOT entry for the original target; ///; /// Indicates that this edge should be transformed into a Delta64FromGOT; /// targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:563,ASSERT,ASSERTION,563,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,/// A IFunc stub and its original symbol,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:12,stub,stub,12,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stub']
Testability,"/// A MLModelRunner that asks for advice from an external agent, or host. It; /// uses 2 files - ideally named pipes - one to send data to that agent, and; /// one to receive advice.; /// The data exchange uses the training logger (Utils/TrainingLogger.h) format.; /// Specifically, the compiler will send the log header, set the context, and; /// send observations; the host is expected to reply with a tensor value after; /// each observation as a binary buffer that's conforming to the shape of the; /// advice. Interleaved, the data closely resembles the training log for a; /// log where we don't capture the reward signal.; ///; /// Note that the correctness of the received data is the responsibility of the; /// host. In particular, if insufficient data were sent, the compiler will block; /// when waiting for an advice.; ///; /// Note that the host can either open the pipes RW, or open first the pipe to; /// the compiler - i.e. the ""Inbound"" - and then the ""Outbound"", to avoid; /// deadlock. This is because the compiler first tries to open the inbound; /// (which will hang until there's a writer on the other end).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InteractiveModelRunner.h:224,log,logger,224,interpreter/llvm-project/llvm/include/llvm/Analysis/InteractiveModelRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InteractiveModelRunner.h,4,['log'],"['log', 'logger']"
Testability,"/// A SAT solver that is an implementation of Algorithm D from Knuth's The Art; /// of Computer Programming Volume 4: Satisfiability, Fascicle 6. It is based on; /// the Davis-Putnam-Logemann-Loveland (DPLL) algorithm, keeps references to a; /// single ""watched"" literal per clause, and uses a set of ""active"" variables; /// for unit propagation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h:183,Log,Logemann-Loveland,183,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h,1,['Log'],['Logemann-Loveland']
Testability,"/// A TLSDesc entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLSDesc entry for the edge's current target. A TLSDesc entry for the; /// target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:347,ASSERT,ASSERTION,347,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A TLSDesc entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLSDesc entry for the edge's current target. A TLSDesc entry; /// for the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:359,ASSERT,ASSERTION,359,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A TLVP entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLVP entry for the edge's current target. A TLVP entry for the target; /// should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:338,ASSERT,ASSERTION,338,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A TLVP entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLVP entry for the edge's current target. A TLVP entry for; /// the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:350,ASSERT,ASSERTION,350,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A TLVP entry getter/constructor, transformed to; /// Delta32ToTLVPLoadREXRelaxable.; ///; /// Indicates that this edge should be transformed into a; /// Delta32ToTLVPLoadREXRelaxable targeting the TLVP entry for the edge's; /// current target. A TLVP entry for the target should be created if one does; /// not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:394,ASSERT,ASSERTION,394,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['ASSERT', 'assert']","['ASSERTION', 'assert']"
Testability,"/// A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups.; ///; /// The purpose of this class is to keep the responsibilities separate between; /// the TMemoryRegulator logic and the rest of ROOT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TMemoryRegulator.h:60,log,logic,60,bindings/pyroot/pythonizations/src/TMemoryRegulator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TMemoryRegulator.h,2,['log'],['logic']
Testability,"/// A Trace object represents the records that have been loaded from XRay; /// log files generated by instrumented binaries. We encapsulate the logic of; /// reading the traces in factory functions that populate the Trace object; /// appropriately.; ///; /// Trace objects provide an accessor to an XRayFileHeader which says more about; /// details of the file from which the XRay trace was loaded from.; ///; /// Usage:; ///; /// if (auto TraceOrErr = loadTraceFile(""xray-log.something.xray"")) {; /// auto& T = *TraceOrErr;; /// // T.getFileHeader() will provide information from the trace header.; /// for (const XRayRecord &R : T) {; /// // ... do something with R here.; /// }; /// } else {; /// // Handle the error here.; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h:79,log,log,79,interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h,3,['log'],"['log', 'logic']"
Testability,/// A ^ B can be specified using other logic ops in a variety of patterns. We; /// can fold these early and efficiently by morphing an existing instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:39,log,logic,39,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"/// A base class for data structure classes wishing to make iterators; /// (""handles"") pointing into themselves fail-fast. When building without; /// asserts, this class is empty and does nothing.; ///; /// DebugEpochBase does not by itself track handles pointing into itself. The; /// expectation is that routines touching the handles will poll on; /// isHandleInSync at appropriate points to assert that the handle they're using; /// is still valid.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:150,assert,asserts,150,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,2,['assert'],"['assert', 'asserts']"
Testability,"/// A base class for iterator classes (""handles"") that wish to poll for; /// iterator invalidating modifications in the underlying data structure.; /// When LLVM is built without asserts, this class is empty and does nothing.; ///; /// HandleBase does not track the parent data structure by itself. It expects; /// the routines modifying the data structure to call incrementEpoch when they; /// make an iterator-invalidating modification.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:179,assert,asserts,179,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,1,['assert'],['asserts']
Testability,/// A base class that handles reading serialized diagnostics from a file.; ///; /// Subclasses should override the visit* methods with their logic for handling; /// the various constructs that are found in serialized diagnostics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h:141,log,logic,141,interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h,1,['log'],['logic']
Testability,/// A bitmap representing the executed test vectors for a boolean expression.; /// Each index of the bitmap corresponds to a possible test vector. An index; /// with a bit value of '1' indicates that the corresponding Test Vector; /// identified by that index was executed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:39,test,test,39,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,3,"['Test', 'test']","['Test', 'test']"
Testability,"/// A class encapsulating the logic related to analyzing XRay traces, producting; /// Graphs from them and then exporting those graphs for review.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:30,log,logic,30,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,1,['log'],['logic']
Testability,/// A class that transforms the DWARF in a DWARFContext into GSYM information; /// by populating the GsymCreator object that it is constructed with. This; /// class supports converting all DW_TAG_subprogram DIEs into; /// gsym::FunctionInfo objects that includes line table information and inline; /// function information. Creating a separate class to transform this data; /// allows this class to be unit tested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:407,test,tested,407,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,1,['test'],['tested']
Testability,/// A class which encapsulates the logic for delaying diagnostics; /// during parsing and other processing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,log,logic,35,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['log'],['logic']
Testability,/// A cluster of cases suitable for bit test lowering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h:40,test,test,40,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,1,['test'],['test']
Testability,/// A container for a CompilerInstance (possibly with an ExternalASTMerger; /// attached to its ASTContext).; ///; /// Provides an accessor for the DeclContext origins associated with the; /// ExternalASTMerger (or an empty list of origins if no ExternalASTMerger is; /// attached).; ///; /// This is the main unit of parsed source code maintained by clang-import-test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp:364,test,test,364,interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp,1,['test'],['test']
Testability,/// A convenience function to check that an Init refers to a dag whose operator; /// is a def that is a subclass of the given class and coerce it to a dag if it; /// is. This is primarily useful for testing for subclasses of GIDefKind and; /// similar in DagInit's since DagInit's support any type inside them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h:199,test,testing,199,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,1,['test'],['testing']
Testability,/// A convenience function to check that an Init refers to a dag whose operator; /// is a specific def and coerce it to a dag if it is. This is primarily useful; /// for testing for subclasses of GIDefKind and similar in DagInit's since; /// DagInit's support any type inside them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h:170,test,testing,170,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,1,['test'],['testing']
Testability,/// A convenience function to check that an Init refers to a def that is a; /// subclass of the given class and coerce it to a def if it is. This is; /// primarily useful for testing for subclasses of GIDefKind and similar in; /// DagInit's since DagInit's support any type inside them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h:175,test,testing,175,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,1,['test'],['testing']
Testability,/// A convenience function to check that an Init refers to a specific def. This; /// is primarily useful for testing for defs and similar in DagInit's since; /// DagInit's support any type inside them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h:109,test,testing,109,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CombinerUtils.h,1,['test'],['testing']
Testability,"/// A custom IRBuilder inserter which prefixes all names, but only in; /// Assert builds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:75,Assert,Assert,75,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Assert'],['Assert']
Testability,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:522,assert,assertion,522,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,2,['assert'],['assertion']
Testability,"/// A flag for test, so we can print the content of the advisor when running it; /// as part of the default (e.g. -O3) pipeline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp:15,test,test,15,interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,1,['test'],['test']
Testability,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:161,log,logic,161,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['log'],['logic']
Testability,"/// A generalized component for tracking expressions, values, and stores.; ///; /// Tracker aimes at providing a sensible set of default behaviors that can be; /// used by any checker, while providing mechanisms to hook into any part of the; /// tracking process and insert checker-specific logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:291,log,logic,291,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,1,['log'],['logic']
Testability,/// A generation counter that is used to test whether modules of the; /// same name may shadow or are illegal redefinitions.; ///; /// Modules from earlier scopes may shadow modules from later ones.; /// Modules from the same scope may not have the same name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:41,test,test,41,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['test'],['test']
Testability,"/// A hacky area where the inliner can retain history about inlining; /// decisions that mutated the call graph's SCC structure in order to avoid; /// infinite inlining. See the comments in the inliner's CG update logic.; ///; /// FIXME: Keeping this here seems like a big layering issue, we should look; /// for a better technique.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:214,log,logic,214,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['log'],['logic']
Testability,/// A helper class for matching addressing modes.; ///; /// This encapsulates the logic for matching the target-legal addressing modes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:82,log,logic,82,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['log'],['logic']
Testability,/// A helper class that contains everything needed to construct a; /// PathDiagnostic object. It does no much more then providing convenient; /// getters and some well placed asserts for extra security.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:175,assert,asserts,175,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['assert'],['asserts']
Testability,/// A logger is notified as the analysis progresses.; /// It can produce a report of the analysis's findings and how it came to them.; ///; /// The framework reports key structural events (e.g. traversal of blocks).; /// The specific analysis can add extra details to be presented in context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:6,log,logger,6,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['log'],['logger']
Testability,/// A logger that builds an HTML UI to inspect the analysis results.; /// Each function's analysis is written to a stream obtained from the factory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:6,log,logger,6,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['log'],['logger']
Testability,/// A logger that simply writes messages to the specified ostream in real; /// time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:6,log,logger,6,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['log'],['logger']
Testability,"/// A mock class satisfying the interface expected by ReleaseModeModelRunner for; /// its `TGen` parameter. Useful to avoid conditional compilation complexity, as; /// a compile-time replacement for a real AOT-ed model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ReleaseModeModelRunner.h:6,mock,mock,6,interpreter/llvm-project/llvm/include/llvm/Analysis/ReleaseModeModelRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ReleaseModeModelRunner.h,1,['mock'],['mock']
Testability,/// A module file extension used for testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h:37,test,testing,37,interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h,1,['test'],['testing']
Testability,"/// A module file extension used for testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingRdictModuleFileExtension.h:37,test,testing,37,core/metacling/src/TClingRdictModuleFileExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingRdictModuleFileExtension.h,1,['test'],['testing']
Testability,"/// A node in the call graph.; ///; /// This represents a single node. Its primary roles are to cache the list of; /// callees, de-duplicate and provide fast testing of whether a function is a; /// callee, and facilitate iteration of child nodes in the graph.; ///; /// The node works much like an optional in order to lazily populate the; /// edges of each node. Until populated, there are no edges. Once populated,; /// you can access the edges by dereferencing the node or using the `->`; /// operator as if the node was an `std::optional<EdgeSequence>`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:158,test,testing,158,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['test'],['testing']
Testability,/// A number of methods setting various linking options:; /// Allows to generate log of linking process to the standard output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:81,log,log,81,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,1,['log'],['log']
Testability,/// A number of methods setting various linking options:; /// Enable logging to standard output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:69,log,logging,69,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,1,['log'],['logging']
Testability,/// A pass which prints the call graph to a \c raw_ostream.; ///; /// This is primarily useful for testing the analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:99,test,testing,99,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['test'],['testing']
Testability,"/// A property of the node order in swing-modulo-scheduling is; /// that for nodes outside circuits the following holds:; /// none of them is scheduled after both a successor and a; /// predecessor.; /// The method below checks whether the property is met.; /// If not, debug information is printed and statistics information updated.; /// Note that we do not use an assert statement.; /// The reason is that although an invalid node oder may prevent; /// the pipeliner from finding a pipelined schedule for arbitrary II,; /// it does not lead to the generation of incorrect code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:367,assert,assert,367,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['assert'],['assert']
Testability,"/// A proxy from a \c FunctionAnalysisManager to an \c SCC.; ///; /// When a module pass runs and triggers invalidation, both the CGSCC and; /// Function analysis manager proxies on the module get an invalidation event.; /// We don't want to fully duplicate responsibility for most of the; /// invalidation logic. Instead, this layer is only responsible for SCC-local; /// invalidation events. We work with the module's FunctionAnalysisManager to; /// invalidate function analyses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:307,log,logic,307,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['log'],['logic']
Testability,"/// A pseudo model runner. We use it to store feature values when collecting; /// logs for the default policy, in 'development' mode, but never ask it to; /// 'run'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/NoInferenceModelRunner.h:82,log,logs,82,interpreter/llvm-project/llvm/include/llvm/Analysis/NoInferenceModelRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/NoInferenceModelRunner.h,1,['log'],['logs']
Testability,"/// A quotient and remainder, plus a BB from which they logically ""originate"".; /// If you use Quotient or Remainder in a Phi node, you should use BB as its; /// corresponding predecessor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp:56,log,logically,56,interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp,1,['log'],['logically']
Testability,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:203,stub,stub,203,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,['stub'],['stub']
Testability,/// A set of test selection ranges specified in one file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h:13,test,test,13,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,1,['test'],['test']
Testability,"/// A source selection range that's specified in a test file using an inline; /// command in the comment. These commands can take the following forms:; ///; /// - /*range=*/ will create an empty selection range in the default group; /// right after the comment.; /// - /*range a=*/ will create an empty selection range in the 'a' group right; /// after the comment.; /// - /*range = +1*/ will create an empty selection range at a location that's; /// right after the comment with one offset to the column.; /// - /*range= -> +2:3*/ will create a selection range that starts at the; /// location right after the comment, and ends at column 3 of the 2nd line; /// after the line of the starting location.; ///; /// Clang-refactor will expected all ranges in one test group to produce; /// identical results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h:51,test,test,51,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,2,['test'],['test']
Testability,"/// A stable hash value for machine instructions.; /// Returns 0 if no stable hash could be computed.; /// The hashing and equality testing functions ignore definitions so this is; /// useful for CSE, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStableHash.cpp:132,test,testing,132,interpreter/llvm-project/llvm/lib/CodeGen/MachineStableHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStableHash.cpp,1,['test'],['testing']
Testability,/// A string of length 0 or more whose begin() points to the logical location; /// of the token in the input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:61,log,logical,61,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['log'],['logical']
Testability,/// A struct to generically describe a bit test intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:43,test,test,43,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['test'],['test']
Testability,/// A temporary-object class for building up log messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.h:45,log,log,45,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.h,1,['log'],['log']
Testability,/// A type into which \c ParamIdx can be serialized.; ///; /// A static assertion that it's of the correct size follows the \c ParamIdx; /// class definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h:72,assert,assertion,72,interpreter/llvm-project/clang/include/clang/AST/Attr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h,1,['assert'],['assertion']
Testability,"/// A utility class to create COFF dllimport GOT symbols (__imp_*) and PLT; /// stubs.; ///; /// If an instance of this class is attached to a JITDylib as a fallback; /// definition generator, PLT stubs and dllimport __imp_ symbols will be; /// generated for external symbols found outside the given jitdylib. Currently; /// only supports x86_64 architecture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:80,stub,stubs,80,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,2,['stub'],['stubs']
Testability,/// A utility pass template that simply runs another pass multiple times.; ///; /// This can be useful when debugging or testing passes. It also serves as an; /// example of how to extend the pass manager in ways beyond composition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:121,test,testing,121,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['test'],['testing']
Testability,"/// A variant of MLInlineAdvice that tracks all non-trivial inlining; /// decisions, for training/logging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp:98,log,logging,98,interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,1,['log'],['logging']
Testability,"/// A vector of macros which are used to open namespace blocks.; ///; /// These are expected to be macros of the form:; /// \code; /// NAMESPACE(<namespace-name>, ...) {; /// <namespace-content>; /// }; /// \endcode; ///; /// For example: TESTSUITE; /// \version 9",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:239,TEST,TESTSUITE,239,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['TEST'],['TESTSUITE']
Testability,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:835,test,test,835,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,3,"['Test', 'test']","['Test', 'test']"
Testability,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:68,log,logic,68,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"/// A wrapper around a string literal that serves as a proxy for constructing; /// global tables of StringRefs with the length computed at compile time.; /// In order to avoid the invocation of a global constructor, StringLiteral; /// should *only* be used in a constexpr context, as such:; ///; /// constexpr StringLiteral S(""test"");; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:327,test,test,327,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,1,['test'],['test']
Testability,/// A wrapper around identifyObject that additionally asserts that; /// the object is indeed within the allocator.; /// \return An index uniquely and reproducibly identifying; /// an input pointer \p Ptr in the given allocator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h:54,assert,asserts,54,interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h,1,['assert'],['asserts']
Testability,/// A wrapper object for maintaining stacks to track the resursive AST visitor; /// walks for the purpose of assigning IDs to leaf-level conditions measured by; /// MC/DC. The object is created with a reference to the MCDCBitmapMap that was; /// created during the initial AST walk. The presence of a bitmap associated; /// with a boolean expression (top-level logical operator nest) indicates that; /// the boolean expression qualified for MC/DC. The resulting condition IDs; /// are preserved in a map reference that is also provided during object; /// creation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:361,log,logical,361,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['log'],['logical']
Testability,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:17,stub,stubs,17,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,5,"['Stub', 'stub']","['Stub', 'Stubs', 'StubsFlavor', 'stub', 'stubs']"
Testability,"/// AArch64 pointer jump stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// ADRP x16, ptr@page21; /// LDR x16, [x16, ptr@pageoff12]; /// BR x16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:25,stub,stub,25,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,1,['stub'],['stub']
Testability,"/// ABI support base class. Used to write resolver, stub, and trampoline; /// blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:52,stub,stub,52,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,1,['stub'],['stub']
Testability,"/// Abstract class used to represent an insertion point in a CFG.; /// This class records an insertion point and materializes it on; /// demand.; /// It allows to reason about the frequency of this insertion point,; /// without having to logically materialize it (e.g., on an edge),; /// before we actually need to insert something.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:238,log,logically,238,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['log'],['logically']
Testability,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:42,stub,stubs,42,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,3,['stub'],['stubs']
Testability,"/// Actual executed Test Vectors for the boolean expression, based on; /// ExecutedTestVectorBitmap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:20,Test,Test,20,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['Test'],['Test']
Testability,/// Add a declaration to these results with its natural access.; /// Does not test the acceptance criteria.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:78,test,test,78,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['test'],['test']
Testability,/// Add a declaration to these results with the given access.; /// Does not test the acceptance criteria.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:76,test,test,76,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['test'],['test']
Testability,"/// Add a record, foreach loop, or assertion to the current context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:35,assert,assertion,35,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['assert'],['assertion']
Testability,/// Add a type test to the summary. This is used by WholeProgramDevirt if we; /// were unable to devirtualize a checked call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,test,test,15,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,/// Add empty line only when access modifier starts a new logical block.; /// Logical block is a group of one or more member fields or functions.; /// \code; /// struct foo {; /// private:; /// int i;; ///; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; ///; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:58,log,logical,58,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,"['Log', 'log']","['Logical', 'logical']"
Testability,"/// Add other KahanSum into accumulator. Does not vectorise.; ///; /// Based on KahanIncrement from:; /// Y. Tian, S. Tatikonda and B. Reinwald, ""Scalable and Numerically Stable Descriptive Statistics in SystemML,"" 2012 IEEE 28th International Conference on Data Engineering, 2012, pp. 1351-1359, doi: 10.1109/ICDE.2012.12.; /// Note that while Tian et al. add the carry in the first step, we subtract; /// the carry, in accordance with the Add(Indexed) implementation(s) above.; /// This is purely an implementation choice that has no impact on performance.; ///; /// \note Take care when using += (and -=) to add other KahanSums into a zero-initialized; /// KahanSum. The operator behaves correctly in this case, but the result may be slightly; /// off if you expect 0 + x to yield exactly x (where 0 is the zero-initialized KahanSum; /// and x another KahanSum). In particular, x's carry term may get lost. This doesn't; /// just happen with zero-initialized KahanSums; see the SubtractWithABitTooSmallCarry; /// test case in the testKahan unittest for other examples. This behavior is internally; /// consistent: the carry also gets lost if you switch the operands and it also happens with; /// other KahanSum operators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:1016,test,test,1016,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,2,['test'],"['test', 'testKahan']"
Testability,/// AddImplicitInclude - Add an implicit \#include of the specified file to the; /// predefines buffer.; /// As these includes are generated by -include arguments the header search; /// logic is going to search relatively to the current working directory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp:186,log,logic,186,interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,1,['log'],['logic']
Testability,"/// AddOperand - Add the specified operand to the specified machine instr. II; /// specifies the instruction information for the node, and IIOpNum is the; /// operand number (in the II) that we are adding. IIOpNum and II are used for; /// assertions only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:239,assert,assertions,239,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,1,['assert'],['assertions']
Testability,"/// Adds an interval [a, b) to the collection of the instance.; ///; /// When adding [a, b[ to the collection, the operation merges the; /// adjacent intervals. For example; ///; /// 0 1 2 3 4 5 6 7 8 9 10; /// [-----) [--) [--); /// + [--); /// = [-----------) [--); ///; /// To be able to debug duplicate resource usage, the function has; /// assertion that checks that no interval should be added if it; /// overlaps any of the intervals in the collection. We can; /// require this because by definition a \ref ResourceSegments is; /// attached only to an individual resource instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:345,assert,assertion,345,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['assert'],['assertion']
Testability,/// Adds logic in loop entry MBB to calculate loop iteration count and adds; /// t2WhileLoopSetup and t2WhileLoopStart to generate WLS loop,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:9,log,logic,9,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logic']
Testability,"/// Adds logic in the loopBody MBB to generate MVE_VCTP, t2DoLoopDec and; /// t2DoLoopEnd. These are used by later passes to generate tail predicated; /// loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:9,log,logic,9,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logic']
Testability,/// Aliases - Test whether the access represented by tag A may alias the; /// access represented by tag B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:14,Test,Test,14,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['Test'],['Test']
Testability,"/// Align array column and left justify the columns e.g.:; /// \code; /// struct test demo[] =; /// {; /// {56, 23, ""hello""},; /// {-1, 93463, ""world""},; /// {7, 5, ""!!"" }; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:81,test,test,81,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['test'],['test']
Testability,"/// Align array column and right justify the columns e.g.:; /// \code; /// struct test demo[] =; /// {; /// {56, 23, ""hello""},; /// {-1, 93463, ""world""},; /// { 7, 5, ""!!""}; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:82,test,test,82,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['test'],['test']
Testability,"/// All logical column IDs of columns that extend, with additional column representations, fields of the regular; /// header. During serialization, these columns are not picked up as columns of `fFieldIdsOrder`. But instead; /// these columns need to be serialized in the extension header without re-serializing the field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:8,log,logical,8,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['log'],['logical']
Testability,/// Allow disabling BasicAA from the AA results. This is particularly useful; /// when testing to isolate a single AA implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:87,test,testing,87,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['test'],['testing']
Testability,"/// Allows target to override spill slot assignment logic. If implemented,; /// assignCalleeSavedSpillSlots() should assign frame slots to all CSI; /// entries and return true. If this method returns false, spill slots will; /// be assigned using generic implementation. assignCalleeSavedSpillSlots(); /// may add, delete or rearrange elements of CSI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h:52,log,logic,52,interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,1,['log'],['logic']
Testability,"/// Allows us to assert that ASTUnit is not being used concurrently,; /// which is not supported.; ///; /// Clients should create instances of the ConcurrencyCheck class whenever; /// using the ASTUnit in a way that isn't intended to be concurrent, which is; /// just about any usage.; /// Becomes a noop in release mode; only useful for debug mode checking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:17,assert,assert,17,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['assert'],['assert']
Testability,/// An Objective-C property is a logical field of an Objective-C; /// object which is read and written via Objective-C method calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:33,log,logical,33,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,1,['log'],['logical']
Testability,"/// An RPageSink that keeps counters of (vector) commit of (sealed) pages; used to test RPageSinkBuf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage.cxx:83,test,test,83,tree/ntuple/v7/test/ntuple_storage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage.cxx,1,['test'],['test']
Testability,"/// An STL-style algorithm similar to std::for_each that applies a second; /// functor between every pair of elements.; ///; /// This provides the control flow logic to, for example, print a; /// comma-separated list:; /// \code; /// interleave(names.begin(), names.end(),; /// [&](StringRef name) { os << name; },; /// [&] { os << "", ""; });; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:160,log,logic,160,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['log'],['logic']
Testability,"/// An XRayRecord is the denormalized view of data associated in a trace. These; /// records may not correspond to actual entries in the raw traces, but they are; /// the logical representation of records in a higher-level event log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h:171,log,logical,171,interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,2,['log'],"['log', 'logical']"
Testability,/// An alternative way to test if a bit is set or not uses sgt/slt instead of; /// eq/ne.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:26,test,test,26,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['test'],['test']
Testability,"/// An array of index offsets for the given type stream, allowing log(N); /// lookups of a type record by index. Similar to KnownOffsets but only; /// contains offsets for some type indices, some of which may not have; /// ever been visited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:66,log,log,66,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,1,['log'],['log']
Testability,"/// An extension of the MLInlineAdvisor for the 'development' mode, targeting; /// the offline training scenario. Note that training happens outside of the; /// compiler, this facility is concerned with producing training data (""logs"").; /// This InlineAdvisor can operate in the following modes:; ///; /// 1) collect logs for the default policy. This is useful for bootstrapping; /// training, which will be considerably faster by starting from a reasonable; /// policy.; ///; /// 2) collect logs for the ML policy, using a model from a previous; /// training. Potentially, that model uses internally some small random; /// perturbation of its weights, to induce exploration (setting this up is the; /// responsibility of the training algorithm). The logs would then be used to; /// retrain and improve on this model.; ///; /// 3) use the provided model, with no logging. This is useful for end to end; /// validation - the model, in this case, is a release candidate and shouldn't; /// have random perturbations. It is a convenience feature: rather than needing; /// to take the release candidate model and compile it in 'release' mode,; /// validate it, then potentially discard it, it's easier to just pass the model; /// to the compiler, albeit compilation would be slower, as a one-off. Once the; /// model behaves satisfactorily, it can be compiled AOT, for efficiency, in; /// release mode. The expectation is that a well-trained model provides a good; /// policy over a sufficiently diverse codebase, over many changes (i.e.; /// training happens seldom).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp:229,log,logs,229,interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,5,['log'],"['logging', 'logs']"
Testability,/// An external AST source that overrides the layout of; /// a specified set of record types.; ///; /// This class is used only for testing the ability of external AST sources; /// to override the layout of record types. Its input is the output format; /// of the command-line argument -fdump-record-layouts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LayoutOverrideSource.h:132,test,testing,132,interpreter/llvm-project/clang/include/clang/Frontend/LayoutOverrideSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LayoutOverrideSource.h,1,['test'],['testing']
Testability,/// An implementation detail class which is introduced to split the checker; /// logic into several methods while maintaining a consistently updated state; /// and access to other contextual data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BitwiseShiftChecker.cpp:81,log,logic,81,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BitwiseShiftChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BitwiseShiftChecker.cpp,1,['log'],['logic']
Testability,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:723,assert,assertions,723,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,1,['assert'],['assertions']
Testability,"/// Analysis providing branch probability information.; ///; /// This is a function analysis which provides information on the relative; /// probabilities of each ""edge"" in the function's CFG where such an edge is; /// defined by a pair (PredBlock and an index in the successors). The; /// probability of an edge from one block is always relative to the; /// probabilities of other edges from the block. The probabilites of all edges; /// from a block sum to exactly one (100%).; /// We use a pair (PredBlock and an index in the successors) to uniquely; /// identify an edge, since we can have multiple edges from Src to Dst.; /// As an example, we can have a switch which jumps to Dst with value 0 and; /// value 10.; ///; /// Process of computing branch probabilities can be logically viewed as three; /// step process:; ///; /// First, if there is a profile information associated with the branch then; /// it is trivially translated to branch probabilities. There is one exception; /// from this rule though. Probabilities for edges leading to ""unreachable""; /// blocks (blocks with the estimated weight not greater than; /// UNREACHABLE_WEIGHT) are evaluated according to static estimation and; /// override profile information. If no branch probabilities were calculated; /// on this step then take the next one.; ///; /// Second, estimate absolute execution weights for each block based on; /// statically known information. Roots of such information are ""cold"",; /// ""unreachable"", ""noreturn"" and ""unwind"" blocks. Those blocks get their; /// weights set to BlockExecWeight::COLD, BlockExecWeight::UNREACHABLE,; /// BlockExecWeight::NORETURN and BlockExecWeight::UNWIND respectively. Then the; /// weights are propagated to the other blocks up the domination line. In; /// addition, if all successors have estimated weights set then maximum of these; /// weights assigned to the block itself (while this is not ideal heuristic in; /// theory it's simple and works reasonably well in most cases)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h:777,log,logically,777,interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,1,['log'],['logically']
Testability,"/// Anderson-Darling 2-Sample Test.; /// Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:30,Test,Test,30,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,"['Test', 'test']","['Test', 'test']"
Testability,"/// Anderson-Darling 2-Sample Test.; /// Returns default p-value; option ""t"" returns the test statistic value ""A2""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:30,Test,Test,30,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,"['Test', 'test']","['Test', 'test']"
Testability,"/// Anderson-Darling 2-Samples Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:31,Test,Test,31,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['Test'],['Test']
Testability,"/// Anderson-Darling Test. Default value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:21,Test,Test,21,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['Test'],['Test']
Testability,"/// Annotations lets you mark points and ranges inside source code, for tests:; ///; /// Annotations Example(R""cpp(; /// int complete() { x.pri^ } // ^ indicates a point; /// void err() { [[""hello"" == 42]]; } // [[this is a range]]; /// $definition^class Foo{}; // points can be named: ""definition""; /// $(foo)^class Foo{}; // ...or have a payload: ""foo""; /// $definition(foo)^class Foo{}; // ...or both; /// $fail(runtime)[[assert(false)]] // ranges can have names/payloads too; /// )cpp"");; ///; /// StringRef Code = Example.code(); // annotations stripped.; /// std::vector<size_t> PP = Example.points(); // all unnamed points; /// size_t P = Example.point(); // there must be exactly one; /// llvm::Range R = Example.range(""fail""); // find named ranges; ///; /// Points/ranges are coordinated into `code()` which is stripped of; /// annotations.; ///; /// Names consist of only alphanumeric characters or '_'.; /// Payloads can contain any character expect '(' and ')'.; ///; /// Ranges may be nested (and points can be inside ranges), but there's no way; /// to define general overlapping ranges.; ///; /// FIXME: the choice of the marking syntax makes it impossible to represent; /// some of the C++ and Objective C constructs (including common ones; /// like C++ attributes). We can fix this by:; /// 1. introducing an escaping mechanism for the special characters,; /// 2. making characters for marking points and ranges configurable,; /// 3. changing the syntax to something less commonly used,; /// 4. ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:72,test,tests,72,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,2,"['assert', 'test']","['assert', 'tests']"
Testability,"/// Applies the logarithm to the sample when the specified distribution to test is LogNormal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:16,log,logarithm,16,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,3,"['Log', 'log', 'test']","['LogNormal', 'logarithm', 'test']"
Testability,/// Apply a logical shift right on the polynomial,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:12,log,logical,12,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['log'],['logical']
Testability,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:198,log,logEvalError-type,198,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,1,['log'],['logEvalError-type']
Testability,/// Assert that the stored pointer points to a CXXDeductionGuideNameExtra; /// and return it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:4,Assert,Assert,4,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Assert'],['Assert']
Testability,/// Assert that the stored pointer points to a CXXLiteralOperatorIdName; /// and return it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:4,Assert,Assert,4,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Assert'],['Assert']
Testability,/// Assert that the stored pointer points to a CXXOperatorIdName; /// and return it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:4,Assert,Assert,4,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Assert'],['Assert']
Testability,/// Assert that the stored pointer points to a CXXSpecialNameExtra; /// and return it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:4,Assert,Assert,4,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Assert'],['Assert']
Testability,/// Assert that the stored pointer points to a DeclarationNameExtra; /// and return it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:4,Assert,Assert,4,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Assert'],['Assert']
Testability,/// Assert that the stored pointer points to an IdentifierInfo and return it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:4,Assert,Assert,4,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Assert'],['Assert']
Testability,/// Assert that this is a shufflevector and return the mask. See class; /// ShuffleVectorInst for a description of the mask representation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Assert,Assert,4,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['Assert'],['Assert']
Testability,/// Assert that this is a shufflevector and return the mask.; ///; /// TODO: This is a temporary hack until we update the bitcode format for; /// shufflevector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Assert,Assert,4,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['Assert'],['Assert']
Testability,/// AssertAlign - These nodes record if a register contains a value that; /// has a known alignment and the trailing bits are known to be zero.; /// NOTE: In case of the source value (or any vector element value) is; /// poisoned the assertion will not be true for that value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:4,Assert,AssertAlign,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,2,"['Assert', 'assert']","['AssertAlign', 'assertion']"
Testability,"/// AssertSext, AssertZext - These nodes record if a register contains a; /// value that has already been zero or sign extended from a narrower type.; /// These nodes take two operands. The first is the node that has already; /// been extended, and the second is a value type node indicating the width; /// of the extension.; /// NOTE: In case of the source value (or any vector element value) is; /// poisoned the assertion will not be true for that value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:4,Assert,AssertSext,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,3,"['Assert', 'assert']","['AssertSext', 'AssertZext', 'assertion']"
Testability,"/// Asserting, noexcept member alternative to std::get",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:4,Assert,Asserting,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,2,['Assert'],['Asserting']
Testability,/// Asserts if name is not present in the map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:4,Assert,Asserts,4,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,1,['Assert'],['Asserts']
Testability,/// Asserts invariants on this node of the tree and its immediate children.; /// Will not recurse into the subtree. No-op if NDEBUG is set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h:4,Assert,Asserts,4,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,1,['Assert'],['Asserts']
Testability,"/// Asserts that instruction order numbers are marked invalid, or that they; /// are in ascending order. This is constant time if the ordering is invalid,; /// and linear in the number of instructions if the ordering is valid. Callers; /// should be careful not to call this in ways that make common operations; /// O(n^2). For example, it takes O(n) time to assign order numbers to; /// instructions, so the order should be validated no more than once after; /// each ordering to ensure that transforms have the same algorithmic; /// complexity when asserts are enabled as when they are disabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Assert,Asserts,4,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,2,"['Assert', 'assert']","['Asserts', 'asserts']"
Testability,/// Asserts that the cached info for \p BB is up-to-date. This helps to catch; /// the usage error of accessing a block without properly invalidating after a; /// previous transform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h:4,Assert,Asserts,4,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,1,['Assert'],['Asserts']
Testability,/// Asserts that the given data is a valid value for this field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h:4,Assert,Asserts,4,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h,1,['Assert'],['Asserts']
Testability,"/// Asserts that the passed field is a valid target of the source field provided in the field map.; /// Checks the field without looking into sub fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx:4,Assert,Asserts,4,tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,1,['Assert'],['Asserts']
Testability,/// Asserts whether or not the contents of this tracking is up-to-date. This; /// helps to catch the usage error of accessing a block without properly; /// invalidating after a previous transform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h:4,Assert,Asserts,4,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,1,['Assert'],['Asserts']
Testability,/// Asserts whether we can assume whole program visibility during the LTO; /// link.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:4,Assert,Asserts,4,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,1,['Assert'],['Asserts']
Testability,"/// Assign a dummy layout using an incrementing counter, tag each function; /// with its index represented as metadata, and lower each type test to an; /// integer range comparison. During generation of the indirect function call; /// table in the backend, it will assign the given indexes.; /// Note: Dynamic linking is not supported, as the WebAssembly ABI has not yet; /// been finalized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:140,test,test,140,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"/// Associate a filename with a specified logical file number, and also; /// specify that file's checksum information. This implements the '.cv_file 4; /// ""foo.c""' assembler directive. Returns true on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,log,logical,42,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['log'],['logical']
Testability,"/// Associate a filename with a specified logical file number. This; /// implements the DWARF2 '.file 4 ""foo.c""' assembler directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,log,logical,42,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['log'],['logical']
Testability,"/// Associate a filename with a specified logical file number.; /// Also associate a directory, optional checksum, and optional source; /// text with the logical file. This implements the DWARF2; /// '.file 4 ""dir/foo.c""' assembler directive, and the DWARF5; /// '.file 4 ""dir/foo.c"" md5 ""..."" source ""...""' assembler directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:42,log,logical,42,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,2,['log'],['logical']
Testability,/// At the top of logical operator nest:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:18,log,logical,18,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['log'],['logical']
Testability,"/// At the top of the logical operator nest, reset the number of conditions,; /// also forget previously seen split nesting cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:22,log,logical,22,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['log'],['logical']
Testability,"/// At this point, prevailing symbols have been resolved. The following leads; /// to returning a conservative result:; /// - Multiple instances with local linkage. Normally local linkage would be; /// unique per module; /// as the GUID includes the module path. We could have a guid alias if; /// there wasn't any distinguishing path when each file was compiled, but; /// that should be rare so we'll punt on those.; /// These next 2 cases should not happen and will assert:; /// - Multiple instances with external linkage. This should be caught in; /// symbol resolution; /// - Non-existent FunctionSummary for Aliasee. This presents a hole in our; /// knowledge meaning we have to go conservative.; /// Otherwise, we calculate attributes for a function as:; /// 1. If we have a local linkage, take its attributes. If there's somehow; /// multiple, bail and go conservative.; /// 2. If we have an external/WeakODR/LinkOnceODR linkage check that it is; /// prevailing, take its attributes.; /// 3. If we have a Weak/LinkOnce linkage the copies can have semantic; /// differences. However, if the prevailing copy is known it will be used; /// so take its attributes. If the prevailing copy is in a native file; /// all IR copies will be dead and propagation will go conservative.; /// 4. AvailableExternally summaries without a prevailing copy are known to; /// occur in a couple of circumstances:; /// a. An internal function gets imported due to its caller getting; /// imported, it becomes AvailableExternally but no prevailing; /// definition exists. Because it has to get imported along with its; /// caller the attributes will be captured by propagating on its; /// caller.; /// b. C++11 [temp.explicit]p10 can generate AvailableExternally; /// definitions of explicitly instanced template declarations; /// for inlining which are ultimately dropped from the TU. Since this; /// is localized to the TU the attributes will have already made it to; /// the callers.; /// These are edge cases and a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:468,assert,assert,468,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['assert'],['assert']
Testability,"/// Attempt to claim responsibility for new definitions. This method can be; /// used to claim responsibility for symbols that are added to a; /// materialization unit during the compilation process (e.g. literal pool; /// symbols). Symbol linkage rules are the same as for symbols that are; /// defined up front: duplicate strong definitions will result in errors.; /// Duplicate weak definitions will be discarded (in which case they will; /// not be added to this responsibility instance).; ///; /// This method can be used by materialization units that want to add; /// additional symbols at materialization time (e.g. stubs, compile; /// callbacks, metadata).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:623,stub,stubs,623,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['stub'],['stubs']
Testability,/// Attempt to write a binary ELF stub.; /// This function determines appropriate ELFType using the passed ELFTarget and; /// then writes a binary ELF stub to a specified file path.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source ELFStub to generate a binary ELF stub from.; /// @param WriteIfChanged Whether or not to preserve timestamp if; /// the output stays the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h:34,stub,stub,34,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h,4,"['Stub', 'stub']","['Stub', 'stub']"
Testability,/// Banner - A pointer to a banner to print before dumping the; /// log.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/circular_raw_ostream.h:68,log,log,68,interpreter/llvm-project/llvm/include/llvm/Support/circular_raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/circular_raw_ostream.h,1,['log'],['log']
Testability,"/// Base class containing the logic for constructing DWARF expressions; /// independently of whether they are emitted into a DIE or into a .debug_loc; /// entry.; ///; /// Some DWARF operations, e.g. DW_OP_entry_value, need to calculate the size; /// of a succeeding DWARF block before the latter is emitted to the output.; /// To handle such cases, data can conditionally be emitted to a temporary; /// buffer, which can later on be committed to the main output. The size of the; /// temporary buffer is queryable, allowing for the size of the data to be; /// emitted before the data is committed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h:30,log,logic,30,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,1,['log'],['logic']
Testability,/// Base class for emitting a file (e.g. header or test) from OpenCLBuiltins.td,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:51,test,test,51,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['test'],['test']
Testability,/// Base class for managing collections of named indirect stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:58,stub,stubs,58,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stubs']
Testability,"/// Base class for tokens / ranges of tokens that can allow breaking; /// within the tokens - for example, to avoid whitespace beyond the column; /// limit, or to reflow text.; ///; /// Generally, a breakable token consists of logical lines, addressed by a line; /// index. For example, in a sequence of line comments, each line comment is its; /// own logical line; similarly, for a block comment, each line in the block; /// comment is on its own logical line.; ///; /// There are two methods to compute the layout of the token:; /// - getRangeLength measures the number of columns needed for a range of text; /// within a logical line, and; /// - getContentStartColumn returns the start column at which we want the; /// content of a logical line to start (potentially after introducing a line; /// break).; ///; /// The mechanism to adapt the layout of the breakable token is organised; /// around the concept of a \c Split, which is a whitespace range that signifies; /// a position of the content of a token where a reformatting might be done.; ///; /// Operating with splits is divided into two operations:; /// - getSplit, for finding a split starting at a position,; /// - insertBreak, for executing the split using a whitespace manager.; ///; /// There is a pair of operations that are used to compress a long whitespace; /// range with a single space if that will bring the line length under the; /// column limit:; /// - getLineLengthAfterCompression, for calculating the size in columns of the; /// line after a whitespace range has been compressed, and; /// - compressWhitespace, for executing the whitespace compression using a; /// whitespace manager; note that the compressed whitespace may be in the; /// middle of the original line and of the reformatted line.; ///; /// For tokens where the whitespace before each line needs to be also; /// reformatted, for example for tokens supporting reflow, there are analogous; /// operations that might be executed before the main line breaki",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.h:227,log,logical,227,interpreter/llvm-project/clang/lib/Format/BreakableToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.h,5,['log'],['logical']
Testability,/// Bitwise AND assignment operator.; ///; /// Performs a bitwise AND operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:115,log,logically,115,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['logically']
Testability,/// Bitwise Logical AND NOT of Packed FP values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,Log,Logical,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Log'],['Logical']
Testability,/// Bitwise OR assignment operator.; ///; /// Performs a bitwise OR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:113,log,logically,113,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['logically']
Testability,/// Bitwise XOR assignment operator.; ///; /// Performs a bitwise XOR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:115,log,logically,115,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['logically']
Testability,/// Bitwise logical AND of floating point values. This corresponds; /// to X86::ANDPS or X86::ANDPD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,log,logical,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,/// Bitwise logical ANDNOT of floating point values. This; /// corresponds to X86::ANDNPS or X86::ANDNPD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,log,logical,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,/// Bitwise logical OR of floating point values. This corresponds; /// to X86::ORPS or X86::ORPD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,log,logical,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,/// Bitwise logical XOR of floating point values. This corresponds; /// to X86::XORPS or X86::XORPD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,log,logical,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,"/// Bitwise operators - logical and, logical or, logical xor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:24,log,logical,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,3,['log'],['logical']
Testability,"/// BlockRequiresCopying - Returns true if byref variable ""D"" of type ""Ty""; /// requires copy/dispose. Note that this must match the logic; /// in buildByrefHelpers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:133,log,logic,133,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['log'],['logic']
Testability,/// Break after each annotation on a field in Java files.; /// \code{.java}; /// true: false:; /// @Partial vs. @Partial @Mock DataLoad loader;; /// @Mock; /// DataLoad loader;; /// \endcode; /// \version 3.8,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:122,Mock,Mock,122,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['Mock'],['Mock']
Testability,"/// Break before inline ASM colon if the line length is longer than column; /// limit.; /// \code; /// asm volatile(""string"", : : val);; /// asm(""cmoveq %1, %2, %[result]""; /// : [result] ""=r""(result); /// : ""r""(test), ""r""(new), ""[result]""(old));; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:212,test,test,212,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['test'],['test']
Testability,"/// Buffer size to use for writing to files, must be a multiple of 4096 bytes. Testing suggests that 4MiB gives best; /// performance (with Direct I/O) at a reasonable memory consumption.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx:79,Test,Testing,79,tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,1,['Test'],['Testing']
Testability,"/// Build FunctionSignature for a function-like declaration \c FunctionT like; /// FunctionDecl, ObjCMethodDecl, or CXXMethodDecl.; ///; /// The logic and implementation of building a signature for a FunctionDecl,; /// CXXMethodDecl, and ObjCMethodDecl are exactly the same, but they do not; /// share a common base. This template helps reuse the code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:145,log,logic,145,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,1,['log'],['logic']
Testability,/// Build a bit test cluster from Clusters[First..Last]. Returns false if it; /// decides it's not a good idea.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h:16,test,test,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,1,['test'],['test']
Testability,/// Build a function pointer of FunctionType with the given constant; /// address.; ///; /// Usage example: Turn a trampoline address into a function pointer constant; /// for use in a stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:185,stub,stub,185,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stub']
Testability,"/// Build a test that bit BitOffset is set in the type identifier that was; /// lowered to TIL, which must be either an Inline or a ByteArray.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:12,test,test,12,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,/// Build a test that bit BitOffset mod sizeof(Bits)*8 is set in; /// Bits. This pattern matches to the bt instruction on x86.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:12,test,test,12,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:205,Test,TestAST,205,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,1,['Test'],['TestAST']
Testability,/// ByteArray: the byte array to test the address against.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:33,test,test,33,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,/// CFGCallback defines methods that should be called when a logical; /// operator error is found when building the CFG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:61,log,logical,61,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['log'],['logical']
Testability,"/// CFI-specific: a vector containing the list of function summaries that use; /// the llvm.type.checked.load intrinsic and therefore will require; /// resolutions for llvm.type.test in order to implement CFI checks if; /// devirtualization was unsuccessful. If devirtualization was successful, the; /// pass will clear this vector by calling markDevirt(). If at the end of the; /// pass the vector is non-empty, we will need to add a use of llvm.type.test; /// to each of the function summaries in the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:178,test,test,178,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,2,['test'],['test']
Testability,/// CMOV of constants requires materializing constant operands in registers.; /// Try to fold those constants into an 'add' instruction to reduce instruction; /// count. We do this with CMOV rather the generic 'select' because there are; /// earlier folds that may be used to turn select-of-constants into logic hacks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:306,log,logic,306,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:20,test,test,20,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,2,['test'],['test']
Testability,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:20,test,test,20,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,2,['test'],['test']
Testability,/// Caches the IsKnownBase flag for a value and asserts that it wasn't present; /// in the cache before.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:48,assert,asserts,48,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['asserts']
Testability,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:128,log,logical,128,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,1,['log'],['logical']
Testability,"/// CallDescription currently cannot restrict matches to the global namespace; /// only, which is why multiple CallDescriptionMaps are used, as we want to; /// disambiguate global C functions from functions inside user-defined; /// namespaces.; // TODO: Remove separation to simplify matching logic once CallDescriptions; // are more expressive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:293,log,logic,293,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['log'],['logic']
Testability,"/// Callback for Value RAUW.; ///; /// Called when this->getValPtr()->replaceAllUsesWith(new_value) is called,; /// _before_ any of the uses have actually been replaced. If WeakTrackingVH; /// were; /// implemented as a CallbackVH, it would use this method to call; /// setValPtr(new_value). AssertingVH would do nothing in this method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:292,Assert,AssertingVH,292,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,1,['Assert'],['AssertingVH']
Testability,"/// Callback for Value destruction.; ///; /// Called when this->getValPtr() is destroyed, inside ~Value(), so you; /// may call any non-virtual Value method on getValPtr(), but no subclass; /// methods. If WeakTrackingVH were implemented as a CallbackVH, it would use; /// this; /// method to call setValPtr(NULL). AssertingVH would use this method to; /// cause an assertion failure.; ///; /// All implementations must remove the reference from this object to the; /// Value that's being destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:315,Assert,AssertingVH,315,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,2,"['Assert', 'assert']","['AssertingVH', 'assertion']"
Testability,"/// Called by the ResourceManager when a processor resource group, or a; /// processor resource with multiple units has become unavailable.; ///; /// The default strategy uses this information to bias its selection logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:215,log,logic,215,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['log'],['logic']
Testability,"/// Called by the framework or user code to report some event.; /// The event is associated with the current context (program point).; /// The Emit function produces the log message. It may or may not be called,; /// depending on if the logger is interested; it should have no side effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:170,log,log,170,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,2,['log'],"['log', 'logger']"
Testability,/// Called when parsing is finished. Intended for testing only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:50,test,testing,50,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,1,['test'],['testing']
Testability,/// Called when we start processing an element in the current CFG block.; /// The target program point is after the specified element.; /// Calls to log() describe the transfer() function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:149,log,log,149,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['log'],['log']
Testability,/// Can be overwritten by subclasses to implement their own import logic.; /// The overwritten method should call this method if it didn't import the; /// decl on its own.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTImporter.h:67,log,logic,67,interpreter/llvm-project/clang/include/clang/AST/ASTImporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTImporter.h,1,['log'],['logic']
Testability,/// Can we compute the logical AND of \p ChecksToHoist and \p ChecksToWiden; /// for the price of computing only one of the set of expressions?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp:23,log,logical,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,1,['log'],['logical']
Testability,"/// Canonicalize array indices to pointer-size integers. This helps to; /// simplify the logic of splitting a GEP. For example, if a + b is a; /// pointer-size integer, we have; /// gep base, a + b = gep (gep base, a), b; /// However, this equality may not hold if the size of a + b is smaller than; /// the pointer size, because LLVM conceptually sign-extends GEP indices to; /// pointer size before computing the address; /// (http://llvm.org/docs/LangRef.html#id181).; ///; /// This canonicalization is very likely already done in clang and; /// instcombine. Therefore, the program will probably remain the same.; ///; /// Returns true if the module changes.; ///; /// Verified in @i32_add in split-gep.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:89,log,logic,89,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['log'],['logic']
Testability,"/// Capture a change in pressure for a single pressure set. UnitInc may be; /// expressed in terms of upward or downward pressure depending on the client; /// and will be dynamically adjusted for current liveness.; ///; /// Pressure increments are tiny, typically 1-2 units, and this is only for; /// heuristics, so we don't check UnitInc overflow. Instead, we may have a; /// higher level assert that pressure is consistent within a region. We also; /// effectively ignore dead defs which don't affect heuristics much.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:390,assert,assert,390,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,1,['assert'],['assert']
Testability,"/// Carefully grab the subprogram from a local scope.; ///; /// This carefully grabs the subprogram from a local scope, avoiding the; /// built-in assertions that would typically fire.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:147,assert,assertions,147,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['assert'],['assertions']
Testability,"/// Carry-using nodes for multiple precision addition and subtraction.; /// These nodes take three operands: The first two are the normal lhs and; /// rhs to the add or sub, and the third is a boolean value that is 1 if and; /// only if there is an incoming carry/borrow. These nodes produce two; /// results: the normal result of the add or sub, and a boolean value that is; /// 1 if and only if there is an outgoing carry/borrow.; ///; /// Care must be taken if these opcodes are lowered to hardware instructions; /// that use the inverse logic -- 0 if and only if there is an; /// incoming/outgoing carry/borrow. In such cases, you must preserve the; /// semantics of these opcodes by inverting the incoming carry/borrow, feeding; /// it to the add/sub hardware instruction, and then inverting the outgoing; /// carry/borrow.; ///; /// The use of these opcodes is preferable to adde/sube if the target supports; /// it, as the carry is a regular value rather than a glue, which allows; /// further optimisation.; ///; /// These opcodes are different from [US]{ADD,SUB}O in that; /// U{ADD,SUB}O_CARRY consume and produce a carry/borrow, whereas; /// [US]{ADD,SUB}O produce an overflow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:541,log,logic,541,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['log'],['logic']
Testability,"/// Change the file name for logging of a RooMinimizer of all MINUIT steppings; /// through the parameter space. If inLogfile is null, the current log file; /// is closed and logging is stopped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:29,log,logging,29,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,3,['log'],"['log', 'logging']"
Testability,/// Change the type of a bitwise logic operation if we can eliminate a bitcast.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:33,log,logic,33,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logic']
Testability,/// Change the value of the implementation pointer for the stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:59,stub,stub,59,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stub']
Testability,/// Check E. If it's in a success state then return the contained reference. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:109,log,log,109,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['log'],['log']
Testability,/// Check E. If it's in a success state then return the contained value. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:105,log,log,105,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['log'],['log']
Testability,/// Check Err. If it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:42,log,log,42,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['log'],['log']
Testability,/// Check a floating point immediate predicate on the specified instruction.; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:151,test,test,151,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['test'],['test']
Testability,/// Check an immediate predicate on the specified instruction via an APInt.; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:150,test,test,150,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['test'],['test']
Testability,/// Check an immediate predicate on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - OpIdx(ULEB128) - Operand index; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:174,test,test,174,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['test'],['test']
Testability,/// Check an immediate predicate on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:136,test,test,136,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['test'],['test']
Testability,/// Check conversion of given expression to boolean.; /// Input argument E is a logical expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:80,log,logical,80,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['logical']
Testability,"/// Check for ""split-nested"" logical operators. This happens when a new; /// boolean expression logical-op nest is encountered within an existing; /// boolean expression, separated by a non-logical operator. For; /// example, in ""x = (a && b && c && foo(d && f))"", the ""d && f"" case; /// starts a new boolean expression that is separated from the other; /// conditions by the operator foo(). Split-nested cases are not; /// supported by MC/DC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:29,log,logical,29,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,3,['log'],"['logical', 'logical-op']"
Testability,"/// Check for container traits.; ///; /// Note that for all uses in RDF we don't want to classify std::string as a container.; /// Template specializations of IsDataContainer make it return `true` for std::span<T>, std::vector<bool> and; /// RVec<bool>, which we do want to count as containers even though they do not satisfy all the traits tested by the; /// generic IsDataContainer<T>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/Utils.hxx:341,test,tested,341,tree/dataframe/inc/ROOT/RDF/Utils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/Utils.hxx,1,['test'],['tested']
Testability,"/// Check if all objects under construction have been fully constructed; /// for the given context range (including FromLC, not including ToLC).; /// This is useful for assertions. Also checks if elided destructors; /// were cleaned up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:169,assert,assertions,169,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['assert'],['assertions']
Testability,"/// Check if logging is active for given object/topic/RooFit::%MsgLevel combination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:13,log,logging,13,roofit/roofitcore/inc/RooMsgService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h,1,['log'],['logging']
Testability,"/// Check if the given value is a local that can't be renamed (promoted).; /// Only used in assertion checking, and disabled under NDEBUG since the Used; /// set will not be populated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:92,assert,assertion,92,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,1,['assert'],['assertion']
Testability,"/// Check if this register bank is valid. In other words,; /// if it has been properly constructed.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h:157,assert,assertions,157,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h,1,['assert'],['assertions']
Testability,"/// Check test-expr for canonical form, save upper-bound (#UB), flags; /// for less/greater and for strict/non-strict comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:10,test,test-expr,10,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['test'],['test-expr']
Testability,/// Check that information hold by this instance make sense for the; /// given \p TRI.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:144,assert,assertions,144,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,1,['assert'],['assertions']
Testability,"/// Check that the Mask is compatible with the RegBank.; /// Indeed, if the RegBank cannot accomadate the ""active bits"" of the mask,; /// there is no way this mapping is valid.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:234,assert,assertions,234,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,1,['assert'],['assertions']
Testability,"/// Check the constraints on expression operands to unary type expression; /// and type traits.; ///; /// Completes any types necessary and validates the constraints on the operand; /// expression. The logic mostly mirrors the type-based overload, but may modify; /// the expression as it completes the type for that expression through template; /// instantiation, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:202,log,logic,202,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"/// Check the validity of a binary arithmetic operation w.r.t. pointer; /// operands.; ///; /// This routine will diagnose any invalid arithmetic on pointer operands much; /// like \see checkArithmeticOpPointerOperand. However, it has special logic; /// for emitting a single diagnostic even for operations where both LHS and RHS; /// are (potentially problematic) pointers.; ///; /// \returns True when the operand is valid to use (even if as an extension).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:243,log,logic,243,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"/// Check whether an option is valid.; ///; /// The steps for adding and enabling a new ilist option include:; /// \li define the option, ilist_foo<Bar>, above;; /// \li add new parameters for Bar to \a ilist_detail::node_options;; /// \li add an extraction meta-function, ilist_detail::extract_foo;; /// \li call extract_foo from \a ilist_detail::compute_node_options and pass it; /// into \a ilist_detail::node_options; and; /// \li specialize \c is_valid_option<ilist_foo<Bar>> to inherit from \c; /// std::true_type to get static assertions passing in \a simple_ilist and \a; /// ilist_node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:534,assert,assertions,534,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,1,['assert'],['assertions']
Testability,/// CheckBoolLikeConversion - Check conversion of given expression to boolean.; /// Input argument E is a logical expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:106,log,logical,106,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['logical']
Testability,"/// Checks _syntactically_ whether it is possible to access FD from the record; /// that contains it without a preceding assert (even if that access happens; /// inside a method). This is mainly used for records that act like unions, like; /// having multiple bit fields, with only a fraction being properly initialized.; /// If these fields are properly guarded with asserts, this method returns; /// false.; ///; /// Since this check is done syntactically, this method could be inaccurate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp:121,assert,assert,121,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,2,['assert'],"['assert', 'asserts']"
Testability,"/// Checks to see if the layout candidate block \p Succ has a better layout; /// predecessor than \c BB. If yes, returns true.; /// \p SuccProb: The probability adjusted for only remaining blocks.; /// Only used for logging; /// \p RealSuccProb: The un-adjusted probability.; /// \p Chain: The chain that BB belongs to and Succ is being considered for.; /// \p BlockFilter: if non-null, the set of blocks that make up the loop being; /// considered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:216,log,logging,216,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['log'],['logging']
Testability,"/// Checks whether a shuffle mask is equivalent to an explicit list of; /// arguments.; ///; /// This is a fast way to test a shuffle mask against a fixed pattern:; ///; /// if (isShuffleEquivalent(Mask, 3, 2, {1, 0})) { ... }; ///; /// It returns true if the mask is exactly as wide as the argument list, and; /// each element of the mask is either -1 (signifying undef) or the value given; /// in the argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:119,test,test,119,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"/// Checks whether a target shuffle mask is equivalent to an explicit pattern.; ///; /// The masks must be exactly the same width.; ///; /// If an element in Mask matches SM_SentinelUndef (-1) then the corresponding; /// value in ExpectedMask is always accepted. Otherwise the indices must match.; ///; /// SM_SentinelZero is accepted as a valid negative index but must match in; /// both, or via a known bits test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:410,test,test,410,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"/// Checks whether the current tokens form a type-id or an expression for the; /// purposes of use as the initial operand to a generic selection expression.; /// This requires special handling in C++ because it accepts either a type or; /// an expression, and we need to disambiguate which is which. However, we; /// cannot use the same logic as we've used for sizeof expressions, because; /// that logic relies on the operator only accepting a single argument,; /// whereas _Generic accepts a list of arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:337,log,logic,337,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,2,['log'],['logic']
Testability,"/// ChooseExpr - GNU builtin-in function __builtin_choose_expr.; /// This AST node is similar to the conditional operator (?:) in C, with; /// the following exceptions:; /// - the test expression must be a integer constant expression.; /// - the expression returned acts like the chosen subexpression in every; /// visible way: the type is the same as that of the chosen subexpression,; /// and all predicates (whether it's an l-value, whether it's an integer; /// constant expression, etc.) return the same result as for the chosen; /// sub-expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:180,test,test,180,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['test'],['test']
Testability,"/// Class objc_loadClassref (void *); ///; /// Loads from a classref. For Objective-C stub classes, this invokes the; /// initialization callback stored inside the stub. For all other classes; /// this simply dereferences the pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:86,stub,stub,86,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,['stub'],['stub']
Testability,"/// Class responsible for emitting a DWARF v5 Accelerator Table. The only; /// public function is emit(), which performs the actual emission.; ///; /// A callback abstracts the logic to provide a CU index for a given entry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:177,log,logic,177,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,1,['log'],['logic']
Testability,"/// Class to encapsulate the logic for formatting a diagnostic message.; ///; /// Actual ""printing"" logic is implemented by subclasses.; ///; /// This class provides an interface for building and emitting; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// A brief worklist:; /// FIXME: Sink the recursive printing of template instantiations into this; /// class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:29,log,logic,29,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,2,['log'],['logic']
Testability,"/// Class to encapsulate the logic for formatting and printing a textual; /// diagnostic message.; ///; /// This class provides an interface for building and emitting a textual; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// The purpose of this class is to isolate the implementation of printing; /// beautiful text diagnostics from any particular interfaces. The Clang; /// DiagnosticClient is implemented through this class as is diagnostic; /// printing coming out of libclang.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:29,log,logic,29,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,1,['log'],['logic']
Testability,"/// Class to represented the control flow structure of an OpenMP canonical loop.; ///; /// The control-flow structure is standardized for easy consumption by; /// directives associated with loops. For instance, the worksharing-loop; /// construct may change this control flow such that each loop iteration is; /// executed on only one thread. The constraints of a canonical loop in brief; /// are:; ///; /// * The number of loop iterations must have been computed before entering the; /// loop.; ///; /// * Has an (unsigned) logical induction variable that starts at zero and; /// increments by one.; ///; /// * The loop's CFG itself has no side-effects. The OpenMP specification; /// itself allows side-effects, but the order in which they happen, including; /// how often or whether at all, is unspecified. We expect that the frontend; /// will emit those side-effect instructions somewhere (e.g. before the loop); /// such that the CanonicalLoopInfo itself can be side-effect free.; ///; /// Keep in mind that CanonicalLoopInfo is meant to only describe a repeated; /// execution of a loop body that satifies these constraints. It does NOT; /// represent arbitrary SESE regions that happen to contain a loop. Do not use; /// CanonicalLoopInfo for such purposes.; ///; /// The control flow can be described as follows:; ///; /// Preheader; /// |; /// /-> Header; /// | |; /// | Cond---\; /// | | |; /// | Body |; /// | | | |; /// | <...> |; /// | | | |; /// \--Latch |; /// |; /// Exit; /// |; /// After; ///; /// The loop is thought to start at PreheaderIP (at the Preheader's terminator,; /// including) and end at AfterIP (at the After's first instruction, excluding).; /// That is, instructions in the Preheader and After blocks (except the; /// Preheader's terminator) are out of CanonicalLoopInfo's control and may have; /// side-effects. Typically, the Preheader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excludin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:525,log,logical,525,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['log'],['logical']
Testability,"/// Classify whether a cast is worth optimizing.; ///; /// This is a helper to decide whether the simplification of; /// logic(cast(A), cast(B)) to cast(logic(A, B)) should be performed.; ///; /// \param CI The cast we are interested in.; ///; /// \return true if this cast actually results in any code being generated and; /// if it cannot already be eliminated by some other transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:121,log,logic,121,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,2,['log'],['logic']
Testability,"/// ClassifyModifiable - Classify this expression according to the; /// C++11 expression taxonomy, and see if it is valid on the left side; /// of an assignment.; ///; /// This function extends classify in that it also tests whether the; /// expression is modifiable (C99 6.3.2.1p1).; /// \param Loc A source location that might be filled with a relevant location; /// if the expression is not modifiable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:219,test,tests,219,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['test'],['tests']
Testability,"/// Clears the user interrupt flag (UIF). Its effect takes place immediately: a; /// user interrupt cannot be delivered on the instruction boundary following; /// CLUI. Can be executed only if CR4.UINT = 1, the logical processor is in; /// 64-bit mode, and software is not executing inside an enclave; otherwise,; /// each causes an invalid-opcode exception. Causes a transactional abort if; /// executed inside a transactional region; the abort loads EAX as it would; /// had it been due to an execution of CLI.; ///; /// \headerfile <x86gprintrin.h>; ///; /// This intrinsic corresponds to the <c> CLUI </c> instruction.; ///; /// \code{.operation}; /// UIF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h:211,log,logical,211,interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,1,['log'],['logical']
Testability,"/// Clone a function declaration into a new module.; ///; /// This function can be used as the first step towards creating a callback; /// stub (see makeStub).; ///; /// If the VMap argument is non-null, a mapping will be added between F and; /// the new declaration, and between each of F's arguments and the new; /// declaration's arguments. This map can then be passed in to moveFunction to; /// move the function body if required. Note: When moving functions between; /// modules with these utilities, all decls should be cloned (and added to a; /// single VMap) before any bodies are moved. This will ensure that references; /// between functions all refer to the versions in the new module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:139,stub,stub,139,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stub']
Testability,"/// Cluster that was staged, but not yet logically appended to the RNTuple",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:41,log,logically,41,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['log'],['logically']
Testability,/// Collect all of the loop invariant input values transitively used by the; /// homogeneous instruction graph from a given root.; ///; /// This essentially walks from a root recursively through loop variant operands; /// which have perform the same logical operation (AND or OR) and finds all; /// inputs which are loop invariant. For some operations these can be; /// re-associated and unswitched out of the loop entirely.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:250,log,logical,250,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['log'],['logical']
Testability,"/// Collect all of the separable terms in the given condition, which; /// might be a conjunction.; ///; /// FIXME: The right answer is to convert the logical expression into; /// disjunctive normal form, so we can find the first failed term; /// within each possible clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:150,log,logical,150,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['log'],['logical']
Testability,/// Collect type IDs from type tests used by function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:31,test,tests,31,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['test'],['tests']
Testability,"/// Collects logging output and writes it to stderr when it's destructed.; /// Common use case:; /// \code; /// if (LogRef Log = Logger::make(__func__)) {; /// *Log << ""stuff"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:13,log,logging,13,interpreter/llvm-project/clang/tools/libclang/CLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h,5,"['Log', 'log']","['Log', 'LogRef', 'Logger', 'logging']"
Testability,"/// Commit staged clusters, logically appending them to the ntuple descriptor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:28,log,logically,28,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['log'],['logically']
Testability,"/// Common helper used by \c widenGuard and \c isWideningCondProfitable. Try; /// to generate an expression computing the logical AND of \p ChecksToHoist; /// and \p ChecksToWiden. Return true if the expression computing the AND is; /// only as expensive as computing one of the set of expressions. If \p; /// InsertPt is true then actually generate the resulting expression, make it; /// available at \p InsertPt and return it in \p Result (else no change to the; /// IR is made).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp:122,log,logical,122,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,1,['log'],['logical']
Testability,/// Common logic for building SCCs from a sequence of roots.; ///; /// This is a very generic implementation of the depth-first walk and SCC; /// formation algorithm. It uses a generic sequence of roots and generic; /// callbacks for each step. This is designed to be used to implement both; /// the RefSCC formation and SCC formation with shared logic.; ///; /// Currently this is a relatively naive implementation of Tarjan's DFS; /// algorithm to form the SCCs.; ///; /// FIXME: We should consider newer variants such as Nuutila.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:11,log,logic,11,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,2,['log'],['logic']
Testability,"/// Comparator for sorting the functions set. We want to keep the order; /// deterministic for testing, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp:95,test,testing,95,interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,1,['test'],['testing']
Testability,"/// Computation of the 1-Sample Anderson-Darling Test's p-value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:49,Test,Test,49,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['Test'],['Test']
Testability,"/// Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); // given a normalized test statistic. The first variant described in the paper is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:49,Test,Test,49,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,"['Test', 'test']","['Test', 'test']"
Testability,/// Compute target triple from args.; ///; /// This routine provides the logic to compute a target triple from various; /// args passed to the driver and the default triple string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:73,log,logic,73,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['log'],['logic']
Testability,"/// Compute the 2-Sample Anderson Darling test for binned data; /// assuming equal data are present at the bin center values.; /// Used by `TH1::AndersonDarling`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:42,test,test,42,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,/// Compute the address of the test vector bitmap that this profiling; /// instruction acts on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:31,test,test,31,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['test'],['test']
Testability,/// Compute the logical AND of the attributes of the caller and the; /// callee.; ///; /// This function sets the caller's attribute to false if the callee's attribute; /// is false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,1,['log'],['logical']
Testability,/// Compute the logical OR of the attributes of the caller and the; /// callee.; ///; /// This function sets the caller's attribute to true if the callee's attribute; /// is true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,1,['log'],['logical']
Testability,"/// Compute the maximum backedge count based on the range of values; /// permitted by Start, End, and Stride. This is for loops of the form; /// {Start, +, Stride} LT End.; ///; /// Preconditions:; /// * the induction variable is known to be positive.; /// * the induction variable is assumed not to overflow (i.e. either it; /// actually doesn't, or we'd have to immediately execute UB); /// We *don't* assert these preconditions so please be careful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:404,assert,assert,404,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['assert'],['assert']
Testability,/// Compute the move gain for uniform log-gap cost,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BalancedPartitioning.h:38,log,log-gap,38,interpreter/llvm-project/llvm/include/llvm/Support/BalancedPartitioning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BalancedPartitioning.h,1,['log'],['log-gap']
Testability,"/// Compute the number of known low bits of postOffset. If this block; /// contains inline asm, the number of known bits drops to the; /// instruction alignment. An aligned terminator may increase the number; /// of know bits.; /// If LogAlign is given, also consider the alignment of the next block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBasicBlockInfo.h:235,Log,LogAlign,235,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBasicBlockInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBasicBlockInfo.h,1,['Log'],['LogAlign']
Testability,"/// Computer the overlap b/w profile BaseFilename and TestFileName,; /// and store the program level result to Overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:54,Test,TestFileName,54,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestFileName']
Testability,/// Computer the overlap b/w profile BaseFilename and profile TestFilename.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:62,Test,TestFilename,62,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestFilename']
Testability,"/// Computes the (rounded-up) compile-time log in base-2 of an unsigned integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/utils.h:43,log,log,43,geom/geom/inc/bvh/v2/utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/utils.h,1,['log'],['log']
Testability,"/// CondState represents the evaluation of a condition in an executed test; /// vector, which can be True or False. A DontCare is used to mask an; /// unevaluatable condition resulting from short-circuit behavior of logical; /// operators in languages like C/C++. When comparing the evaluation of a; /// condition across executed test vectors, comparisons against a DontCare; /// are effectively ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:70,test,test,70,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,3,"['log', 'test']","['logical', 'test']"
Testability,/// Constexpr constructor from LogValue type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Alignment.h:31,Log,LogValue,31,interpreter/llvm-project/llvm/include/llvm/Support/Alignment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Alignment.h,1,['Log'],['LogValue']
Testability,"/// Constraint - This private class represents a constraint, as defined; /// in the paper; ///; /// Practical Dependence Testing; /// Goff, Kennedy, Tseng; /// PLDI 1991; ///; /// There are 5 kinds of constraint, in a hierarchy.; /// 1) Any - indicates no constraint, any dependence is possible.; /// 2) Line - A line ax + by = c, where a, b, and c are parameters,; /// representing the dependence equation.; /// 3) Distance - The value d of the dependence distance;; /// 4) Point - A point <x, y> representing the dependence from; /// iteration x to iteration y.; /// 5) Empty - No dependence is possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:121,Test,Testing,121,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Testing']
Testability,"/// Construct a Logger. If IncludeReward is false, then logReward or; /// logFinalReward shouldn't be called, and the reward feature won't be; /// printed out.; /// NOTE: the FeatureSpecs are expected to be in the same order (i.e. have; /// corresponding indices) with any MLModelRunner implementations; /// corresponding to the model being trained/logged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h:16,Log,Logger,16,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,4,"['Log', 'log']","['Logger', 'logFinalReward', 'logReward', 'logged']"
Testability,/// Construct a \c Matcher<T> interface around the dynamic matcher.; ///; /// This method asserts that \c canConvertTo() is \c true. Callers; /// should call \c canConvertTo() first to make sure that \c this is; /// compatible with T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:90,assert,asserts,90,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['assert'],['asserts']
Testability,"/// Construct a log channel given its name, which is part of the diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:16,log,log,16,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['log'],['log']
Testability,/// Construct a new \c FileMatchTrie with the given \c PathComparator.; ///; /// The \c FileMatchTrie takes ownership of 'Comparator'. Used for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h:144,test,testing,144,interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,1,['test'],['testing']
Testability,/// Construct an invalid parameter index (\c isValid returns false and; /// accessors fail an assert).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h:94,assert,assert,94,interpreter/llvm-project/clang/include/clang/AST/Attr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h,1,['assert'],['assert']
Testability,"/// Construct either an exact exit limit from a constant, or an unknown; /// one from a SCEVCouldNotCompute. No other types of SCEVs are allowed; /// as arguments and asserts enforce that internally.; /*implicit*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:167,assert,asserts,167,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['assert'],['asserts']
Testability,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:447,log,logic,447,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,2,['log'],['logic']
Testability,"/// Constructing a TestAST parses the virtual file.; ///; /// To keep tests terse, critical errors (e.g. invalid flags) are reported as; /// unit test failures with ADD_FAILURE() and produce an empty ASTContext,; /// Sema etc. This frees the test code from handling these explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:19,Test,TestAST,19,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,4,"['Test', 'test']","['TestAST', 'test', 'tests']"
Testability,"/// Constructor for 1-sample tests with a specified distribution.; /// If a specific distribution is not specified it can be set later using SetDistribution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:29,test,tests,29,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:29,test,tests,29,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Constructor for 2-samples tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:30,test,tests,30,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Constructor for creating a spline from a TGraph.; /// \param[in] name The name of the spline.; /// \param[in] title The title of the spline.; /// \param[in] x The independent variable.; /// \param[in] gr The input TGraph containing the data points.; /// \param[in] order The order of the spline (3 or 5).; /// \param[in] logx If true, the x values are logarithmically scaled before spline creation.; /// \param[in] logy If true, the y values are logarithmically scaled before spline creation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx:325,log,logx,325,roofit/roofit/src/RooSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx,4,['log'],"['logarithmically', 'logx', 'logy']"
Testability,"/// Constructor for creating a spline from raw data.; /// \param[in] name The name of the spline.; /// \param[in] title The title of the spline.; /// \param[in] x The independent variable.; /// \param[in] x0 The array of x values for the spline points.; /// \param[in] y0 The array of y values for the spline points.; /// \param[in] order The order of the spline (3 or 5).; /// \param[in] logx If true, the x values are logarithmically scaled before spline creation.; /// \param[in] logy If true, the y values are logarithmically scaled before spline creation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx:389,log,logx,389,roofit/roofit/src/RooSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx,4,['log'],"['logarithmically', 'logx', 'logy']"
Testability,"/// Constructor from data, from a full model pdf describing both parameter of interest and nuisance parameters; /// and from the set specifying the parameter of interest (POI).; /// There is no need to specify the nuisance parameters since they are all other parameters of the model.; /// When using the calculator for performing an hypothesis test one needs to provide also a snapshot (a copy); /// defining the null parameters and their value. There is no need to pass the alternate parameters. These; /// will be obtained by the value maximizing the likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:344,test,test,344,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,1,['test'],['test']
Testability,"/// Constructs a CheckerManager that ignores all non TblGen-generated; /// checkers. Useful for unit testing, unless the checker infrastructure; /// itself is tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:101,test,testing,101,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,2,['test'],"['tested', 'testing']"
Testability,"/// Contains all the implemented transformations on CR logical operations.; /// For example, a binary CR logical can be used to split a block on its inputs,; /// a unary CR logical might be used to change the condition code on a; /// comparison feeding it. A nullary CR logical might simply be removable; /// if the user of the bit it [un]sets can be transformed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:55,log,logical,55,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,4,['log'],['logical']
Testability,"/// Context to temporarily change the error logging mode as long as the context is alive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:44,log,logging,44,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['log'],['logging']
Testability,/// Convenience function for tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/yaml2obj.h:29,test,tests,29,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/yaml2obj.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/yaml2obj.h,1,['test'],['tests']
Testability,/// Convert APInt to a boolean value.; ///; /// This converts the APInt to a boolean value as a test against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:96,test,test,96,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['test']
Testability,"/// Convert a loop into a loop with bottom test. It may; /// perform loop latch simplication as well if the flag RotationOnly; /// is false. The flag Threshold represents the size threshold of the loop; /// header. If the loop header's size exceeds the threshold, the loop rotation; /// will give up. The flag IsUtilMode controls the heuristic used in the; /// LoopRotation. If it is true, the profitability heuristic will be ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:43,test,test,43,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,1,['test'],['test']
Testability,"/// Convert the instruction operands from referencing the current values into; /// those specified by VM.; ///; /// If \a RF_IgnoreMissingLocals is set and an operand can't be found via \a; /// MapValue(), use the old value. Otherwise assert that this doesn't happen.; ///; /// Note that \a MapValue() only returns \c nullptr for SSA values missing from; /// \c VM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h:235,assert,assert,235,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,1,['assert'],['assert']
Testability,"/// Convert to the specified CFGElement type, asserting that this; /// CFGElement is of the desired type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:46,assert,asserting,46,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['assert'],['asserting']
Testability,"/// Convert to the specified ProgramPoint type, asserting that this; /// ProgramPoint is of the desired type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ProgramPoint.h:48,assert,asserting,48,interpreter/llvm-project/clang/include/clang/Analysis/ProgramPoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ProgramPoint.h,1,['assert'],['asserting']
Testability,"/// Convert to the specified SVal type, asserting that this SVal is of; /// the desired type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:40,assert,asserting,40,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,1,['assert'],['asserting']
Testability,"/// Convert to the specified TypeLoc type, asserting that this TypeLoc; /// is of the desired type.; ///; /// \pre T::isKind(*this)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:43,assert,asserting,43,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['assert'],['asserting']
Testability,"/// Cost of evicting interference - used by default advisor, and the eviction; /// chain heuristic in RegAllocGreedy.; // FIXME: this can be probably made an implementation detail of the default; // advisor, if the eviction chain logic can be refactored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h:230,log,logic,230,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,1,['log'],['logic']
Testability,/// Counts the number of bits in the source operand having a value of 1.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c POPCNT instruction or a; /// a sequence of arithmetic and logic ops to calculate it.; ///; /// \param __A; /// An unsigned 64-bit integer operand.; /// \returns A 64-bit integer containing the number of bits with value 1 in the; /// source operand.; /// \see _popcnt64,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h:214,log,logic,214,interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,1,['log'],['logic']
Testability,/// Counts the number of bits in the source operand having a value of 1.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _popcnt32(int A);; /// \endcode; ///; /// This intrinsic corresponds to the \c POPCNT instruction or a; /// a sequence of arithmetic and logic ops to calculate it.; ///; /// \param A; /// An unsigned 32-bit integer operand.; /// \returns A 32-bit integer containing the number of bits with value 1 in the; /// source operand.; /// \see __popcntd,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h:271,log,logic,271,interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,1,['log'],['logic']
Testability,/// Counts the number of bits in the source operand having a value of 1.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// long long _popcnt64(unsigned long long A);; /// \endcode; ///; /// This intrinsic corresponds to the \c POPCNT instruction or a; /// a sequence of arithmetic and logic ops to calculate it.; ///; /// \param A; /// An unsigned 64-bit integer operand.; /// \returns A 64-bit integer containing the number of bits with value 1 in the; /// source operand.; /// \see __popcntq,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h:292,log,logic,292,interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,1,['log'],['logic']
Testability,"/// Crash recovery helper object.; ///; /// This class implements support for running operations in a safe context so; /// that crashes (memory errors, stack overflow, assertion violations) can be; /// detected and control restored to the crashing thread. Crash detection is; /// purely ""best effort"", the exact set of failures which can be recovered from; /// is platform dependent.; ///; /// Clients make use of this code by first calling; /// CrashRecoveryContext::Enable(), and then executing unsafe operations via a; /// CrashRecoveryContext object. For example:; ///; /// \code; /// void actual_work(void *);; ///; /// void foo() {; /// CrashRecoveryContext CRC;; ///; /// if (!CRC.RunSafely(actual_work, 0)) {; /// ... a crash was detected, report error to user ...; /// }; ///; /// ... no crash was detected ...; /// }; /// \endcode; ///; /// To assist recovery the class allows specifying set of actions that will be; /// executed in any case, whether crash occurs or not. These actions may be used; /// to reclaim resources in the case of crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h:168,assert,assertion,168,interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,1,['assert'],['assertion']
Testability,/// CrashOnCalls - This pass is used to test bugpoint. It intentionally; /// crashes on any call instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp:40,test,test,40,interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,1,['test'],['test']
Testability,/// CrashOnDeclFunc - This pass is used to test bugpoint. It intentionally; /// crashes if the module has an undefined function (ie a function that is; /// defined in an external module).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp:43,test,test,43,interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,1,['test'],['test']
Testability,/// CrashOnOneCU - This pass is used to test bugpoint. It intentionally; /// crashes if the Module has two or more compile units,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp:40,test,test,40,interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,1,['test'],['test']
Testability,"/// Create StubInits.size() stubs with the given names, target; /// addresses, and flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:11,Stub,StubInits,11,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,2,"['Stub', 'stub']","['StubInits', 'stubs']"
Testability,/// Create a BTST (Bit Test) node - Test bit \p BitNo in \p Src and set; /// condition according to equal/not-equal condition code \p CC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:23,Test,Test,23,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,2,['Test'],['Test']
Testability,"/// Create a DiagnosticsEngine object with a the TextDiagnosticPrinter.; ///; /// If no diagnostic client is provided, this creates a; /// DiagnosticConsumer that is owned by the returned diagnostic; /// object, if using directly the caller is responsible for; /// releasing the returned DiagnosticsEngine's client eventually.; ///; /// \param Opts - The diagnostic options; note that the created text; /// diagnostic object contains a reference to these options.; ///; /// \param Client If non-NULL, a diagnostic client that will be; /// attached to (and, then, owned by) the returned DiagnosticsEngine; /// object.; ///; /// \param CodeGenOpts If non-NULL, the code gen options in use, which may be; /// used by some diagnostics printers (for logging purposes only).; ///; /// \return The new object on success, or null on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:745,log,logging,745,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['log'],['logging']
Testability,"/// Create a LinkGraph from an ELF/ppc64 relocatable object.; ///; /// Note: The graph does not take ownership of the underlying buffer, nor copy; /// its contents. The caller is responsible for ensuring that the object buffer; /// outlives the graph.; ///; /// WARNING: The big-endian backend has not been tested yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h:307,test,tested,307,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h,1,['test'],['tested']
Testability,/// Create a closure that computes the loop variable from the logical iteration; /// number.; ///; /// \param Actions The Sema object.; /// \param LoopVarTy Type for the loop variable used for result value.; /// \param LogicalTy Type for the logical iteration number.; /// \param StartExpr Value of the loop counter at the first iteration.; /// \param Step Amount of increment after each iteration.; /// \param Deref Whether the loop variable is a dereference of the loop; /// counter variable.; ///; /// \return Closure (CapturedStmt) of the loop value calculation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:62,log,logical,62,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,"['Log', 'log']","['LogicalTy', 'logical']"
Testability,/// Create a closure that computes the number of iterations of a loop.; ///; /// \param Actions The Sema object.; /// \param LogicalTy Type for the logical iteration number.; /// \param Rel Comparison operator of the loop condition.; /// \param StartExpr Value of the loop counter at the first iteration.; /// \param StopExpr Expression the loop counter is compared against in the loop; /// condition. \param StepExpr Amount of increment after each iteration.; ///; /// \return Closure (CapturedStmt) of the distance calculation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:125,Log,LogicalTy,125,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Log', 'log']","['LogicalTy', 'logical']"
Testability,"/// Create a combined index file from the input IR files and write it.; ///; /// This is meant to enable testing of ThinLTO combined index generation,; /// currently available via the gold plugin via -thinlto.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:105,test,testing,105,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,1,['test'],['testing']
Testability,"/// Create a condition to determine if the trip count of the loop is greater; /// than TC, where TC is always one more than for the previous prologue or; /// 0 if this is being called for the outermost prologue.; ///; /// If the trip count is statically known to be greater than TC, return; /// true. If the trip count is statically known to be not greater than TC,; /// return false. Otherwise return nullopt and fill out Cond with the test; /// condition.; ///; /// Note: This hook is guaranteed to be called from the innermost to the; /// outermost prologue of the loop being software pipelined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:437,test,test,437,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['test'],['test']
Testability,"/// Create a copy of the thinlto import, mark it local, and redirect direct; /// calls to the copy. Only direct calls are replaced, so that e.g. indirect; /// call function pointer tests would use the global identity of the function.; ///; /// Currently, Value Profiling (""VP"") MD_prof data isn't updated to refer to the; /// clone's GUID (which will be different, because the name and linkage is; /// different), under the assumption that the last consumer of this data is; /// upstream the pipeline (e.g. ICP).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp:181,test,tests,181,interpreter/llvm-project/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp,1,['test'],['tests']
Testability,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 32-bit; /// alignment-offset: 0; /// address: highest allowable: (~11U),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:18,stub,stub,18,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,['stub'],['stub']
Testability,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 8-bit; /// alignment-offset: 0; /// address: highest allowable: (~5U),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:18,stub,stub,18,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,4,['stub'],['stub']
Testability,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:18,stub,stub,18,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,1,['stub'],['stub']
Testability,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:18,stub,stub,18,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,8,['stub'],['stub']
Testability,/// Create a local indirect stubs manager builder.; ///; /// The given target triple will determine the ABI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:28,stub,stubs,28,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stubs']
Testability,"/// Create a logical NOT operation as (XOR Val, BooleanOne).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:13,log,logical,13,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['log'],['logical']
Testability,"/// Create a machine node performing a notional SHL of Op by ShlAmount. If; /// ShlAmount is negative, do a (logical) right-shift instead. If ShlAmount is; /// 0, return Op unchanged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:109,log,logical,109,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1209,test,testing,1209,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,2,['test'],"['test', 'testing']"
Testability,/// Create a new node in the link-graph for the given stub template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:54,stub,stub,54,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,1,['stub'],['stub']
Testability,/// Create a new stream writer based on the value of \p Format.; /// For testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:73,test,testing,73,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,1,['test'],['testing']
Testability,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:307,test,tests,307,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,2,['test'],"['test', 'tests']"
Testability,"/// Create a single stub with the given name, target address and flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:20,stub,stub,20,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stub']
Testability,/// Create a stub filter function that will ultimately hold the code of the; /// filter expression. The EH preparation passes in LLVM will outline the code; /// from the main function body into this stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:13,stub,stub,13,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,2,['stub'],['stub']
Testability,"/// Create a stub function, suitable for being passed to __pt_atexit_np,; /// which passes the given address to the given destructor function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:13,stub,stub,13,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['stub'],['stub']
Testability,"/// Create a stub function, suitable for being passed to atexit,; /// which passes the given address to the given destructor function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:13,stub,stub,13,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['stub'],['stub']
Testability,/// Create a synthesized property accessor stub inside the \@implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:43,stub,stub,43,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,1,['stub'],['stub']
Testability,"/// Create a vector-predicated logical NOT operation as (VP_XOR Val,; /// BooleanOne, Mask, EVL).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:31,log,logical,31,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['log'],['logical']
Testability,/// Create the code for an IFunc stub for the IFunc that is defined in; /// section IFuncSectionID at offset IFuncOffset. The IFunc resolver created; /// by createIFuncResolver() is defined in the section IFuncStubSectionID at; /// offset IFuncResolverOffset. The code should be written into the section; /// with the id IFuncStubSectionID at the offset IFuncStubOffset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:33,stub,stub,33,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stub']
Testability,/// Create the code for the IFunc resolver at the given address. This code; /// works together with the stubs created in createIFuncStub() to call the; /// resolver function and then jump to the real function address.; /// It must not be larger than 64B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:104,stub,stubs,104,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stubs']
Testability,"/// Create the iterator from a RegionNode.; ///; /// Note that the incoming node must be a bb node, otherwise it will trigger; /// an assertion when we try to get a BasicBlock.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionIterator.h:134,assert,assertion,134,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionIterator.h,1,['assert'],['assertion']
Testability,/// Creates a bitvector logical shift left operation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:24,log,logical,24,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,1,['log'],['logical']
Testability,/// Creates a bitvector logical shift right operation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:24,log,logical,24,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,1,['log'],['logical']
Testability,/// Creates a device mangle context to correctly mangle lambdas in a mixed; /// architecture compile by setting the lambda mangling number source to the; /// DeviceLambdaManglingNumber. Currently this asserts that the TargetInfo; /// (from the AuxTargetInfo) is a an itanium target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:201,assert,asserts,201,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['assert'],['asserts']
Testability,/// Creates a function to register all kernel stubs generated in this module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:46,stub,stubs,46,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['stub'],['stubs']
Testability,/// Creates a runtime check to test whether both the divisor and dividend fit; /// into BypassType. The check is inserted at the end of MainBB. True return; /// value means that the operands fit. Either of the operands may be NULL if it; /// doesn't need a runtime check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp:31,test,test,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp,1,['test'],['test']
Testability,"/// Creates an SAH evaluator object, used by top-down builders to determine where to split.; /// The two parameters are the log of the size of primitive clusters in base 2, and the ratio of; /// the cost of intersecting a node (a ray-box intersection) over the cost of intersecting a; /// primitive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/split_heuristic.h:124,log,log,124,geom/geom/inc/bvh/v2/split_heuristic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/split_heuristic.h,1,['log'],['log']
Testability,/// Creates an implicit destructor.; ///; /// \param DD The destructor that will be called.; /// \param Trigger The statement whose completion causes this destructor call.; /// \param Target The object region to be destructed.; /// \param St The path-sensitive state at this point in the program.; /// \param LCtx The location context at this point in the program.; /// \param ElemRef The reference to this destructor in the CFG.; ///; /// FIXME: Eventually we want to drop \param Target and deduce it from; /// \param ElemRef. To do that we need to migrate the logic for target; /// region lookup from ExprEngine::ProcessImplicitDtor() and make it; /// independent from ExprEngine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:562,log,logic,562,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['log'],['logic']
Testability,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:12,test,test,12,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,4,['test'],['test']
Testability,"/// DAGDeltaAlgorithm - Implements a ""delta debugging"" algorithm for minimizing; /// directed acyclic graphs using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element not required by the dependencies on the other; /// elements would falsify the predicate.; ///; /// The DAG should be used to represent dependencies in the changes which are; /// likely to hold across the predicate function. That is, for a particular; /// changeset S and predicate P:; ///; /// P(S) => P(S union pred(S)); ///; /// The minimization algorithm uses this dependency information to attempt to; /// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG; /// is not required to satisfy this property, but the algorithm will run; /// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm; /// for more information on the properties which the predicate function itself; /// should satisfy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:992,test,tests,992,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,1,['test'],['tests']
Testability,"/// Decl - This represents one declaration (or definition), e.g. a variable,; /// typedef, function, struct, etc.; ///; /// Note: There are objects tacked on before the *beginning* of Decl; /// (and its subclasses) in its Decl::operator new(). Proper alignment; /// of all subclasses (not requiring more than the alignment of Decl) is; /// asserted in DeclBase.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:340,assert,asserted,340,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['assert'],['asserted']
Testability,"/// Declarations for `::logging::CheckError::.*Check`, lazily initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/ChromiumCheckModel.h:24,log,logging,24,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/ChromiumCheckModel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/ChromiumCheckModel.h,1,['log'],['logging']
Testability,"/// Default handling of a changed operand, which asserts.; ///; /// If subclasses pass themselves in as owners to a tracking node reference,; /// they must provide an implementation of this method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:49,assert,asserts,49,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['assert'],['asserts']
Testability,"/// Default value for non templated 1-sample test. Set with SetDistribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:45,test,test,45,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,/// DefinedStubCategories - List of defined categories on class stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:64,stub,stubs,64,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['stub'],['stubs']
Testability,"/// Defines a builder that does CSE of MachineInstructions using GISelCSEInfo.; /// Eg usage.; ///; ///; /// GISelCSEInfo *Info =; /// &getAnalysis<GISelCSEAnalysisWrapperPass>().getCSEInfo(); CSEMIRBuilder; /// CB(Builder.getState()); CB.setCSEInfo(Info); auto A = CB.buildConstant(s32,; /// 42); auto B = CB.buildConstant(s32, 42); assert(A == B); unsigned CReg =; /// MRI.createGenericVirtualRegister(s32); auto C = CB.buildConstant(CReg, 42);; /// assert(C->getOpcode() == TargetOpcode::COPY);; /// Explicitly passing in a register would materialize a copy if possible.; /// CSEMIRBuilder also does trivial constant folding for binary ops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:334,assert,assert,334,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,2,['assert'],['assert']
Testability,/// Defines the architecture slices that are supported by Text-based Stub files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Architecture.h:69,Stub,Stub,69,interpreter/llvm-project/llvm/include/llvm/TextAPI/Architecture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Architecture.h,1,['Stub'],['Stub']
Testability,"/// Defines the sign convention of the test statistic. Overwrite function if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:39,test,test,39,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['test'],['test']
Testability,"/// Delete DelBB. DelBB will be removed from its Parent and; /// erased from available trees if it exists and finally get deleted.; /// Under Eager UpdateStrategy, DelBB will be processed immediately.; /// Under Lazy UpdateStrategy, DelBB will be queued until a flush event and; /// all available trees are up-to-date. Assert if any instruction of DelBB is; /// modified while awaiting deletion. When both DT and PDT are nullptrs, DelBB; /// will be queued until flush() is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h:319,Assert,Assert,319,interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,1,['Assert'],['Assert']
Testability,"/// Delete DelBB. DelBB will be removed from its Parent and; /// erased from available trees if it exists. Then the callback will; /// be called. Finally, DelBB will be deleted.; /// Under Eager UpdateStrategy, DelBB will be processed immediately.; /// Under Lazy UpdateStrategy, DelBB will be queued until a flush event and; /// all available trees are up-to-date. Assert if any instruction of DelBB is; /// modified while awaiting deletion. Multiple callbacks can be queued for one; /// DelBB under Lazy UpdateStrategy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h:366,Assert,Assert,366,interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,1,['Assert'],['Assert']
Testability,"/// DeleteCalls - This pass is used to test bugpoint. It intentionally; /// deletes some call instructions, ""misoptimizing"" the program.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp:39,test,test,39,interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,1,['test'],['test']
Testability,"/// DeltaAlgorithm - Implements the delta debugging algorithm (A. Zeller '99); /// for minimizing arbitrary sets using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element would falsify the predicate.; ///; /// For best results the predicate function *should* (but need not) satisfy; /// certain properties, in particular:; /// (1) The predicate should return false on an empty set and true on the full; /// set.; /// (2) If the predicate returns true for a set of changes, it should return; /// true for all supersets of that set.; ///; /// It is not an error to provide a predicate that does not satisfy these; /// requirements, and the algorithm will generally produce reasonable; /// results. However, it may run substantially more tests than with a good; /// predicate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:974,test,tests,974,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,1,['test'],['tests']
Testability,"/// Depending on wither the location corresponds to a macro, return; /// either the macro name or the token spelling.; ///; /// This could be useful when checkers' logic depends on whether a function; /// is called with a given macro argument. For example:; /// s = socket(AF_INET,..); /// If AF_INET is a macro, the result should be treated as a source of taint.; ///; /// \sa clang::Lexer::getSpelling(), clang::Lexer::getImmediateMacroName().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:164,log,logic,164,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,1,['log'],['logic']
Testability,"/// Deprecated, use computeKnownFPClass instead.; ///; /// If \p SignBitOnly is true, test for a known 0 sign bit rather than a; /// standard ordered compare. e.g. make -0.0 olt 0.0 be true because of the sign; /// bit despite comparing equal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:86,test,test,86,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['test']
Testability,"/// Describes the layout of a stream in an MSF layout. A ""stream"" here; /// is defined as any logical unit of data which may be arranged inside the MSF; /// file as a sequence of (possibly discontiguous) blocks. When we want to read; /// from a particular MSF Stream, we fill out a stream layout structure and the; /// reader uses it to determine which blocks in the underlying MSF file contain; /// the data, so that it can be pieced together in the right order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h:94,log,logical,94,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,1,['log'],['logical']
Testability,"/// Description of a source-code transformation.; //; // A *rewrite rule* describes a transformation of source code. A simple rule; // contains each of the following components:; //; // * Matcher: the pattern term, expressed as clang matchers (with Transformer; // extensions).; //; // * Edits: a set of Edits to the source code, described with ASTEdits.; //; // However, rules can also consist of (sub)rules, where the first that matches; // is applied and the rest are ignored. So, the above components together form; // a logical ""case"" and a rule is a sequence of cases.; //; // Rule cases have an additional, implicit, component: the parameters. These are; // portions of the pattern which are left unspecified, yet bound in the pattern; // so that we can reference them in the edits.; //; // The \c Transformer class can be used to apply the rewrite rule and obtain the; // corresponding replacements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:525,log,logical,525,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['log'],['logical']
Testability,/// Description of the task to be performed. Used for logging.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h:54,log,logging,54,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h,1,['log'],['logging']
Testability,"/// Destroy the underlying value.; ///; /// This should get optimized down to a no-op. We could skip it if we could; /// add a static assert on \a std::is_trivially_copyable(), but we currently; /// support versions of GCC that don't understand that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:134,assert,assert,134,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['assert'],['assert']
Testability,/// Destruct a MaterializationResponsibility instance. In debug mode; /// this asserts that all symbols being tracked have been either; /// emitted or notified of an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:79,assert,asserts,79,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['assert'],['asserts']
Testability,"/// Determine if it is beneficial to fuse two loops.; ///; /// For now, this method simply returns true because we want to fuse as much; /// as possible (primarily to test the pass). This method will evolve, over; /// time, to add heuristics for profitability of fusion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:167,test,test,167,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['test'],['test']
Testability,"/// Determine if sign bit of this APInt is clear.; ///; /// This tests the high bit of this APInt to determine if it is clear.; ///; /// \returns true if this APInt has its sign bit clear, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:65,test,tests,65,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['tests']
Testability,"/// Determine if sign bit of this APInt is set.; ///; /// This tests the high bit of this APInt to determine if it is set.; ///; /// \returns true if this APInt has its sign bit set, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:63,test,tests,63,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['tests']
Testability,/// Determine if this APInt Value is non-negative (>= 0); ///; /// This tests the high bit of the APInt to determine if it is unset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:72,test,tests,72,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['tests']
Testability,/// Determine if this APInt Value is positive.; ///; /// This tests if the value of this APInt is positive (> 0). Note; /// that 0 is not a positive value.; ///; /// \returns true if this APInt is positive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:62,test,tests,62,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['tests']
Testability,/// Determine if this APSInt Value is positive.; ///; /// This tests if the value of this APSInt is positive (> 0). Note; /// that 0 is not a positive value.; ///; /// \returns true if this APSInt is positive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:63,test,tests,63,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,1,['test'],['tests']
Testability,"/// Determine sign of this APInt.; ///; /// This tests the high bit of this APInt to determine if it is set.; ///; /// \returns true if this APInt is negative, false otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:49,test,tests,49,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['tests']
Testability,/// Determine what the most derived array's size is. Results in an assertion; /// failure if the most derived array lacks a size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:67,assert,assertion,67,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['assert'],['assertion']
Testability,"/// Determine whether a given condition (indicated by Condition) is covered; /// by an Independence Pair. Because condition IDs are not associated based; /// on their position in the expression, accessing conditions in the; /// TestVectors requires a translation from a ordinal position to actual; /// condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:228,Test,TestVectors,228,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['Test'],['TestVectors']
Testability,/// Determine whether there's something special about the rules of; /// the ABI tell us that 'this' is a complete object within the; /// given function. Obvious common logic like being defined on a; /// final class will have been taken care of by the caller.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:168,log,logic,168,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['log'],['logic']
Testability,/// Determines whether this conversion sequence has been; /// initialized. Most operations should never need to query; /// uninitialized conversions and should assert as above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:160,assert,assert,160,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['assert'],['assert']
Testability,"/// Diagnostic handler that's installed for all google tests.; /// It will generate a test failure when a diagnostic message is issued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx:55,test,tests,55,core/testsupport/src/TestSupport.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx,2,['test'],"['test', 'tests']"
Testability,"/// Direct I/O requires that all buffers and write lengths are aligned. It seems 512 byte alignment is the minimum; /// for Direct I/O to work, but further testing showed that it results in worse performance than 4kB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:156,test,testing,156,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['test'],['testing']
Testability,/// Direct loop termination test which is more efficient than; /// comparison with \c end().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:28,test,test,28,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,1,['test'],['test']
Testability,/// Directly test whether a set of analyses is preserved.; ///; /// This is only true when no analyses have been explicitly abandoned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:13,test,test,13,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,2,['test'],['test']
Testability,/// Disable running mem2reg during SROA in order to test or debug SROA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['test'],['test']
Testability,/// Disable the expand reductions pass for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:43,test,testing,43,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['test'],['testing']
Testability,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:271,stub,stubs,271,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,5,['stub'],"['stub', 'stubs']"
Testability,/// Dispatch the valid relocation finding logic to the; /// appropriate handler depending on the object file format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp:42,log,logic,42,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,1,['log'],['logic']
Testability,"/// Do file_status's represent the same thing?; ///; /// @param A Input file_status.; /// @param B Input file_status.; ///; /// assert(status_known(A) || status_known(B));; ///; /// @returns True if A and B both represent the same file system entity, false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:128,assert,assert,128,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['assert'],['assert']
Testability,"/// Do paths represent the same thing?; ///; /// assert(status_known(A) || status_known(B));; ///; /// @param A Input path A.; /// @param B Input path B.; /// @param result Set to true if stat(A) and stat(B) have the same device and; /// inode (or equivalent).; /// @returns errc::success if result has been successfully set, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:49,assert,assert,49,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['assert'],['assert']
Testability,/// DoRewriteTest - A simple test for the TokenRewriter class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:29,test,test,29,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,1,['test'],['test']
Testability,"/// Does this SU have a hazard within the current instruction group.; ///; /// The scheduler supports two modes of hazard recognition. The first is the; /// ScheduleHazardRecognizer API. It is a fully general hazard recognizer that; /// supports highly complicated in-order reservation tables; /// (ScoreboardHazardRecognizer) and arbitrary target-specific logic.; ///; /// The second is a streamlined mechanism that checks for hazards based on; /// simple counters that the scheduler itself maintains. It explicitly checks; /// for instruction dispatch limitations, including the number of micro-ops that; /// can dispatch per cycle.; ///; /// TODO: Also check whether the SU must start a new group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:357,log,logic,357,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,2,['log'],['logic']
Testability,"/// Does this runtime natively provide the ARC entrypoints?; ///; /// ARC cannot be directly supported on a platform that does not provide; /// these entrypoints, although it may be supportable via a stub; /// library.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:200,stub,stub,200,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,1,['stub'],['stub']
Testability,/// Driver - Encapsulate logic for constructing compilation processes; /// from a set of gcc-driver-like command line arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:25,log,logic,25,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['logic']
Testability,"/// Dump declarations that are deserialized from PCH, for testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:58,test,testing,58,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,1,['test'],['testing']
Testability,/// Dumps the structure of a subtree. For debugging and testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h:56,test,testing,56,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,1,['test'],['testing']
Testability,/// DwarfLinkerForBinaryRelocationMap contains the logic to handle the; /// relocations and to store them inside an associated RelocationMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h:51,log,logic,51,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h,1,['log'],['logic']
Testability,/// Either find or insert the given nested name specifier; /// mockup in the given context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:63,mock,mockup,63,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,1,['mock'],['mockup']
Testability,"/// EllipsisConversion - When this is true, it means user-defined; /// conversion sequence starts with a ... (ellipsis) conversion, instead of; /// a standard conversion. In this case, 'Before' field must be ignored.; // FIXME. I much rather put this as the first field. But there seems to be; // a gcc code gen. bug which causes a crash in a test. Putting it here seems; // to work around the crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:343,test,test,343,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['test'],['test']
Testability,/// Emit MatchTable opcodes that test whether the instruction named in; /// InsnVarID matches all the predicates and all the operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:33,test,test,33,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['test'],['test']
Testability,/// Emit MatchTable opcodes that test whether the instruction named in; /// InsnVarName matches all the predicates and all the operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:33,test,test,33,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['test'],['test']
Testability,/// Emit MatchTable opcodes that tests whether all the predicates are met.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:33,test,tests,33,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['test'],['tests']
Testability,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:434,stub,stub,434,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,3,['stub'],"['stub', 'stubs']"
Testability,"/// Emit a TB(N)Z instruction which tests \p Bit in \p TestReg.; /// \p IsNegative is true if the test should be ""not zero"".; /// This will also optimize the test bit instruction when possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:36,test,tests,36,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,4,"['Test', 'test']","['TestReg', 'test', 'tests']"
Testability,"/// Emit a constant in a register using target-specific logic, such as; /// constant pool loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:56,log,logic,56,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['log'],['logic']
Testability,"/// Emit a log entry.; /// \param entry - the RLogEntry to be emitted.; /// \returns false if further emission of this Log should be suppressed.; ///; /// \note This function is called concurrently; log emission must be locked; /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:11,log,log,11,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,4,"['Log', 'log']","['Log', 'log']"
Testability,/// Emit a stub for the cross-DSO CFI check function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:11,stub,stub,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['stub'],['stub']
Testability,/// Emit a test that checks if the return value \p RV is nonnull.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:11,test,test,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['test'],['test']
Testability,/// Emit an alloca address in a register using target-specific logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:63,log,logic,63,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['log'],['logic']
Testability,/// Emit conjunction or disjunction tree with the CMP/FCMP followed by a chain; /// of CCMP/CFCMP ops. See @ref AArch64CCMP.; /// Tries to transform the given i1 producing node @p Val to a series compare; /// and conditional compare operations. @returns an NZCV flags producing node; /// and sets @p OutCC to the flags that should be tested or returns SDValue() if; /// transformation was not possible.; /// \p Negate is true if we want this sub-tree being negated just by changing; /// SETCC conditions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:334,test,tested,334,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tested']
Testability,"/// Emit nodes that will be selected as ""test Op0,Op0"", or something; /// equivalent, for use with the given M68k condition code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:41,test,test,41,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,1,['test'],['test']
Testability,"/// Emit nodes that will be selected as ""test Op0,Op0"", or something; /// equivalent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:41,test,test,41,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,/// Emit the floating-point constant +0.0 in a register using target-; /// specific logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:84,log,logic,84,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['log'],['logic']
Testability,"/// Emit the log entry through the static log manager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:13,log,log,13,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,2,['log'],['log']
Testability,"/// Emit the result of the given expression as an abstract constant,; /// asserting that it succeeded. This is only safe to do when the; /// expression is known to be a constant expression with either a fairly; /// simple type or a known simple form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:74,assert,asserting,74,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,1,['assert'],['asserting']
Testability,/// EmitBranchToCounterBlock - Emit a conditional branch to a new block that; /// increments a profile counter based on the semantics of the given logical; /// operator opcode. This is used to instrument branch condition coverage for; /// logical operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:147,log,logical,147,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,2,['log'],['logical']
Testability,/// EmitBranchToCounterBlock - Emit a conditional branch to a new block that; /// increments a profile counter based on the semantics of the given logical; /// operator opcode. This is used to instrument branch condition coverage; /// for logical operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:147,log,logical,147,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['log'],['logical']
Testability,/// EmitVTablePtrCheck - Emit a check that VTable is a valid virtual table for; /// RD using llvm.type.test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:103,test,test,103,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['test'],['test']
Testability,/// Emits a kernel launch stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:26,stub,stub,26,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['stub'],['stub']
Testability,/// Emits code for OpenMP 'if' clause using specified \a BodyGenCallbackTy; /// Here is the logic:; /// if (Cond) {; /// ThenGen();; /// } else {; /// ElseGen();; /// },MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:92,log,logic,92,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['log'],['logic']
Testability,/// Emits code for OpenMP 'if' clause using specified \a CodeGen; /// function. Here is the logic:; /// if (Cond) {; /// ThenGen();; /// } else {; /// ElseGen();; /// },MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:92,log,logic,92,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['log'],['logic']
Testability,/// Emits logic to check features required by \p Rules using the; /// SubtargetFeatures map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h:10,log,logic,10,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,1,['log'],['logic']
Testability,/// Enable production of call site parameters needed to print the debug entry; /// values. Useful for testing purposes when a debugger does not support the; /// feature yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:102,test,testing,102,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['test'],['testing']
Testability,/// Enable store-to-load forwarding conflict detection. This option can; /// be disabled for correctness testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:105,test,testing,105,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['test'],['testing']
Testability,/// Encapsulates Stmt comparison logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp:33,log,logic,33,interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp,1,['log'],['logic']
Testability,/// Equality operators are just for tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:36,test,tests,36,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,1,['test'],['tests']
Testability,"/// Erases an existing element identified by a valid iterator.; ///; /// This invalidates iterators pointing at the same entry, but erase() returns; /// an iterator pointing to the next element in the subset's list. This makes; /// it possible to erase selected elements while iterating over the subset:; ///; /// tie(I, E) = Set.equal_range(Key);; /// while (I != E); /// if (test(*I)); /// I = Set.erase(I);; /// else; /// ++I;; ///; /// Note that if the last element in the subset list is erased, this will; /// return an end iterator which can be decremented to get the new tail (if it; /// exists):; ///; /// tie(B, I) = Set.equal_range(Key);; /// for (bool isBegin = B == I; !isBegin; /* empty */) {; /// isBegin = (--I) == B;; /// if (test(I)); /// break;; /// I = erase(I);; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:377,test,test,377,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,2,['test'],['test']
Testability,"/// Evaluates if the specified FP class test is better performed as the inverse; /// (i.e. fewer instructions should be required to lower it). An example is the; /// test ""inf|normal|subnormal|zero"", which is an inversion of ""nan"".; /// \param Test The test as specified in 'is_fpclass' intrinsic invocation.; /// \returns The inverted test, or fcNone, if inversion does not produce a; /// simpler test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:40,test,test,40,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,6,"['Test', 'test']","['Test', 'test']"
Testability,"/// ExactSIVtest - Tests the SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:19,Test,Tests,19,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// Execute actions and make sure named filters are called for each event.; /// Named filters must be called even if the analysis logic would not require it, lest they report confusing results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:130,log,logic,130,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['log'],['logic']
Testability,"/// ExecuteCommand - Execute an actual command.; ///; /// \param FailingCommand - For non-zero results, this will be set to the; /// Command which failed, if any.; /// \param LogOnly - When true, only tries to log the command, not actually; /// execute it.; /// \return The result code of the subprocess.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:175,Log,LogOnly,175,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,2,"['Log', 'log']","['LogOnly', 'log']"
Testability,"/// ExecuteJob - Execute a single job.; ///; /// \param FailingCommands - For non-zero results, this will be a vector of; /// failing commands and their associated result code.; /// \param LogOnly - When true, only tries to log the command, not actually; /// execute it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:189,Log,LogOnly,189,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,2,"['Log', 'log']","['LogOnly', 'log']"
Testability,/// ExecuteOneTest - Execute a single test predicate on the change set \p S.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:38,test,test,38,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,3,['test'],['test']
Testability,/// Expand check for floating point class.; /// \param ResultVT The type of intrinsic call result.; /// \param Op The tested value.; /// \param Test The test to perform.; /// \param Flags The optimization flags.; /// \returns The expansion result or SDValue() if it fails.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:118,test,tested,118,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,3,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,"/// Export the given type identifier so that ThinLTO backends may import it.; /// Type identifiers are exported by adding coarse-grained information about how; /// to test the type identifier to the summary, and creating symbols in the; /// object file (aliases and absolute symbols) containing fine-grained; /// information about the type identifier.; ///; /// Returns a pointer to the location in which to store the bitmask, if; /// applicable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:167,test,test,167,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,/// Expose LoopVersioning as a pass. Currently this is only used for; /// unit-testing. It adds all memchecks necessary to remove all may-aliasing; /// array accesses from the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:79,test,testing,79,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,1,['test'],['testing']
Testability,"/// ExprLooksBoolean - Returns true if E looks boolean, i.e. it has boolean type; /// or is a logical expression such as (x==y) which has int type, but is; /// commonly interpreted as boolean.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:94,log,logical,94,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,/// Extract a test mask for disallowed floating-point value classes for the; /// parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,test,test,14,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['test'],['test']
Testability,/// Extract a test mask for disallowed floating-point value classes for the; /// return value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,test,test,14,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['test'],['test']
Testability,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:317,Log,Log,317,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,3,"['Log', 'log']","['Log', 'log']"
Testability,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:321,log,log,321,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,2,['log'],['log']
Testability,"/// Extracts the grouped selection ranges from the file that's specified in; /// the -selection=test:<filename> option.; ///; /// The grouped ranges are specified in comments using the following syntax:; /// ""range"" [ group-name ] ""="" [ ""+"" starting-column-offset ] [ ""->""; /// ""+"" ending-line-offset "":""; /// ending-column-position ]; ///; /// The selection range is then computed from this command by taking the ending; /// location of the comment, and adding 'starting-column-offset' to the column; /// for that location. That location in turns becomes the whole selection range,; /// unless 'ending-line-offset' and 'ending-column-position' are specified. If; /// they are specified, then the ending location of the selection range is; /// the starting location's line + 'ending-line-offset' and the; /// 'ending-column-position' column.; ///; /// All selection ranges in one group are expected to produce the same; /// refactoring result.; ///; /// When testing, zero is returned from clang-refactor even when a group; /// produces an initiation error, which is different from normal invocation; /// that returns a non-zero value. This is done on purpose, to ensure that group; /// consistency checks can return non-zero, but still print the output of; /// the group. So even if a test matches the output of group, it will still fail; /// because clang-refactor should return zero on exit when the group results are; /// consistent.; ///; /// \returns std::nullopt on failure (errors are emitted to stderr), or a set of; /// grouped source ranges in the given file otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h:96,test,test,96,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,3,['test'],"['test', 'testing']"
Testability,/// Fetch the unique decl found by this lookup. Asserts; /// that one was found.; ///; /// This is intended for users who have examined the result kind; /// and are certain that there is only one result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:48,Assert,Asserts,48,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['Assert'],['Asserts']
Testability,/// Fill the last physical record of a logical record with zero bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:39,log,logical,39,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,1,['log'],['logical']
Testability,"/// Filter - Filter works with FilterChooser to produce the decoding tree for; /// the ISA.; ///; /// It is useful to think of a Filter as governing the switch stmts of the; /// decoding tree in a certain level. Each case stmt delegates to an inferior; /// FilterChooser to decide what further decoding logic to employ, or in another; /// words, what other remaining bits to look at. The FilterChooser eventually; /// chooses a best Filter to do its job.; ///; /// This recursive scheme ends when the number of Opcodes assigned to the; /// FilterChooser becomes 1 or if there is a conflict. A conflict happens when; /// the Filter/FilterChooser combo does not know how to distinguish among the; /// Opcodes assigned.; ///; /// An example of a conflict is; ///; /// Conflict:; /// 111101000.00........00010000....; /// 111101000.00........0001........; /// 1111010...00........0001........; /// 1111010...00....................; /// 1111010.........................; /// 1111............................; /// ................................; /// VST4q8a 111101000_00________00010000____; /// VST4q8b 111101000_00________00010000____; ///; /// The Debug output shows the path that the decoding tree follows to reach the; /// the conclusion that there is a conflict. VST4q8a is a vst4 to double-spaced; /// even registers, while VST4q8b is a vst4 to double-spaced odd registers.; ///; /// The encoding info in the .td files does not specify this meta information,; /// which could have been used by the decoder to resolve the conflict. The; /// decoder could try to decode the even/odd register numbering and assign to; /// VST4q8a or VST4q8b, but for the time being, the decoder chooses the ""a""; /// version and return the Opcode since the two have the same Asm format string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:303,log,logic,303,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['log'],['logic']
Testability,/// Filter to convert parsed log symbolizer markup elements into human-readable; /// text.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/MarkupFilter.h:29,log,log,29,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/MarkupFilter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/MarkupFilter.h,1,['log'],['log']
Testability,"/// Find all possible Independence Pairs for a boolean expression given its; /// executed Test Vectors. This process involves looking at each condition; /// and attempting to find two Test Vectors that ""match"", giving us a pair.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:90,Test,Test,90,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,2,['Test'],['Test']
Testability,"/// Find appropriate logging stream for message from given object with given topic and message level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:21,log,logging,21,roofit/roofitcore/inc/RooMsgService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h,1,['log'],['logging']
Testability,/// Find the best loop exiting block for layout.; ///; /// This routine implements the logic to analyze the loop looking for the best; /// block to layout at the top of the loop. Typically this is done to maximize; /// fallthrough opportunities.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:87,log,logic,87,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['log'],['logic']
Testability,"/// Find the block that contains the loop control variable and the; /// loop test. This will return the latch block if it's one of the exiting; /// blocks. Otherwise, return the exiting block. Return 'null' when; /// multiple exiting blocks are present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:77,test,test,77,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,1,['test'],['test']
Testability,/// Find the implementation-pointer for the stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:44,stub,stub,44,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stub']
Testability,"/// Find the stub with the given name. If ExportedStubsOnly is true,; /// this will only return a result if the stub's flags indicate that it; /// is exported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:13,stub,stub,13,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,2,['stub'],['stub']
Testability,"/// Finds the tokens that are consecutive (from the same FileID); /// creates a single SLocEntry, and assigns SourceLocations to each token that; /// point to that SLocEntry. e.g for; /// assert(foo == bar);; /// There will be a single SLocEntry for the ""foo == bar"" chunk and locations; /// for the 'foo', '==', 'bar' tokens will point inside that chunk.; ///; /// \arg begin_tokens will be updated to a position past all the found; /// consecutive tokens.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp:188,assert,assert,188,interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,1,['assert'],['assert']
Testability,/// Finishes up encoding an LD/ST instruction.; /// The purpose of this function is to set an bit in the instruction; /// which follows no logical pattern. See the implementation for details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.h:139,log,logical,139,interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.h,1,['log'],['logical']
Testability,/// First remove all the instructions of DelBB and then make sure DelBB has a; /// valid terminator instruction which is necessary to have when DelBB still; /// has to be inside of its parent Function while awaiting deletion under Lazy; /// UpdateStrategy to prevent other routines from asserting the state of the; /// IR is inconsistent. Assert if DelBB is nullptr or has predecessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h:287,assert,asserting,287,interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,2,"['Assert', 'assert']","['Assert', 'asserting']"
Testability,"/// Fit a parabola, where parameters are set up such that negative function values are obtained.; /// The minimiser needs to recover from that.; /// Test also that when recovery with NaN packing is switched off, the minimiser fails to recover.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:149,Test,Test,149,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['Test'],['Test']
Testability,"/// Floating-point class tests, supported by 'is_fpclass' intrinsic. Actual; /// test may be an OR combination of basic tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:25,test,tests,25,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,3,['test'],"['test', 'tests']"
Testability,"/// Fold (icmp Pred1 V1, C1) & (icmp Pred2 V2, C2); /// or (icmp Pred1 V1, C1) | (icmp Pred2 V2, C2); /// into a single comparison using range-based reasoning.; /// NOTE: This is also used for logical and/or, must be poison-safe!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:193,log,logical,193,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"/// Fold (icmp eq ctpop(X) 1) | (icmp eq X 0) into (icmp ult ctpop(X) 2) and; /// fold (icmp ne ctpop(X) 1) & (icmp ne X 0) into (icmp ugt ctpop(X) 1).; /// Also used for logical and/or, must be poison safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:171,log,logical,171,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,/// Fold equality-comparison between zero and any (maybe truncated) right-shift; /// by one-less-than-bitwidth into a sign test on the original value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:123,test,test,123,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,/// For \p E referring to a ref-countable/-counted pointer/reference we return; /// whether it's a safe call argument. Examples: function parameter or; /// this-pointer. The logic relies on the set of recursive rules we enforce for; /// WebKit codebase.; ///; /// \returns Whether \p E is a safe call arugment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h:174,log,logic,174,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h,1,['log'],['logic']
Testability,"/// For a given condition and two executed Test Vectors, A and B, see if the; /// two test vectors match forming an Independence Pair for the condition.; /// For two test vectors to match, the following must be satisfied:; /// - The condition's value in each test vector must be opposite.; /// - The result's value in each test vector must be opposite.; /// - All other conditions' values must be equal or marked as ""don't care"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:43,Test,Test,43,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,5,"['Test', 'test']","['Test', 'test']"
Testability,"/// For example, SLT->ULT, SLE->ULE, SGT->UGT, SGE->UGE, ULT->Failed assert; /// @returns the unsigned version of the predicate for this instruction (which; /// has to be an signed predicate).; /// return the unsigned version of a predicate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,assert,assert,69,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['assert'],['assert']
Testability,"/// For example, SLT->ULT, SLE->ULE, SGT->UGT, SGE->UGE, ULT->Failed assert; /// @returns the unsigned version of the signed predicate pred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,assert,assert,69,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['assert'],['assert']
Testability,"/// For example, SLT->ULT, ULT->SLT, SLE->ULE, ULE->SLE, EQ->Failed assert; /// @returns the unsigned version of the signed predicate pred or; /// the signed version of the signed predicate pred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:68,assert,assert,68,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['assert'],['assert']
Testability,"/// For example, ULT->SLT, ULE->SLE, UGT->SGT, UGE->SGE, SLT->Failed assert; /// @returns the signed version of the predicate for this instruction (which; /// has to be an unsigned predicate).; /// return the signed version of a predicate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,assert,assert,69,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['assert'],['assert']
Testability,"/// For example, ULT->SLT, ULE->SLE, UGT->SGT, UGE->SGE, SLT->Failed assert; /// @returns the signed version of the unsigned predicate pred.; /// return the signed version of a predicate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,assert,assert,69,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['assert'],['assert']
Testability,"/// For testing purposes, RNTuple data can be written into a bare file container instead of a ROOT file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:8,test,testing,8,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['test'],['testing']
Testability,/// For the comparison operators we have chosen to use lexicographical; /// ordering where valid costs are always considered to be less than invalid; /// costs. This avoids having to add asserts to the comparison operators that; /// the states are valid and users can test for validity of the cost; /// explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:187,assert,asserts,187,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,2,"['assert', 'test']","['asserts', 'test']"
Testability,"/// For the instruction sequence of store below, F and I values; /// are bundled together as an i64 value before being stored into memory.; /// Sometimes it is more efficient to generate separate stores for F and I,; /// which can remove the bitwise instructions or sink them to colder places.; ///; /// (store (or (zext (bitcast F to i32) to i64),; /// (shl (zext I to i64), 32)), addr) -->; /// (store F, addr) and (store I, addr+4); ///; /// Similarly, splitting for other merged store can also be beneficial, like:; /// For pair of {i32, i32}, i64 store --> two i32 stores.; /// For pair of {i32, i16}, i64 store --> two i32 stores.; /// For pair of {i16, i16}, i32 store --> two i16 stores.; /// For pair of {i16, i8}, i32 store --> two i16 stores.; /// For pair of {i8, i8}, i16 store --> two i8 stores.; ///; /// We allow each target to determine specifically which kind of splitting is; /// supported.; ///; /// The store patterns are commonly seen from the simple code snippet below; /// if only std::make_pair(...) is sroa transformed before inlined into hoo.; /// void goo(const std::pair<int, float> &);; /// hoo() {; /// ...; /// goo(std::make_pair(tmp, ftmp));; /// ...; /// }; ///; /// Although we already have similar splitting in DAG Combine, we duplicate; /// it in CodeGenPrepare to catch the case in which pattern is across; /// multiple BBs. The logic in DAG Combine is kept to catch case generated; /// during code expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:1367,log,logic,1367,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['log'],['logic']
Testability,"/// Forbid to convert from Error::success() implicitly, this avoids having; /// Expected<T> foo() { return Error::success(); } which compiles otherwise; /// but triggers the assertion above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:174,assert,assertion,174,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['assert'],['assertion']
Testability,"/// ForceFastISel - Use the fast-isel, even for subtargets where it is not; /// currently supported (for testing only).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp:105,test,testing,105,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,1,['test'],['testing']
Testability,"/// GCCSuffix, OSSuffix & IncludeSuffix will be appended directly to the; /// sysroot string so they must either be empty or begin with a '/' character.; /// This is enforced with an assert in the constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:183,assert,assert,183,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,1,['assert'],['assert']
Testability,"/// GVStubs - Darwin '$non_lazy_ptr' stubs. The key is something like; /// ""Lfoo$non_lazy_ptr"", the value is something like ""_foo"". The extra bit; /// is true if this GV is external.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:37,stub,stubs,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,1,['stub'],['stubs']
Testability,/// GVStubs - These stubs are used to materialize global addresses in PIC; /// mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:20,stub,stubs,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,2,['stub'],['stubs']
Testability,"/// Gather the information that is difficult to gather for an Instruction, or; /// is changed. i.e. the operands of an Instruction and the Types of those; /// operands. This extra information allows for similarity matching to make; /// assertions that allow for more flexibility when checking for whether an; /// Instruction performs the same operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:236,assert,assertions,236,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['assert'],['assertions']
Testability,/// Generate Interface Stub Files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:23,Stub,Stub,23,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['Stub'],['Stub']
Testability,"/// Generate code to produces one ""bit test"" for a given BitTestCase \p B.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:39,test,test,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['test'],['test']
Testability,/// Generate processing log to the standard output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:24,log,log,24,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,2,['log'],['log']
Testability,/// Generate the logical AND of \p ChecksToHoist and \p OldCondition and make; /// it available at InsertPt,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp:17,log,logical,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,1,['log'],['logical']
Testability,"/// Generates code to check that an operand is a pointer to any address space.; ///; /// In SelectionDAG, the types did not describe pointers or address spaces. As a; /// result, iN is used to describe a pointer of N bits to any address space and; /// PatFrag predicates are typically used to constrain the address space.; /// There's no reliable means to derive the missing type information from the; /// pattern so imported rules must test the components of a pointer separately.; ///; /// If SizeInBits is zero, then the pointer size will be obtained from the; /// subtarget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:437,test,test,437,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['test'],['test']
Testability,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:525,test,tested,525,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,3,['test'],['tested']
Testability,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:127,test,tests,127,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,2,['test'],['tests']
Testability,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:97,log,logical,97,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['log'],['logical']
Testability,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:115,log,logical,115,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['log'],['logical']
Testability,"/// Generic recursive split emission routine.; ///; /// This method recursively splits an aggregate op (load or store) into; /// scalar or vector ops. It splits recursively until it hits a single value; /// and emits that single value operation via the template argument.; ///; /// The logic of this routine relies on GEPs and insertvalue and; /// extractvalue all operating with the same fundamental index list, merely; /// formatted differently (GEPs need actual values).; ///; /// \param Ty The type being split recursively into smaller ops.; /// \param Agg The aggregate value being built up or stored, depending on; /// whether this is splitting a load or a store respectively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:286,log,logic,286,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['log'],['logic']
Testability,"/// Generic routine to convert an SSA value to a value of a different; /// type.; ///; /// This will try various different casting techniques, such as bitcasts,; /// inttoptr, and ptrtoint casts. Use the \c canConvertValue predicate to test; /// two types for viability with this routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:236,test,test,236,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['test'],['test']
Testability,"/// Get a cached analysis. If the analysis can be invalidated, this will; /// assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:78,assert,assert,78,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['assert'],['assert']
Testability,"/// Get a rough equivalent of an LLT for a given MVT. LLT does not yet support; /// scalarable vector types, and will assert if used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelTypeUtils.h:118,assert,assert,118,interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelTypeUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelTypeUtils.h,1,['assert'],['assert']
Testability,"/// Get a short ""name"" for the module.; ///; /// This is useful for debugging or logging. It is essentially a convenience; /// wrapper around getModuleIdentifier().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:81,log,logging,81,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['log'],['logging']
Testability,/// Get kernel handle by stub function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:25,stub,stub,25,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['stub'],['stub']
Testability,/// Get kernel stub by kernel handle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:15,stub,stub,15,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['stub'],['stub']
Testability,/// Get sign extended value; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bit width must be <= 64 or the value must fit within an; /// int64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:213,assert,assertion,213,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['assert'],['assertion']
Testability,"/// Get test statistics value for data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,test,test,8,roofit/roostats/inc/RooStats/HybridResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h,1,['test'],['test']
Testability,"/// Get test statistics values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h:8,test,test,8,roofit/roostats/inc/RooStats/SamplingDistribution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h,1,['test'],['test']
Testability,"/// Get test statistics values for the b model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,test,test,8,roofit/roostats/inc/RooStats/HybridResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h,1,['test'],['test']
Testability,"/// Get test statistics values for the sb model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,test,test,8,roofit/roostats/inc/RooStats/HybridResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h,1,['test'],['test']
Testability,/// Get the CondCode that's to be used to test the result of the comparison; /// libcall against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:42,test,test,42,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:37,test,test,37,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,9,['test'],['test']
Testability,"/// Get the TestStatistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:12,Test,TestStatistic,12,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,2,['Test'],['TestStatistic']
Testability,/// Get the alignment of this symbol as the actual value (not log 2).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h:62,log,log,62,interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,1,['log'],['log']
Testability,"/// Get the current value of the user interrupt flag (UIF). Can be executed; /// regardless of CPL and inside a transactional region. Can be executed only; /// if CR4.UINT = 1, the logical processor is in 64-bit mode, and software is; /// not executing inside an enclave; otherwise, it causes an invalid-opcode; /// exception.; ///; /// \headerfile <x86gprintrin.h>; ///; /// This intrinsic corresponds to the <c> TESTUI </c> instruction.; ///; /// \returns The current value of the user interrupt flag (UIF).; ///; /// \code{.operation}; /// CF := UIF; /// ZF := 0; /// AF := 0; /// OF := 0; /// PF := 0; /// SF := 0; /// dst := CF; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h:181,log,logical,181,interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,2,"['TEST', 'log']","['TESTUI', 'logical']"
Testability,"/// Get the exact loop backedge taken count considering all loop exits. A; /// computable result can only be returned for loops with all exiting blocks; /// dominating the latch. howFarToZero assumes that the limit of each loop test; /// is never skipped. This is a valid assumption as long as the loop exits via; /// that test. For precise results, it is the caller's responsibility to specify; /// the relevant loop exiting block using getExact(ExitingBlock, SE).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:228,test,test,228,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['test'],['test']
Testability,/// Get the full 8 bytes of the TSC when we get the log record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h:52,log,log,52,interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,1,['log'],['log']
Testability,"/// Get the intersection (logical and) of all of the potential IR flags; /// of each scalar operation (VL) that will be converted into a vector (I).; /// If OpValue is non-null, we only consider operations similar to OpValue; /// when intersecting.; /// Flag set: NSW, NUW (if IncludeWrapFlags is true), exact, and all of; /// fast-math.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:26,log,logical,26,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['log'],['logical']
Testability,/// Get the name to use in the debug info for a dynamic initializer or atexit; /// stub function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:83,stub,stub,83,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['stub'],['stub']
Testability,/// Get the register for the operand index.; /// The operand at the index should be a register (asserted by; /// MachineOperand).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:96,assert,asserted,96,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,1,['assert'],['asserted']
Testability,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:24,test,test,24,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,6,['test'],['test']
Testability,/// Get the specified modules ready for code generator testing.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:55,test,testing,55,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['testing']
Testability,"/// Get the unhashed string representation of the V1 issue hash.; /// When hashed, it becomes the actual issue hash. Useful for testing.; /// See GetIssueHashV1() for more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h:128,test,testing,128,interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,1,['test'],['testing']
Testability,/// Get vector of base/derived pairs from statepoint.; /// Elements are indices into GC Pointer operand list (logical).; /// Returns number of elements in GCMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:110,log,logical,110,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,1,['log'],['logical']
Testability,/// Get zero extended value; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:213,assert,assertion,213,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['assert'],['assertion']
Testability,"/// GetTestResult - Get the test result for the \p Changes from the; /// cache, executing the test if necessary.; ///; /// \param Changes - The change set to test.; /// \return - The test result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:28,test,test,28,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,4,['test'],['test']
Testability,"/// GetTestResult - Get the test result for the active set \p Changes with; /// \p Required changes from the cache, executing the test if necessary.; ///; /// \param Changes - The set of active changes being minimized, which should; /// have their pred closure included in the test.; /// \param Required - The set of changes which have previously been; /// established to be required.; /// \return - The test result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:28,test,test,28,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,4,['test'],['test']
Testability,/// Gets a single clause of the specified kind associated with the; /// current directive iff there is only one clause of this kind (and assertion; /// is fired if there is more than one clause is associated with the; /// directive). Returns nullptr if no clause of this kind is associated with; /// the directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:137,assert,assertion,137,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['assert'],['assertion']
Testability,"/// GitHub issue #11396.; /// Test whether the RooFit::SplitRange() command argument for simultaneous; /// fits is correctly considered in multi-range fits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:30,Test,Test,30,roofit/roofitcore/test/testRooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx,1,['Test'],['Test']
Testability,"/// GitHub issue #8307.; /// A likelihood with a model wrapped in a RooSimultaneous in one category; /// should give the same results as the likelihood with the model directly. We; /// also test that things go well if you wrap the simultaneous NLL again in; /// another class, which can happen in user frameworks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:190,test,test,190,roofit/roofitcore/test/testRooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx,1,['test'],['test']
Testability,"/// Given a CR logical operation \p CROp, branch opcode \p BROp as well as; /// a flag to indicate if the first operand of \p CROp is used as the; /// SplitBefore operand, determines whether either of the branches are to be; /// inverted as well as whether the new target should be the original; /// fall-through block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:15,log,logical,15,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,1,['log'],['logical']
Testability,"/// Given a \p Def.Reg and Def.SubReg pair, use \p RewriteMap to find; /// the new source to use for rewrite. If \p HandleMultipleSources is true and; /// multiple sources for a given \p Def are found along the way, we found a; /// PHI instructions that needs to be rewritten.; /// TODO: HandleMultipleSources should be removed once we test PHI handling; /// with coalescable copies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:336,test,test,336,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['test'],['test']
Testability,"/// Given a bitwise logic op, check if the operands are add/sub with a common; /// source value and inverted constant (identity: C - X -> ~(X + ~C)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:20,log,logic,20,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logic']
Testability,"/// Given a bitwise logic operation N with a matching bitwise logic operand,; /// fold a pattern where 2 of the source operands are identically shifted; /// values. For example:; /// ((X0 << Y) | Z) | (X1 << Y) --> ((X0 | X1) << Y) | Z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,log,logic,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['log'],['logic']
Testability,"/// Given a call to the intrinsic \@llvm.type.test, find all devirtualizable; /// call sites based on the call and return them in DevirtCalls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TypeMetadataUtils.h:46,test,test,46,interpreter/llvm-project/llvm/include/llvm/Analysis/TypeMetadataUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TypeMetadataUtils.h,1,['test'],['test']
Testability,"/// Given a chain of or (||) or and (&&) comparison of a value against a; /// constant, this will try to recover the information required for a switch; /// structure.; /// It will depth-first traverse the chain of comparison, seeking for patterns; /// like %a == 12 or %a < 4 and combine them to produce a set of integer; /// representing the different cases for the switch.; /// Note that if the chain is composed of '||' it will build the set of elements; /// that matches the comparisons (i.e. any of this value validate the chain); /// while for a chain of '&&' it will build the set elements that make the test; /// fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:611,test,test,611,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['test'],['test']
Testability,"/// Given a disjoint set of type identifiers and functions, build a jump table; /// for the functions, build the bit sets and lower the llvm.type.test calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:146,test,test,146,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"/// Given a disjoint set of type identifiers and functions, build the bit sets; /// and lower the llvm.type.test calls, architecture dependently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:108,test,test,108,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"/// Given a disjoint set of type identifiers and globals, lay out the globals,; /// build the bit sets and lower the llvm.type.test calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:127,test,test,127,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"/// Given a program state, construct the logical conjunction and add it to; /// the solver",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:41,log,logical,41,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,1,['log'],['logical']
Testability,"/// Given a tree of logic operations with shape like; /// (LOGIC (LOGIC (X, Y), LOGIC (Z, Y))); /// try to match and fold shift operations with the same shift amount.; /// For example:; /// LOGIC (LOGIC (SH X0, Y), Z), (LOGIC (SH X1, Y), W) -->; /// --> LOGIC (SH (LOGIC X0, X1), Y), (LOGIC Z, W)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,log,logic,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,10,"['LOG', 'log']","['LOGIC', 'logic']"
Testability,"/// Given a vector that is bitcast to an integer, optionally logically; /// right-shifted, and truncated, convert it to an extractelement.; /// Example (big endian):; /// trunc (lshr (bitcast <4 x i32> %X to i128), 32) to i32; /// --->; /// extractelement <4 x i32> %X, 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:61,log,logically,61,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logically']
Testability,"/// Given an assignment `*LHS = RHS`, emit a test that checks if \p RHS is; /// nonnull, if \p LHS is marked _Nonnull.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:45,test,test,45,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['test'],['test']
Testability,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:492,log,logic,492,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,1,['log'],['logic']
Testability,"/// GlobalDecl - represents a global declaration. This can either be a; /// CXXConstructorDecl and the constructor type (Base, Complete).; /// a CXXDestructorDecl and the destructor type (Base, Complete),; /// a FunctionDecl and the kernel reference type (Kernel, Stub), or; /// a VarDecl, a FunctionDecl or a BlockDecl.; ///; /// When a new type of GlobalDecl is added, the following places should; /// be updated to convert a Decl* to a GlobalDecl:; /// PredefinedExpr::ComputeName() in lib/AST/Expr.cpp.; /// getParentOfLocalEntity() in lib/AST/ItaniumMangle.cpp; /// ASTNameGenerator::Implementation::writeFuncOrVarName in lib/AST/Mangle.cpp; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h:264,Stub,Stub,264,interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h,1,['Stub'],['Stub']
Testability,"/// Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:20,test,test,20,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,"/// H0 distributions for using only with 1-sample tests.; /// One should provide the distribution parameters otherwise the default values will be used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:50,test,tests,50,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:238,log,log,238,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,1,['log'],['log']
Testability,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:367,log,log,367,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,4,['log'],"['log', 'logging']"
Testability,/// Handle conditional logic for running static initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:23,log,logic,23,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,1,['log'],['logic']
Testability,"/// Handle this diagnostic, reporting it to the user or; /// capturing it to a log as needed.; ///; /// The default implementation just keeps track of the total number of; /// warnings and errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:79,log,log,79,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['log'],['log']
Testability,"/// HandleDiagnostic - Handle this diagnostic, reporting it to the user or; /// capturing it to a log as needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:98,log,log,98,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,1,['log'],['log']
Testability,"/// HandlePluralModifier - Handle the integer 'plural' modifier. This is used; /// for complex plural forms, or in languages where all plurals are complex.; /// The syntax is: %plural{cond1:form1|cond2:form2|:form3}, where condn are; /// conditions that are tested in order, the form corresponding to the first; /// that applies being emitted. The empty condition is always true, making the; /// last form a default case.; /// Conditions are simple boolean expressions, where n is the number argument.; /// Here are the rules.; /// condition := expression | empty; /// empty := -> always true; /// expression := numeric [',' expression] -> logical or; /// numeric := range -> true if n in range; /// | '%' number '=' range -> true if n % number in range; /// range := number; /// | '[' number ',' number ']' -> ranges are inclusive both ends; ///; /// Here are some examples from the GNU gettext manual written in this form:; /// English:; /// {1:form0|:form1}; /// Latvian:; /// {0:form2|%100=11,%10=0,%10=[2,9]:form1|:form0}; /// Gaeilge:; /// {1:form0|2:form1|:form2}; /// Romanian:; /// {1:form0|0,%100=[1,19]:form1|:form2}; /// Lithuanian:; /// {%10=0,%100=[10,19]:form2|%10=1:form0|:form1}; /// Russian (requires repeated form):; /// {%100=[11,14]:form2|%10=1:form0|%10=[2,4]:form1|:form2}; /// Slovak; /// {1:form0|[2,4]:form1|:form2}; /// Polish (requires repeated form):; /// {1:form0|%100=[10,20]:form2|%10=[2,4]:form1|:form2}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:258,test,tested,258,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,2,"['log', 'test']","['logical', 'tested']"
Testability,"/// Harden a value in a register.; ///; /// This is the low-level logic to fully harden a value sitting in a register; /// against leaking during speculative execution.; ///; /// Unlike hardening an address that is used by a load, this routine is required; /// to hide *all* incoming bits in the register.; ///; /// `Reg` must be a virtual register. Currently, it is required to be a GPR no; /// larger than the predicate state register. FIXME: We should support vector; /// registers here by broadcasting the predicate state.; ///; /// The new, hardened virtual register is returned. It will have the same; /// register class as `Reg`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:66,log,logic,66,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['log'],['logic']
Testability,/// Hashing and equality testing for a set of the instruction states.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:25,test,testing,25,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['test'],['testing']
Testability,"/// Helper for testing applicability of, and applying, handlers for; /// ErrorInfo types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,test,testing,15,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['test'],['testing']
Testability,"/// Helper function to emit `test` functions for the executor. This emits both; /// an enum to reference predicates in the MatchTable, and a function to; /// switch over the enum & execute the predicate's C++ code.; ///; /// \tparam PredicateObject An object representing a predicate to emit.; /// \param OS Output stream; /// \param TypeIdentifier Identifier used for the type of the predicate,; /// e.g. `MI` for MachineInstrs.; /// \param ArgType Full type of the argument, e.g. `const MachineInstr &`; /// \param ArgName Name of the argument, e.g. `MI` for MachineInstrs.; /// \param AdditionalArgs Optional additional argument declarations.; /// \param AdditionalDeclarations Optional declarations to write at the start; /// of the function, before switching over the predicates enum.; /// \param Predicates Predicates to emit.; /// \param GetPredEnumName Returns an enum name for a given predicate.; /// \param GetPredCode Returns the C++ code of a given predicate.; /// \param Comment Optional comment for the enum declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h:29,test,test,29,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,1,['test'],['test']
Testability,/// Helper function to test whether a shuffle mask could be; /// simplified by widening the elements being shuffled.; ///; /// Appends the mask for wider elements in WidenedMask if valid. Otherwise; /// leaves it in an unspecified state.; ///; /// NOTE: This must handle normal vector shuffle masks and *target* vector; /// shuffle masks. The latter have the special property of a '-2' representing; /// a zero-ed lane of a vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:106,test,tested,106,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,4,"['TEST', 'test']","['TEST', 'test', 'tested']"
Testability,"/// Helper method for getting the code model, returning Default if; /// CM does not have a value. The tiny and kernel models will produce; /// an error, so targets that support them or require more complex codemodel; /// selection logic should implement and call their own getEffectiveCodeModel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:231,log,logic,231,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,1,['log'],['logic']
Testability,"/// Helper routine of SimplifyDemandedUseBits. It tries to simplify; /// ""E1 = (X lsr C1) << C2"", where the C1 and C2 are constant, into; /// ""E2 = X << (C2 - C1)"" or ""E2 = X >> (C1 - C2)"", depending on the sign; /// of ""C2-C1"".; ///; /// Suppose E1 and E2 are generally different in bits S={bm, bm+1,; /// ..., bn}, without considering the specific value X is holding.; /// This transformation is legal iff one of following conditions is hold:; /// 1) All the bit in S are 0, in this case E1 == E2.; /// 2) We don't care those bits in S, per the input DemandedMask.; /// 3) Combination of 1) and 2). Some bits in S are 0, and we don't care the; /// rest bits.; ///; /// Currently we only test condition 2).; ///; /// As with SimplifyDemandedUseBits, it returns NULL if the simplification was; /// not successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:689,test,test,689,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['test'],['test']
Testability,/// Helper that either creates a forward declaration or a stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:58,stub,stub,58,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['stub'],['stub']
Testability,/// Helper to print the name of a MBB.; ///; /// Only used by debug logging.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:68,log,logging,68,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['log'],['logging']
Testability,"/// Helper to represent an access offset and size, with logic to deal with; /// uncertainty and check for overlapping accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:56,log,logic,56,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['log'],['logic']
Testability,/// Helper to test for a load that can be folded with x86 shuffles.; ///; /// This is particularly important because the set of instructions varies; /// significantly based on whether the operand is a load or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:14,test,test,14,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,/// Helper utility that encapsulates the logic for canonicalizing a virtual; /// path and a path to copy from.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:41,log,logic,41,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,1,['log'],['logic']
Testability,"/// Here we can be fairly sure that executing this exit will most likely; /// lead to executing llvm.experimental.deoptimize.; /// This is a profitability heuristic, not a legality constraint.; // If we found a widenable exit condition, do two things:; // 1) fold the widened exit test into the widenable condition; // 2) fold the branch to untaken - avoids infinite looping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:281,test,test,281,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,1,['test'],['test']
Testability,"/// Hidden option to stress test load slicing, i.e., when this option; /// is enabled, load slicing bypasses most of its profitability guards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,test,test,28,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"/// Hijacks all messages with given level and topic (and optionally object name) while alive.; /// Use this like an ostringstream afterwards. The messages can e.g. be retrieved using `str()`.; /// Useful for unit tests / debugging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:213,test,tests,213,roofit/roofitcore/inc/RooHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h,1,['test'],['tests']
Testability,/// Hook called whenever an \#elif is seen.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param ConditionValue The evaluated value of the condition.; /// \param IfLoc the source location of the \#if/\#ifdef/\#ifndef directive.; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:165,test,tested,165,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,"/// Hook called whenever an \#elifdef branch is taken.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefinition if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:165,test,tested,165,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,/// Hook called whenever an \#elifdef is skipped.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param IfLoc the source location of the \#if/\#ifdef/\#ifndef directive.; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:171,test,tested,171,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,"/// Hook called whenever an \#elifndef branch is taken.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefinition if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:166,test,tested,166,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,/// Hook called whenever an \#elifndef is skipped.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param IfLoc the source location of the \#if/\#ifdef/\#ifndef directive.; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:172,test,tested,172,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,/// Hook called whenever an \#if is seen.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param ConditionValue The evaluated value of the condition.; ///; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:163,test,tested,163,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,"/// Hook called whenever an \#ifdef is seen.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefinition if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:155,test,tested,155,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,"/// Hook called whenever an \#ifndef is seen.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefiniton if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:156,test,tested,156,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['test'],['tested']
Testability,"/// Hstogram comparison tests; /// In this test we compare the TKDE with an histogram; /// filled with the same type of data. A GoF test (chi2 and KS) is applied to; /// check for compatibility",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:24,test,tests,24,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,3,['test'],"['test', 'tests']"
Testability,"/// IO tests; /// In this test we compare the value before writing and after reading of the TKDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:7,test,tests,7,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,2,['test'],"['test', 'tests']"
Testability,"/// IVChain logic must consistently peek base TruncInst operands, so wrap it in; /// a convenient helper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['log'],['logic']
Testability,"/// Identifies an atomic boolean variable such as ""V1"".; ///; /// This often represents an assertion that is interesting to the analysis but; /// cannot immediately be proven true or false. For example:; /// - V1 may mean ""the program reaches this point"",; /// - V2 may mean ""the parameter was null""; ///; /// We can use these variables in formulas to describe relationships we know; /// to be true: ""if the parameter was null, the program reaches this point"".; /// We also express hypotheses as formulas, and use a SAT solver to check; /// whether they are consistent with the known facts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h:91,assert,assertion,91,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,1,['assert'],['assertion']
Testability,"/// If \p MI is a logical operation on an exec value,; /// return the register copied to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp:18,log,logical,18,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp,1,['log'],['logical']
Testability,"/// If ``true``, a space is inserted after the logical not operator (``!``).; /// \code; /// true: false:; /// ! someExpression(); vs. !someExpression();; /// \endcode; /// \version 9",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:47,log,logical,47,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['log'],['logical']
Testability,"/// If a (v)select has a condition value that is a sign-bit test, try to smear; /// the condition operand sign-bit across the value width and use it as a mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,test,test,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"/// If a vector select has an operand that is -1 or 0, try to simplify the; /// select to a bitwise logic operation.; /// TODO: Move to DAGCombiner, possibly using TargetLowering::hasAndNot()?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:100,log,logic,100,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"/// If both input operands of a logic op are being cast from floating-point; /// types or FP compares, try to convert this into a floating-point logic node; /// to avoid unnecessary moves from SSE to integer registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:32,log,logic,32,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,"/// If false, we do not worry if the cost is greater than the benefit. This; /// is for debugging and testing, so that we can test small cases to ensure; /// that the outlining is being done correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:102,test,testing,102,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,2,['test'],"['test', 'testing']"
Testability,"/// If provided, analysis details will be recorded here.; /// (This is always non-null within an AnalysisContext, the framework; /// provides a fallback no-op logger).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h:159,log,logger,159,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,1,['log'],['logger']
Testability,"/// If the descriptor is constructed in pieces consisting of physical and alias columns; /// (regular and projected fields), the natural column order would be; /// - Physical and alias columns of piece one; /// - Physical and alias columns of piece two; /// - etc.; /// What we want, however, are first all physical column IDs and then all alias column IDs.; /// This method adds `offset` to the logical column IDs of all alias columns and fixes up the corresponding; /// column IDs in the projected field descriptors. In this way, a new piece of physical and alias columns can; /// first shift the existing alias columns by the number of new physical columns, resulting in the following order; /// - Physical columns of piece one; /// - Physical columns of piece two; /// - ...; // - Logical columns of piece one; /// - Logical columns of piece two; /// - ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:396,log,logical,396,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,3,"['Log', 'log']","['Logical', 'logical']"
Testability,"/// If this array is isCString(), then this method returns the array (without; /// the trailing null byte) as a StringRef. Otherwise, it asserts out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:137,assert,asserts,137,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['asserts']
Testability,"/// If this array is isString(), then this method returns the array as a; /// StringRef. Otherwise, it asserts out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:103,assert,asserts,103,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['asserts']
Testability,"/// If this basic block is ONLY a setcc and a branch, and if a predecessor; /// branches to us and one of our successors, fold the setcc into the; /// predecessor and use logical operations to pick the right destination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:171,log,logical,171,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['log'],['logical']
Testability,"/// If this basic block is simple enough, and if a predecessor branches to us; /// and one of our successors, fold the block into the predecessor and use; /// logical operations to pick the right destination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:159,log,logical,159,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"/// If this field is set, LTO will write input file paths and symbol; /// resolutions here in llvm-lto2 command line flag format. This can be; /// used for testing and for running the LTO pipeline outside of the linker; /// with llvm-lto2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:156,test,testing,156,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,1,['test'],['testing']
Testability,"/// If this flag is set, the remapper ignores missing function-local entries; /// (Argument, Instruction, BasicBlock) that are not in the value map. If it; /// is unset, it aborts if an operand is asked to be remapped which doesn't; /// exist in the mapping.; ///; /// There are no such assertions in MapValue(), whose results are almost; /// unchanged by this flag. This flag mainly changes the assertion behaviour; /// in RemapInstruction().; ///; /// Since an Instruction's metadata operands (even that point to SSA values); /// aren't guaranteed to be dominated by their definitions, MapMetadata will; /// return ""!{}"" instead of ""null"" for \a LocalAsMetadata instances whose SSA; /// values are unmapped when this flag is set. Otherwise, \a MapValue(); /// completely ignores this flag.; ///; /// \a MapMetadata() always ignores this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h:287,assert,assertions,287,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,2,['assert'],"['assertion', 'assertions']"
Testability,"/// If this is a bitwise logic instruction and both operands have the same; /// opcode, try to sink the other opcode after the logic instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,log,logic,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['log'],['logic']
Testability,"/// If this is a constant FP splat and the splatted constant FP is an; /// exact power or 2, return the log base 2 integer value. Otherwise,; /// return -1.; ///; /// The BitWidth specifies the necessary bit precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:104,log,log,104,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['log'],['log']
Testability,"/// If this is an add or subtract where one operand is produced by a cmp+setcc,; /// then try to convert it to an ADC or SBB. This replaces TEST+SET+{ADD/SUB}; /// with CMP+{ADC, SBB}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:140,TEST,TEST,140,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TEST']
Testability,"/// If this is an add or subtract where one operand is produced by a cmp+setcc,; /// then try to convert it to an ADC or SBB. This replaces TEST+SET+{ADD/SUB}; /// with CMP+{ADC, SBB}.; /// Also try (ADD/SUB)+(AND(SRL,1)) bit extraction pattern with BT+{ADC, SBB}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:140,TEST,TEST,140,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TEST']
Testability,"/// If this template parameter name was resolved (found in template parameter; /// list), then this stores a list of position indexes in all template; /// parameter lists.; ///; /// For example:; /// \verbatim; /// template<typename C, template<typename T> class TT>; /// void test(TT<int> aaa);; /// \endverbatim; /// For C: Position = { 0 }; /// For TT: Position = { 1 }; /// For T: Position = { 1, 0 }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h:277,test,test,277,interpreter/llvm-project/clang/include/clang/AST/Comment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h,1,['test'],['test']
Testability,"/// If true, evaluate special testing stream functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:30,test,testing,30,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['test'],['testing']
Testability,"/// If we are extracting a subvector of a vector select and the select condition; /// is composed of concatenated vectors, try to narrow the select width. This; /// is a common pattern for AVX1 integer code because 256-bit selects may be; /// legal, but there is almost no integer math/logic available for 256-bit.; /// This function should only be called with legal types (otherwise, the calls; /// to get simple value types will assert).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:286,log,logic,286,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['assert', 'log']","['assert', 'logic']"
Testability,"/// If we are inverting an PTEST/TESTP operand, attempt to adjust the CC; /// to avoid the inversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:33,TEST,TESTP,33,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TESTP']
Testability,"/// If we have a shift-by-constant of a bin op (bitwise logic op or add/sub w/; /// shl) that itself has a shift-by-constant operand with identical opcode, we; /// may be able to convert that into 2 independent shifts followed by the logic; /// op. This eliminates a use of an intermediate value (reduces dependency; /// chain).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:56,log,logic,56,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,2,['log'],['logic']
Testability,"/// If we have a shift-by-constant of a bitwise logic op that itself has a; /// shift-by-constant operand with identical opcode, we may be able to convert; /// that into 2 independent shifts followed by the logic op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:48,log,logic,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,2,['log'],['logic']
Testability,"/// If we have a shift-by-constant of a bitwise logic op that itself has a; /// shift-by-constant operand with identical opcode, we may be able to convert; /// that into 2 independent shifts followed by the logic op. This is a; /// throughput improvement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,log,logic,48,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['log'],['logic']
Testability,"/// If we have:; /// icmp eq/ne (urem/srem %x, %y), 0; /// iff %y is a power-of-two, we can replace this with a bit test:; /// icmp eq/ne (and %x, (add %y, -1)), 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:116,test,test,116,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"/// If whole program visibility asserted, then upgrade all public vcall; /// visibility metadata on vtable definition summaries to linkage unit; /// visibility in Module summary index (for ThinLTO).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:32,assert,asserted,32,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['assert'],['asserted']
Testability,"/// If whole program visibility asserted, then upgrade all public vcall; /// visibility metadata on vtable definitions to linkage unit visibility in; /// Module IR (for regular or hybrid LTO).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:32,assert,asserted,32,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['assert'],['asserted']
Testability,"/// If you add components where each component only depends on a subset of the; /// union set of the observables, the RooAddPdf should understand that the; /// component is uniform in the missing observables. This is validated in the; /// following test for both the getVal() interface and evaluation with the; /// RooFit::Evaluator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx:249,test,test,249,roofit/roofitcore/test/testRooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx,1,['test'],['test']
Testability,/// Ignore parentheses and logical-NOT to track conditions consistently.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:27,log,logical-NOT,27,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['log'],['logical-NOT']
Testability,"/// ImmutableAnalysis abstraction for fetching the Eviction Advisor. We model it; /// as an analysis to decouple the user from the implementation insofar as; /// dependencies on other analyses goes. The motivation for it being an; /// immutable pass is twofold:; /// - in the ML implementation case, the evaluator is stateless but (especially; /// in the development mode) expensive to set up. With an immutable pass, we set; /// it up once.; /// - in the 'development' mode ML case, we want to capture the training log; /// during allocation (this is a log of features encountered and decisions; /// made), and then measure a score, potentially a few steps after allocation; /// completes. So we need the properties of an immutable pass to keep the logger; /// state around until we can make that measurement.; ///; /// Because we need to offer additional services in 'development' mode, the; /// implementations of this analysis need to implement RTTI support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h:516,log,log,516,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,3,['log'],"['log', 'logger']"
Testability,/// Implement a unique function which doesn't require we sort the input; /// vector. Doing so has the effect of changing the output of a couple of; /// tests in ways which make them less useful in testing fused safepoints.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:152,test,tests,152,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,2,['test'],"['testing', 'tests']"
Testability,"/// Implements the logic of getRegClassConstraintEffectForVReg for the; /// this MI and the given operand index \p OpIdx.; /// If the related operand does not constrained Reg, this returns CurRC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:19,log,logic,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['log'],['logic']
Testability,"/// In asserts builds, this checks the numbering. In non-asserts builds, it; /// is defined as a no-op inline function in BasicBlock.h.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp:7,assert,asserts,7,interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,2,['assert'],['asserts']
Testability,"/// In the Microsoft C++ ABI, use zero for the field offset of a null data; /// member pointer if we can guarantee that zero is not a valid field offset,; /// or if the member pointer has multiple fields. Polymorphic classes have a; /// vfptr at offset zero, so we can use zero for null. If there are multiple; /// fields, we can use zero even if it is a valid field offset because; /// null-ness testing will check the other fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:397,test,testing,397,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['test'],['testing']
Testability,/// Indentation logic for lambda bodies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:16,log,logic,16,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['log'],['logic']
Testability,/// Indentation logic for requires expression bodies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:16,log,logic,16,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['log'],['logic']
Testability,"/// Information about a FileID, basically just the logical file; /// that it represents and include stack information.; ///; /// Each FileInfo has include stack information, indicating where it came; /// from. This information encodes the \#include chain that a token was; /// expanded from. The main include file has an invalid IncludeLoc.; ///; /// FileInfo should not grow larger than ExpansionInfo. Doing so will; /// cause memory to bloat in compilations with many unloaded macro; /// expansions, since the two data structurs are stored in a union in; /// SLocEntry. Extra fields should instead go in ""ContentCache *"", which; /// stores file contents and other bits on the side.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:51,log,logical,51,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['log'],['logical']
Testability,"/// Inheritance utility for extensible RTTI.; ///; /// Supports single inheritance only: A class can only have one; /// ExtensibleRTTI-parent (i.e. a parent for which the isa<> test will work),; /// though it can have many non-ExtensibleRTTI parents.; ///; /// RTTIExtents uses CRTP so the first template argument to RTTIExtends is the; /// newly introduced type, and the *second* argument is the parent class.; ///; /// class MyType : public RTTIExtends<MyType, RTTIRoot> {; /// public:; /// static char ID;; /// };; ///; /// class MyDerivedType : public RTTIExtends<MyDerivedType, MyType> {; /// public:; /// static char ID;; /// };; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:177,test,test,177,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,1,['test'],['test']
Testability,"/// Initial minimization that was not based on any other tutorial/test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:66,test,test,66,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['test'],['test']
Testability,/// Initialize ProfOverlap with the sum of samples in base and test; /// profiles. This function also computes and keeps the sum of samples and; /// max sample counts of each function in BaseStats and TestStats for later; /// use to avoid re-computations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:63,test,test,63,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,2,"['Test', 'test']","['TestStats', 'test']"
Testability,/// Initialize a range of values explicitly. This will assert out if; /// Lower==Upper and Lower != Min or Max value for its type. It will also; /// assert out if the two APInt's are not the same bit width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:55,assert,assert,55,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,2,['assert'],['assert']
Testability,"/// Initialize the predefined C++ language feature test macros defined in; /// ISO/IEC JTC1/SC22/WG21 (C++) SD-6: ""SG10 Feature Test Recommendations"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp:51,test,test,51,interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,/// Inline: the bit mask to test the address against.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:28,test,test,28,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"/// Install a ROOT diagnostic handler to analyse diagnostics.; /// It will record all diagnostics during its lifetime, and analyse them at destruction.; /// Required and/or optional diagnostics need to be predefined with expected location and message.; /// Unexpected or missing diagnostics will lead to gtest failures.; ///; /// Example:; /// ```c++; /// CheckDiagsRAII diagRAII{CheckDiagsRAII::EDK_Error, ""TFile::TFile"", ""<Expected message>""};; /// diagRAII.optionalDiag(kInfo, ""TFile::TFile"", ""Message that is issued only sometimes"");; /// <test code>; ///; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:544,test,test,544,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,1,['test'],['test']
Testability,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:577,log,log,577,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['log'],['log']
Testability,/// InstructionWorklist - This is the worklist management logic for; /// InstCombine and other simplification passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:58,log,logic,58,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,1,['log'],['logic']
Testability,"/// Instrument signed relational comparisons.; ///; /// Handle sign bit tests: x<0, x>=0, x<=-1, x>-1 by propagating the highest; /// bit of the shadow. Everything else is delegated to handleShadowOr().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:72,test,tests,72,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['test'],['tests']
Testability,"/// Intentionally placed here; /// when TDirectoryFile() = default; used, mac1014/cxx17 fails on some tests; /// Problem with TObject::IsOnHeap() failing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx:102,test,tests,102,io/io/src/TDirectoryFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx,1,['test'],['tests']
Testability,/// Intersect the given range with the given point.; ///; /// The result can be either an empty set or a set containing the given; /// point depending on whether the point is in the range set.; ///; /// Complexity: O(logN); /// where N = size(What),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:217,log,logN,217,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,1,['log'],['logN']
Testability,"/// Intersects the BVH with a single ray, using the given function to intersect the contents; /// of a leaf. The algorithm starts at the node index `start` and uses the given stack object.; /// When `IsAnyHit` is true, the function stops at the first intersection (useful for shadow; /// rays), otherwise it finds the closest intersection. When `IsRobust` is true, a slower but; /// numerically robust ray-box test is used, otherwise a fast, but less precise test is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/bvh.h:410,test,test,410,geom/geom/inc/bvh/v2/bvh.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/bvh.h,2,['test'],['test']
Testability,"/// Introduce relocations to \p Sym in its own definition if there are any; /// pointers formed via PC-relative address that do not already have a; /// relocation.; ///; /// This is useful when introducing indirection via a stub function at link time; /// without compiler support. If a function pointer is formed without a; /// relocation, e.g. in the definition of \c foo; ///; /// \code; /// _foo:; /// leaq -7(%rip), rax # form pointer to _foo without relocation; /// _bar:; /// leaq (%rip), %rax # uses X86_64_RELOC_SIGNED to '_foo'; /// \endcode; ///; /// the pointer to \c _foo computed by \c _foo and \c _bar may differ if we; /// introduce a stub for _foo. If the pointer is used as a key, this may be; /// observable to the program. This pass will attempt to introduce the missing; /// ""self-relocation"" on the leaq instruction.; ///; /// This is based on disassembly and should be considered ""best effort"". It may; /// silently fail to add relocations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:224,stub,stub,224,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,2,['stub'],['stub']
Testability,/// Is this a logical-AND operation?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:14,log,logical-AND,14,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['log'],['logical-AND']
Testability,/// IsChainDependent - Test if Outer is reachable from Inner through; /// chain dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:23,Test,Test,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['Test'],['Test']
Testability,"/// It is safe to destroy a constant iff it is only used by constants itself.; /// Note that constants cannot be cyclic, so this test is pretty easy to; /// implement recursively.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:129,test,test,129,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,1,['test'],['test']
Testability,/// It returns EVT::Other if the type should be determined using generic; /// target-independent logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:97,log,logic,97,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['log'],['logic']
Testability,/// It returns EVT::Other if the type should be determined using generic; /// target-independent logic.; /// For vector ops we check that the overall size isn't larger than our; /// preferred vector width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:97,log,logic,97,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['log'],['logic']
Testability,/// Keep track of non-logical operators. These are OK as long as we don't; /// encounter a new logical operator after seeing one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:22,log,logical,22,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,['log'],['logical']
Testability,/// Keeps track of kernel launch stubs and handles emitted in this module,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:33,stub,stubs,33,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['stub'],['stubs']
Testability,"/// Kolmogorov-Smirnov 1-Sample Test.; /// Returns default p-value; option ""t"" returns the test statistic value ""Dn"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:32,Test,Test,32,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,"['Test', 'test']","['Test', 'test']"
Testability,"/// Kolmogorov-Smirnov 2-Samples Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:33,Test,Test,33,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['Test'],['Test']
Testability,"/// Kolmogorov-Smirnov 2-Samples Test.; /// Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:33,Test,Test,33,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,"['Test', 'test']","['Test', 'test']"
Testability,"/// Kolmogorov-Smirnov Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:23,Test,Test,23,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['Test'],['Test']
Testability,/// LLVM mock tags (see also llvm/BinaryFormat/Dwarf.def).; /// \{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:9,mock,mock,9,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,1,['mock'],['mock']
Testability,/// Left logical shift operator.; ///; /// Shifts this APInt left by \p Bits and returns the result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,log,logical,9,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['log'],['logical']
Testability,"/// Like the overload taking a `Function &`, but intended specifically; /// for frontends that want to build on Clang's target-configuration logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:141,log,logic,141,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['log'],['logic']
Testability,/// Link the given graph.; ///; /// Uses conservative defaults for GOT and stub handling based on the target; /// platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/COFF.h:75,stub,stub,75,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/COFF.h,2,['stub'],['stub']
Testability,"/// List of type identifiers used by this function in llvm.type.test; /// intrinsics referenced by something other than an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:64,test,test,64,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,/// List of virtual calls made by this function using (respectively); /// llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics that do; /// not have all constant integer arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:96,test,test,96,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,/// List of virtual calls made by this function using (respectively); /// llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics with; /// all constant integer arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:96,test,test,96,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,"/// Load each IR file and dump certain information based on active flags.; ///; /// The main point here is to provide lit-testable coverage for the LTOModule; /// functionality that's exposed by the C API. Moreover, this provides testing; /// coverage for modules that have been created in their own contexts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:122,test,testable,122,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,2,['test'],"['testable', 'testing']"
Testability,/// Load profiles specified by BaseFilename and TestFilename.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:48,Test,TestFilename,48,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestFilename']
Testability,/// Log 2 of the maximum vector width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:4,Log,Log,4,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['Log'],['Log']
Testability,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:4,Log,Log,4,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['Log', 'log']","['Log', 'logged']"
Testability,"/// Log channel for Eve diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveTypes.hxx:4,Log,Log,4,graf3d/eve7/inc/ROOT/REveTypes.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveTypes.hxx,1,['Log'],['Log']
Testability,"/// Log channel for FitPanel diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/inc/ROOT/RFitPanelModel.hxx:4,Log,Log,4,gui/fitpanelv7/inc/ROOT/RFitPanelModel.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/inc/ROOT/RFitPanelModel.hxx,1,['Log'],['Log']
Testability,"/// Log channel for GPad diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrBase.hxx:4,Log,Log,4,graf2d/gpadv7/inc/ROOT/RAttrBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrBase.hxx,1,['Log'],['Log']
Testability,"/// Log channel for Hist diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistUtils.hxx:4,Log,Log,4,hist/histv7/inc/ROOT/RHistUtils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistUtils.hxx,1,['Log'],['Log']
Testability,"/// Log channel for RNTuple diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:4,Log,Log,4,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['Log'],['Log']
Testability,"/// Log of the dimension of the grid used to split the workload horizontally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/mini_tree_builder.h:4,Log,Log,4,geom/geom/inc/bvh/v2/mini_tree_builder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/mini_tree_builder.h,1,['Log'],['Log']
Testability,/// Log one inlining event.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp:4,Log,Log,4,interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,2,['Log'],['Log']
Testability,/// Log perf jitdump events for each object (see; /// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/jitdump-specification.txt).; /// Currently has support for dumping code load records and unwind info records.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h:4,Log,Log,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h,1,['Log'],['Log']
Testability,/// Log something if there is a logging callback installed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:4,Log,Log,4,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,2,"['Log', 'log']","['Log', 'logging']"
Testability,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:4,Log,LogError,4,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,11,['Log'],['LogError']
Testability,"/// Logging for generic IO functionality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:4,Log,Logging,4,core/base/v7/inc/ROOT/RDirectory.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx,1,['Log'],['Logging']
Testability,"/// Logging utility - given an ordered specification of features, and assuming; /// a scalar reward, allow logging feature values and rewards.; /// The assumption is that, for an event to be logged (i.e. a set of feature; /// values and a reward), the user calls the log* API for each feature exactly; /// once, providing the index matching the position in the feature spec list; /// provided at construction. The example assumes the first feature's element; /// type is float, the second is int64, and the reward is float:; ///; /// event 0:; /// logFloatValue(0, ...); /// logInt64Value(1, ...); /// ...; /// logFloatReward(...); /// event 1:; /// logFloatValue(0, ...); /// logInt64Value(1, ...); /// ...; /// logFloatReward(...); ///; /// At the end, call print to generate the log.; /// Alternatively, don't call logReward at the end of each event, just; /// log{Float|Int32|Int64}FinalReward at the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h:4,Log,Logging,4,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,11,"['Log', 'log']","['Logging', 'log', 'logFloatReward', 'logFloatValue', 'logReward', 'logged', 'logging']"
Testability,/// Logic operators for the change status enum class.; ///; ///{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:4,Log,Logic,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['Log'],['Logic']
Testability,"/// Logical 'and' of any supported wrapping, exact, and fast-math flags of; /// V and this instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:4,Log,Logical,4,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['Log'],['Logical']
Testability,"/// Logical implication. Returns true if LHS implies RHS, i.e. if LHS; /// holds, then RHS must hold. For example, (A & B) implies A.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h:4,Log,Logical,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h,1,['Log'],['Logical']
Testability,"/// Logical implication. Returns true if the LExpr implies RHS, i.e. if; /// the LExpr holds, then RHS must hold. For example, (A & B) implies A.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h:4,Log,Logical,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h,1,['Log'],['Logical']
Testability,"/// Logical negation operation on this APInt returns true if zero, like normal; /// integers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Log,Logical,4,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['Log'],['Logical']
Testability,/// Logical right-shift function.; ///; /// Logical right-shift this APInt by shiftAmt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Log,Logical,4,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,4,['Log'],['Logical']
Testability,/// Logical right-shift this APInt by ShiftAmt in place.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Log,Logical,4,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['Log'],['Logical']
Testability,/// Logical right-shift this APInt by shiftAmt.; /// Logical right-shift function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Log,Logical,4,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,4,['Log'],['Logical']
Testability,"/// Logically append staged clusters to the RNTuple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx:4,Log,Logically,4,tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,1,['Log'],['Logically']
Testability,"/// Logistic distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Random.h:4,Log,Logistic,4,math/mathcore/inc/Math/Random.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Random.h,1,['Log'],['Logistic']
Testability,"/// Lognormal distribution with default meanlog=0, sigmalog=1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:4,Log,Lognormal,4,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['Log'],['Lognormal']
Testability,/// Logs all errors to a raw_ostream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:4,Log,Logs,4,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,1,['Log'],['Logs']
Testability,/// Logs an individual refactoring action invocation to STDOUT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:4,Log,Logs,4,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['Log'],['Logs']
Testability,/// Logs information about a particular libclang operation like parsing to; /// a new file in the invocation emission path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:4,Log,Logs,4,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h,1,['Log'],['Logs']
Testability,"/// Look for the pattern that conditionally negates a value via math operations:; /// cond.splat = sext i1 cond; /// sub = add cond.splat, x; /// xor = xor sub, cond.splat; /// and rewrite it to do the same, but via logical operations:; /// value.neg = sub 0, value; /// cond = select i1 neg, value.neg, value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:216,log,logical,216,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"/// Look through the loop-carried and loop-independent dependences in; /// this loop and find store->load dependences.; ///; /// Note that no candidate is returned if LAA has failed to analyze the loop; /// (e.g. if it's not bottom-tested, contains volatile memops, etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:232,test,tested,232,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,1,['test'],['tested']
Testability,/// Lower a llvm.type.test call to its implementation. Returns the value to; /// replace the call with.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,/// Lower all type tests in this module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:19,test,tests,19,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['tests']
Testability,/// M68k bit-test instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:13,test,test,13,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,1,['test'],['test']
Testability,/// M68k compare and logical compare instructions. Subtracts the source; /// operand from the destination data register and sets the condition; /// codes according to the result. Immediate always goes first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:21,log,logical,21,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,1,['log'],['logical']
Testability,"/// M68k conditional branches. Operand 0 is the chain operand, operand 1; /// is the block to branch if condition is true, operand 2 is the; /// condition code, and operand 3 is the flag operand produced by a CMP; /// or TEST instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:221,TEST,TEST,221,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,1,['TEST'],['TEST']
Testability,"/// MI-level Statepoint operands; ///; /// Statepoint operands take the form:; /// <id>, <num patch bytes >, <num call arguments>, <call target>,; /// [call arguments...],; /// <StackMaps::ConstantOp>, <calling convention>,; /// <StackMaps::ConstantOp>, <statepoint flags>,; /// <StackMaps::ConstantOp>, <num deopt args>, [deopt args...],; /// <StackMaps::ConstantOp>, <num gc pointer args>, [gc pointer args...],; /// <StackMaps::ConstantOp>, <num gc allocas>, [gc allocas args...],; /// <StackMaps::ConstantOp>, <num entries in gc map>, [base/derived pairs]; /// base/derived pairs in gc map are logical indices into <gc pointer args>; /// section.; /// All gc pointers assigned to VRegs produce new value (in form of MI Def; /// operand) and are tied to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:598,log,logical,598,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,1,['log'],['logical']
Testability,"/// MIOperandNo - Currently (this is meant to be phased out), some logical; /// operands correspond to multiple MachineInstr operands. In the X86; /// target for example, one address operand is represented as 4; /// MachineOperands. Because of this, the operand number in the; /// OperandList may not match the MachineInstr operand num. Until it; /// does, this contains the MI operand index of this operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:67,log,logical,67,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,1,['log'],['logical']
Testability,"/// MLModelRunner interface: abstraction of a mechanism for evaluating a; /// ML model. More abstractly, evaluating a function that has as tensors as; /// arguments, described via TensorSpecs, and returns a tensor. Currently, the; /// latter is assumed to be a scalar, in absence of more elaborate scenarios.; /// NOTE: feature indices are expected to be consistent all accross; /// MLModelRunners (pertaining to the same model), and also Loggers (see; /// TFUtils.h)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MLModelRunner.h:439,Log,Loggers,439,interpreter/llvm-project/llvm/include/llvm/Analysis/MLModelRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MLModelRunner.h,1,['Log'],['Loggers']
Testability,"/// MO_COFFSTUB - On a symbol operand ""FOO"", this indicates that the; /// reference is actually to the "".refptr.FOO"" symbol. This is used for; /// stub symbols on windows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h:147,stub,stub,147,interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,3,['stub'],['stub']
Testability,"/// MO_DARWIN_NONLAZY - On a symbol operand ""FOO"", this indicates that the; /// reference is actually to the ""FOO$non_lazy_ptr"" symbol, which is a; /// non-PIC-base-relative reference to a non-hidden dyld lazy pointer stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:218,stub,stub,218,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['stub'],['stub']
Testability,"/// MO_DARWIN_NONLAZY_PIC_BASE - On a symbol operand ""FOO"", this indicates; /// that the reference is actually to ""FOO$non_lazy_ptr - PICBASE"", which is; /// a PIC-base-relative reference to a non-hidden dyld lazy pointer stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:222,stub,stub,222,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['stub'],['stub']
Testability,"/// MO_DLLIMPORT - On a symbol operand, this represents that the reference; /// to the symbol is for an import stub. This is used for DLL import; /// storage class indication on Windows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h:111,stub,stub,111,interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,2,['stub'],['stub']
Testability,"/// Macros to automate common uses of Logger. Like this:; /// \code; /// LOG_FUNC_SECTION {; /// *Log << ""blah"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:38,Log,Logger,38,interpreter/llvm-project/clang/tools/libclang/CLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h,2,['Log'],"['Log', 'Logger']"
Testability,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:35,test,test,35,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,5,['test'],['test']
Testability,"/// Main interface to evaluate the test statistic on a dataset given the; /// values for the Null Parameters Of Interest.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:35,test,test,35,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['test'],['test']
Testability,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:305,test,test,305,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,2,['test'],['test']
Testability,"/// Map an in-memory column ID to its on-disk counterpart. It is allowed to call this function multiple times for; /// the same `memId`, in which case the return value is the on-disk ID assigned on the first call.; /// Note that we only map physical column IDs. Logical column IDs of alias columns are shifted before the; /// serialization of the extension header. Also, we only need to query physical column IDs for the page list; /// serialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx:262,Log,Logical,262,tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,1,['Log'],['Logical']
Testability,"/// Maps from a start to an end spelling location of transformations; /// performed by the preprocessor. These include:; /// 1. range from '#' to the last token in the line for PP directives,; /// 2. macro name and arguments for macro expansions.; /// Note that we record only top-level macro expansions, intermediate; /// expansions (e.g. inside macro arguments) are ignored.; ///; /// Used to find correct boundaries of macro calls and directives when; /// building mappings from spelled to expanded tokens.; ///; /// Logically, at each point of the preprocessor execution there is a stack of; /// macro expansions being processed and we could use it to recover the; /// location information we need. However, the public preprocessor API only; /// exposes the points when macro expansions start (when we push a macro onto; /// the stack) and not when they end (when we pop a macro from the stack).; /// To workaround this limitation, we rely on source location information; /// stored in this map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h:520,Log,Logically,520,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,1,['Log'],['Logically']
Testability,/// Mark all external summaries in \p Index for import into the given module.; /// Used for testing the case of distributed builds using a distributed index.; ///; /// \p ImportList will be populated with a map that can be passed to; /// FunctionImporter::importFunctions() above (see description there).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:92,test,testing,92,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['test'],['testing']
Testability,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:811,assert,assert,811,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['assert'],['assert']
Testability,/// Match an fcmp against a special value that performs a test possible by; /// llvm.is.fpclass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:58,test,test,58,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['test'],['test']
Testability,"/// Match one of the patterns up to the select/logic op:; /// %Op0 = icmp ne i4 %X, 0; /// %Agg = call { i4, i1 } @llvm.[us]mul.with.overflow.i4(i4 %X, i4 %Y); /// %Op1 = extractvalue { i4, i1 } %Agg, 1; /// %ret = select i1 %Op0, i1 %Op1, i1 false / %ret = and i1 %Op0, %Op1; ///; /// %Op0 = icmp eq i4 %X, 0; /// %Agg = call { i4, i1 } @llvm.[us]mul.with.overflow.i4(i4 %X, i4 %Y); /// %NotOp1 = extractvalue { i4, i1 } %Agg, 1; /// %Op1 = xor i1 %NotOp1, true; /// %ret = select i1 %Op0, i1 true, i1 %Op1 / %ret = or i1 %Op0, %Op1; ///; /// Callers are expected to align that with the operands of the select/logic.; /// IsAnd is set to true if the Op0 and Op1 are used as the first pattern.; /// If Op0 and Op1 match one of the patterns above, return true and fill Y's; /// use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OverflowInstAnalysis.h:47,log,logic,47,interpreter/llvm-project/llvm/include/llvm/Analysis/OverflowInstAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OverflowInstAnalysis.h,2,['log'],['logic']
Testability,"/// Matcher for gtest's ASSERT comparison macros including ASSERT_EQ, ASSERT_NE,; /// ASSERT_GE, ASSERT_GT, ASSERT_LE and ASSERT_LT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:24,ASSERT,ASSERT,24,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,1,['ASSERT'],['ASSERT']
Testability,/// Matcher for gtest's EXPECT_CALL macro. `MockCall` matches the whole mock; /// member method call. This API is more flexible but requires more knowledge of; /// the AST structure of EXPECT_CALL macros.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:44,Mock,MockCall,44,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,2,"['Mock', 'mock']","['MockCall', 'mock']"
Testability,/// Matcher for gtest's EXPECT_CALL macro. `MockObject` matches the mock; /// object and `MockMethodName` is the name of the method invoked on the mock; /// object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:44,Mock,MockObject,44,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,4,"['Mock', 'mock']","['MockMethodName', 'MockObject', 'mock']"
Testability,"/// Matches a declaration of a namespace alias.; ///; /// Given; /// \code; /// namespace test {}; /// namespace alias = ::test;; /// \endcode; /// namespaceAliasDecl(); /// matches ""namespace alias"" but not ""namespace test""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:90,test,test,90,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,3,['test'],['test']
Testability,"/// Matches a declaration of a namespace.; ///; /// Given; /// \code; /// namespace {}; /// namespace test {}; /// \endcode; /// namespaceDecl(); /// matches ""namespace {}"" and ""namespace test {}""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:102,test,test,102,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['test'],['test']
Testability,"/// Matches a loop initializing the elements of an array in a number of contexts:; /// * in the implicit copy/move constructor for a class with an array member; /// * when a lambda-expression captures an array by value; /// * when a decomposition declaration decomposes an array; ///; /// Given; /// \code; /// void testLambdaCapture() {; /// int a[10];; /// auto Lam1 = [a]() {; /// return;; /// };; /// }; /// \endcode; /// arrayInitLoopExpr() matches the implicit loop that initializes each element of; /// the implicit array field inside the lambda object, that represents the array `a`; /// captured by value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:316,test,testLambdaCapture,316,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['test'],['testLambdaCapture']
Testability,/// Matches bitwise logic operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:20,log,logic,20,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,1,['log'],['logic']
Testability,"/// Matches call expressions which were resolved using ADL.; ///; /// Example matches y(x) but not y(42) or NS::y(x).; /// \code; /// namespace NS {; /// struct X {};; /// void y(X);; /// }; ///; /// void y(...);; ///; /// void test() {; /// NS::X x;; /// y(x); // Matches; /// NS::y(x); // Doesn't match; /// y(42); // Doesn't match; /// using NS::y;; /// y(x); // Found by both unqualified lookup and ADL, doesn't match; // }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:228,test,test,228,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['test'],['test']
Testability,"/// Matches either L && R or L || R,; /// either one being in the either binary or logical form.; /// Note that the latter form is poison-blocking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:83,log,logical,83,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,1,['log'],['logical']
Testability,/// Matches logical shift operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:12,log,logical,12,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,2,['log'],['logical']
Testability,"/// May perform round-trip of command line arguments. By default, the round-trip; /// is enabled in assert builds. This can be overwritten at run-time via the; /// ""-round-trip-args"" and ""-no-round-trip-args"" command line flags, or via the; /// ForceRoundTrip parameter.; ///; /// During round-trip, the command line arguments are parsed into a dummy; /// CompilerInvocation, which is used to generate the command line arguments; /// again. The real CompilerInvocation is then created by parsing the generated; /// arguments, not the original ones. This (in combination with tests covering; /// argument behavior) ensures the generated command line is complete (doesn't; /// drop/mangle any arguments).; ///; /// Finally, we check the command line that was used to create the real; /// CompilerInvocation instance. By default, we compare it to the command line; /// the real CompilerInvocation generates. This checks whether the generator is; /// deterministic. If \p CheckAgainstOriginalInvocation is enabled, we instead; /// compare it to the original command line to verify the original command-line; /// was canonical and can round-trip exactly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:100,assert,assert,100,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,2,"['assert', 'test']","['assert', 'tests']"
Testability,/// MayNeedRelaxation - Check whether the given instruction may need; /// relaxation.; ///; /// \param Inst - The instruction to test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:129,test,test,129,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,1,['test'],['test']
Testability,"/// Measure the specified inline asm to determine an approximation of its; /// length.; /// Comments (which run till the next SeparatorString or newline) do not; /// count as an instruction.; /// Any other non-whitespace text is considered an instruction, with; /// multiple instructions separated by SeparatorString or newlines.; /// Variable-length instructions are not handled here; this function; /// may be overloaded in the target code to do that.; /// We implement a special case of the .space directive which takes only a; /// single integer argument in base 10 that is the size in bytes. This is a; /// restricted form of the GAS directive in that we only interpret; /// simple--i.e. not a logical or arithmetic expression--size values without; /// the optional fill value. This is primarily used for creating arbitrary; /// sized inline asm blocks for testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:699,log,logical,699,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,2,"['log', 'test']","['logical', 'testing']"
Testability,"/// Merge in template-related linkage and visibility for the given; /// variable template specialization. As usual, follow class template; /// specialization logic up to initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:158,log,logic,158,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['log'],['logic']
Testability,/// Metadata to speed allocatability test.; ///; /// Keeps track of the number of infinities in each row and column.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:37,test,test,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,1,['test'],['test']
Testability,"/// Method provided for unit testing, not intended for general use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:29,test,testing,29,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['test'],['testing']
Testability,/// Methods for debug and self-test.; //@{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h:31,test,test,31,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h,1,['test'],['test']
Testability,"/// Mock-up of future atd::(experimental::)span.; /// Supports only what we need for THist, e.g. Rank := 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/span.hxx:4,Mock,Mock-up,4,core/foundation/inc/ROOT/span.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/span.hxx,1,['Mock'],['Mock-up']
Testability,"/// Model a call to an un-inlined AssertionResult copy constructor:; ///; /// AssertionResult(const &AssertionResult other); ///; /// To do so, constrain the value of the newly-constructed instance's; /// 'success_' field to be equal to the value of the pass-in instance's; /// 'success_' field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:34,Assert,AssertionResult,34,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,3,['Assert'],['AssertionResult']
Testability,/// Model calls to AssertionResult constructors that are not inlined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:19,Assert,AssertionResult,19,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,1,['Assert'],['AssertionResult']
Testability,"/// Move the call to free before a NULL test.; ///; /// Check if this free is accessed after its argument has been test; /// against NULL (property 0).; /// If yes, it is legal to move this call in its predecessor block.; ///; /// The move is performed only if the block containing the call to free; /// will be removed, i.e.:; /// 1. it has only one predecessor P, and P has two successors; /// 2. it contains the call, noops, and an unconditional branch; /// 3. its successor is the same as its predecessor's successor; ///; /// The profitability is out-of concern here and this function should; /// be called only if the caller knows this transformation would be; /// profitable (e.g., for code size).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:40,test,test,40,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,2,['test'],['test']
Testability,"/// NOTE: There are targets that still do not support the debug entry values; /// production and that is being controlled with the SupportsDebugEntryValues.; /// In addition, SCE debugger does not have the feature implemented, so prefer; /// not to emit the debug entry values in that case.; /// The EnableDebugEntryValues can be used for the testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetOptionsImpl.cpp:343,test,testing,343,interpreter/llvm-project/llvm/lib/CodeGen/TargetOptionsImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetOptionsImpl.cpp,1,['test'],['testing']
Testability,/// Name lookup results in an ambiguity because an entity with a; /// tag name was hidden by an entity with an ordinary name from; /// a different context.; /// @code; /// namespace A { struct Foo {}; }; /// namespace B { void Foo(); }; /// namespace C {; /// using namespace A;; /// using namespace B;; /// }; /// void test() {; /// C::Foo(); // error: tag 'A::Foo' is hidden by an object in a; /// // different namespace; /// }; /// @endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:320,test,test,320,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['test'],['test']
Testability,/// Name lookup results in an ambiguity because multiple definitions; /// of entity that meet the lookup criteria were found in different; /// declaration contexts.; /// @code; /// namespace A {; /// int i;; /// namespace B { int i; }; /// int test() {; /// using namespace B;; /// return i; // error 'i' is found in namespace A and A::B; /// }; /// }; /// @endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:244,test,test,244,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['test'],['test']
Testability,"/// Name lookup results in an ambiguity because multiple; /// entities that meet the lookup criteria were found in; /// subobjects of different types. For example:; /// @code; /// struct A { void f(int); }; /// struct B { void f(double); }; /// struct C : A, B { };; /// void test(C c) {; /// c.f(0); // error: A::f and B::f come from subobjects of different; /// // types. overload resolution is not performed.; /// }; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:276,test,test,276,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['test'],['test']
Testability,"/// Name lookup results in an ambiguity because multiple; /// nonstatic entities that meet the lookup criteria were found; /// in different subobjects of the same type. For example:; /// @code; /// struct A { int x; };; /// struct B : A { };; /// struct C : A { };; /// struct D : B, C { };; /// int test(D d) {; /// return d.x; // error: 'x' is found in two A subobjects (of B and C); /// }; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:300,test,test,300,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['test'],['test']
Testability,/// Name of the object file section that will contain all our stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:62,stub,stubs,62,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,2,['stub'],['stubs']
Testability,/// Names of the different parts of the language.; /// Tape is used for reading and writing the tape.; /// headreg is used for the position of the head.; /// label is used for the labels for the BasicBlocks.; /// testreg is used for testing the loop exit condition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h:213,test,testreg,213,interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,2,['test'],"['testing', 'testreg']"
Testability,"/// No special logic for block extensions. (This probably can't; /// actually happen in this emitter, though.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:15,log,logic,15,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['log'],['logic']
Testability,"/// Note, we assume here that void* is related to raw malloc'ed memory and; /// that malloc returns objects at least 4-byte aligned. However, this may be; /// wrong, or pointers may be from something other than malloc. In this case,; /// you should specify a real typed pointer or avoid this template.; ///; /// All clients should use assertions to do a run-time check to ensure that; /// this is actually true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h:335,assert,assertions,335,interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h,1,['assert'],['assertions']
Testability,/// Notes that BE's global block is available via Addr. Asserts that BE; /// isn't already emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:56,Assert,Asserts,56,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['Assert'],['Asserts']
Testability,/// Notes that CLE's GlobalVariable is GV. Asserts that CLE isn't already; /// emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:43,Assert,Asserts,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['Assert'],['Asserts']
Testability,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:383,log,log,383,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['log'],['log']
Testability,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:662,log,log,662,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['log'],['log']
Testability,"/// Number of different kinds, for assertions. We subtract 1 so that; /// to keep receiving compiler warnings when we don't cover all enum values; /// in a switch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:35,assert,assertions,35,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['assert'],['assertions']
Testability,"/// Number of logical and physical columns; updated by the descriptor builder when columns are added",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:14,log,logical,14,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['log'],['logical']
Testability,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:420,benchmark,benchmarks,420,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['benchmark'],['benchmarks']
Testability,/// Only for use in llvm-as for testing; this does not produce a valid module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:32,test,testing,32,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['test'],['testing']
Testability,"/// Optimize for fast execution as much as possible without triggering; /// significant incremental compile time or code size growth.; ///; /// The key idea is that optimizations at this level should ""pay for; /// themselves"". So if an optimization increases compile time by 5% or; /// increases code size by 5% for a particular benchmark, that benchmark; /// should also be one which sees a 5% runtime improvement. If the compile; /// time or code size penalties happen on average across a diverse range of; /// LLVM users' benchmarks, then the improvements should as well.; ///; /// And no matter what, the compile time needs to not grow superlinearly; /// with the size of input to LLVM so that users can control the runtime of; /// the optimizer in this mode.; ///; /// This is expected to be a good default optimization level for the vast; /// majority of users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:329,benchmark,benchmark,329,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"/// Optimize for fast execution as much as possible.; ///; /// This mode is significantly more aggressive in trading off compile time; /// and code size to get execution time improvements. The core idea is that; /// this mode should include any optimization that helps execution time on; /// balance across a diverse collection of benchmarks, even if it increases; /// code size or compile time for some benchmarks without corresponding; /// improvements to execution time.; ///; /// Despite being willing to trade more compile time off to get improved; /// execution time, this mode still tries to avoid superlinear growth in; /// order to make even significantly slower compile times at least scale; /// reasonably. This does not preclude very substantial constant factor; /// costs though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:331,benchmark,benchmarks,331,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,2,['benchmark'],['benchmarks']
Testability,"/// Optimize quickly without destroying debuggability.; ///; /// This level is tuned to produce a result from the optimizer as quickly; /// as possible and to avoid destroying debuggability. This tends to result; /// in a very good development mode where the compiled code will be; /// immediately executed as part of testing. As a consequence, where; /// possible, we would like to produce efficient-to-execute code, but not; /// if it significantly slows down compilation or would prevent even basic; /// debugging of the resulting binary.; ///; /// As an example, complex loop transformations such as versioning,; /// vectorization, or fusion don't make sense here due to the degree to; /// which the executed code differs from the source code, and the compile; /// time cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:318,test,testing,318,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,1,['test'],['testing']
Testability,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea. (THIS IS UNIMPLEMENTED RIGHT NOW!); /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:25,Stub,Stub,25,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['Stub', 'stub']","['Stub', 'stub']"
Testability,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea; /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:25,Stub,Stub,25,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Stub', 'stub']","['Stub', 'stub']"
Testability,"/// Our current alias analysis API differentiates heavily between calls and; /// non-calls, and functions called on one usually assert on the other.; /// This class encapsulates the distinction to simplify other code that wants; /// ""Memory affecting instructions and related data"" to use as a key.; /// For example, this class is used as a densemap key in the use optimizer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:128,assert,assert,128,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['assert'],['assert']
Testability,/// Override the default CondCode to be used to test the result of the; /// comparison libcall against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,test,test,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,/// Override the target platform inforation in the text stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:56,stub,stub,56,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,1,['stub'],['stub']
Testability,"/// Override to return false to tell LLVM no stub space will be needed.; /// This requires some guarantees depending on architecuture, but when; /// you know what you are doing it saves allocated space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:45,stub,stub,45,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,1,['stub'],['stub']
Testability,"/// PPCHazardRecognizer970 - This class defines a finite state automata that; /// models the dispatch logic on the PowerPC 970 (aka G5) processor. This; /// promotes good dispatch group formation and implements noop insertion to; /// avoid structural hazards that cause significant performance penalties (e.g.; /// setting the CTR register then branching through it within a dispatch group),; /// or storing then loading from the same address within a dispatch group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h:102,log,logic,102,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h,1,['log'],['logic']
Testability,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:423,assert,assert,423,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,1,['assert'],['assert']
Testability,"/// Parse \p ToParse into a conjunction (logical-and) of range checks; and; /// append them to \p Checks. Returns true on success, may clobber \c Checks; /// on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp:41,log,logical-and,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,1,['log'],['logical-and']
Testability,/// Parse a constraint-expression.; ///; /// \verbatim; /// constraint-expression: C++2a[temp.constr.decl]p1; /// logical-or-expression; /// \endverbatim,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:114,log,logical-or-expression,114,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['log'],['logical-or-expression']
Testability,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:380,log,logic,380,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['log'],['logic']
Testability,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1043,test,testing,1043,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,2,['test'],['testing']
Testability,"/// ParseAssert - Parse an assert statement.; ///; /// Assert ::= ASSERT condition , message ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:27,assert,assert,27,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,3,"['ASSERT', 'Assert', 'assert']","['ASSERT', 'Assert', 'assert']"
Testability,/// ParseBodyItem - Parse a single item within the body of a def or class.; ///; /// BodyItem ::= Declaration ';'; /// BodyItem ::= LET ID OptionalBitList '=' Value ';'; /// BodyItem ::= Defvar; /// BodyItem ::= Dump; /// BodyItem ::= Assert; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:235,Assert,Assert,235,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['Assert'],['Assert']
Testability,/// ParseMultiClass - Parse a multiclass definition.; ///; /// MultiClassInst ::= MULTICLASS ID TemplateArgList?; /// ':' BaseMultiClassList '{' MultiClassObject+ '}'; /// MultiClassObject ::= Assert; /// MultiClassObject ::= DefInst; /// MultiClassObject ::= DefMInst; /// MultiClassObject ::= Defvar; /// MultiClassObject ::= Foreach; /// MultiClassObject ::= If; /// MultiClassObject ::= LETCommand '{' ObjectList '}'; /// MultiClassObject ::= LETCommand Object; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:193,Assert,Assert,193,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['Assert'],['Assert']
Testability,/// ParseObject; /// Object ::= ClassInst; /// Object ::= DefInst; /// Object ::= MultiClassInst; /// Object ::= DefMInst; /// Object ::= LETCommand '{' ObjectList '}'; /// Object ::= LETCommand Object; /// Object ::= Defset; /// Object ::= Defvar; /// Object ::= Assert; /// Object ::= Dump,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:264,Assert,Assert,264,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['Assert'],['Assert']
Testability,/// Parses a log containing symbolizer markup into a sequence of nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h:13,log,log,13,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,1,['log'],['log']
Testability,/// Parses the APINotes YAML content and writes the representation back to the; /// specified stream. This provides a means of testing the YAML processing of; /// the APINotes format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesYAMLCompiler.h:127,test,testing,127,interpreter/llvm-project/clang/include/clang/APINotes/APINotesYAMLCompiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesYAMLCompiler.h,1,['test'],['testing']
Testability,"/// Partially unroll a loop.; ///; /// The CanonicalLoopInfo of the unrolled loop for use with chained; /// loop-associated directive can be requested using \p UnrolledCLI. Not; /// needing the CanonicalLoopInfo allows more efficient code generation by; /// deferring the actual unrolling to the LoopUnrollPass using loop metadata.; /// A loop-associated directive applied to the unrolled loop needs to know the; /// new trip count which means that if using a heuristically determined unroll; /// factor (\p Factor == 0), that factor must be computed immediately. We are; /// using the same logic as the LoopUnrollPass to derived the unroll factor,; /// but which assumes that some canonicalization has taken place (e.g.; /// Mem2Reg, LICM, GVN, Inlining, etc.). That is, the heuristic will perform; /// better when the unrolled loop's CanonicalLoopInfo is not needed.; ///; /// \param DL Debug location for instructions added by unrolling.; /// \param Loop The loop to unroll. The loop will be invalidated.; /// \param Factor The factor to unroll the loop by. A factor of 0; /// indicates that a heuristic should be used to determine; /// the unroll-factor.; /// \param UnrolledCLI If non-null, receives the CanonicalLoopInfo of the; /// partially unrolled loop. Otherwise, uses loop metadata; /// to defer unrolling to the LoopUnrollPass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:591,log,logic,591,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['log'],['logic']
Testability,"/// Per-object GOT and PLT Stub builder.; ///; /// Constructs GOT entries and PLT stubs in every graph for referenced symbols.; /// Building these blocks in every graph is likely to lead to duplicate entries; /// in the JITLinkDylib, but allows graphs to be trivially removed independently; /// without affecting other graphs (since those other graphs will have their own; /// copies of any required entries).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/PerGraphGOTAndPLTStubsBuilder.h:27,Stub,Stub,27,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/PerGraphGOTAndPLTStubsBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/PerGraphGOTAndPLTStubsBuilder.h,2,"['Stub', 'stub']","['Stub', 'stubs']"
Testability,"/// Perform a atomicrmw expansion using a target-specific way. This is; /// expected to be called when masked atomicrmw and bit test atomicrmw don't; /// work, and the target supports another way to lower atomicrmw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:128,test,test,128,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,/// Perform a bit test atomicrmw using a target-specific intrinsic. This; /// represents the combined bit test intrinsic which will be lowered at a late; /// stage by the backend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:18,test,test,18,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['test'],['test']
Testability,"/// Perform a logical left shift of \p Count words by moving everything; /// \p Count words to the right in memory.; ///; /// While confusing, words are stored from least significant at Bits[0] to; /// most significant at Bits[NumWords-1]. A logical shift left, however,; /// moves the current least significant bit to a higher logical index, and; /// fills the previous least significant bits with 0. Thus, we actually; /// need to move the bytes of the memory to the right, not to the left.; /// Example:; /// Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]; /// represents a BitVector where 0xBBBBAAAA contain the least significant; /// bits. So if we want to shift the BitVector left by 2 words, we need; /// to turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a; /// memmove which moves right, not left.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:14,log,logical,14,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,3,['log'],['logical']
Testability,/// Perform a logical right shift of \p Count words by moving those; /// words to the left in memory. See wordShl for more information.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:14,log,logical,14,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,1,['log'],['logical']
Testability,"/// Perform index-based whole program devirtualization on the \p Summary; /// index. Any devirtualized targets used by a type test in another module; /// are added to the \p ExportedGUIDs set. For any local devirtualized targets; /// only used within the defining module, the information necessary for; /// locating the corresponding WPD resolution is recorded for the ValueInfo; /// in case it is exported by cross module importing (in which case the; /// devirtualized target name will need adjustment).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:126,test,test,126,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,1,['test'],['test']
Testability,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:39,assert,assert,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,1,['assert'],['assert']
Testability,"/// Performs a check of floating point class property, defined by IEEE-754.; /// The first operand is the floating point value to check. The second operand; /// specifies the checked property and is a TargetConstant which specifies; /// test in the same way as intrinsic 'is_fpclass'.; /// Returns boolean value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:237,test,test,237,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['test'],['test']
Testability,"/// Performs a post-encoding step on a `LD` or `ST` instruction.; ///; /// The encoding of the LD/ST family of instructions is inconsistent w.r.t; /// the pointer register and the addressing mode.; ///; /// The permutations of the format are as followed:; /// ld Rd, X `1001 000d dddd 1100`; /// ld Rd, X+ `1001 000d dddd 1101`; /// ld Rd, -X `1001 000d dddd 1110`; ///; /// ld Rd, Y `1000 000d dddd 1000`; /// ld Rd, Y+ `1001 000d dddd 1001`; /// ld Rd, -Y `1001 000d dddd 1010`; ///; /// ld Rd, Z `1000 000d dddd 0000`; /// ld Rd, Z+ `1001 000d dddd 0001`; /// ld Rd, -Z `1001 000d dddd 0010`; /// ^; /// |; /// Note this one inconsistent bit - it is 1 sometimes and 0 at other times.; /// There is no logical pattern. Looking at a truth table, the following; /// formula can be derived to fit the pattern:; //; /// ```; /// inconsistent_bit = is_predec OR is_postinc OR is_reg_x; /// ```; //; /// We manually set this bit in this post encoder method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.cpp:704,log,logical,704,interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.cpp,1,['log'],['logical']
Testability,"/// Performs a target specific test of a floating point value for things; /// like IsNaN, Infinity, ... Nullptr is returned if no implementation; /// exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:31,test,test,31,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,1,['test'],['test']
Testability,"/// Performs the Anderson-Darling 2-Sample Test.; /// The Anderson-Darling K-Sample Test algorithm is described and taken from; /// http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; /// and from; /// (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924.; /// (2-samples variant implemented).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:43,Test,Test,43,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,3,['Test'],"['Test', 'Tests']"
Testability,"/// Plot the test statistic distributions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h:13,test,test,13,roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,1,['test'],['test']
Testability,"/// Post-fixup passes.; ///; /// These passes are called on the graph after block contents has been copied; /// to working memory, and fixups applied. Blocks have been updated to point; /// to their fixed up content.; ///; /// Notable use cases: Testing and validation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:246,Test,Testing,246,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['Test'],['Testing']
Testability,"/// Post-prune passes.; ///; /// These passes are called on the graph after dead stripping, but before; /// memory is allocated or nodes assigned their final addresses.; ///; /// Notable use cases: Building GOT, stub, and TLV symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:212,stub,stub,212,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['stub'],['stub']
Testability,"/// Pre-fixup passes.; ///; /// These passes are called on the graph after memory has been allocated,; /// content copied into working memory, and all nodes (including externals); /// have been assigned their final addresses, but before any fixups have been; /// applied.; ///; /// Notable use cases: Late link-time optimizations like GOT and stub; /// elimination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:343,stub,stub,343,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['stub'],['stub']
Testability,"/// Pre-visit an abstract ""call"" event.; ///; /// This is used for checkers that want to check arguments or attributed; /// behavior for functions and methods no matter how they are being invoked.; ///; /// Note that this includes ALL cross-body invocations, so if you want to; /// limit your checks to, say, function calls, you should test for that at the; /// beginning of your callback function.; ///; /// check::PreCall",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:336,test,test,336,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,1,['test'],['test']
Testability,/// PredicateMethod - The name of the operand method to test whether the; /// operand matches this class; this is not valid for Token or register kinds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:56,test,test,56,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['test'],['test']
Testability,/// Prevents intended crashes when using #pragma clang __debug. For testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:68,test,testing,68,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,1,['test'],['testing']
Testability,/// Print OpenMP GPU kernels for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:33,test,testing,33,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['test'],['testing']
Testability,"/// Print T and prefix it with the comment string (normally #) and; /// optionally a tab. This prints the comment immediately, not at the end of; /// the current line. It is basically a safe version of EmitRawText: since it; /// only prints comments, the object streamer ignores it instead of asserting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:293,assert,asserting,293,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['assert'],['asserting']
Testability,/// Print a short description useful for debugging or logging.; ///; /// We print the SCCs wrapped in '[]'s and skipping the middle SCCs if; /// there are a large number.; //; // Note: this is defined inline to dodge issues with GCC's interpretation; // of enclosing namespaces for friend function declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:54,log,logging,54,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['log'],['logging']
Testability,/// Print a short description useful for debugging or logging.; ///; /// We print the function names in the SCC wrapped in '()'s and skipping; /// the middle functions if there are a large number.; //; // Note: this is defined inline to dodge issues with GCC's interpretation; // of enclosing namespaces for friend function declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:54,log,logging,54,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['log'],['logging']
Testability,"/// Print any diagnostic option information to a raw_ostream.; ///; /// This implements all of the logic for adding diagnostic options to a message; /// (via OS). Each relevant option is comma separated and all are enclosed in; /// the standard bracketing: "" [...]"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnosticPrinter.cpp:99,log,logic,99,interpreter/llvm-project/clang/lib/Frontend/TextDiagnosticPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnosticPrinter.cpp,1,['log'],['logic']
Testability,/// Print initial ICV values for testing.; /// FIXME: This should be done from the Attributor once it is added.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:33,test,testing,33,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['test'],['testing']
Testability,"/// Print the diagonstic level to a raw_ostream.; ///; /// This is a static helper that handles colorizing the level and formatting; /// it into an arbitrary output stream. This is used internally by the; /// TextDiagnostic emission code, but it can also be used directly by; /// consumers that don't have a source manager or other state that the full; /// TextDiagnostic logic requires.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:372,log,logic,372,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,1,['log'],['logic']
Testability,"/// Print the frequencies for the current function.; ///; /// Prints the frequencies for the blocks in the current function.; ///; /// Blocks are printed in the natural iteration order of the function, rather; /// than reverse post-order. This provides two advantages: writing -analyze; /// tests is easier (since blocks come out in source order), and even; /// unreachable blocks are printed.; ///; /// \a BlockFrequencyInfoImplBase::print() only knows reverse post-order, so; /// we need to override it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:291,test,tests,291,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['test'],['tests']
Testability,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:361,test,testing,361,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,1,['test'],['testing']
Testability,/// Printer pass for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackLifetime.h:21,test,testing,21,interpreter/llvm-project/llvm/include/llvm/Analysis/StackLifetime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackLifetime.h,1,['test'],['testing']
Testability,/// Prints an include stack when appropriate for a particular; /// diagnostic level and location.; ///; /// This routine handles all the logic of suppressing particular include; /// stacks (such as those for notes) and duplicate include stacks when; /// repeated warnings occur within the same file. It also handles the logic; /// of customizing the formatting and display of the include stack.; ///; /// \param Loc The diagnostic location.; /// \param PLoc The presumed location of the diagnostic location.; /// \param Level The diagnostic level of the message this stack pertains to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DiagnosticRenderer.cpp:137,log,logic,137,interpreter/llvm-project/clang/lib/Frontend/DiagnosticRenderer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DiagnosticRenderer.cpp,2,['log'],['logic']
Testability,/// Prints the values in the OffloadArrays \p OAs using LLVM_DEBUG.; /// For now this is a way to test that the function getValuesInOffloadArrays; /// is working properly.; /// TODO: Move this to a unittest when unittests are available for OpenMPOpt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:98,test,test,98,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['test'],['test']
Testability,"/// Private modules are canonicalized as Foo_Private. Clang provides extra; /// module map search logic to find the appropriate private module when PCH; /// is used with implicit module maps. Warn when private modules are written; /// in other ways (FooPrivate and Foo.Private), providing notes and fixits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:98,log,logic,98,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['log'],['logic']
Testability,"/// Process the MC/DC Record in order to produce a result for a boolean; /// expression. This process includes tracking the conditions that comprise; /// the decision region, calculating the list of all possible test vectors,; /// marking the executed test vectors, and then finding an Independence Pair; /// out of the executed test vectors for each condition in the boolean; /// expression. A condition is tracked to ensure that its ID can be mapped to; /// its ordinal position in the boolean expression. The condition's source; /// location is also tracked, as well as whether it is constant folded (in; /// which case it is excuded from the metric).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:212,test,test,212,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,3,['test'],['test']
Testability,/// Profile-level similarity (PS) is a weighted aggregate over function-level; /// similarities (FS). This method weights the FS value by the function; /// weights in the base and test profiles for the aggregation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:180,test,test,180,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,/// Provide a short name by printing this RefSCC to a std::string.; ///; /// This copes with the fact that we don't have a name per se for an RefSCC; /// while still making the use of this in debugging and logging useful.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:206,log,logging,206,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['log'],['logging']
Testability,/// Provide a short name by printing this SCC to a std::string.; ///; /// This copes with the fact that we don't have a name per se for an SCC; /// while still making the use of this in debugging and logging useful.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:200,log,logging,200,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['log'],['logging']
Testability,/// Provide a way to force enable whole program visibility in tests.; /// This is needed to support legacy tests that don't contain; /// !vcall_visibility metadata (the mere presense of type tests; /// previously implied hidden visibility).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:62,test,tests,62,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,3,['test'],['tests']
Testability,"/// Provides ExecutorProcessControl based indirect stubs, trampoline pool and; /// lazy call through manager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:51,stub,stubs,51,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,1,['stub'],['stubs']
Testability,/// Provides a hint to the processor to selectively reset the prediction; /// history of the current logical processor specified by a 32-bit integer; /// value \a __eax.; ///; /// This intrinsic corresponds to the <c> HRESET </c> instruction.; ///; /// \code{.operation}; /// IF __eax == 0; /// // nop; /// ELSE; /// FOR i := 0 to 31; /// IF __eax[i]; /// ResetPredictionFeature(i); /// FI; /// ENDFOR; /// FI; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/hresetintrin.h:101,log,logical,101,interpreter/llvm-project/clang/lib/Headers/hresetintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/hresetintrin.h,1,['log'],['logical']
Testability,"/// Provides content of default web page for registered web-socket handler; /// Can be content of HTML page or file name, where content should be taken; /// For instance, file:/home/user/test.htm or file:$jsrootsys/files/canvas.htm; /// If not specified, default index.htm page will be shown; /// Used by the webcanvas",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpWSHandler.h:187,test,test,187,net/http/inc/THttpWSHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpWSHandler.h,1,['test'],['test']
Testability,"/// Provides the logic to execute GlobalISel match tables, which are used by the; /// instruction selector and instruction combiners as their engine to match and; /// apply MIR patterns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:17,log,logic,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['log'],['logic']
Testability,/// RAII object to temporarily leave the scope of a directive when we want to; /// logically operate in its parent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:83,log,logically,83,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['log'],['logically']
Testability,"/// ROOT-10781; /// Searching binning in linked lists is slow, so these were replaced by unordered maps.; /// Here, we test that sharing alternative binning still works.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx:119,test,test,119,roofit/roofitcore/test/testRooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx,1,['test'],['test']
Testability,"/// ROOT-10781; /// Searching binning in linked lists is slow, so these were replaced by unordered maps.; /// Here, we test that sharing works also after writing to files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx:119,test,test,119,roofit/roofitcore/test/testRooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx,1,['test'],['test']
Testability,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:121,test,test,121,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,1,['test'],['test']
Testability,"/// Reads a log in FDR mode for version 1 of this binary format. FDR mode is; /// defined as part of the compiler-rt project in xray_fdr_logging.h, and such; /// a log consists of the familiar 32 bit XRayHeader, followed by sequences of; /// of interspersed 16 byte Metadata Records and 8 byte Function Records.; ///; /// The following is an attempt to document the grammar of the format, which is; /// parsed by this function for little-endian machines. Since the format makes; /// use of BitFields, when we support big-endian architectures, we will need to; /// adjust not only the endianness parameter to llvm's RecordExtractor, but also; /// the bit twiddling logic, which is consistent with the little-endian; /// convention that BitFields within a struct will first be packed into the; /// least significant bits the address they belong to.; ///; /// We expect a format complying with the grammar in the following pseudo-EBNF; /// in Version 1 of the FDR log.; ///; /// FDRLog: XRayFileHeader ThreadBuffer*; /// XRayFileHeader: 32 bytes to identify the log as FDR with machine metadata.; /// Includes BufferSize; /// ThreadBuffer: NewBuffer WallClockTime NewCPUId FunctionSequence EOB; /// BufSize: 8 byte unsigned integer indicating how large the buffer is.; /// NewBuffer: 16 byte metadata record with Thread Id.; /// WallClockTime: 16 byte metadata record with human readable time.; /// Pid: 16 byte metadata record with Pid; /// NewCPUId: 16 byte metadata record with CPUId and a 64 bit TSC reading.; /// EOB: 16 byte record in a thread buffer plus mem garbage to fill BufSize.; /// FunctionSequence: NewCPUId | TSCWrap | FunctionRecord; /// TSCWrap: 16 byte metadata record with a full 64 bit TSC reading.; /// FunctionRecord: 8 byte record with FunctionId, entry/exit, and TSC delta.; ///; /// In Version 2, we make the following changes:; ///; /// ThreadBuffer: BufferExtents NewBuffer WallClockTime NewCPUId; /// FunctionSequence; /// BufferExtents: 16 byte metdata record describing how",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp:12,log,log,12,interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,4,['log'],"['log', 'logic']"
Testability,"/// Recognize and process idiom involving test for multiplication; /// overflow.; ///; /// The caller has matched a pattern of the form:; /// I = cmp u (mul(zext A, zext B), V; /// The function checks if this is a test for overflow and if so replaces; /// multiplication with call to 'mul.with.overflow' intrinsic.; ///; /// \param I Compare instruction.; /// \param MulVal Result of 'mult' instruction. It is one of the arguments of; /// the compare instruction. Must be of integer type.; /// \param OtherVal The other argument of compare instruction.; /// \returns Instruction which must replace the compare instruction, NULL if no; /// replacement required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:42,test,test,42,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,['test'],['test']
Testability,"/// Recognize construction of vectors like; /// %ra = insertelement <4 x float> poison, float %s0, i32 0; /// %rb = insertelement <4 x float> %ra, float %s1, i32 1; /// %rc = insertelement <4 x float> %rb, float %s2, i32 2; /// %rd = insertelement <4 x float> %rc, float %s3, i32 3; /// starting from the last insertelement or insertvalue instruction.; ///; /// Also recognize homogeneous aggregates like {<2 x float>, <2 x float>},; /// {{float, float}, {float, float}}, [2 x {float, float}] and so on.; /// See llvm/test/Transforms/SLPVectorizer/X86/pr42022.ll for examples.; ///; /// Assume LastInsertInst is of InsertElementInst or InsertValueInst type.; ///; /// \return true if it matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:518,test,test,518,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['test'],['test']
Testability,"/// Record symbols, GOT entries, stubs, and sections for COFF file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:33,stub,stubs,33,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,1,['stub'],['stubs']
Testability,"/// Record symbols, GOT entries, stubs, and sections for ELF file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:33,stub,stubs,33,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,1,['stub'],['stubs']
Testability,"/// Record symbols, GOT entries, stubs, and sections for MachO file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:33,stub,stubs,33,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,1,['stub'],['stubs']
Testability,"/// Record the fact that we expect to encounter a given gc_relocate; /// before the next statepoint. If we don't see it, we'll report; /// an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:142,assert,assertion,142,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,1,['assert'],['assertion']
Testability,"/// RecordChildMatcher - Save a numbered child of the current node, or fail; /// the match if it doesn't exist. This is logically equivalent to:; /// MoveChild N + RecordNode + MoveParent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:120,log,logically,120,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,1,['log'],['logically']
Testability,"/// RecordsEntry - Holds exactly one of a Record, ForeachLoop, or; /// AssertionInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:71,Assert,AssertionInfo,71,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['Assert'],['AssertionInfo']
Testability,"/// Reduce a pair of compares that check if a value has exactly 1 bit set.; /// Also used for logical and/or, must be poison safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:94,log,logical,94,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,/// Reduce logic-of-compares with equality to a constant by substituting a; /// common operand with the constant. Callers are expected to call this with; /// Cmp0/Cmp1 switched to handle logic op commutativity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:11,log,logic-of-compares,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['log'],"['logic', 'logic-of-compares']"
Testability,"/// Reformats the given \p Ranges in \p Code.; ///; /// Each range is extended on either end to its next bigger logic unit, i.e.; /// everything that might influence its formatting or might be influenced by its; /// formatting.; ///; /// Returns the ``Replacements`` necessary to make all \p Ranges comply with; /// \p Style.; ///; /// If ``Status`` is non-null, its value will be populated with the status of; /// this formatting attempt. See \c FormattingAttemptStatus.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:112,log,logic,112,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['log'],['logic']
Testability,"/// Reformats the given \p Ranges in the code fragment \p Code.; ///; /// A fragment of code could conceptually be surrounded by other code that might; /// constrain how that fragment is laid out.; /// For example, consider the fragment of code between 'R""(' and ')""',; /// exclusive, in the following code:; ///; /// void outer(int x) {; /// string inner = R""(name: data; /// ^ FirstStartColumn; /// value: {; /// x: 1; /// ^ NextStartColumn; /// }; /// )"";; /// ^ LastStartColumn; /// }; ///; /// The outer code can influence the inner fragment as follows:; /// * \p FirstStartColumn specifies the column at which \p Code starts.; /// * \p NextStartColumn specifies the additional indent dictated by the; /// surrounding code. It is applied to the rest of the lines of \p Code.; /// * \p LastStartColumn specifies the column at which the last line of; /// \p Code should end, in case the last line is an empty line.; ///; /// In the case where the last line of the fragment contains content,; /// the fragment ends at the end of that content and \p LastStartColumn is; /// not taken into account, for example in:; ///; /// void block() {; /// string inner = R""(name: value)"";; /// }; ///; /// Each range is extended on either end to its next bigger logic unit, i.e.; /// everything that might influence its formatting or might be influenced by its; /// formatting.; ///; /// Returns a pair P, where:; /// * P.first are the ``Replacements`` necessary to make all \p Ranges comply; /// with \p Style.; /// * P.second is the penalty induced by formatting the fragment \p Code.; /// If the formatting of the fragment doesn't have a notion of penalty,; /// returns 0.; ///; /// If ``Status`` is non-null, its value will be populated with the status of; /// this formatting attempt. See \c FormattingAttemptStatus.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatInternal.h:1251,log,logic,1251,interpreter/llvm-project/clang/lib/Format/FormatInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatInternal.h,1,['log'],['logic']
Testability,/// Register a function analysis ID that the results aggregation depends on.; ///; /// This is used in the new pass manager to implement the invalidation logic; /// where we must invalidate the results aggregation if any of our component; /// analyses become invalid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:154,log,logic,154,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['log'],['logic']
Testability,"/// Register this instance as diagnostic handler.; /// With no further action, any diagnostic will lead to a test failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:109,test,test,109,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,1,['test'],['test']
Testability,"/// Registers a callback to notify the end of parsing.; ///; /// The provided closure is called after parsing is done, before the AST is; /// traversed. Useful for benchmarking.; /// Each call to FindAll(...) will call the closure once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:164,benchmark,benchmarking,164,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,1,['benchmark'],['benchmarking']
Testability,"/// Remove and return the given log handler. Returns `nullptr` if not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:32,log,log,32,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['log'],['log']
Testability,"/// Remove this gc_relocate from the list we're expecting to see; /// before the next statepoint. If we weren't expecting to see; /// it, we'll report an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:154,assert,assertion,154,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,1,['assert'],['assertion']
Testability,"/// Render the operand to an MCInst as a GPR32; /// Asserts if the wrong number of operands are requested, or the operand; /// is not a k_RegisterIndex compatible with RegKind_GPR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:52,Assert,Asserts,52,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['Assert'],['Asserts']
Testability,"/// Render the operand to an MCInst as a GPR64; /// Asserts if the wrong number of operands are requested, or the operand; /// is not a k_RegisterIndex compatible with RegKind_GPR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:52,Assert,Asserts,52,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['Assert'],['Asserts']
Testability,/// Replace a StackProbe inline-stub with the actual probe code inline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.h:32,stub,stub,32,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.h,1,['stub'],['stub']
Testability,/// Replace a StackProbe stub (if any) with the actual probe code inline,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:25,stub,stub,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,2,['stub'],['stub']
Testability,/// Replace mul instructions with llvm.amdgcn.mul.u24 or llvm.amdgcn.mul.s24.; /// SelectionDAG has an issue where an and asserting the bits are known,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:122,assert,asserting,122,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['assert'],['asserting']
Testability,"/// Replaces invalid UTF-8 sequences in \p S with the replacement character; /// (U+FFFD). The returned string is valid UTF-8.; /// This is much slower than isUTF8, so test that first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:168,test,test,168,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['test'],['test']
Testability,"/// Replaces the pointer to the plot variable with a pointer to a clone of the; /// plot variable that is owned by this RooPlot. The RooPlot references the; /// plotted variable by non-owning pointer by default since ROOT 6.28, which; /// resulted in a big speedup when plotting complicated pdfs that are expensive; /// to clone. However, going back to an owned clone is useful in rare cases.; /// For example in the RooUnitTest, where the registered plots need to live; /// longer than the scope of the unit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:509,test,test,509,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,1,['test'],['test']
Testability,/// Report a error for this execution session.; ///; /// Unhandled errors can be sent here to log them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:94,log,log,94,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['log'],['log']
Testability,/// Represents a C++11 noexcept expression (C++ [expr.unary.noexcept]).; ///; /// The noexcept expression tests whether a given expression might throw. Its; /// result is a boolean constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:106,test,tests,106,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['test'],['tests']
Testability,"/// Represents a single basic block in a source-level CFG.; /// It consists of:; ///; /// (1) A set of statements/expressions (which may contain subexpressions).; /// (2) A ""terminator"" statement (not in the set of statements).; /// (3) A list of successors and predecessors.; ///; /// Terminator: The terminator represents the type of control-flow that occurs; /// at the end of the basic block. The terminator is a Stmt* referring to an; /// AST node that has control-flow: if-statements, breaks, loops, etc.; /// If the control-flow is conditional, the condition expression will appear; /// within the set of statements in the block (usually the last statement).; ///; /// Predecessors: the order in the set of predecessors is arbitrary.; ///; /// Successors: the order in the set of successors is NOT arbitrary. We; /// currently have the following orderings based on the terminator:; ///; /// Terminator | Successor Ordering; /// ------------------|------------------------------------; /// if | Then Block; Else Block; /// ? operator | LHS expression; RHS expression; /// logical and/or | expression that consumes the op, RHS; /// vbase inits | already handled by the most derived class; not yet; ///; /// But note that any of that may be NULL in case of optimized-out edges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:1078,log,logical,1078,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['log'],['logical']
Testability,"/// Represents binding an expression to a temporary.; ///; /// This ensures the destructor is called for the temporary. It should only be; /// needed for non-POD, non-trivially destructable class types. For example:; ///; /// \code; /// struct S {; /// S() { } // User defined constructor makes S non-POD.; /// ~S() { } // User defined destructor makes it non-trivial.; /// };; /// void test() {; /// const S &s_ref = S(); // Requires a CXXBindTemporaryExpr.; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:387,test,test,387,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['test'],['test']
Testability,/// Represents the \c this expression in C++.; ///; /// This is a pointer to the object on which the current member function is; /// executing (C++ [expr.prim]p3). Example:; ///; /// \code; /// class Foo {; /// public:; /// void bar();; /// void test() { this->bar(); }; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:246,test,test,246,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['test'],['test']
Testability,"/// Represents the cost of inlining a function.; ///; /// This supports special values for functions which should ""always"" or; /// ""never"" be inlined. Otherwise, the cost represents a unitless amount;; /// smaller values increase the likelihood of the function being inlined.; ///; /// Objects of this type also provide the adjusted threshold for inlining; /// based on the information available for a particular callsite. They can be; /// directly tested to determine if inlining should occur given the cost and; /// threshold for this cost metric.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:449,test,tested,449,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['test'],['tested']
Testability,"/// Represents the memory deallocation call in a C++ delete-expression.; ///; /// This is a call to ""operator delete"".; // FIXME: CXXDeleteExpr isn't present for custom delete operators, or even for; // some those that are in the standard library, like the no-throw or align_val; // versions.; // Some pointers:; // http://lists.llvm.org/pipermail/cfe-dev/2020-April/065080.html; // clang/test/Analysis/cxx-dynamic-memory-analysis-order.cpp; // clang/unittests/StaticAnalyzer/CallEventTest.cpp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:389,test,test,389,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['test'],['test']
Testability,/// Reset all command line options to a state that looks as if they have; /// never appeared on the command line. This is useful for being able to parse; /// a command line multiple times (especially useful for writing tests).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:219,test,tests,219,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['test'],['tests']
Testability,"/// Reset the ID of what this MemoryUse was optimized to, causing it to; /// be rewalked by the walker if necessary.; /// This really should only be called by tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:159,test,tests,159,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['test'],['tests']
Testability,/// Reset the currently registered delegate - otherwise assert.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:56,assert,assert,56,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['assert'],['assert']
Testability,"/// Retrieve the member template from which this template was; /// instantiated, or nullptr if this template was not instantiated from a; /// member template.; ///; /// A template is instantiated from a member template when the member; /// template itself is part of a class template (or member thereof). For; /// example, given; ///; /// \code; /// template<typename T>; /// struct X {; /// template<typename U> void f(T, U);; /// };; ///; /// void test(X<int> x) {; /// x.f(1, 'a');; /// };; /// \endcode; ///; /// \c X<int>::f is a FunctionTemplateDecl that describes the function; /// template; ///; /// \code; /// template<typename U> void X<int>::f(int, U);; /// \endcode; ///; /// which was itself created during the instantiation of \c X<int>. Calling; /// getInstantiatedFromMemberTemplate() on this FunctionTemplateDecl will; /// retrieve the FunctionTemplateDecl for the original template \c f within; /// the class template \c X<T>, i.e.,; ///; /// \code; /// template<typename T>; /// template<typename U>; /// void X<T>::f(T, U);; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:450,test,test,450,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['test'],['test']
Testability,"/// Retrieve the name of the entity we're testing for, along with; /// location information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:42,test,testing,42,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,1,['test'],['testing']
Testability,"/// Retrieve the stored node as type \c T.; ///; /// Similar to \c get(), but asserts that the type is what we are expecting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h:78,assert,asserts,78,interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,1,['assert'],['asserts']
Testability,/// Return a boolean value testing if \p Arg != 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:27,test,testing,27,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['test'],['testing']
Testability,/// Return a boolean value testing if \p Arg < 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:27,test,testing,27,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['test'],['testing']
Testability,/// Return a boolean value testing if \p Arg > -1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:27,test,testing,27,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['test'],['testing']
Testability,/// Return a list of input files. This function has logic for dealing with the; /// special case where we might have dSYM bundles as input. The function; /// returns an error when the directory structure doesn't match that of a dSYM; /// bundle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp:52,log,logic,52,interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp,1,['log'],['logic']
Testability,/// Return a new range representing the possible values resulting from a; /// logical right shift of a value in this range and a value in \p Other.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:78,log,logical,78,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['log'],['logical']
Testability,/// Return a new range that is the logical not of the current set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:35,log,logical,35,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['log'],['logical']
Testability,"/// Return a number greater or equal to the total number of entries in the; /// dataset.; ///; /// \note If you are interested in the total number of entries in a TChain,; /// this function will give that number once the last file of the chain; /// is opened. In general, using this instead of GetEntries will avoid; /// opening all files in the chain which could be very costly for very; /// large number of files stored at a remote location.; ///; /// The logic depends on whether the dataset is a TTree or a TChain. In the; /// first case, it simply returns the total number of entries in the tree. In; /// the latter case, it depends on which point of the processing of the chain; /// this function is called. During most of the chain processing, this; /// function will return TTree::kMaxEntries. When the chain arrives at the; /// last file, then the function will return the accumulated total number of; /// entries in the whole chain. A notable use case where this function; /// becomes quite useful is when writing the following for loop to traverse; /// the entries in the dataset:; ///; /// \code{.cpp}; /// for(Long64_t ievent = 0; ievent < dataset.GetEntriesFast(); ievent++) {; /// // Do something with the event in the dataset; /// }; /// \endcode; ///; /// In the example above, independently on whether the dataset is a TTree or; /// a TChain, the GetEntriesFast call will provide the correct stopping; /// condition for the loop (i.e. the total number of entries). In the TChain; /// case, calling GetEntries instead would open all the files in the chain; /// upfront which could be costly.; ///; /// The functionality offered by this method can also be seen when used in; /// conjunction with LoadTree. For a call like <tt> LoadTree(ievent) </tt>,; /// the condition <tt> ievent < dataset.GetEntriesFast() </tt> is only; /// satisfied if \p ievent is strictly smaller than the total number of; /// entries in the dataset. In fact, even when the dataset is a TChain, the; /// first t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h:458,log,logic,458,tree/tree/inc/TTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h,1,['log'],['logic']
Testability,/// Return a privatizable type that encloses both T0 and T1.; /// TODO: This is merely a stub for now as we should manage a mapping as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:89,stub,stub,89,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['stub'],['stub']
Testability,/// Return a register which can be used as a bit to test in a TB(N)Z.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,"/// Return a similarity of two line/block sample counters in the same; /// function in base and test profiles. The line/block-similarity BS(i) is; /// computed as follows:; /// For an offsets i, given the sample count at i in base profile BB(i),; /// the sample count at i in test profile BT(i), the sum of sample counts; /// in this function in base profile SB, and the sum of sample counts in; /// this function in test profile ST, compute BS(i) = 1.0 - fabs(BB(i)/SB -; /// BT(i)/ST), ranging in [0.0f to 1.0f] with 0.0 meaning no-overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:96,test,test,96,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,3,['test'],['test']
Testability,/// Return a vector logical shift node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:20,log,logical,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,/// Return an AssertAlignSDNode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:14,Assert,AssertAlignSDNode,14,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Assert'],['AssertAlignSDNode']
Testability,/// Return an MCDC record that indicates executed test vectors and condition; /// pairs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:50,test,test,50,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['test'],['test']
Testability,"/// Return an iterator pointing to the first set bit AT, OR AFTER, \p Index.; /// If no such set bit exists, return end(). This is like std::lower_bound.; /// This has worst-case logarithmic performance (roughly O(log(gaps between; /// contiguous ranges))).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:179,log,logarithmic,179,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,2,['log'],"['log', 'logarithmic']"
Testability,"/// Return if the target supports combining a; /// chain like:; /// \code; /// %andResult = and %val1, #mask; /// %icmpResult = icmp %andResult, 0; /// \endcode; /// into a single machine instruction of a form like:; /// \code; /// cc = test %register, #mask; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:237,test,test,237,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,"/// Return information about whether a particular call site modifies; /// or reads the specified memory location \p MemLoc before instruction \p I; /// in a BasicBlock.; /// FIXME: this is really just shoring-up a deficiency in alias analysis.; /// BasicAA isn't willing to spend linear time determining whether an alloca; /// was captured before or after this particular call, while we are. However,; /// with a smarter AA in place, this test is just wasting compile time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:439,test,test,439,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['test'],['test']
Testability,"/// Return minimized -log(L) value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:22,log,log,22,roofit/roofitcore/inc/RooFitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h,1,['log'],['log']
Testability,"/// Return pointer to RooRealVar holding minimized -log(L) value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:52,log,log,52,roofit/roofitcore/inc/RooAbsMCStudyModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h,1,['log'],['log']
Testability,"/// Return the Chi2 value after fitting; /// In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1; /// In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio; /// using the definition of Baker-Cousins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitResult.h:226,log,log-likelihood,226,math/mathcore/inc/Fit/FitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitResult.h,1,['log'],['log-likelihood']
Testability,"/// Return the EVT corresponding to this LLVM type. This is fixed by the LLVM; /// operations except for the pointer size. If AllowUnknown is true, this; /// will return MVT::Other for types with no EVT counterpart (e.g. structs),; /// otherwise it will assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:254,assert,assert,254,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['assert'],['assert']
Testability,/// Return the ICMP or FCMP predicate value. Assert if this is not an ICMP or; /// FCMP constant expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:45,Assert,Assert,45,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['Assert'],['Assert']
Testability,"/// Return the Independence Pair that covers the given condition. Because; /// condition IDs are not associated based on their position in the; /// expression, accessing conditions in the TestVectors requires a; /// translation from a ordinal position to actual condition ID. This is done; /// via PosToID[].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:188,Test,TestVectors,188,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['Test'],['TestVectors']
Testability,/// Return the Result evaluation for an executed test vector.; /// See MCDCRecordProcessor::RecordTestVector().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:49,test,test,49,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['test'],['test']
Testability,"/// Return the ceil log base 2 of the specified value, 32 if the value is zero.; /// (32 bit edition).; /// Ex. Log2_32_Ceil(32) == 5, Log2_32_Ceil(1) == 0, Log2_32_Ceil(6) == 3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:20,log,log,20,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,1,['log'],['log']
Testability,"/// Return the ceil log base 2 of the specified value, 64 if the value is zero.; /// (64 bit edition.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:20,log,log,20,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,1,['log'],['log']
Testability,"/// Return the class interface that this ivar is logically contained; /// in; this is either the interface where the ivar was declared, or the; /// interface the ivar is conceptually a part of in the case of synthesized; /// ivars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:49,log,logically,49,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['log'],['logically']
Testability,/// Return the constant as a 64-bit integer value after it has been sign; /// extended as appropriate for the type of this constant. Note that; /// this method can assert if the value does not fit in 64 bits.; /// Return the sign extended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:164,assert,assert,164,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assert']
Testability,/// Return the constant as a 64-bit unsigned integer value after it; /// has been zero extended as appropriate for the type of this constant. Note; /// that this method can assert if the value does not fit in 64 bits.; /// Return the zero extended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:173,assert,assert,173,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assert']
Testability,"/// Return the constant as an llvm::Align, interpreting `0` as `Align(1)`.; /// Note that this method can assert if the value does not fit in 64 bits or; /// is not a power of two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:106,assert,assert,106,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assert']
Testability,/// Return the constant as an llvm::MaybeAlign.; /// Note that this method can assert if the value does not fit in 64 bits or; /// is not a power of two.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:79,assert,assert,79,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assert']
Testability,"/// Return the desired alignment for ByVal or InAlloca aggregate function; /// arguments in the caller parameter area. This is the actual alignment, not; /// its logarithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:162,log,logarithm,162,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logarithm']
Testability,"/// Return the evaluation of a condition (indicated by Condition) in an; /// executed test vector (indicated by TestVectorIndex), which will be True,; /// False, or DontCare if the condition is unevaluatable. Because condition; /// IDs are not associated based on their position in the expression,; /// accessing conditions in the TestVectors requires a translation from a; /// ordinal position to actual condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:86,test,test,86,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,3,"['Test', 'test']","['TestVectorIndex', 'TestVectors', 'test']"
Testability,"/// Return the floor log base 2 of the specified value, -1 if the value is zero.; /// (32 bit edition.); /// Ex. Log2_32(32) == 5, Log2_32(1) == 0, Log2_32(0) == -1, Log2_32(6) == 2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:21,log,log,21,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,1,['log'],['log']
Testability,"/// Return the floor log base 2 of the specified value, -1 if the value is zero.; /// (64 bit edition.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:21,log,log,21,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,1,['log'],['log']
Testability,"/// Return the hypothesis test result obtained from the likelihood ratio of the; /// maximum likelihood value with the null parameters fixed to their values, with respect to keeping all parameters; /// floating (global maximum likelihood value).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:26,test,test,26,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,1,['test'],['test']
Testability,/// Return the maximum size of a stub created by createIFuncStub(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:33,stub,stub,33,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stub']
Testability,/// Return the raw optional flags value contained in this value.; ///; /// This should only be used when testing two Values for equivalence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:105,test,testing,105,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['test'],['testing']
Testability,/// Return the result of a logical AND between different comparisons of; /// identical values: ((X op1 Y) & (X op2 Y)). This function returns; /// SETCC_INVALID if it is not possible to represent the resultant comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:27,log,logical,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['log'],['logical']
Testability,/// Return the result of a logical OR between different comparisons of; /// identical values: ((X op1 Y) | (X op2 Y)). This function returns; /// SETCC_INVALID if it is not possible to represent the resultant comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:27,log,logical,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['log'],['logical']
Testability,/// Return the size of the specified fixed width value type in bits. The; /// function will assert if the type is scalable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:92,assert,assert,92,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,2,['assert'],['assert']
Testability,"/// Return the sysroot, possibly searching for a default sysroot using; /// target-specific logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:92,log,logic,92,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['log'],['logic']
Testability,/// Return the test mask which returns true after fabs is applied to the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:15,test,test,15,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,1,['test'],['test']
Testability,"/// Return the test mask which returns true if the value could have the same set; /// of classes, but with a different sign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:15,test,test,15,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,1,['test'],['test']
Testability,/// Return the test mask which returns true if the value's sign bit is flipped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:15,test,test,15,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,1,['test'],['test']
Testability,/// Return the value bound to specified location in a given state.; ///; /// The high level logic for this method is this:; /// getBinding (L); /// if L has binding; /// return L's binding; /// else if L is in killset; /// return unknown; /// else; /// if L is on stack or heap; /// return undefined; /// else; /// return symbolic,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:92,log,logic,92,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['log'],['logic']
Testability,"/// Return this matcher as a \c Matcher<T>.; ///; /// Handles the different types (Single, Polymorphic) accordingly.; /// Asserts that \c hasTypedMatcher<T>() is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:122,Assert,Asserts,122,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['Assert'],['Asserts']
Testability,/// Return true if I is an instruction with the FastMathFlags that are needed; /// for general reassociation set. This is not the same as testing; /// Instruction::isAssociative() because it includes operations like fsub.; /// (This routine is only intended to be called for floating-point operations.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:138,test,testing,138,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['test'],['testing']
Testability,"/// Return true if it is profitable to combine an XOR of a logical shift; /// to create a logical shift of NOT. This transformation may not be desirable; /// if it disrupts a particularly auspicious target-specific tree (e.g.; /// BIC on ARM/AArch64). By default, it returns true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,log,logical,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['log'],['logical']
Testability,"/// Return true if lowering to a bit test is suitable for a set of case; /// clusters which contains \p NumDests unique destinations, \p Low and; /// \p High as its lowest and highest case values, and expects \p NumCmps; /// case value comparisons. Check if the number of destinations, comparison; /// metric, and range are all suitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:37,test,test,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,/// Return true if opcode is a M68k logical comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:36,log,logical,36,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['log'],['logical']
Testability,/// Return true if opcode is a X86 logical comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:35,log,logical,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"/// Return true if the analyzed function is actually a default implementation; /// of the method that has to be overriden.; ///; /// These functions can have tracked parameters, but wouldn't call them; /// because they are not designed to perform any meaningful actions.; ///; /// There are a couple of flavors of such default implementations:; /// 1. Empty methods or methods with a single return statement; /// 2. Methods that have one block with a call to no return function; /// 3. Methods with only assertion-like operations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:504,assert,assertion-like,504,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['assert'],['assertion-like']
Testability,/// Return true if the induction variable \p IV in a Loop whose latch is; /// \p LatchBlock would become dead if the exit test \p Cond were removed.; /// Conservatively returns false if analysis is insufficient.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:122,test,test,122,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['test'],['test']
Testability,/// Return true if the node is a math/logic binary operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:38,log,logic,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logic']
Testability,"/// Return true if the target has a bit-test instruction:; /// (X & (1 << Y)) ==/!= 0; /// This knowledge can be used to prevent breaking the pattern,; /// or creating it if it could be recognized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,test,test,40,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,/// Return true if this is a logical shift left or a logical shift right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:29,log,logical,29,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,2,['log'],['logical']
Testability,/// Return true if this is an operation on mask registers. Note that; /// this includes both arithmetic/logical ops and load/store (vlm/vsm).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:104,log,logical,104,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['log'],['logical']
Testability,"/// Return true if this loop is no longer valid. The only valid use of this; /// helper is ""assert(L.isInvalid())"" or equivalent, since IsInvalid is set to; /// true by the destructor. In other words, if this accessor returns true,; /// the caller has already triggered UB by calling this accessor; and so it; /// can only be called in a context where a return value of true indicates a; /// programmer error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:92,assert,assert,92,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['assert'],['assert']
Testability,/// Return true if this predicate is either EQ or NE. This also; /// tests for commutativity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:69,test,tests,69,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['test'],['tests']
Testability,/// Return true if this value has N uses or more.; ///; /// This is logically equivalent to getNumUses() >= N.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:68,log,logically,68,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,2,['log'],['logically']
Testability,"/// Return true if we can simplify two logical (either left or right) shifts; /// that have constant shift amounts: OuterShift (InnerShift X, C1), C2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:39,log,logical,39,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['log'],['logical']
Testability,"/// Return true when \P Inst is both associative and commutative. If \P Invert; /// is true, then the inverse of \P Inst operation must be tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:139,test,tested,139,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['test'],['tested']
Testability,/// Return whether the build of the control flow map is at the top-level; /// (root) of a logical operator nest in a boolean expression prior to the; /// assignment of condition IDs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:90,log,logical,90,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['log'],['logical']
Testability,/// Returns a compile-time known value for the lane index and asserts if the; /// lane can only be calculated at runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:62,assert,asserts,62,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['assert'],['asserts']
Testability,/// Returns a dummy logger that does nothing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:20,log,logger,20,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['log'],['logger']
Testability,/// Returns a replacement refactoring result consumer (if any) that should; /// consume the results of a refactoring operation.; ///; /// The replacement refactoring result consumer is used by \c; /// TestSourceSelectionArgument to inject a test-specific result handling; /// logic into the refactoring operation. The test-specific consumer; /// ensures that the individual results in a particular test group are; /// identical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:201,Test,TestSourceSelectionArgument,201,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,5,"['Test', 'log', 'test']","['TestSourceSelectionArgument', 'logic', 'test', 'test-specific']"
Testability,"/// Returns all compile commands in which the specified file was; /// compiled.; ///; /// This includes compile commands that span multiple source files.; /// For example, consider a project with the following compilations:; /// $ clang++ -o test a.cc b.cc t.cc; /// $ clang++ -o production a.cc b.cc -DPRODUCTION; /// A compilation database representing the project would return both command; /// lines for a.cc and b.cc and only the first command line for t.cc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:242,test,test,242,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['test'],['test']
Testability,"/// Returns an SVal, if possible, for the specified position of an; /// initialization list.; ///; /// \param ILE The given initialization list.; /// \param Offsets The array of unsigned offsets. E.g. for the expression; /// `int x = arr[1][2][3];` an array should be { 1, 2, 3 }.; /// \param ElemT The type of the result SVal expression.; /// \return Optional SVal for the particular position in the initialization; /// list. E.g. for the list `{{1, 2},[3, 4],{5, 6}, {}}` offsets:; /// - {1, 1} returns SVal{4}, because it's the second position in the second; /// sublist;; /// - {3, 0} returns SVal{0}, because there's no explicit value at this; /// position in the sublist.; ///; /// NOTE: Inorder to get a valid SVal, a caller shall guarantee valid offsets; /// for the given initialization list. Otherwise SVal can be an equivalent to 0; /// or lead to assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:859,assert,assertion,859,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['assert'],['assertion']
Testability,"/// Returns an iterator that points to the default case.; /// Note: this iterator allows to resolve successor only. Attempt; /// to resolve case value causes an assertion.; /// Also note, that increment and decrement also causes an assertion and; /// makes iterator invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:161,assert,assertion,161,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['assert'],['assertion']
Testability,"/// Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; /// specific to the test type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:46,Test,Test,46,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,3,"['Test', 'test']","['Test', 'test']"
Testability,"/// Returns diagnostics emitted during parsing.; /// (By default, errors cause test failures, see TestInputs::ErrorOK).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:79,test,test,79,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,2,"['Test', 'test']","['TestInputs', 'test']"
Testability,"/// Returns how many physical cores (as opposed to logical cores returned from; /// thread::hardware_concurrency(), which includes hyperthreads).; /// Returns -1 if unknown for the current host system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:51,log,logical,51,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,1,['log'],['logical']
Testability,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:24,Test,TestStatSampler,24,roofit/roostats/inc/RooStats/FeldmanCousins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h,6,['Test'],['TestStatSampler']
Testability,"/// Returns the current value of the counter or error if it cannot be read.; /// FunctionBytes: The benchmark function being executed.; /// This is used to filter out the measurements to ensure they are only; /// within the benchmarked code.; /// If empty (or not specified), then no filtering will be done.; /// Not all counters choose to use this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:100,benchmark,benchmark,100,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,2,['benchmark'],"['benchmark', 'benchmarked']"
Testability,"/// Returns the file that the Spelled tokens are taken from.; /// Asserts that they are non-empty, from a tracked file, and in-bounds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h:66,Assert,Asserts,66,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,1,['Assert'],['Asserts']
Testability,"/// Returns the first GlobalValueSummary for \p GV, asserting that there; /// is only one if \p PerModuleIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:52,assert,asserting,52,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['assert'],['asserting']
Testability,"/// Returns the first GlobalValueSummary for \p ValueGUID, asserting that; /// there; /// is only one if \p PerModuleIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:59,assert,asserting,59,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['assert'],['asserting']
Testability,"/// Returns the instruction representing the current logical induction; /// variable. Always unsigned, always starting at 0 with an increment of one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:53,log,logical,53,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['log'],['logical']
Testability,/// Returns the key associated with this tracker.; /// This method should not be used except for debug logging: there is no; /// guarantee that the returned value will remain valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:103,log,logging,103,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['log'],['logging']
Testability,"/// Returns the list of type identifiers used by this function in; /// llvm.type.test intrinsics other than by an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:81,test,test,81,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,/// Returns the list of virtual calls made by this function using; /// llvm.assume(llvm.type.test) intrinsics that do not have all constant; /// integer arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:93,test,test,93,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,/// Returns the list of virtual calls made by this function using; /// llvm.assume(llvm.type.test) intrinsics with all constant integer; /// arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:93,test,test,93,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['test'],['test']
Testability,"/// Returns the logical parent of all top-level NTuple data fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:16,log,logical,16,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['log'],['logical']
Testability,"/// Returns the logical source range of the node extended to include associated; /// comments and whitespace before and after the node, and associated; /// terminators. The returned range consists of file locations, if valid file; /// locations can be found for the associated content; otherwise, an invalid; /// range is returned.; ///; /// Note that parsing comments is disabled by default. In order to select a; /// range containing associated comments, you may need to invoke the tool with; /// `-fparse-all-comments`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:16,log,logical,16,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['log'],['logical']
Testability,/// Returns the most reduced version of the original testcase,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:53,test,testcase,53,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,1,['test'],['testcase']
Testability,"/// Returns the result of casting `getStorageLocation(...)` to a subclass of; /// `StorageLocation` (using `cast_or_null<T>`).; /// This assert-fails if the result of `getStorageLocation(...)` is not of; /// type `T *`; if the storage location is not guaranteed to have type `T *`,; /// consider using `dyn_cast_or_null<T>(getStorageLocation(...))` instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:137,assert,assert-fails,137,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['assert'],['assert-fails']
Testability,"/// Returns the result of casting `getValue(...)` to a subclass of `Value`; /// (using `cast_or_null<T>`).; /// This assert-fails if the result of `getValue(...)` is not of type `T *`;; /// if the value is not guaranteed to have type `T *`, consider using; /// `dyn_cast_or_null<T>(getValue(...))` instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:117,assert,assert-fails,117,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['assert'],['assert-fails']
Testability,"/// Returns the size, in bytes, that preamble takes on disk or in memory.; /// For on-disk preambles returns 0 if filesystem operations fail. Intended to; /// be used for logging and debugging purposes only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:171,log,logging,171,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,1,['log'],['logging']
Testability,"/// Returns the subrange of spelled tokens corresponding to AST node spanning; /// \p Expanded. This is the text that should be replaced if a refactoring; /// were to rewrite the node. If \p Expanded is empty, the returned value is; /// std::nullopt.; ///; /// Will fail if the expanded tokens do not correspond to a sequence of; /// spelled tokens. E.g. for the following example:; ///; /// #define FIRST f1 f2 f3; /// #define SECOND s1 s2 s3; /// #define ID2(X, Y) X Y; ///; /// a FIRST b SECOND c // expanded tokens are: a f1 f2 f3 b s1 s2 s3 c; /// d ID2(e f g, h) i // expanded tokens are: d e f g h i; ///; /// the results would be:; /// expanded => spelled; /// ------------------------; /// a => a; /// s1 s2 s3 => SECOND; /// a f1 f2 f3 => a FIRST; /// a f1 => can't map; /// s1 s2 => can't map; /// e f => e f; /// g h => can't map; ///; /// EXPECTS: \p Expanded is a subrange of expandedTokens().; /// Complexity is logarithmic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h:927,log,logarithmic,927,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,1,['log'],['logarithmic']
Testability,"/// Returns the target specific optimal type for load and store operations as; /// a result of memset, memcpy, and memmove lowering.; /// It returns EVT::Other if the type should be determined using generic; /// target-independent logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:231,log,logic,231,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logic']
Testability,"/// Returns the target specific optimal type for load and store operations as; /// a result of memset, memcpy, and memmove lowering.; ///; /// If DstAlign is zero that means it's safe to destination alignment can; /// satisfy any constraint. Similarly if SrcAlign is zero it means there isn't; /// a need to check it against alignment requirement, probably because the; /// source does not need to be loaded. If 'IsMemset' is true, that means it's; /// expanding a memset. If 'ZeroMemset' is true, that means it's a memset of; /// zero. 'MemcpyStrSrc' indicates whether the memcpy source is constant so it; /// does not need to be loaded. It returns EVT::Other if the type should be; /// determined using generic target-independent logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:732,log,logic,732,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['log'],['logic']
Testability,/// Returns the value for the sub-expression `SubExpr` of a logic operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp:60,log,logic,60,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,1,['log'],['logic']
Testability,"/// Returns the value of the specified pointer type.; ///; /// If the specified pointer type is incorrect, assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:107,assert,assert,107,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,1,['assert'],['assert']
Testability,/// Returns the value stored in the 'success_' field of the passed-in; /// AssertionResult instance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:75,Assert,AssertionResult,75,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,1,['Assert'],['AssertionResult']
Testability,/// Returns the value when all bits have a known value. This just returns One; /// with a protective assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:101,assert,assertion,101,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,1,['assert'],['assertion']
Testability,/// Returns true if @p Val is a tree of AND/OR/CMP operations that can be; /// expressed as a conjunction.; /// \param CanNegate Set to true if we can negate the whole sub-tree just by; /// changing the conditions on the CMP tests.; /// (this means we can call emitConjunctionRec() with; /// Negate==true on this sub-tree); /// \param MustBeFirst Set to true if this subtree needs to be negated and we; /// cannot do the negation naturally. We are required to; /// emit the subtree first in this case.; /// \param WillNegate Is true if are called when the result of this; /// subexpression must be negated. This happens when the; /// outer expression is an OR. We can use this fact to know; /// that we have a double negation (or (or ...) ...) that; /// can be implemented for free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:225,test,tests,225,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['tests']
Testability,/// Returns true if @p Val is a tree of AND/OR/SETCC operations that can be; /// expressed as a conjunction. See \ref AArch64CCMP.; /// \param CanNegate Set to true if we can negate the whole sub-tree just by; /// changing the conditions on the SETCC tests.; /// (this means we can call emitConjunctionRec() with; /// Negate==true on this sub-tree); /// \param MustBeFirst Set to true if this subtree needs to be negated and we; /// cannot do the negation naturally. We are required to; /// emit the subtree first in this case.; /// \param WillNegate Is true if are called when the result of this; /// subexpression must be negated. This happens when the; /// outer expression is an OR. We can use this fact to know; /// that we have a double negation (or (or ...) ...) that; /// can be implemented for free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:251,test,tests,251,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tests']
Testability,"/// Returns true if \p Phi is an induction in the loop \p L. If \p Phi is an; /// induction, the induction descriptor \p D will contain the data describing; /// this induction. Since Induction Phis can only be present inside loop; /// headers, the function will assert if it is passed a Phi whose parent is; /// not the loop header. If by some other means the caller has a better SCEV; /// expression for \p Phi than the one returned by the ScalarEvolution; /// analysis, it can be passed through \p Expr. If the def-use chain; /// associated with the phi includes casts (that we know we can ignore; /// under proper runtime checks), they are passed through \p CastsToIgnore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:262,assert,assert,262,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['assert'],['assert']
Testability,"/// Returns true if any of the declarator chunks before \p endIndex include a; /// level of indirection: array, pointer, reference, or pointer-to-member.; ///; /// Because declarator chunks are stored in outer-to-inner order, testing; /// every chunk before \p endIndex is testing all chunks that embed the current; /// chunk as part of their type.; ///; /// It is legal to pass the result of Declarator::getNumTypeObjects() as the; /// end index, in which case all chunks are tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:226,test,testing,226,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,3,['test'],"['tested', 'testing']"
Testability,"/// Returns true if this LEA uses base and index registers, and the base; /// register is known to be inefficient for the subtarget.; // TODO: use a variant scheduling class to model the latency profile; // of LEA instructions, and implement this logic as a scheduling predicate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp:247,log,logic,247,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp,1,['log'],['logic']
Testability,/// Returns true if this Objective-C runtime supports Objective-C class; /// stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:77,stub,stubs,77,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,1,['stub'],['stubs']
Testability,/// Returns true if this block's content is mutable.; ///; /// This is primarily useful for asserting that a block is already in a; /// mutable state prior to modifying the content. E.g. when applying; /// fixups we expect the block to already be mutable as it should have been; /// copied to working memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:92,assert,asserting,92,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['assert'],['asserting']
Testability,/// Returns true if this function should be rewritten by this pass. The main; /// point of this function is as an extension point for custom logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:141,log,logic,141,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['log'],['logic']
Testability,/// Returns true if this function should be rewritten to include safepoint; /// polls and parseable call sites. The main point of this function is to be; /// an extension point for custom logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:188,log,logic,188,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['log'],['logic']
Testability,/// Returns true if this set contains any duplicates. This should only be used; /// in assertions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:87,assert,assertions,87,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['assert'],['assertions']
Testability,"/// Returns true when a selected code range is in a function-like body; /// of code, like a function, method or a block.; ///; /// This function can be used to test against selected expressions that are; /// located outside of a function, e.g. global variable initializers, default; /// argument values, or even template arguments.; ///; /// Use the \c getFunctionLikeNearestParent to get the function-like parent; /// declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h:160,test,test,160,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h,1,['test'],['test']
Testability,"/// Returns true when instruction \p FlagI produces the same flags as \p OI.; /// The caller should pass in the results of calling analyzeCompare on \p OI:; /// \p SrcReg, \p SrcReg2, \p ImmMask, \p ImmValue.; /// If the flags match \p OI as if it had the input operands swapped then the; /// function succeeds and sets \p IsSwapped to true.; ///; /// Examples of OI, FlagI pairs returning true:; /// CMP %1, 42 and CMP %1, 42; /// CMP %1, %2 and %3 = SUB %1, %2; /// TEST %1, %1 and %2 = SUB %1, 0; /// CMP %1, %2 and %3 = SUB %2, %1 ; IsSwapped=true",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:468,TEST,TEST,468,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['TEST'],['TEST']
Testability,"/// Rewrite the loop's terminating condition if it uses a max computation.; ///; /// This is a narrow solution to a specific, but acute, problem. For loops; /// like this:; ///; /// i = 0;; /// do {; /// p[i] = 0.0;; /// } while (++i < n);; ///; /// the trip count isn't just 'n', because 'n' might not be positive. And; /// unfortunately this can come up even for loops where the user didn't use; /// a C do-while loop. For example, seemingly well-behaved top-test loops; /// will commonly be lowered like this:; ///; /// if (n > 0) {; /// i = 0;; /// do {; /// p[i] = 0.0;; /// } while (++i < n);; /// }; ///; /// and then it's possible for subsequent optimization to obscure the if; /// test in such a way that indvars can't find it.; ///; /// When indvars can't find the if test in loops like this, it creates a; /// max expression, which allows it to give the loop a canonical; /// induction variable:; ///; /// i = 0;; /// max = n < 1 ? 1 : n;; /// do {; /// p[i] = 0.0;; /// } while (++i != max);; ///; /// Canonical induction variables are necessary because the loop passes; /// are designed around them. The most obvious example of this is the; /// LoopInfo analysis, which doesn't remember trip count values. It; /// expects to be able to rediscover the trip count each time it is; /// needed, and it does this using a simple analysis that only succeeds if; /// the loop has a canonical induction variable.; ///; /// However, when it comes time to generate code, the maximum operation; /// can be quite costly, especially if it's inside of an outer loop.; ///; /// This function solves this problem by detecting this type of loop and; /// rewriting their conditions from ICMP_NE back to ICMP_SLT, and deleting; /// the instructions for the maximum computation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:461,test,test,461,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,3,['test'],['test']
Testability,"/// RewriteRope is a ""strong"" string class, designed to make insertions and; /// deletions in the middle of the string nearly constant time (really, they are; /// O(log N), but with a very low constant factor).; ///; /// The implementation of this datastructure is a conceptual linear sequence of; /// RopePiece elements. Each RopePiece represents a view on a separately; /// allocated and reference counted string. This means that splitting a very; /// long string can be done in constant time by splitting a RopePiece that; /// references the whole string into two rope pieces that reference each half.; /// Once split, another string can be inserted in between the two halves by; /// inserting a RopePiece in between the two others. All of this is very; /// inexpensive: it takes time proportional to the number of RopePieces, not the; /// length of the strings they represent.; ///; /// While a linear sequences of RopePieces is the conceptual model, the actual; /// implementation captures them in an adapted B+ Tree. Using a B+ tree (which; /// is a tree that keeps the values in the leaves and has where each node; /// contains a reasonable number of pointers to children/values) allows us to; /// maintain efficient operation when the RewriteRope contains a *huge* number; /// of RopePieces. The basic idea of the B+ Tree is that it allows us to find; /// the RopePiece corresponding to some offset very efficiently, and it; /// automatically balances itself on insertions of RopePieces (which can happen; /// for both insertions and erases of string ranges).; ///; /// The one wrinkle on the theory is that we don't attempt to keep the tree; /// properly balanced when erases happen. Erases of string data can both insert; /// new RopePieces (e.g. when the middle of some other rope piece is deleted,; /// which results in two rope pieces, which is just like an insert) or it can; /// reduce the number of RopePieces maintained by the B+Tree. In the case when; /// the number of RopePieces is",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp:165,log,log,165,interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,1,['log'],['log']
Testability,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:215,test,test,215,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,2,['test'],"['test', 'tested']"
Testability,/// Run - Minimize the set \p Changes by executing \see ExecuteOneTest() on; /// subsets of changes and returning the smallest set which still satisfies; /// the test predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:162,test,test,162,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,1,['test'],['test']
Testability,"/// Run a fit for batch and scalar code and compare results.; /// Clone the PDFs before running the tests. This can run the test even if some internal state; /// is propagated / saved wrongly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h:100,test,tests,100,roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,2,['test'],"['test', 'tests']"
Testability,"/// Run a fixed scan.; /// \param[in] nBins Number of points to scan.; /// \param[in] xMin Lower limit of range to be scanned.; /// \param[in] xMax Upper limit of range to be scanned.; /// \param[in] scanLog Run in logarithmic steps along x.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:215,log,logarithmic,215,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['log'],['logarithmic']
Testability,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:369,test,tests,369,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,1,['test'],['tests']
Testability,/// Runs a fuzz target on the inputs specified on the command line.; ///; /// Useful for testing fuzz targets without linking to libFuzzer. Finds inputs; /// in the argument list in a libFuzzer compatible way.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h:89,test,testing,89,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,1,['test'],['testing']
Testability,"/// Runs the Delta Debugging algorithm, splits the code into chunks and; /// reduces the amount of chunks that are considered interesting by the; /// given test. The number of chunks is determined by a preliminary run of the; /// reduction pass where no change must be made to the module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:156,test,test,156,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,1,['test'],['test']
Testability,"/// Runs the interesting-ness test for the specified file; /// @returns 0 if test was successful, 1 if otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:30,test,test,30,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,2,['test'],['test']
Testability,"/// Runs the interestingness test, passes file to be tested as first argument; /// and other specified test arguments after that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp:29,test,test,29,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,3,['test'],"['test', 'tested']"
Testability,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:1054,stub,stub-container-name,1054,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,3,['stub'],['stub-container-name']
Testability,"/// SCEV structural equivalence is usually sufficient for testing whether two; /// expressions are equal, however for the purposes of looking for a condition; /// guarding a loop, it can be useful to be a little more general, since a; /// front-end may have replicated the controlling expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:58,test,testing,58,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['test'],['testing']
Testability,/// SLE follows the same logic as SGE with the LHS and RHS swapped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:25,log,logic,25,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logic']
Testability,/// S_ATTR_SELF_MODIFYING_CODE - Used with i386 code stubs written on by; /// dyld.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:53,stub,stubs,53,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['stub'],['stubs']
Testability,"/// S_SYMBOL_STUBS - Section with symbol stubs, byte size of stub in; /// the Reserved2 field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:41,stub,stubs,41,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,2,['stub'],"['stub', 'stubs']"
Testability,/// Same logic as above to remove extra pieces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:9,log,logic,9,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['log'],['logic']
Testability,"/// Sample-based profile reader.; ///; /// Each profile contains sample counts for all the functions; /// executed. Inside each function, statements are annotated with the; /// collected samples on all the instructions associated with that; /// statement.; ///; /// For this to produce meaningful data, the program needs to be; /// compiled with some debug information (at minimum, line numbers:; /// -gline-tables-only). Otherwise, it will be impossible to match IR; /// instructions to the line numbers collected by the profiler.; ///; /// From the profile file, we are interested in collecting the; /// following information:; ///; /// * A list of functions included in the profile (mangled names).; ///; /// * For each function F:; /// 1. The total number of samples collected in F.; ///; /// 2. The samples collected at each line in F. To provide some; /// protection against source code shuffling, line numbers should; /// be relative to the start of the function.; ///; /// The reader supports two file formats: text and binary. The text format; /// is useful for debugging and testing, while the binary format is more; /// compact and I/O efficient. They can both be used interchangeably.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:1085,test,testing,1085,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['test'],['testing']
Testability,"/// Scans all tokens in input without outputting anything. This is used; /// for benchmarking the tokenizer.; /// \returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:81,benchmark,benchmarking,81,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,1,['benchmark'],['benchmarking']
Testability,"/// See if we can compute the specified value, but shifted logically to the left; /// or right by some number of bits. This should return true if the expression; /// can be computed for the same cost as the current expression tree. This is; /// used to eliminate extraneous shifting from things like:; /// %C = shl i128 %A, 64; /// %D = shl i128 %B, 96; /// %E = or i128 %C, %D; /// %F = lshr i128 %E, 64; /// where the client will ask if E can be computed shifted right by 64-bits. If; /// this succeeds, getShiftedValue() will be called to produce the value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:59,log,logically,59,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['log'],['logically']
Testability,"/// SelectShiftedRegister - Select a ""shifted register"" operand. If the value; /// is not shifted, set the Shift operand to default of ""LSL 0"". The logical; /// instructions allow the shifted register to be rotated, but the arithmetic; /// instructions do not. The AllowROR parameter specifies whether ROR is; /// supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:148,log,logical,148,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"/// Send interprocessor user interrupt. Can be executed only if; /// CR4.UINT = IA32_UINT_TT[0] = 1, the logical processor is in 64-bit mode,; /// and software is not executing inside an enclave; otherwise, it causes an; /// invalid-opcode exception. May be executed at any privilege level, all of; /// its memory accesses are performed with supervisor privilege.; ///; /// \headerfile <x86gprintrin.h>; ///; /// This intrinsic corresponds to the <c> SENDUIPI </c> instruction; ///; /// \param __a; /// Index of user-interrupt target table entry in user-interrupt target; /// table.; ///; /// \code{.operation}; /// IF __a > UITTSZ; /// GP (0); /// FI; /// tempUITTE := MEM[UITTADDR + (a<<4)]; /// // tempUITTE must be valid, and can't have any reserved bit set; /// IF (tempUITTE.V == 0 OR tempUITTE[7:1] != 0); /// GP (0); /// FI; /// tempUPID := MEM[tempUITTE.UPIDADDR] // under lock; /// // tempUPID can't have any reserved bit set; /// IF (tempUPID[15:2] != 0 OR tempUPID[31:24] != 0); /// GP (0) // release lock; /// FI; /// tempUPID.PIR[tempUITTE.UV] := 1;; /// IF (tempUPID.SN == 0 AND tempUPID.ON == 0); /// tempUPID.ON := 1; /// sendNotify := 1; /// ELSE; /// sendNotify := 0; /// FI; /// MEM[tempUITTE.UPIDADDR] := tempUPID // release lock; /// IF sendNotify == 1; /// IF IA32_APIC_BASE[10] == 1 // local APIC is in x2APIC mode; /// // send ordinary IPI with vector tempUPID.NV to 32-bit physical APIC; /// // ID tempUPID.NDST; /// SendOrdinaryIPI(tempUPID.NV, tempUPID.NDST); /// ELSE; /// // send ordinary IPI with vector tempUPID.NV to 8-bit physical APIC; /// // ID tempUPID.NDST[15:8]; /// SendOrdinaryIPI(tempUPID.NV, tempUPID.NDST[15:8]); /// FI; /// FI; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h:105,log,logical,105,interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,1,['log'],['logical']
Testability,"/// Set CC_LOG_DIAGNOSTICS mode, which causes the frontend to log diagnostics; /// to CCLogDiagnosticsFilename or to stderr, in a stable machine readable; /// format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:62,log,log,62,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['log']
Testability,"/// Set CC_PRINT_OPTIONS mode, which is like -v but logs the commands to; /// CCPrintOptionsFilename or to stderr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:52,log,logs,52,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['logs']
Testability,"/// Set constraint term for given systematic to LogNormal distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx:48,Log,LogNormal,48,roofit/histfactory/src/Measurement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx,1,['Log'],['LogNormal']
Testability,/// Set the NotifyStubEmitted callback. This is used for debugging; /// purposes. A callback is made for each stub that is generated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:110,stub,stub,110,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,1,['stub'],['stub']
Testability,"/// Set the TestStatistic (want the argument to be a function of the data & parameter points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:12,Test,TestStatistic,12,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,3,['Test'],['TestStatistic']
Testability,"/// Set the bits at \p Indices. Used for testing, primarily.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:41,test,testing,41,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,1,['test'],['testing']
Testability,"/// Set the default level for computing the parameter errors.; /// For example for 1-sigma parameter errors; /// - up = 1 for a chi-squared function; /// - up = 0.5 for a negative log-likelihood function; ///; /// The value will be used also by Minos when computing the confidence interval",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h:180,log,log-likelihood,180,math/mathcore/inc/Math/MinimizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h,1,['log'],['log-likelihood']
Testability,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:822,stub,stubs,822,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,3,['stub'],['stubs']
Testability,/// Set the location of the ... in a case statement of the form LHS ... RHS.; /// Assert that this case statement is of this form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:82,Assert,Assert,82,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['Assert'],['Assert']
Testability,"/// Set the name of the current thread. Setting a thread's name can; /// be helpful for enabling useful diagnostics under a debugger or when; /// logging. The level of support for setting a thread's name varies; /// wildly across operating systems, and we only make a best effort to; /// perform the operation on supported platforms. No indication of success; /// or failure is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:146,log,logging,146,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,1,['log'],['logging']
Testability,/// Set to true to force a DIE to emit an abbreviation that says it has; /// children even when it doesn't. This is used for unit testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:130,test,testing,130,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['test'],['testing']
Testability,"/// Set up a simple workspace for later tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:40,test,tests,40,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['test'],['tests']
Testability,"/// Set up to perform a fixed scan.; /// \param[in] nBins Number of points to scan.; /// \param[in] xMin Lower limit of range to be scanned.; /// \param[in] xMax Upper limit of range to be scanned.; /// \param[in] scanLog Run in logarithmic steps along x.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:229,log,logarithmic,229,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['log'],['logarithmic']
Testability,"/// Set using of logarithm of PDF (only for 1D continuous case)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranSampler.h:17,log,logarithm,17,math/unuran/inc/TUnuranSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranSampler.h,1,['log'],['logarithm']
Testability,/// Sets the current log stream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:21,log,log,21,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,1,['log'],['log']
Testability,"/// Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:107,test,tests,107,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,/// Sets the typed value in the provided `Packed` value.; /// The method will asserts if the provided value is too big to fit in.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:78,assert,asserts,78,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,1,['assert'],['asserts']
Testability,"/// Sets the user input distribution as a cumulative distribution function for 1-sample tests.; /// The CDF must return zero for x=xmin and 1 for x=xmax.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:88,test,tests,88,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Sets the user input distribution as a probability density function for 1-sample tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:84,test,tests,84,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Sets the user input distribution function for 1-sample test as a generic functor object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:59,test,test,59,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,"/// Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:59,test,test,59,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,"/// Sets the user interrupt flag (UIF). Its effect takes place immediately; a; /// user interrupt may be delivered on the instruction boundary following; /// STUI. Can be executed only if CR4.UINT = 1, the logical processor is in; /// 64-bit mode, and software is not executing inside an enclave; otherwise,; /// each causes an invalid-opcode exception. Causes a transactional abort if; /// executed inside a transactional region; the abort loads EAX as it would; /// had it been due to an execution of STI.; ///; /// \headerfile <x86gprintrin.h>; ///; /// This intrinsic corresponds to the <c> STUI </c> instruction.; ///; /// \code{.operation}; /// UIF := 1; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h:206,log,logical,206,interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,1,['log'],['logical']
Testability,"/// Should we consider visibility associated with the template; /// arguments and parameters of the given variable template; /// specialization? As usual, follow class template specialization; /// logic up to initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:197,log,logic,197,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['log'],['logic']
Testability,/// ShouldLogText should be false for trivial loggers that ignore logText().; /// This allows log() to skip evaluating its Emit function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:46,log,loggers,46,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,3,['log'],"['log', 'logText', 'loggers']"
Testability,"/// Similar to \c O2 but tries to optimize for small code size instead of; /// fast execution without triggering significant incremental execution; /// time slowdowns.; ///; /// The logic here is exactly the same as \c O2, but with code size and; /// execution time metrics swapped.; ///; /// A consequence of the different core goal is that this should in general; /// produce substantially smaller executables that still run in; /// a reasonable amount of time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h:182,log,logic,182,interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/OptimizationLevel.h,1,['log'],['logic']
Testability,/// Size - section size. Doesn't include the stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:45,stub,stubs,45,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,1,['stub'],['stubs']
Testability,"/// Soft assert function that interrupts macro execution but doesn't kill ROOT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorHandler.h:9,assert,assert,9,roofit/roofitcore/inc/RooErrorHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorHandler.h,1,['assert'],['assert']
Testability,"/// SparseBitVector is an implementation of a bitvector that is sparse by only; /// storing the elements that have non-zero bits set. In order to make this; /// fast for the most common cases, SparseBitVector is implemented as a linked; /// list of SparseBitVectorElements. We maintain a pointer to the last; /// SparseBitVectorElement accessed (in the form of a list iterator), in order; /// to make multiple in-order test/set constant time after the first one is; /// executed. Note that using vectors to store SparseBitVectorElement's does; /// not work out very well because it causes insertion in the middle to take; /// enormous amounts of time with a large amount of bits. Other structures that; /// have better worst cases for insertion in the middle (various balanced trees,; /// etc) do not perform as well in practice as a linked list with this iterator; /// kept up to date. They are also significantly more memory intensive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:419,test,test,419,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,1,['test'],['test']
Testability,"/// Special DenseMapInfo traits to compare MachineInstr* by *value* of the; /// instruction rather than by pointer value.; /// The hashing and equality testing functions ignore definitions so this is; /// useful for CSE, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:152,test,testing,152,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['test'],['testing']
Testability,"/// Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:105,test,tests,105,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,"/// Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:101,test,tests,101,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,/// Specifies a virtual source file to be parsed as part of a test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:62,test,test,62,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,1,['test'],['test']
Testability,"/// Specify a regular expression for files being formatted; /// that are allowed to be considered ""main"" in the; /// file-to-main-include mapping.; ///; /// By default, clang-format considers files as ""main"" only when they end; /// with: ``.c``, ``.cc``, ``.cpp``, ``.c++``, ``.cxx``, ``.m`` or ``.mm``; /// extensions.; /// For these files a guessing of ""main"" include takes place; /// (to assign category 0, see above). This config option allows for; /// additional suffixes and extensions for files to be considered as ""main"".; ///; /// For example, if this option is configured to ``(Impl\.hpp)$``,; /// then a file ``ClassImpl.hpp`` is considered ""main"" (in addition to; /// ``Class.c``, ``Class.cc``, ``Class.cpp`` and so on) and ""main; /// include file"" logic will be executed (with *IncludeIsMainRegex* setting; /// also being respected in later phase). Without this option set,; /// ``ClassImpl.hpp`` would not have the main include file put on top; /// before any other include.; /// \version 10",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h:761,log,logic,761,interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,1,['log'],['logic']
Testability,"/// Splits a block that contains a CR-logical operation that feeds a branch; /// and whose operands are produced within the block.; /// Example:; /// %vr5<def> = CMPDI %vr2, 0; CRRC:%vr5 G8RC:%vr2; /// %vr6<def> = COPY %vr5:sub_eq; CRBITRC:%vr6 CRRC:%vr5; /// %vr7<def> = CMPDI %vr3, 0; CRRC:%vr7 G8RC:%vr3; /// %vr8<def> = COPY %vr7:sub_eq; CRBITRC:%vr8 CRRC:%vr7; /// %vr9<def> = CROR %vr6<kill>, %vr8<kill>; CRBITRC:%vr9,%vr6,%vr8; /// BC %vr9<kill>, <BB#2>; CRBITRC:%vr9; /// Becomes:; /// %vr5<def> = CMPDI %vr2, 0; CRRC:%vr5 G8RC:%vr2; /// %vr6<def> = COPY %vr5:sub_eq; CRBITRC:%vr6 CRRC:%vr5; /// BC %vr6<kill>, <BB#2>; CRBITRC:%vr6; ///; /// %vr7<def> = CMPDI %vr3, 0; CRRC:%vr7 G8RC:%vr3; /// %vr8<def> = COPY %vr7:sub_eq; CRBITRC:%vr8 CRRC:%vr7; /// BC %vr9<kill>, <BB#2>; CRBITRC:%vr9",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:38,log,logical,38,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,1,['log'],['logical']
Testability,/// Stack to track the Logical Operator recursion nest for MC/DC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,Log,Logical,23,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['Log'],['Logical']
Testability,"/// Stage the current cluster and create a new one for the following data.; /// Returns the object that must be passed to CommitStagedClusters to logically append the staged cluster to the; /// ntuple descriptor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:146,log,logically,146,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['log'],['logically']
Testability,"/// Starting with the base test vector, build a comprehensive list of; /// possible test vectors by recursively walking the branch condition IDs; /// provided. Once an end node is reached, record the test vector in a vector; /// of test vectors that can be matched against during MC/DC analysis, and; /// then reset the positions to 'DontCare'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,4,['test'],['test']
Testability,"/// Store a vector of values using a specific number of bits for each; /// value. Both signed and unsigned types can be used, e.g; /// @code; /// PackedVector<signed, 2> vec;; /// @endcode; /// will create a vector accepting values -2, -1, 0, 1. Any other value will hit; /// an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PackedVector.h:279,assert,assertion,279,interpreter/llvm-project/llvm/include/llvm/ADT/PackedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PackedVector.h,1,['assert'],['assertion']
Testability,/// Stores the parsed -selection=test:<filename> option.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:33,test,test,33,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['test'],['test']
Testability,/// Streamer for LLVM remarks which has logic for dealing with DiagnosticInfo; /// objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h:40,log,logic,40,interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMRemarkStreamer.h,1,['log'],['logic']
Testability,/// Strip parentheses and simplistic logical-NOT operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:37,log,logical-NOT,37,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['log'],['logical-NOT']
Testability,/// Strips target platform information from the text stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:53,stub,stub,53,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,1,['stub'],['stub']
Testability,"/// Struct to store and manipulate GCC versions.; ///; /// We rely on assumptions about the form and structure of GCC version; /// numbers: they consist of at most three '.'-separated components, and each; /// component is a non-negative integer except for the last component. For; /// the last component we are very flexible in order to tolerate release; /// candidates or 'x' wildcards.; ///; /// Note that the ordering established among GCCVersions is based on the; /// preferred version string to use. For example we prefer versions without; /// a hard-coded patch number to those with a hard coded patch number.; ///; /// Currently this doesn't provide any logic for textual suffixes to patches; /// in the way that (for example) Debian's version format does. If that ever; /// becomes necessary, it can be added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h:662,log,logic,662,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,1,['log'],['logic']
Testability,/// StubOffset - used for architectures with stub functions for far; /// relocations (like ARM).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:4,Stub,StubOffset,4,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,2,"['Stub', 'stub']","['StubOffset', 'stub']"
Testability,/// Stubs builder emits non-position-independent Arm stubs for pre-v7 CPUs.; /// These architectures have no MovT/MovW instructions and don't support Thumb2.; /// BL is the only Thumb instruction that can generate stubs and they can always; /// be transformed into BLX.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:4,Stub,Stubs,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,3,"['Stub', 'stub']","['Stubs', 'stubs']"
Testability,/// Stubs builder for v7 emits non-position-independent Arm and Thumb stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:4,Stub,Stubs,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,2,"['Stub', 'stub']","['Stubs', 'stubs']"
Testability,"/// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:114,Test,Test,114,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,1,['Test'],['Test']
Testability,/// SupportsTailCall - True if the OS supports tail call. The dynamic linker; /// must be able to synthesize call stubs for interworking between ARM and; /// Thumb.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h:114,stub,stubs,114,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,1,['stub'],['stubs']
Testability,"/// Symbolize and annotate disassembled instructions.; ///; /// For now this mimics the old symbolization logic (from both ARM and x86), that; /// relied on user-provided (C API) callbacks to do the actual symbol lookup in; /// the object file. This was moved to MCExternalSymbolizer.; /// A better API would not rely on actually calling the two methods here from; /// inside each disassembler, but would use the instr info to determine what; /// operands are actually symbolizable, and in what way. I don't think this; /// information exists right now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h:106,log,logic,106,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,1,['log'],['logic']
Testability,"/// Syntactically checks whether the callee is a deallocating function. Since; /// we have no path-sensitive information on this call (we would need a; /// CallEvent instead of a CallExpr for that), its possible that a; /// deallocation function was called indirectly through a function pointer,; /// but we are not able to tell, so this is a best effort analysis.; /// See namespace `memory_passed_to_fn_call_free_through_fn_ptr` in; /// clang/test/Analysis/NewDeleteLeaks.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:445,test,test,445,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['test'],['test']
Testability,/// TODO: A large part of this logic is duplicated in InstCombine's; /// foldICmpBinOp(). We should be able to share that and avoid the code; /// duplication.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:31,log,logic,31,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logic']
Testability,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:262,test,testing,262,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,4,"['Test', 'log', 'test']","['Testing', 'logging', 'testing']"
Testability,"/// Take the specified pass list and create different combinations of passes; /// to compile the program with. Compile the program with each set and mark; /// test to see if it compiled correctly. If the passes compiled correctly; /// output nothing and rearrange the passes into a new order. If the passes; /// did not compile correctly, output the command required to recreate the; /// failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:159,test,test,159,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['test'],['test']
Testability,/// Tells the code generator not to expand logic operations on comparison; /// predicates into separate sequences that increase the amount of flow; /// control.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:43,log,logic,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logic']
Testability,"/// Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing `double operator()(double x)`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:39,test,tests,39,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['tests']
Testability,/// Temporary flag to test critical edge unsplitting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['test'],['test']
Testability,/// Temporary flag to test global copy optimization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['test'],['test']
Testability,"/// Test a \p Predicate on a \p Range of VF's. Return the value of applying; /// \p Predicate on Range.Start, possibly decreasing Range.End such that the; /// returned value holds for the entire \p Range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,1,['Test'],['Test']
Testability,"/// Test based on the rf201 tutorial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:4,Test,Test,4,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,"/// Test based on the rf301 tutorial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:4,Test,Test,4,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,"/// Test based on the rf604 tutorial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:4,Test,Test,4,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,"/// Test batch against scalar code for fixed values of observable with normalisation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h:4,Test,Test,4,roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,1,['Test'],['Test']
Testability,"/// Test batch against scalar code for fixed values of observable. Compute log probabilities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h:4,Test,Test,4,roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,2,"['Test', 'log']","['Test', 'log']"
Testability,"/// Test batch against scalar code for fixed values of observable. Don't run normalisation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h:4,Test,Test,4,roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,1,['Test'],['Test']
Testability,"/// Test binned fit with a lot of bins. Because of ROOT-3874, it unfortunately; /// has a biased sigma parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGaussBinned.cxx:4,Test,Test,4,roofit/roofit/test/vectorisedPDFs/testGaussBinned.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGaussBinned.cxx,1,['Test'],['Test']
Testability,"/// Test changing queueType after a Queue has already been built; this should not be allowed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx:4,Test,Test,4,roofit/multiprocess/test/test_Queue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx,1,['Test'],['Test']
Testability,/// Test coefficient B of two Polynomials are equal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['Test'],['Test']
Testability,"/// Test compilation failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/testTypedIteration.cxx:4,Test,Test,4,core/cont/test/testTypedIteration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/testTypedIteration.cxx,1,['Test'],['Test']
Testability,/// Test for a particular builtin type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Test']
Testability,/// Test for a placeholder type other than Overload; see; /// BuiltinType::isNonOverloadPlaceholderType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Test']
Testability,/// Test for a specific placeholder type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Test']
Testability,/// Test for a type which does not represent an actual type-system type but; /// is instead used as a placeholder for various convenient purposes within; /// Clang. All such types are BuiltinTypes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Test']
Testability,/// Test for zero or minus instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['Test'],['Test']
Testability,"/// Test if A and B will obviously have the same value.; ///; /// This includes recognizing that %t0 and %t1 will have the same; /// value in code like this:; /// \code; /// %t0 = getelementptr \@a, 0, 3; /// store i32 0, i32* %t0; /// %t1 = getelementptr \@a, 0, 3; /// %t2 = load i32* %t1; /// \endcode; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['Test'],['Test']
Testability,"/// Test if MI jumps to a function via a register.; ///; /// Also, return the virtual register containing the target function's address; /// and the underlying object in Reg and Val respectively, if the function's; /// address can be resolved lazily.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp,1,['Test'],['Test']
Testability,/// Test if V is always a pointer to allocated and suitably aligned memory for; /// a simple load or store.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['Test'],['Test']
Testability,"/// Test if \p LI is live across any register mask instructions, and; /// compute a bit mask of physical registers that are not clobbered by any; /// of them.; ///; /// Returns false if \p LI doesn't cross any register mask instructions. In; /// that case, the bit vector is not filled in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,1,['Test'],['Test']
Testability,"/// Test if `val` has a float packed into its mantissa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/res/RooNaNPacker.h:4,Test,Test,4,roofit/batchcompute/res/RooNaNPacker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/res/RooNaNPacker.h,1,['Test'],['Test']
Testability,/// Test if a (constant) integer Int can be casted to another integer type; /// IntTy without losing precision.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:4,Test,Test,4,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Test'],['Test']
Testability,/// Test if a (constant) integer Int can be casted to floating point type; /// FloatTy without losing precision.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:4,Test,Test,4,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Test'],['Test']
Testability,/// Test if a DataLayout if compatible with the CodeGen for this target.; ///; /// The LLVM Module owns a DataLayout that is used for the target independent; /// optimizations and code generation. This hook provides a target specific; /// check on the validity of this DataLayout.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,1,['Test'],['Test']
Testability,/// Test if a floating-point exception was raised.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['Test'],['Test']
Testability,"/// Test if a pair of compares with a shared operand and 2 constants has an; /// empty set intersection, full set union, or if one compare is a superset of; /// the other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['Test'],['Test']
Testability,/// Test if an edge is hot relative to other out-edges of the Src.; ///; /// Check whether this edge out of the source block is 'hot'. We define hot; /// as having a relative probability >= 80%.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,1,['Test'],['Test']
Testability,/// Test if any common bits are set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,2,['Test'],['Test']
Testability,/// Test if given that the input instruction is in the tail call position if the; /// return type or any attributes of the function will inhibit tail call; /// optimization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h,1,['Test'],['Test']
Testability,"/// Test if given that the input instruction is in the tail call position, if; /// there is an attribute mismatch between the caller and the callee that will; /// inhibit tail call optimizations.; /// \p AllowDifferingSizes is an output parameter which, if forming a tail call; /// is permitted, determines whether it's permitted only if the size of the; /// caller's and callee's return types match exactly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h,1,['Test'],['Test']
Testability,/// Test if it's legal to apply nofpclass for the given parameter type and it's; /// lowered IR type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:4,Test,Test,4,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['Test'],['Test']
Testability,"/// Test if point is inside a box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Test,Test,4,math/mathcore/src/CDT/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h,1,['Test'],['Test']
Testability,"/// Test if point lies in a circumscribed circle of a triangle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Test,Test,4,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['Test'],['Test']
Testability,/// Test if the DataLayout was constructed from an empty string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['Test'],['Test']
Testability,/// Test if the VectorInfo can be part of an interleaved load with the; /// specified factor.; ///; /// \param Factor of the interleave; /// \param DL Targets Datalayout; ///; /// \returns true if this is possible and false if not,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['Test'],['Test']
Testability,"/// Test if the condition described by Pred, LHS, RHS is known to be true on; /// every iteration of the loop of the recurrency LHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test if the current SCC has a cycle.; ///; /// If the SCC has more than one node, this is trivially true. If not, it may; /// still contain a cycle if the node has an edge back to itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,1,['Test'],['Test']
Testability,"/// Test if the given EVT has zero size, this will fail if called on a; /// scalable type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['Test'],['Test']
Testability,/// Test if the given EVT is extended (as opposed to being simple).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['Test'],['Test']
Testability,/// Test if the given EVT is simple (as opposed to being extended).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['Test'],['Test']
Testability,/// Test if the given class is a kind of user.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given class is objc_autorelease or equivalent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given class is objc_retain or equivalent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,"/// Test if the given class represents instructions which are always safe; /// to mark with the ""tail"" keyword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given class represents instructions which are always safe; /// to mark with the nounwind attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,"/// Test if the given class represents instructions which are never safe; /// to mark with the ""tail"" keyword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given class represents instructions which do nothing if; /// passed a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given class represents instructions which do nothing if; /// passed a null pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given class represents instructions which return their; /// argument verbatim.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['Test'],['Test']
Testability,/// Test if the given expression is known to be negative.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test if the given expression is known to be non-negative.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test if the given expression is known to be non-positive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test if the given expression is known to be non-zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test if the given expression is known to be positive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test if the given expression is known to satisfy the condition described; /// by Pred and the known constant ranges of LHS and RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test if the given expression is known to satisfy the condition described; /// by Pred, LHS, and RHS in the given Context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test if the given expression is known to satisfy the condition described; /// by Pred, LHS, and RHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test if the given instruction is in a position to be optimized; /// with a tail-call. This roughly means that it's in a block with; /// a return and there's nothing that needs to be scheduled; /// between it and the return.; ///; /// This function only tests target-independent requirements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Analysis.h,4,"['Test', 'test']","['Test', 'tests']"
Testability,/// Test if the given instruction should be considered a scheduling boundary.; /// This primarily includes labels and terminators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,2,['Test'],['Test']
Testability,/// Test if the given module looks interesting to run ARC optimization; /// on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,1,['Test'],['Test']
Testability,/// Test if the given register is a physical h register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['Test'],['Test']
Testability,"/// Test if the given register value, which is used by the given; /// instruction, is killed by the given instruction. This looks through; /// coalescable copies to see if the original value is potentially not killed.; ///; /// For example, in this code:; ///; /// %reg1034 = copy %reg1024; /// %reg1035 = copy killed %reg1025; /// %reg1036 = add killed %reg1034, killed %reg1035; ///; /// %reg1034 is not considered to be killed, since it is copied from a; /// register which is not killed. Treating it as not killed lets the; /// normal heuristics commute the (two-address) add, which lets; /// coalescing eliminate the extra copy.; ///; /// If allowFalsePositives is true then likely kills are treated as kills even; /// if it can't be proven that they are kills.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['Test'],['Test']
Testability,"/// Test if the given register value, which is used by the; /// given instruction, is killed by the given instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['Test'],['Test']
Testability,/// Test if the given value is known to have exactly one bit set. This differs; /// from computeKnownBits in that it doesn't necessarily determine which bit is; /// set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,1,['Test'],['Test']
Testability,/// Test if the given value is known to have exactly one bit set. This differs; /// from computeKnownBits in that it doesn't necessarily determine which bit; /// is set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,"/// Test if the pointer held in the union is null, regardless of; /// which type it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,1,['Test'],['Test']
Testability,/// Test if the range doesn't contain zero.; ///; /// Complexity: O(logN); /// where N = size(this),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,2,"['Test', 'log']","['Test', 'logN']"
Testability,"/// Test if the range is the [0,0] range.; ///; /// Complexity: O(1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,1,['Test'],['Test']
Testability,/// Test if the register used by the given operand is killed by the operand's; /// instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['Test'],['Test']
Testability,"/// Test if the value of P, or any value covered by its provenance, is ever; /// stored within the function (not counting callees).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ProvenanceAnalysis.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ProvenanceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ProvenanceAnalysis.cpp,1,['Test'],['Test']
Testability,/// Test if there can be dependencies on Inst through Arg. This function only; /// tests dependencies relevant for removing pairs of calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,2,"['Test', 'test']","['Test', 'tests']"
Testability,/// Test if there is a coefficient B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['Test'],['Test']
Testability,"/// Test if there is a dominating equivalence condition for the; /// two operands. If there is, try to reduce the binary operation; /// between the two operands.; /// Example: Op0 - Op1 --> 0 when Op0 == Op1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['Test'],['Test']
Testability,"/// Test if this RefSCC is a child of \a RC.; ///; /// CAUTION: This method walks every edge in the argument \c RefSCC, it can; /// be very expensive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this RefSCC is a descendant of \a RC.; ///; /// CAUTION: This method walks the directed graph of edges as far as; /// necessary to find a possible path from the argument. In the worst case; /// this may walk the entire graph and can be extremely expensive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,"/// Test if this RefSCC is a parent of \a RC.; ///; /// CAUTION: This method walks every edge in the \c RefSCC, it can be very; /// expensive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this RefSCC is an ancestor of \a RC.; ///; /// CAUTION: This method walks the directed graph of edges as far as; /// necessary to find a possible path to the argument. In the worst case; /// this may walk the entire graph and can be extremely expensive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this SCC is a child of \a C.; ///; /// See the comments for \c isParentOf for detailed notes about the; /// complexity of this routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this SCC is a descendant of \a C.; ///; /// See the comments for \c isParentOf for detailed notes about the; /// complexity of this routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this SCC is a parent of \a C.; ///; /// Note that this is linear in the number of edges departing the current; /// SCC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this SCC is an ancestor of \a C.; ///; /// Note that in the worst case this is linear in the number of edges; /// departing the current SCC and every SCC in the entire graph reachable; /// from this SCC. Thus this very well may walk every edge in the entire; /// call graph! Do not call this in a tight loop!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test if this TBAANode represents a type for objects which are; /// not modified (by any means) in the context where this; /// AliasAnalysis is relevant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['Test'],['Test']
Testability,/// Test if this TBAAStructTagNode represents a type for objects; /// which are not modified (by any means) in the context where this; /// AliasAnalysis is relevant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['Test'],['Test']
Testability,"/// Test if this context is part of the enclosing namespace set of; /// the context NS, as defined in C++0x [namespace.def]p9. If either context; /// isn't a namespace, this is equivalent to Equals().; ///; /// The enclosing namespace set of a namespace is the namespace and, if it is; /// inline, its enclosing namespace, recursively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['Test'],['Test']
Testability,/// Test if this formula references the given register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Test'],['Test']
Testability,"/// Test if this node has a post-isel opcode, directly; /// corresponding to a MachineInstr opcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,/// Test if this node has a target-specific opcode (in the; /// \<target\>ISD namespace).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,/// Test if this node has a target-specific opcode that may raise; /// FP exceptions (in the \<target\>ISD namespace and greater than; /// FIRST_TARGET_STRICTFP_OPCODE). Note that all target memory; /// opcode are currently automatically considered to possibly raise; /// FP exceptions as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,/// Test if this node has a target-specific; /// memory-referencing opcode (in the \<target\>ISD namespace and; /// greater than FIRST_TARGET_MEMORY_OPCODE).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,"/// Test if this node is a memory intrinsic (with valid pointer information).; /// INTRINSIC_W_CHAIN and INTRINSIC_VOID nodes are sometimes created for; /// non-memory intrinsics (with chains) that are not really instances of; /// MemSDNode. For such nodes, we need some extra state to determine the; /// proper classof relationship.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,/// Test if this node is a strict floating point pseudo-op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,/// Test if this node is a vector predication operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Test'],['Test']
Testability,/// Test if this operation allows all non-strict floating-point transforms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation allows approximations of math library functions or; /// intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation can be floating-point contracted (FMA).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation can ignore the sign of zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation can use reciprocal multiply instead of division.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation may be simplified with reassociative transforms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation's arguments and results are assumed not-NaN.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this operation's arguments and results are assumed not-infinite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test if this option has the flag \a Val.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h,1,['Test'],['Test']
Testability,/// Test if this option has the visibility flag \a Val.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h,1,['Test'],['Test']
Testability,"/// Test if this struct has a float packed into its mantissa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/res/RooNaNPacker.h:4,Test,Test,4,roofit/batchcompute/res/RooNaNPacker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/res/RooNaNPacker.h,1,['Test'],['Test']
Testability,/// Test if this type is a standard-layout type.; /// (C++0x [basic.type]p9),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Test']
Testability,"/// Test if two retain summaries are identical. Note that merely equivalent; /// summaries are not necessarily identical (for example, if an explicit; /// argument effect matches the default effect).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['Test'],['Test']
Testability,"/// Test if two vertices share at least one common triangle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Test,Test,4,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['Test'],['Test']
Testability,/// Test if value in ArgVal equals to value in macro `ZERO_SIZE_PTR`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:4,Test,Test,4,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['Test'],['Test']
Testability,"/// Test if values of the given type are analyzable within the SCEV; /// framework. This primarily includes integer types, and it can optionally; /// include pointer types if the ScalarEvolution class has access to; /// target-specific information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test instruction for software square root.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['Test'],['Test']
Testability,/// Test iterators for equality.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,1,['Test'],['Test']
Testability,/// Test iterators for inequality.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,1,['Test'],['Test']
Testability,"/// Test of RooStats should by default offset NLL calculations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:4,Test,Test,4,roofit/roostats/src/RooStatsUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx,1,['Test'],['Test']
Testability,"/// Test proper string handling when importing an object from a workspace; /// in a different file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:4,Test,Test,4,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['Test'],['Test']
Testability,"/// Test that plotting HistFactory components works correctly. Covers the; /// problem reported in this forum post:; /// https://root-forum.cern.ch/t/problems-plotting-individual-components-with-roofit-histfactory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactoryPlotting.cxx:4,Test,Test,4,roofit/histfactory/test/testHistFactoryPlotting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactoryPlotting.cxx,1,['Test'],['Test']
Testability,"/// Test that the IO of pdfs that contain literal RooConstVars works.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:4,Test,Test,4,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['Test'],['Test']
Testability,"/// Test that the values returned are as expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:4,Test,Test,4,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,/// Test that there are no attribute conflicts between Caller and Callee; /// that prevent inlining.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['Test'],['Test']
Testability,"/// Test that things still work when hash lookup for elements; /// is performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:4,Test,Test,4,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['Test'],['Test']
Testability,"/// Test that we can correctly read a HypoTestInverterResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:4,Test,Test,4,roofit/roostats/test/testHypoTestInvResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx,1,['Test'],['Test']
Testability,"/// Test the action helpers that fill roofit datasets from RDataFrame.; ///; /// \date Mar 2021; /// \author Stephan Hageboeck (CERN)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testActionHelpers.cxx:4,Test,Test,4,roofit/roofitcore/test/testActionHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testActionHelpers.cxx,1,['Test'],['Test']
Testability,"/// Test the availability of \a length bytes of data from \a offset.; ///; /// @return; /// \b true if \a offset is a valid offset and there are \a; /// length bytes available at that offset, \b false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['Test'],['Test']
Testability,"/// Test the availability of enough bytes of data for a pointer from; /// \a offset. The size of a pointer is \a getAddressSize().; ///; /// @return; /// \b true if \a offset is a valid offset and there are enough; /// bytes for a pointer available at that offset, \b false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['Test'],['Test']
Testability,"/// Test the same, but now with RooDataHist. Here, the feature should switch on automatically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:4,Test,Test,4,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['Test'],['Test']
Testability,"/// Test the string tokeniser that does all the string splitting for the RooWorkspace; /// implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:4,Test,Test,4,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['Test'],['Test']
Testability,"/// Test the validity of \a offset.; ///; /// @return; /// \b true if \a offset is a valid offset into the data in this; /// object, \b false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['Test'],['Test']
Testability,/// Test whether Instr has operands remaining to be visited at the top of; /// the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,/// Test whether MI is a child of some other node in an expression tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyUtilities.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyUtilities.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyUtilities.cpp,1,['Test'],['Test']
Testability,"/// Test whether OneUse, a use of Reg, dominates all of Reg's other uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,"/// Test whether Pred has any terminators explicitly branching to MBB, as; /// opposed to falling through. Note that it's possible (eg. in unoptimized; /// code) for a branch instruction to both branch to a block and fallthrough; /// to it, so we check the actual branch operands to see if there are any; /// explicit mentions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,1,['Test'],['Test']
Testability,"/// Test whether \p CurrentExitFromRegion contains any PhiNodes that should be; /// considered outputs. A PHINodes is an output when more than one incoming; /// value has been marked by the CodeExtractor as an output.; ///; /// \param CurrentExitFromRegion [in] - The block to analyze.; /// \param PotentialExitsFromRegion [in] - The potential exit blocks from the; /// region.; /// \param RegionBlocks [in] - The basic blocks in the region.; /// \param Outputs [in, out] - The existing outputs for the region, we may add; /// PHINodes to this as we find that they replace output values.; /// \param OutputsReplacedByPHINode [out] - A set containing outputs that are; /// totally replaced by a PHINode.; /// \param OutputsWithNonPhiUses [out] - A set containing outputs that are used; /// in PHINodes, but have other uses, and should still be considered outputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['Test'],['Test']
Testability,"/// Test whether \p V has a splatted value for all the demanded elements.; ///; /// On success \p UndefElts will indicate the elements that have UNDEF; /// values instead of the splat value, this is only guaranteed to be correct; /// for \p DemandedElts.; ///; /// NOTE: The function will return true for a demanded splat of UNDEF values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether \p V has a splatted value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether a GEP's result is known to be non-null.; ///; /// Uses properties inherent in a GEP to try to determine whether it is known; /// to be non-null.; ///; /// Currently this routine does not support vector GEPs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['Test'],['Test']
Testability,/// Test whether a block is valid for extraction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['Test'],['Test']
Testability,/// Test whether a function is a known and defined library function tracked by; /// the call graph.; ///; /// Because these functions are known to LLVM they are specially modeled in; /// the call graph and even when all IR-level references have been removed; /// remain active and reachable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test whether a given ConstantInt is in-range for a SequentialType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['Test'],['Test']
Testability,"/// Test whether a given loop has been removed from the function, and thus is; /// no longer valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['Test'],['Test']
Testability,"/// Test whether a pointer to the allocation escapes our analysis.; ///; /// If this is true, the slices are never fully built and should be; /// ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Test'],['Test']
Testability,/// Test whether a shuffle mask is equivalent within each 128-bit lane.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,/// Test whether a shuffle mask is equivalent within each 256-bit lane.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,"/// Test whether a shuffle mask is equivalent within each sub-lane.; ///; /// This checks a shuffle mask to see if it is performing the same; /// lane-relative shuffle in each sub-lane. This trivially implies; /// that it is also not lane-crossing. It may however involve a blend from the; /// same lane of a second vector.; ///; /// The specific repeated shuffle mask is populated in \p RepeatedMask, as it is; /// non-trivial to compute in the face of undef lanes. The representation is; /// suitable for use with existing 128-bit shuffles as entries from the second; /// vector have been remapped to [LaneSize, 2*LaneSize).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,/// Test whether a slice of an alloca is valid for integer widening.; ///; /// This implements the necessary checking for the \c isIntegerWideningViable; /// test below on a single slice of the alloca.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,/// Test whether a target shuffle mask is equivalent within each sub-lane.; /// Unlike isRepeatedShuffleMask we must respect SM_SentinelZero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['Test'],['Test']
Testability,"/// Test whether a vector of entries features any non-empty locations. It; /// could have no entries, or only DBG_VALUE $noreg entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,1,['Test'],['Test']
Testability,/// Test whether a vector type is viable for promotion.; ///; /// This implements the necessary checking for \c checkVectorTypesForPromotion; /// (and thus isVectorPromotionViable) over all slices of the alloca for the; /// given VectorType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Test'],['Test']
Testability,/// Test whether all analyses are preserved (and none are abandoned).; ///; /// This is used primarily to optimize for the common case of a transformation; /// which makes no changes to the IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['Test'],['Test']
Testability,"/// Test whether an argument type which is to be passed indirectly (on the; /// stack) would have the equivalent layout if it was expanded into separate; /// arguments. If so, we prefer to do the latter to avoid inhibiting; /// optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Test,Test,4,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['Test'],['Test']
Testability,/// Test whether any vector type in \p CandidateTys is viable for promotion.; ///; /// This implements the necessary checking for \c isVectorPromotionViable over; /// all slices of the alloca for the given VectorType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Test'],['Test']
Testability,"/// Test whether calls to a function lower to actual program function; /// calls.; ///; /// The idea is to test whether the program is likely to require a 'call'; /// instruction or equivalent in order to call the given function.; ///; /// FIXME: It's not clear that this is a good or useful query API. Client's; /// should probably move to simpler cost metrics using the above.; /// Alternatively, we could split the cost interface into distinct code-size; /// and execution-speed costs. This would allow modelling the core of this; /// query more accurately as a call is a single small instruction, but; /// incurs significant execution cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,"['Test', 'test']","['Test', 'test']"
Testability,/// Test whether elements in each LaneSizeInBits lane in this shuffle mask come; /// from multiple lanes - this is different to isLaneCrossingShuffleMask to; /// better support 'repeated mask + lane permute' style shuffles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,/// Test whether entry to the basic block is protected by a conditional; /// between LHS and RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether entry to the loop is protected by a conditional between LHS; /// and RHS. This is used to help avoid max expressions in loop trip; /// counts, and to eliminate casts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test whether target triples are compatible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Test']
Testability,/// Test whether the LegalityQuery matches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,1,['Test'],['Test']
Testability,"/// Test whether the architecture is 16-bit; ///; /// Note that this tests for 16-bit pointer width, and nothing else.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,2,"['Test', 'test']","['Test', 'tests']"
Testability,"/// Test whether the architecture is 32-bit; ///; /// Note that this tests for 32-bit pointer width, and nothing else.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,2,"['Test', 'test']","['Test', 'tests']"
Testability,/// Test whether the backedge of the loop is protected by a conditional; /// between LHS and RHS. This is used to eliminate casts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true.; /// Use only simple non-recursive types of checks, such as range analysis etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by FoundPred, FoundLHS, FoundRHS is; /// true in given Context. If Context is nullptr, then the found predicate is; /// true everywhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true in given Context. If Context is nullptr, then the found predicate is; /// true everywhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true. Here LHS is an operation that includes FoundLHS as one of its; /// arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true. Utility function used by isImpliedCondOperands. Tries to get; /// cases like ""X `sgt` 0 => X - 1 `sgt` -1"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to figure out predicate for Phis which are SCEVUnknown; /// if it is true for every possible incoming value from their respective; /// basic blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to reason about shifts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to rule out certain kinds of integer overflow, and; /// then tries to reason about arithmetic properties of the predicates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to weaken the known condition basing on fact that; /// FoundLHS is an AddRec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the given FoundCondValue value evaluates to true in given; /// Context. If Context is nullptr, then the found predicate is true; /// everywhere. LHS and FoundLHS may have different type width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the given FoundCondValue value evaluates to true in given; /// Context. If Context is nullptr, then the found predicate is true; /// everywhere. LHS and FoundLHS must have same type width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test whether the context supports looking up names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['Test'],['Test']
Testability,/// Test whether the edge is null.; ///; /// This happens when an edge has been deleted. We leave the edge objects; /// around but clear them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test whether the edge represents a direct call to a function.; ///; /// This requires that the edge is not null.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Test']
Testability,/// Test whether the given SCEV has Op as a direct or indirect operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether the given SDValue (or all elements of it, if it is a; /// vector) is known to never be NaN. If \p SNaN is true, returns if \p Op is; /// known to never be a signaling NaN (it may still be a qNaN).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether the given SDValue is known to contain non-zero value(s).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether the given X86ISD::CMP node has any users that use a flag; /// other than ZF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['Test'],['Test']
Testability,/// Test whether the given X86ISD::CMP node has any uses which require the SF; /// flag to be accurate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['Test'],['Test']
Testability,/// Test whether the given alloca partition's integer operations can be; /// widened to promotable ones.; ///; /// This is a quick test to check whether we can rewrite the integer loads and; /// stores to a particular alloca into wider loads and stores and be able to; /// promote the resulting alloca.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"/// Test whether the given alloca partitioning and range of slices can be; /// promoted to a vector.; ///; /// This is a quick test to check whether we can rewrite a particular alloca; /// partition (and its newly formed alloca) into a vector alloca with only; /// whole-vector loads and stores such that it could be promoted to a vector; /// SSA value. We only can ensure this for a limited set of operations, and we; /// don't want to do the rewrites unless we are confident that the result will; /// be promotable, so we have an early test here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,3,"['Test', 'test']","['Test', 'test']"
Testability,/// Test whether the given category is a visible extension.; ///; /// Used in the \c visible_extensions_iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['Test'],['Test']
Testability,/// Test whether the given category is an extension.; ///; /// Used in the \c known_extensions_iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['Test'],['Test']
Testability,/// Test whether the given category is visible.; ///; /// Used in the \c visible_categories_iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['Test'],['Test']
Testability,/// Test whether the given category... is a category.; ///; /// Used in the \c known_categories_iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['Test'],['Test']
Testability,/// Test whether the given floating point SDValue is known to never be; /// positive or negative zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,"/// Test whether the given instruction can ""use"" the given pointer's object in a; /// way that requires the reference count to be positive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,2,['Test'],['Test']
Testability,/// Test whether the given instruction can autorelease any pointer or cause an; /// autoreleasepool pop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,1,['Test'],['Test']
Testability,/// Test whether the given instruction can autorelease any pointer or cause an; /// autoreleasepool pop.; ///; /// This means that it *could* interrupt the RV optimization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ObjCARCInstKind.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Analysis/ObjCARCInstKind.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ObjCARCInstKind.cpp,1,['Test'],['Test']
Testability,/// Test whether the given instruction can result in a reference count; /// modification (positive or negative) for the pointer's object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,2,['Test'],['Test']
Testability,/// Test whether the given node which sets flags has any uses which require the; /// CF flag to be accurate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['Test'],['Test']
Testability,/// Test whether the given point is contained by any of the ranges.; ///; /// Complexity: O(logN); /// where N = size(this),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,2,"['Test', 'log']","['Test', 'logN']"
Testability,"/// Test whether the given register is present on the stack, indicating an; /// operand in the tree that we haven't visited yet. Moving a definition of; /// Reg to a point in the tree after that would change its value.; ///; /// This is needed as a consequence of using implicit local.gets for; /// uses and implicit local.sets for defs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,"/// Test whether the given sequence of *normalized* indices is ""inbounds"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['Test'],['Test']
Testability,/// Test whether the given slice use can be promoted to a vector.; ///; /// This function is called to test each entry in a partition which is slated; /// for a single slice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,/// Test whether the given two constants can be allocated the same constant pool; /// entry referenced by \param A.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,1,['Test'],['Test']
Testability,/// Test whether the given value is a constant FP or similar node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether the given value is a constant int or similar node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether the given value is possible a retainable object pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,1,['Test'],['Test']
Testability,/// Test whether the inline cost is low enough for inlining.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['Test'],['Test']
Testability,/// Test whether the memory pointed to by this PseudoSourceValue has a; /// constant value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,1,['Test'],['Test']
Testability,/// Test whether the memory pointed to by this PseudoSourceValue may also be; /// pointed to by an LLVM IR Value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,1,['Test'],['Test']
Testability,/// Test whether the specified input (0 or 1) is in-place blended by the; /// given mask.; ///; /// This returns true if the elements from a particular input are already in the; /// slot required by the given mask and require no permutation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,/// Test whether the two functions have equivalent behaviour.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,1,['Test'],['Test']
Testability,/// Test whether there are elements crossing 128-bit lanes in this; /// shuffle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,/// Test whether there are elements crossing LaneSizeInBits lanes in this; /// shuffle mask.; ///; /// X86 divides up its shuffles into in-lane and cross-lane shuffle operations; /// and we routinely test for these.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,/// Test whether there is a distinct FoundDecl attached to the end of; /// this DRE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['Test'],['Test']
Testability,/// Test whether there is an edge that goes from this node to \p N.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,1,['Test'],['Test']
Testability,"/// Test whether this BackedgeTakenInfo contains any computed information,; /// or whether it's all SCEVCouldNotCompute values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test whether this BackedgeTakenInfo contains complete information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test whether this ExitLimit contains all information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,"/// Test whether this ExitLimit contains any computed information, or; /// whether it's all SCEVCouldNotCompute values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Test'],['Test']
Testability,/// Test whether this block is the target of an IR BlockAddress. (There can; /// more than one MBB associated with an IR BB where the address is taken.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['Test'],['Test']
Testability,"/// Test whether this block is used as something other than the target of a; /// terminator, exception-handling target, jump table, or IR blockaddress.; /// For example, its address might be loaded into a register, or; /// stored in some branch table that isn't part of MachineJumpTableInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['Test'],['Test']
Testability,"/// Test whether this block is used as something other than the target; /// of a terminator, exception-handling target, or jump table. This is; /// either the result of an IR-level ""blockaddress"", or some form; /// of target-specific branch lowering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['Test'],['Test']
Testability,/// Test whether this block must have its label emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['Test'],['Test']
Testability,/// Test whether this can be lowered with a single SHUFPS instruction.; ///; /// This is used to disable more specialized lowerings when the shufps lowering; /// will happen to be efficient.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Test'],['Test']
Testability,"/// Test whether this code extractor is eligible.; ///; /// Based on the blocks used when constructing the code extractor,; /// determine whether it is eligible for extraction.; ///; /// Checks that varargs handling (with vastart and vaend) is only done in; /// the outlined blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,1,['Test'],['Test']
Testability,"/// Test whether this division is known to be exact, with zero remainder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,/// Test whether this fixup always uses its value outside of the given loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Test'],['Test']
Testability,/// Test whether this formula uses registers which are used by uses other than; /// the use with the given index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Test'],['Test']
Testability,"/// Test whether this is a multiple of the other value.; ///; /// Among other things, this promises that; /// self.alignTo(N) will just return self.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['Test'],['Test']
Testability,"/// Test whether this is an inbounds GEP, as defined by LangRef.html.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,"/// Test whether this operation is known to never; /// undergo signed overflow, aka the nsw property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,"/// Test whether this operation is known to never; /// undergo unsigned overflow, aka the nuw property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['Test'],['Test']
Testability,"/// Test whether this partition contains no slices, and merely spans; /// a region occupied by split slices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Test'],['Test']
Testability,/// Test whether this toolchain defaults to PIC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['Test'],['Test']
Testability,/// Test whether this toolchain defaults to PIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['Test'],['Test']
Testability,/// Test whether this toolchain supports outline atomics by default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Test,Test,4,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['Test'],['Test']
Testability,/// Test whether this use as a formula which has the same registers as the given; /// formula.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Test'],['Test']
Testability,"/// Test whether two SDValues are known to compare equal. This; /// is true if they are the same value, or if one is negative zero and the; /// other positive zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Test'],['Test']
Testability,/// Test whether two basic blocks have equivalent behaviour.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:4,Test,Test,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,1,['Test'],['Test']
Testability,"/// Test whether we can convert a value from the old to the new type.; ///; /// This predicate should be used to guard calls to convertValue in order to; /// ensure that we only try to convert viable values. The strategy is that we; /// will peel off single element struct and array wrappings to get to an; /// underlying value, and convert that value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Test'],['Test']
Testability,/// Test whether we know how to expand the current formula.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Test'],['Test']
Testability,"/// Test whether, after merging, any DBG_VALUEs would refer to a; /// different value number than before merging, and whether this can; /// be resolved. If not, mark the DBG_VALUE as being undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Test'],['Test']
Testability,"/// Test which child point belongs to after the split; /// @returns 0 if first child, 1 if second child",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Test,Test,4,math/mathcore/src/CDT/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h,1,['Test'],['Test']
Testability,"/// Test with the reproducer from GitHub issue #10988 that reported a caching; /// issues of RooAddPdf integrals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx:4,Test,Test,4,roofit/roofitcore/test/testRooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx,1,['Test'],['Test']
Testability,/// TestPluralRange - Test if Val is in the parsed range. Modifies Start.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:4,Test,TestPluralRange,4,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,2,['Test'],"['Test', 'TestPluralRange']"
Testability,/// Testing support: invokes the selection action for each selection range in; /// the test file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:4,Test,Testing,4,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,2,"['Test', 'test']","['Testing', 'test']"
Testability,"/// Tests for TH1::SaveAs; /// In this test we export a TH1 to 4 files of types csv, tsv, txt and C,; /// and then read those files checking whether the contents are as expected; /// In the csv file, we include the header line",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH1_SaveAs.cxx:4,Test,Tests,4,hist/hist/test/test_TH1_SaveAs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH1_SaveAs.cxx,2,"['Test', 'test']","['Tests', 'test']"
Testability,/// Tests for either Cygwin or MinGW OS,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,"/// Tests if a function is a call or invoke to a library function that; /// reallocates memory (e.g., realloc).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,1,['Test'],['Tests']
Testability,"/// Tests if a functions is a call or invoke to a library function that; /// reallocates memory (e.g., realloc).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp:4,Test,Tests,4,interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp,1,['Test'],['Tests']
Testability,"/// Tests if a value is a call or invoke to a library function that; /// allocates memory (either malloc, calloc, or strdup like).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,2,['Test'],['Tests']
Testability,/// Tests if a value is a call or invoke to a library function that; /// allocates memory similar to malloc or calloc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,2,['Test'],['Tests']
Testability,/// Tests if a value is a call or invoke to a library function that; /// allocates memory via new.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,2,['Test'],['Tests']
Testability,"/// Tests if a value is a call or invoke to a library function that; /// allocates or reallocates memory (either malloc, calloc, realloc, or strdup; /// like).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryBuiltins.h,2,['Test'],['Tests']
Testability,/// Tests if node N is a predecessor of this node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,/// Tests if node N is a successor of this node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,"/// Tests if the distribution is binned. Unless overridden by derived classes, this always returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:4,Test,Tests,4,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['Test'],['Tests']
Testability,/// Tests if the environment supports dllimport/export annotations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests if the function is both available and a candidate for optimized code; /// generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h,1,['Test'],['Tests']
Testability,/// Tests if this MemDepResult represents a query that is an instruction; /// clobber dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// Tests if this MemDepResult represents a query that is an instruction; /// definition dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// Tests if this MemDepResult represents a query that is transparent to the; /// start of the block, but where a non-local hasn't been done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// Tests if this MemDepResult represents a query that is transparent to the; /// start of the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// Tests if this MemDepResult represents a query which cannot and/or will; /// not be computed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// Tests if this MemDepResult represents a valid local query (Clobber/Def).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// Tests if this a weak dependence. Weak dependencies are considered DAG; /// edges for height computation and other heuristics, but do not force; /// ordering. Breaking a weak edge may require the scheduler to compensate,; /// for example by inserting a copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,/// Tests if this call site is marked as a tail call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['Test'],['Tests']
Testability,/// Tests if this call site must be tail call optimized. Only a CallInst can; /// be tail call optimized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['Test'],['Tests']
Testability,/// Tests if this is a Data dependence that is associated with a register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,/// Tests if this is a MemDepResult in its dirty/invalid. state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,"/// Tests if this is an Order dependence that is marked as ""cluster"",; /// meaning it is artificial and wants to be adjacent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,/// Tests if this is an Order dependence that is marked as a barrier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,"/// Tests if this is an Order dependence that is marked as; /// ""artificial"", meaning it isn't necessary for correctness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,"/// Tests if this is an Order dependence that is marked as; /// ""must alias"", meaning that the SUnits at either end of the edge have a; /// memory dependence on a known memory location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,/// Tests if this is could be any kind of memory dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,/// Tests if this is not an SDep::Data dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Test'],['Tests']
Testability,"/// Tests to see if the LValue has a user-specified designator (that isn't; /// necessarily valid). Note that this always returns 'true' if the LValue has; /// an unsized array as its first designator entry, because there's currently no; /// way to tell if the user typed *foo or foo[0].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:4,Test,Tests,4,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['Test'],['Tests']
Testability,/// Tests to see if there is a mismatch in the states stored in two; /// maps.; ///; /// \param Other -- The second map to compare against.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,1,['Test'],['Tests']
Testability,"/// Tests whether Ty is an instance of std::initializer_list and, if; /// it is and Element is not NULL, assigns the element type to Element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Test'],['Tests']
Testability,/// Tests whether \p A dominates \p B.; /// Note a block always dominates itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,1,['Test'],['Tests']
Testability,/// Tests whether \p A is reachable from the entry block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,1,['Test'],['Tests']
Testability,"/// Tests whether \p A properly dominates \p B.; /// \returns false if \p A is the same block as \p B, otherwise whether A; /// dominates B.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,1,['Test'],['Tests']
Testability,/// Tests whether a conversion according to C++ 5.2.9p5 is valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['Test'],['Tests']
Testability,/// Tests whether a conversion according to C++ 5.2.9p8 is valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['Test'],['Tests']
Testability,/// Tests whether a conversion according to N2844 is valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['Test'],['Tests']
Testability,"/// Tests whether a function is ""malloc-like"".; ///; /// A function is ""malloc-like"" if it returns either null or a pointer that; /// doesn't alias any other pointer visible to the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:4,Test,Tests,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['Test'],['Tests']
Testability,/// Tests whether a given value is losslessly representable using this type.; ///; /// \param Val The value to test.; /// \param AllowMixedSign Whether or not to allow signedness conversions.; /// This determines whether -1s8 is considered in range; /// for 'unsigned char' (u8).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,2,"['Test', 'test']","['Tests', 'test']"
Testability,/// Tests whether a library function is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h,1,['Test'],['Tests']
Testability,"/// Tests whether registered callbacks will accept a given pass name.; ///; /// When parsing a pipeline text, the type of the outermost pipeline may be; /// omitted, in which case the type is automatically determined from the first; /// pass name in the text. This may be a name that is handled through one of the; /// callbacks. We check this through the oridinary parsing callbacks by setting; /// up a dummy PassManager in order to not force the client to also handle this; /// type of query.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:4,Test,Tests,4,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['Test'],['Tests']
Testability,/// Tests whether the OS is AIX.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is Emscripten.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is Haiku.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is Hurd.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is Linux.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is NaCl (Native Client),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is UEFI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is WASI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is Windows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS is kFreeBSD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses glibc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses the COFF binary format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses the DXContainer binary format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses the ELF binary format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses the GOFF binary format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses the Wasm binary format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the OS uses the XCOFF binary format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the environment is MachO.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the environment is musl-libc,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the given identifier is reserved as a module name and; /// diagnoses if it is. Returns true if a diagnostic is emitted and false; /// otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,1,['Test'],['Tests']
Testability,"/// Tests whether the given source location represents a macro; /// argument's expansion into the function-like macro definition.; ///; /// \param StartLoc If non-null and function returns true, it is set to the; /// start location of the macro argument expansion.; ///; /// Such source locations only appear inside of the expansion; /// locations representing where a particular function-like macro was; /// expanded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['Test'],['Tests']
Testability,/// Tests whether the given source location represents the expansion of; /// a macro body.; ///; /// This is equivalent to testing whether the location is part of a macro; /// expansion but not the expansion of an argument to a function-like macro.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,2,"['Test', 'test']","['Tests', 'testing']"
Testability,/// Tests whether the node has been populated with edges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Tests']
Testability,/// Tests whether the specified bits in a 128-bit integer vector are all; /// ones.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.; ///; /// \param __M; /// A 128-bit integer vector containing the bits to be tested.; /// \param __V; /// A 128-bit integer vector selecting which bits to test in operand \a __M.; /// \returns TRUE if the specified bits are all ones; FALSE otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,/// Tests whether the specified bits in a 128-bit integer vector are all; /// ones.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _mm_test_all_ones(__m128i V);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.; ///; /// \param V; /// A 128-bit integer vector containing the bits to be tested.; /// \returns TRUE if the bits specified in the operand are all set to 1; FALSE; /// otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"/// Tests whether the specified bits in a 128-bit integer vector are all; /// zeros.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _mm_test_all_zeros(__m128i M, __m128i V);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.; ///; /// \param M; /// A 128-bit integer vector containing the bits to be tested.; /// \param V; /// A 128-bit integer vector selecting which bits to test in operand \a M.; /// \returns TRUE if the specified bits are all zeros; FALSE otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,/// Tests whether the specified bits in a 128-bit integer vector are; /// neither all zeros nor all ones.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.; ///; /// \param __M; /// A 128-bit integer vector containing the bits to be tested.; /// \param __V; /// A 128-bit integer vector selecting which bits to test in operand \a __M.; /// \returns TRUE if the specified bits are neither all zeros nor all ones;; /// FALSE otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,"/// Tests whether the specified bits in a 128-bit integer vector are; /// neither all zeros nor all ones.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _mm_test_mix_ones_zeros(__m128i M, __m128i V);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.; ///; /// \param M; /// A 128-bit integer vector containing the bits to be tested.; /// \param V; /// A 128-bit integer vector selecting which bits to test in operand \a M.; /// \returns TRUE if the specified bits are neither all zeros nor all ones;; /// FALSE otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:4,Test,Tests,4,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,/// Tests whether the target 32-bit PowerPC uses Secure PLT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target 64-bit PowerPC big endian ABI is ELFv2.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 32-bit LoongArch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 32-bit PowerPC (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 32-bit RISC-V.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 32-bit SPARC (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 64-bit LoongArch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 64-bit PowerPC (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 64-bit RISC-V.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is 64-bit SPARC (big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is AArch64 (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is AArch64 and pointers are the size specified by; /// \p PointerWidth.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is AMDGCN,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is ARM (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is Android,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is DXIL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is LoongArch (32- and 64-bit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,"/// Tests whether the target is MIPS (little and big endian, 32- or 64-bit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is MIPS 32-bit (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is MIPS 64-bit (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is NVPTX (32- or 64-bit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,"/// Tests whether the target is OHOS; /// LiteOS default enviroment is also OHOS, but omited on triple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is PowerPC (32- or 64-bit LE or BE).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is RISC-V (32- and 64-bit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is SPARC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is SPIR (32- or 64-bit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is SPIR-V (32/64-bit/Logical).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,2,"['Log', 'Test']","['Logical', 'Tests']"
Testability,/// Tests whether the target is SPIR-V Logical,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,2,"['Log', 'Test']","['Logical', 'Tests']"
Testability,/// Tests whether the target is SystemZ.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is T32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is Thumb (little and big endian).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is VE,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is X32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is an M-class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is eBPF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,"/// Tests whether the target is the Apple ""arm64e"" AArch64 subarch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is the PS4 or PS5 platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is the PS4 platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is the PS5 platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is wasm (32- and 64-bit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target is x86 (32- or 64-bit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target supports comdat,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target supports the EHABI exception; /// handling standard.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,"/// Tests whether the target triple is little endian.; ///; /// \returns true if the triple is little endian, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target uses -data-sections as default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the target uses emulated TLS as default.; ///; /// Note: Android API level 29 (10) introduced ELF TLS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,/// Tests whether the type is categorized as a compound type.; ///; /// \returns True for types specified in C++0x [basic.compound].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Tests']
Testability,/// Tests whether the type is categorized as a fundamental type.; ///; /// \returns True for types specified in C++0x [basic.fundamental].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Test'],['Tests']
Testability,/// Tests whether there are no bits in this bitvector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,1,['Test'],['Tests']
Testability,"/// Tests whether this function is known to not return null.; ///; /// Requires that the function returns a pointer.; ///; /// Returns true if it believes the function will not return a null, and sets; /// \p Speculative based on whether the returned conclusion is a speculative; /// conclusion due to SCC calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:4,Test,Tests,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['Test'],['Tests']
Testability,/// Tests whether this instruction is a spill to a stack location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:4,Test,Tests,4,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['Test'],['Tests']
Testability,/// Tests whether this instruction is a spill to a stack slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:4,Test,Tests,4,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['Test'],['Tests']
Testability,/// Tests whether this is actually a dead node and no longer valid.; ///; /// Users rarely interact with nodes in this state and other methods are; /// invalid. This is used to model a node in an edge list where the; /// function has been completely removed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:4,Test,Tests,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['Test'],['Tests']
Testability,"/// Tests whether this toolchain forces its default for PIC, PIE or; /// non-PIC. If this returns true, any PIC related flags should be ignored; /// and instead the results of \c isPICDefault() and \c isPIEDefault(const; /// llvm::opt::ArgList &Args) are used exclusively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Test,Tests,4,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['Test'],['Tests']
Testability,/// Text-based stub file (.tbd) version 1.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,stub,stub,15,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['stub'],['stub']
Testability,/// Text-based stub file (.tbd) version 2.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,stub,stub,15,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['stub'],['stub']
Testability,/// Text-based stub file (.tbd) version 3.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,stub,stub,15,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['stub'],['stub']
Testability,/// Text-based stub file (.tbd) version 4.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,stub,stub,15,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['stub'],['stub']
Testability,/// Text-based stub file (.tbd) version 5.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,stub,stub,15,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['stub'],['stub']
Testability,"/// The 'reserved2' field of a section, used to represent the size of stubs,; /// for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h:70,stub,stubs,70,interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSectionMachO.h,1,['stub'],['stubs']
Testability,"/// The AST walk recursively visits nested logical-AND or logical-OR binary; /// operator nodes and then visits their LHS and RHS children nodes. As this; /// happens, the algorithm will assign IDs to each operator's LHS and RHS side; /// as the walk moves deeper into the nest. At each level of the recursive; /// nest, the LHS and RHS may actually correspond to larger subtrees (not; /// leaf-conditions). If this is the case, when that node is visited, the ID; /// assigned to the subtree is re-assigned to its LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:43,log,logical-AND,43,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,2,['log'],"['logical-AND', 'logical-OR']"
Testability,"/// The CSE Analysis object.; /// This installs itself as a delegate to the MachineFunction to track; /// new instructions as well as deletions. It however will not be able to; /// track instruction mutations. In such cases, recordNewInstruction should be; /// called (for eg inside MachineIRBuilder::recordInsertion).; /// Also because of how just the instruction can be inserted without adding any; /// operands to the instruction, instructions are uniqued and inserted lazily.; /// CSEInfo should assert when trying to enter an incomplete instruction into; /// the CSEMap. There is Opcode level granularity on which instructions can be; /// CSE'd and for now, only Generic instructions are CSEable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:500,assert,assert,500,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['assert'],['assert']
Testability,"/// The ChainedIncludesSource class converts headers to chained PCHs in; /// memory, mainly for testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:96,test,testing,96,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,1,['test'],['testing']
Testability,"/// The Data class implementation for DWARF v5 accelerator table. Unlike the; /// Apple Data classes, this class is just a DIE wrapper, and does not know to; /// serialize itself. The complete serialization logic is in the; /// emitDWARF5AccelTable function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:207,log,logic,207,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['log'],['logic']
Testability,"/// The FDRTraceWriter allows us to hand-craft an XRay Flight Data Recorder; /// (FDR) mode log file. This is used primarily for testing, generating; /// sequences of FDR records that can be read/processed. It can also be used to; /// generate various kinds of execution traces without using the XRay runtime.; /// Note that this writer does not do any validation, but uses the types of; /// records defined in the FDRRecords.h file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h:92,log,log,92,interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h,2,"['log', 'test']","['log', 'testing']"
Testability,/// The ID of the current IFunc stub section,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:32,stub,stub,32,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stub']
Testability,/// The IFunc stubs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:14,stub,stubs,14,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stubs']
Testability,/// The ISD::CondCode that should be used to test the result of each of the; /// comparison libcall against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,test,test,45,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,/// The LogBuilder class allows for creating ad-hoc collections of records; /// through the `add<...>(...)` function. An example use of this API is in; /// crafting arbitrary sequences of records:; ///; /// auto Records = LogBuilder(); /// .add<BufferExtents>(256); /// .add<NewBufferRecord>(1); /// .consume();; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRLogBuilder.h:8,Log,LogBuilder,8,interpreter/llvm-project/llvm/include/llvm/XRay/FDRLogBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRLogBuilder.h,2,['Log'],['LogBuilder']
Testability,"/// The RHS of all logical operators gets a fresh counter in order to count; /// how many times the RHS evaluates to true or false, depending on the; /// semantics of the operator. This is only valid for "">= v7"" of the profile; /// version so that we facilitate backward compatibility. In addition, in; /// order to use MC/DC, count the number of total LHS and RHS conditions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:19,log,logical,19,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['log'],['logical']
Testability,"/// The VE backend uses a two-staged process to lower and legalize vector; /// instructions:; //; /// 1. VP and standard vector SDNodes are lowered to SDNodes of the VVP_* layer.; //; // All VVP nodes have a mask and an Active Vector Length (AVL) parameter.; // The AVL parameters refers to the element position in the vector the VVP; // node operates on.; //; //; // 2. The VVP SDNodes are legalized. The AVL in a legal VVP node refers to; // chunks of 64bit. We track this by wrapping the AVL in a LEGALAVL node.; //; // The AVL mechanism in the VE architecture always refers to chunks of; // 64bit, regardless of the actual element type vector instructions are; // operating on. For vector types v256.32 or v256.64 nothing needs to be; // legalized since each element occupies a 64bit chunk - there is no; // difference between counting 64bit chunks or element positions. However,; // all vector types with > 256 elements store more than one logical element; // per 64bit chunk and need to be transformed.; // However legalization is performed, the resulting legal VVP SDNodes will; // have a LEGALAVL node as their AVL operand. The LEGALAVL nodes wraps; // around an AVL that refers to 64 bit chunks just as the architecture; // demands - that is, the wrapped AVL is the correct setting for the VL; // register for this VVP operation to get the desired behavior.; //; /// AVL Functions {; // The AVL operand position of this node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h:945,log,logical,945,interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h,1,['log'],['logical']
Testability,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:710,test,tested,710,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,2,['test'],"['test', 'tested']"
Testability,/// The \c ModulePass which wraps up a \c CallGraph and the logic to; /// build it.; ///; /// This class exposes both the interface to the call graph container and the; /// module pass which runs over a module of IR and produces the call graph. The; /// call graph interface is entirelly a wrapper around a \c CallGraph object; /// which is stored internally for each module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h:60,log,logic,60,interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,1,['log'],['logic']
Testability,"/// The arrayInitIndexExpr consists of two subexpressions: a common expression; /// (the source array) that is evaluated once up-front, and a per-element initializer; /// that runs once for each array element. Within the per-element initializer,; /// the current index may be obtained via an ArrayInitIndexExpr.; ///; /// Given; /// \code; /// void testStructBinding() {; /// int a[2] = {1, 2};; /// auto [x, y] = a;; /// }; /// \endcode; /// arrayInitIndexExpr() matches the array index that implicitly iterates; /// over the array `a` to copy each element to the anonymous array; /// that backs the structured binding `[x, y]` elements of which are; /// referred to by their aliases `x` and `y`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:349,test,testStructBinding,349,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['test'],['testStructBinding']
Testability,"/// The base class of the type hierarchy.; ///; /// A central concept with types is that each type always has a canonical; /// type. A canonical type is the type with any typedef names stripped out; /// of it or the types it references. For example, consider:; ///; /// typedef int foo;; /// typedef foo* bar;; /// 'int *' 'foo *' 'bar'; ///; /// There will be a Type object created for 'int'. Since int is canonical, its; /// CanonicalType pointer points to itself. There is also a Type for 'foo' (a; /// TypedefType). Its CanonicalType pointer points to the 'int' Type. Next; /// there is a PointerType that represents 'int*', which, like 'int', is; /// canonical. Finally, there is a PointerType type for 'foo*' whose canonical; /// type is 'int*', and there is a TypedefType for 'bar', whose canonical type; /// is also 'int*'.; ///; /// Non-canonical types are useful for emitting diagnostics, without losing; /// information about typedefs being used. Canonical types are useful for type; /// comparisons (they allow by-pointer equality tests) and useful for reasoning; /// about whether something has a particular form (e.g. is a function type),; /// because they implicitly, recursively, strip all typedefs out of a type.; ///; /// Types, once created, are immutable.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:1043,test,tests,1043,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['test'],['tests']
Testability,"/// The class's unary functions performing the gif test according to the ETestType provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:51,test,test,51,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,"/// The copy ctor does not allow copies where source object has either; /// a non-NULL Buffer or SourceLineCache. Ownership of allocated memory; /// is not transferred, so this is a logical error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:182,log,logical,182,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['log'],['logical']
Testability,/// The core instruction combiner logic.; ///; /// This class provides both the logic to recursively visit instructions and; /// combine them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:34,log,logic,34,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,2,['log'],['logic']
Testability,"/// The core of the Dsymutil Dwarf linking logic.; ///; /// The link of the dwarf information from the object files will be; /// driven by DWARFLinker. DwarfLinkerForBinary reads DebugMap objects; /// and pass information to the DWARFLinker. DWARFLinker; /// optimizes DWARF taking into account valid relocations.; /// Finally, optimized DWARF is passed to DwarfLinkerForBinary through; /// DWARFEmitter interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h:43,log,logic,43,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h,1,['log'],['logic']
Testability,"/// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are called ValidRelocs in the; /// AddressesInfo and are gathered as a very first step when we start; /// processing a object file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:34,log,logic,34,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,1,['log'],['logic']
Testability,"/// The cost of the uniform log-gap cost, assuming a utility node has \p X; /// FunctionNodes in the left bucket and \p Y FunctionNodes in the right one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BalancedPartitioning.h:28,log,log-gap,28,interpreter/llvm-project/llvm/include/llvm/Support/BalancedPartitioning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BalancedPartitioning.h,1,['log'],['log-gap']
Testability,/// The cost-computation logic from getInstructionCost which provides; /// the vector type as an output parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:25,log,logic,25,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['log'],['logic']
Testability,/// The current offset into the IFunc stub section,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:38,stub,stub,38,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,1,['stub'],['stub']
Testability,"/// The default (manual heuristics) implementation of the InlineAdvisor. This; /// implementation does not need to keep state between inliner pass runs, and is; /// reusable as-is for inliner pass test scenarios, as well as for regular use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:197,test,test,197,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['test'],['test']
Testability,/// The expression in a static assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,assert,assertion,31,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['assert'],['assertion']
Testability,/// The file name of the log file from the environment variable; /// AS_SECURE_LOG_FILE. Which must be set before the .secure_log_unique; /// directive is used or it is an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:25,log,log,25,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['log'],['log']
Testability,"/// The file to log CC_LOG_DIAGNOSTICS output to, if enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['log']
Testability,"/// The file to log CC_PRINT_HEADERS output to, if enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['log']
Testability,"/// The file to log CC_PRINT_INTERNAL_STAT_FILE output to, if enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['log']
Testability,"/// The file to log CC_PRINT_OPTIONS output to, if enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['log']
Testability,"/// The file to log CC_PRINT_PROC_STAT_FILE output to, if enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['log'],['log']
Testability,/// The file to log diagnostic output to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,1,['log'],['log']
Testability,"/// The following stacks are used with dataTraverseStmtPre() and; /// dataTraverseStmtPost() to track the depth of nested logical operators in a; /// boolean expression in a function. The ultimate purpose is to keep track; /// of the number of leaf-level conditions in the boolean expression so that a; /// profile bitmap can be allocated based on that number.; ///; /// The stacks are also used to find error cases and notify the user. A; /// standard logical operator nest for a boolean expression could be in a form; /// similar to this: ""x = a && b && c && (d || f)""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:122,log,logical,122,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,['log'],['logical']
Testability,"/// The function-level similarity FS(A) for a function A is computed as; /// follows:; /// Compute a function-internal similarity FIS(A) by; /// computeSampleFunctionInternalOverlap(). Then, with the weight of; /// function A in base profile WB(A), and the weight of function A in test; /// profile WT(A), compute FS(A) = FIS(A) * (1.0 - fabs(WB(A) - WT(A))); /// ranging in [0.0f to 1.0f] with 0.0 meaning no overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:281,test,test,281,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,/// The general expression-emission logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:36,log,logic,36,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['log'],['logic']
Testability,"/// The goal of this function is to remove redundant calls to the SVE ptrue; /// intrinsic in each basic block within the given functions.; ///; /// SVE ptrues have two representations in LLVM IR:; /// - a logical representation -- an arbitrary-width scalable vector of i1s,; /// i.e. <vscale x N x i1>.; /// - a physical representation (svbool, <vscale x 16 x i1>) -- a 16-element; /// scalable vector of i1s, i.e. <vscale x 16 x i1>.; ///; /// The SVE ptrue intrinsic is used to create a logical representation of an SVE; /// predicate. Suppose that we have two SVE ptrue intrinsic calls: P1 and P2. If; /// P1 creates a logical SVE predicate that is at least as wide as the logical; /// SVE predicate created by P2, then all of the bits that are true in the; /// physical representation of P2 are necessarily also true in the physical; /// representation of P1. P1 'encompasses' P2, therefore, the intrinsic call to; /// P2 is redundant and can be replaced by an SVE reinterpret of P1 via; /// convert.{to,from}.svbool.; ///; /// Currently, this pass only coalesces calls to SVE ptrue intrinsics; /// if they match the following conditions:; ///; /// - the call to the intrinsic uses either the SV_ALL or SV_POW2 patterns.; /// SV_ALL indicates that all bits of the predicate vector are to be set to; /// true. SV_POW2 indicates that all bits of the predicate vector up to the; /// largest power-of-two are to be set to true.; /// - the result of the call to the intrinsic is not promoted to a wider; /// predicate. In this case, keeping the extra ptrue leads to better codegen; /// -- coalescing here would create an irreducible chain of SVE reinterprets; /// via convert.{to,from}.svbool.; ///; /// EXAMPLE:; ///; /// %1 = <vscale x 8 x i1> ptrue(i32 SV_ALL); /// ; Logical: <1, 1, 1, 1, 1, 1, 1, 1>; /// ; Physical: <1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0>; /// ...; ///; /// %2 = <vscale x 4 x i1> ptrue(i32 SV_ALL); /// ; Logical: <1, 1, 1, 1>; /// ; Physical: <1, 0, 0, 0, 1, 0, 0, 0,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/SVEIntrinsicOpts.cpp:206,log,logical,206,interpreter/llvm-project/llvm/lib/Target/AArch64/SVEIntrinsicOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/SVEIntrinsicOpts.cpp,4,['log'],['logical']
Testability,"/// The index, from the start of the basic block, that each marker; /// appears. These are stored so we can do quick interval tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:126,test,tests,126,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['test'],['tests']
Testability,"/// The injected class name in C++ is the name of the class that; /// appears inside the class itself. For example:; ///; /// \code; /// struct C {; /// // C is implicitly declared here as a synonym for the class name.; /// };; ///; /// C::C c; // same as ""C c;""; /// \endcode; // It is another question why it is on the redecl chain.; // The test show it can be either:; // ... <- InjectedC <- C <- ..., i.e previous decl or; // ... <- C <- InjectedC <- ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:343,test,test,343,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['test'],['test']
Testability,"/// The inliner pass for the new pass manager.; ///; /// This pass wires together the inlining utilities and the inline cost; /// analysis into a CGSCC pass. It considers every call in every function in; /// the SCC and tries to inline if profitable. It can be tuned with a number of; /// parameters to control what cost model is used and what tradeoffs are made; /// when making the decision.; ///; /// It should be noted that the legacy inliners do considerably more than this; /// inliner pass does. They provide logic for manually merging allocas, and; /// doing considerable DCE including the DCE of dead functions. This pass makes; /// every attempt to be simpler. DCE of functions requires complex reasoning; /// about comdat groups, etc. Instead, it is expected that other more focused; /// passes be composed to achieve the same end result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:516,log,logic,516,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,1,['log'],['logic']
Testability,/// The installed log stream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:18,log,log,18,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,1,['log'],['log']
Testability,"/// The internal representation of an iterator, which in this simple test only contains a pointer to an element",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/SimpleCollectionProxy.hxx:69,test,test,69,tree/ntuple/v7/test/SimpleCollectionProxy.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/SimpleCollectionProxy.hxx,1,['test'],['test']
Testability,/// The liverange splitting logic sometimes produces bundles of copies when; /// subregisters are involved. Expand these into a sequence of copy instructions; /// after processing the last in the bundle. Does not update LiveIntervals; /// which we shouldn't need for this instruction anymore.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp:28,log,logic,28,interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,1,['log'],['logic']
Testability,"/// The location of the export info inside the binary is described by; /// LC_DYLD_INFO load command. The symbols exported by a dylib are encoded in a; /// trie. This is a compact representation that factors out common prefixes. It; /// also reduces LINKEDIT pages in RAM because it encodes all information (name,; /// address, flags) in one small, contiguous range. The export area is a stream; /// of nodes. The first node sequentially is the start node for the trie. Nodes; /// for a symbol start with a uleb128 that is the length of the exported symbol; /// information for the string so far. If there is no exported symbol, the node; /// starts with a zero byte. If there is exported info, it follows the length.; /// First is a uleb128 containing flags. Normally, it is followed by; /// a uleb128 encoded offset which is location of the content named; /// by the symbol from the mach_header for the image. If the flags; /// is EXPORT_SYMBOL_FLAGS_REEXPORT, then following the flags is; /// a uleb128 encoded library ordinal, then a zero terminated; /// UTF8 string. If the string is zero length, then the symbol; /// is re-export from the specified dylib with the same name.; /// If the flags is EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER, then following; /// the flags is two uleb128s: the stub offset and the resolver offset.; /// The stub is used by non-lazy pointers. The resolver is used; /// by lazy pointers and must be called to get the actual address to use.; /// After the optional exported symbol information is a byte of; /// how many edges (0-255) that this node has leaving it,; /// followed by each edge.; /// Each edge is a zero terminated UTF8 of the addition chars; /// in the symbol, followed by a uleb128 offset for the node that; /// edge points to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:1292,stub,stub,1292,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,2,['stub'],['stub']
Testability,"/// The log base 2, rounded towards INT32_MAX.; ///; /// Get the lg ceiling. lg 0 is defined to be INT32_MIN.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:8,log,log,8,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['log'],['log']
Testability,"/// The log base 2, rounded towards INT32_MIN.; ///; /// Get the lg floor. lg 0 is defined to be INT32_MIN.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:8,log,log,8,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['log'],['log']
Testability,"/// The log base 2, rounded.; ///; /// Get the lg of the scalar. lg 0 is defined to be INT32_MIN.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:8,log,log,8,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['log'],['log']
Testability,"/// The log entry to be built.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:8,log,log,8,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['log'],['log']
Testability,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:8,log,logical,8,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,3,['log'],['logical']
Testability,/// The mach-o version of this method defaults to returning a stub reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h:62,stub,stub,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h,1,['stub'],['stub']
Testability,/// The main entry point for the 'convert-for-testing' subcommand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/llvm-cov.cpp:46,test,testing,46,interpreter/llvm-project/llvm/tools/llvm-cov/llvm-cov.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/llvm-cov.cpp,1,['test'],['testing']
Testability,"/// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; /// not on a hot code path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx:391,test,testing,391,tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,1,['test'],['testing']
Testability,"/// The number of arguments to this type trait. According to [implimits]; /// 8 bits would be enough, but we require (and test for) at least 16 bits; /// to mirror FunctionType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:122,test,test,122,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['test'],['test']
Testability,"/// The number of columns in the column representations of the field. The column cardinality helps to navigate the; /// list of logical column ids. For example, the second column of the third column representation is; /// fLogicalColumnIds[2 * fColumnCardinality + 1]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:128,log,logical,128,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['log'],['logical']
Testability,/// The number of logical records emitted to far.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:18,log,logical,18,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,1,['log'],['logical']
Testability,/// The offset of this stub in the IFunc stub section,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h:23,stub,stub,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h,2,['stub'],['stub']
Testability,/// The only differences between FABS and FNEG are the mask and the logic op.; /// FNEG also has a folding opportunity for FNEG(FABS(x)).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:68,log,logic,68,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"/// The pattern is very common in tests, and it is OK to use it there.; /// We have to heuristics for detecting tests: method name starts with ""test""; /// (used in XCTest), and a class name contains ""mock"" or ""test"" (used in; /// helpers which are not tests themselves, but used exclusively in tests).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GCDAntipatternChecker.cpp:34,test,tests,34,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GCDAntipatternChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GCDAntipatternChecker.cpp,7,"['mock', 'test']","['mock', 'test', 'tests']"
Testability,"/// The pdf can be nullptr in which case the density from SetPdf(); /// is used. The snapshot and TestStatistic is also optional.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h:98,Test,TestStatistic,98,roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,2,['Test'],['TestStatistic']
Testability,"/// The possible results of an alias query.; ///; /// These results are always computed between two MemoryLocation objects as; /// a query to some alias analysis.; ///; /// Note that these are unscoped enumerations because we would like to support; /// implicitly testing a result for the existence of any possible aliasing with; /// a conversion to bool, but an ""enum class"" doesn't support this. The; /// canonical names from the literature are suffixed and unique anyways, and so; /// they serve as global constants in LLVM for these results.; ///; /// See docs/AliasAnalysis.html for more information on the specific meanings; /// of these values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:264,test,testing,264,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['test'],['testing']
Testability,"/// The remaining size of this logical record, including fill bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:31,log,logical,31,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,1,['log'],['logical']
Testability,"/// The result of parsing a file specified by TestInputs.; ///; /// The ASTContext, Sema etc are valid as long as this object is alive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:46,Test,TestInputs,46,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,1,['Test'],['TestInputs']
Testability,"/// The result type of logical operations, '<', '>', '!=', etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:23,log,logical,23,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['log'],['logical']
Testability,/// The results of modification testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:32,test,testing,32,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['test'],['testing']
Testability,/// The total amount of space allocated for this section. This includes the; /// section size and the maximum amount of space that the stubs can occupy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:135,stub,stubs,135,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,1,['stub'],['stubs']
Testability,/// The type of the current (logical) record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:29,log,logical,29,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,1,['log'],['logical']
Testability,"/// The use of a stored StringRef here is okay because; /// LogBuilder should be used only as a temporary, and as a; /// temporary it will be destructed before whatever temporary; /// might be initializing this format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.h:60,Log,LogBuilder,60,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.h,1,['Log'],['LogBuilder']
Testability,/// The utility to convert a loop into a loop with bottom test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:58,test,test,58,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['test'],['test']
Testability,"/// There are 4 scenarios we can use the InlineAdvisor:; /// - Default - use manual heuristics.; ///; /// - Release mode, the expected mode for production, day to day deployments.; /// In this mode, when building the compiler, we also compile a pre-trained ML; /// model to native code, and link it as a static library. This mode has low; /// overhead and no additional dependencies for the compiler runtime.; ///; /// - Development mode, for training new models.; /// In this mode, we trade off runtime performance for flexibility. This mode; /// requires the TFLite library, and evaluates models dynamically. This mode; /// also permits generating training logs, for offline training.; ///; /// - Dynamically load an advisor via a plugin (PluginInlineAdvisorAnalysis)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:659,log,logs,659,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['log'],['logs']
Testability,"/// There are several places where we need to know if a cast instruction; /// only deals with integer source and destination types. To simplify that; /// logic, this method is provided.; /// @returns true iff the cast has only integral typed operand and dest type.; /// Determine if this is an integer-only cast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:154,log,logic,154,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['log'],['logic']
Testability,"/// There are two checks handled by this function:; /// 1. Find a law-of-excluded-middle or law-of-noncontradiction expression; /// e.g. if (x || !x), if (x && !x); /// 2. Find a pair of comparison expressions with or without parentheses; /// with a shared variable and constants and a logical operator between them; /// that always evaluates to either true or false.; /// e.g. if (x != 3 || x != 4)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:286,log,logical,286,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['log'],['logical']
Testability,/// These metadata affects the other optimization passes by making assertions; /// or constraints.; /// Values that carry different expectations should be considered different.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp:67,assert,assertions,67,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,1,['assert'],['assertions']
Testability,"/// This a limited reassociation for a special case (see above) where we are; /// checking if two values are either both NAN (unordered) or not-NAN (ordered).; /// This could be handled more generally in '-reassociation', but it seems like; /// an unlikely pattern for a large number of logic ops and fcmps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:287,log,logic,287,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,/// This class allows targets to optionally customize the logic that resolves; /// scheduling class IDs. Targets can use information encoded in Instrument; /// objects to make more informed scheduling decisions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:58,log,logic,58,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,1,['log'],['logic']
Testability,"/// This class can make regularly spaced scans based on range stored in RooRealVars.; /// Choose number of steps for a rastor scan (common for each dimension); /// void SetNumSteps(Int_t);; /// This class can make regularly spaced scans based on range stored in RooRealVars.; /// Choose number of steps for a rastor scan (specific for each dimension); /// void SetNumSteps(std::map<RooAbsArg, Int_t>); /// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:426,test,test,426,roofit/roostats/inc/RooStats/NeymanConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h,1,['test'],['test']
Testability,"/// This class does all the work for a given function. Store and Load; /// instructions store and load corresponding shadow and origin; /// values. Most instructions propagate shadow from arguments to their; /// return values. Certain instructions (most importantly, BranchInst); /// test their argument shadow and print reports (with a runtime call) if it's; /// non-zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:284,test,test,284,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['test'],['test']
Testability,/// This class holds state for the main loop strength reduction logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:64,log,logic,64,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['log'],['logic']
Testability,"/// This class is used to build a byte array containing overlapping bit sets. By; /// loading from indexed offsets into the byte array and applying a mask, a; /// program can test bits from the bit set with a relatively short instruction; /// sequence. For example, suppose we have 15 bit sets to lay out:; ///; /// A (16 bits), B (15 bits), C (14 bits), D (13 bits), E (12 bits),; /// F (11 bits), G (10 bits), H (9 bits), I (7 bits), J (6 bits), K (5 bits),; /// L (4 bits), M (3 bits), N (2 bits), O (1 bit); ///; /// These bits can be laid out in a 16-byte array like this:; ///; /// Byte Offset; /// 0123456789ABCDEF; /// Bit; /// 7 HHHHHHHHHIIIIIII; /// 6 GGGGGGGGGGJJJJJJ; /// 5 FFFFFFFFFFFKKKKK; /// 4 EEEEEEEEEEEELLLL; /// 3 DDDDDDDDDDDDDMMM; /// 2 CCCCCCCCCCCCCCNN; /// 1 BBBBBBBBBBBBBBBO; /// 0 AAAAAAAAAAAAAAAA; ///; /// For example, to test bit X of A, we evaluate ((bits[X] & 1) != 0), or to; /// test bit X of I, we evaluate ((bits[9 + X] & 0x80) != 0). This can be done; /// in 1-2 machine instructions on x86, or 4-6 instructions on ARM.; ///; /// This is a byte array, rather than (say) a 2-byte array or a 4-byte array,; /// because for one thing it gives us better packing (the more bins there are,; /// the less evenly they will be filled), and for another, the instruction; /// sequences can be slightly shorter, both on x86 and ARM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:175,test,test,175,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,3,['test'],['test']
Testability,"/// This class represents a composition of other SCEV predicates, and is the; /// class that most clients will interact with. This is equivalent to a; /// logical ""AND"" of all the predicates in the union.; ///; /// NB! Unlike other SCEVPredicate sub-classes this class does not live in the; /// ScalarEvolution::Preds folding set. This is why the \c add function is sound.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:155,log,logical,155,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['log'],['logical']
Testability,/// This class runs register scavenging independ of the PrologEpilogInserter.; /// This is used in for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterScavenging.cpp:103,test,testing,103,interpreter/llvm-project/llvm/lib/CodeGen/RegisterScavenging.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterScavenging.cpp,1,['test'],['testing']
Testability,"/// This constructor takes in input a vector of previous nodes, motivated by the CloneAction logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx:93,log,logic,93,tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx,1,['log'],['logic']
Testability,"/// This enum indicates whether the mock method in the matched ON_CALL or; /// EXPECT_CALL macro has arguments. For example, `None` can be used to match; /// `ON_CALL(mock, TwoParamMethod)` whereas `Some` can be used to match; /// `ON_CALL(mock, TwoParamMethod(m1, m2))`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:36,mock,mock,36,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,3,['mock'],['mock']
Testability,"/// This enum is used for RTTI and also defines the priority that is given to; /// the predicate when generating the matcher code. Kinds with higher priority; /// must be tested first.; ///; /// The relative priority of OPM_LLT, OPM_RegBank, and OPM_MBB do not matter; /// but OPM_Int must have priority over OPM_RegBank since constant integers; /// are represented by a virtual register defined by a G_CONSTANT instruction.; ///; /// Note: The relative priority between IPM_ and OPM_ does not matter, they; /// are currently not compared between each other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:171,test,tested,171,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['test'],['tested']
Testability,"/// This function attempts to reduce the length of the specified list while; /// still maintaining the ""test"" property. This is the core of the ""work""; /// that bugpoint does.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:104,test,test,104,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,1,['test'],['test']
Testability,/// This function defines the logic to lower COPY instruction to; /// target specific instruction(s).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:30,log,logic,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['log'],['logic']
Testability,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:211,test,tested,211,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,5,"['Test', 'test']","['Test', 'TestRunner', 'test', 'tested']"
Testability,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:519,stub,stub,519,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,1,['stub'],['stub']
Testability,/// This function opens a file for writing and then writes a binary ELF stub to; /// the file.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source InterFace Stub to generate a binary ELF stub from.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:72,stub,stub,72,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,4,"['Stub', 'stub']","['Stub', 'stub']"
Testability,"/// This function tries matching functions in base and test profiles. For each; /// pair of matched functions, it aggregates the function-level; /// similarity into a profile-level similarity. It also dump function-level; /// similarity information of functions specified by --function,; /// --value-cutoff, and --similarity-cutoff options. The program-level; /// similarity PS is computed as follows:; /// Given function-level similarity FS(A) for all function A, the; /// weight of function A in base profile WB(A), and the weight of function; /// A in test profile WT(A), compute PS(base_profile, test_profile) =; /// sum_A(FS(A) * avg(WB(A), WT(A))) ranging in [0.0f to 1.0f] with 0.0; /// meaning no-overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:55,test,test,55,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,2,['test'],['test']
Testability,"/// This function updates sample overlap statistics of an overlap function in; /// base and test profile. It also calculates a function-internal similarity; /// FIS as follows:; /// For offsets i that have samples in at least one profile in this; /// function A, given BS(i) returned by computeBlockSimilarity(), compute; /// FIS(A) = (2.0 - sum_i(1.0 - BS(i))) / 2, ranging in [0.0f to 1.0f] with; /// 0.0 meaning no overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:92,test,test,92,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,/// This interface is used by reader of CoverageMapping test; /// format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:56,test,test,56,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['test'],['test']
Testability,"/// This is a class to find a viable GCC installation for Clang to; /// use.; ///; /// This class tries to find a GCC installation on the system, and report; /// information about it. It starts from the host information provided to the; /// Driver, and has logic for fuzzing that where appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h:257,log,logic,257,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,1,['log'],['logic']
Testability,"/// This is a helper function of LowerToHorizontalOp().; /// This function checks that the build_vector \p N in input implements a; /// 128-bit partial horizontal operation on a 256-bit vector, but that operation; /// may not match the layout of an x86 256-bit horizontal instruction.; /// In other words, if this returns true, then some extraction/insertion will; /// be required to produce a valid horizontal instruction.; ///; /// Parameter \p Opcode defines the kind of horizontal operation to match.; /// For example, if \p Opcode is equal to ISD::ADD, then this function; /// checks if \p N implements a horizontal arithmetic add; if instead \p Opcode; /// is equal to ISD::SUB, then this function checks if this is a horizontal; /// arithmetic sub.; ///; /// This function only analyzes elements of \p N whose indices are; /// in range [BaseIdx, LastIdx).; ///; /// TODO: This function was originally used to match both real and fake partial; /// horizontal operations, but the index-matching logic is incorrect for that.; /// See the corrected implementation in isHopBuildVector(). Can we reduce this; /// code because it is only used for partial h-op matching now?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:1000,log,logic,1000,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"/// This is a set of names for decls that we do not want to be; /// deserialized, and we emit an error if they are; for testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:120,test,testing,120,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,1,['test'],['testing']
Testability,/// This is a stub for TargetLowering::SimplifySetCC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,stub,stub,14,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['stub'],['stub']
Testability,"/// This is a test harness which runs test by executing generated; /// function with a type info type to throw. Harness wraps the execution; /// of generated function in a C++ try catch clause.; /// @param engine execution engine to use for executing generated function.; /// This demo program expects this to be a JIT instance for demo; /// purposes.; /// @param function generated test function to run; /// @param typeToThrow type info type of generated exception to throw, or; /// indicator to cause foreign exception to be thrown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:14,test,test,14,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,3,['test'],['test']
Testability,"/// This is an approximation of reciprocal throughput of a math/logic op.; /// A higher cost indicates less expected throughput.; /// From Agner Fog's guides, reciprocal throughput is ""the average number of; /// clock cycles per instruction when the instructions are not part of a; /// limiting dependency chain.""; /// Therefore, costs should be scaled to account for multiple execution units; /// on the target that can process this type of instruction. For example, if; /// there are 5 scalar integer units and 2 vector integer units that can; /// calculate an 'add' in a single cycle, this model should indicate that the; /// cost of the vector add instruction is 2.5 times the cost of the scalar; /// add instruction.; /// \p Args is an optional argument which holds the instruction operands; /// values so the TTI can analyze those values searching for special; /// cases or optimizations based on those values.; /// \p CxtI is the optional original context instruction, if one exists, to; /// provide even more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:64,log,logic,64,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['log'],['logic']
Testability,/// This is just a convenience method to make client code smaller for a; /// common case. It also correctly performs the comparison without the; /// potential for an assertion from getZExtValue().; /// Determine if the value is one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:166,assert,assertion,166,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assertion']
Testability,/// This is just a convenience method to make client code smaller for a; /// common code. It also correctly performs the comparison without the; /// potential for an assertion from getZExtValue().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:166,assert,assertion,166,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assertion']
Testability,"/// This is the predicate function used to check to see if the ""Test"" portion of; /// the program is miscompiled by the code generator under test. If so, return; /// true. In any case, both module arguments are deleted.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:64,Test,Test,64,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"/// This is the predicate function used to check to see if the ""Test"" portion of; /// the program is misoptimized. If so, return true. In any case, both module; /// arguments are deleted.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:64,Test,Test,64,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['Test'],['Test']
Testability,"/// This is the probability for an unordered floating point comparison, it means; /// one or two of the operands are NaN. Usually it is used to test for an; /// exceptional case, so the result is unlikely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp:144,test,test,144,interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,1,['test'],['test']
Testability,"/// This just calls Evaluate on the Runner, but in the development mode; /// case, if we're just capturing the log of the default advisor, it needs; /// to call the latter instead, so we need to pass all the necessary; /// parameters for it. In the development case, it will also log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:111,log,log,111,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,2,['log'],['log']
Testability,"/// This method gets called from the constructor and is; /// where we setup the InstrWaitCntInfo vector.; /// The core logic for determining which CNTs an instruction; /// interacts with is taken from SIInsertWaitcnts::updateEventWaitcntAfter().; /// Unfortunately, some of the logic from that function is not available to us; /// in this scope so we conservatively end up assuming that some; /// instructions interact with more CNTs than they do in reality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.h:119,log,logic,119,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.h,2,['log'],['logic']
Testability,"/// This method returns the address of the specified symbol if it exists; /// within the logical dynamic library represented by this JITSymbolResolver.; /// Unlike findSymbol, queries through this interface should return addresses; /// for hidden symbols.; ///; /// This is of particular importance for the Orc JIT APIs, which support lazy; /// compilation by breaking up modules: Each of those broken out modules; /// must be able to resolve hidden symbols provided by the others. Clients; /// writing memory managers for MCJIT can usually ignore this method.; ///; /// This method will be queried by RuntimeDyld when checking for previous; /// definitions of common symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:89,log,logical,89,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['log'],['logical']
Testability,"/// This method rewrites the exit condition of the loop to be a canonical !=; /// comparison against the incremented loop induction variable. This pass is; /// able to rewrite the exit tests of any loop where the SCEV analysis can; /// determine a loop-invariant trip count of the loop, which is actually a much; /// broader range than just linear tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:185,test,tests,185,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['test'],['tests']
Testability,/// This operation tests if there are any pairs of corresponding bits; /// between this APInt and RHS that are both set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:19,test,tests,19,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['test'],['tests']
Testability,"/// This option is used for writing test cases. Instead of crashing the program; /// when verification fails, report a message to the console (for FileCheck; /// usage) and continue execution as if nothing happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:36,test,test,36,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['test'],['test']
Testability,/// This ordering is used for std::unique() and llvm::sort(). There's no; /// particular logic behind the order but either A < B or B < A must be; /// true if A != B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:89,log,logic,89,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,2,['log'],['logic']
Testability,/// This pass will try to build an llvm.assume for every instruction in the; /// function. Its main purpose is testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:111,test,testing,111,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,1,['test'],['testing']
Testability,/// This producer encapsulates the logic for loading a File-backed; /// RecordProducer hidden behind a DataExtractor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h:35,log,logic,35,interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h,1,['log'],['logic']
Testability,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:393,log,logical,393,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['log'],['logical']
Testability,/// This represents the common interface of the individual transaction.; /// Each class implements the logic for doing one specific modification on; /// the IR via the TypePromotionTransaction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:103,log,logic,103,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['log'],['logic']
Testability,"/// This static method returns true if the type Ty is big enough to; /// represent the value V. This can be used to avoid having the get method; /// assert when V is larger than Ty can represent. Note that there are two; /// versions of this method, one for unsigned and one for signed integers.; /// Although ConstantInt canonicalizes everything to an unsigned integer,; /// the signed version avoids callers having to convert a signed quantity; /// to the appropriate unsigned type before calling the method.; /// @returns true if V is a valid value for type Ty; /// Determine if the value is in range for the given type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:149,assert,assert,149,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['assert'],['assert']
Testability,"/// This structure describes how to lower type tests for a particular type; /// identifier. It is either built directly from the global analysis (during; /// regular LTO or the regular LTO phase of ThinLTO), or indirectly using type; /// identifier summaries and external symbol references (in ThinLTO backends).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:47,test,tests,47,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['tests']
Testability,"/// This test covers a potential problem with the custom normalization ranges; /// of PDFs: the value of a RooProdPdf should not depend on the normalization; /// ranges of its clients. TODO: this is still a problem! It needs to be fixed,; /// and then the test can be enabled and this note should be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:9,test,test,9,roofit/roofitcore/test/testRooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx,2,['test'],['test']
Testability,"/// This test makes sure the program doesn't break when the user; /// forgets to set the priority for a Job.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx:9,test,test,9,roofit/multiprocess/test/test_Queue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx,1,['test'],['test']
Testability,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:9,test,test,9,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,1,['test'],['test']
Testability,"/// This test tries to see whether push-pull can be made to work as a bit of a load balancer, using a low HWM at the; /// receiver",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:9,test,test,9,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,1,['test'],['test']
Testability,"/// This test verifies that out-of-range events are correctly skipped,; /// consistent with the construction of a RooDataSet from a TTree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testActionHelpers.cxx:9,test,test,9,roofit/roofitcore/test/testActionHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testActionHelpers.cxx,1,['test'],['test']
Testability,"/// This virtual function should be overriden by subclasses to implement the; /// test desired. The testcase is only required to test to see if the Kept; /// list still satisfies the property, but if it is going to check the prefix; /// anyway, it can.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:82,test,test,82,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,3,['test'],"['test', 'testcase']"
Testability,"/// This will compile FnAST to IR, rename the function to add the given; /// suffix (needed to prevent a name-clash with the function's stub),; /// and then take ownership of the module that the function was compiled; /// into.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h:136,stub,stub,136,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,1,['stub'],['stub']
Testability,"/// ThreadLocalGVStubs - Darwin '$non_lazy_ptr' stubs. The key is something; /// like ""Lfoo$non_lazy_ptr"", the value is something like ""_foo"". The extra; /// bit is true if this GV is external.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:48,stub,stubs,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,1,['stub'],['stubs']
Testability,"/// Thresholds to tune inline cost analysis. The inline cost analysis decides; /// the condition to apply a threshold and applies it. Otherwise,; /// DefaultThreshold is used. If a threshold is Optional, it is applied only; /// when it has a valid value. Typically, users of inline cost analysis; /// obtain an InlineParams object through one of the \c getInlineParams methods; /// and pass it to \c getInlineCost. Some specialized versions of inliner; /// (such as the pre-inliner) might have custom logic to compute \c InlineParams; /// object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:501,log,logic,501,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['log'],['logic']
Testability,/// Throw away the rest of the line for testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:40,test,testing,40,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['test'],['testing']
Testability,"/// Top-level lowering for x86 vector shuffles.; ///; /// This handles decomposition, canonicalization, and lowering of all x86; /// vector shuffles. Most of the specific lowering strategies are encapsulated; /// above in helper routines. The canonicalization attempts to widen shuffles; /// to involve fewer lanes of wider elements, consolidate symmetric patterns; /// s.t. only one of the two inputs needs to be tested, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:414,test,tested,414,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['tested']
Testability,/// Total number of possible Test Vectors for the boolean expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:29,Test,Test,29,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['Test'],['Test']
Testability,"/// Trait to indicate whether a type's bits can be hashed directly.; ///; /// A type trait which is true if we want to combine values for hashing by; /// reading the underlying data. It is false if values of this type must; /// first be passed to hash_value, and the resulting hash_codes combined.; //; // FIXME: We want to replace is_integral_or_enum and is_pointer here with; // a predicate which asserts that comparing the underlying storage of two; // values of the type for equality is equivalent to comparing the two values; // for equality. For all the platforms we care about, this holds for integers; // and pointers, but there are platforms where it doesn't and we would like to; // support user-defined types which happen to satisfy this property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:399,assert,asserts,399,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['assert'],['asserts']
Testability,"/// TransactionPool needs direct access to m_State as setState asserts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h:63,assert,asserts,63,interpreter/cling/include/cling/Interpreter/Transaction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h,1,['assert'],['asserts']
Testability,/// Transfer function logic for DeclRefExprs and BlockDeclRefExprs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:22,log,logic,22,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// Transfer function logic for ObjCAtSynchronizedStmts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:22,log,logic,22,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// Transfer function logic for computing the lvalue of an Objective-C ivar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:22,log,logic,22,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// Transform a vector binary operation into a scalar binary operation by moving; /// the math/logic after an extract element of a vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:95,log,logic,95,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"/// True if \param E is a binary operator that we are going to handle; /// data recursively.; /// We handle binary operators that are comma, logical, or that have operands; /// with integral or enumeration type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:141,log,logical,141,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['log'],['logical']
Testability,/// True if the integrated assembler should interpret 'a >> b' constant; /// expressions as logical rather than arithmetic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:92,log,logical,92,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,1,['log'],['logical']
Testability,/// True if the log stream is not llvm::nulls();,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:16,log,log,16,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,1,['log'],['log']
Testability,/// True if this method is a synthesized property accessor stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:59,stub,stub,59,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['stub'],['stub']
Testability,"/// True when a select result is replaced by one of its operands; /// in select-icmp sequence. This will eventually result in the elimination; /// of the select.; ///; /// \param SI Select instruction; /// \param Icmp Compare instruction; /// \param SIOpd Operand that replaces the select; ///; /// Notes:; /// - The replacement is global and requires dominator information; /// - The caller is responsible for the actual replacement; ///; /// Example:; ///; /// entry:; /// %4 = select i1 %3, %C* %0, %C* null; /// %5 = icmp eq %C* %4, null; /// br i1 %5, label %9, label %7; /// ...; /// ; <label>:7 ; preds = %entry; /// %8 = getelementptr inbounds %C* %4, i64 0, i32 0; /// ...; ///; /// can be transformed to; ///; /// %5 = icmp eq %C* %0, null; /// %6 = select i1 %3, i1 %5, i1 true; /// br i1 %6, label %9, label %7; /// ...; /// ; <label>:7 ; preds = %entry; /// %8 = getelementptr inbounds %C* %0, i64 0, i32 0 // replace by %0!; ///; /// Similar when the first operand of the select is a constant or/and; /// the compare is for not equal rather than equal.; ///; /// NOTE: The function is only called when the select and compare constants; /// are equal, the optimization can work only for EQ predicates. This is not a; /// major restriction since a NE compare should be 'normalized' to an equal; /// compare, which usually happens in the combiner and test case; /// select-cmp-br.ll checks for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:1362,test,test,1362,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"/// Try to compile the specified module, returning false and setting Error if an; /// error occurs. This is used for code generation crash testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExecutionDriver.cpp:139,test,testing,139,interpreter/llvm-project/llvm/tools/bugpoint/ExecutionDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExecutionDriver.cpp,1,['test'],['testing']
Testability,/// Try to compile the specified module. This is used for code generation; /// crash testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:85,test,testing,85,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['test'],['testing']
Testability,"/// Try to eliminate select instructions that test the returned flag of cmpxchg; /// instructions.; ///; /// If a select instruction tests the returned flag of a cmpxchg instruction and; /// selects between the returned value of the cmpxchg instruction its compare; /// operand, the result of the select will always be equal to its false value.; /// For example:; ///; /// %0 = cmpxchg i64* %ptr, i64 %compare, i64 %new_value seq_cst seq_cst; /// %1 = extractvalue { i64, i1 } %0, 1; /// %2 = extractvalue { i64, i1 } %0, 0; /// %3 = select i1 %1, i64 %compare, i64 %2; /// ret i64 %3; ///; /// The returned value of the cmpxchg instruction (%2) is the original value; /// located at %ptr prior to any update. If the cmpxchg operation succeeds, %2; /// must have been equal to %compare. Thus, the result of the select is always; /// equal to %2, and the code can be simplified to:; ///; /// %0 = cmpxchg i64* %ptr, i64 %compare, i64 %new_value seq_cst seq_cst; /// %1 = extractvalue { i64, i1 } %0, 0; /// ret i64 %1; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:46,test,test,46,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,2,['test'],"['test', 'tests']"
Testability,"/// Try to find the estimated number of clusters. Note that the number of; /// clusters identified in this function could be different from the actual; /// numbers found in lowering. This function ignore switches that are; /// lowered with a mix of jump table / bit test / BTree. This function was; /// initially intended to be used when estimating the cost of switch in; /// inline cost heuristic, but it's a generic cost model to be used in other; /// places (e.g., in loop unrolling).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:266,test,test,266,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['test'],['test']
Testability,"/// Try to fold (icmp(A & B) ==/!= 0) &/| (icmp(A & D) ==/!= E) into a single; /// (icmp(A & X) ==/!= Y), where the left-hand side and the right hand side; /// aren't of the common mask pattern type.; /// Also used for logical and/or, must be poison safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:219,log,logical,219,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"/// Try to fold (icmp(A & B) ==/!= C) &/| (icmp(A & D) ==/!= E) into a single; /// (icmp(A & X) ==/!= Y), where the left-hand side is of type Mask_NotAllZeros; /// and the right hand side is of type BMask_Mixed. For example,; /// (icmp (A & 12) != 0) & (icmp (A & 15) == 8) -> (icmp (A & 15) == 8).; /// Also used for logical and/or, must be poison safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:318,log,logical,318,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"/// Try to fold icmp (binop), X or icmp X, (binop).; /// TODO: A large part of this logic is duplicated in InstSimplify's; /// simplifyICmpWithBinOp(). We should be able to share that and avoid the code; /// duplication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:84,log,logic,84,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['log'],['logic']
Testability,/// Try to fold selects to logical operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:27,log,logical,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['log'],['logical']
Testability,/// Try to form loop invariant tests for loop exits by changing how many; /// iterations of the loop run when that is unobservable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:31,test,tests,31,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['tests']
Testability,"/// Try to lower a vector shuffle as a bit shift (shifts in zeros).; ///; /// Attempts to match a shuffle mask against the PSLL(W/D/Q/DQ) and; /// PSRL(W/D/Q/DQ) SSE2 and AVX2 logical bit-shift instructions. The function; /// matches elements from one of the input vectors shuffled to the left or; /// right with zeroable elements 'shifted in'. It handles both the strictly; /// bit-wise element shifts and the byte shift across an entire 128-bit double; /// quad word lane.; ///; /// PSHL : (little-endian) left bit shift.; /// [ zz, 0, zz, 2 ]; /// [ -1, 4, zz, -1 ]; /// PSRL : (little-endian) right bit shift.; /// [ 1, zz, 3, zz]; /// [ -1, -1, 7, zz]; /// PSLLDQ : (little-endian) left byte shift; /// [ zz, 0, 1, 2, 3, 4, 5, 6]; /// [ zz, zz, -1, -1, 2, 3, 4, -1]; /// [ zz, zz, zz, zz, zz, zz, -1, 1]; /// PSRLDQ : (little-endian) right byte shift; /// [ 5, 6, 7, zz, zz, zz, zz, zz]; /// [ -1, 5, 6, 7, zz, zz, zz, zz]; /// [ 1, 2, -1, -1, -1, -1, zz, zz]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:176,log,logical,176,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,/// Try to narrow the width of math or bitwise logic instructions by pulling a; /// truncate ahead of binary operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:47,log,logic,47,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logic']
Testability,"/// Try to replace shift/logic that tests if a bit is clear with mask + setcc.; /// For a target with a bit test, this is expected to become test + set and save; /// at least 1 instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,log,logic,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,4,"['log', 'test']","['logic', 'test', 'tests']"
Testability,/// Try to split Pred LHS RHS into logical conjunctions (and's) and try to; /// prove them individually.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:35,log,logical,35,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['log'],['logical']
Testability,"/// Try to turn tests against the signbit in the form of:; /// XOR(TRUNCATE(SRL(X, size(X)-1)), 1); /// into:; /// SETGT(X, -1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,test,tests,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['tests']
Testability,/// TryStaticDowncast - Common functionality of TryStaticReferenceDowncast and; /// TryStaticPointerDowncast. Tests whether a static downcast from SrcType to; /// DestType is possible and allowed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:110,Test,Tests,110,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['Test'],['Tests']
Testability,"/// TryStaticImplicitCast - Tests whether a conversion according to C++ 5.2.9p2; /// is valid:; ///; /// An expression e can be explicitly converted to a type T using a; /// @c static_cast if the declaration ""T t(e);"" is well-formed [...].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:28,Test,Tests,28,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['Test'],['Tests']
Testability,"/// TryStaticMemberPointerUpcast - Tests whether a conversion according to; /// C++ 5.2.9p9 is valid:; ///; /// An rvalue of type ""pointer to member of D of type cv1 T"" can be; /// converted to an rvalue of type ""pointer to member of B of type cv2 T"",; /// where B is a base class of D [...].; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:35,Test,Tests,35,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['Test'],['Tests']
Testability,/// Turn a function declaration into a stub function that makes an; /// indirect call using the given function pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:39,stub,stub,39,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stub']
Testability,"/// Turn vector tests of the signbit in the form of:; /// xor (sra X, elt_size(X)-1), -1; /// into:; /// cmge X, X, #0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:16,test,tests,16,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tests']
Testability,"/// Turn vector tests of the signbit in the form of:; /// xor (sra X, elt_size(X)-1), -1; /// into:; /// pcmpgt X, -1; ///; /// This should be called before type legalization because the pattern may not; /// persist after that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,test,tests,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['tests']
Testability,"/// Turns a comparison of the form \p Op0 \p Pred \p Op1 into a vector of; /// constraints using getConstraint. Returns an empty constraint if the result; /// cannot be used to query the existing constraint system, e.g. because it; /// would require adding new variables. Also tries to convert signed; /// predicates to unsigned ones if possible to allow using the unsigned system; /// which increases the effectiveness of the signed <-> unsigned transfer; /// logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:461,log,logic,461,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['log'],['logic']
Testability,"/// Underlying constants for 'cost' values in this interface.; ///; /// Many APIs in this interface return a cost. This enum defines the; /// fundamental values that should be used to interpret (and produce) those; /// costs. The costs are returned as an int rather than a member of this; /// enumeration because it is expected that the cost of one IR instruction; /// may have a multiplicative factor to it or otherwise won't fit directly; /// into the enum. Moreover, it is common to sum or average costs which works; /// better as simple integral values. Thus this enum only provides constants.; /// Also note that the returned costs are signed integers to make it natural; /// to add, subtract, and test with zero (a common boundary condition). It is; /// not expected that 2^32 is a realistic cost to be modeling at any point.; ///; /// Note that these costs should usually reflect the intersection of code-size; /// cost and execution cost. A free instruction is typically one that folds; /// into another instruction. For example, reg-to-reg moves can often be; /// skipped by renaming the registers in the CPU, but they still are encoded; /// and thus wouldn't be considered 'free' here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:703,test,test,703,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['test'],['test']
Testability,"/// Unlike livein_begin, this method does not check that the liveness; /// information is accurate. Still for debug purposes it may be useful; /// to have iterators that won't assert if the liveness information; /// is not current.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:176,assert,assert,176,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['assert'],['assert']
Testability,/// Unregisters this option from the CommandLine system.; ///; /// This option must have been the last option registered.; /// For testing purposes only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:131,test,testing,131,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['test'],['testing']
Testability,"/// Update call edges for indirect calls to local functions added from; /// SamplePGO when needed. Normally this is done during; /// computeDeadSymbolsAndUpdateIndirectCalls, but can be called standalone; /// when that is not called (e.g. during testing).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:246,test,testing,246,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['test'],['testing']
Testability,"/// Use bitwise logic to make pairs of compares more efficient. For example:; /// and (seteq A, B), (seteq C, D) --> seteq (or (xor A, B), (xor C, D)), 0; /// This should be true when it takes more than one instruction to lower; /// setcc (cmp+set on x86 scalar), when bitwise ops are faster than logic on; /// condition bits (crand on PowerPC), and/or when reducing cmp+br is a win.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:16,log,logic,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['log'],['logic']
Testability,"/// Use the log of the provided pdf.; /// Implemented by the derived classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/DistSampler.h:12,log,log,12,math/mathcore/inc/Math/DistSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/DistSampler.h,1,['log'],['log']
Testability,"/// Used by the unit tests to drain the queue of clusters to be preloaded",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx:21,test,tests,21,tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,1,['test'],['tests']
Testability,/// Used for unit testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h:18,test,testing,18,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h,2,['test'],['testing']
Testability,/// Used to classify whether a value is representable using this type.; ///; /// \see testInRange,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:86,test,testInRange,86,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,1,['test'],['testInRange']
Testability,/// Used when testing importing from distributed indexes via opt; // -function-import.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:14,test,testing,14,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['test'],['testing']
Testability,/// User of DwarfStreamer should call initialization code; /// for AsmPrinter:; ///; /// InitializeAllTargetInfos();; /// InitializeAllTargetMCs();; /// InitializeAllTargets();; /// InitializeAllAsmPrinters();; /// The Dwarf streaming logic.; ///; /// All interactions with the MC layer that is used to build the debug; /// information binary representation are handled in this class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFStreamer.h:235,log,logic,235,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFStreamer.h,1,['log'],['logic']
Testability,"/// User-defined set of points to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:34,test,test,34,roofit/roostats/inc/RooStats/FeldmanCousins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h,3,['test'],['test']
Testability,/// Using KnownBits LHS/RHS produce the known bits for logic op (and/xor/or).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:55,log,logic,55,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['log'],['logic']
Testability,"/// Usually identical to the logical column ID, except for alias columns where it references the shadowed column",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:29,log,logical,29,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['log'],['logical']
Testability,"/// Utility analysis that determines what values are worth profiling.; /// The actual logic is inside the ValueProfileCollectorImpl, whose job is to; /// populate the Candidates vector.; ///; /// Value profiling an expression means to track the values that this expression; /// takes at runtime and the frequency of each value.; /// It is important to distinguish between two sets of value profiles for a; /// particular expression:; /// 1) The set of values at the point of evaluation.; /// 2) The set of values at the point of use.; /// In some cases, the two sets are identical, but it's not unusual for the two; /// to differ.; ///; /// To elaborate more, consider this C code, and focus on the expression `nn`:; /// void foo(int nn, bool b) {; /// if (b) memcpy(x, y, nn);; /// }; /// The point of evaluation can be as early as the start of the function, and; /// let's say the value profile for `nn` is:; /// total=100; (value,freq) set = {(8,10), (32,50)}; /// The point of use is right before we call memcpy, and since we execute the; /// memcpy conditionally, the value profile of `nn` can be:; /// total=15; (value,freq) set = {(8,10), (4,5)}; ///; /// For this reason, a plugin is responsible for computing the insertion point; /// for each value to be profiled. The `CandidateInfo` structure encapsulates; /// all the information needed for each value profile site.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h:86,log,logic,86,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h,1,['log'],['logic']
Testability,"/// Utility to embed an integer into a pointer-like type. This is specifically; /// intended to allow embedding integers where fewer bits are required than; /// exist in a pointer, and the integer can participate in abstractions along; /// side other pointer-like types. For example it can be placed into a \c; /// PointerSumType or \c PointerUnion.; ///; /// Note that much like pointers, an integer value of zero has special utility; /// due to boolean conversions. For example, a non-null value can be tested for; /// in the above abstractions without testing the particular active member.; /// Also, the default constructed value zero initializes the integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:505,test,tested,505,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,2,['test'],"['tested', 'testing']"
Testability,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:143,Assert,Assert,143,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,2,"['Assert', 'assert']","['Assert', 'assertion']"
Testability,/// Validate the target platform inforation in the text stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:56,stub,stub,56,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,1,['stub'],['stub']
Testability,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:22,assert,asserts,22,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,7,"['Assert', 'assert']","['AssertingVH', 'assert', 'asserts']"
Testability,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:272,Assert,AssertingVH,272,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,3,"['Assert', 'assert']","['AssertingVH', 'assert']"
Testability,"/// VarStreamArrayExtractor is intended to be specialized to provide customized; /// extraction logic. On input it receives a BinaryStreamRef pointing to the; /// beginning of the next record, but where the length of the record is not yet; /// known. Upon completion, it should return an appropriate Error instance if; /// a record could not be extracted, or if one could be extracted it should; /// return success and set Len to the number of bytes this record occupied in; /// the underlying stream, and it should fill out the fields of the value type; /// Item appropriately to represent the current record.; ///; /// You can specialize this template for your own custom value types to avoid; /// having to specify a second template argument to VarStreamArray (documented; /// below).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamArray.h:96,log,logic,96,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamArray.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamArray.h,1,['log'],['logic']
Testability,/// Verifiy that this mapping makes sense for \p MI.; /// \pre \p MI must be connected to a MachineFunction.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:166,assert,assertions,166,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,1,['assert'],['assertions']
Testability,"/// Verify that MemorySSA is self consistent (IE definitions dominate; /// all uses, uses appear in the right places). This is used by unit tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:140,test,tests,140,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['test'],['tests']
Testability,"/// Verify that the given Result cannot be invalidated, assert otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:56,assert,assert,56,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['assert'],['assert']
Testability,/// Verify that the specified instruction does not occur in our internal data; /// structures.; ///; /// This function verifies by asserting in debug builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:131,assert,asserting,131,interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,1,['assert'],['asserting']
Testability,/// Verify that this mapping makes sense for a value of; /// \p MeaningfulBitWidth.; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:136,assert,assertions,136,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,1,['assert'],['assertions']
Testability,/// VerifyDiagnosticConsumer - Create a diagnostic client which will use; /// markers in the input source to check that all the emitted diagnostics match; /// those expected. See clang/docs/InternalsManual.rst for details about how to; /// write tests to verify diagnostics.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h:246,test,tests,246,interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h,1,['test'],['tests']
Testability,/// VerifyTree - Walk the btree performing assertions on various properties to; /// verify consistency. This is useful for debugging new changes to the tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/DeltaTree.cpp:43,assert,assertions,43,interpreter/llvm-project/clang/lib/Rewrite/DeltaTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/DeltaTree.cpp,1,['assert'],['assertions']
Testability,/// Visit - Transfer function logic for all statements. Dispatches to; /// other functions that handle specific kinds of statements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:30,log,logic,30,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,"/// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2234,log,logical-OR,2234,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['log'],['logical-OR']
Testability,/// VisitBinaryOperator - Transfer function logic for binary operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:44,log,logic,44,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitBlockExpr - Transfer function logic for BlockExprs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:39,log,logic,39,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitCast - Transfer function logic for all casts (implicit and explicit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:34,log,logic,34,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitCompoundLiteralExpr - Transfer function logic for compound literals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:49,log,logic,49,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitDeclStmt - Transfer function logic for DeclStmts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:38,log,logic,38,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitGCCAsmStmt - Transfer function logic for inline asm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:40,log,logic,40,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,"/// VisitGuardedExpr - Transfer function logic for ?, __builtin_choose",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:41,log,logic,41,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitLambdaExpr - Transfer function logic for LambdaExprs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:40,log,logic,40,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,"/// VisitLogicalExpr - Transfer function logic for '&&', '||'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:41,log,logic,41,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitMSAsmStmt - Transfer function logic for MS inline asm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:39,log,logic,39,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitObjCForCollectionStmt - Transfer function logic for; /// ObjCForCollectionStmt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:51,log,logic,51,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitReturnStmt - Transfer function logic for return statements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:40,log,logic,40,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// VisitUnaryOperator - Transfer function logic for unary operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:43,log,logic,43,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['log'],['logic']
Testability,/// Visitor to rewrite instructions using p particular slice of an alloca; /// to use a new alloca.; ///; /// Also implements the rewriting to vector-based accesses when the partition; /// passes the isVectorPromotionViable predicate. Most of the rewriting logic; /// lives here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:257,log,logic,257,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['log'],['logic']
Testability,/// Walk the bits in the bitmap. A bit set to '1' indicates that the test; /// vector at the corresponding index was executed during a test run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:69,test,test,69,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,2,['test'],['test']
Testability,/// Walk the range and assert if any invariants fail to hold.; ///; /// Note that this is a no-op when asserts are disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:23,assert,assert,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,2,['assert'],"['assert', 'asserts']"
Testability,/// Walk to the next Phi or Clobber in the def chain starting at Desc.Last.; /// This will update Desc.Last as it walks. It will (optionally) also stop at; /// StopAt.; ///; /// This does not test for whether StopAt is a clobber,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:192,test,test,192,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['test'],['test']
Testability,/// Walks the interval and assert if any invariants fail to hold.; ///; /// Note that this is a no-op when asserts are disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:27,assert,assert,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,2,['assert'],"['assert', 'asserts']"
Testability,/// Warn on logical operator errors in CFGBuilder,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:12,log,logical,12,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['log'],['logical']
Testability,"/// Was the ""split-nested"" logical operator case encountered?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:27,log,logical,27,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['log'],['logical']
Testability,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:427,log,logic,427,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['log'],['logic']
Testability,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; ///; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:432,log,logic,432,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['log'],['logic']
Testability,"/// We know comparison with both branches of select can be simplified, but they; /// are not equal. This routine handles some logical simplifications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:126,log,logical,126,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logical']
Testability,/// We need the offset of the frame pointer relative to other MachineFrameInfo; /// offsets which are encoded relative to SP at function begin.; /// See also emitPrologue() for how the FP is set up.; /// Unfortunately we cannot determine this value in determineCalleeSaves() yet; /// as assignCalleeSavedSpillSlots() hasn't run at this point. Instead we use; /// this to produce a conservative estimate that we check in an assert() later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:423,assert,assert,423,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['assert'],['assert']
Testability,"/// We provide a function which tries to compute the (demangled) name of a type; /// statically.; ///; /// This routine may fail on some platforms or for particularly unusual types.; /// Do not use it for anything other than logging and debugging aids. It isn't; /// portable or dependendable in any real sense.; ///; /// The returned StringRef will point into a static storage duration string.; /// However, it may not be null terminated and may be some strangely aligned; /// inner substring of a larger string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h:225,log,logging,225,interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,1,['log'],['logging']
Testability,"/// We want to turn:; /// (select (icmp eq (and X, C1), 0), Y, (BinOp Y, C2)); /// into:; /// IF C2 u>= C1; /// (BinOp Y, (shl (and X, C1), C3)); /// ELSE; /// (BinOp Y, (lshr (and X, C1), C3)); /// iff:; /// 0 on the RHS is the identity value (i.e add, xor, shl, etc...); /// C1 and C2 are both powers of 2; /// where:; /// IF C2 u>= C1; /// C3 = Log(C2) - Log(C1); /// ELSE; /// C3 = Log(C1) - Log(C2); ///; /// This transform handles cases where:; /// 1. The icmp predicate is inverted; /// 2. The select operands are reversed; /// 3. The magnitude of C2 and C1 are flipped",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:348,Log,Log,348,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,4,['Log'],['Log']
Testability,"/// We'd like to check the predicate on every iteration of the most dominated; /// loop between loops used in LHS and RHS.; /// To do this we use the following list of steps:; /// 1. Collect set S all loops on which either LHS or RHS depend.; /// 2. If S is non-empty; /// a. Let PD be the element of S which is dominated by all other elements.; /// b. Let E(LHS) be value of LHS on entry of PD.; /// To get E(LHS), we should just take LHS and replace all AddRecs that are; /// attached to PD on with their entry values.; /// Define E(RHS) in the same way.; /// c. Let B(LHS) be value of L on backedge of PD.; /// To get B(LHS), we should just take LHS and replace all AddRecs that are; /// attached to PD on with their backedge values.; /// Define B(RHS) in the same way.; /// d. Note that E(LHS) and E(RHS) are automatically available on entry of PD,; /// so we can assert on that.; /// e. Return true if isLoopEntryGuardedByCond(Pred, E(LHS), E(RHS)) &&; /// isLoopBackedgeGuardedByCond(Pred, B(LHS), B(RHS))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:868,assert,assert,868,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['assert'],['assert']
Testability,"/// What kind of model is set up. Use this to instantiate; /// a test suite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:65,test,test,65,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['test'],['test']
Testability,"/// When set to true, the EnableDebugEntryValues option forces production; /// of debug entry values even if the target does not officially support; /// it. Useful for testing purposes only. This flag should never be checked; /// directly, always use \ref ShouldEmitDebugEntryValues instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:168,test,testing,168,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,1,['test'],['testing']
Testability,"/// Whether a module uses the 'requires excluded' hack to mark its; /// contents as 'textual'.; ///; /// On older Darwin SDK versions, 'requires excluded' is used to mark the; /// contents of the Darwin.C.excluded (assert.h) and Tcl.Private modules as; /// non-modular headers. For backwards compatibility, we continue to; /// support this idiom for just these modules, and map the headers to; /// 'textual' to match the original intent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:215,assert,assert,215,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['assert'],['assert']
Testability,"/// Whether aligned case labels are aligned on the colon, or on the; /// , or on the tokens after the colon.; /// \code; /// true:; /// switch (level) {; /// case log::info : return ""info:"";; /// case log::warning: return ""warning:"";; /// default : return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:163,log,log,163,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,4,['log'],['log']
Testability,"/// Whether aligning is enabled.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:87,log,log,87,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,4,['log'],['log']
Testability,/// Whether the EH cleanup should test the activation flag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:34,test,test,34,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,1,['test'],['test']
Testability,/// Whether the current loop exit test is based on this value. Currently this; /// is limited to a direct use in the loop condition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:34,test,test,34,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['test']
Testability,/// Whether the normal cleanup should test the activation flag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:38,test,test,38,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,1,['test'],['test']
Testability,/// Whether this is bitwise logic opcode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:28,log,logic,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['log'],['logic']
Testability,"/// Whether to add the requirement \p Feature to the module \p M.; ///; /// This preserves backwards compatibility for two hacks in the Darwin system; /// module map files:; ///; /// 1. The use of 'requires excluded' to make headers non-modular, which; /// should really be mapped to 'textual' now that we have this feature. We; /// drop the 'excluded' requirement, and set \p IsRequiresExcludedHack to; /// true. Later, this bit will be used to map all the headers inside this; /// module to 'textual'.; ///; /// This affects Darwin.C.excluded (for assert.h) and Tcl.Private.; ///; /// 2. Removes a bogus cplusplus requirement from IOKit.avc. This requirement; /// was never correct and causes issues now that we check it, so drop it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:550,assert,assert,550,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['assert'],['assert']
Testability,"/// Whether to align across comments.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:92,log,log,92,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,4,['log'],['log']
Testability,"/// Whether to align across empty lines.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:95,log,log,95,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,4,['log'],['log']
Testability,"/// Whether to enable staged cluster committing, where only an explicit call to CommitStagedClusters() will logically; /// append the clusters to the RNTuple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx:108,log,logically,108,tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,1,['log'],['logically']
Testability,/// Whether we should disable the use of the hash string within the; /// module cache.; ///; /// Note: Only used for testing!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:117,test,testing,117,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['test'],['testing']
Testability,"/// While alive, includes the current analysis stack in a crash trace.; ///; /// Example:; /// \code; /// 0. Program arguments: ...; /// 1. <eof> parser at end of file; /// 2. While analyzing stack:; /// #0 void inlined(); /// #1 void test(); /// 3. crash-trace.c:6:3: Error evaluating statement; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PrettyStackTraceLocationContext.h:235,test,test,235,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PrettyStackTraceLocationContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PrettyStackTraceLocationContext.h,1,['test'],['test']
Testability,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,stub,stubs,28,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,35,"['Stub', 'stub']","['Stubs', 'StubsBlockTargetAddress', 'StubsBlockWorkingMem', 'stub', 'stubs']"
Testability,"/// Write immediate value for PC-relative branch without link. The instruction; /// can be made conditional by an IT block. If the branch target is not ARM,; /// we are forced to generate an explicit interworking stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:213,stub,stub,213,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,1,['stub'],['stub']
Testability,"/// Write immediate value for conditional PC-relative branch without link.; /// If the branch target is not ARM, we are forced to generate an explicit; /// interworking stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:169,stub,stub,169,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,1,['stub'],['stub']
Testability,"/// Write the profile, returning the raw data. For testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:51,test,testing,51,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,1,['test'],['testing']
Testability,/// Writer for the coverage mapping testing format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMappingWriter.h:36,test,testing,36,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMappingWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMappingWriter.h,1,['test'],['testing']
Testability,/// X86 bit-test instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,test,test,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['test'],['test']
Testability,/// X86 compare and logical compare instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:20,log,logical,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,"/// X86 conditional branches. Operand 0 is the chain operand, operand 1; /// is the block to branch if condition is true, operand 2 is the; /// condition code, and operand 3 is the flag operand produced by a CMP; /// or TEST instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:220,TEST,TEST,220,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['TEST'],['TEST']
Testability,"/// X86 conditional moves. Operand 0 and operand 1 are the two values; /// to select from. Operand 2 is the condition code, and operand 3 is the; /// flag operand produced by a CMP or TEST instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:184,TEST,TEST,184,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['TEST'],['TEST']
Testability,"/// \brief A simple data-source implementation, for demo purposes.; ///; /// Constructing an RDataFrame as `RDataFrame(nEntries)` is a superior alternative.; /// If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source:; /// it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx:345,test,test,345,tree/dataframe/inc/ROOT/RTrivialDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx,1,['test'],['test']
Testability,"/// \brief Assert in case of an unsupported type. Outlined to reduce include; /// dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:11,Assert,Assert,11,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['Assert'],['Assert']
Testability,"/// \brief Asserts that the given transaction is not null, otherwise prints a; /// stack trace to stderr and aborts execution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp:11,Assert,Asserts,11,interpreter/cling/lib/Interpreter/DeclCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp,1,['Assert'],['Asserts']
Testability,/// \brief MachO Dynamic Library Stub file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:33,Stub,Stub,33,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['Stub'],['Stub']
Testability,"/// \brief Make a RDF wrapping a RTrivialDS with the specified amount of entries.; ///; /// Constructing an RDataFrame as `RDataFrame(nEntries)` is a superior alternative.; /// If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source:; /// it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx:360,test,test,360,tree/dataframe/inc/ROOT/RTrivialDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx,1,['test'],['test']
Testability,/// \brief Parse a constraint-logical-and-expression.; ///; /// \verbatim; /// C++2a[temp.constr.decl]p1; /// constraint-logical-and-expression:; /// primary-expression; /// constraint-logical-and-expression '&&' primary-expression; ///; /// \endverbatim,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:30,log,logical-and-expression,30,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,3,['log'],['logical-and-expression']
Testability,/// \brief Parse a constraint-logical-or-expression.; ///; /// \verbatim; /// C++2a[temp.constr.decl]p1; /// constraint-logical-or-expression:; /// constraint-logical-and-expression; /// constraint-logical-or-expression '||'; /// constraint-logical-and-expression; ///; /// \endverbatim,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:30,log,logical-or-expression,30,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,5,['log'],"['logical-and-expression', 'logical-or-expression']"
Testability,"/// \brief Stores the test label in a class-wide collection and returns the DAOS URI (""daos://{pool}/{container}"").; /// The test label serves as the container identifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage_daos.cxx:22,test,test,22,tree/ntuple/v7/test/ntuple_storage_daos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage_daos.cxx,2,['test'],['test']
Testability,"/// \brief Test whether push-pull sockets are working; ///; /// \note This function tests the PUSH-PULL socket pairs only. The PUB-SUB sockets are already tested in the; /// constructor.; ///; /// \param process_manager ProcessManager object used to instantiate this object. Used to identify which process we are; /// running on and hence which sockets need to be tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx:11,Test,Test,11,roofit/multiprocess/src/Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx,4,"['Test', 'test']","['Test', 'tested', 'tests']"
Testability,/// \brief The constraint satisfaction details resulting from the associated; /// constraints satisfaction tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:107,test,tests,107,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,1,['test'],['tests']
Testability,"/// \brief call RecursiveRemove for obj if gROOT is valid; /// and obj.TestBit(kMustCleanup) is true.; /// Note: this reset the kMustCleanup bit to allow; /// harmless multiple call to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:71,Test,TestBit,71,core/base/inc/TROOT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h,1,['Test'],['TestBit']
Testability,/// \c true if this line looks like a function definition instead of a; /// function declaration. Asserts MightBeFunctionDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.h:98,Assert,Asserts,98,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.h,1,['Assert'],['Asserts']
Testability,"/// \cond ROOFIT_INTERNAL; /*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, NIKHEF, verkerke@nikhef.nl *; * *; * Copyright (c) 2000-2011, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooUnitTest.cxx; \class RooUnitTest; \ingroup Roofitcore. RooUnit test is an abstract base class for unit regression tests for; RooFit and RooStats tests performed in stressRooFit and stressRooStats; Implementations of this class must implement abstract method testCode(); which defines the regression test to be performed. Inside testCode(); the regression test can define objects on which the regression is performed.; These are:; Object | function; ----------------|------------; RooPlot | regPlot(); RooFitResult | regResult(); double | regValue(); RooTable | regTable(); TH1/2/3 | regTH(); RooWorkspace | regWS(); **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx:731,test,test,731,roofit/roofitcore/src/RooUnitTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx,7,['test'],"['test', 'testCode', 'tests']"
Testability,"/// \cond ROOFIT_INTERNAL; /*; * Project: RooFit; * Authors:; * Carsten D. Burgard, DESY/ATLAS, Dec 2021; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::HistFactory::JSONTool; * \ingroup HistFactory; The RooStats::HistFactory::JSONTool can be used to export a HistFactory; measurement to HS3 JSON. It is not part of the public user interface, but a; pretty useful tool for unit test, validating if a measurement object can be; directly translated to HS3 without going over RooFit. If this translation turns; out to be important for users, it can be considered in the future to make the; class part of the public interface.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx:579,test,test,579,roofit/histfactory/src/JSONTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx,1,['test'],['test']
Testability,"/// \defgroup AArch64CCMP CMP;CCMP matching; ///; /// These functions deal with the formation of CMP;CCMP;... sequences.; /// The CCMP/CCMN/FCCMP/FCCMPE instructions allow the conditional execution of; /// a comparison. They set the NZCV flags to a predefined value if their; /// predicate is false. This allows to express arbitrary conjunctions, for; /// example ""cmp 0 (and (setCA (cmp A)) (setCB (cmp B)))""; /// expressed as:; /// cmp A; /// ccmp B, inv(CB), CA; /// check for CB flags; ///; /// This naturally lets us implement chains of AND operations with SETCC; /// operands. And we can even implement some other situations by transforming; /// them:; /// - We can implement (NEG SETCC) i.e. negating a single comparison by; /// negating the flags used in a CCMP/FCCMP operations.; /// - We can negate the result of a whole chain of CMP/CCMP/FCCMP operations; /// by negating the flags we test for afterwards. i.e.; /// NEG (CMP CCMP CCCMP ...) can be implemented.; /// - Note that we can only ever negate all previously processed results.; /// What we can not implement by flipping the flags to test is a negation; /// of two sub-trees (because the negation affects all sub-trees emitted so; /// far, so the 2nd sub-tree we emit would also affect the first).; /// With those tools we can implement some OR operations:; /// - (OR (SETCC A) (SETCC B)) can be implemented via:; /// NEG (AND (NEG (SETCC A)) (NEG (SETCC B))); /// - After transforming OR to NEG/AND combinations we may be able to use NEG; /// elimination rules from earlier to implement the whole thing as a; /// CCMP/FCCMP chain.; ///; /// As complete example:; /// or (or (setCA (cmp A)) (setCB (cmp B))); /// (and (setCC (cmp C)) (setCD (cmp D)))""; /// can be reassociated to:; /// or (and (setCC (cmp C)) setCD (cmp D)); // (or (setCA (cmp A)) (setCB (cmp B))); /// can be transformed to:; /// not (and (not (and (setCC (cmp C)) (setCD (cmp D)))); /// (and (not (setCA (cmp A)) (not (setCB (cmp B))))))""; /// which can be imple",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:896,test,test,896,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['test']
Testability,/// \defgroup Methods setting various linking options:; ///; /// @{; ///; /// Allows to generate log of linking process to the standard output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h:97,log,log,97,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,1,['log'],['log']
Testability,"/// \enum _MM_TERNLOG_ENUM; /// A helper to represent the ternary logic operations among vector \a A,; /// \a B and \a C. The representation is passed to \a imm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx512fintrin.h:66,log,logic,66,interpreter/llvm-project/clang/lib/Headers/avx512fintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx512fintrin.h,1,['log'],['logic']
Testability,"/// \file CladDerivatorTests.cxx; ///; /// \brief The file contain unit tests which test the CladDerivator facility.; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date July, 2018; ///; /*************************************************************************; * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:72,test,tests,72,math/mathcore/test/CladDerivatorTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \file EmptyInclude.h; /// \ingroup tutorial_proof; ///; /// Empty file to test TProof::Load in runProof.C and StressProof.cxx in; /// conjunction with ProcFileElements and ProofEventProc .; ///; /// \author Gerardo Ganis (gerardo.ganis@cern.ch)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/EmptyInclude.h:78,test,test,78,tutorials/proof/EmptyInclude.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/EmptyInclude.h,1,['test'],['test']
Testability,"/// \file TClingUtilsTests.cxx; ///; /// \brief The file contain unit tests which test the TClingUtils.h; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date Aug, 2019; ///; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:70,test,tests,70,core/clingutils/test/TClingUtilsTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \file TFormulaGradientTests.cxx; ///; /// \brief The file contain unit tests which test the clad-based gradient; /// computations.; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date Oct, 2018; ///; /*************************************************************************; * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/TFormulaGradientTests.cxx:75,test,tests,75,hist/hist/test/TFormulaGradientTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/TFormulaGradientTests.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \file TFormulaHessianTests.cxx; ///; /// \brief The file contain unit tests which test the clad-based hessian; /// computations.; ///; /// \author Baidyanath Kundu <kundubaidya99@gmail.com>; ///; /// \date Aug, 2021; ///; /*************************************************************************; * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/TFormulaHessianTests.cxx:74,test,tests,74,hist/hist/test/TFormulaHessianTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/TFormulaHessianTests.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \file TTabComTests.cxx; ///; /// \brief The file contain unit tests which test the TTabCom class.; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date Jul, 2020; ///; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/test/TTabComTests.cxx:66,test,tests,66,core/rint/test/TTabComTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/test/TTabComTests.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \file TestSupport.hxx; ///; /// \brief The file contains facilities allowing easier writing of in-tree unit tests; ///; /// \author Pratyush Das <reikdas@gmail.com>; /// \author Vassil Vassilev <vvasilev@cern.ch>; /// \author Stephan Hageboeck <stephan.hageboeck@cern.ch>; ///; /// \date April, 2020; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:10,Test,TestSupport,10,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,2,"['Test', 'test']","['TestSupport', 'tests']"
Testability,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:518,test,test,518,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability,"/// \file; /// \brief This file contains a specialised ROOT message handler to test for diagnostic in unit tests.; ///; /// \author Stephan Hageboeck <stephan.hageboeck@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx:79,test,test,79,core/testsupport/src/TestSupport.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \file; /// \ingroup tutorial_ProofTests; ///; /// Auxilliary selector used to test PROOF functionality; ///; /// \macro_code; ///; /// \author Gerardo Ganis (gerardo.ganis@cern.ch)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofTests.h:82,test,test,82,tutorials/proof/ProofTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofTests.h,1,['test'],['test']
Testability,"/// \file; /// \ingroup tutorial_webcanv; /// \notebook -js; /// Logarithmic scales support in web canvas.; ///; /// Shows support of log2, ln, log8 and log25 scales; /// Any integer base for logarithm can be specified as well; ///; /// Functionality available only in web-based graphics; ///; /// \macro_image (tcanvas_js); /// \macro_code; ///; /// \author Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx:65,Log,Logarithmic,65,tutorials/webcanv/logN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx,2,"['Log', 'log']","['Logarithmic', 'logarithm']"
Testability,"/// \file; /// \ingroup tutorial_webgui; /// \ingroup webwidgets; /// Test suite for RWebWindow communication performance; ///; /// On the first place latency of round-trip (ping-pong) packet is measured; /// File ping.cxx implements server-side code of RWebWindow; /// In ping.html client code plus visualization is provided.; ///; /// \macro_code; ///; /// \author Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:70,Test,Test,70,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['Test'],['Test']
Testability,"/// \file; ///; /// \brief The file contain unit tests which test the ROOT::FoundationUtils; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date Jun, 2020; ///; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/FoundationUtilsTests.cxx:49,test,tests,49,core/foundation/test/FoundationUtilsTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/FoundationUtilsTests.cxx,2,['test'],"['test', 'tests']"
Testability,"/// \internal; /// Return a mutable reference to the current run, after asserting it exists.; ///; /// \note It is undefined behavior to call this if a run does not exist in; /// the SARIF document.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:72,assert,asserting,72,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,1,['assert'],['asserting']
Testability,/// \internal; /// Return a pointer to the current tool. Asserts that a run exists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:57,Assert,Asserts,57,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,1,['Assert'],['Asserts']
Testability,"/// \name LogMacros; /// Macros to log diagnostics.; /// ~~~ {.cpp}; /// R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; ///; /// RLogScopedVerbosity verbose(kDebug + 5);; /// const int decreasedInfoLevel = 5;; /// R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; /// ~~~; ///\{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:10,Log,LogMacros,10,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,2,"['Log', 'log']","['LogMacros', 'log']"
Testability,/// \return The address of the corresponding condition bitmap containing; /// the index of the TestVector to update within the TestVector Bitmap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:95,Test,TestVector,95,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,2,['Test'],['TestVector']
Testability,"/// \return The expected cost of vector Insert and Extract.; /// This is used when instruction is available, and implementation; /// asserts 'I' is not nullptr.; ///; /// A typical suitable use case is cost estimation when vector instruction; /// exists (e.g., from basic blocks during transformation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:133,assert,asserts,133,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['assert'],['asserts']
Testability,/// \return The index of the TestVector Bitmap upon which this intrinsic; /// acts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:29,Test,TestVector,29,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['Test'],['TestVector']
Testability,/// \returns A bitmask that is true where the lane position is less-than \p; /// EVLParam; ///; /// \p Builder; /// Used for instruction creation.; /// \p VLParam; /// The explicit vector length parameter to test against the lane; /// positions.; /// \p ElemCount; /// Static (potentially scalable) number of vector elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp:208,test,test,208,interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp,1,['test'],['test']
Testability,/// \returns the ceil log base 2 of this APInt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:22,log,log,22,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['log']
Testability,"/// \returns the compare predicate type if the test performed by; /// llvm.is.fpclass(x, \p Mask) is equivalent to fcmp o__ x, 0.0 with the; /// floating-point environment assumed for \p F for type \p Ty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:47,test,test,47,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['test'],['test']
Testability,"/// \returns the log base 2 of this APInt if its an exact power of two, -1; /// otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:17,log,log,17,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['log']
Testability,"/// \returns the nearest log base 2 of this APInt. Ties round up.; ///; /// NOTE: When we have a BitWidth of 1, we define:; ///; /// log2(0) = UINT32_MAX; /// log2(1) = 0; ///; /// to get around any mathematical concerns resulting from; /// referencing 2 in a space where 2 does no exist.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:25,log,log,25,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['log'],['log']
Testability,"/// \returns true if \c D is in a subclass of 'XCTestCase', returns void, has; /// no parameters, and its name starts with 'test'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/IndexSymbol.cpp:124,test,test,124,interpreter/llvm-project/clang/lib/Index/IndexSymbol.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/IndexSymbol.cpp,1,['test'],['test']
Testability,/// `ModelPred` builds a logical formula relating the predicate in; /// `ValueOrPredExpr` to the optional's `has_value` property.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp:25,log,logical,25,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,1,['log'],['logical']
Testability,"/// add - Creates a new immutable set that contains all of the values; /// of the original set with the addition of the specified value. If; /// the original set already included the value, then the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:313,log,logarithmic,313,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['log'],['logarithmic']
Testability,"/// assignCalleeSavedSpillSlots - Allows target to override spill slot; /// assignment logic. If implemented, assignCalleeSavedSpillSlots() should; /// assign frame slots to all CSI entries and return true. If this method; /// returns false, spill slots will be assigned using generic implementation.; /// assignCalleeSavedSpillSlots() may add, delete or rearrange elements of; /// CSI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:87,log,logic,87,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,1,['log'],['logic']
Testability,/// banerjeeMIVtest - Tests an MIV subscript pair for dependence.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Computes directions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:22,Test,Tests,22,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. Analysis of residuals expect test of above; /// mentioned properties of residuals. Notice that indirectly the analysis; /// of residuals increase the power of \f$ \chi^{2} \f$ test.; ///; /// #### Methods of comparison:; ///; /// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; /// Let us consider two histograms with the same binning and the number; /// of bins equal to r. Let us denote the number of events in the ith bin; /// in the first histogram as ni and as mi in the second one. The total; /// number of events in the first histogram is equal to:; /// \f[; /// N = \sum_{i=1}^{r} n_{i}; /// \f]; /// and; /// \f[; /// M = \sum_{i=1}^{r} m_{i}; /// \f]; /// in the second histogram. The hypothesis of identity (homogeneity) [3]; /// is that the two histograms represent random values with identical; /// distributions. It is equivalent that there exist r constants p1,...,pr,; /// such that; /// \f[; ///\sum_{i=1}^{r} p_{i}=1; /// \f]; /// and the probability of belonging to the ith bin for some measured value; /// in both experiments is equal to pi. The number of events in the ith; /// bin is a random variable with a distribution approximated by a Poisson; /// probability distribution; /// \f[; ///\frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{n_{i}!}; /// \f]; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3118,test,test,3118,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['test'],['test']
Testability,"/// cast<X> - Return the argument parameter cast to the specified type. This; /// casting operator asserts that the type is correct, so it does not return; /// null on failure. It does not allow a null argument (use cast_if_present for; /// that). It is typically used like this:; ///; /// cast<Instruction>(myVal)->getParent()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h:99,assert,asserts,99,interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,1,['assert'],['asserts']
Testability,"/// changes plot to log scale on x axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h:20,log,log,20,roofit/roostats/inc/RooStats/SamplingDistPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h,1,['log'],['log']
Testability,"/// changes plot to log scale on y axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h:20,log,log,20,roofit/roostats/inc/RooStats/SamplingDistPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h,1,['log'],['log']
Testability,"/// clearMemConstraint - Similar to setMemConstraint(0), but without the; /// assertion checking that the constraint has not been set previously.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:78,assert,assertion,78,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,1,['assert'],['assertion']
Testability,"/// configure TestStatSampler for the Alt run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:14,Test,TestStatSampler,14,roofit/roostats/inc/RooStats/FrequentistCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h,2,['Test'],['TestStatSampler']
Testability,"/// configure TestStatSampler for the Null run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:14,Test,TestStatSampler,14,roofit/roostats/inc/RooStats/FrequentistCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h,2,['Test'],['TestStatSampler']
Testability,/// contains - Returns true if this tree contains a subtree (node) that; /// has an data element that matches the specified key. Complexity; /// is logarithmic in the size of the tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:148,log,logarithmic,148,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['log'],['logarithmic']
Testability,"/// debugOptimizerCrash - This method is called when some optimizer pass; /// crashes on input. It attempts to prune down the testcase to something; /// reasonable, and figure out exactly which pass is crashing.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:126,test,testcase,126,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['test'],['testcase']
Testability,"/// debugOptimizerCrash - This method is called when some pass crashes on input.; /// It attempts to prune down the testcase to something reasonable, and figure; /// out exactly which pass is crashing.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:116,test,testcase,116,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['test'],['testcase']
Testability,"/// decodeLogicalImmediate - Decode a logical immediate value in the form; /// ""N:immr:imms"" (where the immr and imms fields are each 6 bits) into the; /// integer value it represents with regSize bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:38,log,logical,38,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['log'],['logical']
Testability,"/// densities, snapshots, and test statistics to reweight to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:30,test,test,30,roofit/roostats/inc/RooStats/ToyMCSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h,1,['test'],['test']
Testability,"/// depends - Tests for a dependence between the Src and Dst instructions.; /// Returns NULL if no dependence; otherwise, returns a Dependence (or a; /// FullDependence) with as much information as can be gleaned.; /// The flag PossiblyLoopIndependent should be set by the caller; /// if it appears that control flow can reach from Src to Dst; /// without traversing a loop back edge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:14,Test,Tests,14,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// draw the likelihood interval or contour; /// for the 1D case a RooPlot is drawn by default of the profiled Log-Likelihood ratio; /// if option ""TF1"" is used the objects are drawn using a TF1 scanning the LL function in a; /// grid of the set points (by default; /// the TF1 can be customized by setting maximum and the number of points to scan",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h:111,Log,Log-Likelihood,111,roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h,1,['Log'],['Log-Likelihood']
Testability,/// empty - Tests whether there are no bits in this bitvector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:12,Test,Tests,12,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,1,['Test'],['Tests']
Testability,/// encodeLogicalImmediate - Return the encoded immediate value for a logical; /// immediate instruction of the given register size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:70,log,logical,70,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['log'],['logical']
Testability,"/// equivalentAddressValues - Test if A and B will obviously have the same; /// value. This includes recognizing that %t0 and %t1 will have the same; /// value in code like this:; /// %t0 = getelementptr \@a, 0, 3; /// store i32 0, i32* %t0; /// %t1 = getelementptr \@a, 0, 3; /// %t2 = load i32* %t1; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:30,Test,Test,30,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['Test'],['Test']
Testability,"/// erase - Erases an existing element identified by a valid iterator.; ///; /// This invalidates all iterators, but erase() returns an iterator pointing; /// to the next element. This makes it possible to erase selected elements; /// while iterating over the set:; ///; /// for (SparseSet::iterator I = Set.begin(); I != Set.end();); /// if (test(*I)); /// I = Set.erase(I);; /// else; /// ++I;; ///; /// Note that end() changes when elements are erased, unlike std::list.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:343,test,test,343,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,1,['test'],['test']
Testability,"/// erase_one - Erase one element from the queue, regardless of its; /// position. This operation performs a linear search to find an element; /// equal to t, but then uses all logarithmic-time algorithms to do; /// the erase operation.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:177,log,logarithmic-time,177,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,1,['log'],['logarithmic-time']
Testability,"/// evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf); /// and its gradient",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:51,log,logl,51,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,4,['log'],"['log', 'logl']"
Testability,"/// exactRDIVtest - Tests the RDIV subscript pair for dependence.; /// Things of the form [c1 + a*i] and [c2 + b*j],; /// where i and j are induction variable, c1 and c2 are loop invariant,; /// and a and b are constants.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Works in some cases that symbolicRDIVtest doesn't,; /// and vice versa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:20,Test,Tests,20,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// expandLog - Lower a log intrinsic. Handles the special sequences for; /// limited-precision mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:24,log,log,24,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['log'],['log']
Testability,"/// fLeftSideTailFraction*fSize defines lower edge of acceptance region.; /// Unified limits use 0, central limits use 0.5,; /// for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:181,test,test,181,roofit/roostats/inc/RooStats/NeymanConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h,1,['test'],['test']
Testability,"/// findValue - Look through bitcasts and simple memory reference patterns; /// to identify an equivalent, but more informative, value. If OffsetOk; /// is true, look through getelementptrs with non-zero offsets too.; ///; /// Most analysis passes don't require this logic, because instcombine; /// will simplify most of these kinds of things away. But it's a goal of; /// this Lint pass to be useful even on non-optimized IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:267,log,logic,267,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,1,['log'],['logic']
Testability,"/// gcdMIVtest - Tests an MIV subscript pair for dependence.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Can sometimes disprove the equal direction for 1 or more loops.; // Can handle some symbolics that even the SIV tests don't get,; /// so we use it as a backup for everything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:17,Test,Tests,17,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"/// get the test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:12,test,test,12,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['test'],['test']
Testability,"/// getA - If constraint is a line AX + BY = C, returns A.; /// Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:74,assert,assert,74,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['assert'],['assert']
Testability,"/// getB - If constraint is a line AX + BY = C, returns B.; /// Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:74,assert,assert,74,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['assert'],['assert']
Testability,"/// getByValTypeAlignment - Return the desired alignment for ByVal aggregate; /// function arguments in the caller parameter area. This is the actual; /// alignment, not its logarithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:174,log,logarithm,174,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,2,['log'],['logarithm']
Testability,"/// getC - If constraint is a line AX + BY = C, returns C.; /// Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:74,assert,assert,74,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['assert'],['assert']
Testability,/// getCopyFromParts - Create a value that contains the specified legal parts; /// combined into the value they represent. If the parts combine to a type; /// larger than ValueVT then AssertOp can be used to specify whether the extra; /// bits are known to be zero (ISD::AssertZext) or sign extended from ValueVT; /// (ISD::AssertSext).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:184,Assert,AssertOp,184,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,3,['Assert'],"['AssertOp', 'AssertSext', 'AssertZext']"
Testability,/// getCopyFromPartsVector - Create a value that contains the specified legal; /// parts combined into the value they represent. If the parts combine to a; /// type larger than ValueVT then AssertOp can be used to specify whether the; /// extra bits are known to be zero (ISD::AssertZext) or sign extended from; /// ValueVT (ISD::AssertSext).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:190,Assert,AssertOp,190,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,3,['Assert'],"['AssertOp', 'AssertSext', 'AssertZext']"
Testability,"/// getD - If constraint is a distance, returns D.; /// Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:66,assert,assert,66,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['assert'],['assert']
Testability,/// getFloatingRank - Return a relative rank for floating point types.; /// This routine will assert if passed a built-in type that isn't a float.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:94,assert,assert,94,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['assert'],['assert']
Testability,"/// getIntegerRank - Return an integer conversion rank (C99 6.3.1.1p1). This; /// routine will assert if passed a built-in type that isn't an integer or enum,; /// or if it is not canonicalized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:95,assert,assert,95,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['assert'],['assert']
Testability,"/// getPointerToFunctionOrStub - If the specified function has been; /// code-gen'd, return a pointer to the function. If not, compile it, or use; /// a stub to implement lazy compilation if available. See; /// getPointerToFunction for the requirements on destroying F.; ///; /// This function is deprecated for the MCJIT execution engine. Use; /// getFunctionAddress instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:153,stub,stub,153,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['stub'],['stub']
Testability,"/// getSplitIteration - Give a dependence that's splittable at some; /// particular level, return the iteration that should be used to split; /// the loop.; ///; /// Generally, the dependence analyzer will be used to build; /// a dependence graph for a function (basically a map from instructions; /// to dependences). Looking for cycles in the graph shows us loops; /// that cannot be trivially vectorized/parallelized.; ///; /// We can try to improve the situation by examining all the dependences; /// that make up the cycle, looking for ones we can break.; /// Sometimes, peeling the first or last iteration of a loop will break; /// dependences, and there are flags for those possibilities.; /// Sometimes, splitting a loop at some other iteration will do the trick,; /// and we've got a flag for that case. Rather than waste the space to; /// record the exact iteration (since we rarely know), we provide; /// a method that calculates the iteration. It's a drag that it must work; /// from scratch, but wonderful in that it's possible.; ///; /// Here's an example:; ///; /// for (i = 0; i < 10; i++); /// A[i] = ...; /// ... = A[11 - i]; ///; /// There's a loop-carried flow dependence from the store to the load,; /// found by the weak-crossing SIV test. The dependence will have a flag,; /// indicating that the dependence can be broken by splitting the loop.; /// Calling getSplitIteration will return 5.; /// Splitting the loop breaks the dependence, like so:; ///; /// for (i = 0; i <= 5; i++); /// A[i] = ...; /// ... = A[11 - i]; /// for (i = 6; i < 10; i++); /// A[i] = ...; /// ... = A[11 - i]; ///; /// breaks the dependence and allows us to vectorize/parallelize; /// both loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:1256,test,test,1256,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['test'],['test']
Testability,"/// getTargetIndexName - If this MachineOperand is a TargetIndex that has a; /// name, attempt to get the name. Returns nullptr if the TargetIndex does not; /// have a name. Asserts if MO is not a TargetIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:174,Assert,Asserts,174,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Assert'],['Asserts']
Testability,/// getTestBranchTargetOpValue - Return the encoded value for a test-bit-and-; /// branch target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp:64,test,test-bit-and,64,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,2,['test'],['test-bit-and']
Testability,"/// getX - If constraint is a point <X, Y>, returns X.; /// Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:70,assert,assert,70,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['assert'],['assert']
Testability,"/// getY - If constraint is a point <X, Y>, returns Y.; /// Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:70,assert,assert,70,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['assert'],['assert']
Testability,"/// handleModeAttr - This attribute modifies the width of a decl with primitive; /// type.; ///; /// Despite what would be logical, the mode attribute is a decl attribute, not a; /// type attribute: 'int ** __attribute((mode(HI))) *G;' tries to make 'G' be; /// HImode, not an intermediate pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:123,log,logical,123,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['log'],['logical']
Testability,"/// handleOperand - Converts a single operand from the LLVM table format to; /// the emitted table format, handling any duplicate operands it encounters; /// and then one non-duplicate.; ///; /// @param optional - Determines whether to assert that the; /// operand exists.; /// @param operandIndex - The index into the generated operand table.; /// Incremented by this function one or more; /// times to reflect possible duplicate; /// operands).; /// @param physicalOperandIndex - The index of the current operand into the; /// set of non-duplicate ('physical') operands.; /// Incremented by this function once.; /// @param numPhysicalOperands - The number of non-duplicate operands in the; /// instructions.; /// @param operandMapping - The operand mapping, which has an entry for; /// each operand that indicates whether it is a; /// duplicate, and of what.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.h:236,assert,assert,236,interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.h,1,['assert'],['assert']
Testability,/// i386 pointer jump stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// jmpq *ptr,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:22,stub,stub,22,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,1,['stub'],['stub']
Testability,"/// in addition to interface we also need:; /// Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:56,Test,TestStatSampler,56,roofit/roostats/inc/RooStats/NeymanConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h,2,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:346,log,log,346,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['log'],['log']
Testability,"/// interface to set conditional observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:51,test,test,51,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['test'],['test']
Testability,"/// interface to set global observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:46,test,test,46,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['test'],['test']
Testability,/// isBlockAddress - Tests if this is a MO_BlockAddress operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:21,Test,Tests,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isCImm - Test if this is a MO_CImmediate operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:13,Test,Test,13,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Test']
Testability,/// isCPI - Tests if this is a MO_ConstantPoolIndex operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Test,Tests,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isExecutingJIT - Returns true if bugpoint is currently testing the JIT; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:59,test,testing,59,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['test'],['testing']
Testability,/// isFI - Tests if this is a MO_FrameIndex operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:11,Test,Tests,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isFPImm - Tests if this is a MO_FPImmediate operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:14,Test,Tests,14,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isGlobal - Tests if this is a MO_GlobalAddress operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:15,Test,Tests,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isImm - Tests if this is a MO_Immediate operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Test,Tests,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isInt32Immediate - This method tests to see if the node is a 32-bit constant; /// operand. If so Imm will receive the 32-bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:35,test,tests,35,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,2,['test'],['tests']
Testability,/// isInt64Immediate - This method tests to see if the node is a 64-bit constant; /// operand. If so Imm will receive the 64-bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:35,test,tests,35,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['test'],['tests']
Testability,/// isInt64Immediate - This method tests to see if the value is a 64-bit; /// constant operand. If so Imm will receive the 64-bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:35,test,tests,35,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['test'],['tests']
Testability,/// isIntImmediate - This method tests to see if the node is a constant; /// operand. If so Imm will receive the 32-bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:33,test,tests,33,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['test'],['tests']
Testability,"/// isIntS34Immediate - This method tests if value of node given can be; /// accurately represented as a sign extension from a 34-bit value. If so,; /// this returns true and the immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:36,test,tests,36,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['test'],['tests']
Testability,"/// isIntegerConstantExpr - this recursive routine will test if an expression is; /// an integer constant expression.; /// FIXME: Pass up a reason why! Invalid operation in i-c-e, division by zero,; /// comma, etc; // CheckICE - This function does the fundamental ICE checking: the returned; // ICEDiag contains an ICEKind indicating whether the expression is an ICE,; // and a (possibly null) SourceLocation indicating the location of the problem.; //; // Note that to reduce code duplication, this helper does no evaluation; // itself; the caller checks whether the expression is evaluatable, and; // in the rare cases where CheckICE actually cares about the evaluated; // value, it calls into Evaluate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:56,test,test,56,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['test'],['test']
Testability,/// isIntegerType() does *not* include complex integers (a GCC extension).; /// isComplexIntegerType() can be used to test for complex integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:118,test,test,118,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['test'],['test']
Testability,"/// isInteresting - Test whether the given expression is ""interesting"" when; /// used by the given expression, within the context of analyzing the; /// given loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVUsers.cpp:20,Test,Test,20,interpreter/llvm-project/llvm/lib/Analysis/IVUsers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVUsers.cpp,1,['Test'],['Test']
Testability,/// isJTI - Tests if this is a MO_JumpTableIndex operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Test,Tests,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isLogicalImmediate - Return true if the immediate is valid for a logical; /// immediate instruction of the given register size. Return false otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:69,log,logical,69,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['log'],['logical']
Testability,/// isLoopBackedgeGuardedByCond - Test whether the backedge of the loop is; /// protected by a conditional between LHS and RHS. This is used to; /// to eliminate casts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:34,Test,Test,34,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Test'],['Test']
Testability,/// isMBB - Tests if this is a MO_MachineBasicBlock operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Test,Tests,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isMetadata - Tests if this is a MO_Metadata operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:17,Test,Tests,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isNegative - Test whether the quantity is less than zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:17,Test,Test,17,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['Test'],['Test']
Testability,/// isNotObjectErrorInvalidFileType() is used when looping through the children; /// of an archive after calling getAsBinary() on the child and it returns an; /// llvm::Error. In the cases we want to loop through the children and ignore the; /// non-objects in the archive this is used to test the error to see if an; /// error() function needs to called on the llvm::Error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:289,test,test,289,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h,1,['test'],['test']
Testability,/// isNullPointerConstant - C99 6.3.2.3p3 - Test if this reduces down to; /// a Null pointer constant. The return value can further distinguish the; /// kind of NULL pointer constant that was detected.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:44,Test,Test,44,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['Test'],['Test']
Testability,/// isOne - Test whether the quantity equals one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:12,Test,Test,12,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['Test'],['Test']
Testability,/// isPositive - Test whether the quantity is greater than zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:17,Test,Test,17,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['Test'],['Test']
Testability,/// isPowerOfTwo - Test whether the quantity is a power of two.; /// Zero is not a power of two.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:19,Test,Test,19,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['Test'],['Test']
Testability,/// isRegLiveOut - Tests if this is a MO_RegisterLiveOut operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:19,Test,Tests,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isRegMask - Tests if this is a MO_RegisterMask operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:16,Test,Tests,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isSchedulingBoundary - Test if the given instruction should be; /// considered a scheduling boundary. This primarily includes labels; /// and terminators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:27,Test,Test,27,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['Test'],['Test']
Testability,"/// isSrcFile - Is this a source file, i.e. something that still has to be; /// preprocessed. The logic behind this is the same that decides if the first; /// compilation phase is a preprocessing one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Types.h:98,log,logic,98,interpreter/llvm-project/clang/include/clang/Driver/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Types.h,1,['log'],['logic']
Testability,/// isSubsetOf - Test whether this class is a subset of \p RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:17,Test,Test,17,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['Test'],['Test']
Testability,/// isSymbol - Tests if this is a MO_ExternalSymbol operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:15,Test,Tests,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,/// isTargetIndex - Tests if this is a MO_TargetIndex operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:20,Test,Tests,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,"/// isValidDecodeLogicalImmediate - Check to see if the logical immediate value; /// in the form ""N:immr:imms"" (where the immr and imms fields are each 6 bits); /// is a valid encoding for an integer value with regSize bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:56,log,logical,56,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['log'],['logical']
Testability,"/// jit-link the given LinkGraph.; ///; /// If PrePrunePasses is empty then a default mark-live pass will be inserted; /// that will mark all exported atoms live. If PrePrunePasses is not empty, the; /// caller is responsible for including a pass to mark atoms as live.; ///; /// If PostPrunePasses is empty then a default GOT-and-stubs insertion pass will; /// be inserted. If PostPrunePasses is not empty then the caller is responsible; /// for including a pass to insert GOT and stub edges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h:331,stub,stubs,331,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h,2,['stub'],"['stub', 'stubs']"
Testability,"/// jit-link the given ObjBuffer, which must be a MachO object file.; ///; /// Uses conservative defaults for GOT and stub handling based on the target; /// platform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO.h:118,stub,stub,118,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO.h,1,['stub'],['stub']
Testability,"/// jit-link the given object buffer, which must be a ELF ppc64le object file.; ///; /// WARNING: The big-endian backend has not been tested yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h:134,test,tested,134,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h,1,['test'],['tested']
Testability,"/// jit-link the given object buffer, which must be a MachO arm64 object file.; ///; /// If PrePrunePasses is empty then a default mark-live pass will be inserted; /// that will mark all exported atoms live. If PrePrunePasses is not empty, the; /// caller is responsible for including a pass to mark atoms as live.; ///; /// If PostPrunePasses is empty then a default GOT-and-stubs insertion pass will; /// be inserted. If PostPrunePasses is not empty then the caller is responsible; /// for including a pass to insert GOT and stub edges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h:376,stub,stubs,376,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h,2,['stub'],"['stub', 'stubs']"
Testability,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1418,assert,asserts,1418,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,2,['assert'],['asserts']
Testability,/// linearFunctionTestReplace policy. Return true unless we can show that the; /// current exit test is already sufficiently canonical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:96,test,test,96,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['test']
Testability,"/// loongarch stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// pcalau12i $t8, %page20(ptr); /// ld.[w/d] $t8, %pageoff12(ptr); /// jr $t8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:14,stub,stub,14,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,1,['stub'],['stub']
Testability,"/// processLogicalImmediate - Determine if an immediate value can be encoded; /// as the immediate operand of a logical instruction for the given register; /// size. If so, return true with ""encoding"" set to the encoded value in; /// the form N:immr:imms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:112,log,logical,112,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['log'],['logical']
Testability,/// relative logical shift left,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,log,logical,13,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['logical']
Testability,/// relative logical shift right,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,log,logical,13,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['log'],['logical']
Testability,"/// remove - Creates a new immutable set that contains all of the values; /// of the original set with the exception of the specified value. If; /// the original set did not contain the value, the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:311,log,logarithmic,311,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['log'],['logarithmic']
Testability,"/// return (logical) page size of the system",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:12,log,logical,12,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['log'],['logical']
Testability,"/// return the logical page size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:15,log,logical,15,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['log'],['logical']
Testability,"/// return the profile log-likelihood ratio function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h:23,log,log-likelihood,23,roofit/roostats/inc/RooStats/LikelihoodInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h,1,['log'],['log-likelihood']
Testability,"/// returns -logL(poi, conditional MLE of nuisance params); /// it does not subtract off the global MLE; /// because nuisance parameters of null and alternate may not; /// be the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h:13,log,logL,13,roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,1,['log'],['logL']
Testability,"/// safe evaluation of log(x) with a protections against negative or zero argument to the log; /// smooth linear extrapolation below function values smaller than epsilon; /// (better than a simple cut-off)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:23,log,log,23,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,2,['log'],['log']
Testability,"/// set numerical error in test statistic evaluation (default is zero)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:27,test,test,27,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['test'],['test']
Testability,"/// set test statistic for one sided (upper limits)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:8,test,test,8,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h,1,['test'],['test']
Testability,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:24,test,test,24,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,8,['test'],['test']
Testability,"/// set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:24,test,test,24,roofit/roostats/inc/RooStats/IntervalCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h,1,['test'],['test']
Testability,"/// set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:24,test,test,24,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h,1,['test'],['test']
Testability,"/// set the test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:12,test,test,12,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['test'],['test']
Testability,"/// set the test statistics for one-sided discovery",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:12,test,test,12,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h,1,['test'],['test']
Testability,"/// set the test statistics for two sided (in case of upper limits; /// for discovery does not make really sense)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:12,test,test,12,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h,1,['test'],['test']
Testability,"/// specify the observables in the dataset (needed to evaluate the test statistic)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:67,test,test,67,roofit/roostats/inc/RooStats/TestStatSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h,2,['test'],['test']
Testability,"/// specify the values of parameters used when evaluating test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:58,test,test,58,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,2,['test'],['test']
Testability,"/// split functions in a Module into two groups: those that are under; /// consideration for miscompilation vs. those that are not, and test; /// accordingly. Each group of functions becomes a separate Module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:136,test,test,136,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,"/// strongSIVtest - Tests the strong SIV subscript pair (Src and Dst); /// for dependence.; /// Things of the form [c1 + a*i] and [c2 + a*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction and distance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:20,Test,Tests,20,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// symbolicRDIVtest - Tests the RDIV subscript pair for dependence.; /// Things of the form [c1 + a*i] and [c2 + b*j],; /// where i and j are induction variable, c1 and c2 are loop invariant,; /// and a and b are constants.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Works in some cases that exactRDIVtest doesn't,; /// and vice versa. Can also be used as a backup for; /// ordinary SIV tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:23,Test,Tests,23,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,"['Test', 'test']","['Tests', 'tests']"
Testability,/// test - Check if (This - RHS) is zero.; /// This is the same as reset(RHS) and any().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,test,test,4,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,1,['test'],['test']
Testability,"/// test free function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:4,test,test,4,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"/// test gradient (ask from minimizer gradient vector)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:4,test,test,4,math/mathmore/src/GSLMultiMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h,1,['test'],['test']
Testability,"/// test gradient (ask from solver gradient vector)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:4,test,test,4,math/mathmore/src/GSLMultiFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h,1,['test'],['test']
Testability,"/// test gradient (require a vector gradient)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:4,test,test,4,math/mathmore/src/GSLMultiMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h,1,['test'],['test']
Testability,"/// test of the statistical functions cdf and quantiles; //#define NO_MATHCORE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:4,test,test,4,math/mathmore/test/testStatFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx,1,['test'],['test']
Testability,"/// test using abs and relative tolerance; /// |dx| < absTol + relTol*|x| for every component",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:4,test,test,4,math/mathmore/src/GSLMultiFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h,2,['test'],['test']
Testability,"/// test using abs tolerance; /// Sum |f|_i < absTol",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:4,test,test,4,math/mathmore/src/GSLMultiRootSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h,1,['test'],['test']
Testability,/// testBounds - Returns true iff the current bounds are plausible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:4,test,testBounds,4,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['test'],['testBounds']
Testability,/// testMIV - Tests the MIV subscript pair (Src and Dst) for dependence.; /// Returns true if dependence disproved.; /// Can sometimes refine direction vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:4,test,testMIV,4,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,"['Test', 'test']","['Tests', 'testMIV']"
Testability,"/// testRDIV - Tests the RDIV subscript pair (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*j]; /// where i and j are induction variables, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// With minor algebra, this test can also be used for things like; /// [c1 + a1*i + a2*j][c2].; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Marks the Result as inconsistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:4,test,testRDIV,4,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,"['Test', 'test']","['Tests', 'test', 'testRDIV']"
Testability,"/// testSIV - Tests the SIV subscript pair (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*j], where; /// i and j are induction variables, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction vector entry and, when possible,; /// the distance vector entry.; /// If the dependence isn't proven to exist,; /// marks the Result as inconsistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:4,test,testSIV,4,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,"['Test', 'test']","['Tests', 'testSIV']"
Testability,"/// testZIV - Tests the ZIV subscript pair (Src and Dst) for dependence.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// If the dependence isn't proven to exist,; /// marks the Result as inconsistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:4,test,testZIV,4,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,"['Test', 'test']","['Tests', 'testZIV']"
Testability,"/// testing weight state gradient; // Weights State, k = 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h:4,test,testing,4,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,1,['test'],['testing']
Testability,/// testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:4,test,testing,4,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,1,['test'],['testing']
Testability,"/// tryAddingSymbolicOperand - tryAddingSymbolicOperand trys to add a symbolic; /// operand in place of the immediate Value in the MCInst. The immediate; /// Value has not had any PC adjustment made by the caller. If the instruction; /// is a branch that adds the PC to the immediate Value then isBranch is; /// Success, else Fail. If GetOpInfo is non-null, then it is called to get any; /// symbolic information at the Address for this instrution. If that returns; /// non-zero then the symbolic information it returns is used to create an; /// MCExpr and that is added as an operand to the MCInst. If GetOpInfo(); /// returns zero and isBranch is Success then a symbol look up for; /// Address + Value is done and if a symbol is found an MCExpr is created with; /// that, else an MCExpr with Address + Value is created. If GetOpInfo(); /// returns zero and isBranch is Fail then the Opcode of the MCInst is; /// tested and for ADRP an other instructions that help to load of pointers; /// a symbol look up is done to see it is returns a specific reference type; /// to add to the comment stream. This function returns Success if it adds; /// an operand to the MCInst and Fail otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp:914,test,tested,914,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp,1,['test'],['tested']
Testability,"/// validateTree - A utility method that checks that the balancing and; /// ordering invariants of the tree are satisfied. It is a recursive; /// method that returns the height of the tree, which is then consumed; /// by the enclosing validateTree call. External callers should ignore the; /// return value. An invalid tree will cause an assertion to fire in; /// a debug build.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:338,assert,assertion,338,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['assert'],['assertion']
Testability,"/// visitBitTestCase - this function produces one ""bit test""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:55,test,test,55,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['test'],['test']
Testability,"/// visitBitTestHeader - This function emits necessary code to produce value; /// suitable for ""bit tests""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:100,test,tests,100,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['test'],['tests']
Testability,"/// weakCrossingSIVtest - Tests the weak-crossing SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a*i] and [c2 - a*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.; /// Marks the dependence as splitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:26,Test,Tests,26,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// weakZeroDstSIVtest - Tests the weak-zero SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a*i] and [c2],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant. See also weakZeroSrcSIVtest.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.; /// If loop peeling will break the dependence, mark appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:25,Test,Tests,25,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,"/// weakZeroSrcSIVtest - Tests the weak-zero SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1] and [c2 + a*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant. See also weakZeroDstSIVtest.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.; /// If loop peeling will break the dependence, mark appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:25,Test,Tests,25,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Tests']
Testability,/// writeIFS() writes a Text-Based ELF stub to a file using the latest version; /// of the YAML parser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp:39,stub,stub,39,interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,1,['stub'],['stub']
Testability,/// x86-64 pointer jump stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// jmpq *ptr(%rip),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:24,stub,stub,24,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,1,['stub'],['stub']
Testability,"/// zip iterator that assumes that all iteratees have the same length.; /// In builds with assertions on, this assumption is checked before the; /// iteration starts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:91,assert,assertions,91,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['assert'],['assertions']
Testability,"/// zip iterator that, for the sake of efficiency, assumes the first iteratee to; /// be the shortest. Iteration continues until the end of the first iteratee is; /// reached. In builds with assertions on, we check that the assumption about; /// the first iteratee being the shortest holds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:191,assert,assertions,191,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['assert'],['assertions']
Testability,"//////////////////////////////////////////////////////////////////////////////////////////////////////////////////; /// Test that the model consists of what is expected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:120,Test,Test,120,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Returns true if image production for specified browser kind is supported; /// If browser not specified - use currently configured browser or try to test existing web browsers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:253,test,test,253,gui/webdisplay/src/RWebDisplayHandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx,1,['test'],['test']
Testability,"///////////////////////////////////////////////////////////////////////////////////////////////////; ///// Adding datas to IPythonInteractive and testing if it got all of them correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:146,test,testing,146,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['testing']
Testability,"///////////////////////////////////////////////////////////////////////////////////////////////////; ///// Run tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:111,test,tests,111,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"///////////////////////////////////////////////////////////////////////////////////////////////////; ///// Testing creating IPythonInteractive object and initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:107,Test,Testing,107,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['Test'],['Testing']
Testability,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add font to static list of fonts supported by the canvas; /// Name specifies name of the font, second is font file with .ttf or .woff2 extension; /// Only True Type Fonts (ttf) are supported by PDF; /// Returns font index which can be used in; /// auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2);; /// gStyle->SetStatFont(font_indx);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:390,test,test,390,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,2,['test'],['test']
Testability,"/////////////////////////////////////////////////////////////////////////////////////////////////; /// Add attribute, converting to best possible type; /// Tested boolean, int, double. If none works - store as a string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrMap.cxx:156,Test,Tested,156,graf2d/gpadv7/src/RAttrMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrMap.cxx,1,['Test'],['Tested']
Testability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Get content of log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx:115,log,log,115,gui/browserv7/src/RBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx,1,['log'],['log']
Testability,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:616,test,tested,616,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['test'],['tested']
Testability,"/////////////////////////////////////////////////////////////////////////////////////////; /*; We Get the attributes (if any) of the tag as {attribute_name, attribute_value} couples; If there are no attributes, I don't fill the out vector and after that in the Parse(); method check if out is empty. All the error handling conserning attributes is done here; and this is the reason why the logic is somtimes a bit obscure.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:390,log,logic,390,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['log'],['logic']
Testability,"//////////////////////////////////////////////////////////////////////////////////////; /// TestTriangleHandler is just helper class to get access to protected members of TriangleCollector; /// Hide static declarations, let use ""native"" GL types; //////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveGluTess.cxx:92,Test,TestTriangleHandler,92,graf3d/eve7/src/REveGluTess.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveGluTess.cxx,1,['Test'],['TestTriangleHandler']
Testability,"///////////////////////////////////////////////////////////////////////////////////; /// Configures recording of communication data in protocol file; /// Provided filename will be used to store JSON array with names of written files - text or binary; /// If data was send from client, ""send"" entry will be placed. JSON file will look like:; ///; /// [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; ///; /// If empty file name is provided, data recording will be disabled; /// Recorded data can be used in JSROOT directly to test client code without running C++ server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:530,test,test,530,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /*! \class TGraphPainter; \ingroup Histpainter; \brief The graph painter class. Implements all graphs' drawing's options. - [Introduction](\ref GrP0); - [Graphs' plotting options](\ref GrP1); - [Exclusion graphs](\ref GrP2); - [Graphs with error bars](\ref GrP3); - [TGraphErrors](\ref GrP3a); - [TGraphAsymmErrors](\ref GrP3b); - [TGraphBentErrors](\ref GrP3c); - [TGraphMultiErrors](\ref GrP3d); - [TGraphPolar options](\ref GrP4); - [Colors automatically picked in palette](\ref GrP5); - [Reverse graphs' axis](\ref GrP6); - [Graphs in logarithmic scale](\ref GrP7); - [Highlight mode for graph](\ref GrP8). \anchor GrP0; ### Introduction. Graphs are drawn via the painter `TGraphPainter` class. This class; implements techniques needed to display the various kind of; graphs i.e.: `TGraph`, `TGraphErrors`, `TGraphBentErrors` and `TGraphAsymmErrors`. To draw a graph `graph` it's enough to do:. graph->Draw(""AL"");. The option `AL` in the `Draw()` method means:. 1. The axis should be drawn (option `A`),; 2. The graph should be drawn as a simple line (option `L`). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; `A` must be specified. `TGraphPainter` offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call `Draw()` again; the; image will be refreshed the next time the pad will be updated. A pad is updated; after one of these three actions:. 1. a carriage return on the ROOT command line,; 2. a click inside the pad,; 3. a call to `TPad::Update`. \anchor GrP1; ### Graphs' plotting options; Graphs can be drawn with the following options:. | Option | Description |; |----------|--------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:621,log,logarithmic,621,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /**; Calculates the boundaries for the frequentist Clopper-Pearson interval. This interval is recommended by the PDG. \param[in] total number of total events; \param[in] passed 0 <= number of passed events <= total; \param[in] level confidence level; \param[in] bUpper true - upper boundary is returned; ;false - lower boundary is returned. Calculation:. The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \geq passed; total) &=& \frac{1 - level}{2}\\; P(x \geq passed; total) &=& 1 - P(x \leq passed - 1; total)\\; &=& 1 - \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed} (1 - t)^{passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& I_{\varepsilon}(passed,total - passed + 1); \f}; The lower boundary is therefore given by the \f$ \frac{1 - level}{2}\f$ quantile; of the beta distribution. The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \leq passed; total) &=& \frac{1 - level}{2}\\; P(x \leq passed; total) &=& \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed - 1} (1 - t)^{passed} dt\\; &=& \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed} (1 - t)^{total - passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed - 1} dt\\; \Rightarrow 1 - \frac{1 - level}{2} &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed -1} dt\\; \frac{1 + level}{2} &=& I_{\varepsilon}(passed + 1,total - passed); \f}; The upper boundary is therefore given by the \f$\frac{1 + level}{2}\f$ quantile; of the beta distribution. Note: The connection between the binomial distribution and the regularized; incomplete beta function \f$ I_{\varepsilon}(\alpha,\beta)\",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:521,test,test,521,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; // //; // From now on we have the methods concerning the unzipping part of the cache //; // //; ////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Read the logical record header from the buffer buf.; /// That must be the pointer tho the header part not the object by itself and; /// must contain data of at least maxbytes; /// Returns nread;; ///; /// In output arguments:; ///; /// - nbytes : number of bytes in record; /// if negative, this is a deleted record; /// if 0, cannot read record, wrong value of argument first; /// - objlen : uncompressed object size; /// - keylen : length of logical record header; ///; /// Note that the arguments objlen and keylen are returned only; /// if maxbytes >=16; /// Note: This was adapted from TFile... so some things dont apply",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCacheUnzip.cxx:355,log,logical,355,tree/tree/src/TTreeCacheUnzip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCacheUnzip.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; // Change log:; // March 20, 2001: add extra parens to STATIC_CHECK - it looked like a fun; // definition; // June 20, 2001: ported by Nick Thurn to gcc 2.95.3. Kudos, Nick!!!; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/StaticCheck.h:92,log,log,92,math/smatrix/inc/Math/StaticCheck.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/StaticCheck.h,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; // GUI Test code; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:89,Test,Test,89,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st 2D options Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Test,Test,101,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st TGaxis test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st TGraph test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st TGraph2D Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:99,Test,Test,99,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st TLatex test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st TText test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:96,test,test,96,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 1st complex drawing and TPad test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,test,test,115,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd 2D options Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Test,Test,101,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TGaxis test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TGraph test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TGraph2D Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:99,Test,Test,99,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TLatex test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TText test. A very long text string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:96,test,test,96,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 2nd complex drawing and TPad test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,test,test,115,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 3rd 2D options Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Test,Test,101,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TGaxis test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TGraph test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TGraph2D Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:99,Test,Test,99,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TLatex test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 4th 2D options Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Test,Test,101,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 4th TGaxis test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 4th TGraph test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 4th TLatex test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 5th 2D options Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Test,Test,101,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 5th TGaxis test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 5th TLatex test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// 6th 2D options Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Test,Test,101,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:312,test,tested,312,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Activate call profile if flag is set to true. A 2-D histogram is kept that stores the required number; /// of function calls versus the value of x, the convolution variable; ///; /// All clones of RooNumConvolution objects will keep logging to the histogram of the original class; /// so that performance of temporary object clones, such as used in e.g. fitting, plotting and generating; /// are all logged in a single place.; ///; /// Function caller should take ownership of profiling histogram as it is not deleted at the RooNumConvolution dtor; ///; /// Calling this function with flag set to false will deactivate call profiling and delete the profiling histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx:319,log,logging,319,roofit/roofitcore/src/RooNumConvolution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx,2,['log'],"['logged', 'logging']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Add a message logging stream for message with given RooFit::MsgLevel or higher.; /// Higher means that messages with higher priority/severity are issued.; ///; /// This method accepts the following arguments to configure the stream:; /// <table>; /// <tr><th> Output Style options <th>; /// <tr><td> Prefix(bool flag=true) <td> Prefix all messages in this stream with Topic/Originator information; /// <tr><th> Filtering options <th>; /// <tr><td> Topic() <td> Restrict stream to messages on given topic; /// <tr><td> ObjectName(const char*) <td> Restrict stream to messages from object with given name; /// <tr><td> ClassName(const char*) <td> Restrict stream to messages from objects with given class name; /// <tr><td> BaseClassName(const char*)<td> Restrict stream to messages from objects with given base class name; /// <tr><td> LabelName(const chat*) <td> Restrict stream to messages from objects setAttribute(const char*) tag with given name; /// <tr><th> Output redirection options <th>; /// <tr><td> OutputFile(const char*) <td> Send output to file with given name. Multiple streams can write to same file.; /// <tr><td> OutputStream(ostream&) <td> Send output to given C++ stream. Multiple message streams can write to same c++ stream; /// </table>; /// The return value is the unique ID of the defined stream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:100,log,logging,100,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:253,test,test,253,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Add additional toy-MC experiments to the current results.; /// Use the data test statistics of the added object if it is not already; /// set (otherwise, ignore the new one).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:162,test,test,162,roofit/roostats/src/HypoTestResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:409,log,logical,409,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Add extra information on component test statistics when printing; /// itself as part of a tree structure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:121,test,test,121,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Add part of log file concerning TQueryResult pq to its macro; /// container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx:98,log,log,98,proof/proof/src/TQueryResultManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// All Kind of TMultigraph test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:110,test,test,110,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// All axes in log scale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoord.cxx:98,log,log,98,tree/treeviewer/src/TParallelCoord.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoord.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Alternative constructor; /// User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:141,test,test,141,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Analyze and print reports for performed tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:126,test,tests,126,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Apply selected log level on current session.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:101,log,log,101,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Apply the camera to the current GL context, setting the viewport, projection; /// and modelview matrices. After this vertices etc can be directly entered; /// in the world frame. This also updates the cached frustum values, enabling; /// all the projection, overlap tests etc defined in TGLCamera to be used.; ///; /// Arguments are:; /// - 'box' - view volume box - ignored for ortho camera. Assumed to be same; /// as one passed to Setup().; /// - 'pickRect' - optional picking rect. If non-null, restrict drawing to this; /// viewport rect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOrthoCamera.cxx:352,test,tests,352,graf3d/gl/src/TGLOrthoCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOrthoCamera.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Apply the camera to the current GL context, setting the viewport, projection; /// and modelview matrices. After this vertices etc can be directly entered; /// in the world frame. This also updates the cached frustum values, enabling; /// all the projection, overlap tests etc defined in TGLCamera to be used.; ///; /// Arguments are:; /// - 'box' - view volume box - used to adjust near/far clipping; /// - 'pickRect' - optional picking rect. If non-null, restrict drawing to this; /// viewport rect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPerspectiveCamera.cxx:352,test,tests,352,graf3d/gl/src/TGLPerspectiveCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPerspectiveCamera.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Approximation of the log of the complex error function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooGExpModel.cxx:107,log,log,107,roofit/roofit/src/RooGExpModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooGExpModel.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Ask for remote logs in the range [start, end]. If start == -1 all the; /// messages not yet received are sent back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:101,log,logs,101,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Ask proof session for logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:108,log,logs,108,gui/sessionviewer/src/TProofProgressDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Assert cell id cache is ok.; /// Returns true if the cache has been updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCalo.cxx:86,Assert,Assert,86,graf3d/eve/src/TEveCalo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCalo.cxx,2,['Assert'],['Assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Assert directory path 'dirpath', with the ownership of the last already; /// existing subpath.; /// Return 0 on success, -1 on error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofOutputFile.cxx:86,Assert,Assert,86,proof/proof/src/TProofOutputFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofOutputFile.cxx,1,['Assert'],['Assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Assert extents of all sides of the bounding-box are at least epsilon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx:86,Assert,Assert,86,core/base/src/TAttBBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx,1,['Assert'],['Assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Assert that size of IntId array is compatible with the size of; /// the point array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEvePointSet.cxx:86,Assert,Assert,86,graf3d/eve/src/TEvePointSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEvePointSet.cxx,1,['Assert'],['Assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Asynchronous pad update.; /// In case of web-based canvas triggers update of the canvas on the client side,; /// but does not wait that real update is completed. Avoids blocking of caller thread.; /// Have to be used if called from other web-based widget to avoid logical dead-locks.; /// In case of normal canvas just canvas->Update() is performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:350,log,logical,350,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Attempt to recover file if not correctly closed; ///; /// The function returns the number of keys that have been recovered.; /// If no keys can be recovered, the file will be declared Zombie by; /// the calling function. This function is automatically called when; /// opening a file.; /// If the file is open in read only mode, the file is not modified.; /// If open in update mode and the function finds something to recover,; /// a new directory header is written to the file. When opening the file gain; /// no message from Recover will be reported.; /// If keys have been recovered, the file is usable and you can safely; /// read the corresponding objects.; /// If the file is not usable (a zombie), you can test for this case; /// with code like:; ///; /// ~~~{.cpp}; /// TFile f(""myfile.root"");; /// if (f.IsZombie()) {<actions to take if file is unusable>}; /// ~~~; ///; /// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; /// You can test if the file has been recovered with; ///; /// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; ///; /// When writing TTrees to a file, it is important to save the Tree header; /// at regular intervals (see TTree::AutoSave). If a file containing a Tree; /// is recovered, the last Tree header written to the file will be used.; /// In this case all the entries in all the branches written before writing; /// the header are valid entries.; /// One can disable the automatic recovery procedure by setting; ///; /// TFile.Recover 0; ///; /// in the <em>system.rootrc</em> file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:800,test,test,800,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,3,"['Test', 'test']","['TestBit', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Base of natural log: \f$ e \f$",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:102,log,log,102,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Base-10 log of e (to convert ln to log)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:94,log,log,94,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Benchmark destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:86,Benchmark,Benchmark,86,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Bidiagonalize the (m x n) - matrix a (stored in v) through a series of Householder; /// transformations applied to the left (Q^T) and to the right (H) of a ,; /// so that A = Q . C . H^T with matrix C bidiagonal. Q and H are orthogonal matrices .; ///; /// Output:; /// v - (n x n) - matrix H in the (n x n) part of v; /// u - (m x m) - matrix Q^T; /// sDiag - diagonal of the (m x n) C; /// oDiag - off-diagonal elements of matrix C; ///; /// Test code for the output:; /// ~~~; /// const Int_t nRow = v.GetNrows();; /// const Int_t nCol = v.GetNcols();; /// TMatrixD H(v); H.ResizeTo(nCol,nCol);; /// TMatrixD E1(nCol,nCol); E1.UnitMatrix();; /// TMatrixD Ht(TMatrixDBase::kTransposed,H);; /// Bool_t ok = kTRUE;; /// ok &= VerifyMatrixIdentity(Ht * H,E1,kTRUE,1.0e-13);; /// ok &= VerifyMatrixIdentity(H * Ht,E1,kTRUE,1.0e-13);; /// TMatrixD E2(nRow,nRow); E2.UnitMatrix();; /// TMatrixD Qt(u);; /// TMatrixD Q(TMatrixDBase::kTransposed,Qt);; /// ok &= VerifyMatrixIdentity(Q * Qt,E2,kTRUE,1.0e-13);; /// TMatrixD C(nRow,nCol);; /// TMatrixDDiag(C) = sDiag;; /// for (Int_t i = 0; i < nCol-1; i++); /// C(i,i+1) = oDiag(i+1);; /// TMatrixD A = Q*C*Ht;; /// ok &= VerifyMatrixIdentity(A,a,kTRUE,1.0e-13);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:530,Test,Test,530,math/matrix/src/TDecompSVD.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Build the list of workers. For this, extract the logs and take the names; /// of TProofLogElements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:135,log,logs,135,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate Chi square over either the test sample. The optional; /// argument coeff is a vector of coefficients to use in the; /// evaluation of the parameterisation. If coeff == 0, then the found; /// coefficients is used.; /// Used my MINUIT for fit (see TMultDimFit::Fit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:123,test,test,123,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate and return value of test statistic. If the test statistic; /// is calculated from a RooSimultaneous, the test statistic calculation; /// is performed separately on each simultaneous p.d.f component and associated; /// data, and then combined. If the test statistic calculation is parallelized,; /// partitions are calculated in nCPU processes and combined a posteriori.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:116,test,test,116,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,4,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate if the an object defined by world frame bounding box; /// is 'of interest' to the camera. This is defined as box:; ///; /// 1. intersecting completely or partially (kInside/kPartial) with; /// cameras interest box (fInterestBox); /// 2. having significant length OR volume ratio compared to this; /// interest box; ///; /// If a box is 'of interest' returns kTRUE, kFALSE otherwise. See; /// TGLCamera::UpdateInterest() for more details of camera interest; /// box.; ///; /// Note: Length/volume ratios NOT dependent on the projected size; /// of box at current camera configuration as we do not want; /// continual changes. This is used when (re) populating the scene; /// with objects from external client.; ///; /// TODO: Might be more logical to move this test out to client -; /// and have accessor for fInterestBox instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:835,log,logical,835,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,2,"['log', 'test']","['logical', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the ROC integral of a single classifier or even the; /// whole boosted classifier. The tree type (training or testing; /// sample) is specified by 'eTT'.; ///; /// If tree type kTraining is set, the original training sample is; /// used to compute the ROC integral (original weights).; ///; /// - singleMethod - if kTRUE, return ROC integral of single (last; /// trained) classifier; if kFALSE, return ROC; /// integral of full classifier; ///; /// - eTT - tree type (Types::kTraining / Types::kTesting); ///; /// - CalcOverlapIntergral - if kTRUE, the overlap integral of the; /// signal/background MVA distributions; /// is calculated and stored in; /// 'fOverlap_integral'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:206,test,testing,206,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:518,test,tested,518,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Kolmogorov distribution function,; ///; /// \f[; /// P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; /// \f]; ///; /// which gives the probability that Kolmogorov's test statistic will exceed; /// the value z assuming the null hypothesis. This gives a very powerful; /// test for comparing two one-dimensional distributions.; /// see, for example, Eadie et al, ""statistical Methods in Experimental; /// Physics', pp 269-270).; ///; /// This function returns the confidence level for the null hypothesis, where:; /// - \f$ z = dn \sqrt{n} \f$, and; /// - \f$ dn \f$ is the maximum deviation between a hypothetical distribution; /// function and an experimental distribution with; /// - \f$ n \f$ events; ///; /// NOTE: To compare two experimental distributions with m and n events,; /// use \f$ z = \sqrt{m n/(m+n)) dn} \f$; ///; /// Accuracy: The function is far too accurate for any imaginable application.; /// Probabilities less than \f$ 10^{-15} \f$ are returned as zero.; /// However, remember that the formula is only valid for ""large"" n.; ///; /// Theta function inversion formula is used for z <= 1; ///; /// This function was translated by Rene Brun from PROBKL in CERNLIB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:274,test,test,274,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 1:; /// Poisson background/ Binomial Efficiency; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:354,Test,Test,354,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 2:; /// Poisson background/ Gauss Efficiency; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:351,Test,Test,351,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 3:; /// Gauss background/ Gauss Efficiency; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:349,Test,Test,349,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 4:; /// Poiss background/Efficiency known; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:348,Test,Test,348,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 5:; /// Gauss background/Efficiency known; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:348,Test,Test,348,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 6:; /// Background known/Efficiency binomial; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:351,Test,Test,351,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Profile Likelihood for MODEL 7:; /// background known/Efficiency Gauss; /// - what = 1: Maximum likelihood estimate is returned; /// - what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; /// - what = 3: Profile Likelihood of Test hypothesis is returned; /// otherwise parameters as described in the beginning of the class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:348,Test,Test,348,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the cumulative distribution function of F-distribution; /// (see ROOT::Math::fdistribution_cdf).; /// This function occurs in the statistical test of whether two observed; /// samples have the same variance. For this test a certain statistic F,; /// the ratio of observed dispersion of the first sample to that of the; /// second sample, is calculated. N and M stand for numbers of degrees; /// of freedom in the samples 1-FDistI() is the significance level at; /// which the hypothesis ""1 has smaller variance than 2"" can be rejected.; /// A small numerical value of 1 - FDistI() implies a very significant; /// rejection, in turn implying high confidence in the hypothesis; /// ""1 has variance greater than 2"".; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:239,test,test,239,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Change dataset that is used to given one. If cloneData is true, a clone of; /// in the input dataset is made. If the test statistic was constructed with; /// a range specification on the data, the cloneData argument is ignored and; /// the data is always cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:203,test,test,203,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Change the format used for time plotting; ///; /// The format string for date and time use the same options as the one used; /// in the standard strftime C function, i.e. :; /// for date :; ///; /// %a abbreviated weekday name; /// %b abbreviated month name; /// %d day of the month (01-31); /// %m month (01-12); /// %y year without century; ///; /// for time :; ///; /// %H hour (24-hour clock); /// %I hour (12-hour clock); /// %p local equivalent of AM or PM; /// %M minute (00-59); /// %S seconds (00-61); /// %% %; ///; /// This function allows also to define the time offset. It is done via %F; /// which should be appended at the end of the format string. The time; /// offset has the following format: 'yyyy-mm-dd hh:mm:ss'; /// Example:; ///; /// h = new TH1F(""Test"",""h"",3000,0.,200000.);; /// h->GetXaxis()->SetTimeDisplay(1);; /// h->GetXaxis()->SetTimeFormat(""%d\/%m\/%y%F2000-02-28 13:00:01"");; ///; /// This defines the time format being ""dd/mm/yy"" and the time offset as the; /// February 28th 2003 at 13:00:01; ///; /// If %F is not specified, the time offset used will be the one defined by:; /// gStyle->SetTimeOffset. For example like that:; ///; /// TDatime da(2003,02,28,12,00,00);; /// gStyle->SetTimeOffset(da.Convert());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:857,Test,Test,857,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Change the right logo ( used for animation ).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.cxx:103,log,logo,103,test/RootShower/GTitleFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Change the right logo (used for animation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:103,log,logo,103,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Change the value of the static gSysLog to syslog.; /// Recognized values:; /// 0 log to syslog (for root started daemons); /// 1 log to stderr (for user started daemons)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:167,log,log,167,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Check if a file needs to be send to the slave. Use the following; /// algorithm:; /// - check if file appears in file map; /// - if yes, get file's modtime and check against time in map,; /// if modtime not same get md5 and compare against md5 in map,; /// if not same return kTRUE.; /// - if no, get file's md5 and modtime and store in file map, ask; /// slave if file exists with specific md5, if yes return kFALSE,; /// if no return kTRUE.; /// The options 'cpopt' define if to copy things from cache to sandbox and what.; /// To retrieve from the cache the binaries associated with the file TProof::kCpBin; /// must be set in cpopt; the default is copy everything.; /// Returns kTRUE in case file needs to be send, returns kFALSE in case; /// file is already on remote node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:593,sandbox,sandbox,593,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Check if the requesting {host,user} can be granted immediate; /// login on the base of the information found in /etc/hosts.equiv; /// and/or $HOME/.rhosts. The two files must be trustable, i.e. owned; /// and modifiable only by 'root' and by 'user', respectively (0600).; /// Returns 1 in case access can be granted, 0 in any other case; /// (errout contains a code for error logging on the client side); ///; /// NB: entries granting access in one of the two files cannot be; /// overriden in the other file; so, system admins cannot close; /// access from a host and user cannot stop access to their; /// account if the administrator has decided so; as an example,; /// if this entry is found in /etc/hosts.equiv; ///; /// remote.host.dom auser; ///; /// (allowing user named 'auser' from host 'remote.host.dom' to; /// login to any non-root local account without specifying a; /// password) the following entries in $home/.rhosts are ignored; ///; /// remote.host.dom -auser; /// -remote.host.dom; ///; /// and access to 'auser' is always granted. This is a ""feature""; /// of ruserok.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:152,log,login,152,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,3,['log'],"['logging', 'login']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Clear log window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:92,log,log,92,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Close connection to system log daemon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:113,log,log,113,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Compute integral (normalized cumulative sum of bins) w/o under/overflows; /// The result is stored in fIntegral and used by the GetRandom functions.; /// This function is automatically called by GetRandom when the fIntegral; /// array does not exist or when the number of entries in the histogram; /// has changed since the previous call to GetRandom.; /// The resulting integral is normalized to 1.; /// If the routine is called with the onlyPositive flag set an error will; /// be produced in case of negative bin content and a NaN value returned; /// \return 1 if success, 0 if integral is zero, NAN if onlyPositive-test fails",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:705,test,test,705,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Compute multiple values of Lognormal distribution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLognormal.cxx:113,Log,Lognormal,113,roofit/roofit/src/RooLognormal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLognormal.cxx,1,['Log'],['Lognormal']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Compute the logarithm of variables `gxwork` and `gywork`; /// according to the value of Options and put the results; /// in the variables `gxworkl` and `gyworkl`.; ///; /// npoints : Number of points in gxwork and in gywork.; ///; /// - opt = 1 ComputeLogs is called from PaintGrapHist; /// - opt = 0 ComputeLogs is called from PaintGraph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:98,log,logarithm,98,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['log'],['logarithm']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Computes density function for Student's t- distribution; /// (the probability function (integral of density) is computed in StudentI).; ///; /// First parameter stands for x - the actual variable of the; /// density function p(x) and the point at which the density is calculated.; /// Second parameter stands for number of degrees of freedom.; ///; /// About Student distribution:; /// Student's t-distribution is used for many significance tests, for example,; /// for the Student's t-tests for the statistical significance of difference; /// between two sample means and for confidence intervals for the difference; /// between two population means.; ///; /// Example: suppose we have a random sample of size n drawn from normal; /// distribution with mean Mu and st.deviation Sigma. Then the variable; ///; /// t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); ///; /// has Student's t-distribution with n-1 degrees of freedom.; ///; /// NOTE that this function's second argument is number of degrees of freedom,; /// not the sample size.; ///; /// As the number of degrees of freedom grows, t-distribution approaches; /// Normal(0,1) distribution.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:527,test,tests,527,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,2,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density function of F-distribution; /// (probability function, integral of density, is computed in FDistI).; ///; /// Parameters N and M stand for degrees of freedom of chi-squares; /// mentioned above parameter F is the actual variable x of the; /// density function p(x) and the point at which the density function; /// is calculated.; ///; /// ### About F distribution:; /// F-distribution arises in testing whether two random samples; /// have the same variance. It is the ratio of two chi-square; /// distributions, with N and M degrees of freedom respectively,; /// where each chi-square is first divided by it's number of degrees; /// of freedom.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:502,test,testing,502,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:110,Log,LogNormal,110,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,18,"['Log', 'log']","['LogNormal', 'logn', 'lognormal']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Construct MINUIT interface to given function. Function can be anything,; /// but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; /// (implemented by RooChi2Var). Other frequent use cases are a RooAddition; /// of a RooNLLVar plus a penalty or constraint term. This class propagates; /// all RooFit information (floating parameters, their values and errors); /// to MINUIT before each MINUIT call and propagates all MINUIT information; /// back to the RooFit object at the end of each call (updated parameter; /// values, their (asymmetric errors) etc. The default MINUIT error level; /// for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); /// value of the input function.; /// Constructor that accepts all configuration in struct with RooAbsReal likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:183,log,log,183,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Construct a Bukin PDF.; /// \param name The name of the PDF for RooFit's bookkeeping.; /// \param title The title for e.g. plotting it.; /// \param _x The variable.; /// \param _Xp The peak position.; /// \param _sigp The peak width as FWHM divided by 2*sqrt(2*log(2))=2.35; /// \param _xi Peak asymmetry. Use values around 0.; /// \param _rho1 Left tail. Use slightly negative starting values.; /// \param _rho2 Right tail. Use slightly positive starting values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBukinPdf.cxx:347,log,log,347,roofit/roofit/src/RooBukinPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBukinPdf.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Construct a confusion matrix for a multiclass classifier. The confusion; /// matrix compares, in turn, each class agaist all other classes in a pair-wise; /// fashion. In rows with index \f$ k_r = 0 ... K \f$, \f$ k_r \f$ is; /// considered signal for the sake of comparison and for each column; /// \f$ k_c = 0 ... K \f$ the corresponding class is considered background.; ///; /// Note that the diagonal elements will be returned as NaN since this will; /// compare a class against itself.; ///; /// \see TMVA::ResultsMulticlass::GetConfusionMatrix; ///; /// \param[in] effB The background efficiency for which to evaluate.; /// \param[in] type The data set on which to evaluate (training, testing ...).; ///; /// \return A matrix containing signal efficiencies for the given background; /// efficiency. The diagonal elements are NaN since this measure is; /// meaningless (comparing a class against itself).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:777,test,testing,777,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Construct a physical shape using arguments:; /// - ID - unique drawable id.; /// - logicalShape - bound logical shape; /// - transform - transform for placement of logical drawing; /// - invertedWind - use inverted face polygon winding?; /// - rgba - basic four component (RGBA) diffuse color",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:169,log,logicalShape,169,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,3,['log'],"['logical', 'logicalShape']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Construct a physical shape using arguments:; /// - id - unique drawable id.; /// - logicalShape - bound logical shape; /// - transform - 16 Double_t component transform for placement of logical drawing; /// - invertedWind - use inverted face polygon winding?; /// - rgba - basic four component (RGBA) diffuse color",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:169,log,logicalShape,169,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,3,['log'],"['logical', 'logicalShape']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of profile likelihood given input likelihood nll w.r.t; /// the given set of variables. The input log likelihood is minimized w.r.t; /// to all other variables of the likelihood at each evaluation and the; /// value of the global log likelihood minimum is always subtracted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProfileLL.cxx:196,log,log,196,roofit/roofitcore/src/RooProfileLL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProfileLL.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to (const) real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:576,test,test,576,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to a real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:570,test,test,570,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with index category. PDFs associated with indexCat; /// states can be added after construction with the addPdf() function.; ///; /// RooSimultaneous can function without having a PDF associated; /// with every single state. The normalization in such cases is taken; /// from the number of registered PDFs, but getVal() will assert if; /// when called for an unregistered index state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:422,assert,assert,422,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['assert'],['assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. When test stat sampler is not provided; /// uses ToyMCSampler and RatioOfProfiledLikelihoodsTestStat; /// and nToys = 1000.; /// User can : GetTestStatSampler()->SetNToys( # )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:104,test,test,104,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor; ///; /// Parameters:; ///; /// - int populationSize : defines the number of ""Individuals"" which are created and tested; /// within one Generation (Iteration of the Evolution); /// - std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin; /// gets the low and GetMax gets the high constraint of the variable; /// the size of ""ranges"" is the number of coefficients which are optimised; /// Purpose:; ///; /// Creates a random population with individuals of the size ranges.size()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:211,test,tested,211,tmva/tmva/src/GeneticAlgorithm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Copy a Tree with selection, make a clone of this Tree header, then copy the; /// selected entries.; ///; /// - selection is a standard selection expression (see TTreePlayer::Draw); /// - option is reserved for possible future use; /// - nentries is the number of entries to process (default is all); /// - first is the first entry to process (default is 0); ///; /// IMPORTANT: The copied tree stays connected with this tree until this tree; /// is deleted. In particular, any changes in branch addresses; /// in this tree are forwarded to the clone trees. Any changes; /// made to the branch addresses of the copied trees are over-ridden; /// anytime this tree changes its branch addresses.; /// Once this tree is deleted, all the addresses of the copied tree; /// are reset to their default values.; ///; /// The following example illustrates how to copy some events from the Tree; /// generated in $ROOTSYS/test/Event; /// ~~~{.cpp}; /// gSystem->Load(""libEvent"");; /// TFile f(""Event.root"");; /// TTree *T = (TTree*)f.Get(""T"");; /// Event *event = new Event();; /// T->SetBranchAddress(""event"",&event);; /// TFile f2(""Event2.root"",""recreate"");; /// TTree *T2 = T->CopyTree(""fNtrack<595"");; /// T2->Write();; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:996,test,test,996,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Copy a tree with selection.; ///; /// ### Important:; ///; /// The returned copied tree stays connected with the original tree; /// until the original tree is deleted. In particular, any changes; /// to the branch addresses in the original tree are also made to; /// the copied tree. Any changes made to the branch addresses of the; /// copied tree are overridden anytime the original tree changes its; /// branch addresses. When the original tree is deleted, all the; /// branch addresses of the copied tree are set to zero.; ///; /// For examples of CopyTree, see the tutorials:; ///; /// - copytree.C:; /// Example macro to copy a subset of a tree to a new tree.; /// The input file was generated by running the program in; /// $ROOTSYS/test/Event in this way:; /// ~~~ {.cpp}; /// ./Event 1000 1 1 1; /// ~~~; /// - copytree2.C; /// Example macro to copy a subset of a tree to a new tree.; /// One branch of the new tree is written to a separate file.; /// The input file was generated by running the program in; /// $ROOTSYS/test/Event in this way:; /// ~~~ {.cpp}; /// ./Event 1000 1 1 1; /// ~~~; /// - copytree3.C; /// Example macro to copy a subset of a tree to a new tree.; /// Only selected entries are copied to the new tree.; /// NOTE that only the active branches are copied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:826,test,test,826,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create GL plot for specified object and options.; /// Which axes are logarithmic is determined from a pad.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlot3D.cxx:155,log,logarithmic,155,graf3d/gl/src/TGLPlot3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlot3D.cxx,1,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create GL plot for specified object and options.; /// Which axes are logarithmic is determined from explicit arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlot3D.cxx:155,log,logarithmic,155,graf3d/gl/src/TGLPlot3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlot3D.cxx,1,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a PROOF environment. Starting PROOF involves either connecting; /// to a master server, which in turn will start a set of slave servers, or; /// directly starting as master server (if master = """"). Masterurl is of; /// the form: [proof[s]://]host[:port]. Conffile is the name of the config; /// file describing the remote PROOF cluster (this argument alows you to; /// describe different cluster configurations).; /// The default is proof.conf. Confdir is the directory where the config; /// file and other PROOF related files are (like motd and noproof files).; /// Loglevel is the log level (default = 1). User specified custom config; /// files will be first looked for in $HOME/.conffile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:660,Log,Loglevel,660,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,"['Log', 'log']","['Loglevel', 'log']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooPlot of the -log(L) distribution in the range lo-hi; /// with 'nBins' bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:111,log,log,111,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a profile of the difference of the MLP output minus the; /// true value for a given output node outnode, vs the true value for; /// outnode, for all test data events. This method is mainly useful; /// when doing regression analysis with the MLP (i.e. not classification,; /// but continuous truth values).; /// The resulting TProfile histogram is returned.; /// It is not drawn if option ""goff"" is specified.; /// Options are passed to TProfile::Draw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:242,test,test,242,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a reference to a class documentation page.; /// str encloses the text to create the reference for (e.g. name of instance).; /// comment will be added e.g. as tooltip text.; /// After the reference is put into str.String(), str will enclose the reference; /// and the original text. Example:; /// Input:; /// str.String(): ""a gHtml test""; /// str.Begin(): 2; /// str.Length(): 5; /// Output:; /// str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; /// str.Begin(): 2; /// str.Length(): 30",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:424,test,test,424,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a reference to a data member documentation page.; /// str encloses the text to create the reference for (e.g. name of instance).; /// comment will be added e.g. as tooltip text.; /// After the reference is put into str.String(), str will enclose the reference; /// and the original text. Example:; /// Input:; /// str.String(): ""a gHtml test""; /// str.Begin(): 2; /// str.Length(): 5; /// Output:; /// str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; /// str.Begin(): 2; /// str.Length(): 30",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:430,test,test,430,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a reference to a method documentation page.; /// str encloses the text to create the reference for (e.g. name of instance).; /// comment will be added e.g. as tooltip text.; /// After the reference is put into str.String(), str will enclose the reference; /// and the original text. Example:; /// Input:; /// str.String(): ""a gHtml test""; /// str.Begin(): 2; /// str.Length(): 5; /// Output:; /// str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; /// str.Begin(): 2; /// str.Length(): 30",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:425,test,test,425,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a reference to a type documentation page.; /// str encloses the text to create the reference for (e.g. name of instance).; /// comment will be added e.g. as tooltip text.; /// After the reference is put into str.String(), str will enclose the reference; /// and the original text. Example:; /// Input:; /// str.String(): ""a gHtml test""; /// str.Begin(): 2; /// str.Length(): 5; /// Output:; /// str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; /// str.Begin(): 2; /// str.Length(): 30",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:423,test,test,423,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:95,test,test,95,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,4,['test'],"['test', 'tests']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic using several properties of the current instance. This is used to duplicate; /// the test statistic in multi-processing scenarios.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:95,test,test,95,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:95,test,test,95,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,4,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create a window frame for log messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:112,log,log,112,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create and return a new TGLPhysicalShape with id 'ID', using; /// 'buffer' placement information (translation etc), and bound to; /// suppled 'logical'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:229,log,logical,229,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create simple input dialog.; ///; /// It is important to know that the case where the constructor in; /// which all the variables are initialized to their default values is; /// only used for the TBrowser to inspect on the classes. For normal; /// use the only variable that should be free is options.; ///; /// Variables prompt, defval are the content of the input dialog while; /// retstr has to be initialized to a char[256]. In case these are not; /// initialized, they will show default values while retstr will be; /// automatically allocated by the dialog. However this will make; /// impossible to retrieve the value entered by the dialog.; ///; /// To see TGInputDialog in use see:; /// $ROOTSYS/tutorials/testInputDialog.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGInputDialog.cxx:801,test,testInputDialog,801,gui/gui/src/TGInputDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGInputDialog.cxx,1,['test'],['testInputDialog']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Create the sandbox for this session",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:97,sandbox,sandbox,97,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Creates TProfiles of the difference of the MLP output minus the; /// true value vs the true value, one for each output, filled with the; /// test data events. This method is mainly useful when doing regression; /// analysis with the MLP (i.e. not classification, but continuous truth; /// values).; /// The returned THStack contains all the TProfiles. It is drawn unless; /// the option ""goff"" is specified.; /// Options are passed to TProfile::Draw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:227,test,test,227,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Creates a profile of the difference of the MLP output outnode minus the; /// true value of outnode vs the input value, stacked for all inputs, for; /// all test data events.; /// The returned THStack contains all the TProfiles. It is drawn unless; /// the option ""goff"" is specified.; /// Options are passed to TProfile::Draw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:242,test,test,242,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Creates a profile of the difference of the MLP output outnode minus; /// the true value of outnode vs the input value innode, for all test; /// data events.; /// The resulting TProfile histogram is returned.; /// It is not drawn if option ""goff"" is specified.; /// Options are passed to TProfile::Draw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:220,test,test,220,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Creates embedded civetweb server; ///; /// @param args string with civetweb server configuration; ///; /// As main argument, http port should be specified like ""8090"".; /// Or one can provide combination of ipaddress and portnumber like ""127.0.0.1:8090""; /// Or one can specify unix socket name like ""x/tmp/root.socket""; /// Extra parameters like in URL string could be specified after '?' mark:; ///; /// thrds=N - there N is number of threads used by the civetweb (default is 10); /// top=name - configure top name, visible in the web browser; /// ssl_certificate=filename - SSL certificate, see docs/OpenSSL.md from civetweb; /// auth_file=filename - authentication file name, created with htdigets utility; /// auth_domain=domain - authentication domain; /// websocket_timeout=tm - set web sockets timeout in seconds (default 300); /// websocket_disable - disable web sockets handling (default enabled); /// bind - ip address to bind server socket; /// loopback - bind specified port to loopback 127.0.0.1 address; /// debug - enable debug mode, server always returns html page with request info; /// log=filename - configure civetweb log file; /// max_age=value - configures ""Cache-Control: max_age=value"" http header for all file-related requests, default 3600; /// socket_mode=value - configures unix socket mode, default is 0700; /// nocache - try to fully disable cache control for file requests; /// winsymlinks=no - do not resolve symbolic links on file system (Windows only), default true; /// dirlisting=no - enable/disable directory listing for browsing filesystem (default no); ///; /// Examples of valid args values:; ///; /// serv->CreateEngine(""http:8080?websocket_disable"");; /// serv->CreateEngine(""http:7546?thrds=30&websocket_timeout=20"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx:1191,log,log,1191,net/http/src/TCivetweb.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Cross Entropy defined as:; ///; /// -p log (p) - (1-p)log(1-p); p=purity = s/(s+b)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:125,log,log,125,tmva/tmva/src/CrossEntropy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Default constructor; /// Initialisation of TSVDUnfold; /// User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:171,test,test,171,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Defines the number of triangles tested for a Delaunay triangle; /// (number of iterations) before abandoning the search",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:118,test,tested,118,hist/hist/src/TGraphDelaunay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Delete log window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGPasswdDialog.cxx:93,log,log,93,gui/gui/src/TGPasswdDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGPasswdDialog.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Delete test dialog widgets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:93,test,test,93,test/RootShower/SettingsDlg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Destroy all logical shapes in scene.; /// Return number of destroyed logicals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:98,log,logical,98,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,['log'],"['logical', 'logicals']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Destroy all physicals attached to this logical.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:125,log,logical,125,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Destroy logical shape defined by unique 'ID'.; /// Returns kTRUE if found/destroyed - kFALSE otherwise.; ///; /// If mustFind is true, an error is reported if the logical is not; /// found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:94,log,logical,94,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Destroy logical shape.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:94,log,logical,94,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Detach a daemon process from login session context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/daemon.cxx:115,log,login,115,net/rpdutils/src/daemon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/daemon.cxx,1,['log'],['login']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Determine if message from given object at given level on given topic is logged",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:158,log,logged,158,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,2,['log'],['logged']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Diagonalizes in an iterative fashion the bidiagonal matrix C as described through; /// sDiag and oDiag, so that S' = U'^T . C . V' is diagonal. U' and V' are orthogonal; /// matrices .; ///; /// Output:; /// - v - (n x n) - matrix H . V' in the (n x n) part of v; /// - u - (m x m) - matrix U'^T . Q^T; /// - sDiag - diagonal of the (m x n) S'; ///; /// return convergence flag: 0 -> no convergence; /// 1 -> convergence; ///; /// Test code for the output:; /// ~~~; /// const Int_t nRow = v.GetNrows();; /// const Int_t nCol = v.GetNcols();; /// TMatrixD tmp = v; tmp.ResizeTo(nCol,nCol);; /// TMatrixD Vprime = Ht*tmp;; /// TMatrixD Vprimet(TMatrixDBase::kTransposed,Vprime);; /// TMatrixD Uprimet = u*Q;; /// TMatrixD Uprime(TMatrixDBase::kTransposed,Uprimet);; /// TMatrixD Sprime(nRow,nCol);; /// TMatrixDDiag(Sprime) = sDiag;; /// ok &= VerifyMatrixIdentity(Uprimet * C * Vprime,Sprime,kTRUE,1.0e-13);; /// ok &= VerifyMatrixIdentity(Q*Uprime * Sprime * Vprimet * Ht,a,kTRUE,1.0e-13);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:517,Test,Test,517,math/matrix/src/TDecompSVD.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Display log of query pq into the log window frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:94,log,log,94,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; /// 'Filter' button.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:94,log,logs,94,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Display on screen the content of the temporary log file for query; /// in reference",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:133,log,log,133,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Display on screen the content of the temporary log file.; /// If qry == -2 show messages from the last (current) query.; /// If qry == -1 all the messages not yet displayed are shown (default).; /// If qry == 0, all the messages in the file are shown.; /// If qry > 0, only the messages related to query 'qry' are shown.; /// For qry != -1 the original file offset is restored at the end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:133,log,log,133,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Display the content of the temporary log file for queryref; /// into a new text window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:123,log,log,123,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Does training, test set evaluation and performance evaluation of using; /// cross-evalution.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:101,test,test,101,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Double_t m = Mag();; /// return 0.5*log( (m+fZ)/(m-fZ) );; /// guard against Pt=0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TVector3.cxx:122,log,log,122,math/physics/src/TVector3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TVector3.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Draw the logical shape in highlight mode.; /// If lvl argument is less than 0 (-1 by default), the index into color-set; /// is taken from the physical shape itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:95,log,logical,95,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Draw the plot from the logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:109,log,logs,109,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Draws the distribution (on the test sample) of the; /// impact on the network output of a small variation of; /// each input.; /// DrawDInputs() draws something that approximates the distribution of the; /// derivative of the NN w.r.t. each input. That quantity is recognized as; /// one of the measures to determine key quantities in the network.; ///; /// What is done is to vary one input around its nominal value and to see; /// how the NN changes. This is done for each entry in the sample and produces; /// a distribution.; ///; /// What you can learn from that is:; /// - is variable a really useful, or is my network insensitive to it ?; /// - is there any risk of big systematic ? Is the network extremely sensitive; /// to small variations of any of my inputs ?; ///; /// As you might understand, this is to be considered with care and can serve; /// as input for an ""educated guess"" when optimizing the network.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:117,test,test,117,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Draws the distribution (on the test sample) of the; /// impact on the network output of a small variation of; /// the ith input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:117,test,test,117,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Draws the distribution of the neural network (using ith neuron).; /// Two distributions are drawn, for events passing respectively the ""signal""; /// and ""background"" cuts. Only the test sample is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:267,test,test,267,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Draws the neural net output; /// It produces an histogram with the output for the two datasets.; /// Index is the number of the desired output neuron.; /// ""option"" can contain:; /// - test or train to select a dataset; /// - comp to produce a X-Y comparison plot; /// - nocanv to not create a new TCanvas for the plot",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:271,test,test,271,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:146,test,test,146,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Drop display-lists for the logical (assume TGLObject/direct rendering).; /// Re-calculate the bounding box (also for all physicals).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:113,log,logical,113,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Emit ValueChanged(Long_t) signal. This signal is emitted when; /// fButtonToNum is false. The val has the following meaning:; /// val % 100 is the step size; /// val % 10000 / 100 != 0 indicates log step; /// val / 10000 != 0 indicates button down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:281,log,log,281,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Emit ValueSet(Long_t) signal. This signal is emitted when the; /// number entry value is changed. The val has the following meaning:; /// val % 100 is the step size; /// val % 10000 / 100 != 0 indicates log step; /// val / 10000 != 0 indicates button down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:289,log,log,289,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:502,log,logically,502,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,3,['log'],['logically']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate all test statistics, returning result and any detailed output.; /// PDF parameter values are saved in case they are modified by; /// TestStatistic::Evaluate (eg. SimpleLikelihoodRatioTestStat).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:99,test,test,99,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,2,"['Test', 'test']","['TestStatistic', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluates all booked methods on the testing data and adds the output to the; /// Results in the corresponiding DataSet.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:122,test,testing,122,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluates each fold in turn.; /// - Prepares train and test data sets; /// - Trains method; /// - Evalutes on test set; /// - Stores the evaluation internally; ///; /// @param iFold fold to evaluate; /// @param methodInfo method metadata; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:141,test,test,141,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Execute a python stand-alone script, with argv CLI arguments.; ///; /// example of use:; /// const char* argv[] = { ""1"", ""2"", ""3"" };; /// TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:246,test,test,246,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Execute action corresponding to one event.; ///; /// This member function is called when a line is clicked with the locator; ///; /// If Left button clicked on one of the line end points, this point; /// follows the cursor until button is released.; ///; /// if Middle button clicked, the line is moved parallel to itself; /// until the button is released.; ///; /// NOTE that support for log scale is not implemented",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TEllipse.cxx:475,log,log,475,graf2d/graf/src/TEllipse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TEllipse.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Execute logon macro's. There are three levels of logon macros that; /// will be executed: the system logon etc/system.rootlogon.C, the global; /// user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; /// compatibility also the logon macro as specified by the Rint.Logon; /// environment setting, by default ./rootlogon.C, will be executed.; /// No logon macros will be executed when the system is started with; /// the -n option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:94,log,logon,94,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,14,"['Log', 'log']","['Logon', 'logon']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Factor in scene/vierer LOD and Quantize ... forward to; /// logical shape.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:146,log,logical,146,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Feynman diagrams test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:103,test,test,103,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Fill a TMacro with the log lines since the last reading (fLogFileR); /// Return (TMacro *)0 if no line was logged.; /// The returned TMacro must be deleted by the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:109,log,log,109,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['log'],"['log', 'logged']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Fill log file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx:91,log,log,91,tree/tree/src/TQueryResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Fill the bounding-box data of the logical-shape.; /// Virtual from TGLObject.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionAxesGL.cxx:120,log,logical-shape,120,graf3d/eve/src/TEveProjectionAxesGL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionAxesGL.cxx,1,['log'],['logical-shape']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Fills the ROCIntegral vs Itree from the testSample for the monitoring plots; /// during the training .. but using the testing events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:126,test,testSample,126,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,2,['test'],"['testSample', 'testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Find an object in the object table. Returns the slot where to put; /// the object. To test if the object is actually already in the table; /// use PtrIsValid().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:172,test,test,172,core/cont/src/TObjectTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Find and return logical shape identified by unique 'ID' in refresh-cache.; /// Returns 0 if not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:102,log,logical,102,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Find and return logical shape identified by unique logid.; /// Returns 0 if not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:102,log,logical,102,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,['log'],"['logical', 'logid']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Find branch nodes with all-constant parameters, and add them to the list of; /// nodes that can be cached with a dataset in a test statistic calculation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:212,test,test,212,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Find logical-shape representing object id in the list of scenes.; /// Return 0 if not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerBase.cxx:91,log,logical-shape,91,graf3d/gl/src/TGLViewerBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerBase.cxx,1,['log'],['logical-shape']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Find the intersection of projection of supplied viewport point (a 3D world; /// line - see ViewportToWorld) with supplied world plane. Returns std::pair; /// of Bool_t and TGLVertex3. If line intersects std::pair.first (Bool_t) is; /// kTRUE, and std::pair.second (TGLVertex) contains the intersection vertex.; /// If line does not intersect (line and plane parallel) std::pair.first; /// (Bool_t) if kFALSE, and std::pair.second (TGLVertex) is invalid.; ///; /// NOTE: The projection lines is extended for the plane intersection test; /// hence the intersection vertex can lie outside the near/far clip regions; /// (not visible); ///; /// Camera must have valid frustum cache - call Apply() after last modification, before using",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:616,test,test,616,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Finds the next event in log file to replay and sets it to fNextEvent; ///; /// Reads both from CmdTree and GuiTree and chooses that event that becomes; /// earlier; /// - fCmdTreeCounter determines actual position in fCmdTree; /// - fGuiTreeCounter determines actual position in fCmdTree; ///; /// If GUI event should be replayed, we must first make sure that there is; /// appropriate mapping for this event; ///; /// RETURN VALUE:; /// kFALSE = there is no event to be replayed; /// kTRUE = there is still at least one event to be replayed. Cases:; /// - fNextEvent = 0 => We are waiting for the appropriate; /// window to be registered; /// - fNextEvent != 0 => fNextEvent can be replayed (windows are; /// ready)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:110,log,log,110,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Fit a THnSparse with function f; ///; /// since the data is sparse by default a likelihood fit is performed; /// merging all the regions with empty bins for better performance efficiency; ///; /// Since the THnSparse is not drawn no graphics options are passed; /// Here is the list of possible options; ///; /// = ""I"" Use integral of function in bin instead of value at bin center; /// = ""X"" Use chi2 method (default is log-likelihood method); /// = ""U"" Use a User specified fitting algorithm (via SetFCN); /// = ""Q"" Quiet mode (minimum printing); /// = ""V"" Verbose mode (default is between Q and V); /// = ""E"" Perform better Errors estimation using Minos technique; /// = ""B"" Use this option when you want to fix one or more parameters; /// and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; /// = ""M"" More. Improve fit results; /// = ""R"" Use the Range specified in the function range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:507,log,log-likelihood,507,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,1,['log'],['log-likelihood']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Fit histogram with the function pointer f1.; ///; /// \param[in] f1 pointer to the function object; /// \param[in] option string defining the fit options (see table below).; /// \param[in] goption specify a list of graphics options. See TH1::Draw for a complete list of these options.; /// \param[in] xxmin lower fitting range; /// \param[in] xxmax upper fitting range; /// \return A smart pointer to the TFitResult class; ///; /// \anchor HFitOpt; /// ### Histogram Fitting Options; ///; /// Here is the full list of fit options that can be given in the parameter `option`.; /// Several options can be used together by concatanating the strings without the need of any delimiters.; ///; /// option | description; /// -------|------------; /// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; /// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; /// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; /// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; /// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; /// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; /// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; /// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; /// ""U"" | Uses a user specified objective function (e.g. user providedlikel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:843,log,log,843,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Force RooRealIntegral to relegate integration of all observables to internal logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx:163,log,logic,163,roofit/roofitcore/src/RooProjectedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx,1,['log'],['logic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Forward constant term optimization management calls to component; /// test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:156,test,test,156,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Forward server redirect calls to component test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:129,test,test,129,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Function for assigning the correct folds to the testing or training set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:134,test,testing,134,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Function required to split the training and testing datasets into a; /// number of folds. Required by the CrossValidation and HyperParameterOptimisation; /// classes. The option to split the training dataset into a training set and; /// a validation set is implemented but not currently used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:130,test,testing,130,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get X log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:92,log,log,92,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get Y log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:92,log,log,92,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get Z log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:92,log,log,92,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:463,Test,Tests,463,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:386,Test,Tests,386,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get logs or log tails from last session associated with this manager; /// instance.; /// The arguments allow to specify a session different from the last one:; /// isess specifies a position relative to the last one, i.e. 1; /// for the next to last session; the absolute value is taken; /// so -1 and 1 are equivalent.; /// stag specifies the unique tag of the wanted session; /// The special value stag = ""NR"" allows to just initialize the TProofLog; /// object w/o retrieving the files; this may be useful when the number; /// of workers is large and only a subset of logs is required.; /// If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; /// If 'pattern' is specified only the lines containing it are retrieved; /// (remote grep functionality); to filter out a pattern 'pat' use; /// pattern = ""-v pat"".; /// Returns a TProofLog object (to be deleted by the caller) on success,; /// 0 if something wrong happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofMgrLite.cxx:90,log,logs,90,proof/proof/src/TProofMgrLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofMgrLite.cxx,3,['log'],"['log', 'logs']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get max number of queries whose full results are kept in the; /// remote sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:159,sandbox,sandbox,159,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Get the processing priority for the group the user belongs too. This; /// priority is a number (0 - 100) determined by a scheduler (third; /// party process) based on some basic priority the group has, e.g.; /// we might want to give users in a specific group (e.g. promptana); /// a higher priority than users in other groups, and on the analysis; /// of historical logging data (i.e. usage of CPU by the group in a; /// previous time slot, as recorded in TPerfStats::WriteQueryLog()).; ///; /// Currently the group priority is obtained by a query in a SQL DB; /// table proofpriority, which has the format:; /// CREATE TABLE proofpriority (; /// id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; /// group VARCHAR(32) NOT NULL,; /// priority INT; ///)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:453,log,logging,453,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Gets z-axis scale:; /// - scale - it can be linear, sqrt or log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:146,log,log,146,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Handle log-current-query-only toggle button.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:93,log,log-current-query-only,93,gui/sessionviewer/src/TProofProgressDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx,1,['log'],['log-current-query-only']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Implement the -> operator to make the class acts as a pointer to a TFitResult.; /// assert in case the class does not contain a pointer to TFitResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx:170,assert,assert,170,hist/hist/src/TFitResultPtr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx,1,['assert'],['assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Implement the de-reference operator to make the class acts as a pointer to a TFitResult; /// assert in case the class does not contain a pointer to TFitResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx:179,assert,assert,179,hist/hist/src/TFitResultPtr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFitResultPtr.cxx,1,['assert'],['assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Init a change of privileges guard. Act only if superuser.; /// The result of initialization can be tested with the Valid() method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdpriv.cxx:185,test,tested,185,net/rpdutils/src/rpdpriv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdpriv.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Init window frame for log messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:108,log,log,108,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Initialization of data structures for replaying.; /// Start of replaying.; ///; /// Return value:; /// - kTRUE = everything is OK and replaying has begun; /// - kFALSE = non existing or invalid log file, replaying has not started",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:280,log,log,280,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Initialize a new context for generating events with the specified; /// variables, using the specified PDF model. A prototype dataset (if provided); /// is not cloned and still belongs to the caller. The contents and shape; /// of this dataset can be changed between calls to generate() as long as the; /// expected columns to be copied to the generated dataset are present.; /// Any argument supplied in the forceDirect RooArgSet are always offered; /// for internal generation to the p.d.f., even if this is deemed unsafe by; /// the logic of RooGenContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:621,log,logic,621,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['log'],['logic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Initialize multi-processor calculation mode. Create component test statistics in separate; /// processed that are connected to this process through a RooAbsRealMPFE front-end class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:148,test,test,148,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Initialize simultaneous p.d.f processing mode. Strip simultaneous; /// p.d.f into individual components, split dataset in subset; /// matching each component and create component test statistics for; /// each of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:265,test,test,265,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1078,test,test,1078,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Intercept call to optimize constant term in test statistics; /// and forward it to object on server side.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx:130,test,test,130,roofit/roofitcore/src/RooRealMPFE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of observables; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:113,test,test,113,roofit/roofitcore/src/RooAddModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of observables; /// for interpretation of fraction coefficients. Needed here because a RooSimultaneous; /// works like a RooAddPdf when plotted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:113,test,test,113,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of conditional product terms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:113,test,test,113,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:113,test,test,113,roofit/roofitcore/src/RooAddModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of fraction coefficients. Needed here because a RooSimultaneous; /// works like a RooAddPdf when plotted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:113,test,test,113,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:119,log,logging,119,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Internal method that shares constructor logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:126,log,logic,126,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,1,['log'],['logic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Internal subprogram used by Create. It explores newly defined; /// cell with according to the decision tree logic. The separation; /// set via the 'sepType' option in the constructor.; ///; /// The optimal division point for eventual future cell division is; /// determined/recorded. Note that links to parents and initial; /// volume = 1/2 parent has to be already defined prior to calling; /// this routine.; ///; /// Note, that according to the decision tree logic, a cell is only; /// split, if the number of (unweighted) events in each daughter; /// cell is greater than fNmin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx:194,log,logic,194,tmva/tmva/src/PDEFoamDecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDecisionTree.cxx,2,['log'],['logic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// It performs an hypothesis tests using the likelihood function; /// and computes the p values for the null and the alternate using the asymptotic; /// formulae for the profile likelihood ratio.; /// See G. Cowan, K. Cranmer, E. Gross and O. Vitells.; /// Asymptotic formulae for likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; /// The formulae are valid only for one POI. If more than one POI exists consider as POI only the; /// first one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:112,test,tests,112,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,2,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Least square linear fit without weights.; ///; /// Fit a straight line (a0 + a1*x) to the data in this graph.; ///; /// \param [in] ndata if ndata<0, fits the logarithm of the graph (used in InitExpo() to set; /// the initial parameter values for a fit with exponential function.; /// \param [in] a0 constant; /// \param [in] a1 slope; /// \param [in] ifail return parameter indicating the status of the fit (ifail=0, fit is OK); /// \param [in] xmin, xmax fitting range; ///; /// extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:245,log,logarithm,245,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['log'],['logarithm']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// List contents of package directory. If all is true show all package; /// directories also on slaves. If everything is ok all package directories; /// should be the same. If redir is kTRUE the result is redirected to the log; /// file (option available for internal actions).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:306,log,log,306,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// List contents of the data directory in the sandbox.; /// This is the place where files produced by the client queries are kept",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:129,sandbox,sandbox,129,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['sandbox'],['sandbox']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// List the contents of a file sequentially.; /// For each logical record found, it prints:; ///; /// Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; ///; /// Example of output; ///; /// 20010404/150437 At:64 N=150 TFile; /// 20010404/150440 At:214 N=28326 TBasket CX = 1.13; /// 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; /// 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; /// 20010404/150440 At:87796 N=29076 TBasket CX = 1.10; /// 20010404/150440 At:116872 N=10151 TBasket CX = 3.15; /// 20010404/150441 At:127023 N=28341 TBasket CX = 1.13; /// 20010404/150441 At:155364 N=29594 TBasket CX = 1.08; /// 20010404/150441 At:184958 N=29616 TBasket CX = 1.08; /// 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; /// 20010404/150441 At:243649 N=9583 TBasket CX = 3.34; /// 20010404/150442 At:253232 N=28324 TBasket CX = 1.13; /// 20010404/150442 At:281556 N=29641 TBasket CX = 1.08; /// 20010404/150442 At:311197 N=29633 TBasket CX = 1.08; /// 20010404/150442 At:340830 N=29091 TBasket CX = 1.10; /// 20010404/150442 At:369921 N=10341 TBasket CX = 3.09; /// 20010404/150442 At:380262 N=509 TH1F CX = 1.93; /// 20010404/150442 At:380771 N=1769 TH2F CX = 4.32; /// 20010404/150442 At:382540 N=1849 TProfile CX = 1.65; /// 20010404/150442 At:384389 N=18434 TNtuple CX = 4.51; /// 20010404/150442 At:402823 N=307 KeysList; /// 20010404/150443 At:403130 N=4548 StreamerInfo CX = 3.65; /// 20010404/150443 At:407678 N=86 FreeSegments; /// 20010404/150443 At:407764 N=1 END; ///; /// If the parameter opt contains ""forComp"", the Date/Time is omitted; /// and the decompressed size is also printed.; ///; /// Record_Adress Logical_Record_Length Key_Length Object_Record_Length ClassName CompressionFactor; ///; /// If the parameter opt contains ""extended"", the name and title of the keys are added:; /// 20200820/155031 At:100 N=180 TFile name: hsimple.root title: Demo ROOT file wit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:142,log,logical,142,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame, if open",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:100,log,log,100,gui/sessionviewer/src/TProofProgressDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx,4,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Load/append a log msg in the log frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:100,log,log,100,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Log a message into the appropriate window by emitting a signal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:86,Log,Log,86,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; /// is true the standard RooMsgService prefix is not added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:86,Log,Log,86,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Log error message associated with TObject object self at given level and topic. If skipPrefix; /// is true the standard RooMsgService prefix is not added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:86,Log,Log,86,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Log,Log,86,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,5,"['Log', 'log']","['Log', 'logEvalError', 'logged', 'logging']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:86,Log,LogFactorial,86,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,2,"['Log', 'log']","['LogFactorial', 'logGamma']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical AND",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Log,Logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,4,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical OR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Log,Logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,3,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical Or",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:86,Log,Logical,86,math/matrix/src/TMatrixTSym.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx,1,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical and.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx:86,Log,Logical,86,tree/tree/src/TCut.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx,3,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical negation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx:86,Log,Logical,86,tree/tree/src/TCut.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx,1,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical or.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx:86,Log,Logical,86,tree/tree/src/TCut.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx,3,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logical shapes usually support only discreet LOD values,; /// especially in view of display-list caching.; /// This function should be overriden to perform the desired quantization.; /// See TGLSphere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:86,Log,Logical,86,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Logo animation timer handling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:86,Log,Logo,86,test/RootShower/RootShower.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx,1,['Log'],['Logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Loop over all scenes and update them accordingly:; /// 1. if scene is marked as changed, it is repainted;; /// 2. otherwise iteration is done over the set of stamped elements and; /// their physical/logical shapes are updated accordingly.; ///; /// This allows much finer update granularity without resetting of; /// complex GL-viewer and GL-scene state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveScene.cxx:285,log,logical,285,graf3d/eve/src/TEveScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveScene.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Main initialization member function for MINUIT; ///; /// It initializes some constants; /// (including the logical I/O unit nos.),",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:193,log,logical,193,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Main test window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:91,test,test,91,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Make histograms of the result of the analysis. This message; /// should be sent after having read all data points, but before; /// finding the parameterization; ///; /// Options:; /// A All the below; /// X Original independent variables; /// D Original dependent variables; /// N Normalised independent variables; /// S Shifted dependent variables; /// R1 Residuals versus normalised independent variables; /// R2 Residuals versus dependent variable; /// R3 Residuals computed on training sample; /// R4 Residuals computed on test sample; ///; /// For a description of these quantities, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:613,test,test,613,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Merge all the entries in the chain into a new tree in the current file.; ///; /// Note: The ""file"" parameter is *not* the file where the new; /// tree will be inserted. The new tree is inserted into; /// gDirectory, which is usually the most recently opened; /// file, or the directory most recently cd()'d to.; ///; /// If option = ""C"" is given, the compression level for all branches; /// in the new Tree is set to the file compression level. By default,; /// the compression level of all branches is the original compression; /// level in the old trees.; ///; /// If basketsize > 1000, the basket size for all branches of the; /// new tree will be set to basketsize.; ///; /// Example using the file generated in $ROOTSYS/test/Event; /// merge two copies of Event.root; /// ~~~ {.cpp}; /// gSystem.Load(""libEvent"");; /// TChain ch(""T"");; /// ch.Add(""Event1.root"");; /// ch.Add(""Event2.root"");; /// ch.Merge(""all.root"");; /// ~~~; /// If the chain is expecting the input tree inside a directory,; /// this directory is NOT created by this routine.; ///; /// So if you do:; /// ~~~ {.cpp}; /// TChain ch(""mydir/mytree"");; /// ch.Merge(""newfile.root"");; /// ~~~; /// The resulting file will not have subdirectories. In order to; /// preserve the directory structure do the following instead:; /// ~~~ {.cpp}; /// TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; /// file->mkdir(""mydir"")->cd();; /// ch.Merge(file, 0);; /// ~~~; /// If 'option' contains the word 'fast' the merge will be done without; /// unzipping or unstreaming the baskets (i.e., a direct copy of the raw; /// bytes on disk).; ///; /// When 'fast' is specified, 'option' can also contains a; /// sorting order for the baskets in the output file.; ///; /// There is currently 3 supported sorting order:; /// ~~~ {.cpp}; /// SortBasketsByOffset (the default); /// SortBasketsByBranch; /// SortBasketsByEntry; /// ~~~; /// When using SortBask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:811,test,test,811,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Method returning the user to be used for the ssh login (no longer supported)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:135,log,login,135,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['log'],['login']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Method to combined test statistic results calculated into partitions into; /// the global result. This default implementation adds the partition return; /// values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:105,test,test,105,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Method which tests whether solids can be processed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:99,test,tests,99,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Minimization function for H1s using a Likelihood method.; /// Basically, it forms the likelihood by determining the Poisson; /// probability that given a number of entries in a particular bin,; /// the fit would predict it's value. This is then done for each bin,; /// and the sum of the logs is taken as the likelihood.; /// PDF: P=exp(-f(x_i))/[F_i]!*(f(x_i))^[F_i]; /// where F_i - experimental value, f(x_i) - expected theoretical value; /// [F_i] - integer part of F_i.; /// drawback is that if F_i>Int_t - GetSumLog will fail; /// for big F_i is faster to use Euler's Gamma-function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:374,log,logs,374,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Minimization function for H1s using a Likelihood method.; /// Basically, it forms the likelihood by determining the Poisson; /// probability that given a number of entries in a particular bin,; /// the fit would predict it's value. This is then done for each bin,; /// and the sum of the logs is taken as the likelihood.; ///; /// Default method (function evaluated at center of bin); /// for each point the cache contains the following info; /// - 1D : bc,e,xc (bin content, error, x of center of bin); /// - 2D : bc,e,xc,yc; /// - 3D : bc,e,xc,yc,zc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:374,log,logs,374,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Minimization function for H1s using a Likelihood method.; /// Basically, it forms the likelihood by determining the Poisson; /// probability that given a number of entries in a particular bin,; /// the fit would predict it's value. This is then done for each bin,; /// and the sum of the logs is taken as the likelihood.; ///; /// The ""I""ntegral method is used; /// for each point the cache contains the following info; /// - 1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); /// - 2D : bc,e,xc,xw,yc,yw; /// - 3D : bc,e,xc,xw,yc,yw,zc,zw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:374,log,logs,374,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:384,log,log-likelihood,384,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['log'],['log-likelihood']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Move all graph points on specified values dx,dy; /// If log argument specified, calculation done in logarithmic scale like:; /// new_value = exp( log(old_value) + delta );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:142,log,log,142,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,3,['log'],"['log', 'logarithmic']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Natural log of 10 (to convert log to ln)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:94,log,log,94,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Needed for the ""waves"" test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:109,test,test,109,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// One-time initialization of the test statistic. Setup; /// infrastructure for simultaneous p.d.f processing and/or; /// parallelized processing if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:117,test,test,117,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:250,test,test,250,sql/mysql/src/TMySQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a ODBC server. The db arguments can be:; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:263,test,test,263,sql/odbc/src/TODBCServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a PgSQL DB server. The db arguments should be; /// of the form ""pgsql://<host>[:<port>][/<database>]"", e.g.:; /// ""pgsql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx:250,test,test,250,sql/pgsql/src/TPgSQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to an SQLite DB server. The db arguments should be; /// of the form ""sqlite://<database>"", e.g.:; /// ""sqlite://test.sqlite"" or ""sqlite://:memory:"" for a temporary database; /// in memory.; /// Note that for SQLite versions >= 3.7.7 the full string behind; /// ""sqlite://"" is handed to sqlite3_open_v2() with SQLITE_OPEN_URI activated,; /// so all URI accepted by it can be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:216,test,test,216,sql/sqlite/src/TSQLiteServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:255,Test,TestRate,255,tmva/tmva/src/MethodDNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx,1,['Test'],['TestRate']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// PRIVATE METHOD:; /// Test whether the currently considered function contributes to the; /// fit. See also; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:107,Test,Test,107,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Parse send options from string 'sendopts'.; /// Format is:; /// ""[-,+]S[n]|[-,+]D[m]|[-,+]F[j]""; /// where:; /// 1. The big letter refers to the 'table' following; ///; /// S table with summary log; /// D table with dataset info; /// F table files info; ///; /// 2. The '-,+' in front disables/enables the related table; if; /// absent '+' is assumed; ///; /// 3. The number after the letter is the version of the related; /// table; ///; /// Returns -1 if nothing is enabled; 0 otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSender.cxx:280,log,log,280,proof/proofplayer/src/TProofMonSender.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSender.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Perform a test using dataset 'dset' scanning over the number of workers; /// per node.; /// Return 0 on success, -1 on error; /// Open the file for the results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx:96,test,test,96,proof/proofbench/src/TProofBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Perform a test using dataset 'dset'; /// Return 0 on success, -1 on error; /// Open the file for the results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx:96,test,test,96,proof/proofbench/src/TProofBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Perform orthogonality test for rotation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx:108,test,test,108,geom/geom/src/TGeoMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Perform the action needed to commence the new session:; /// - set debug flag; /// - check authentication table; /// - Inquire protocol; /// - authenticate the client; /// - login the client; /// Returns 1 for a PROOF master server, 0 otherwise; /// Returns logged-in user and remote process id in rid; /// Called just after opening the connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:259,log,login,259,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['log'],"['logged-in', 'login']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Perform the action needed to commence the new session:; /// - set debug flag; /// - check authentication table; /// - Inquire protocol; /// - authenticate the client; /// - login the client; /// Returns 1 for a PROOF master server, 0 otherwise; /// Returns logged-in user, the remote client procotol cproto, the; /// client kind of user anon and, if anonymous user, the client passwd.; /// If TServerSocket (servtype==kSOCKD), the protocol number is returned; /// in anon.; /// Called just after opening the connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:259,log,login,259,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['log'],"['logged-in', 'login']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Perform the action needed to commence the new session:; /// Version called by TServerSocket.; /// - set debug flag; /// - check authentication table; /// - Inquire protocol; /// - authenticate the client; /// Returns logged-in user, the remote client procotol cproto,; /// the authentication protocol (ROOT internal) number is returned; /// in meth, type indicates the kind of authentication:; /// 0 = new authentication; /// 1 = existing authentication; /// 2 = existing authentication with updated offset; /// and the crypted-token in ctoken (used later for cleaning).; /// Called just after opening the connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:303,log,logged-in,303,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['log'],['logged-in']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Plot the distribution of the -log(L) values on a newly created frame.; ///; /// <table>; /// <tr><th> Optional arguments <th>; /// <tr><td> FrameRange(double lo, double hi) <td> Set range of frame to given specification; /// <tr><td> FrameBins(int bins) <td> Set default number of bins of frame to given number; /// <tr><td> Frame() <td> Pass supplied named arguments to RooAbsRealLValue::frame() function. See there; /// for list of allowed arguments; /// </table>; ///; /// If no frame specifications are given, the AutoRange() feature will be used to set the range.; /// Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:116,log,log,116,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:108,log,logged,108,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['log'],['logged']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print predefined help message of classifier.; /// Iterate over methods and test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:161,test,test,161,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print sizes of logical and physical-shape maps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:101,log,logical,101,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit.cxx:92,test,test,92,roofit/roofitcore/test/stressRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit.cxx,4,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title; /// const Int_t kMAX = 65;; /// TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; /// const Int_t nch = header.Length();; /// for (Int_t i = nch; i < kMAX; i++) header += '.';; /// std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; /// Print test program number and its title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:92,test,test,92,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print the ProofServ logo on standard output.; /// Return 0 on success, -1 on error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx:106,log,logo,106,proof/proof/src/TProofServLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print the ProofServ logo on standard output.; /// Return 0 on success, -1 on failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:106,log,logo,106,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print the ROOT logo on standard output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:101,log,logo,101,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Print the Remote Server logo on standard output.; /// Return 0 on success, -1 on failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:110,log,logo,110,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Prints a summary of all benchmarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:110,benchmark,benchmarks,110,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['benchmark'],['benchmarks']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Prints parameters of Benchmark name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:107,Benchmark,Benchmark,107,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Process the specified TSelector file 'nentries' times.; /// Used to test the PROOF interator mechanism for cycle-driven selectors in a; /// local session.; /// Process specified TDSet on PROOF worker with TSelector object; /// The return value is -1 in case of error and TSelector::GetStatus(); /// in case of success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:154,test,test,154,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Process the specified TSelector object 'nentries' times.; /// Used to test the PROOF interator mechanism for cycle-driven selectors in a; /// local session.; /// The return value is -1 in case of error and TSelector::GetStatus(); /// in case of success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:156,test,test,156,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Process the up/down button messages. If fButtonToNum is false the; /// following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; /// param % 100 is the step size; /// param % 10000 / 100 != 0 indicates log step; /// param / 10000 != 0 indicates button down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:299,log,log,299,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Ratio plot test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,test,test,97,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Read basket buffers in memory and cleanup; ///; /// Read first bytes of a logical record starting at position pos; /// return record length (first 4 bytes of record).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx:160,log,logical,160,tree/tree/src/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Read the logical record header starting at a certain postion.; ///; /// \param[in] buf pointer to buffer; /// \param[in] first read offset; /// \param[in] maxbytes Bytes which are read into buf.; /// \param[out] nbytes Number of bytes in record if negative, this is a deleted; /// record if 0, cannot read record, wrong value of argument first; /// \param[out] objlen Uncompressed object size; /// \param[out] keylen Length of logical record header; ///; /// The function reads nread bytes; /// where nread is the minimum of maxbytes and the number of bytes; /// before the end of file. The function returns nread.; /// Note that the arguments objlen and keylen are returned only; /// if maxbytes >=16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:95,log,logical,95,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Rebuild the log info for a new entered session",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:98,log,log,98,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Receive the log file from the server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:98,log,log,98,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Receive the log file of the slave with socket s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:98,log,log,98,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Redirect stdout to 'logfile'. This log file will be flushed to the; /// client or master after each command.; /// If donotredir != 0 just reopen the file for usage in TProofServ (already redirected).; /// On success return a pointer to the open log file. Return 0 on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/pmain.cxx:106,log,logfile,106,main/src/pmain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/pmain.cxx,3,['log'],"['log', 'logfile']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Redirect stdout to 'logfile'. This log file will be flushed to the; /// client or master after each command.; /// On success return a pointer to the open log file. Return 0 on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/roots.cxx:106,log,logfile,106,main/src/roots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/roots.cxx,3,['log'],"['log', 'logfile']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Redirect stdout to a log file. This log file will be flushed to the; /// client or master after each command.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:107,log,log,107,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Register new directory to THttpServer; // For example: AddLocation(""mydir/"", ""/test/EveWebApp/ui5"");; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:165,test,test,165,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Register query log using the information in the list which is in the form; /// TParameter(<par>,<value>) or TNamed(<name>,<string>). For bulk sending,; /// the first entry in the list is an TObjString defining the variable names; /// in the format; /// VARname1,VARname2,...; /// while the other entries are TObjStrings with the multiplets to be sent; /// VARvalue1,VARvalue2,...; ///; /// The string 'opt' allows the following additional control:; /// table=`[<db>.]<table>` allows to insert to a different table from the; /// one defined at construction (change is not; /// persistent); if `<db>` is not specified, the same; /// db defined at cinstruction is used.; /// bulk Do a bulk insert; /// More options can be given concurrently, comma-separated .; /// The specified table must already have been created in the DB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLMonitoring.cxx:101,log,log,101,net/net/src/TSQLMonitoring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLMonitoring.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Render DrawElements in elementVec with given timeout.; /// If clipPlanes is non-zero, test each element against its; /// clipping planes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:172,test,test,172,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Reposition the read pointer in the log file to the very end.; /// This allows to ""hide"" useful debug messages during normal operations; /// while preserving the possibility to have them in case of problems.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:121,log,log,121,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Reposition/recolor physical for given logical (assume TGLObject and; /// a single physical).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:124,log,logical,124,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Reset all Benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:96,Benchmark,Benchmarks,96,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmarks']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Resolve some keywords in 's'; /// `<logfilewrk>`, `<user>`, `<rootsys>`, `<cpupin>`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:122,log,logfilewrk,122,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['log'],['logfilewrk']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Resolve the file type as a function of the protocol field in 'name'; ///; /// If defined, the string 'prefix' is added when testing the locality of; /// a 'name' with network-like structure (i.e. root://host//path); if the file; /// is local, on return 'prefix' will contain the actual local path of the file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:210,test,testing,210,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve the content of the log file associated with worker 'ord'.; /// If 'ord' is ""*"" (default), all the workers are retrieved. If 'all'; /// is true, the whole files are retrieved; else a max of; /// fgMaxTransferSize (about 1000 lines) per file is read, starting from; /// the end (i.e. the last ~1000 lines).; /// The received buffer is added to the file fname, if the latter is defined.; /// If opt == TProofLog::kGrep only the lines containing 'pattern' are; /// retrieved (remote grep functionality); to filter out a pattern 'pat' use; /// pattern = ""-v pat"".; /// Return 0 on success, -1 in case of any error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx:114,log,log,114,proof/proof/src/TProofLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return Sum(log(i) i=0,n; /// used by log-likelihood fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:97,log,log,97,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,2,['log'],"['log', 'log-likelihood']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return a RooDataSet containing the post-fit parameters of each toy cycle.; /// This dataset also contains any additional output that was generated; /// by study modules that were added to this RooMCStudy.; /// By default, the two following variables are added (apart from fit parameters):; /// - NLL: The value of the negative log-likelihood for each run.; /// - ngen: Number of events generated for each run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:413,log,log-likelihood,413,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['log'],['log-likelihood']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape in [xmin,xmax]; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find; /// the corresponding X value.; ///; /// The parabolic approximation is very good as soon as the number; /// of bins is greater than 50.; ///; /// @param xmin minimum value for generated random numbers; /// @param xmax maximum value for generated random numbers; /// @param rng (optional) random number generator pointer; /// @param option (optional) : `LOG` or `LIN` to force the usage of a log or linear scale for computing the cumulative integral table; ///; /// IMPORTANT NOTE; ///; /// The integral of the function is computed at fNpx points. If the function; /// has sharp peaks, you should increase the number of points (SetNpx); /// such that the peak is correctly tabulated at several points.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:1016,LOG,LOG,1016,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,"['LOG', 'log']","['LOG', 'log']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return a random number following this function shape.; ///; /// @param rng Random number generator. By default (or when passing a nullptr) the global gRandom is used; /// @param option Option string which controls the binning used to compute the integral. Default mode is automatic depending of; /// xmax, xmin and Npx (function points).; /// Possible values are:; /// - ""LOG"" to force usage of log scale for tabulating the integral; /// - ""LIN"" to force usage of linear scale when tabulating the integral; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// For each bin the integral is approximated by a parabola.; /// The parabola coefficients are stored as non persistent data members; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Evaluate the parabolic curve in the selected bin to find the corresponding X value.; ///; /// The user can provide as optional parameter a Random number generator.; /// By default gRandom is used; ///; /// If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x; /// A log scale for the intergral is also always used if a user specifies the ""LOG"" option; /// Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale; /// whatever the fXmax/fXmin ratio is; ///; /// Note that the parabolic approximation is very good as soon as the number of bins is greater than 50.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:458,LOG,LOG,458,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,6,"['LOG', 'log']","['LOG', 'log']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return auxiliary dataset with results of delta(-log(L)); /// calculations of this module so that it is merged with; /// RooMCStudy::fitParDataSet() by RooMCStudy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx:134,log,log,134,roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return center of bin in log; /// With a log-equidistant binning for a bin with low and up edges, the mean is :; /// 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; /// Imagine a bin with low=1 and up=100 :; /// - the center in lin is (100-1)/2=50.5; /// - the center in log would be sqrt(1*100)=10 (!=log(50.5)); ///; /// NB: if the low edge of the bin is negative, the function returns the bin center; /// as computed by TAxis::GetBinCenter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:110,log,log,110,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,5,['log'],"['log', 'log-equidistant', 'logx']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return current evaluation error logging mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:118,log,logging,118,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:542,log,logarithmic,542,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return l-value pointer to contents. If the contents derive from RooAbsLValue or RooAbsCategoryLValue,; /// the conversion is safe, and the function directly returns the pointer using a static_cast.; /// If the template parameter of this proxy is not an LValue type, then; /// - in a debug build, a dynamic_cast with an assertion is used.; /// - in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This; /// is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies.; /// \deprecated This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or; /// RooAbsCategoryLValue (+derived types), as arg() will always return the correct type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:405,assert,assertion,405,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['assert'],['assertion']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return sum of -log of constraint p.d.f.s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:101,log,log,101,roofit/roofitcore/src/RooConstraintSum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:174,log,log,174,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:174,log,log,174,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return the log of the current value with given normalization; /// An error message is printed if the argument of the log is negative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:97,log,log,97,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of logged evaluation errors since the last clearing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,log,logged,107,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['log'],['logged']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return the reference object. Its the first TH1 or THStack type object; /// in the upper pads list of primitives.; /// Note that it returns a `TObject`, so you need to test and cast it to use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:253,test,test,253,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return the value of contour number ""level"" in Pad coordinates.; /// ie: if the Pad is in log scale along Z it returns le log of the contour level; /// value. See GetContour to return the array of all contour levels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:175,log,log,175,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return true if this fit result is identical to other within tolerances.; /// \param[in] other Fit result to test against.; /// \param[in] tol **Relative** tolerance for parameters and NLL.; /// \param[in] tolCorr **absolute** tolerance for correlation coefficients.; /// \param[in] verbose If this function will log to the standard output when comparisons fail.; ///; /// As the relative tolerance for the parameter errors, the default value of; /// `1e-3` will be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:194,test,test,194,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,2,"['log', 'test']","['log', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Return true, if enough client have reported; ///; /// In the case of TMPIFile this happens everytime a client/worker sends; /// the buffer (tested).; ///; /// taken from root/tutorials/net/parallelMergeServer.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/mpi/src/TMPIFile.cxx:226,test,tested,226,io/mpi/src/TMPIFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/mpi/src/TMPIFile.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns Cpu time used by Benchmark name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:111,Benchmark,Benchmark,111,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns Realtime used by Benchmark name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:111,Benchmark,Benchmark,111,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns index of Benchmark name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:103,Benchmark,Benchmark,103,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if logging is ON",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,log,logging,103,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the function value fy for (xmin<x<xmax).; /// in other words it can find the roots of the function when fy=0 and successive calls; /// by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:957,log,logx,957,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,3,['log'],"['log', 'logx']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:778,log,logx,778,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,3,['log'],"['log', 'logx']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the X value corresponding to the minimum value of the function; /// on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:812,log,logx,812,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,3,['log'],"['log', 'logx']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the available number of logical cores.; ///; /// - Checks if there is CFS bandwidth control in place (linux, via cgroups,; /// assuming standard paths); /// - Otherwise, returns the number of logical cores provided by; /// std::thread::hardware_concurrency(); ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/RTaskArena.hxx:118,log,logical,118,core/imt/inc/ROOT/RTaskArena.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/RTaskArena.hxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the binary (base-2) logarithm of `x`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:114,log,logarithm,114,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['log'],['logarithm']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the common (base-10) logarithm of `x`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:115,log,logarithm,115,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['log'],['logarithm']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the maximum value of the function; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx.; /// This way, the step size can be controlled via the SetNpx() function.; /// If the function is unimodal or if its extrema are far apart, setting; /// the fNpx to a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:749,log,logx,749,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,3,['log'],"['log', 'logx']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the minimum value of the function on the (xmin, xmax) interval; ///; /// Method:; /// First, the grid search is used to bracket the maximum; /// with the step size = (xmax-xmin)/fNpx. This way, the step size; /// can be controlled via the SetNpx() function. If the function is; /// unimodal or if its extrema are far apart, setting the fNpx to; /// a small value speeds the algorithm up many times.; /// Then, Brent's method is applied on the bracketed interval; /// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); /// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; /// of iteration of the Brent algorithm; /// If the flag logx is set the grid search is done in log step size; /// This is done automatically if the log scale is set in the current Pad; ///; /// NOTE: see also TF1::GetMaximumX and TF1::GetX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:778,log,logx,778,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,3,['log'],"['log', 'logx']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the natural logarithm of `x`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:106,log,logarithm,106,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['log'],['logarithm']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the rendering regions for an axis to use in the COL2 option; ///; /// The algorithm analyses the size of the axis compared to the size of; /// the rendering region. It figures out the boundaries to use for each color; /// of the rendering region. Only one axis is computed here.; ///; /// This allows for a single computation of the boundaries before iterating; /// through all of the bins.; ///; /// \param pAxis the axis to consider; /// \param nPixels the number of pixels to render axis into; /// \param isLog whether the axis is log scale",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:628,log,log,628,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the root window the pointer is logically on and the pointer; /// coordinates relative to the root window's origin.; /// The pointer coordinates returned to win_x and win_y are relative to; /// the origin of the specified window. In this case, QueryPointer returns; /// the child that contains the pointer, if any, or else kNone to; /// childw. QueryPointer returns the current logical state of the; /// keyboard buttons and the modifier keys in mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:125,log,logically,125,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,4,['log'],"['logical', 'logically']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the root window the pointer is logically on and the pointer; /// coordinates relative to the root window's origin.; ///; /// \param [in] id specifies the window; /// \param [in] rootw the root window that the pointer is in; /// \param [in] childw the child window that the pointer is located in, if any; /// \param [in] root_x, root_y the pointer coordinates relative to the root window's; /// origin; /// \param [in] win_x, win_y the pointer coordinates relative to the specified; /// window ""id""; /// \param [in] mask the current state of the modifier keys and pointer; /// buttons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:125,log,logically,125,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['log'],['logically']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if this class has an definition and/or overload of the; /// member function Hash.; ///; /// For example to test if the class overload TObject::Hash use; /// ~~~ {.cpp}; /// if (cl->IsTObject() && cl->HasLocalHashMember()); /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:206,test,test,206,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Run all graphics stress tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:110,test,tests,110,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Run all stress GUI tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:105,test,tests,105,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Run benchmark; /// Input parameters; /// dset: Dataset on which to run; /// start: Start scan with 'start' workers.; /// stop: Stop scan at 'stop workers.; /// step: Scan every 'step' workers.; /// ntries: Number of tries. When it is -1, data member fNTries is used.; /// debug: debug switch.; /// Int_t: Ignored; /// Returns; /// Nothing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunDataRead.cxx:90,benchmark,benchmark,90,proof/proofbench/src/TProofBenchRunDataRead.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunDataRead.cxx,1,['benchmark'],['benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Run benchmark; /// Input parameters; /// nevents: Number of events to run per file. When it is -1, use data member fNEvents.; /// start: Start scan with 'start' workers. When it is -1, use data member fStart.; /// When 0, the same number of workers are activated on all nodes.; /// stop: Stop scan at 'stop' workers. When it is -1 , use data member fStop.; /// step: Scan every 'step' workers. When it is -1, use data member fStep.; /// ntries: Number of repetitions. When it is -1, use data member fNTries.; /// debug: debug switch. When it is -1, use data member fDebug.; /// draw: draw switch. When it is -1, use data member fDraw.; /// Returns; /// Nothing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunCPU.cxx:90,benchmark,benchmark,90,proof/proofbench/src/TProofBenchRunCPU.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunCPU.cxx,1,['benchmark'],['benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Run the $ROOTSYS/test/Event program in several configurations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:103,test,test,103,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Run the Hypothesis test at a previous configured point; /// (internal function called by RunOnePoint)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:105,test,test,105,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Same function as above but returning also the test statistic value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:132,test,test,132,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Save input data file from 'cachedir' into the sandbox or create a the file; /// with input data objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:132,sandbox,sandbox,132,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Save the content associated with worker 'ord' to finel 'fname'.; /// If 'ord' is ""*"" (default), the log from all the workers is saved.; /// If 'opt' is ""a"" the file is open in append mode; otherwise the file; /// is truncated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx:186,log,log,186,proof/proof/src/TProofLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Scan through outputs and fix+log all nans and negative values.; /// \param[in,out] outputs Array to be scanned & fixed.; /// \param[in] begin Begin of event range. Only needed to print the correct event number; /// where the error occurred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:115,log,log,115,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Send a file to master or slave servers. Returns number of slaves; /// the file was sent to, maybe 0 in case master and slaves have the same; /// file system image, -1 in case of error.; /// If defined, send to worker 'wrk' only.; /// If defined, the full path of the remote path will be rfile.; /// If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; /// (to copy to the cache on a different name use rfile = ""cache:newname"").; /// The mask 'opt' is an or of ESendFileOpt:; ///; /// kAscii (0x0) if set true ascii file transfer is used; /// kBinary (0x1) if set true binary file transfer is used; /// kForce (0x2) if not set an attempt is done to find out; /// whether the file really needs to be downloaded; /// (a valid copy may already exist in the cache; /// from a previous run); the bit is set by; /// UploadPackage, since the check is done elsewhere.; /// kForward (0x4) if set, ask server to forward the file to slave; /// or submaster (meaningless for slave servers).; /// kCpBin (0x8) Retrieve from the cache the binaries associated; /// with the file; /// kCp (0x10) Retrieve the files from the cache; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:458,sandbox,sandbox,458,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Send command to be executed on node of ordinal 'ord' (use ""0"" for master).; /// Command can be any legal command line command. Commands like; /// "".x file.C"" or "".L file.C"" will cause the file file.C to be send; /// to the PROOF cluster.; /// If logtomacro is TRUE the text result of the action is saved in the fMacroLog; /// TMacro, accessible via TMacro::GetMacroLog();; /// Returns -1 in case of error, >=0 in case of succes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:332,log,logtomacro,332,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logtomacro']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Send log file to master.; /// If start > -1 send only bytes in the range from start to end,; /// if end <= start send everything from start.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:91,log,log,91,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Send mess to syslog daemon. Level is the logging level and mess the; /// message that will be written on the log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:127,log,logging,127,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,2,['log'],"['log', 'logging']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Send message to server process to retrieve output value; /// If error were logged use logEvalError() on remote side; /// transfer those errors to the local eval error queue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx:161,log,logged,161,roofit/roofitcore/src/RooRealMPFE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx,2,['log'],"['logEvalError', 'logged']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set CC, if traininfo defined, otherwise Log Fatal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:126,Log,Log,126,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for X; /// - value = 0 X scale will be linear; /// - value = 1 X scale will be logarithmic (base 10); /// - value > 1 reserved for possible support of base e or other",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:94,Log,Log,94,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,2,"['Log', 'log']","['Log', 'logarithmic']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for Y; /// - value = 0 Y scale will be linear; /// - value = 1 Y scale will be logarithmic (base 10); /// - value > 1 reserved for possible support of base e or other",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:94,Log,Log,94,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,2,"['Log', 'log']","['Log', 'logarithmic']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set Lin/Log scale for Z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:94,Log,Log,94,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set content of default window HTML page; // Got example: SetDefaultHtmlPage(""file:currentdir/test.html""); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:179,test,test,179,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set evaluation error logging mode. Options are; ///; /// PrintErrors - Print each error through RooMsgService() as it occurs; /// CollectErrors - Accumulate errors, but do not print them. A subsequent call; /// to printEvalErrors() will print a summary; /// CountErrors - Accumulate error count, but do not print them.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,log,logging,107,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set full color attributes to all physicals sharing the same; /// logical with this object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:151,log,logical,151,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set location where SDF fonts and their metrics data are stored or are to be; /// created via the AssertSdfFont() static function.; /// If require_write_access is true (default), write permission in the directory; // dir is required.; /// REveManager needs to be created before calling this function.; /// Static function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveText.cxx:183,Assert,AssertSdfFont,183,graf3d/eve7/src/REveText.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveText.cxx,1,['Assert'],['AssertSdfFont']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set log steps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:90,log,log,90,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set logical slider position of horizontal scrollbar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGScrollBar.cxx:90,log,logical,90,gui/gui/src/TGScrollBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGScrollBar.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set logical slider position of vertical scrollbar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGScrollBar.cxx:90,log,logical,90,gui/gui/src/TGScrollBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGScrollBar.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set server logging level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:97,log,logging,97,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set the axis in log scale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoordVar.cxx:102,log,log,102,tree/treeviewer/src/TParallelCoordVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoordVar.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set the file stream where to log (default stderr).; /// If ferr == 0 the default is restored.; /// Returns current setting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:115,log,log,115,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set the kMoreLogLabels bit flag. When this option is selected more labels are; /// drawn when in logarithmic scale and there is a small number of decades (less than 3).; /// Note that this option is automatically inherited from TAxis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:183,log,logarithmic,183,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set the kMoreLogLabels bit flag; /// When this option is selected more labels are drawn when in log scale and there is a small number; /// of decades (<3).; /// The flag (in fBits) is passed to the drawing function TGaxis::PaintAxis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:182,log,log,182,hist/hist/inc/TAxis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; /// Use the existing setting or the default if nothing is found.; /// If 'assert' is kTRUE, make also sure that the path exists.; /// Return 0 on success, -1 on failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:94,sandbox,sandbox,94,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,3,"['Sandbox', 'assert', 'sandbox']","['Sandbox', 'assert', 'sandbox']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:210,test,test,210,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,4,"['Test', 'test']","['TestBit', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Sets the Test dataset.; /// Those events will not be used for the minimization but for control",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:95,Test,Test,95,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Sets the Test dataset.; /// Those events will not be used for the minimization but for control.; /// Note that the tree must be already defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:95,Test,Test,95,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Sets z-axis scale:; /// - scale - linear, sqrt or log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:136,log,log,136,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Show log window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:91,log,log,91,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Show query log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:97,log,log,97,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Show session log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:99,log,log,99,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Simple test entry constructor. Notice TString argument comes before the; /// parent argument (to make this ctor different from the first one taking a; /// const char*).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:93,test,test,93,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Simulate dynamic addition, for test purposes.; /// Here we decide how many workers to add, we create them and set the; /// environment.; /// This call is called regularly by Collect if the opton is enabled.; /// Returns the number of new workers added, or <0 on errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:117,test,test,117,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot called whenever the X axis log scale boolean is modified; /// by the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:118,log,log,118,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot called whenever the Y axis log scale boolean is modified by the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:118,log,log,118,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot called whenever the Z axis log scale boolean is modified by the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:118,log,log,118,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot called whenever the apply on XYZ button is clicked. The settings of; /// the current selected axis pad are applyed on all axis.; /// NB: The logarithmic scale option isn't modified by this method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:232,log,logarithmic,232,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot connected to more Log labels flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TAxisEditor.cxx:109,Log,Log,109,gui/ged/src/TAxisEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TAxisEditor.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot connected to the check box 'LogX'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx:119,Log,LogX,119,gui/ged/src/TPadEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx,1,['Log'],['LogX']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot connected to the check box 'LogY'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx:119,Log,LogY,119,gui/ged/src/TPadEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx,1,['Log'],['LogY']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot connected to the check box 'LogZ'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx:119,Log,LogZ,119,gui/ged/src/TPadEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx,1,['Log'],['LogZ']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Slot for Log scale setting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TAxisEditor.cxx:95,Log,Log,95,gui/ged/src/TAxisEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TAxisEditor.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Standard constructor.; ///; /// - jobname : this name will appear in all weight file names produced by the MVAs; /// - theTargetFile : output ROOT file; the test tree and all evaluation plots; /// will be stored here; /// - theOption : option string; currently: ""V"" for verbose",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:243,test,test,243,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Start Test:; /// Open the TCanvas C and set the acceptable error (number of characters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:92,Test,Test,92,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Start a PROOF session on a specific cluster. If cluster is 0 (the; /// default) then the PROOF Session Viewer GUI pops up and 0 is returned.; /// If cluster is ""lite://"" we start a PROOF-lite session.; /// If cluster is """" (empty string) then we connect to the cluster specified; /// by 'Proof.LocalDefault', defaulting to ""lite://"".; /// If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster; /// managed by PROOF on Demand (PoD, http://pod.gsi.de ).; /// Via conffile a specific PROOF config file in the confir directory can be specified.; /// Use loglevel to set the default loging level for debugging.; /// The appropriate instance of TProofMgr is created, if not; /// yet existing. The instantiated TProof object is returned.; /// Use TProof::cd() to switch between PROOF sessions.; /// For more info on PROOF see the TProof ctor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:660,log,loglevel,660,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['log'],"['loging', 'loglevel']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:92,log,logging,92,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,3,['log'],"['log', 'logging']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Start the log viewer window usign the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:96,log,log,96,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:93,Benchmark,Benchmark,93,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,7,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark', 'benchmarks']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Starts new block of tests; /// In web mode configure number of batch images",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:106,test,tests,106,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the global flag to reject points; /// the fgRejectPoint global flag is tested by all fit functions; /// if TRUE the point is not included in the fit.; /// This flag can be set by a user in a fitting function.; /// The fgRejectPoint flag is reset by the TH1 and TGraph fitting functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:180,test,tested,180,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Static method to get the return code from the execution of a command via; /// the pipe. This is always 0 when the log handler is not used with a pipe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:200,log,log,200,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// ""U"" include Underflows in test; /// ""O"" include Overflows; /// ""N"" include comparison of normalizations; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; /// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; /// The average of all the maximum distances obtained is used in the tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:98,test,test,98,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,6,['test'],"['test', 'tests']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// THIS histogram and h2, using Kolmogorov test.; /// Default: Ignore under- and overflow bins in comparison; ///; /// option is a character string to specify options; /// - ""U"" include Underflows in test; /// - ""O"" include Overflows; /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// The KS test uses the distance between the pseudo-CDF's obtained; /// from the histogram. Since in 2D the order for generating the pseudo-CDF is; /// arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; /// other from the y axis and the maximum distance is the average of the two maximum; /// distances obtained.; ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:98,test,test,98,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,5,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using Kolmogorov test.; /// Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; /// and not for binned data as in the case of the histogram (see NOTE 3 below).; /// So, before using this method blindly, read the NOTE 3.; ///; /// Default: Ignore under- and overflow bins in comparison; ///; /// \param[in] h2 histogram; /// \param[in] option is a character string to specify options; /// - ""U"" include Underflows in test (also for 2-dim); /// - ""O"" include Overflows (also valid for 2-dim); /// - ""N"" include comparison of normalizations; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""M"" Return the Maximum Kolmogorov distance instead of prob; /// - ""X"" Run the pseudo experiments post-processor with the following procedure:; /// make pseudoexperiments based on random values from the parent distribution,; /// compare the KS distance of the pseudoexperiment to the parent; /// distribution, and count all the KS values above the value; /// obtained from the original data to Monte Carlo distribution.; /// The number of pseudo-experiments nEXPT is by default 1000, and; /// it can be changed by specifying the option as ""X=number"",; /// for example ""X=10000"" for 10000 toys.; /// The function returns the probability.; /// (thanks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,test,test,98,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,4,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test of compatibility in shape between; /// this histogram and h2, using the Anderson-Darling 2 sample test.; ///; /// The AD 2 sample test formula are derived from the paper; /// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; ///; /// The test is implemented in root in the ROOT::Math::GoFTest class; /// It is the same formula ( (6) in the paper), and also shown in; /// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); ///; /// Binned data are considered as un-binned data; /// with identical observation happening in the bin center.; ///; /// \param[in] h2 Pointer to 1D histogram; /// \param[in] option is a character string to specify options; /// - ""D"" Put out a line of ""Debug"" printout; /// - ""T"" Return the normalized A-D test statistic; ///; /// - Note1: Underflow and overflow are not considered in the test; /// - Note2: The test works only for un-weighted histogram (i.e. representing counts); /// - Note3: The histograms are not required to have the same X axis; /// - Note4: The test works only for 1-dimensional histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:98,test,test,98,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,9,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test whether two one-dimensional sets of points are compatible; /// with coming from the same parent distribution, using the Kolmogorov test.; /// That is, it is used to compare two experimental distributions of unbinned data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:98,test,test,98,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,3,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Stops Benchmark name and Prints results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:92,Benchmark,Benchmark,92,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Stub implementation to avoid forcing implementation at this stage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:86,Stub,Stub,86,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,1,['Stub'],['Stub']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Stub to avoid forcing implementation at this stage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TShape.cxx:86,Stub,Stub,86,graf3d/g3d/src/TShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TShape.cxx,1,['Stub'],['Stub']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Sum of log (un-needed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:93,log,log,93,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Switch ON/OFF edit mode.; /// If edit mode is ON it is possible:; ///; /// 1. embed other ROOT GUI application (a la ActiveX); ///; /// For example:; /// TGMainFrame *m = new TGMainFrame(gClient->GetRoot(), 500, 500);; /// m->SetEditable();; /// gSystem->Load(""$ROOTSYS/test/Aclock""); // load Aclock demo; /// Aclock a;; /// gROOT->Macro(""$ROOTSYS/tutorials/gui/guitest.C"");; /// m->SetEditable(0);; /// m->MapWindow();; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx:356,test,test,356,gui/gui/src/TGFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Switch ON/OFF the real-time logging facility. When this option is; /// ON, log messages from processing are sent back as they come, instead of; /// being sent back at the end in one go. This may help debugging or monitoring; /// in some cases, but, depending on the amount of log, it may have significant; /// consequencies on the load over the network, so it must be used with care.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:114,log,logging,114,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,3,['log'],"['log', 'logging']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// TEllipse test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:95,test,test,95,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// TH2Poly test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:94,test,test,94,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// THREE-DIMENSIONAL CLASSICAL PEAK SEARCH FUNCTION; /// This function searches for peaks in source spectrum using; /// the algorithm based on smoothed second differences.; ///; /// Function parameters:; /// - source-pointer to the matrix of source spectrum; /// - ssizex-x length of source spectrum; /// - ssizey-y length of source spectrum; /// - ssizez-z length of source spectrum; /// - sigma-sigma of searched peaks, for details we refer to manual; /// - threshold-threshold value in % for selected peaks, peaks with; /// amplitude less than threshold*highest_peak/100; /// are ignored, see manual; /// - markov-logical variable, if it is true, first the source spectrum; /// is replaced by new spectrum calculated using Markov; /// chains method.; /// - averWindow-averaging window of searched peaks, for details; /// we refer to manual (applies only for Markov method)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx:700,log,logical,700,hist/spectrum/src/TSpectrum3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// TImage test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:93,test,test,93,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// TMatText test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:95,test,test,95,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// TMultigraph and TGraphErrors test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,test,test,115,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// TODO test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx:91,test,test,91,roofit/roostats/src/SamplingDistPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Terminate the application. Reset the terminal to sane mode and call; /// the logoff macro defined via Rint.Logoff environment variable.; /// @note The function does not return, unless the class has; /// been told to return from Run(), by a call to SetReturnFromRun().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:163,log,logoff,163,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,2,"['Log', 'log']","['Logoff', 'logoff']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Terminates Benchmark with specified name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:97,Benchmark,Benchmark,97,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['Benchmark'],['Benchmark']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test Color Selection Dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test Patterns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Test,Test,86,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TGListTree and TGListTreeItems.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TGShutter widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; /// directions randomly in cos(theta). Compute d1 = DistFromInside and move the; /// point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; /// the shape is not re-entered. Swap direction and call DistFromOutside that; /// should fall back on the same point on the boundary (at d2). Propagate back on boundary; /// then compute DistFromInside that should be bigger than d1.; /// Plot d-(d1+d2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:86,Test,Test,86,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TLine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Test,Test,86,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TMarker",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Test,Test,86,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TNtuple class with several selection mechanisms; /// Test expression cuts; /// Test graphical cuts; /// Test event lists and operations on event lists; /// Compare results of TTree::Draw with results of an explict loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,4,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TPolyLine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Test,Test,86,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TProofOutputFile technology to create a dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test TProofOutputFile technology to create a ntuple, with or without; /// submergers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test chains of Trees; /// We make a TChain using the 10 files generated in test10; /// We expect the same results when analyzing the chain than; /// in the analysis of the original big file Event.root in test9.; /// Because TChain derives from TTree, we can use the same; /// analysis procedure ""stress9tree""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test dataset registration, verification, usage, removal.; /// Use H1 analysis files on HTTP as example",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test different styles and the enabled/disabled state of labels.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test different text alignments in a TGTextButton.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test edge against face (triangle); ///; /// \param[in] del precision; /// \param[in] xyz nodes; /// \param[in] i1 1-st node of edge; /// \param[in] i2 2-nd node of edge; /// \param[in] iface triangular face; /// \param[in] abcd face plane; ///; /// \param[out] irep 1: edge under face, 0: no decision, +1: edge before face",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx:86,Test,Test,86,hist/histpainter/src/TPainter3dAlgorithms.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test enabled/disabled state of button group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test equality of points with epsilon 1e-10.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveGeoPolyShape.cxx:86,Test,Test,86,graf3d/eve7/src/REveGeoPolyShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveGeoPolyShape.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test for shape navigation methods. Summary for test numbers:; /// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; /// directions randomly in cos(theta). Compute DistFromInside and move the; /// point with bigger distance. Compute DistFromOutside back from new point.; /// Plot d-(d1+d2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoPainter.cxx:86,Test,Test,86,geom/geompainter/src/TGeoPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoPainter.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test for shape navigation methods. Summary for test numbers:; /// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; /// directions randomly in cos(theta). Compute DistFromInside and move the; /// point with bigger distance. Compute DistFromOutside back from new point.; /// Plot d-(d1+d2); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:86,Test,Test,86,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test for shape navigation methods. Summary for test numbers:; /// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; /// directions randomly in cos(theta). Compute DistFromInside and move the; /// point with bigger distance. Compute DistFromOutside back from new point.; /// Plot d-(d1+d2); /// - 2: Safety test. Sample points inside the bounding and compute safety. Generate; /// directions randomly in cos(theta) and compute distance to boundary. Check if; /// distance to boundary is bigger than safety",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:86,Test,Test,86,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test for shape navigation methods. Summary for test numbers:; ///; /// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; /// directions randomly in cos(theta). Compute DistFromInside and move the; /// point with bigger distance. Compute DistFromOutside back from new point.; /// Plot d-(d1+d2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:86,Test,Test,86,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test horizontal and vertical sliders.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if DB support statement and number of open statements is not exceeded",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:86,Test,Test,86,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if a double is almost an integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Test,Test,86,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Test,Test,86,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,4,"['Test', 'test']","['Test', 'testArg']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the nodes of tree are shared with that of the given tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Test,Test,86,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if buffer represents a solid uncut sphere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:86,Test,Test,86,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if lock is a valid type to take/release.; /// kUnlocked is never valid in these cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLockable.cxx:86,Test,Test,86,graf3d/gl/src/TGLLockable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLockable.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if point is inside the assembly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShapeAssembly.cxx:86,Test,Test,86,geom/geom/src/TGeoShapeAssembly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShapeAssembly.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if point is inside the scaled shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoScaledShape.cxx:86,Test,Test,86,geom/geom/src/TGeoScaledShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoScaledShape.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if point is inside the torus.; /// check phi range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTorus.cxx:86,Test,Test,86,geom/geom/src/TGeoTorus.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTorus.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if point is inside this shape.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoArb8.cxx:86,Test,Test,86,geom/geom/src/TGeoArb8.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoArb8.cxx,3,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if table name exists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:86,Test,Test,86,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if the binning is equidistant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Test,Test,86,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if the block is in cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFilePrefetch.cxx:86,Test,Test,86,io/io/src/TFilePrefetch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFilePrefetch.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if the transformation is a scale.; /// To be used by ROOT TGLObject descendants that potentially need to; /// use GL_NORMALIZE.; /// The low/high limits are expected to be squares of actual limits.; ///; /// Ideally this should be done by the TGLViewer [but is not].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrans.cxx:86,Test,Test,86,graf3d/eve/src/TEveTrans.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrans.cxx,2,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if there is really something to render",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:86,Test,Test,86,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if there is really something to render.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/src/TGX11TTF.cxx:86,Test,Test,86,graf2d/x11ttf/src/TGX11TTF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/src/TGX11TTF.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test if two double are almost equal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:86,Test,Test,86,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test input data functionality",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test layout and different states of some buttons.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test log retrieving",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,2,"['Test', 'log']","['Test', 'log']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test method for TSpline5; ///; /// ~~~ {.cpp}; /// n number of data points.; /// m 2*m-1 is order of spline.; /// m = 2 always for third spline.; /// nn,nm1,mm,; /// mm1,i,k,; /// j,jj temporary integer variables.; /// z,p temporary double precision variables.; /// x[n] the sequence of knots.; /// y[n] the prescribed function values at the knots.; /// a[200][4] two dimensional array whose columns are; /// the computed spline coefficients; /// diff[3] maximum values of differences of values and; /// derivatives to right and left of knots.; /// com[3] maximum values of coefficients.; /// ~~~; ///; /// test of TSpline3 with non equidistant knots and; /// equidistant knots follows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:86,Test,Test,86,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test method for TSpline5; ///; /// ~~~ {.cpp}; /// n number of data points.; /// m 2*m-1 is order of spline.; /// m = 3 always for quintic spline.; /// nn,nm1,mm,; /// mm1,i,k,; /// j,jj temporary integer variables.; /// z,p temporary double precision variables.; /// x[n] the sequence of knots.; /// y[n] the prescribed function values at the knots.; /// a[200][6] two dimensional array whose columns are; /// the computed spline coefficients; /// diff[5] maximum values of differences of values and; /// derivatives to right and left of knots.; /// com[5] maximum values of coefficients.; /// ~~~; ///; /// test of TSpline5 with non equidistant knots and; /// equidistant knots follows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:86,Test,Test,86,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test mkdir returnExistingDirectory outside and within a Root file; /// Create some directories, ensure they point to the expected places",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test number entries in different formats.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test of 2-d histograms, functions, 2-d fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test of Postscript.; /// Make a complex picture. Verify number of lines on ps file; /// Testing automatically the graphics package is a complex problem.; /// The best way we have found is to generate a Postscript image; /// of a complex canvas containing many objects.; /// The number of lines in the ps file is compared with a reference run.; /// A few lines (up to 2 or 3) of difference may be expected because; /// Postscript works with floats. The date and time of the run are also; /// different.; /// You can also inspect visually the ps file with a ps viewer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,2,['Test'],"['Test', 'Testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test or wait for available input; ///; /// \param[in] wait blocking wait on input; ///; /// Wait true - block, wait false - poll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderUnix.cpp:86,Test,Test,86,core/textinput/src/textinput/StreamReaderUnix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderUnix.cpp,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test output handling via file using ProofSimple (see tutorials)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test package clearing, uploading, enabling, removal.; /// Use event.par as example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of TTree friends in PROOF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of TTree in subdirectories",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of multiple trees in the same files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test processing of sub-samples (entries-from-first) from files with the; /// 'event' structures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a chain reading the data from HTTP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a chain reading the data from HTTP and; /// passing the selector by object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a file collection reading the data from HTTP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 analysis as a named dataset reading the data from HTTP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,2,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 and Simple analysis in asynchronous mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the ProofEvent analysis (see tutorials)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the ProofSimple analysis (see tutorials)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the ProofSimple analysis (see tutorials) passing the; /// selector by object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the admin functionality",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test run using the H1 analysis for the multi-dataset functionality and; /// entry-lists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test selections via TreeFormula; /// tree is a TTree when called by stress9; /// tree is a TChain when called from stress11; /// This is a quite complex test checking the results of TTree::Draw; /// or TChain::Draw with an explicit loop on events.; /// Also a good test for the interpreter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test session opening",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Test,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test several styles of progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test subdirectories in a Root file; /// Create many TH1S histograms, make operations between them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Test,Test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test table layout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test the PCA, bye calculating the sum square of residuals; /// (see method SumOfSquareResiduals), and display the histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:86,Test,Test,86,hist/hist/src/TPrincipal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test the different configurations/states of a split button.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test the different modes available for text entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Test,Test,86,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test the tree quality.. in terms of Misclassification.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:86,Test,Test,86,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test whether the type of the given pyobject is CPPOverload type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:86,Test,Test,86,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test whether the type of the given pyobject is CPPinstance type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:86,Test,Test,86,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test whether the type of the given pyobject is of CPPInstance type or any; /// derived type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:86,Test,Test,86,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test whether the type of the given pyobject is of CPPOverload type or any; /// derived type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:86,Test,Test,86,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) an object with a specific name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Test,Test,86,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) any object in the; /// specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Test,Test,86,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Test, if table of specified name exists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:86,Test,Test,86,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Testing passing arguments to packages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:86,Test,Testing,86,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:86,Test,Tests,86,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Tests for termination. Unless the user supplies a specific termination; /// routine, this method calls another method defaultStatus, which returns; /// a code indicating the current convergence status.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpSolverBase.cxx:86,Test,Tests,86,math/quadp/src/TQpSolverBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpSolverBase.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Tests if point is inside the shape.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCompositeShape.cxx:86,Test,Tests,86,geom/geom/src/TGeoCompositeShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCompositeShape.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Tests if table of that name exists in database; /// Return kTRUE, if table exists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx:86,Test,Tests,86,net/net/src/TSQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The anchor points are rescaled by a log operation.; /// It is called by the log - button. Protected method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx:122,log,log,122,graf2d/asimage/src/TASPaletteEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The computation routine of the Chisquare test. For the method description,; /// see Chi2Test() function.; ///; /// \return p-value; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; /// histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = if one or both histograms is scaled; /// - ""OF"" = overflows included; /// - ""UF"" = underflows included; /// by default underflows and overflows are not included; /// \param[out] igood test output; /// - igood=0 - no problems; /// - For unweighted unweighted comparison; /// - igood=1'There is a bin in the 1st histogram with less than 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less than 1 event'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For unweighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 1 event'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// - For weighted weighted comparison; /// - igood=1'There is a bin in the 1st histogram with less then 10 effective; /// number of events'; /// - igood=2'There is a bin in the 2nd histogram with less then 10 effective; /// number of events'; /// - igood=3'when the conditions for igood=1 and igood=2 are satisfied'; /// \param[out] chi2 chisquare of the test; /// \param[out] ndf number of degrees of freedom (important, when both histograms have the same empty bins); /// \param[out] res normalized residuals for further analysis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:127,test,test,127,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,3,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The consistency check always fails if the TClass object was not set!; /// if checkConsistency is:; /// kNoCheck: no check is done, register the rule as is; /// kCheckConflict: check only for conflicting rules; /// kCheckAll: check for conflict and check for rule about members that are not in the current class layout.; /// return kTRUE if the layout is accepted, in which case we take ownership of; /// the rule object.; /// return kFALSE if the rule failed one of the test, the rule now needs to be deleted by the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRuleSet.cxx:556,test,test,556,core/meta/src/TSchemaRuleSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRuleSet.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The db should be of the form: `<dbms>://<host>[:<port>][/<database>]`,; /// e.g.: `mysql://pcroot.cern.ch:3456/test`, `oracle://srv1.cern.ch/main`,; /// `pgsql://...` or `sqlite://<database>...`; /// The uid is the username and pw the password that should be used for; /// the connection. Depending on the `<dbms>` the shared library (plugin); /// for the selected system will be loaded. When the connection could not; /// be opened 0 is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx:197,test,test,197,net/net/src/TSQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The function SetHistAdd() is needed for a standalone TApplication to log the; /// TGCommandPlugin commands into a ROOT history file.; /// However, this function has no effect if the user does not explictly set on; /// his standalone application the name of the ROOT history file.; /// To log into the default ROOT history file, call this on the user-side of the; /// code:; /// Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory()));; /// Otherwise, replace the argument of Gl_histinit with a text file name you want; /// to use for application-specific logging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCommandPlugin.cxx:155,log,log,155,gui/gui/src/TGCommandPlugin.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCommandPlugin.cxx,3,['log'],"['log', 'logging']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The network is described by a simple string:; /// The input/output layers are defined by giving; /// the branch names separated by comas.; /// Hidden layers are just described by the number of neurons.; /// The layers are separated by colons.; ///; /// Ex: ""x,y:10:5:f""; ///; /// The output can be prepended by '@' if the variable has to be; /// normalized.; /// The output can be followed by '!' to use Softmax neurons for the; /// output layer only.; ///; /// Ex: ""x,y:10:5:c1,c2,c3!""; ///; /// Input and outputs are taken from the TTree given as second argument.; /// training and test are the two TEventLists defining events; /// to be used during the neural net training.; /// Both the TTree and the TEventLists can be defined in the constructor,; /// or later with the suited setter method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:670,test,test,670,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// The network is described by a simple string:; /// The input/output layers are defined by giving; /// the branch names separated by comas.; /// Hidden layers are just described by the number of neurons.; /// The layers are separated by colons.; ///; /// Ex: ""x,y:10:5:f""; ///; /// The output can be prepended by '@' if the variable has to be; /// normalized.; /// The output can be followed by '!' to use Softmax neurons for the; /// output layer only.; ///; /// Ex: ""x,y:10:5:c1,c2,c3!""; ///; /// Input and outputs are taken from the TTree given as second argument.; /// training and test are two cuts (see TTreeFormula) defining events; /// to be used during the neural net training and testing.; ///; /// Example: ""Entry$%2"", ""(Entry$+1)%2"".; ///; /// Both the TTree and the cut can be defined in the constructor,; /// or later with the suited setter method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:670,test,test,670,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,4,['test'],"['test', 'testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This delete is to test the relocation of variable length array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:104,test,test,104,test/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function installs a global IsA function for this class.; /// The global IsA function will be used if there is no local IsA function (fIsA); ///; /// A global IsA function has the signature:; ///; /// ~~~ {.cpp}; /// TClass *func( TClass *cl, const void *obj);; /// ~~~; ///; /// 'cl' is a pointer to the TClass object that corresponds to the; /// 'pointer type' used to retrieve the value 'obj'; ///; /// For example with:; /// ~~~ {.cpp}; /// TNamed * m = new TNamed(""example"",""test"");; /// TObject* o = m; /// ~~~; /// and; /// the global IsA function would be called with TObject::Class() as; /// the first parameter and the exact numerical value in the pointer; /// 'o'.; ///; /// In other word, inside the global IsA function. it is safe to C-style; /// cast the value of 'obj' into a pointer to the class described by 'cl'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:570,test,test,570,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function searches for peaks in source spectrum; /// It is based on deconvolution method. First the background is; /// removed (if desired), then Markov spectrum is calculated; /// (if desired), then the response function is generated; /// according to given sigma and deconvolution is carried out.; /// It returns number of found peaks.; ///; /// Function parameters:; /// - source-pointer to the matrix of source spectrum; /// - dest-pointer to the matrix of resulting deconvolved spectrum; /// - ssizex-x length of source spectrum; /// - ssizey-y length of source spectrum; /// - ssizez-z length of source spectrum; /// - sigma-sigma of searched peaks, for details we refer to manual; /// - threshold-threshold value in % for selected peaks, peaks with; /// amplitude less than threshold*highest_peak/100; /// are ignored, see manual; /// - backgroundRemove-logical variable, set if the removal of; /// background before deconvolution is desired; /// - deconIterations-number of iterations in deconvolution operation; /// - markov-logical variable, if it is true, first the source spectrum; /// is replaced by new spectrum calculated using Markov; /// chains method.; /// - averWindow-averaging window of searched peaks, for details; /// we refer to manual (applies only for Markov method); ///; /// ### Peaks searching; ///; /// Goal: to identify automatically the peaks in spectrum with the presence of; /// the continuous background, one- and two-fold coincidences (ridges) and statistical; /// fluctuations - noise.; ///; /// The common problems connected; /// with correct peak identification in three-dimensional coincidence spectra are; ///; /// - non-sensitivity to noise, i.e.,; /// only statistically relevant peaks should be identified; /// - non-sensitivity of the; /// algorithm to continuous background; /// - non-sensitivity to one-fold coincidences; /// (coincidences peak - peak - background",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx:951,log,logical,951,hist/spectrum/src/TSpectrum3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function searches for peaks in source spectrum; /// It is based on deconvolution method. First the background is; /// removed (if desired), then Markov spectrum is calculated; /// (if desired), then the response function is generated; /// according to given sigma and deconvolution is carried out.; ///; /// Function parameters:; /// - source-pointer to the matrix of source spectrum; /// - dest-pointer to the matrix of resulting deconvolved spectrum; /// - ssizex-x length of source spectrum; /// - ssizey-y length of source spectrum; /// - sigma-sigma of searched peaks, for details we refer to manual; /// - threshold-threshold value in % for selected peaks, peaks with; /// amplitude less than threshold*highest_peak/100; /// are ignored, see manual; /// - backgroundRemove-logical variable, set if the removal of; /// background before deconvolution is desired; /// - deconIterations-number of iterations in deconvolution operation; /// - markov-logical variable, if it is true, first the source spectrum; /// is replaced by new spectrum calculated using Markov; /// chains method.; /// - averWindow-averaging window of searched peaks, for details; /// we refer to manual (applies only for Markov method); ///; /// ### Peaks searching; ///; /// Goal: to identify automatically the peaks in spectrum with the presence of the; /// continuous background, one-fold coincidences (ridges) and statistical; /// fluctuations - noise.; ///; /// The common problems connected with correct peak identification in two-dimensional coincidence spectra are; ///; /// - non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; /// - non-sensitivity of the algorithm to continuous background; /// - non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; /// - ability to identify peaks close to the edges of the spectrum region. Us",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx:870,log,logical,870,hist/spectrum/src/TSpectrum2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx,2,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function sets the following fitting parameters of background:; /// - a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); /// - fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); /// - a1Init - initial value of a1 parameter; /// - fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); /// - a2Init - initial value of a2 parameter; /// - fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumFit.cxx:258,log,logical,258,hist/spectrum/src/TSpectrumFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumFit.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function sets the following fitting parameters of background:; /// - a0Init - initial value of a0 parameter (background is estimated as a0+ax*x+ay*y); /// - fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); /// - axInit - initial value of ax parameter; /// - fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); /// - ayInit - initial value of ay parameter; /// - fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Fit.cxx:256,log,logical,256,hist/spectrum/src/TSpectrum2Fit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Fit.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function sets the following fitting parameters of peaks:; /// - sigma - initial value of sigma parameter; /// - fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); /// - positionInit - array of initial values of peaks positions; /// - fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; /// - ampInit - array of initial values of peaks amplitudes; /// - fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumFit.cxx:214,log,logical,214,hist/spectrum/src/TSpectrumFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumFit.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function sets the following fitting parameters of peaks:; /// - sigmaX - initial value of sigma x parameter; /// - fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); /// - sigmaY - initial value of sigma y parameter; /// - fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); /// - ro - initial value of ro parameter (correlation coefficient); /// - fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); /// - positionInitX - array of initial values of peaks x positions; /// - fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; /// - positionInitY - array of initial values of peaks y positions; /// - fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; /// - ampInit - array of initial values of 2D peaks amplitudes; /// - fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; /// - ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; /// - fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; /// - ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; /// - fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Fit.cxx:218,log,logical,218,hist/spectrum/src/TSpectrum2Fit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Fit.cxx,8,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function sets the following fitting parameters of tails of peaks; /// - tInit - initial value of t parameter; /// - fixT - logical value of t parameter, which allows to fix the parameter (not to fit); /// - bInit - initial value of b parameter; /// - fixB - logical value of b parameter, which allows to fix the parameter (not to fit); /// - sInit - initial value of s parameter; /// - fixS - logical value of s parameter, which allows to fix the parameter (not to fit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumFit.cxx:214,log,logical,214,hist/spectrum/src/TSpectrumFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumFit.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This function sets the following fitting parameters of tails of peaks; /// - tInitXY - initial value of txy parameter; /// - fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); /// - tInitX - initial value of tx parameter; /// - fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); /// - tInitY - initial value of ty parameter; /// - fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); /// - bInitX - initial value of bx parameter; /// - fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); /// - bInitY - initial value of by parameter; /// - fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); /// - sInitXY - initial value of sxy parameter; /// - fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); /// - sInitX - initial value of sx parameter; /// - fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); /// - sInitY - initial value of sy parameter; /// - fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Fit.cxx:220,log,logical,220,hist/spectrum/src/TSpectrum2Fit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Fit.cxx,8,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:124,log,logic,124,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,2,"['log', 'test']","['logic', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This method generates a toy data set for importance sampling for the given parameter point taking; /// global observables into account.; /// The values of the generated global observables remain in the pdf's variables.; /// They have to have those values for the subsequent evaluation of the; /// test statistics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:383,test,test,383,roofit/roostats/src/ToyMCImportanceSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This method generates a toy data set for the given parameter point taking; /// global observables into account.; /// The values of the generated global observables remain in the pdf's variables.; /// They have to have those values for the subsequent evaluation of the; /// test statistics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:359,test,test,359,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This method is the main functionality in this class. It does the heavy; /// lifting of matching duration timestamps to tasks and partition evaluations.; /// \param[in] analyzed_gradient Gradient to analyze. For example, setting to 1; /// analyzes the first gradient (ordered by time); /// in the logs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx:382,log,logs,382,roofit/multiprocess/src/HeatmapAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:637,test,test,637,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Train the network.; /// nEpoch is the number of iterations.; /// option can contain:; /// - ""text"" (simple text output); /// - ""graph"" (evoluting graphical training curves); /// - ""update=X"" (step for the text/graph output update); /// - ""+"" will skip the randomisation and start from the previous values.; /// - ""current"" (draw in the current canvas); /// - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; /// - ""minErrorTest"" (stop when NN error on the test sample gets below minE; /// All combinations are available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:569,test,test,569,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Transfer the initial (i.e. current) state of the master to all; /// slave servers. Currently the initial state includes: log level.; /// Returns the number of active slaves. Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:207,log,log,207,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Truncate the log file to the 80% of the required max size if this; /// is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:99,log,log,99,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Try to construct an appropriate logical-shape sub-class based; /// on id'class, following convention that SomeClassGL is a suitable; /// renderer for class SomeClass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:118,log,logical-shape,118,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical-shape']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Try to fit the found parameterisation to the test sample.; ///; /// Options; /// M use Minuit to improve coefficients; ///; /// Also, refer to; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:131,test,test,131,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Try to get user name and passwd from the ~/.rootnetrc or; /// ~/.netrc files. First ~/.rootnetrc is tried, after that ~/.netrc.; /// These files will only be used when their access masks are 0600.; /// Returns kTRUE if user and passwd were found for the machine; /// specified in the URL. If kFALSE, user and passwd are """".; /// The boolean pwhash is set to kTRUE if the returned passwd is to; /// be understood as password hash, i.e. if the 'password-hash' keyword; /// is found in the 'machine' lines; not implemented for 'secure'; /// and the .netrc file.; /// The format of these files are:; ///; /// # this is a comment line; /// machine `<machine fqdn>` login `<user>` password `<passwd>`; /// machine `<machine fqdn>` login `<user>` password-hash `<passwd>`; ///; /// and in addition ~/.rootnetrc also supports:; ///; /// secure `<machine fqdn>` login `<user>` password `<passwd>`; ///; /// `<machine fqdn>` may be a domain name or contain the wild card '*'.; ///; /// for the secure protocols. All lines must start in the first column.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:746,log,login,746,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,3,['log'],['login']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Update the internal interest box (fInterestBox) of the camera.; /// The interest box is an orientated bounding box, calculated as; /// an expanded container round the frustum. It is used to test if; /// if object bounding boxes are of interest (should be accepted; /// into viewer scene) for a camera - see TGLCamera::OfInterest(); ///; /// The interest box is updated if the frustum is no longer contained; /// in the existing one, or a new one calculated on the current frustum; /// differs significantly in volume (camera has been zoomed/dollyed; /// sizable amount).; ///; /// If the interest box is updated we return kTRUE - kFALSE otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:276,test,test,276,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Utility to stream loggs to client.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:104,log,loggs,104,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['log'],['loggs']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the TGTextEdit widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:98,test,test,98,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:893,log,log,893,core/base/src/TMacro.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// While the data gets copied into the local training and testing; /// trees, the input tree can change (for instance when changing from; /// signal to background tree, or using TChains as input) The; /// TTreeFormulas, that hold the input expressions need to be; /// re-associated with the new tree, which is done here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:141,test,testing,141,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Wipes logicals in refresh-cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:92,log,logicals,92,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logicals']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Wrapper to notofuer / logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:108,log,logger,108,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,1,['log'],['logger']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Write test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:92,test,test,92,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// Zoom the camera - 'adjust lens focal length, retaining camera position'.; /// Arguments are:; ///; /// - 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; /// - 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(); ///; /// For an orthographic camera dollying and zooming are identical and both equate; /// logically to a rescaling of the viewport limits - without center shift.; /// There is no perspective foreshortening or lens 'focal length'.; ///; /// Returns kTRUE is redraw required (camera change), kFALSE otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOrthoCamera.cxx:438,log,logically,438,graf3d/gl/src/TGLOrthoCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOrthoCamera.cxx,1,['log'],['logically']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// \brief Add 2 entry lists.; ///; /// \param[in] elist The list that should be added to the current one.; ///; /// \note If you are creating a TEntryList for a TChain and you would like to; /// have a one to one mapping between the sub lists of the TEntryList and; /// the sub trees in the TChain, please do not call this function but use; /// TEntryList::AddSubList instead and pair it with a call to; /// TChain::SetEntryList with option ""sync"". See the AddSubList function; /// documentation for an example usage. This helps for example in a; /// testing or benchmark scenario where a TChain holds multiple times the; /// same tree in the same file. In that case, this function would not be; /// be able to distinguish different sub entry lists that refer to the; /// same treename and filename. Instead it would create a union of all the; /// sub entry lists into one list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx:634,test,testing,634,tree/tree/src/TEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx,2,"['benchmark', 'test']","['benchmark', 'testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// \brief Luxury level is set in the same way as the original FORTRAN routine.; ///; /// - level 0 (p=24): equivalent to the original RCARRY of Marsaglia; /// and Zaman, very long period, but fails many tests.; /// - level 1 (p=48): considerable improvement in quality over level 0,; /// now passes the gap test, but still fails spectral test.; /// - level 2 (p=97): passes all known tests, but theoretically still; /// defective.; /// - level 3 (p=223): DEFAULT VALUE. Any theoretically possible; /// correlations have very small chance of being observed.; /// - level 4 (p=389): highest possible luxury, all 24 bits chaotic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:286,test,tests,286,math/mathcore/src/TRandom1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx,4,['test'],"['test', 'tests']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// \brief Round the given half-precision number to the nearest representable value.; ///; /// \param[in] value The finite half-precision number to round; /// \param[in] guardBit The most significant discarded bit; /// \param[in] stickyBit Logical OR of all but the most significant discarded bits; ///; /// \return The nearest-rounded half-precision value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx:322,Log,Logical,322,core/base/v7/inc/ROOT/RFloat16.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx,1,['Log'],['Logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// \brief Set training and test set vectors of dataset described by `dsi`.; /// \param[in] dsi DataSetInfo for data set to be split; /// \param[in] foldNumber Ordinal of fold to prepare; /// \param[in] tt The set used to prepare fold. If equal to `Types::kTraining`; /// splitting will be based off the original train set. If instead; /// equal to `Types::kTesting` the test set will be used.; /// The original training/test set is the set as defined by; /// `DataLoader::PrepareTrainingAndTestSet`.; ///; /// Sets the training and test set vectors of the DataSet described by `dsi` as; /// defined by the split. If `tt` is eqal to `Types::kTraining` the split will; /// be based off of the original training set.; ///; /// Note: Requires `MakeKFoldDataSet` to have been called first.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:110,test,test,110,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,4,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// \f$ \chi^{2} \f$ test for comparing weighted and unweighted histograms.; ///; /// Compares the histograms' adjusted (normalized) residuals.; /// Function: Returns p-value. Other return values are specified by the 3rd parameter; ///; /// \param[in] h2 the second histogram; /// \param[in] option; /// - ""UU"" = experiment experiment comparison (unweighted-unweighted); /// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that; /// the first histogram should be unweighted; /// - ""WW"" = MC MC comparison (weighted-weighted); /// - ""NORM"" = to be used when one or both of the histograms is scaled; /// but the histogram originally was unweighted; /// - by default underflows and overflows are not included:; /// * ""OF"" = overflows included; /// * ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overv",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:103,test,test,103,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// \param index Index of the result stored in HypoTestInverterResult; /// \param type Type of the test (see below); /// \param nbins Number of bins; /// - type =0 null and alt; /// - type = 1 only null (S+B); /// - type = 2 only alt (B)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:181,test,test,181,roofit/roostats/src/HypoTestInverterPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// a master or submaster log; /// display without meaningful labels for now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:108,log,log,108,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// activates the logger writer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:100,log,logger,100,tmva/tmva/src/MsgLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx,1,['log'],['logger']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// add additional toy-MC experiments to the current results; /// use the data test statistics of the added object if none is already present; /// (otherwise, ignore the new one)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:161,test,test,161,roofit/roostats/src/HybridResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// add signal test event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:97,test,test,97,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// add signal testing event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:97,test,testing,97,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// add tree of *className* events for tt (Training;Testing..) type as input ..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx:134,Test,Testing,134,tmva/tmva/src/DataInputHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataInputHandler.cxx,1,['Test'],['Testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// after the critical \f$ \alpha \f$ values (at which the corresponding nodes would; /// be pruned away) had been established in the ""InitMetaData"" we need now:; /// automatic pruning:; ///; /// find the value of \f$ \alpha \f$ for which the test sample gives minimal error,; /// on the tree with all nodes pruned that have \f$ \alpha_{critical} < \alpha \f$,; /// fixed parameter pruning; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:325,test,test,325,tmva/tmva/src/CostComplexityPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// apply the principal component analysis; /// TODO: implementation of inverse transformation; /// Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:182,Log,Log,182,tmva/tmva/src/VariablePCATransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// based on stress5(); /// Test of Postscript.; /// Make a complex picture. Verify number of lines on ps file; /// Testing automatically the graphics package is a complex problem.; /// The best way we have found is to generate a Postscript image; /// of a complex canvas containing many objects.; /// The number of lines in the ps file is compared with a reference run.; /// A few lines (up to 2 or 3) of difference may be expected because; /// Postscript works with floats. The date and time of the run are also; /// different.; /// You can also inspect visually the ps file with a ps viewer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:110,Test,Test,110,test/stressIOPlugins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx,2,['Test'],"['Test', 'Testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// calc average response for all test paths - TODO: see comment under CalcAverageResponse(); /// note that 0 offset is used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:116,test,test,116,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample; ///; /// - bias = average deviation; /// - dev = average absolute deviation; /// - rms = rms of deviation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:169,test,test,169,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// close logging file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:92,log,logging,92,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// constructor used for Testing + Application of the MVA,; /// only (no training), using given WeightFiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:107,Test,Testing,107,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['Test'],['Testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// create the test/trainings tree with all the variables, the weights, the; /// classes, the targets, the spectators, the MVA outputs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:97,test,test,97,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:482,Test,TestRate,482,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,2,['Test'],"['Test', 'TestRate']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// delete the results stored for this particular Method instance.; /// (here apparently called resultsName instead of MethodTitle; /// Tree type (Training, testing etc..); /// Analysis Type (Classification, Multiclass, Regression etc..)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:239,test,testing,239,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// direct output, eg, when starting ROOT session -> no use of Logger here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:145,Log,Logger,145,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['Log'],['Logger']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// draw the log of the profiled likelihood function in 1D with the interval or; /// as a 2D plot with the contours.; /// Higher dimensional intervals cannot be drawn. One needs to call; /// SetPlotParameters to project interval in 1 or 2dim; ///; /// ### Options for drawing 1D intervals; ///; /// For 1D problem the log of the profiled likelihood function is drawn by default in a RooPlot as a; /// RooCurve; /// The plotting range (default is the full parameter range) and the precision of the RooCurve; /// can be specified by using SetRange(x1,x2) and SetPrecision(eps).; /// SetNPoints(npoints) can also be used (default is npoints=100); /// Optionally the function can be drawn as a TF1 (option=""tf1"") obtained by sampling the given npoints; /// in the given range; ///; /// ### Options for drawing 2D intervals; ///; /// For 2D case, a contour and optionally the profiled likelihood function is drawn by sampling npoints in; /// the given range. A 2d histogram of nbinsX=nbinsY = sqrt(npoints) is used for sampling the profiled likelihood.; /// The contour can be obtained by using Minuit or by the sampled histogram,; /// If using Minuit, the number of points specifies the number of contour points. If using an histogram the number of; /// points is approximately the total number of bins of the histogram.; /// Possible options:; /// - minuit/nominuit: use minuit for computing the contour; /// - hist/nohist : sample in an histogram the profiled likelihood; ///; /// Note that one can have both a drawing of the sampled likelihood and of the contour using minuit.; /// The default options is ""minuit nohist""; /// The sampled histogram is drawn first by default using the option ""colz"" and then 8 probability contours at; /// these CL are drawn: { 0.1,0.3,0.5,0.683,0.95,0.9973,0.9999366575,0.9999994267} re-drawing the histogram with the; /// option ""cont3""; ///; /// The drawn object (RooPlot or sampled hi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:95,log,log,95,roofit/roostats/src/LikelihoodIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// get the background test statistic distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:105,test,test,105,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// get the signal and background test statistic distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:116,test,test,116,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// getLoss; /// Calculates loss for testing dataset. The loss function can be specified when; /// booking the method, otherwise defaults to hinge loss. Currently not used however; /// is accesible if required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:119,test,testing,119,tmva/tmva/src/MethodSVM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// identity transformation to write to XML; ///Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx:130,Log,Log,130,tmva/tmva/src/VariableIdentityTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableIdentityTransform.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// internal function to evaluate test statistics; /// can do depending on type:; /// - type = 0 standard evaluation,; /// - type = 1 find only unconditional NLL minimum,; /// - type = 2 conditional MLL",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:116,test,test,116,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// ln(k)<1 would correspond to sigma < 0 in the parameterization; /// resulting by transforming a normal random variable in its; /// standard parameterization to a lognormal random variable; /// => treat ln(k) as -ln(k) for k<1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLognormal.cxx:247,log,lognormal,247,roofit/roofit/src/RooLognormal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLognormal.cxx,1,['log'],['lognormal']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != source2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,log,logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 < source2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,log,logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 <= source2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,log,logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 > source2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,log,logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 >= source2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,log,logical,86,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,3,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// make test gradient vector for all tau; /// same algorithm as MakeGradientVector()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:91,test,test,91,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// nothing to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:97,test,test,97,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:440,test,test,440,tmva/tmva/src/MethodTMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx,2,['test'],"['test', 'testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,test,test,111,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees; /// -> same cuts for signal and background",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,test,test,111,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// prepare the training and test trees; /// kept for backward compatibility",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:111,test,test,111,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// process civetweb log message, can be used to detect critical errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx:103,log,log,103,net/http/src/TCivetweb.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// prune a node temporarily (without actually deleting its descendants; /// which allows testing the pruned tree quality for many different; /// pruning stages without ""touching"" the tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:172,test,testing,172,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['test'],['testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// randomize the parameters a bit; /// useful to test and debug fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:132,test,test,132,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// ret fit method (chisquare or log-likelihood)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:115,log,log-likelihood,115,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,2,['log'],['log-likelihood']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return Sum(log(i) i=0,n; /// used by log likelihood fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:97,log,log,97,math/minuit/src/TFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return number of background test events in dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:114,test,test,114,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return number of signal test events in dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:110,test,test,110,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return the event weight - depending on whether the flag; /// *IgnoreNegWeightsInTraining* is or not. If it is set AND it is; /// used for training, then negative event weights are set to zero !; /// NOTE! For events used in Testing, the ORIGINAL possibly negative; /// event weight is used no matter what",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:310,Test,Testing,310,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,1,['Test'],['Testing']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return the maximum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined, otherwise Log Fatal and ; /// return 9999",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:215,Log,Log,215,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return the minimum of variable ivar from the training sample; /// that pass/end up in this node, if traininfo defined, otherwise Log Fatal; /// and return -9999",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:215,Log,Log,215,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree; /// a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; /// any node, hence this tree quality testing will stop there, hence test; /// the pruned tree (while the full tree is still in place for normal/later use)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:254,test,testing,254,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['test'],"['test', 'testing']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// return the test statistic which is or will be used by the class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:97,test,test,97,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// returns -logL(poi, conditional MLE of nuisance params); /// subtract off the global MLE or not depending on the option; /// It is the numerator or the denominator of the ratio (depending on the pdf); ///; /// L.M. : not sure why this method is needed now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:95,log,logL,95,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,1,['log'],['logL']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// returns the likelihood estimator for signal; /// fill a new Likelihood branch into the testTree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:173,test,testTree,173,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['test'],['testTree']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// returns the step size between the numbers of a ""discrete LogInterval""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:143,Log,LogInterval,143,tmva/tmva/src/LogInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx,1,['Log'],['LogInterval']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// set observed value to the expected one; /// works for Gaussian, Poisson or LogNormal; /// assumes mean parameter value is the argument not constant and not depending on observables; /// (if more than two arguments are not constant will use first one but print a warning !); /// need to iterate on the components of the Poisson to get n and nu (nu can be a RooAbsReal); /// (code from G. Petrucciani and extended by L.M.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:161,Log,LogNormal,161,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['Log'],['LogNormal']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// set the test params",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:94,test,test,94,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// set the test statistic to use",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:94,test,test,94,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// set the value of the test statistics on data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:107,test,test,107,roofit/roostats/src/HybridResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// several possibilities:; /// no prior nuisance given and no nuisance parameters: ok; /// no prior nuisance given but nuisance parameters: error; /// prior nuisance given for some nuisance parameters:; /// - nuisance parameters are constant, so they don't float in test statistic; /// - nuisance parameters are floating, so they do float in test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:349,test,test,349,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// specify the Test Statistic and create a ToyMC test statistic sampler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:98,Test,Test,98,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; ///; /// option string: ""n_training_cycles:n_hidden_layers""; ///; /// default is: n_training_cycles = 5000, n_layers = 4; ///; /// * note that the number of hidden layers in the NN is:; /// n_hidden_layers = n_layers - 2; ///; /// * since there is one input and one output layer. The number of; /// nodes (neurons) is predefined to be:; ///; /// n_nodes[i] = nvars + 1 - i (where i=1..n_layers); ///; /// with nvars being the number of variables used in the NN.; ///; /// Hence, the default case is:; ///; /// n_neurons(layer 1 (input)) : nvars; /// n_neurons(layer 2 (hidden)): nvars-1; /// n_neurons(layer 3 (hidden)): nvars-1; /// n_neurons(layer 4 (out)) : 2; ///; /// This artificial neural network usually needs a relatively large; /// number of cycles to converge (8000 and more). Overtraining can; /// be efficiently tested by comparing the signal and background; /// output of the NN for the events that were used for training and; /// an independent data sample (with equal properties). If the separation; /// performance is significantly better for the training sample, the; /// NN interprets statistical effects, and is hence overtrained. In; /// this case, the number of cycles should be reduced, or the size; /// of the training sample increased.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:933,test,tested,933,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['test'],['tested']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// start logging of all SQL statements in specified file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:92,log,logging,92,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['log'],['logging']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowserLite.cxx:86,test,test,86,gui/gui/src/TRootBrowserLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowserLite.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test equality",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFaceSet.cxx:86,test,test,86,graf3d/gl/src/TGLFaceSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFaceSet.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:86,test,test,86,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test event if it descends the tree at this node to the right",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:86,test,test,86,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside the elliptical tube",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoEltu.cxx:86,test,test,86,geom/geom/src/TGeoEltu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoEltu.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside the half-space",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoHalfSpace.cxx:86,test,test,86,geom/geom/src/TGeoHalfSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoHalfSpace.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this cone",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCone.cxx:86,test,test,86,geom/geom/src/TGeoCone.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCone.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoXtru.cxx:86,test,test,86,geom/geom/src/TGeoXtru.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoXtru.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this shape; /// check Z range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTrd1.cxx:86,test,test,86,geom/geom/src/TGeoTrd1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTrd1.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this shape; /// check total z range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPcon.cxx:86,test,test,86,geom/geom/src/TGeoPcon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPcon.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this sphere",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCone.cxx:86,test,test,86,geom/geom/src/TGeoCone.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCone.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this sphere; /// check Rmin<=R<=Rmax",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx:86,test,test,86,geom/geom/src/TGeoSphere.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this sphere; /// test Z range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPara.cxx:86,test,test,86,geom/geom/src/TGeoPara.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPara.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this tube",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoHype.cxx:86,test,test,86,geom/geom/src/TGeoHype.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoHype.cxx,2,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if point is inside this tube segment; /// first check if point is inside the tube",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTube.cxx:86,test,test,86,geom/geom/src/TGeoTube.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTube.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test if the data points are in the given volume",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:86,test,test,86,tmva/tmva/src/BinarySearchTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test multiclass classification",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:86,test,test,86,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// test of TChain::Merge; /// The 10 small Tree files generated in stress10 are again merged; /// into one single file.; /// Should be the same as the file generated in stress8, except; /// that events will be in a different order.; /// But global analysis histograms should be identical (checked by stress14)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,test,test,86,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// the full logger prefix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:95,log,logger,95,tmva/tmva/src/MsgLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx,1,['log'],['logger']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// this is a dummy training: the preparation work to do is the construction; /// of the binary tree as a pointer chain. It is easier to directly save the; /// trainingTree in the weight file, and to rebuild the binary tree in the; /// test phase from scratch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:318,test,test,318,tmva/tmva/src/MethodPDERS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; /// type : type name: vector<list<classA,allocator>,allocator>; /// testAlloc: if true, we test allocator, if it is not default result is negative; /// result: 0 : not stl container; /// abs(result): code of container 1=vector,2=list,3=deque,4=map; /// 5=multimap,6=set,7=multiset; /// positive val: we have a vector or list with default allocator to any depth; /// like vector<list<vector<int>>>; /// negative val: STL container other than vector or list, or non default allocator; /// For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TClassEdit.cxx:150,test,testAlloc,150,core/foundation/src/TClassEdit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TClassEdit.cxx,4,['test'],"['test', 'testAlloc']"
Testability,"////////////////////////////////////////////////////////////////////////////////; /// width of lines when printing test results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:115,test,test,115,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///""Generic"" function, can be used for X/Y/Z axis.; ///[low edge of first ..... up edge of last]; ///If log is true, at least up edge of last MUST be positive or function fails (1).; ///If log is true and low edge is negative, try to find bin with positive low edge, bin number; ///must be less or equal to last (2). If no such bin, function fails.; ///When looking for a such bin, I'm trying to find value which is 0.01 of; ///MINIMUM bin width (3) (if bins are equidimensional, first's bin width is OK).; ///But even such lookup can fail, so, it's a stupid idea to have negative ranges; ///and logarithmic scale :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:186,log,log,186,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,3,['log'],"['log', 'logarithmic']"
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Font Selection Dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Search Dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Simple Canvas...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test TGSplitFrame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the ASImage palette editor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the HTML Browser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the ROOT control bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the TGPack widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Test,Test,168,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the ROOT help dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:180,test,test,180,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///1. Test if X11 supports shape combine mask.; ///2.a if no - go to 3.; ///2.b If yes - try to read both background image; /// and the mask. If any of operations failed - go to 3.; /// If both succeeded - return true.; ///3. Try to read image without transparency (mask not needed anymore).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:88,Test,Test,88,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Compute the cumulative function at fNpx points between fXmin and fXmax.; /// Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:198,log,log,198,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(w,x,y,z) = 100 (y-w^2)^2 + (w-1)^2 + 90 (z-y^2)^2; /// + (1-y)^2 + 10.1 [(x-1)^2 + (z-1)^2]; /// + 19.8 (x-1)(z-1); ///; /// start point: F(-3,-1,-3,-1) = 19192; /// minimum : F(1,1,1,1) = 0.; ///; /// This is a fourth-degree polynomial which is reasonably well-behaved near the minimum,; /// but in order to get there one must cross a rather flat, four-dimensional ""plateau""; /// which often causes minimization algorithm to get ""stuck"" far from the minimum. As; /// such it is a particularly good test of convergence criteria and simulates quite well a; /// feature of many physical problems in many variables where no good starting; /// approximation is known .; /// [Reference: Unpublished. See IBM Technical Report No. 320-2949.]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:592,test,test,592,test/stressFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(x,y) = 100 (y-x^2)^2 + (1-x)^2; ///; /// start point: F(-1.2,1.0) = 24.20; /// minimum : F(1.0,1.0) = 0.; ///; /// This narrow, parabolic valley is probably the best known of all test cases. The floor; /// of the valley follows approximately the parabola y = x^2+1/200 .; /// There is a region where the covariance matrix is not positive-definite and even a path; /// where it is singular . Stepping methods tend to perform at least as well as gradient; /// method for this function .; /// [Reference: Comput. J. 3,175 (1960).]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:272,test,test,272,test/stressFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Log info to the monitoring server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:91,Log,Log,91,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Log likelihood function with Gaussian approximation; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx:91,Log,Log,91,tmva/tmva/src/LDA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LDA.cxx,1,['Log'],['Log']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Note: This file assumes a certain structure on the input file. The structure; /// is as follows:; ///; /// - dataset (TDirectory); /// - ... some variables, plots ...; /// - Method_XXX (TDirectory); /// + XXX (TDirectory); /// * ... some plots ...; /// * MVA_Method_XXX_Test_#classname#; /// * MVA_Method_XXX_Train_#classname#; /// * ... some plots ...; /// - Method_YYY (TDirectory); /// + YYY (TDirectory); /// * ... some plots ...; /// * MVA_Method_YYY_Test_#classname#; /// * MVA_Method_YYY_Train_#classname#; /// * ... some plots ...; /// - TestTree (TTree); /// + ... data...; /// - TrainTree (TTree); /// + ... data...; ///; /// Keeping this in mind makes the main loop in getRocCurves easier to follow :); ///; ////////////////////////////////////////////////////////////////////////////////; /// Private class that simplify drawing plots combining information from; /// several methods.; ///; /// Each wrapper will manage a canvas and a legend and provide convenience; /// functions to add data to these. It also provides a save function for; /// saving an image representation to disk.; ///; /// Feel free to extend this class as you see fit. It is intended as a; /// convenience when showing multiclass roccurves, not a fully general tool.; ///; /// Usage:; /// auto p = new EfficiencyPlotWrapper(name, title, dataset, i):; /// for (TGraph * g : listOfGraphs) {; /// p->AddGraph(g);; /// p->AddLegendEntry(methodName);; /// }; /// p->save();; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/efficienciesMulticlass.cxx:637,Test,TestTree,637,tmva/tmvagui/src/efficienciesMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/efficienciesMulticlass.cxx,1,['Test'],['TestTree']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Particle definition normal constructor. If the particle is set to be; /// stable, the decay width parameter does have no meaning and can be set to; /// any value. The parameters granularity, LowerCutOff and HighCutOff are; /// used for the construction of the mean free path look up tables. The; /// granularity will be the number of logwise energy points for which the; /// mean free path will be calculated.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TAttParticle.cxx:425,log,logwise,425,montecarlo/eg/src/TAttParticle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TAttParticle.cxx,2,['log'],['logwise']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Test kdTree for memory leaks; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:91,Test,Test,91,math/mathcore/test/kDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Test of building time of kdTree; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:91,Test,Test,91,math/mathcore/test/kDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Draw text in NDC. This operation is especially; ///dangerous if in locked state -; ///ftgl will assert on zero texture size; ///(which is result of bad GL context).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:181,assert,assert,181,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,2,['assert'],['assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Draw text. This operation is especially; ///dangerous if in locked state -; ///ftgl will assert on zero texture size; ///(which is result of bad GL context).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:174,assert,assert,174,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,2,['assert'],['assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Find bin ranges for X and Y axes,; ///axes ranges for X, Y and Z.; ///Function returns false, if logarithmic scale for; ///some axis was requested, but we cannot; ///find correct range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLSurfacePainter.cxx:182,log,logarithmic,182,graf3d/gl/src/TGLSurfacePainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLSurfacePainter.cxx,4,['log'],['logarithmic']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:167,log,logo,167,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///If log changed, sections must be reset,; ///set fModified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:88,log,log,88,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,3,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Init gl-pad painter:; ///1. 2D painter does not use depth test, should not modify; /// depth-buffer content (except initial cleanup).; ///2. Disable cull face.; ///3. Disable lighting.; ///4. Set viewport (to the whole canvas area).; ///5. Set camera.; ///6. Unlock painter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:143,test,test,143,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Not a bad idea to assert on gVirtualX != nullptr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:103,assert,assert,103,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['assert'],['assert']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Open stress.root, read all objects, save 10 times and purge; ///This function tests the generation and reuse of gaps in files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:163,test,tests,163,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['test'],['tests']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///ROOT is ready to run, may pop down the logo if stay up time expires.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:124,log,logo,124,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Returns false if milliSec milliseconds have passed since logo; ///was popped up, true otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:142,log,logo,142,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['log'],['logo']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///Save the logs to a file; ///Only the name of the file is taken, no expansion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:94,log,logs,94,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['logs']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///This is not really a test, it's a function that illustrates the internal; ///behaviour of the kd-tree.; ///; ///Print out the internal kd-tree data-members, like fCrossNode, for; ///better understading",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:106,test,test,106,math/mathcore/test/kDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///[static utility function]/////////////////////////////; ///; /// true if ""fileName""; /// 1. is an absolute path (""/tmp/a""); /// 2. is a relative path (""../whatever"", ""./test""); /// 3. starts with user name (""~/mail""); /// 4. starts with an environment variable (""$ROOTSYS/bin""); ///; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:254,test,test,254,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////////////////////////////; ///assert on IsBatch() == false?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:85,assert,assert,85,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['assert'],['assert']
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:154,TEST,TEST,154,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,4,"['TEST', 'test']","['TEST', 'test']"
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN CENTRAL INTERVAL - POISSON PRODUCT MODEL; //; // Test the validity of the central interval computed by the BayesianCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the BayesianCalculator. As such, this test can only; // confirm if the BayesianCalculator has the same behaviour across different; // computing platforms or RooStats revisions. A uniform prior PDF is used for the; // parameter of interest (""sig"").; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:146,Test,Test,146,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,3,"['Test', 'test']","['Test', 'test']"
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN SHORTEST INTERVAL - SIMPLE POISSON MODEL; //; // Test the Bayesian shortest interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // The reference interval limits are taken from the paper: ""Why isn't every; // physicist a Bayesian?"" by Robert D. Cousins.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:146,Test,Test,146,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['Test'],['Test']
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:166,Test,Test,166,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,4,"['Test', 'test']","['Test', 'test', 'testStatType']"
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:99,TEST,TEST,99,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,6,"['TEST', 'test']","['TEST', 'test', 'testStatType']"
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - POISSON DISTRIBUTION; //; // Test the 68% likelihood interval computed by the profile likelihood calculator; // on a Poisson distribution, from only one observed value. Reference values are; // computed via analytic methods: solve equation 2*[ln(LL(xMax)) - ln(LL(x))] = 1.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; //; // 03/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:171,Test,Test,171,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['Test'],['Test']
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - POISSON PRODUCT MODEL; //; // Test the 68% likelihood interval computed by the ProfileLikelihoodCalculator; // on a complex model. Reference values and test values are both computed with; // the ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different computer; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:172,Test,Test,172,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,3,"['Test', 'test']","['Test', 'test']"
Testability,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:129,TEST,TEST,129,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,5,"['TEST', 'test']","['TEST', 'test']"
Testability,"//////////////////////////////////////////////////////////////////////////////; // //; // Interval with non-equi distant bins //; // that are equi-distant in a logarithmic scale) //; // //; // Interval definition, continuous and discrete //; // //; // Note: **bin** counting starts from ZERO unlike in ROOT histograms //; // //; // ---------------- //; // LogInterval(1,10000,5) //; // i=0 --> 1 note: StepSize(ibin=0) = not defined !! //; // i=1 --> 10 StepSize(ibin=1) = 9 //; // i=2 --> 100 StepSize(ibin=2) = 99 //; // i=3 --> 1000 StepSize(ibin=3) = 999 //; // i=4 --> 10000 StepSize(ibin=4) = 9999 //; // //; // LogInterval(1,1000,11) //; // i=0 --> 1 //; // i=1 --> 1.99526 //; // i=2 --> 3.98107 //; // i=3 --> 7.94328 //; // i=4 --> 15.8489 //; // i=5 --> 31.6228 //; // i=6 --> 63.0957 //; // i=7 --> 125.893 //; // i=8 --> 251.189 //; // i=9 --> 501.187 //; // i=10 --> 1000 //; // //; // LogInterval(1,1024,11) //; // i=0 --> 1 //; // i=1 --> 2 //; // i=2 --> 4 //; // i=3 --> 8 //; // i=4 --> 16 //; // i=5 --> 32 //; // i=6 --> 64 //; // i=7 --> 128 //; // i=8 --> 256 //; // i=9 --> 512 //; // i=10 --> 1024 //; // //; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:160,log,logarithmic,160,tmva/tmva/inc/TMVA/LogInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h,4,"['Log', 'log']","['LogInterval', 'logarithmic']"
Testability,"/////////////////////////////////////////////////////////////////////////////; /// AutoSave tree header every fAutoSave bytes.; ///; /// When large Trees are produced, it is safe to activate the AutoSave; /// procedure. Some branches may have buffers holding many entries.; /// If fAutoSave is negative, AutoSave is automatically called by; /// TTree::Fill when the number of bytes generated since the previous; /// AutoSave is greater than -fAutoSave bytes.; /// If fAutoSave is positive, AutoSave is automatically called by; /// TTree::Fill every N entries.; /// This function may also be invoked by the user.; /// Each AutoSave generates a new key on the file.; /// Once the key with the tree header has been written, the previous cycle; /// (if any) is deleted.; ///; /// Note that calling TTree::AutoSave too frequently (or similarly calling; /// TTree::SetAutoSave with a small value) is an expensive operation.; /// You should make tests for your own application to find a compromise; /// between speed and the quantity of information you may loose in case of; /// a job crash.; ///; /// In case your program crashes before closing the file holding this tree,; /// the file will be automatically recovered when you will connect the file; /// in UPDATE mode.; /// The Tree will be recovered at the status corresponding to the last AutoSave.; ///; /// if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; /// This allows another process to analyze the Tree while the Tree is being filled.; ///; /// if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; /// the current basket are closed-out and written to disk individually.; ///; /// By default the previous header is deleted after having written the new header.; /// if option contains ""Overwrite"", the previous Tree header is deleted; /// before written the new header. This option is slightly faster, but; /// the default option is safer in case of a problem (disk quota exceeded); /// when writing the new he",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:942,test,tests,942,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['test'],['tests']
Testability,"/////////////////////////////////////////////////////////////////////////////; /// \brief Given a IO feature string, set the corresponding feature; /// \param [in] value Feature name to test.; ///; /// This allows one to set a feature given a specific string from the; /// TBasket::EIOBits enum.; ///; /// *NOTE* this function is quite slow and users are strongly encouraged to; /// use the type-safe `Set` version instead. This has been added for better; /// CLI interfaces.; ///; /// Returns true only if a new feature was set; otherwise emits an error message; /// and returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx:186,test,test,186,tree/tree/src/TIOFeatures.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx,1,['test'],['test']
Testability,"/////////////////////////////////////////////////////////////////////////////; /// \brief Recursively gather field-level information.; ///; /// \param[in] fieldId The ID of the field from which to start the recursive traversal. Typically this is the ""zero; /// ID"", i.e. the logical parent of all top-level fields.; ///; /// \return The RFieldTreeInspector for the provided field ID.; ///; /// This method is called when the RNTupleInspector is initially created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx:275,log,logical,275,tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////; // //; // TGeoNode - base class for logical nodes. They represent volumes //; // positioned inside a mother volume //; // //; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoNode.h:114,log,logical,114,geom/geom/inc/TGeoNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoNode.h,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////////////////; /// \brief Test to see if a given feature is set; /// \param[in] input_bits The specific feature to test.; ///; /// Returns true if the feature is enables in this object and supported by; /// this version of ROOT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx:89,Test,Test,89,tree/tree/src/TIOFeatures.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx,4,"['Test', 'test']","['Test', 'test']"
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // CrossEntropy //; // //; // Implementation of the CrossEntropy as separation criterion //; // -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) // ; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:182,log,log,182,tmva/tmva/inc/TMVA/CrossEntropy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h,2,['log'],['log']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // Factory //; // //; // This is the main MVA steering class: it creates all MVA methods, //; // and guides them through the training, testing and evaluation //; // phases //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:218,test,testing,218,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['test'],['testing']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TGLBoundingBox //; // //; // Concrete class describing an orientated (free) or axis aligned box //; // of 8 verticies. Supports methods for setting aligned or orientated //; // boxes, find volume, axes, extents, centers, face planes etc. //; // Also tests for overlap testing of planes and other bounding boxes, //; // with fast sphere approximation. //; //////////////////////////////////////////////////////////////////////////; // TODO: Create more compact version + axis aligned version, both with lazy; // sphere testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLBoundingBox.h:336,test,tests,336,graf3d/gl/inc/TGLBoundingBox.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLBoundingBox.h,3,['test'],"['testing', 'tests']"
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TGLCamera //; // //; // Abstract base camera class - concrete classes for orthographic and //; // persepctive cameras derive from it. This class maintains values for //; // the current: //; // i) Viewport //; // ii) Projection, modelview and clip matricies - extracted from GL //; // iii) The 6 frustum planes //; // iv) Expanded frustum interest box //; // //; // It provides methods for various projection, overlap and intersection //; // tests for viewport and world locations, against the true frustum and //; // expanded interest box, and for extracting eye position and direction.//; // //; // It also defines the pure virtual manipulation interface methods the //; // concrete ortho and prespective classes must implement. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h:527,test,tests,527,graf3d/gl/inc/TGLCamera.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h,1,['test'],['tests']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:447,test,tested,447,core/base/inc/TMD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h,1,['test'],['tested']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:389,test,test,389,sql/mysql/inc/TMySQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h,6,['test'],['test']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TObjectSpy, TObjectRefSpy //; // //; // Monitors objects for deletion and reflects the deletion by reverting //; // the internal pointer to zero. When this pointer is zero we know the //; // object has been deleted. This avoids the unsafe TestBit(kNotDeleted) //; // hack. The spied object must have the kMustCleanup bit set otherwise //; // you will get an error. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TObjectSpy.h:325,Test,TestBit,325,core/gui/inc/TObjectSpy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TObjectSpy.h,1,['Test'],['TestBit']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TProofBench //; // //; // Steering class for PROOF benchmarks //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:137,benchmark,benchmarks,137,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TProofBenchRun //; // //; // Abstract base class for PROOF benchmark run. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRun.h:145,benchmark,benchmark,145,proof/proofbench/inc/TProofBenchRun.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRun.h,1,['benchmark'],['benchmark']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TProofBenchRunCPU //; // //; // CPU-intensive PROOF benchmark test generates events and fill 1, 2, //; //or 3-D histograms. No I/O activity is involved. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunCPU.h:138,benchmark,benchmark,138,proof/proofbench/inc/TProofBenchRunCPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunCPU.h,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TProofBenchRunDataRead //; // //; // I/O-intensive PROOF benchmark test reads in event files distributed //; // on the cluster. Number of events processed per second and size of //; // events processed per second are plotted against number of active //; // workers. Performance rate for unit packets and performance rate //; // for query are plotted. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunDataRead.h:143,benchmark,benchmark,143,proof/proofbench/inc/TProofBenchRunDataRead.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunDataRead.h,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TProofDebug //; // //; // Detailed logging / debug scheme. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofDebug.h:121,log,logging,121,proof/proof/inc/TProofDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofDebug.h,1,['log'],['logging']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TSQLServer //; // //; // Abstract base class defining interface to a SQL server. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // <dbms>://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ... //; // Depending on the <dbms> specified an appropriate plugin library //; // will be loaded which will provide the real interface. //; // //; // Related classes are TSQLStatement, TSQLResult and TSQLRow. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h:385,test,test,385,net/net/inc/TSQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h,1,['test'],['test']
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TSelEvent //; // //; // PROOF selector for I/O benchmark test. //; // For I/O benchmark, event files are read in and histograms are filled.//; // For memory clean-up, dedicated files large enough to clean up memory //; // cache on the machine are read in. Or memory clean-up can be //; // accompolished by system call on Linux machine inside SlaveBegin(..) //; // which should be much faster the reading in large files. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h:133,benchmark,benchmark,133,proof/proofbench/inc/TSelEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"//////////////////////////////////////////////////////////////////////////; // //; // TSelHist //; // PROOF selector for CPU-intensive benchmark test. //; // Events are generated and 1-D, 2-D, and/or 3-D histograms are filled. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelHist.h:135,benchmark,benchmark,135,proof/proofbench/inc/TSelHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelHist.h,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"//////////////////////////////////////////////////////////////////////////; /// Assert that presumedLocalReadersCount really matches the local read count.; /// Print an error message if not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TReentrantRWLock.cxx:80,Assert,Assert,80,core/thread/src/TReentrantRWLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TReentrantRWLock.cxx,1,['Assert'],['Assert']
Testability,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:997,log,logically,997,core/base/inc/TVirtualFFT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h,1,['log'],['logically']
Testability,"/////////////////////////////////////////////////////////////////////////; /// Test Reshape:; /// Input Shape: (3, 5); /// Output Shape: (5, 3); /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.h:79,Test,Test,79,tmva/tmva/test/DNN/CNN/TestReshape.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.h,1,['Test'],['Test']
Testability,"////////////////////////////////////////////////////////////////////////; // Integration Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testRTaskArena.cxx:89,Test,Tests,89,core/imt/test/testRTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testRTaskArena.cxx,1,['Test'],['Tests']
Testability,"////////////////////////////////////////////////////////////////////////; /// get value on x-axis of L-curve determined in recent unfolding; ///; /// x=log<sub>10</sub>(GetChi2A())",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:152,log,log,152,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////; /// get value on y-axis of L-curve determined in recent unfolding; ///; /// y=log<sub>10</sub>(GetChi2L())",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:152,log,log,152,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['log'],['log']
Testability,"////////////////////////////////////////////////////////////////////////; /// minimize Stein's unbiased risk estimator ""SURE""; /// using successive calls to DoUnfold at various tau.; /// Optionally, also the L-curve and its curvature are calculated; /// for comparison. See description of GetSURE(); /// See e.g. arXiv:1612.09415 for the definition of SURE; ///; /// \param[in] nPoint : number of points; /// \param[in] tauMin : lower end of scan-range; /// \param[in] tauMax : upper end of scan-range; /// \param[out] logTauSURE : scan result, SURE as a function of log(tau); /// \param[out] df_chi2A : parametric plot of DF against chi2A; /// \param[out] lCurve : parametric plot (lCurve); ///; /// return value: index of the ""best"" point; ///; /// if tauMin is less than zero of if tauMin is not loer than tauMax, then; /// the scan range is determined automatically; /// if tau=nullptr is included in the scan, then the first x-coordinate; // of the result plot logTauSURE is set to -Infinity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:519,log,logTauSURE,519,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,3,['log'],"['log', 'logTauSURE']"
Testability,"////////////////////////////////////////////////////////////////////////; /// scan a function wrt tau and determine the minimum; ///; /// \param[in] nPoint number of points to be scanned; /// \param[in] tauMin smallest tau value to study; /// \param[in] tauMax largest tau value to study; /// \param[out] scanResult the scanned function wrt log(tau); /// \param[in] mode 1st parameter for the scan function; /// \param[in] distribution 2nd parameter for the scan function; /// \param[in] projectionMode 3rd parameter for the scan function; /// \param[out] lCurvePlot for monitoring, shows the L-curve; /// \param[out] logTauXPlot for monitoring, L-curve(X) as a function of log(tau); /// \param[out] logTauYPlot for monitoring, L-curve(Y) as a function of log(tau); ///; /// Return value: the coordinate number on the curve <b>scanResult</b>; /// which corresponds to the minimum; /// <br/>; /// The function is scanned by repeating the following steps <b>nPoint</b>; /// times; /// <ol>; /// <li>Choose a value of tau</li>; /// <li>Perform the unfolding for this choice of tau, DoUnfold(tau)</li>; /// <li>Determinethe scan variable GetScanVariable()</li>; /// </ol>; /// The method GetScanVariable() defines scans of correlation; /// coefficients, where <b>mode</b> is chosen from the enum; /// EScanTauMode. In addition one may set <b>distribution</b>; /// and/or <b>projectionMode</b> to refine the calculation of; /// correlations (e.g. restrict the calcuation to the signal; /// distribution and/or exclude underflow and overflow bins).; /// See the documentation of GetScanVariable() for details.; /// Alternative scan variables may be defined by overriding the; /// GetScanVariable() method.; /// <br>; /// Automatic choice of scan range: if (tauMin,tauMax) do not; /// correspond to a valid tau range (e.g. tauMin=tauMax=0.0) then; /// the tau range is determined automatically. Use with care!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:341,log,log,341,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,5,['log'],"['log', 'logTauXPlot', 'logTauYPlot']"
Testability,"////////////////////////////////////////////////////////////////////////; /// scan the L curve, determine tau and unfold at the final value of; /// tau; ///; /// \param[in] nPoint number of points used for the scan; /// \param[in] tauMin smallest tau value to study; /// \param[in] tauMax largest tau value to study. If tauMin=tauMax=nullptr,; /// a scan interval is determined automatically.; /// \param[out] lCurve if nonzero, a new TGraph is returned,; /// containing the L-curve; /// \param[out] logTauX if nonzero, a new TSpline is returned, to; /// parameterize the L-curve's x-coordinates as a function of log10(tau); /// \param[out] logTauY if nonzero, a new TSpline is returned, to; /// parameterize the L-curve's y-coordinates as a function of log10(tau); /// \param[out] logTauCurvature if nonzero, a new TSpline is returned; /// of the L-curve curvature as a function of log10(tau); ///; /// return value: the coordinate number in the logTauX,logTauY graphs; /// corresponding to the ""final"" choice of tau; ///; /// Recommendation: always check <b>logTauCurvature</b>, it; /// should be a peaked function (similar to a Gaussian), the maximum; /// corresponding to the final choice of tau. Also, check the <b>lCurve</b>; /// it should be approximately L-shaped. If in doubt, adjust tauMin; /// and tauMax until the results are satisfactory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:500,log,logTauX,500,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,6,['log'],"['logTauCurvature', 'logTauX', 'logTauY']"
Testability,"//////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1051,benchmark,benchmark,1051,test/stressHepix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx,1,['benchmark'],['benchmark']
Testability,"/////////////////////////////////////////////////////////////////; // Test custom STL dictionary / calls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Test,Test,70,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,1,['Test'],['Test']
Testability,"/////////////////////////////////////////////////////////////////; // Test function call performance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Test,Test,70,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,1,['Test'],['Test']
Testability,"/////////////////////////////////////////////////////////////////; // Test nested compound statements (if, switch, for,...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Test,Test,70,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,1,['Test'],['Test']
Testability,"/////////////////////////////////////////////////////////////////; // Test reflection query, reflection-based function call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:70,Test,Test,70,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,1,['Test'],['Test']
Testability,"/////////////////////////////////////////////////////////////; // Style test and change",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/inc/mathrender.h:72,test,test,72,graf2d/mathtext/inc/mathrender.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/inc/mathrender.h,1,['test'],['test']
Testability,"//////////////////////////////////////////////////////////; /**; Calculates the boundaries for the frequentist Clopper-Pearson interval. This interval is recommended by the PDG. \param[in] total number of total events; \param[in] passed 0 <= number of passed events <= total; \param[in] level confidence level; \param[in] bUpper true - upper boundary is returned; ;false - lower boundary is returned. Calculation:. The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \geq passed; total) &=& \frac{1 - level}{2}\\; P(x \geq passed; total) &=& 1 - P(x \leq passed - 1; total)\\; &=& 1 - \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed} (1 - t)^{passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed - 1} (1 - t)^{total - passed} dt\\; &=& I_{\varepsilon}(passed,total - passed + 1); \f}; The lower boundary is therefore given by the \f$ \frac{1 - level}{2}\f$ quantile; of the beta distribution. The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; of the test:; \f{eqnarray*}{; P(x \leq passed; total) &=& \frac{1 - level}{2}\\; P(x \leq passed; total) &=& \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed - 1} (1 - t)^{passed} dt\\; &=& \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed} (1 - t)^{total - passed - 1} dt\\; &=& 1 - \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed - 1} dt\\; \Rightarrow 1 - \frac{1 - level}{2} &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed -1} dt\\; \frac{1 + level}{2} &=& I_{\varepsilon}(passed + 1,total - passed); \f}; The upper boundary is therefore given by the \f$\frac{1 + level}{2}\f$ quantile; of the beta distribution. Note: The connection between the binomial distribution and the regularized; incomplete beta function \f$ I_{\varepsilon}(\alpha,\beta)\f$ has been used.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:1185,test,test,1185,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['test'],['test']
Testability,"//////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //****************************************************************************; //* ROOTMARKS = 810.9 * Root5.09/01 20051216/1229; //****************************************************************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:1317,test,tests,1317,test/stressSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx,1,['test'],['tests']
Testability,"////////////////////////; //Loading Test Data //; ////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx:36,Test,Test,36,tmva/rmva/src/RMethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/RMethodBase.cxx,1,['Test'],['Test']
Testability,///////////; /// Analyze a sub-expression in one formula.; ///; /// Expressions in one formula are recursively analyzed.; /// Result of analysis is stored in the object tables.; ///; /// ### Table of function codes and errors; ///; /// ~~~ {.cpp}; /// * functions :; ///; /// + 1 pow 20; /// - 2 sq 21; /// * 3 sqrt 22; /// / 4 strstr 23; /// % 5 min 24; /// max 25; /// log 30; /// cos 10 exp 31; /// sin 11 log10 32; /// tan 12; /// acos 13 abs 41; /// asin 14 sign 42; /// atan 15 int 43; /// atan2 16; /// fmod 17 rndm 50; ///; /// cosh 70 acosh 73; /// sinh 71 asinh 74; /// tanh 72 atanh 75; ///; /// expo 100 gaus 110 gausn (see note below); /// expo(0) 100 0 gaus(0) 110 0 gausn(0); /// expo(1) 100 1 gaus(1) 110 1 gausn(1); /// xexpo 100 x xgaus 110 x xgausn; /// yexpo 101 x ygaus 111 x ygausn; /// zexpo 102 x zgaus 112 x zgausn; /// xyexpo 105 x xygaus 115 x xygausn; /// yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); /// xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2); ///; /// landau 120 x landaun (see note below); /// landau(0) 120 0 landaun(0); /// landau(1) 120 1 landaun(1); /// xlandau 120 x xlandaun; /// ylandau 121 x ylandaun; /// zlandau 122 x zlandaun; /// xylandau 125 x xylandaun; /// ylandau(5) 121 5 ylandaun(5); /// xylandau(2) 125 2 xylandaun(2); ///; /// pol0 130 x pol1 130 1xx; /// pol0(0) 130 0 pol1(0) 130 100; /// pol0(1) 130 1 pol1(1) 130 101; /// xpol0 130 x xpol1 130 101; /// ypol0 131 x ypol1 131 101; /// zpol0 132 x zpol1 132 1xx; /// ypol0(5) 131 5 ypol1(5) 131 105; ///; /// pi 40; ///; /// && 60 < 64; /// || 61 > 65; /// == 62 <= 66; /// != 63 => 67; /// ! 68; /// ==(string) 76 & 78; /// !=(string) 77 | 79; /// <<(shift) 80 >>(shift) 81; /// ? : 82; ///; /// * constants (kConstants) :; ///; /// c0 141 1 c1 141 2 etc..; ///; /// * strings (kStringConst):; ///; /// sX 143 x; ///; /// * variables (kFormulaVar) :; ///; /// x 144 0 y 144 1 z 144 2 t 144 3; ///; /// * parameters :; ///; /// [1] 140 1; /// [2] 140 2; /// etc.; /// ~~~; ///; /// ### Special case,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:440,log,log,440,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['log'],['log']
Testability,"///; /// Design of OpenMP reductions on the GPU; ///; /// Consider a typical OpenMP program with one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:748,log,logically,748,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['log'],['logically']
Testability,"///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// sufficient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4972,Log,Logical,4972,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['Log'],['Logical']
Testability,"///; /// This method determines whether the two coalescing candidates can be merged.; /// In order to be merged, all instructions must be able to; /// 1. Move to the beginning of the SourceRegion.BranchTargetBlock;; /// 2. Move to the end of the TargetRegion.BranchBlock.; /// Merging involves moving the instructions in the; /// TargetRegion.BranchTargetBlock (also SourceRegion.BranchBlock).; ///; /// This function first try to move instructions from the; /// TargetRegion.BranchTargetBlock down, to the beginning of the; /// SourceRegion.BranchTargetBlock. This is not possible if any register defined; /// in TargetRegion.BranchTargetBlock is used in a PHI node in the; /// SourceRegion.BranchTargetBlock. In this case, check whether the statement; /// can be moved up, to the end of the TargetRegion.BranchBlock (immediately; /// before the branch statement). If it cannot move, then these blocks cannot; /// be merged.; ///; /// Note that there is no analysis for moving instructions past the fall-through; /// blocks because they are confirmed to be empty. An assert is thrown if they; /// are not.; ///; /// \param[in] SourceRegion The candidate to move statements from; /// \param[in] TargetRegion The candidate to move statements to; /// \return true if all instructions in SourceRegion.BranchBlock can be merged; /// into a block in TargetRegion, false otherwise.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp:1068,assert,assert,1068,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,1,['assert'],['assert']
Testability,"///; /// shift-expression: [C99 6.5.7]; /// additive-expression; /// shift-expression '<<' additive-expression; /// shift-expression '>>' additive-expression; ///; /// compare-expression: [C++20 expr.spaceship]; /// shift-expression; /// compare-expression '<=>' shift-expression; ///; /// relational-expression: [C99 6.5.8]; /// compare-expression; /// relational-expression '<' compare-expression; /// relational-expression '>' compare-expression; /// relational-expression '<=' compare-expression; /// relational-expression '>=' compare-expression; ///; /// equality-expression: [C99 6.5.9]; /// relational-expression; /// equality-expression '==' relational-expression; /// equality-expression '!=' relational-expression; ///; /// AND-expression: [C99 6.5.10]; /// equality-expression; /// AND-expression '&' equality-expression; ///; /// exclusive-OR-expression: [C99 6.5.11]; /// AND-expression; /// exclusive-OR-expression '^' AND-expression; ///; /// inclusive-OR-expression: [C99 6.5.12]; /// exclusive-OR-expression; /// inclusive-OR-expression '|' exclusive-OR-expression; ///; /// logical-AND-expression: [C99 6.5.13]; /// inclusive-OR-expression; /// logical-AND-expression '&&' inclusive-OR-expression; ///; /// logical-OR-expression: [C99 6.5.14]; /// logical-AND-expression; /// logical-OR-expression '||' logical-AND-expression; ///; /// conditional-expression: [C99 6.5.15]; /// logical-OR-expression; /// logical-OR-expression '?' expression ':' conditional-expression; /// [GNU] logical-OR-expression '?' ':' conditional-expression; /// [C++] the third operand is an assignment-expression; ///; /// assignment-expression: [C99 6.5.16]; /// conditional-expression; /// unary-expression assignment-operator assignment-expression; /// [C++] throw-expression [C++ 15]; ///; /// assignment-operator: one of; /// = *= /= %= += -= <<= >>= &= ^= |=; ///; /// expression: [C99 6.5.17]; /// assignment-expression ...[opt]; /// expression ',' assignment-expression ...[opt]; /// \endverbatim",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:2382,log,logical-AND-expression,2382,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,9,['log'],"['logical-AND-expression', 'logical-OR-expression']"
Testability,"///< (=0 if X linear scale, =1 if log scale)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:34,log,log,34,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///< (=0 if Y linear scale, =1 if log scale)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:34,log,log,34,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///< (=0 if Z linear scale, =1 if log scale)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:34,log,log,34,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///< A log table... just to speed up calculation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimit.h:7,log,log,7,hist/hist/inc/TLimit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TLimit.h,1,['log'],['log']
Testability,"///< A loop of single arithmetic shift right instructions.; /// AVR conditional branches. Operand 0 is the chain operand, operand 1; /// is the block to branch if condition is true, operand 2 is the; /// condition code, and operand 3 is the flag operand produced by a CMP; /// or TEST instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:280,TEST,TEST,280,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['TEST'],['TEST']
Testability,///< A loop of single logical shift left instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:22,log,logical,22,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< A loop of single logical shift right instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:22,log,logical,22,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,"///< BACKWARDS COMPATIBILITY: split cells according to decision tree logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:69,log,logic,69,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['log'],['logic']
Testability,///< Bitwise or logical AND of integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:16,log,logical,16,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['log'],['logical']
Testability,///< Bitwise or logical OR of integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:16,log,logical,16,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['log'],['logical']
Testability,///< Bitwise or logical XOR of integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:16,log,logical,16,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['log'],['logical']
Testability,///< Byte logical shift left N bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< Byte logical shift right N bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< Call to data() in a static assert; ///< message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,assert,assert,32,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['assert'],['assert']
Testability,///< Call to size() in a static assert; ///< message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,assert,assert,32,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['assert'],['assert']
Testability,"///< Current number of training epochs without; ///< considerable decrease in the test error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:82,test,test,82,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,2,['test'],['test']
Testability,///< Don't emit anything (benchmarking mode),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/BackendUtil.h:26,benchmark,benchmarking,26,interpreter/llvm-project/clang/include/clang/CodeGen/BackendUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/BackendUtil.h,1,['benchmark'],['benchmarking']
Testability,"///< Error from test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:16,test,test,16,hist/hist/inc/TMultiDimFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h,1,['test'],['test']
Testability,"///< Every variable in log scale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TParallelCoord.h:23,log,log,23,tree/treeviewer/inc/TParallelCoord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TParallelCoord.h,1,['log'],['log']
Testability,"///< Flag indicating logarithmic scaling of x values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooSpline.h:21,log,logarithmic,21,roofit/roofit/inc/RooSpline.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooSpline.h,1,['log'],['logarithmic']
Testability,"///< Flag indicating logarithmic scaling of y values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooSpline.h:21,log,logarithmic,21,roofit/roofit/inc/RooSpline.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooSpline.h,1,['log'],['logarithmic']
Testability,///< Higher 8-bit of word logical shift left.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:26,log,logical,26,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,"///< Holds the most recently computed test loss.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:38,test,test,38,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,2,['test'],['test']
Testability,"///< Input -log(L) function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/RooBarlowBeestonLL.h:12,log,log,12,roofit/histfactory/inc/RooStats/HistFactory/RooBarlowBeestonLL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/RooBarlowBeestonLL.h,2,['log'],['log']
Testability,"///< Interval for the computation of the test error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:41,test,test,41,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,2,['test'],['test']
Testability,"///< Is test statistic sealed -- i.e. no access to data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h:8,test,test,8,roofit/roofitcore/src/RooAbsOptTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h,1,['test'],['test']
Testability,"///< Last entry number that was read; /// For chains, the logical entry and the physical entry in any particular file can be different.; /// The entry offset stores the logical entry number (sum of all previous physical entries) when a file of the corresponding; /// data source was opened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx:58,log,logical,58,tree/dataframe/src/RNTupleDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx,2,['log'],['logical']
Testability,"///< List of transformations to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:32,test,test,32,tmva/tmva/inc/TMVA/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h,1,['test'],['test']
Testability,///< Log 2 of alignment when arg is passed in memory; ///< (including byval/byref). The max alignment is; ///< verified in IR verification.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:5,Log,Log,5,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,1,['Log'],['Log']
Testability,///< Log 2 of original alignment,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:5,Log,Log,5,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,1,['Log'],['Log']
Testability,///< Logical and.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Log,Logical,5,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,1,['Log'],['Logical']
Testability,///< Logical negation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Log,Logical,5,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,1,['Log'],['Logical']
Testability,///< Logical or.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Log,Logical,5,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,1,['Log'],['Logical']
Testability,///< Logical shift left.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:5,Log,Logical,5,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['Log'],['Logical']
Testability,///< Logical shift right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:5,Log,Logical,5,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,2,['Log'],['Logical']
Testability,///< Lower 8-bit of word logical shift right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:25,log,logical,25,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< Mach-O Shared lib stub,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Magic.h:23,stub,stub,23,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Magic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Magic.h,1,['stub'],['stub']
Testability,"///< Name of range in which to calculate test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:41,test,test,41,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"///< Number of training epochs without considerable; ///< decrease in the test error for convergence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:74,test,test,74,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,2,['test'],['test']
Testability,"///< Operation mode of test statistic instance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:23,test,test,23,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"///< Parameters of the test statistic (=parameters of the input function); // Original arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:23,test,test,23,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"///< Pointer to CDF used in 1-sample test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:37,test,test,37,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['test'],['test']
Testability,"///< Relative precision of test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:27,test,test,27,hist/hist/inc/TMultiDimFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h,1,['test'],['test']
Testability,"///< RooArgSet specifying alternate parameters for hypothesis test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:62,test,test,62,roofit/roostats/inc/RooStats/CombinedCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h,1,['test'],['test']
Testability,"///< RooArgSet specifying null parameters for hypothesis test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:57,test,test,57,roofit/roostats/inc/RooStats/CombinedCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h,1,['test'],['test']
Testability,"///< Size of test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:13,test,test,13,hist/hist/inc/TMultiDimFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h,1,['test'],['test']
Testability,///< Test a byte array (first example),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:5,Test,Test,5,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['Test'],['Test']
Testability,"///< Test sample, Error in quantity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Test,Test,5,hist/hist/inc/TMultiDimFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h,1,['Test'],['Test']
Testability,"///< Test sample, dependent quantity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Test,Test,5,hist/hist/inc/TMultiDimFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h,1,['Test'],['Test']
Testability,"///< Test sample, independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h:5,Test,Test,5,hist/hist/inc/TMultiDimFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TMultiDimFit.h,1,['Test'],['Test']
Testability,///< Text-based Dynamic Library Stub file,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Magic.h:32,Stub,Stub,32,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Magic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Magic.h,1,['Stub'],['Stub']
Testability,"///< The depth of the batch used for training/testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:46,test,testing,46,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['test'],['testing']
Testability,///< The fact has been asserted to be held.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:23,assert,asserted,23,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['assert'],['asserted']
Testability,"///< The height of the batch used for training/testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:47,test,testing,47,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['test'],['testing']
Testability,"///< The line for the data value of the test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:40,test,test,40,roofit/roostats/inc/RooStats/HybridPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h,1,['test'],['test']
Testability,"///< The testing sample is sampled; // BFGS variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:9,test,testing,9,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['test'],['testing']
Testability,"///< The width of the batch used for training/testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:46,test,testing,46,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['test'],['testing']
Testability,"///< Total number of events in test statistic calculation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:31,test,test,31,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"///< True if log scale in X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,log,log,13,core/base/inc/TStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h,1,['log'],['log']
Testability,"///< True if log scale in y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,log,log,13,core/base/inc/TStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h,1,['log'],['log']
Testability,"///< True if log scale in z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,log,log,13,core/base/inc/TStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h,1,['log'],['log']
Testability,///< Wide logical shift left.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< Wide logical shift right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< Word logical shift left N bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,///< Word logical shift right N bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['log'],['logical']
Testability,"///< X axis logarithmic scale check box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleManager.h:12,log,logarithmic,12,gui/ged/inc/TStyleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleManager.h,1,['log'],['logarithmic']
Testability,"///< X-axis in log scale",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:15,log,log,15,hist/hist/inc/TH1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h,1,['log'],['log']
Testability,"///< Y axis logarithmic scale check box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleManager.h:12,log,logarithmic,12,gui/ged/inc/TStyleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleManager.h,1,['log'],['logarithmic']
Testability,"///< Z axis logarithmic scale check box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleManager.h:12,log,logarithmic,12,gui/ged/inc/TStyleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleManager.h,1,['log'],['logarithmic']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:24,log,logical,24,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:24,log,logical,24,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:24,log,logical,24,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< absolute minimum of -log(L)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProfileLL.h:26,log,log,26,roofit/roofitcore/inc/RooProfileLL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProfileLL.h,1,['log'],['log']
Testability,"///< also used as temporary storage for trees not yet assigned for testing;training...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:67,test,testing,67,tmva/tmva/inc/TMVA/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h,1,['test'],['testing']
Testability,"///< callback for monitoring and loggging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,log,loggging,33,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,3,['log'],['loggging']
Testability,"///< callback for monitoring and logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:33,log,logging,33,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,4,['log'],['logging']
Testability,"///< curve test tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:11,test,test,11,roofit/roofitcore/res/RooUnitTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h,2,['test'],['test']
Testability,"///< enum which specifies the separation to use for the DT logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:59,log,logic,59,tmva/tmva/inc/TMVA/MethodPDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h,1,['log'],['logic']
Testability,"///< fit correlation test tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:21,test,test,21,roofit/roofitcore/res/RooUnitTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h,1,['test'],['test']
Testability,"///< fit parameter test tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:19,test,test,19,roofit/roofitcore/res/RooUnitTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h,1,['test'],['test']
Testability,"///< flag to control if function pointer represent log of pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h:51,log,log,51,math/unuran/inc/TUnuranContDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h,2,['log'],['log']
Testability,"///< flag to control usage of a log scan",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/BrentMinimizer1D.h:32,log,log,32,math/mathcore/inc/Math/BrentMinimizer1D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/BrentMinimizer1D.h,2,['log'],['log']
Testability,"///< flag to indicate if we use the log of the PDF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranSampler.h:36,log,log,36,math/unuran/inc/TUnuranSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranSampler.h,1,['log'],['log']
Testability,"///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:24,log,logging,24,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['log'],['logging']
Testability,"///< for one sided PL test statistic (for discovery)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:22,test,test,22,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h,1,['test'],['test']
Testability,"///< for one sided PL test statistic (upper limits)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:22,test,test,22,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h,1,['test'],['test']
Testability,"///< for ranking test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:17,test,test,17,tmva/tmva/inc/TMVA/MethodLikelihood.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h,1,['test'],['test']
Testability,"///< for the case of multiple test statistics, holds all the results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:30,test,test,30,roofit/roostats/inc/RooStats/HypoTestResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h,1,['test'],['test']
Testability,"///< histogram test tolerance (KS dist != prob)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:15,test,test,15,roofit/roofitcore/res/RooUnitTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h,1,['test'],['test']
Testability,"///< how often is the test data tested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:22,test,test,22,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,2,['test'],"['test', 'tested']"
Testability,"///< if set to true the user has specified training and testing data explicitly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:56,test,testing,56,tmva/tmva/inc/TMVA/DataInputHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h,1,['test'],['testing']
Testability,"///< internal pointer to log likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:25,log,log,25,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,1,['log'],['log']
Testability,"///< list of events for training/testing/...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:33,test,testing,33,tmva/tmva/inc/TMVA/DataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h,1,['test'],['testing']
Testability,"///< log scale in X. Also set by histogram option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h:5,log,log,5,hist/histpainter/inc/Hoption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h,1,['log'],['log']
Testability,"///< log scale in Y. Also set by histogram option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h:5,log,log,5,hist/histpainter/inc/Hoption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h,1,['log'],['log']
Testability,"///< log scale in Z. Also set by histogram option; ///@}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h:5,log,log,5,hist/histpainter/inc/Hoption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h,1,['log'],['log']
Testability,"///< logarithmic check box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TAxisEditor.h:5,log,logarithmic,5,gui/ged/inc/TAxisEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TAxisEditor.h,1,['log'],['logarithmic']
Testability,"///< logical failure (e.g. pipe closed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5,log,logical,5,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['log'],['logical']
Testability,"///< logical font name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGFontDialog.h:5,log,logical,5,gui/gui/inc/TGFontDialog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGFontDialog.h,1,['log'],['logical']
Testability,"///< logical operation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/GuiTypes.h:5,log,logical,5,core/gui/inc/GuiTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/GuiTypes.h,1,['log'],['logical']
Testability,"///< logical page size (run-time determined); /// mmap variety that works on this system",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5,log,logical,5,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['log'],['logical']
Testability,"///< logical value of a0 parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,2,['log'],['logical']
Testability,"///< logical value of a1 parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:5,log,logical,5,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< logical value of a2 parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:5,log,logical,5,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< logical value of ax parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of ay parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of b parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:5,log,logical,5,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< logical value of correlation coefficient, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of s parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:5,log,logical,5,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< logical value of sigma parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:5,log,logical,5,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< logical value of sigma x parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of sigma y parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h:5,log,logical,5,hist/spectrum/inc/TSpectrum2Fit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrum2Fit.h,1,['log'],['logical']
Testability,"///< logical value of t parameter, which allows to fix the parameter (not to fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h:5,log,logical,5,hist/spectrum/inc/TSpectrumFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/inc/TSpectrumFit.h,1,['log'],['logical']
Testability,"///< make the candle appear logx-like",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TCandle.h:28,log,logx-like,28,graf2d/graf/inc/TCandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TCandle.h,1,['log'],['logx-like']
Testability,"///< make the candle appear logy-like",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TCandle.h:28,log,logy-like,28,graf2d/graf/inc/TCandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TCandle.h,1,['log'],['logy-like']
Testability,"///< make the candle appear logz-like",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TCandle.h:28,log,logz-like,28,graf2d/graf/inc/TCandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TCandle.h,1,['log'],['logz-like']
Testability,"///< more logarithmic labels check box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TAxisEditor.h:10,log,logarithmic,10,gui/ged/inc/TAxisEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TAxisEditor.h,1,['log'],['logarithmic']
Testability,"///< number of events of class 0,1,2,... in training[0]; ///< and testing[1] (+validation, trainingoriginal)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:66,test,testing,66,tmva/tmva/inc/TMVA/DataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h,1,['test'],['testing']
Testability,"///< number of tau in the test-phase that are ok",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:26,test,test-phase,26,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['test'],['test-phase']
Testability,"///< pad log properties",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadOptions.h:9,log,log,9,gui/webgui6/inc/TWebPadOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadOptions.h,1,['log'],['log']
Testability,"///< result of the test statistic evaluated on data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:19,test,test,19,roofit/roostats/inc/RooStats/HypoTestResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h,1,['test'],['test']
Testability,"///< score results from test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:24,test,test,24,tmva/tmva/inc/TMVA/RuleFitAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h,1,['test'],['test']
Testability,"///< set log scale on X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TPadEditor.h:9,log,log,9,gui/ged/inc/TPadEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TPadEditor.h,1,['log'],['log']
Testability,"///< set log scale on Y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TPadEditor.h:9,log,log,9,gui/ged/inc/TPadEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TPadEditor.h,1,['log'],['log']
Testability,"///< set log scale on Z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TPadEditor.h:9,log,log,9,gui/ged/inc/TPadEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TPadEditor.h,1,['log'],['log']
Testability,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:17,test,test,17,roofit/roostats/inc/RooStats/CombinedCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h,4,['test'],['test']
Testability,"///< test for overtraining performed at each #th epochs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:5,test,test,5,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['test'],['test']
Testability,"///< the test statistic sampler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:9,test,test,9,roofit/roostats/inc/RooStats/FeldmanCousins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h,1,['test'],['test']
Testability,"///< tree is for training/testing/both",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h:26,test,testing,26,tmva/tmva/inc/TMVA/DataInputHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataInputHandler.h,1,['test'],['testing']
Testability,"///< used to test optimized signal efficiency",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:13,test,test,13,tmva/tmva/inc/TMVA/MethodCuts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h,3,['test'],['test']
Testability,"///< value test tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:11,test,test,11,roofit/roofitcore/res/RooUnitTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h,1,['test'],['test']
Testability,"///< verbose mode; // flag determining the way training and test data are assigned to DataLoader",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:60,test,test,60,tmva/tmva/inc/TMVA/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h,1,['test'],['test']
Testability,"///< visibility of logical node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/inc/ROOT/RGeomData.hxx:19,log,logical,19,geom/webviewer/inc/ROOT/RGeomData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/inc/ROOT/RGeomData.hxx,1,['log'],['logical']
Testability,"///< whether the likelihood is on a regular, log, (or other) scale; // whether we should take the step, based on the value of d, fSign, fType",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h:45,log,log,45,roofit/roostats/inc/RooStats/MetropolisHastings.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h,1,['log'],['log']
Testability,"///<! Array of sub-contexts representing part of the combined test statistic; // Parallel mode data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:62,test,test,62,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"///<! EventList defining the events in the test dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/inc/TMultiLayerPerceptron.h:43,test,test,43,math/mlp/inc/TMultiLayerPerceptron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/inc/TMultiLayerPerceptron.h,1,['test'],['test']
Testability,"///<! List of transformations to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Envelope.h:33,test,test,33,tmva/tmva/inc/TMVA/Envelope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Envelope.h,1,['test'],['test']
Testability,"///<! Sandbox for incoming objects in a transaction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:6,Sandbox,Sandbox,6,roofit/roofitcore/inc/RooWorkspace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h,1,['Sandbox'],['Sandbox']
Testability,"///<! [train/test/...][method-identifier]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:13,test,test,13,tmva/tmva/inc/TMVA/DataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h,1,['test'],['test']
Testability,"///<! list of transformations to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:33,test,test,33,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['test'],['test']
Testability,"///<! log file with SQL statements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h:6,log,log,6,io/sql/inc/TSQLFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h,1,['log'],['log']
Testability,"///<! log scale, <1 off, 1 - base10, 2 - base 2, 2.71 - exp, 3, 4, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:6,log,log,6,graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx,1,['log'],['log']
Testability,"///<! message logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h:14,log,logger,14,tmva/tmva/inc/TMVA/ClassInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ClassInfo.h,33,['log'],['logger']
Testability,"///<! message logger; // variables for JsMVA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h:14,log,logger,14,tmva/tmva/inc/TMVA/SVWorkingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SVWorkingSet.h,1,['log'],['logger']
Testability,"///<! message logger; /////////////////////////////////////////////////////////////////; // METHODS //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:14,log,logger,14,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['log'],['logger']
Testability,"///<! message logging service",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:14,log,logging,14,tmva/tmva/inc/TMVA/LDA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h,1,['log'],['logging']
Testability,"///<! the output logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h:17,log,logger,17,tmva/tmva/inc/TMVA/Timer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h,1,['log'],['logger']
Testability,"///<! verbosity level, controls granularity of logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:47,log,logging,47,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['log'],['logging']
Testability,"///Log-normal distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Random.h:3,Log,Log-normal,3,math/mathcore/inc/Math/Random.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Random.h,1,['Log'],['Log-normal']
Testability,"///Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,log,log,65,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,log,log,65,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,log,log,65,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:65,log,log,65,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['log'],['log']
Testability,"///This is ROOT's old implementation before the vectorised version appeared; ///It's here now to test that the new one yields the same results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:97,test,test,97,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['test'],['test']
Testability,"///\brief Drives the interactive prompt talking to the user.; /// @param[in] nologo - whether to show cling's welcome logo or not; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/UserInterface/UserInterface.h:118,log,logo,118,interpreter/cling/include/cling/UserInterface/UserInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/UserInterface/UserInterface.h,1,['log'],['logo']
Testability,"///\brief Generates forward declarations for a Decl or Transaction; /// by implementing a DeclVisitor; ///; /// Important Points:; /// 1. Function arguments having an EnumConstant as a default value; /// are printed in the following way:; /// enum E {E_a, E_b};; /// void foo(E e = E_b){}; /// Generates:; /// enum E : unsigned int;; /// void foo(E e = E(1));; /// 1 is the integral value of E_b.; ///; /// 2. Decls, in general, are skipped when they depend on things; /// that were previously skipped.; /// The set of strings, m_IncompatibleNames facilitate this.; /// Examine the shouldSkip functions to see why specific types; /// are skipped.; ///; /// 3. Log file:; /// The name of the file depends on the name of the file where; /// the forward declarations are written.; /// So, fwd.h produces a corresponding fwd.h.skipped, when; /// output logging is enabled.; /// The log messages are written in the shouldSkip functions to; /// simplify the design.; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ForwardDeclPrinter.h:660,Log,Log,660,interpreter/cling/lib/Interpreter/ForwardDeclPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ForwardDeclPrinter.h,3,"['Log', 'log']","['Log', 'log', 'logging']"
Testability,"///\brief Get a path to an installed VisualStudio directory matching:; /// 1. Version that cling was compiled; /// 2. Version that shell is initialized to; /// 3. Highest installed version; ///; /// \param [out] Path - Path to VisualStudio; /// \param [out] WindSDK - Store the path to the Windows SDK here; /// \param [in/out] UniversalSDK - Universal SDK version to match, or empty to; /// match the highest version. On ouput the path to the Universal SDK.; /// \param [in] Verbose - Log progress; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Platform.h:486,Log,Log,486,interpreter/cling/include/cling/Utils/Platform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Platform.h,1,['Log'],['Log']
Testability,"///\brief Look for given file that can be reachable from current working; /// directory or any user supplied include paths in Args. This is useful; /// to look for a file (precompiled header) before a Preprocessor instance; /// has been created.; ///; /// \param [in] Args - The argv vector to look for '-I' & '/I' flags; /// \param [in,out] File - File to look for, may mutate to an absolute path; /// \param [in] FM - File manger to resolve current dir with (can be null); /// \param [in] FileType - File type for logging or nullptr for no logging; ///; /// \return true if File is reachable and is a regular file; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Paths.h:516,log,logging,516,interpreter/cling/include/cling/Utils/Paths.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Paths.h,2,['log'],['logging']
Testability,"///\brief Prints cling's startup logo; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/UserInterface/UserInterface.h:33,log,logo,33,interpreter/cling/include/cling/UserInterface/UserInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/UserInterface/UserInterface.h,1,['log'],['logo']
Testability,"///\brief Test if a given token is a valid identifier for the current language; ///; /// \param Tok - Token, advanced to first token to test; /// \return - The valid identifier or empty llvm::StringRef",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp:10,Test,Test,10,interpreter/cling/lib/Utils/SourceNormalization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"///\brief Test if the given input is a function or class definition; ///; /// \param Tok - Token, advanced to first token to test; /// \param First - First token identifier.; /// \param[out] HasBody - if set to `true`, the function/class body follows;; /// thus, the caller needs to consume tokens until the; /// closing `}`; /// \return - Typeof definition, function/method or class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp:10,Test,Test,10,interpreter/cling/lib/Utils/SourceNormalization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"///\brief Test whether a function with the given name exists.; ///; ///\param [in] scopeDecl - scope in which to look for the function.; ///\param [in] funcName - name of the function to look for.; ///\param [in] diagOnOff - whether to diagnose lookup failures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/LookupHelper.h:10,Test,Test,10,interpreter/cling/include/cling/Interpreter/LookupHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/LookupHelper.h,1,['Test'],['Test']
Testability,"///\brief Test whether the first decl of the DeclGroupRef comes from an AST; /// file.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.h:10,Test,Test,10,interpreter/cling/lib/Interpreter/DeclCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.h,1,['Test'],['Test']
Testability,"///\brief The 'logging' stream. Currently returns cling::errs().; /// This matches clang & gcc prinitng to stderr for certain information.; /// If the host process needs to keep stderr for itself or actual errors,; /// then the function can be edited to return a separate stream.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Output.h:15,log,logging,15,interpreter/cling/include/cling/Utils/Output.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Output.h,1,['log'],['logging']
Testability,"///\brief Validate a seried of bytes as properly encoded UTF-8; ///; /// \param [in] Str - Pointer to the first byte to validate; /// \param [in] N - Number of bytes to validate; /// \param [in] Loc: std::locale to test if Str is also printable; /// \param [out] IsPrint - Whether all of the characters are printable; ///; /// \return true if Str to Str+N is a valid UTF-8 run.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/UTF8.h:215,test,test,215,interpreter/cling/include/cling/Utils/UTF8.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/UTF8.h,1,['test'],['test']
Testability,"///split training data in training and validation data; // and determine the number of training and testing examples",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:100,test,testing,100,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['test'],['testing']
Testability,"//::Error(""AdaptiveIntegratorMultiDim::DoIntegral()"", ""Logic error: idvax0 < 1!"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:55,Log,Logic,55,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,1,['Log'],['Logic']
Testability,"//; // Auxilliary classes for testing; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:30,test,testing,30,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['testing']
Testability,"//; // Bitmap functions. Set bit b in the map and; // test bit b to see if it was set previously.; //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:54,test,test,54,core/base/src/Match.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx,1,['test'],['test']
Testability,"//; // Cint macro to test I/O of SMatrix classes and compare with a TMatrix; // A ROOT tree is written and read in both using either a SMatrix or; /// a TMatrixD.; //; // To execute the macro type in:; //; // root[0]: .x smatrixIO.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testIO.cxx:21,test,test,21,math/smatrix/test/testIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testIO.cxx,1,['test'],['test']
Testability,"//; // Cint macro to test I/O of mathcore Lorentz Vectors in a Tree and compare with a; // TLorentzVector. A ROOT tree is written and read in both using either a XYZTVector or /// a TLorentzVector.; //; // To execute the macro type in:; //; // root[0]: .x mathcoreVectorIO.C; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx:21,test,test,21,math/genvector/test/testVectorIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx,1,['test'],['test']
Testability,"//; // END OF PART FIVE; //; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //_____________________________________________________________________________; // Other tests currently not included in any suite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:281,test,tests,281,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['tests']
Testabilityest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:548,TEST,TEST,548,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,6,"['TEST', 'Test', 'test']","['TEST', 'TESTS', 'Test', 'test', 'testStatType']"
Testabilityest the Bayesian central interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // 3. square root of the inverse of the mean; // 4. gamma distribution; // The posterior distribution is easily obtained analytically for these cases.; // Therefore, the reference interval limits will be computed analytically.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:560,TEST,TESTS,560,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,"['TEST', 'Test']","['TESTS', 'Test']"
Testabilityvaluate the functionality of the top level functions in RooStats; // called NumberCountingUtils::BinomialWithTauObsZ. This function; // computes the significance of a hypothesis test via a frequentist; // solution. This significance, called ZBi, is detailed in the article; // ""Evaluation of three methods for calculating statistical significance; // when incorporating a systematic uncertainty into a test of the; // background-only hypothesis for a Poisson process"" by Robert D. Cousins,; // James T. Linnemann, Jordan Tucker. The reference values are taken; // from the paper, as well as the On / Off model on which the test is; // evaluated.; //; // ModelConfig (implicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; // implicit in NumberCountingUtils::BinomialWithTauObsZ; //; // 05/2012 - Wouter Verkerke, Lorenzo Moneta, Ioan Gabriel Bucur; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:549,TEST,TEST,549,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,5,"['TEST', 'test']","['TEST', 'TESTS', 'test']"
Testabilityest the validity of the confidence interval computed by the MCMCCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the MCMCCalculator. As such, this test can only; // confirm if the MCMCCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:578,TEST,TESTS,578,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,4,"['TEST', 'Test', 'test']","['TESTS', 'Test', 'test']"
Testability,//; // End test functions; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:11,test,test,11,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['test']
Testability,"//; // If the tree has a TRefTable, set the current branch if; // branch is not a basic type.; //; // FIXME: This test probably needs to be extended past 10.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:114,test,test,114,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['test'],['test']
Testability,"//; // Prefixes are attached to stub numbers depending on the return type.; // return type: float sf_; // double df_; // single complex sc_; // double complext dc_; // others NO PREFIX; //; //; // The full name of a helper function is__mips16_call_stub +; // return type dependent prefix + stub number; //; // FIXME: This is something that probably should be in a different source file; // and perhaps done differently but my main purpose is to not waste runtime; // on something that we can enumerate in the source. Another possibility is; // to have a python script to generate these mapping tables. This will do; // for now. There are a whole series of helper function mapping arrays, one; // for each return type class as outlined above. There there are 11 possible; // entries. Ones with 0 are ones which should never be selected.; //; // All the arrays are similar except for ones which return neither; // sf, df, sc, dc, in which we only care about ones which have sf or df as a; // first parameter.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp:32,stub,stub,32,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp,2,['stub'],['stub']
Testability,"//; // Prevent failing on an assert in TryAnnotateCXXScopeToken.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:29,assert,assert,29,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,2,['assert'],['assert']
Testability,"//; // Register tests; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:16,test,tests,16,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,"//; // Run the tests; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:15,test,tests,15,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,"//; // S2 is normally saved if the stub is for a function which; // returns a float or double value and is not otherwise. This is; // because more work is required after the function the stub; // is calling completes, and so the stub cannot directly return; // and the stub has no stack space to store the return address so; // S2 is used for that purpose.; // In order to take advantage of not saving S2, we need to also; // optimize the call in the stub and this requires some further; // functionality in MipsAsmPrinter which we don't have yet.; // So for now we always save S2. The optimization will be done; // in a follow-on patch.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp:35,stub,stub,35,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp,5,['stub'],['stub']
Testability,"//; // Set defaults values for selected test; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:40,test,test,40,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,"//; // TFractionFitFCN; //; // Computes negative log-likelihood for TFractionFitter; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:49,log,log-likelihood,49,hist/hist/inc/TFractionFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h,1,['log'],['log-likelihood']
Testability,"//; // Test backpropagation for linear net.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx:7,Test,Test,7,tmva/tmva/test/DNN/TestBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx,5,['Test'],['Test']
Testability,"//; // Test backpropagation for linear net.; //; //Since batch norm is not supported for plain Cuda - the BNOrm layer will be a dummy layer; // and an error message should be produced",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx:7,Test,Test,7,tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalizationCuda.cxx,1,['Test'],['Test']
Testability,"//; // TestAnalyticalIntegrals; //; //; // Created by Aurélie Flandi on 10.09.14.; //; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx:7,Test,TestAnalyticalIntegrals,7,math/mathcore/test/testAnalyticalIntegrals.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx,1,['Test'],['TestAnalyticalIntegrals']
Testability,"//; // The ""fitEllipseTGraphDLSF"" macro uses the ""Direct Least Squares Fitting""; // algorithm for fitting an ellipse to a set of data points from a TGraph; //; // To try this macro, in a ROOT prompt, do:; // .L fitEllipseTGraphDLSF.cxx // or "".L fitEllipseTGraphDLSF.cxx++""; // fitEllipseTGraphDLSF(TestGraphDLSF());; // for (int i=0; i<10; i++) { fitEllipseTGraphDLSF(); gSystem->Sleep(333); }; //; // Last update: Thu Jul 31 18:00:00 UTC 2014; //; // Changes:; // 2014.07.31 - (initial version); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx:299,Test,TestGraphDLSF,299,tutorials/fit/fitEllipseTGraphDLSF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx,1,['Test'],['TestGraphDLSF']
Testability,"//; // The ""fitEllipseTGraphRMM"" macro uses the ""ROOT::Math::Minimizer""; // interface for fitting an ellipse to a set of data points from a TGraph; //; // To try this macro, in a ROOT prompt, do:; // .L fitEllipseTGraphRMM.cxx // or "".L fitEllipseTGraphRMM.cxx++""; // fitEllipseTGraphRMM(TestGraphRMM());; // for (int i=0; i<10; i++) { fitEllipseTGraphRMM(); gSystem->Sleep(333); }; //; // Last update: Thu Jul 31 18:00:00 UTC 2014; //; // Changes:; // 2014.07.31 - (initial version); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphRMM.cxx:288,Test,TestGraphRMM,288,tutorials/fit/fitEllipseTGraphRMM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphRMM.cxx,1,['Test'],['TestGraphRMM']
Testability,"//; // The Mips16 hard float is a crazy quilt inherited from gcc. I have a much; // cleaner way to do all of this but it will have to wait until the traditional; // gcc mechanism is completed.; //; // For Pic, in order for Mips16 code to call Mips32 code which according the abi; // have either arguments or returned values placed in floating point registers,; // we use a set of helper functions. (This includes functions which return type; // complex which on Mips are returned in a pair of floating point registers).; //; // This is an encoding that we inherited from gcc.; // In Mips traditional O32, N32 ABI, floating point numbers are passed in; // floating point argument registers 1,2 only when the first and optionally; // the second arguments are float (sf) or double (df).; // For Mips16 we are only concerned with the situations where floating point; // arguments are being passed in floating point registers by the ABI, because; // Mips16 mode code cannot execute floating point instructions to load those; // values and hence helper functions are needed.; // The possibilities are (), (sf), (sf, sf), (sf, df), (df), (df, sf), (df, df); // the helper function suffixs for these are:; // 0, 1, 5, 9, 2, 6, 10; // this suffix can then be calculated as follows:; // for a given argument Arg:; // Arg1x, Arg2x = 1 : Arg is sf; // 2 : Arg is df; // 0: Arg is neither sf or df; // So this stub is the string for number Arg1x + Arg2x*4.; // However not all numbers between 0 and 10 are possible, we check anyway and; // assert if the impossible exists.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp:1397,stub,stub,1397,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16ISelLowering.cpp,2,"['assert', 'stub']","['assert', 'stub']"
Testability,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:20,benchmark,benchmarks,20,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,5,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,"//; // To improve error logging for UsrPwd on the client side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:24,log,logging,24,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['log'],['logging']
Testability,"//; // We need to add a MipsMCExpr class to MCTargetDesc to fully implement; // stubs without raw text but this current patch is for compiler generated; // functions and they all return some value.; // The calling sequence for non pic is different in that case and we need; // to implement %lo and %hi in order to handle the case of no return value; // See the corresponding method in Mips16HardFloat for details.; //; // mov the return address to S2.; // we have no stack space to store it and we are about to make another call.; // We need to make sure that the enclosing function knows to save S2; // This should have already been handled.; //; // Mov $18, $31",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:80,stub,stubs,80,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['stub'],['stubs']
Testability,"//; // creates a test TGraph with an ellipse; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx:17,test,test,17,tutorials/fit/fitEllipseTGraphDLSF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx,2,['test'],['test']
Testability,"//; // do the return; // if (Signature->RetSig == NoFPRet); // llvm_unreachable(""should not be any stubs here with no return value"");; // else",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:99,stub,stubs,99,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['stub'],['stubs']
Testability,"//; // logical; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx:7,log,logical,7,hist/hist/src/TFormulaPrimitive_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx,1,['log'],['logical']
Testability,//; // make the comment field identifying the return and parameter; // types of the floating point stub; // # Stub function to call rettype xxxx (params); //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:99,stub,stub,99,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,2,"['Stub', 'stub']","['Stub', 'stub']"
Testability,//; // see if we already have the stub; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp:34,stub,stub,34,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,1,['stub'],['stub']
Testability,"//; // this stress test for TMVA is a shorter version of the extended TMVA testsuite; // generated by script tmvaValidation/testsuite/RootTest/buildRootTest.sh; //; // Eckhard von Toerne, Dec 2010; //; /* if working, it creates output like this:. ******************************************************************; * TMVA - S T R E S S and U N I T test suite (FAST); ******************************************************************; Event [107/107]..................................................OK; VariableInfo [31/31].............................................OK; DataSetInfo [20/20]..............................................OK; DataSet [15/15]..................................................OK; Factory [11/11]..................................................OK; Reader [2/2].....................................................OK; CutsGA [3/3].....................................................OK; LikelihoodD [4/4]................................................OK; PDERS [4/4]......................................................OK; PDEFoam [4/4]....................................................OK; KNN [4/4]........................................................OK; Fisher [4/4].....................................................OK; BoostedFisher [4/4]..............................................OK; LD [4/4].........................................................OK; MLP [4/4]........................................................OK; MLPBFGS [4/4]....................................................OK; SVM [4/4]........................................................OK; BDTG [4/4].......................................................OK; BDT [4/4]........................................................OK; Regression_LD [4/4]..............................................OK; Regression_MLPBFGSN [4/4]........................................OK; Regression_BDTG2 [4/4]...........................................OK; Event [107/107].................................",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:19,test,test,19,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,4,['test'],"['test', 'testsuite']"
Testability,"//; //------------------------------------------------------------------------; // Test Filling of matrix; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Test,Test,83,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test binary matrix element-by-element operations; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Test,Test,83,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test binary vector operations; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Test,Test,83,test/vvector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test decomposition I/O; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:83,Test,Test,83,test/stressLinear.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test matrix I/O; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Test,Test,83,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test matrix promises; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:83,Test,Test,83,test/stressLinear.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx,2,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test operations with vectors and matrix slices; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Test,Test,83,test/vvector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test special matrix creation; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Test,Test,83,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,1,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test uniform element operations; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:83,Test,Test,83,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,2,['Test'],['Test']
Testability,"//; //------------------------------------------------------------------------; // Test vector I/O; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:83,Test,Test,83,test/vvector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx,1,['Test'],['Test']
Testability,"//; /// 2. Even if the previous point were not true, the decision on whether to; /// perform a tail call is done in LowerCallTo in SelectionDAG (or; /// CallLowering in GlobalISel) which occurs after the Stack Protector; /// Pass. As a result, one would need to put the relevant callinst into the; /// stack protector check success basic block (where the return inst is; /// placed) and then move it back later at ISel/MI time before the; /// stack protector check if the tail call optimization failed. The MI; /// level option was nixed immediately since it would require; /// platform-specific pattern matching. The ISel level option was; /// nixed because SelectionDAG only processes one IR level basic block at a; /// time implying one could not create a DAG Combine to move the callinst.; ///; /// To get around this problem:; ///; /// 1. SelectionDAG can only process one block at a time, we can generate; /// multiple machine basic blocks for one IR level basic block.; /// This is how we handle bit tests and switches.; ///; /// 2. At the MI level, tail calls are represented via a special return; /// MIInst called ""tcreturn"". Thus if we know the basic block in which we; /// wish to insert the stack protector check, we get the correct behavior; /// by always inserting the stack protector check right before the return; /// statement. This is a ""magical transformation"" since no matter where; /// the stack protector check intrinsic is, we always insert the stack; /// protector check code at the end of the BB.; ///; /// Given the aforementioned constraints, the following solution was devised:; ///; /// 1. On platforms that do not support ISel stack protector check; /// generation, allow for the normal IR level stack protector check; /// generation to continue.; ///; /// 2. On platforms that do support ISel stack protector check; /// generation:; ///; /// a. Use the IR level stack protector pass to decide if a stack; /// protector is required/which BB we insert the stack protector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:2967,test,tests,2967,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,1,['test'],['tests']
Testability,"//; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2022,test,test,2022,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['test'],['test']
Testability,"//= CPyCppyy type number stubs to allow dynamic overrides =====================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:25,stub,stubs,25,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['stub'],['stubs']
Testability,"//= aggregate testing ======================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/datatypes.cxx:14,test,testing,14,bindings/pyroot/cppyy/cppyy/test/datatypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/datatypes.cxx,2,['test'],['testing']
Testability,"//== ObjCSelfInitChecker.cpp - Checker for 'self' initialization -*- C++ -*--=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines ObjCSelfInitChecker, a builtin check that checks for uses of; // 'self' before proper initialization.; //; //===----------------------------------------------------------------------===//; // This checks initialization methods to verify that they assign 'self' to the; // result of an initialization call (e.g. [super init], or [self initWith..]); // before using 'self' or any instance variable.; //; // To perform the required checking, values are tagged with flags that indicate; // 1) if the object is the one pointed to by 'self', and 2) if the object; // is the result of an initializer (e.g. [super init]).; //; // Uses of an object that is true for 1) but not 2) trigger a diagnostic.; // The uses that are currently checked are:; // - Using instance variables.; // - Returning the object.; //; // Note that we don't check for an invalid 'self' that is the receiver of an; // obj-c message expression to cut down false positives where logging functions; // get information from self (like its class) or doing ""invalidation"" on self; // when the initialization fails.; //; // Because the object that 'self' points to gets invalidated when a call; // receives a reference to 'self', the checker keeps track and passes the flags; // for 1) and 2) to the new object that 'self' points to after the call.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp:1339,log,logging,1339,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,1,['log'],['logging']
Testability,"//== TaintTesterChecker.cpp ----------------------------------- -*- C++ -*--=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker can be used for testing how taint data is propagated.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TaintTesterChecker.cpp:411,test,testing,411,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TaintTesterChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TaintTesterChecker.cpp,1,['test'],['testing']
Testability,"//== TestAfterDivZeroChecker.cpp - Test after division by zero checker --*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines TestAfterDivZeroChecker, a builtin check that performs checks; // for division by zero where the division occurs before comparison with zero.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TestAfterDivZeroChecker.cpp:5,Test,TestAfterDivZeroChecker,5,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TestAfterDivZeroChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TestAfterDivZeroChecker.cpp,3,['Test'],"['Test', 'TestAfterDivZeroChecker']"
Testability,"//==- AliasAnalysis.cpp - Generic Alias Analysis Interface Implementation --==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the generic AliasAnalysis interface which is used as the; // common interface used by all clients and implementations of alias analysis.; //; // This file also implements the default version of the AliasAnalysis interface; // that is to be used when no other implementation is specified. This does some; // simple tests that detect obvious cases: two different global pointers cannot; // alias, a global cannot alias a malloc, two different mallocs cannot alias,; // etc.; //; // This alias analysis implementation really isn't very good for anything, but; // it is very fast, and makes a nice clean default implementation. Because it; // handles lots of little corner cases, other, more complex, alias analysis; // implementations may choose to rely on this pass to resolve these simple and; // easy cases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:718,test,tests,718,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['test'],['tests']
Testability,"//==- ExprInspectionChecker.cpp - Used for regression tests ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ExprInspectionChecker.cpp:54,test,tests,54,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ExprInspectionChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ExprInspectionChecker.cpp,1,['test'],['tests']
Testability,"//==- GTestChecker.cpp - Model gtest API --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker models the behavior of un-inlined APIs from the gtest; // unit-testing library to avoid false positives when using assertions from; // that library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:436,test,testing,436,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,2,"['assert', 'test']","['assertions', 'testing']"
Testability,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:1462,test,testl,1462,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,1,['test'],['testl']
Testability,"//==------ llvm/CodeGen/LoopTraversal.h - Loop Traversal -*- C++ -*---------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Loop Traversal logic.; ///; /// This class provides the basic blocks traversal order used by passes like; /// ReachingDefAnalysis and ExecutionDomainFix.; /// It identifies basic blocks that are part of loops and should to be visited; /// twice and returns efficient traversal order for all the blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LoopTraversal.h:405,log,logic,405,interpreter/llvm-project/llvm/include/llvm/CodeGen/LoopTraversal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LoopTraversal.h,1,['log'],['logic']
Testability,"//=== CXXSelfAssignmentChecker.cpp -----------------------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines CXXSelfAssignmentChecker, which tests all custom defined; // copy and move assignment operators for the case of self assignment, thus; // where the parameter refers to the same location where the this pointer; // points to. The checker itself does not do any checks at all, but it; // causes the analyzer to check every copy and move assignment operator twice:; // once for when 'this' aliases with the parameter and once for when it may not.; // It is the task of the other enabled checkers to find the bugs in these two; // different cases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CXXSelfAssignmentChecker.cpp:433,test,tests,433,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CXXSelfAssignmentChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CXXSelfAssignmentChecker.cpp,1,['test'],['tests']
Testability,"//=== ErrnoTesterChecker.cpp ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines ErrnoTesterChecker, which is used to test functionality of the; // errno_check API.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoTesterChecker.cpp:433,test,test,433,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoTesterChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoTesterChecker.cpp,1,['test'],['test']
Testability,"//=== HexagonMCELFStreamer.cpp - Hexagon subclass of MCELFStreamer -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a stub that parses a MCInst bundle and passes the; // instructions on to the real streamer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp:397,stub,stub,397,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp,1,['stub'],['stub']
Testability,"//===- AMDGPURewriteOutArgumentsPass.cpp - Create struct returns ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This pass attempts to replace out argument usage with a return of a; /// struct.; ///; /// We can support returning a lot of values directly in registers, but; /// idiomatic C code frequently uses a pointer argument to return a second value; /// rather than returning a struct by value. GPU stack access is also quite; /// painful, so we want to avoid that if possible. Passing a stack object; /// pointer to a function also requires an additional address expansion code; /// sequence to convert the pointer to be relative to the kernel's scratch wave; /// offset register since the callee doesn't know what stack frame the incoming; /// pointer is relative to.; ///; /// The goal is to try rewriting code that looks like this:; ///; /// int foo(int a, int b, int* out) {; /// *out = bar();; /// return a + b;; /// }; ///; /// into something like this:; ///; /// std::pair<int, int> foo(int a, int b) {; /// return std::pair(a + b, bar());; /// }; ///; /// Typically the incoming pointer is a simple alloca for a temporary variable; /// to use the API, which if replaced with a struct return will be easily SROA'd; /// out when the stub function we create is inlined; ///; /// This pass introduces the struct return, but leaves the unused pointer; /// arguments and introduces a new stub function calling the struct returning; /// body. DeadArgumentElimination should be run after this to clean these up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:1522,stub,stub,1522,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,2,['stub'],['stub']
Testability,"//===- ASTVector.h - Vector that uses ASTContext for allocation ---*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides ASTVector, a vector ADT whose contents are; // allocated using the allocator associated with an ASTContext..; //; //===----------------------------------------------------------------------===//; // FIXME: Most of this is copy-and-paste from BumpVector.h and SmallVector.h.; // We can refactor this core logic into something common.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTVector.h:706,log,logic,706,interpreter/llvm-project/clang/include/clang/AST/ASTVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTVector.h,1,['log'],['logic']
Testability,"//===- AddDiscriminators.cpp - Insert DWARF path discriminators -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file adds DWARF discriminators to the IR. Path discriminators are; // used to decide what CFG path was taken inside sub-graphs whose instructions; // share the same line and column number information.; //; // The main user of this is the sample profiler. Instruction samples are; // mapped to line number information. Since a single line may be spread; // out over several basic blocks, discriminators add more precise location; // for the samples.; //; // For example,; //; // 1 #define ASSERT(P); // 2 if (!(P)); // 3 abort(); // ...; // 100 while (true) {; // 101 ASSERT (sum < 0);; // 102 ...; // 130 }; //; // when converted to IR, this snippet looks something like:; //; // while.body: ; preds = %entry, %if.end; // %0 = load i32* %sum, align 4, !dbg !15; // %cmp = icmp slt i32 %0, 0, !dbg !15; // br i1 %cmp, label %if.end, label %if.then, !dbg !15; //; // if.then: ; preds = %while.body; // call void @abort(), !dbg !15; // br label %if.end, !dbg !15; //; // Notice that all the instructions in blocks 'while.body' and 'if.then'; // have exactly the same debug information. When this program is sampled; // at runtime, the profiler will assume that all these instructions are; // equally frequent. This, in turn, will consider the edge while.body->if.then; // to be frequently taken (which is incorrect).; //; // By adding a discriminator value to the instructions in block 'if.then',; // we can distinguish instructions at line 101 with discriminator 0 from; // the instructions at line 101 with discriminator 1.; //; // For more details about DWARF discriminators, please visit; // http://wiki.dwarfstd",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp:876,ASSERT,ASSERT,876,interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp,2,['ASSERT'],['ASSERT']
Testability,"//===- AliasAnalysisEvaluator.h - Alias Analysis Accuracy Evaluator -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a simple N^2 alias analysis accuracy evaluator. The; /// analysis result is a set of statistics of how many times the AA; /// infrastructure provides each kind of alias result and mod/ref result when; /// queried with all pairs of pointers in the function.; ///; /// It can be used to evaluate a change in an alias analysis implementation,; /// algorithm, or the AA pipeline infrastructure itself. It acts like a stable; /// and easily tested consumer of all AA information exposed.; ///; /// This is inspired and adapted from code by: Naveen Neelakantam, Francesco; /// Spadini, and Wojciech Stryjewski.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h:853,test,tested,853,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h,1,['test'],['tested']
Testability,"//===- Attribute.cpp ------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Example clang plugin which adds an an annotation to file-scope declarations; // with the 'example' attribute.; //; // This plugin is used by clang/test/Frontend/plugin-attribute tests.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/Attribute/Attribute.cpp:530,test,test,530,interpreter/llvm-project/clang/examples/Attribute/Attribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/Attribute/Attribute.cpp,2,['test'],"['test', 'tests']"
Testability,"//===- BlockVerifier.h - FDR Block Verifier -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the RecordVisitor which verifies a sequence of records; // associated with a block, following the FDR mode log format's specifications.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/BlockVerifier.h:511,log,log,511,interpreter/llvm-project/llvm/include/llvm/XRay/BlockVerifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/BlockVerifier.h,1,['log'],['log']
Testability,"//===- BumpVector.h - Vector-like ADT that uses bump allocation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides BumpVector, a vector-like ADT whose contents are; // allocated from a BumpPtrAllocator.; //; //===----------------------------------------------------------------------===//; // FIXME: Most of this is copy-and-paste from SmallVector.h. We can; // refactor this core logic into something common that is shared between; // the two. The main thing that is different is the allocation strategy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Support/BumpVector.h:668,log,logic,668,interpreter/llvm-project/clang/include/clang/Analysis/Support/BumpVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Support/BumpVector.h,1,['log'],['logic']
Testability,"//===- CLog.h - Logging Interface -------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:16,Log,Logging,16,interpreter/llvm-project/clang/tools/libclang/CLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h,1,['Log'],['Logging']
Testability,"//===- ChainedIncludesSource.cpp - Chained PCHs in Memory -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ChainedIncludesSource class, which converts headers; // to chained PCHs in memory, mainly used for testing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ChainedIncludesSource.cpp:504,test,testing,504,interpreter/llvm-project/clang/lib/Frontend/ChainedIncludesSource.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ChainedIncludesSource.cpp,1,['test'],['testing']
Testability,"//===- CheckerRegistry.h - Maintains all available checkers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains the logic for parsing the TableGen file Checkers.td, and parsing the; // specific invocation of the analyzer (which checker/package is enabled, values; // of their options, etc). This is in the frontend library because checker; // registry functions are called from here but are defined in the dependent; // library libStaticAnalyzerCheckers, but the actual data structure that holds; // the parsed information is in the Core library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:396,log,logic,396,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,1,['log'],['logic']
Testability,"//===- ClangOpenCLBuiltinEmitter.cpp - Generate Clang OpenCL Builtin handling; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These backends consume the definitions of OpenCL builtin functions in; // clang/lib/Sema/OpenCLBuiltins.td and produce builtin handling code for; // inclusion in SemaLookup.cpp, or a test file that calls all declared builtins.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:604,test,test,604,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['test'],['test']
Testability,"//===- Construction of pass pipelines -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:592,test,testing,592,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['testing']
Testability,"//===- DWARFEmitter - Convert YAML to DWARF binary data -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// The DWARF component of yaml2obj. Provided as library code for tests.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:458,test,tests,458,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,1,['test'],['tests']
Testability,"//===- Debugify.cpp - Check debug info preservation in optimizations ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file In the `synthetic` mode, the `-debugify` attaches synthetic debug info; /// to everything. It can be used to create targeted tests for debug info; /// preservation. In addition, when using the `original` mode, it can check; /// original debug info preservation. The `synthetic` mode is default one.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:516,test,tests,516,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['test'],['tests']
Testability,"//===- Debugify.h - Check debug info preservation in optimizations --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file Interface to the `debugify` synthetic/original debug info testing; /// utility.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:449,test,testing,449,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,1,['test'],['testing']
Testability,"//===- DependencyDirectivesScanner.cpp ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp:648,log,logic,648,interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,1,['log'],['logic']
Testability,"//===- FDRLogBuilder.h - XRay FDR Log Building Utility --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRLogBuilder.h:34,Log,Log,34,interpreter/llvm-project/llvm/include/llvm/XRay/FDRLogBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRLogBuilder.h,1,['Log'],['Log']
Testability,"//===- FDRTraceExpander.h - XRay FDR Mode Log Expander --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // We define an FDR record visitor which can re-constitute XRayRecord instances; // from a sequence of FDR mode records in arrival order into a collection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceExpander.h:42,Log,Log,42,interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceExpander.h,1,['Log'],['Log']
Testability,"//===- FDRTraceWriter.cpp - XRay FDR Trace Writer ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Test a utility that can write out XRay FDR Mode formatted trace files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/FDRTraceWriter.cpp:383,Test,Test,383,interpreter/llvm-project/llvm/lib/XRay/FDRTraceWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/FDRTraceWriter.cpp,1,['Test'],['Test']
Testability,"//===- FDRTraceWriter.h - XRay FDR Trace Writer -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Test a utility that can write out XRay FDR Mode formatted trace files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h:383,Test,Test,383,interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h,1,['Test'],['Test']
Testability,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This file implements most of the API that will be used by the FileCheck utility; // as well as various unittests.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:520,test,tests,520,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['test'],['tests']
Testability,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This program exits with an exit status of 2 on error, exit status of 0 if; // the file matched the expected contents, and exit status of 1 if it did not; // contain the expected contents.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:520,test,tests,520,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,1,['test'],['tests']
Testability,"//===- FileHeaderReader.h - XRay Trace File Header Reading Function -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares functions that can load an XRay log header from various; // sources.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FileHeaderReader.h:434,log,log,434,interpreter/llvm-project/llvm/include/llvm/XRay/FileHeaderReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FileHeaderReader.h,1,['log'],['log']
Testability,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:774,test,test,774,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,3,['test'],['test']
Testability,"//===- GCMetadata.h - Garbage collector metadata ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the GCFunctionInfo and GCModuleInfo classes, which are; // used as a communication channel from the target code generator to the target; // garbage collectors. This interface allows code generators and garbage; // collectors to be developed independently.; //; // The GCFunctionInfo class logs the data necessary to build a type accurate; // stack map. The code generator outputs:; //; // - Safe points as specified by the GCStrategy's NeededSafePoints.; // - Stack offsets for GC roots, as specified by calls to llvm.gcroot; //; // As a refinement, liveness analysis calculates the set of live roots at each; // safe point. Liveness analysis is not presently performed by the code; // generator, so all roots are assumed live.; //; // GCModuleInfo simply collects GCFunctionInfo instances for each Function as; // they are compiled. This accretion is necessary for collectors which must emit; // a stack map for the compilation unit as a whole. Therefore, GCFunctionInfo; // outlives the MachineFunction from which it is derived and must not refer to; // any code generator data structures.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h:691,log,logs,691,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,1,['log'],['logs']
Testability,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:541,assert,assert,541,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['assert'],['assert']
Testability,"//===- IFSHandler.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file declares an interface for reading and writing .ifs (text-based; /// InterFace Stub) files.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:484,Stub,Stub,484,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,1,['Stub'],['Stub']
Testability,"//===- IFSStub.h ------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file defines an internal representation of an InterFace Stub.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:457,Stub,Stub,457,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,1,['Stub'],['Stub']
Testability,"//===- ImplicitNullChecks.cpp - Fold null checks into memory accesses -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass turns explicit null checks of the form; //; // test %r10, %r10; // je throw_npe; // movl (%r10), %esi; // ...; //; // to; //; // faulting_load_op(""movl (%r10), %esi"", throw_npe); // ...; //; // With the help of a runtime that understands the .fault_maps section,; // faulting_load_op branches to throw_npe if executing movl (%r10), %esi incurs; // a page fault.; // Store and LoadStore are also supported.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:440,test,test,440,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['test'],['test']
Testability,"//===- InstCombineSimplifyDemanded.cpp ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains logic for simplifying instructions based on information; // about how they are used.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:402,log,logic,402,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['log'],['logic']
Testability,"//===- InstructionCombining.cpp - Combine multiple instructions -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // InstructionCombining - Combine instructions to form fewer, simple; // instructions. This pass does not modify the CFG. This pass is where; // algebraic simplification happens.; //; // This pass combines things like:; // %Y = add i32 %X, 1; // %Z = add i32 %Y, 1; // into:; // %Z = add i32 %X, 2; //; // This is a simple worklist driven algorithm.; //; // This pass guarantees that the following canonicalizations are performed on; // the program:; // 1. If a binary operator has a constant operand, it is moved to the RHS; // 2. Bitwise operators with constant operands are always grouped so that; // shifts are performed first, then or's, then and's, then xor's.; // 3. Compare instructions are converted from <,>,<=,>= to ==,!= if possible; // 4. All cmp instructions on boolean values are replaced with logical ops; // 5. add X, X is represented as (X*2) => (X << 1); // 6. Multiplies with a power-of-two constant argument are transformed into; // shifts.; // ... etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:1189,log,logical,1189,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['log'],['logical']
Testability,"//===- InstructionSimplify.cpp - Fold instruction operands ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements routines for folding instructions into simpler forms; // that do not require creating new instructions. This does constant folding; // (""add i32 1, 1"" -> ""2"") but can also handle non-constant operands, either; // returning a constant (""and i32 %x, 0"" -> ""0"") or an already existing value; // (""and i32 %x, %x"" -> ""%x""). All operands are assumed to have already been; // simplified: This is usually true and assuming it simplifies the logic (if; // they have not been simplified then results are correct but maybe suboptimal).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:838,log,logic,838,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logic']
Testability,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:56,test,tests,56,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,2,"['assert', 'test']","['assert', 'tests']"
Testability,"//===- LLJITWithExecutorProcessControl.cpp - LLJIT example with EPC utils -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use the lazy re-exports utility to lazily compile; // IR modules. We will do this in seven steps:; //; // 1. Create an LLJIT instance.; // 2. Install a transform so that we can see what is being compiled.; // 3. Create an indirect stubs manager and lazy call-through manager.; // 4. Add two modules that will be conditionally compiled, plus a main module.; // 5. Add lazy-rexports of the symbols in the conditionally compiled modules.; // 6. Dump the ExecutionSession state to see the symbol table prior to; // executing any code.; // 7. Verify that only modules containing executed code are compiled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:638,stub,stubs,638,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,1,['stub'],['stubs']
Testability,"//===- LoopFuse.cpp - Loop Fusion Pass ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the loop fusion pass.; /// The implementation is largely based on the following document:; ///; /// Code Transformations to Augment the Scope of Loop Fusion in a; /// Production Compiler; /// Christopher Mark Barton; /// MSc Thesis; /// https://webdocs.cs.ualberta.ca/~amaral/thesis/ChristopherBartonMSc.pdf; ///; /// The general approach taken is to collect sets of control flow equivalent; /// loops and test whether they can be fused. The necessary conditions for; /// fusion are:; /// 1. The loops must be adjacent (there cannot be any statements between; /// the two loops).; /// 2. The loops must be conforming (they must execute the same number of; /// iterations).; /// 3. The loops must be control flow equivalent (if one loop executes, the; /// other is guaranteed to execute).; /// 4. There cannot be any negative distance dependencies between the loops.; /// If all of these conditions are satisfied, it is safe to fuse the loops.; ///; /// This implementation creates FusionCandidates that represent the loop and the; /// necessary information needed by fusion. It then operates on the fusion; /// candidates, first confirming that the candidate is eligible for fusion. The; /// candidates are then collected into control flow equivalent sets, sorted in; /// dominance order. Each set of control flow equivalent candidates is then; /// traversed, attempting to fuse pairs of candidates in the set. If all; /// requirements for fusion are met, the two candidates are fused, creating a; /// new (fused) candidate which is then added back into the set to consider for; /// a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:823,test,test,823,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['test'],['test']
Testability,"//===- LoopRotationUtils.h - Utilities to perform loop rotation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides utilities to convert a loop into a loop with bottom test.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:454,test,test,454,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,1,['test'],['test']
Testability,"//===- LowerTypeTests.cpp - type metadata lowering pass -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass lowers type metadata and calls to the llvm.type.test intrinsic.; // It also ensures that globals are properly laid out for the; // llvm.icall.branch.funnel intrinsic.; // See http://llvm.org/docs/TypeMetadata.html for more information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:441,test,test,441,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"//===- LowerTypeTests.h - type metadata lowering pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines parts of the type test lowering pass implementation that; // may be usefully unit tested.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:419,test,test,419,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,2,['test'],"['test', 'tested']"
Testability,"//===- MCDXContainerStreamer.h - MCDXContainerStreamer Interface ---*- C++ ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overrides MCObjectStreamer to disable all unnecessary features with stubs.; // The DXContainer format isn't a fully featured object format. It doesn't; // support symbols, and initially it will not support instruction data since it; // is used as a bitcode container for DXIL.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h:451,stub,stubs,451,interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDXContainerStreamer.h,1,['stub'],['stubs']
Testability,"//===- MCSPIRVStreamer.h - MCStreamer SPIR-V Object File Interface -*- C++ ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overrides MCObjectStreamer to disable all unnecessary features with stubs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h:451,stub,stubs,451,interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSPIRVStreamer.h,1,['stub'],['stubs']
Testability,"//===- MLRegAllocEvictAdvisor.cpp - ML eviction advisor -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Function declarations of utilities related to feature extraction for unit; // testing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h:461,test,testing,461,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h,1,['test'],['testing']
Testability,"//===- MachineCheckDebugify.cpp - Check debug info ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file This checks debug info after mir-debugify (+ pass-to-test). Currently; /// it simply checks the integrity of line info in DILocation and; /// DILocalVariable which mir-debugifiy generated before.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp:444,test,test,444,interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,1,['test'],['test']
Testability,"//===- MachineDebugify.cpp - Attach synthetic debug info to everything ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file This pass attaches synthetic debug info to everything. It can be used; /// to create targeted tests for debug info preservation, or test for CodeGen; /// differences with vs. without debug info.; ///; /// This isn't intended to have feature parity with Debugify.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp:485,test,tests,485,interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,2,['test'],"['test', 'tests']"
Testability,"//===- MachineStripDebug.cpp - Strip debug info ---------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file This removes debug info from everything. It can be used to ensure; /// tests can be debugified without affecting the output MIR.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStripDebug.cpp:462,test,tests,462,interpreter/llvm-project/llvm/lib/CodeGen/MachineStripDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStripDebug.cpp,1,['test'],['tests']
Testability,"//===- Markup.h -------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file declares the log symbolizer markup data model and parser.; ///; /// See https://llvm.org/docs/SymbolizerMarkupFormat.html; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h:419,log,log,419,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,1,['log'],['log']
Testability,"//===- NewPMDriver.cpp - Driver for llc using new PM ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file is just a split of the code that logically belongs in llc.cpp but; /// that includes the new pass manager headers.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/NewPMDriver.cpp:439,log,logically,439,interpreter/llvm-project/llvm/tools/llc/NewPMDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/NewPMDriver.cpp,1,['log'],['logically']
Testability,"//===- NewPMDriver.cpp - Driver for opt with new PM -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file is just a split of the code that logically belongs in opt.cpp but; /// that includes the new pass manager headers.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:439,log,logically,439,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,1,['log'],['logically']
Testability,"//===- NoInferenceModelRunner.cpp - noop ML model runner ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A pseudo model runner. We use it to store feature values when collecting; // logs for the default policy, in 'development' mode, but never ask it to; // 'run'.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/NoInferenceModelRunner.cpp:458,log,logs,458,interpreter/llvm-project/llvm/lib/Analysis/NoInferenceModelRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/NoInferenceModelRunner.cpp,1,['log'],['logs']
Testability,"//===- PPCBoolRetToInt.cpp ------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements converting i1 values to i32/i64 if they could be more; // profitably allocated as GPRs rather than CRs. This pass will become totally; // unnecessary if Register Bank Allocation and Global Instruction Selection ever; // go upstream.; //; // Presently, the pass converts i1 Constants, and Arguments to i32/i64 if the; // transitive closure of their uses includes only PHINodes, CallInsts, and; // ReturnInsts. The rational is that arguments are generally passed and returned; // in GPRs rather than CRs, so casting them to i32/i64 at the LLVM IR level will; // actually save casts at the Machine Instruction level.; //; // It might be useful to expand this pass to add bit-wise operations to the list; // of safe transitive closure types. Also, we miss some opportunities when LLVM; // represents logical AND and OR operations with control flow rather than data; // flow. For example by lowering the expression: return (A && B && C); //; // as: return A ? true : B && C.; //; // There's code in SimplifyCFG that code be used to turn control flow in data; // flow using SelectInsts. Selects are slow on some architectures (P7/P8), so; // this probably isn't good in general, but for the special case of i1, the; // Selects could be further lowered to bit operations that are fast everywhere.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp:1200,log,logical,1200,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp,1,['log'],['logical']
Testability,"//===- Parsing and selection of pass pipelines ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:592,test,testing,592,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['test'],['testing']
Testability,"//===- RISCVOptWInstrs.cpp - MI W instruction optimizations ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This pass does some optimizations for *W instructions at the MI level.; //; // First it removes unneeded sext.w instructions. Either because the sign; // extended bits aren't consumed or because the input was already sign extended; // by an earlier instruction.; //; // Then it removes the -w suffix from opw instructions whenever all users are; // dependent only on the lower word of the result of the instruction.; // The cases handled are:; // * addw because c.add has a larger register encoding than c.addw.; // * addiw because it helps reduce test differences between RV32 and RV64; // w/o being a pessimization.; // * mulw because c.mulw doesn't exist but c.mul does (w/ zcb); // * slliw because c.slliw doesn't exist and c.slli does; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:930,test,test,930,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['test'],['test']
Testability,"//===- RegAllocBase.h - basic regalloc interface and driver -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RegAllocBase class, which is the skeleton of a basic; // register allocation algorithm and interface for extending it. It provides the; // building blocks on which to construct other experimental allocators and test; // the validity of two principles:; //; // - If virtual and physical register liveness is modeled using intervals, then; // on-the-fly interference checking is cheap. Furthermore, interferences can be; // lazily cached and reused.; //; // - Register allocation complexity, and generated code performance is; // determined by the effectiveness of live range splitting rather than optimal; // coloring.; //; // Following the first principle, interfering checking revolves around the; // LiveIntervalUnion data structure.; //; // To fulfill the second principle, the basic allocator provides a driver for; // incremental splitting. It essentially punts on the problem of register; // coloring, instead driving the assignment of virtual to physical registers by; // the cost of splitting. The basic allocator allows for heuristic reassignment; // of registers, if a more sophisticated allocator chooses to do that.; //; // This framework provides a way to engineer the compile time vs. code; // quality trade-off without relying on a particular theoretical solver.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h:616,test,test,616,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h,1,['test'],['test']
Testability,"//===- ReplayInlineAdvisor.cpp - Replay InlineAdvisor ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements ReplayInlineAdvisor that replays inline decisions based; // on previous inline remarks from optimization remark log. This is a best; // effort approach useful for testing compiler/source changes while holding; // inlining steady.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ReplayInlineAdvisor.cpp:516,log,log,516,interpreter/llvm-project/llvm/lib/Analysis/ReplayInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ReplayInlineAdvisor.cpp,2,"['log', 'test']","['log', 'testing']"
Testability,"//===- SIInsertHardClauses.cpp - Insert Hard Clauses ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Insert s_clause instructions to form hard clauses.; ///; /// Clausing load instructions can give cache coherency benefits. Before gfx10,; /// the hardware automatically detected ""soft clauses"", which were sequences of; /// memory instructions of the same type. In gfx10 this detection was removed,; /// and the s_clause instruction was introduced to explicitly mark ""hard; /// clauses"".; ///; /// It's the scheduler's job to form the clauses by putting similar memory; /// instructions next to each other. Our job is just to insert an s_clause; /// instruction to mark the start of each clause.; ///; /// Note that hard clauses are very similar to, but logically distinct from, the; /// groups of instructions that have to be restartable when XNACK is enabled.; /// The rules are slightly different in each case. For example an s_nop; /// instruction breaks a restartable group, but can appear in the middle of a; /// hard clause. (Before gfx10 there wasn't a distinction, and both were called; /// ""soft clauses"" or just ""clauses"".); ///; /// The SIFormMemoryClauses pass and GCNHazardRecognizer deal with restartable; /// groups, not hard clauses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp:1048,log,logically,1048,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp,1,['log'],['logically']
Testability,"//===- SampleProfReader.cpp - Read LLVM sample profile data ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the class that reads LLVM sample profiles. It; // supports three file formats: text, binary and gcov.; //; // The textual representation is useful for debugging and testing purposes. The; // binary representation is more compact, resulting in smaller file sizes.; //; // The gcov encoding is the one generated by GCC's AutoFDO profile creation; // tool (https://github.com/google/autofdo); //; // All three encodings can be used interchangeably as an input sample profile.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:569,test,testing,569,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,1,['test'],['testing']
Testability,"//===- SampleProfWriter.cpp - Write LLVM sample profile data --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the class that writes LLVM sample profiles. It; // supports two file formats: text and binary. The textual representation; // is useful for debugging and testing purposes. The binary representation; // is more compact, resulting in smaller file sizes. However, they can; // both be used interchangeably.; //; // See lib/ProfileData/SampleProfReader.cpp for documentation on each of the; // supported formats.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:558,test,testing,558,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,1,['test'],['testing']
Testability,"//===- ScalarEvolutionAliasAnalysis.cpp - SCEV-based Alias Analysis -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScalarEvolutionAliasAnalysis pass, which implements a; // simple alias analysis implemented in terms of ScalarEvolution queries.; //; // This differs from traditional loop dependence analysis in that it tests; // for dependencies within a single iteration of a loop, rather than; // dependencies between different iterations.; //; // ScalarEvolution has a more complete understanding of pointer arithmetic; // than BasicAliasAnalysis' collection of ad-hoc analyses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp:608,test,tests,608,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,1,['test'],['tests']
Testability,"//===- StraightLineStrengthReduce.cpp - -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements straight-line strength reduction (SLSR). Unlike loop; // strength reduction, this algorithm is designed to reduce arithmetic; // redundancy in straight-line code instead of loops. It has proven to be; // effective in simplifying arithmetic statements derived from an unrolled loop.; // It can also simplify the logic of SeparateConstOffsetFromGEP.; //; // There are many optimizations we can perform in the domain of SLSR. This file; // for now contains only an initial step. Specifically, we look for strength; // reduction candidates in the following forms:; //; // Form 1: B + i * S; // Form 2: (B + i) * S; // Form 3: &B[i * S]; //; // where S is an integer variable, and i is a constant integer. If we found two; // candidates S1 and S2 in the same form and S1 dominates S2, we may rewrite S2; // in a simpler way with respect to S1. For example,; //; // S1: X = B + i * S; // S2: Y = B + i' * S => X + (i' - i) * S; //; // S1: X = (B + i) * S; // S2: Y = (B + i') * S => X + (i' - i) * S; //; // S1: X = &B[i * S]; // S2: Y = &B[i' * S] => &X[(i' - i) * S]; //; // Note: (i' - i) * S is folded to the extent possible.; //; // This rewriting is in general a good idea. The code patterns we focus on; // usually come from loop unrolling, so (i' - i) * S is likely the same; // across iterations and can be reused. When that happens, the optimized form; // takes only one add starting from the second iteration.; //; // When such rewriting is possible, we call S1 a ""basis"" of S2. When S2 has; // multiple bases, we choose to rewrite S2 with respect to its ""immediate""; // basis, the basis that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:715,log,logic,715,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['log'],['logic']
Testability,"//===- TapiFile.cpp -------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Text-based Dynamcic Library Stub format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiFile.cpp:433,Stub,Stub,433,interpreter/llvm-project/llvm/lib/Object/TapiFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiFile.cpp,1,['Stub'],['Stub']
Testability,"//===- TapiFile.h - Text-based Dynamic Library Stub -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the TapiFile interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h:47,Stub,Stub,47,interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiFile.h,1,['Stub'],['Stub']
Testability,"//===- TapiUniversal.cpp --------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Text-based Dynamic Library Stub format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiUniversal.cpp:432,Stub,Stub,432,interpreter/llvm-project/llvm/lib/Object/TapiUniversal.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiUniversal.cpp,1,['Stub'],['Stub']
Testability,"//===- TestPasses.cpp - ""buggy"" passes used to test bugpoint --------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains ""buggy"" passes that are used to test bugpoint, to check; // that it is narrowing down testcases correctly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp:7,Test,TestPasses,7,interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/TestPasses.cpp,4,"['Test', 'test']","['TestPasses', 'test', 'testcases']"
Testability,"//===- Testing/Support/SupportHelpers.h -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h:7,Test,Testing,7,interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h,1,['Test'],['Testing']
Testability,"//===- TestingSupport.cpp - Convert objects files into test files --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/TestingSupport.cpp:7,Test,TestingSupport,7,interpreter/llvm-project/llvm/tools/llvm-cov/TestingSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/TestingSupport.cpp,2,"['Test', 'test']","['TestingSupport', 'test']"
Testability,"//===- TextStub.cpp -------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements the text stub file reader/writer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp:403,stub,stub,403,interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp,1,['stub'],['stub']
Testability,"//===- TextStubCommon.cpp -------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements common Text Stub YAML mappings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubCommon.cpp:406,Stub,Stub,406,interpreter/llvm-project/llvm/lib/TextAPI/TextStubCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubCommon.cpp,1,['Stub'],['Stub']
Testability,"//===- TextStubCommon.h ---------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines common Text Stub YAML mappings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubCommon.h:403,Stub,Stub,403,interpreter/llvm-project/llvm/lib/TextAPI/TextStubCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubCommon.h,1,['Stub'],['Stub']
Testability,"//===- TextStubV5.cpp -----------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements Text Stub JSON mappings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubV5.cpp:399,Stub,Stub,399,interpreter/llvm-project/llvm/lib/TextAPI/TextStubV5.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubV5.cpp,1,['Stub'],['Stub']
Testability,"//===- ThreadSafetyLogical.cpp ---------------------------------*- C++ --*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a representation for logical expressions with SExpr leaves; // that are used as part of fact-checking capability expressions.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp:418,log,logical,418,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp,1,['log'],['logical']
Testability,"//===- ThreadSafetyLogical.h -----------------------------------*- C++ --*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a representation for logical expressions with SExpr leaves; // that are used as part of fact-checking capability expressions.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h:418,log,logical,418,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h,1,['log'],['logical']
Testability,"//===- Tooling.h - Framework for standalone Clang tools ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements functions to run clang tools standalone instead; // of running them as a plugin.; //; // A ClangTool is initialized with a CompilationDatabase and a set of files; // to run over. The tool will then run a user-specified FrontendAction over; // all TUs in which the given files are compiled.; //; // It is also possible to run a FrontendAction over a snippet of code by; // calling runToolOnCode, which is useful for unit testing.; //; // Applications that need more fine grained control over how to run; // multiple FrontendActions over code can use ToolInvocation.; //; // Example tools:; // - running clang -fsyntax-only over source code from an editor to get; // fast syntax checks; // - running match/replace tools over C++ code; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:824,test,testing,824,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,1,['test'],['testing']
Testability,"//===- Trace.cpp - XRay Trace Loading implementation. ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // XRay log reader implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp:388,log,log,388,interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,1,['log'],['log']
Testability,"//===- TrainingLogger.cpp - mlgo feature/reward logging -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements logging infrastructure for extracting features and; // rewards for mlgo policy training.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TrainingLogger.cpp:48,log,logging,48,interpreter/llvm-project/llvm/lib/Analysis/TrainingLogger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TrainingLogger.cpp,2,['log'],['logging']
Testability,"//===- TrainingLogger.h - mlgo feature/reward logging ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The design goals of the logger are:; // - no dependencies that llvm doesn't already have.; // - support streaming, so that we don't need to buffer data during compilation; // - 0-decoding tensor values. Tensor values are potentially very large buffers; // of scalars. Because of their potentially large size, avoiding; // serialization/deserialization overhead is preferred.; //; // The simple logger produces an output of the form (each line item on its line); // - header: a json object describing the data that will follow.; // - context: e.g. function name, for regalloc, or ""default"" for module-wide; // optimizations like the inliner. This is the context to which the subsequent; // data corresponds.; // - observation number.; // - tensor values - raw bytes of the tensors, in the order given in the header.; // The values are in succession, i.e. no separator is found between successive; // tensor values. At the end, there is a new line character.; // - [score] - this is optional, and is present if it was present in the header.; // Currently, for final rewards, we output ""0"" scores after each observation,; // except for the last one.; // <repeat>; // The file should be read as binary, but the reason we use newlines is mostly; // ease of debugging: the log can be opened in a text editor and, while tensor; // values are inscrutable, at least the sequence of data can be easily observed.; // Of course, the buffer of tensor values could contain '\n' bytes. A reader; // should use the header information to know how much data to read for the; // tensor values, and not use line information for that.; //; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h:46,log,logging,46,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,3,['log'],"['logger', 'logging']"
Testability,"//===- UnifyLoopExits.cpp - Redirect exiting edges to one block -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // For each natural loop with multiple exit blocks, this pass creates a new; // block N such that all exiting blocks now branch to N, and then control flow; // is redistributed to all the original exit blocks.; //; // Limitation: This assumes that all terminators in the CFG are direct branches; // (the ""br"" instruction). The presence of any other control flow; // such as indirectbr, switch or callbr will cause an assert.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/UnifyLoopExits.cpp:797,assert,assert,797,interpreter/llvm-project/llvm/lib/Transforms/Utils/UnifyLoopExits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/UnifyLoopExits.cpp,1,['assert'],['assert']
Testability,"//===- WholeProgramDevirt.h - Whole-program devirt pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines parts of the whole-program devirtualization pass; // implementation that may be usefully unit tested.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:495,test,tested,495,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,1,['test'],['tested']
Testability,"//===- XRayRecord.h - XRay Trace Record -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file replicates the record definition for XRay log entries. This should; // follow the evolution of the log record versions supported in the compiler-rt; // xray project.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h:435,log,log,435,interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,2,['log'],['log']
Testability,"//===- YAMLBench - Benchmark the YAMLParser implementation ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program executes the YAMLParser on differently sized YAML texts and; // outputs the run time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/yaml-bench/YAMLBench.cpp:19,Benchmark,Benchmark,19,interpreter/llvm-project/llvm/utils/yaml-bench/YAMLBench.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/yaml-bench/YAMLBench.cpp,1,['Benchmark'],['Benchmark']
Testability,"//===- YAMLXRayRecord.h - XRay Record YAML Support Definitions ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Types and traits specialisations for YAML I/O of XRay log entries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/YAMLXRayRecord.h:437,log,log,437,interpreter/llvm-project/llvm/include/llvm/XRay/YAMLXRayRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/YAMLXRayRecord.h,1,['log'],['log']
Testability,"//===- clang/Lex/DependencyDirectivesScanner.h ---------------------*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:648,log,logic,648,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,1,['log'],['logic']
Testability,"//===- lib/DebugInfo/Symbolize/Markup.cpp ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the log symbolizer markup data model and parser.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/Symbolize/Markup.cpp:415,log,log,415,interpreter/llvm-project/llvm/lib/DebugInfo/Symbolize/Markup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/Symbolize/Markup.cpp,1,['log'],['log']
Testability,"//===- llvm-cat.cpp - LLVM module concatenation utility -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is for testing features that rely on multi-module bitcode files.; // It takes a list of input modules and uses them to create a multi-module; // bitcode file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cat/llvm-cat.cpp:403,test,testing,403,interpreter/llvm-project/llvm/tools/llvm-cat/llvm-cat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cat/llvm-cat.cpp,1,['test'],['testing']
Testability,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:50,test,tester,50,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,2,['test'],"['tester', 'testing']"
Testability,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:418,test,test,418,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,2,['test'],['test']
Testability,"//===- llvm-stress.cpp - Generate random LL files to stress-test LLVM -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a utility that generates random .ll files to stress-test; // different components in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:60,test,test,60,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,2,['test'],['test']
Testability,"//===- llvm/ADT/EpochTracker.h - ADT epoch tracking --------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the DebugEpochBase and DebugEpochBase::HandleBase classes.; /// These can be used to write iterators that are fail-fast when LLVM is built; /// with asserts enabled.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:563,assert,asserts,563,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,1,['assert'],['asserts']
Testability,"//===- llvm/ADT/ScopeExit.h - Execute code at scope exit --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the make_scope_exit function, which executes user-defined; /// cleanup logic at scope exit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h:485,log,logic,485,interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h,1,['log'],['logic']
Testability,"//===- llvm/CodeGen/GCMetadataPrinter.h - Prints asm GC tables --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The abstract base class GCMetadataPrinter supports writing GC metadata tables; // as assembly code. This is a separate class from GCStrategy in order to allow; // users of the LLVM JIT to avoid linking with the AsmWriter.; //; // Subclasses of GCMetadataPrinter must be registered using the; // GCMetadataPrinterRegistry. This is separate from the GCStrategy itself; // because these subclasses are logically plugins for the AsmWriter.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadataPrinter.h:782,log,logically,782,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadataPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadataPrinter.h,1,['log'],['logically']
Testability,"//===- llvm/Support/Debug.h - Easy way to add debug output ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a handy way of adding debugging information to your; // code, without it being enabled all of the time, and without having to add; // command line options to enable it.; //; // In particular, just wrap your code with the LLVM_DEBUG() macro, and it will; // be enabled automatically if you specify '-debug' on the command-line.; // LLVM_DEBUG() requires the DEBUG_TYPE macro to be defined. Set it to ""foo""; // specify that your debug code belongs to class ""foo"". Be careful that you only; // do this after including Debug.h and not around any #include of headers.; // Headers should define and undef the macro acround the code that needs to use; // the LLVM_DEBUG() macro. Then, on the command line, you can specify; // '-debug-only=foo' to enable JUST the debug information for the foo class.; //; // When compiling without assertions, the -debug-* options and all code in; // LLVM_DEBUG() statements disappears, so it does not affect the runtime of the; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Debug.h:1228,assert,assertions,1228,interpreter/llvm-project/llvm/include/llvm/Support/Debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Debug.h,1,['assert'],['assertions']
Testability,"//===- llvm/Testing/ADT/StringMap.h ---------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:12,Test,Testing,12,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,1,['Test'],['Testing']
Testability,"//===- llvm/Testing/ADT/StringMapEntry.h ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:12,Test,Testing,12,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,1,['Test'],['Testing']
Testability,"//===- llvm/Testing/Support/Error.cpp -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/Error.cpp:12,Test,Testing,12,interpreter/llvm-project/llvm/lib/Testing/Support/Error.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/Error.cpp,1,['Test'],['Testing']
Testability,"//===- llvm/Testing/Support/Error.h ---------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:12,Test,Testing,12,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,1,['Test'],['Testing']
Testability,"//===- llvm/TextAPI/InterfaceFile.h - TAPI Interface File -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A generic and abstract interface representation for linkable objects. This; // could be an MachO executable, bundle, dylib, or text-based stub file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:521,stub,stub,521,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['stub'],['stub']
Testability,"//===- not.cpp - The 'not' testing tool -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Usage:; // not cmd; // Will return true if cmd doesn't crash and returns false.; // not --crash cmd; // Will return true if cmd crashes (e.g. for testing crash reporting).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:27,test,testing,27,interpreter/llvm-project/llvm/utils/not/not.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp,2,['test'],['testing']
Testability,"//===- yaml2obj - Convert YAML to a binary object file --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes a YAML description of an object file and outputs the; // binary equivalent.; //; // This is used for writing tests that require binary files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/yaml2obj/yaml2obj.cpp:511,test,tests,511,interpreter/llvm-project/llvm/tools/yaml2obj/yaml2obj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/yaml2obj/yaml2obj.cpp,1,['test'],['tests']
Testability,"//===-- APINotesTest.cpp - API Notes Testing Tool ------------------ C++ --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/APINotesTest.cpp:37,Test,Testing,37,interpreter/llvm-project/clang/tools/apinotes-test/APINotesTest.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/APINotesTest.cpp,1,['Test'],['Testing']
Testability,"//===-- Analysis.h ----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Analysis output for benchmark results.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.h:416,benchmark,benchmark,416,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.h,1,['benchmark'],['benchmark']
Testability,"//===-- BenchmarkCode.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkCode.h:8,Benchmark,BenchmarkCode,8,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkCode.h,1,['Benchmark'],['BenchmarkCode']
Testability,"//===-- BenchmarkResult.cpp -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp:8,Benchmark,BenchmarkResult,8,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp,1,['Benchmark'],['BenchmarkResult']
Testability,"//===-- BenchmarkResult.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines classes to represent measurements and serialize/deserialize them to; // Yaml.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:8,Benchmark,BenchmarkResult,8,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,1,['Benchmark'],['BenchmarkResult']
Testability,"//===-- BenchmarkRunner.cpp -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:8,Benchmark,BenchmarkRunner,8,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,1,['Benchmark'],['BenchmarkRunner']
Testability,"//===-- BenchmarkRunner.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the abstract BenchmarkRunner class for measuring a certain execution; /// property of instructions (e.g. latency).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:8,Benchmark,BenchmarkRunner,8,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,2,['Benchmark'],['BenchmarkRunner']
Testability,"//===-- Clustering.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Utilities to compute benchmark result clusters.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h:417,benchmark,benchmark,417,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h,1,['benchmark'],['benchmark']
Testability,"//===-- Debug.cpp - An easy way to add debug output to your code ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a handy way of adding debugging information to your; // code, without it being enabled all of the time, and without having to add; // command line options to enable it.; //; // In particular, just wrap your code with the LLVM_DEBUG() macro, and it will; // be enabled automatically if you specify '-debug' on the command-line.; // Alternatively, you can also use the SET_DEBUG_TYPE(""foo"") macro to specify; // that your debug code belongs to class ""foo"". Then, on the command line, you; // can specify '-debug-only=foo' to enable JUST the debug information for the; // foo class.; //; // When compiling without assertions, the -debug-* options and all code in; // LLVM_DEBUG() statements disappears, so it does not affect the runtime of the; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:1015,assert,assertions,1015,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp,1,['assert'],['assertions']
Testability,"//===-- DependenceAnalysis.cpp - DA Implementation --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an (incomplete) implementation of the approach; // described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // Currently, the implementation cannot propagate constraints between; // coupled RDIV subscripts and lacks a multi-subscript MIV test.; // Both of these are conservative weaknesses;; // that is, not a source of correctness problems.; //; // Since Clang linearizes some array subscripts, the dependence; // analysis is using SCEV->delinearize to recover the representation of multiple; // subscripts, and thus avoid the more expensive and less precise MIV tests. The; // delinearization is controlled by the flag -da-delinearize.; //; // We should pay some careful attention to the possibility of integer overflow; // in the implementation of the various tests. This could happen with Add,; // Subtract, or Multiply, with both APInt's and SCEV's.; //; // Some non-linear subscript pairs can be handled by the GCD test; // (and perhaps other tests).; // Should explore how often these things occur.; //; // Finally, it seems like certain test cases expose weaknesses in the SCEV; // simplification, especially in the handling of sign and zero extensions.; // It could be useful to spend time exploring these.; //; // Please note ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:583,Test,Testing,583,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['Test', 'test']","['Testing', 'test']"
Testability,"//===-- DiffLog.h - Difference Log Builder and accessories ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the interface to the LLVM difference log builder.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.cpp:31,Log,Log,31,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.cpp,4,"['Log', 'log']","['Log', 'log']"
Testability,"//===-- DirectXFrameLowering.h - Frame lowering for DirectX --*- C++ ---*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class implements DirectX-specific bits of TargetFrameLowering class.; // This is just a stub because the current DXIL backend does not actually lower; // through the MC layer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXFrameLowering.h:476,stub,stub,476,interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXFrameLowering.h,1,['stub'],['stub']
Testability,"//===-- DummyDemanglerFuzzer.cpp - Entry point to sanity check the fuzzer -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dlang-demangle-fuzzer/DummyDemanglerFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-dlang-demangle-fuzzer/DummyDemanglerFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dlang-demangle-fuzzer/DummyDemanglerFuzzer.cpp,3,['test'],['test']
Testability,"//===-- DummyISelFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp,1,['test'],['test']
Testability,"//===-- ExceptionDemo.cpp - An example using llvm Exceptions --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated e",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:477,test,test,477,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,4,['test'],['test']
Testability,"//===-- FileCheckImpl.h - Private FileCheck Interface ------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the private interfaces of FileCheck. Its purpose is to; // allow unit testing of FileCheck and to separate the interface from the; // implementation. It is only meant to be used by FileCheck.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:471,test,testing,471,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['test'],['testing']
Testability,"//===-- FuzzerCLI.h - Common logic for CLIs of fuzzers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Common logic needed to implement LLVM's fuzz targets' CLIs - including LLVM; // concepts like cl::opt and libFuzzer concepts like -ignore_remaining_args=1.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h:29,log,logic,29,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,2,['log'],['logic']
Testability,"//===-- HTMLLogger.cpp ----------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the HTML logger. Given a directory dir/, we write; // dir/0.html for the first analysis, etc.; // These files contain a visualization that allows inspecting the CFG and the; // state of the analysis at each point.; // Static assets (HTMLLogger.js, HTMLLogger.css) and SVG graphs etc are embedded; // so each output file is self-contained.; //; // VIEWS; //; // The timeline and function view are always shown. These allow selecting basic; // blocks, statements within them, and processing iterations (BBs are visited; // multiple times when e.g. loops are involved).; // These are written directly into the HTML body.; //; // There are also listings of particular basic blocks, and dumps of the state; // at particular analysis points (i.e. BB2 iteration 3 statement 2).; // These are only shown when the relevant BB/analysis point is *selected*.; //; // DATA AND TEMPLATES; //; // The HTML proper is mostly static.; // The analysis data is in a JSON object HTMLLoggerData which is embedded as; // a <script> in the <head>.; // This gets rendered into DOM by a simple template processor which substitutes; // the data into <template> tags embedded in the HTML. (see inflate() in JS).; //; // SELECTION; //; // This is the only real interactive mechanism.; //; // At any given time, there are several named selections, e.g.:; // bb: B2 (basic block 0 is selected); // elt: B2.4 (statement 4 is selected); // iter: B2:1 (iteration 1 of the basic block is selected); // hover: B3 (hovering over basic block 3); //; // The selection is updated by mouse events: hover by moving the mouse and; // others",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp:413,log,logger,413,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp,1,['log'],['logger']
Testability,"//===-- IntelJITEventsWrapper.h - Intel JIT Events API Wrapper --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper for the Intel JIT Events API. It allows for the; // implementation of the jitprofiling library to be swapped with an alternative; // implementation (for testing). To include this file, you must have the; // jitprofiling.h header available; it is available in Intel(R) VTune(TM); // Amplifier XE 2011.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventsWrapper.h:564,test,testing,564,interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventsWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventsWrapper.h,1,['test'],['testing']
Testability,"//===-- LVCompare.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LVCompare class, which is used to describe a logical; // view comparison.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:450,log,logical,450,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,1,['log'],['logical']
Testability,"//===-- LatencyBenchmarkRunner.h --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A BenchmarkRunner implementation to measure instruction latencies.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h:398,Benchmark,BenchmarkRunner,398,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h,1,['Benchmark'],['BenchmarkRunner']
Testability,"//===-- Logger.cpp --------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Logger.cpp:8,Log,Logger,8,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Logger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Logger.cpp,1,['Log'],['Logger']
Testability,"//===-- Logger.h ------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:8,Log,Logger,8,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['Log'],['Logger']
Testability,"//===-- M68kMemOperandPrinter.h - Memory operands printing ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains memory operand printing logics shared between AsmPrinter; // and MCInstPrinter.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMemOperandPrinter.h:439,log,logics,439,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMemOperandPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMemOperandPrinter.h,1,['log'],['logics']
Testability,"//===-- MipsNaClELFStreamer.cpp - ELF Object Output for Mips NaCl ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements MCELFStreamer for Mips NaCl. It emits .o object files; // as required by NaCl's SFI sandbox. It inserts address-masking instructions; // before dangerous control-flow and memory access instructions. It inserts; // address-masking instructions after instructions that change the stack; // pointer. It ensures that the mask and the dangerous instruction are always; // emitted in the same bundle. It aligns call + branch delay to the bundle end,; // so that return address is always aligned to the start of next bundle.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:488,sandbox,sandbox,488,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandbox']
Testability,"//===-- NullabilityChecker.cpp - Nullability checker ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker tries to find nullability violations. There are several kinds of; // possible violations:; // * Null pointer is passed to a pointer which has a _Nonnull type.; // * Null pointer is returned from a function which has a _Nonnull return type.; // * Nullable pointer is passed to a pointer which has a _Nonnull type.; // * Nullable pointer is returned from a function which has a _Nonnull return; // type.; // * Nullable pointer is dereferenced.; //; // This checker propagates the nullability information of the pointers and looks; // for the patterns that are described above. Explicit casts are trusted and are; // considered a way to suppress false positives for this checker. The other way; // to suppress warnings would be to add asserts or guarding if statements to the; // code. In addition to the nullability propagation this checker also uses some; // heuristics to suppress potential false positives.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:1128,assert,asserts,1128,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['assert'],['asserts']
Testability,"//===-- RuntimeDyldCheckerImpl.h -- RuntimeDyld test framework --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCheckerImpl.h:48,test,test,48,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCheckerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCheckerImpl.h,1,['test'],['test']
Testability,"//===-- SystemZTDC.cpp - Utilize Test Data Class instruction --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass looks for instructions that can be replaced by a Test Data Class; // instruction, and replaces them when profitable.; //; // Roughly, the following rules are recognized:; //; // 1: fcmp pred X, 0 -> tdc X, mask; // 2: fcmp pred X, +-inf -> tdc X, mask; // 3: fcmp pred X, +-minnorm -> tdc X, mask; // 4: tdc (fabs X), mask -> tdc X, newmask; // 5: icmp slt (bitcast float X to int), 0 -> tdc X, mask [ie. signbit]; // 6: icmp sgt (bitcast float X to int), -1 -> tdc X, mask; // 7: icmp ne/eq (call @llvm.s390.tdc.*(X, mask)) -> tdc X, mask/~mask; // 8: and i1 (tdc X, M1), (tdc X, M2) -> tdc X, (M1 & M2); // 9: or i1 (tdc X, M1), (tdc X, M2) -> tdc X, (M1 | M2); // 10: xor i1 (tdc X, M1), (tdc X, M2) -> tdc X, (M1 ^ M2); //; // The pass works in 4 steps:; //; // 1. All fcmp and icmp instructions in a function are checked for a match; // with rules 1-3 and 5-7. Their TDC equivalents are stored in; // the ConvertedInsts mapping. If the operand of a fcmp instruction is; // a fabs, it's also folded according to rule 4.; // 2. All and/or/xor i1 instructions whose both operands have been already; // mapped are mapped according to rules 8-10. LogicOpsWorklist is used; // as a queue of instructions to check.; // 3. All mapped instructions that are considered worthy of conversion (ie.; // replacing them will actually simplify the final code) are replaced; // with a call to the s390.tdc intrinsic.; // 4. All intermediate results of replaced instructions are removed if unused.; //; // Instructions that match rules 1-3 are considered unworthy of conversion; // on their own (since a comparison instruc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp:33,Test,Test,33,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,2,['Test'],['Test']
Testability,"//===-- TapiUniversal.h - Text-based Dynamic Library Stub -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the TapiUniversal interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h:53,Stub,Stub,53,interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/TapiUniversal.h,1,['Stub'],['Stub']
Testability,"//===-- TestModuleFileExtension.cpp - Module Extension Tester -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.cpp:8,Test,TestModuleFileExtension,8,interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.cpp,2,['Test'],"['TestModuleFileExtension', 'Tester']"
Testability,"//===-- TestModuleFileExtension.h - Module Extension Tester -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h:8,Test,TestModuleFileExtension,8,interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h,2,['Test'],"['TestModuleFileExtension', 'Tester']"
Testability,"//===-- TestRunner.cpp ----------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp:8,Test,TestRunner,8,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,1,['Test'],['TestRunner']
Testability,"//===-- ThreadSanitizer.cpp - race detector -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of ThreadSanitizer, a race detector.; //; // The tool is under development, for the details about previous versions see; // http://code.google.com/p/data-race-test; //; // The instrumentation phase is quite simple:; // - Insert calls to run-time library before every memory access.; // - Optimizations may apply to avoid instrumenting some of the accesses.; // - Insert calls at function entry/exit.; // The rest is handled by the run-time library.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:562,test,test,562,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,1,['test'],['test']
Testability,"//===-- UopsBenchmarkRunner.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A BenchmarkRunner implementation to measure uop decomposition.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/UopsBenchmarkRunner.h:398,Benchmark,BenchmarkRunner,398,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/UopsBenchmarkRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/UopsBenchmarkRunner.h,1,['Benchmark'],['BenchmarkRunner']
Testability,"//===-- Verifier.cpp - Implement the Module Verifier -----------------------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function verifier interface, that can be used for some; // basic correctness checking of input to the system.; //; // Note that this does not provide full `Java style' security and verifications,; // instead it just tries to ensure that code is well-formed.; //; // * Both of a binary operator's parameters are of the same type; // * Verify that the indices of mem access instructions match other operands; // * Verify that arithmetic and other things are only performed on first-class; // types. Verify that shifts & logicals only happen on integrals f.e.; // * All of the constants in a switch statement are of the correct type; // * The code is in valid SSA form; // * It should be illegal to put a label into any other type (like a structure); // or to return one. [except constant arrays!]; // * Only phi nodes can be self referential: 'add i32 %0, %0 ; <int>:0' is bad; // * PHI nodes must have an entry for each predecessor, with no extras.; // * PHI nodes must be the first thing in a basic block, all grouped together; // * All basic blocks should only end with terminator insts, not contain them; // * The entry node to a function must not have predecessors; // * All Instructions must be embedded into a basic block; // * Functions cannot take a void-typed parameter; // * Verify that a function's argument list agrees with it's declared type.; // * It is illegal to specify a name for a void value.; // * It is illegal to have a internal global value with no initializer; // * It is illegal to have a ret instruction that returns a value that does not; // agree with the function retu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:923,log,logicals,923,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['log'],['logicals']
Testability,"//===-- Wrapper for C standard assert.h declarations on the GPU ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/llvm_libc_wrappers/assert.h:31,assert,assert,31,interpreter/llvm-project/clang/lib/Headers/llvm_libc_wrappers/assert.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/llvm_libc_wrappers/assert.h,1,['assert'],['assert']
Testability,"//===-- X86Counter.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Perf counter that reads the LBRs for measuring the benchmarked block's; /// throughput.; ///; /// More info at: https://lwn.net/Articles/680985; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h:447,benchmark,benchmarked,447,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h,1,['benchmark'],['benchmarked']
Testability,"//===-- X86ShuffleDecode.cpp - X86 shuffle decode logic -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Define several functions to decode x86 specific shuffle semantics into a; // generic vector mask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp:50,log,logic,50,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp,1,['log'],['logic']
Testability,"//===-- X86ShuffleDecode.h - X86 shuffle decode logic -----------*-C++-*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Define several functions to decode x86 specific shuffle semantics into a; // generic vector mask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h:48,log,logic,48,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h,1,['log'],['logic']
Testability,"//===-- arcmt-test.cpp - ARC Migration Tool testbed -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/arcmt-test.cpp:14,test,test,14,interpreter/llvm-project/clang/tools/arcmt-test/arcmt-test.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/arcmt-test.cpp,2,['test'],"['test', 'testbed']"
Testability,"//===-- cc1_main.cpp - Clang CC1 Compiler Frontend ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is the entry point to the clang -cc1 functionality, which implements the; // core compiler functionality along with a number of additional tools for; // demonstration and testing purposes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1_main.cpp:559,test,testing,559,interpreter/llvm-project/clang/tools/driver/cc1_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1_main.cpp,1,['test'],['testing']
Testability,"//===-- clang-import-test.cpp - ASTImporter/ExternalASTSource testbed -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp:21,test,test,21,interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp,2,['test'],"['test', 'testbed']"
Testability,"//===-- core_main.cpp - Core Index Tool testbed ---------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/core_main.cpp:40,test,testbed,40,interpreter/llvm-project/clang/tools/c-index-test/core_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/core_main.cpp,1,['test'],['testbed']
Testability,"//===-- diagnostic.cpp - tool for testing libLLVM and llvm-c API ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the --test-diagnostic-handler command in llvm-c-test.; //; // This command uses the C API to read a module with a custom diagnostic; // handler set to test the diagnostic handler functionality.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/diagnostic.c:34,test,testing,34,interpreter/llvm-project/llvm/tools/llvm-c-test/diagnostic.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/diagnostic.c,4,['test'],"['test', 'test-diagnostic-handler', 'testing']"
Testability,"//===-- echo.cpp - tool for testing libLLVM and llvm-c API ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the --echo command in llvm-c-test.; //; // This command uses the C API to read a module and output an exact copy of it; // as output. It is used to check that the resulting module matches the input; // to validate that the C API can read and write modules properly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp:28,test,testing,28,interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp,2,['test'],"['test', 'testing']"
Testability,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:409,test,test,409,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,3,"['assert', 'test']","['assertion', 'test']"
Testability,"//===-- llvm-debuginfo-analyzer.cpp - LLVM Debug info analysis utility ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a utility that displays the logical view for the debug; // information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/llvm-debuginfo-analyzer.cpp:426,log,logical,426,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/llvm-debuginfo-analyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/llvm-debuginfo-analyzer.cpp,1,['log'],['logical']
Testability,"//===-- llvm-jitlistener.cpp - Utility for testing MCJIT event listener ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a used by lit tests to verify the MCJIT JITEventListener; // interface. It registers a mock JIT event listener, generates a module from; // an input IR file and dumps the reported event information to stdout.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:43,test,testing,43,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,3,"['mock', 'test']","['mock', 'testing', 'tests']"
Testability,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:19,test,test,19,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,1,['test'],['test']
Testability,"//===-- llvm-modextract.cpp - LLVM module extractor utility ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is for testing features that rely on multi-module bitcode files.; // It takes a multi-module bitcode file, extracts one of the modules and writes; // it to the output file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-modextract/llvm-modextract.cpp:403,test,testing,403,interpreter/llvm-project/llvm/tools/llvm-modextract/llvm-modextract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-modextract/llvm-modextract.cpp,1,['test'],['testing']
Testability,"//===-- llvm-rtdyld.cpp - MCJIT Testing Tool ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a testing tool for use with the MC-JIT LLVM components.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:32,Test,Testing,32,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,2,"['Test', 'test']","['Testing', 'testing']"
Testability,"//===-- llvm-split: command line tool for testing module splitter ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program can be used to test the llvm::SplitModule function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp:42,test,testing,42,interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp,2,['test'],"['test', 'testing']"
Testability,"//===-- llvm/ADT/Bitfield.h - Get and Set bits in an integer ---*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements methods to test, set and extract typed bits from packed; /// unsigned integers.; ///; /// Why not C++ bitfields?; /// ----------------------; /// C++ bitfields do not offer control over the bit layout nor consistent; /// behavior when it comes to out of range values.; /// For instance, the layout is implementation defined and adjacent bits may be; /// packed together but are not required to. This is problematic when storage is; /// sparse and data must be stored in a particular integer type.; ///; /// The methods provided in this file ensure precise control over the; /// layout/storage as well as protection against out of range values.; ///; /// Usage example; /// -------------; /// \code{.cpp}; /// uint8_t Storage = 0;; ///; /// // Store and retrieve a single bit as bool.; /// using Bool = Bitfield::Element<bool, 0, 1>;; /// Bitfield::set<Bool>(Storage, true);; /// EXPECT_EQ(Storage, 0b00000001);; /// // ^; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; ///; /// // Store and retrieve a 2 bit typed enum.; /// // Note: enum underlying type must be unsigned.; /// enum class SuitEnum : uint8_t { CLUBS, DIAMONDS, HEARTS, SPADES };; /// // Note: enum maximum value needs to be passed in as last parameter.; /// using Suit = Bitfield::Element<SuitEnum, 1, 2, SuitEnum::SPADES>;; /// Bitfield::set<Suit>(Storage, SuitEnum::HEARTS);; /// EXPECT_EQ(Storage, 0b00000101);; /// // ^^; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::HEARTS);; ///; /// // Store and retrieve a 5 bit value as unsigned.; /// using Value = Bitfield::Element<unsigned, 3, 5>;; /// Bitfie",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:428,test,test,428,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,1,['test'],['test']
Testability,"//===-- llvm/Analysis/DependenceAnalysis.h -------------------- -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an implementation of the approach described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // This pass exists to support the DependenceGraph pass. There are two separate; // passes because there's a useful separation of concerns. A dependence exists; // if two conditions are met:; //; // 1) Two instructions reference the same memory location, and; // 2) There is a flow of control leading from one instruction to the other.; //; // DependenceAnalysis attacks the first condition; DependenceGraph will attack; // the second (it's not yet ready).; //; // Please note that this is work in progress and the interface is subject to; // change.; //; // Plausible changes:; // Return a set of more precise dependences instead of just one dependence; // summarizing all.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:566,Test,Testing,566,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['Test'],['Testing']
Testability,"//===-- tools/llvm-reduce/TestRunner.h ---------------------------*- C++ -*-===/; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:26,Test,TestRunner,26,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,1,['Test'],['TestRunner']
Testability,"//===--- ASTNodeTraverser.h - Traversal of AST nodes ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the AST traversal facilities. Other users; // of this class may make use of the same traversal logic by inheriting it,; // similar to RecursiveASTVisitor.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h:499,log,logic,499,interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h,1,['log'],['logic']
Testability,"//===--- Annotations.cpp - Annotated source code for unit tests --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Annotations/Annotations.cpp:58,test,tests,58,interpreter/llvm-project/llvm/lib/Testing/Annotations/Annotations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Annotations/Annotations.cpp,1,['test'],['tests']
Testability,"//===--- Annotations.h - Annotated source code for tests ---------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:51,test,tests,51,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,1,['test'],['tests']
Testability,"//===--- BreakableToken.h - Format C++ code ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Declares BreakableToken, BreakableStringLiteral, BreakableComment,; /// BreakableBlockComment and BreakableLineCommentSection classes, that contain; /// token type-specific logic to break long lines in tokens and reflow content; /// between tokens.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.h:569,log,logic,569,interpreter/llvm-project/clang/lib/Format/BreakableToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.h,1,['log'],['logic']
Testability,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:589,test,test,589,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,2,['test'],['test']
Testability,"//===--- DemangleConfig.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a variety of feature test macros copied from; // include/llvm/Support/Compiler.h so that LLVMDemangle does not need to take; // a dependency on LLVMSupport.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h:423,test,test,423,interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,1,['test'],['test']
Testability,"//===--- DummyDemanglerMain.cpp - Entry point to sanity check the fuzzer --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp,1,['test'],['test']
Testability,"//===--- DummyOptFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp,1,['test'],['test']
Testability,"//===--- DummySpecialCaseListFuzzer.cpp -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp,1,['test'],['test']
Testability,"//===--- DummyYAMLNumericParserFuzzer.cpp ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-numeric-parser-fuzzer/DummyYAMLNumericParserFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-yaml-numeric-parser-fuzzer/DummyYAMLNumericParserFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-numeric-parser-fuzzer/DummyYAMLNumericParserFuzzer.cpp,1,['test'],['test']
Testability,"//===--- DummyYAMLParserFuzzer.cpp ----------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-parser-fuzzer/DummyYAMLParserFuzzer.cpp:426,test,test,426,interpreter/llvm-project/llvm/tools/llvm-yaml-parser-fuzzer/DummyYAMLParserFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-parser-fuzzer/DummyYAMLParserFuzzer.cpp,1,['test'],['test']
Testability,"//===--- EPCIndirectionUtils.h - EPC based indirection utils ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Indirection utilities (stubs, trampolines, lazy call-throughs) that use the; // ExecutorProcessControl API to interact with the executor process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:406,stub,stubs,406,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,1,['stub'],['stubs']
Testability,"//===--- LLJITWithLazyReexports.cpp - LLJIT example with custom laziness --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use the lazy re-exports utility to lazily compile; // IR modules. We will do this in seven steps:; //; // 1. Create an LLJIT instance.; // 2. Install a transform so that we can see what is being compiled.; // 3. Create an indirect stubs manager and lazy call-through manager.; // 4. Add two modules that will be conditionally compiled, plus a main module.; // 5. Add lazy-rexports of the symbols in the conditionally compiled modules.; // 6. Dump the ExecutionSession state to see the symbol table prior to; // executing any code.; // 7. Verify that only modules containing executed code are compiled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:638,stub,stubs,638,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,1,['stub'],['stubs']
Testability,"//===--- LLJITWithRemoteDebugging.cpp - LLJIT targeting a child process ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This example shows how to use LLJIT and JITLink for out-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:704,test,test,704,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,1,['test'],['test']
Testability,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:990,test,test,990,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,6,['test'],['test']
Testability,"//===--- LogDiagnosticPrinter.cpp - Log Diagnostic Printer ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/LogDiagnosticPrinter.cpp:9,Log,LogDiagnosticPrinter,9,interpreter/llvm-project/clang/lib/Frontend/LogDiagnosticPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/LogDiagnosticPrinter.cpp,2,['Log'],"['Log', 'LogDiagnosticPrinter']"
Testability,"//===--- LogDiagnosticPrinter.h - Log Diagnostic Client ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:9,Log,LogDiagnosticPrinter,9,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,2,['Log'],"['Log', 'LogDiagnosticPrinter']"
Testability,"//===--- PPExpressions.cpp - Preprocessor Expression Evaluation -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Preprocessor::EvaluateDirectiveExpression method,; // which parses and evaluates integer constant expressions for #if directives.; //; //===----------------------------------------------------------------------===//; //; // FIXME: implement testing for #assert's.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:649,test,testing,649,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,2,"['assert', 'test']","['assert', 'testing']"
Testability,"//===--- ParseHLSL.cpp - HLSL-specific parsing support --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the parsing logic for HLSL language features.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseHLSL.cpp:416,log,logic,416,interpreter/llvm-project/clang/lib/Parse/ParseHLSL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseHLSL.cpp,1,['log'],['logic']
Testability,"//===--- ParseOpenACC.cpp - OpenACC-specific parsing support --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the parsing logic for OpenACC language features.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:416,log,logic,416,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,1,['log'],['logic']
Testability,"//===--- RewriteTest.cpp - Rewriter playground ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a testbed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteTest.cpp:393,test,testbed,393,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteTest.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteTest.cpp,1,['test'],['testbed']
Testability,"//===--- RuntimeDyldChecker.cpp - RuntimeDyld tester framework --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp:46,test,tester,46,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp,1,['test'],['tester']
Testability,"//===--- SemaExceptionSpec.cpp - C++ Exception Specifications ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides Sema routines for C++ exception specification testing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp:448,test,testing,448,interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,1,['test'],['testing']
Testability,"//===--- TestAST.cpp ------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/TestAST.cpp:9,Test,TestAST,9,interpreter/llvm-project/clang/lib/Testing/TestAST.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/TestAST.cpp,1,['Test'],['TestAST']
Testability,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:9,Test,TestAST,9,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,5,"['Test', 'assert', 'test']","['TestAST', 'assertions', 'testing', 'tests']"
Testability,"//===--- TestClangConfig.h ------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h:9,Test,TestClangConfig,9,interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h,1,['Test'],['TestClangConfig']
Testability,"//===--- TestSupport.cpp - Clang-based refactoring tool -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements routines that provide refactoring testing; /// utilities.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp:9,Test,TestSupport,9,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,2,"['Test', 'test']","['TestSupport', 'testing']"
Testability,"//===--- TestSupport.h - Clang-based refactoring tool -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Declares datatypes and routines that are used by test-specific code; /// in clang-refactor.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h:9,Test,TestSupport,9,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,2,"['Test', 'test']","['TestSupport', 'test-specific']"
Testability,"//===---- Delinearization.cpp - MultiDimensional Index Delinearization ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements an analysis pass that tries to delinearize all GEP; // instructions in all loops using the SCEV analysis functionality. This pass is; // only used for testing purposes: if your pass needs delinearization, please; // use the on-demand SCEVAddRecExpr::delinearize() function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:550,test,testing,550,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,1,['test'],['testing']
Testability,"//===---- Delinearization.h - MultiDimensional Index Delinearization ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements an analysis pass that tries to delinearize all GEP; // instructions in all loops using the SCEV analysis functionality. This pass is; // only used for testing purposes: if your pass needs delinearization, please; // use the on-demand SCEVAddRecExpr::delinearize() function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h:550,test,testing,550,interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,1,['test'],['testing']
Testability,"//===---- PPCReduceCRLogicals.cpp - Reduce CR Bit Logical operations ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This pass aims to reduce the number of logical operations on bits in the CR; // register. These instructions have a fairly high latency and only a single; // pipeline at their disposal in modern PPC cores. Furthermore, they have a; // tendency to occur in fairly small blocks where there's little opportunity; // to hide the latency between the CR logical operation and its user.; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:50,Log,Logical,50,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,3,"['Log', 'log']","['Logical', 'logical']"
Testability,"//===---- RuntimeDyldChecker.h - RuntimeDyld tester framework -----*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:45,test,tester,45,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,1,['test'],['tester']
Testability,"//===----- UninitializedObject.h ---------------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines helper classes for UninitializedObjectChecker and; // documentation about the logic of it.; //; // The checker reports uninitialized fields in objects created after a; // constructor call.; //; // This checker has several options:; // - ""Pedantic"" (boolean). If its not set or is set to false, the checker; // won't emit warnings for objects that don't have at least one initialized; // field. This may be set with; //; // `-analyzer-config optin.cplusplus.UninitializedObject:Pedantic=true`.; //; // - ""NotesAsWarnings"" (boolean). If set to true, the checker will emit a; // warning for each uninitialized field, as opposed to emitting one warning; // per constructor call, and listing the uninitialized fields that belongs; // to it in notes. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:NotesAsWarnings=true`.; //; // - ""CheckPointeeInitialization"" (boolean). If set to false, the checker will; // not analyze the pointee of pointer/reference fields, and will only check; // whether the object itself is initialized. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:CheckPointeeInitialization=true`.; //; // TODO: With some clever heuristics, some pointers should be dereferenced; // by default. For example, if the pointee is constructed within the; // constructor call, it's reasonable to say that no external object; // references it, and we wouldn't generate multiple report on the same; // pointee.; //; // - ""IgnoreRecordsWithField"" (string). If supplied, the checker will not; // analyze structures that have a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:479,log,logic,479,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,1,['log'],['logic']
Testability,"//===----- UninitializedObjectChecker.cpp ------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a checker that reports uninitialized fields in objects; // created after a constructor call.; //; // To read about command line options and how the checker works, refer to the; // top of the file and inline comments in UninitializedObject.h.; //; // Some of the logic is implemented in UninitializedPointee.cpp, to reduce the; // complexity of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp:663,log,logic,663,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,1,['log'],['logic']
Testability,"//===--------- AVRMCELFStreamer.cpp - AVR subclass of MCELFStreamer -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a stub that parses a MCInst bundle and passes the; // instructions on to the real streamer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCELFStreamer.cpp:398,stub,stub,398,interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRMCELFStreamer.cpp,1,['stub'],['stub']
Testability,"//===-------------- PPCMIPeephole.cpp - MI Peephole Cleanups -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This pass performs peephole optimizations to clean up ugly code; // sequences at the MachineInstruction layer. It runs at the end of; // the SSA phases, following VSX swap removal. A pass of dead code; // elimination follows this one for quick clean-up of any dead; // instructions introduced here. Although we could do this as callbacks; // from the generic peephole pass, this would have a couple of bad; // effects: it might remove optimization opportunities for VSX swap; // removal, and it would miss cleanups made possible following VSX; // swap removal.; //; // NOTE: We run the verifier after this pass in Asserts/Debug builds so it; // is important to keep the code valid after transformations.; // Common causes of errors stem from violating the contract specified; // by kill flags. Whenever a transformation changes the live range of; // a register, that register should be added to the work list using; // addRegToUpdate(RegsToUpdate, <Reg>). Furthermore, if a transformation; // is changing the definition of a register (i.e. removing the single; // definition of the original vreg), it needs to provide a dummy; // definition of that register using addDummyDef(<MBB>, <Reg>).; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:995,Assert,Asserts,995,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,1,['Assert'],['Asserts']
Testability,"//===----------------- LoopRotationUtils.cpp -----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides utilities to convert a loop into a loop with bottom test.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:453,test,test,453,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['test'],['test']
Testability,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:482,log,logic,482,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,2,"['Log', 'log']","['Logic', 'logic']"
Testability,"//===---------------------- RetireStage.cpp ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the retire stage of an instruction pipeline.; /// The RetireStage represents the process logic that interacts with the; /// simulated RetireControlUnit hardware.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp:503,log,logic,503,interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,1,['log'],['logic']
Testability,"//===---------------------- RetireStage.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the retire stage of a default instruction pipeline.; /// The RetireStage represents the process logic that interacts with the; /// simulated RetireControlUnit hardware.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h:510,log,logic,510,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/RetireStage.h,1,['log'],['logic']
Testability,"//===----------------------- MIRNamer.cpp - MIR Namer ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The purpose of this pass is to rename virtual register operands with the goal; // of making it easier to author easier to read tests for MIR. This pass reuses; // the vreg renamer used by MIRCanonicalizerPass.; //; // Basic Usage:; //; // llc -o - -run-pass mir-namer example.mir; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRNamerPass.cpp:510,test,tests,510,interpreter/llvm-project/llvm/lib/CodeGen/MIRNamerPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRNamerPass.cpp,1,['test'],['tests']
Testability,"//===----------------------------------------------------------------------===//; // AArch64 Inline Assembly Support; //===----------------------------------------------------------------------===//; // Table of Constraints; // TODO: This is the current set of constraints supported by ARM for the; // compiler, not all of them may make sense.; //; // r - A general register; // w - An FP/SIMD register of some size in the range v0-v31; // x - An FP/SIMD register of some size in the range v0-v15; // I - Constant that can be used with an ADD instruction; // J - Constant that can be used with a SUB instruction; // K - Constant that can be used with a 32-bit logical instruction; // L - Constant that can be used with a 64-bit logical instruction; // M - Constant that can be used as a 32-bit MOV immediate; // N - Constant that can be used as a 64-bit MOV immediate; // Q - A memory reference with base register and no offset; // S - A symbolic address; // Y - Floating point constant zero; // Z - Integer constant zero; //; // Note that general register operands will be output using their 64-bit x; // register name, whatever the size of the variable, unless the asm operand; // is prefixed by the %w modifier. Floating-point and SIMD register operands; // will be output with the v prefix unless prefixed by the %b, %h, %s, %d or; // %q modifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:660,log,logical,660,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['log'],['logical']
Testability,"//===----------------------------------------------------------------------===//; // Addressing Mode Selection; //===----------------------------------------------------------------------===//; /// isIntS16Immediate - This method tests to see if the node is either a 32-bit; /// or 64-bit immediate, and if the value can be accurately represented as a; /// sign extension from a 16-bit value. If so, this returns true and the; /// immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:230,test,tests,230,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['test'],['tests']
Testability,"//===----------------------------------------------------------------------===//; // Basic SCEV Analysis and PHI Idiom Recognition Code; //; /// Test if values of the given type are analyzable within the SCEV; /// framework. This primarily includes integer types, and it can optionally; /// include pointer types if the ScalarEvolution class has access to; /// target-specific information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:145,Test,Test,145,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Test'],['Test']
Testability,"//===----------------------------------------------------------------------===//; // BitMaskClassIterator; //===----------------------------------------------------------------------===//; /// This class encapuslates the logic to iterate over bitmask returned by; /// the various RegClass related APIs.; /// E.g., this class can be used to iterate over the subclasses provided by; /// TargetRegisterClass::getSubClassMask or SuperRegClassIterator::getMask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:221,log,logic,221,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['log'],['logic']
Testability,"//===----------------------------------------------------------------------===//; // Calling Convention Implementation; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; // TODO: Implement a generic logic using tblgen that can support this.; // Mips O32 ABI rules:; // ---; // i32 - Passed in A0, A1, A2, A3 and stack; // f32 - Only passed in f32 registers if no int reg has been used yet to hold; // an argument. Otherwise, passed in A1, A2, A3 and stack.; // f64 - Only passed in two aliased f32 registers if no int reg has been used; // yet to hold an argument. Otherwise, use A2, A3 and stack. If A1 is; // not used, it must be shadowed. If only A3 is available, shadow it and; // go to stack.; // vXiX - Received as scalarized i32s, passed in A0 - A3 and the stack.; // vXf32 - Passed in either a pair of registers {A0, A1}, {A2, A3} or {A0 - A3}; // with the remainder spilled to the stack.; // vXf64 - Passed in either {A0, A1, A2, A3} or {A2, A3} and in both cases; // spilling the remainder to the stack.; //; // For vararg functions, all arguments are passed in A0, A1, A2, A3 and stack.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:313,log,logic,313,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // CastInst Class; //===----------------------------------------------------------------------===//; /// This is the base class for all instructions that perform data; /// casts. It is simply provided so that instruction category testing; /// can be performed with code like:; ///; /// if (isa<CastInst>(Instr)) { ... }; /// Base class of casting instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:312,test,testing,312,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['test'],['testing']
Testability,//===----------------------------------------------------------------------===//; // Common logic.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:92,log,logic,92,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,1,['log'],['logic']
Testability,"//===----------------------------------------------------------------------===//; // Constraint assignment logic; //===----------------------------------------------------------------------===//; /// ConstraintAssignorBase is a small utility class that unifies visitor; /// for ranges with a visitor for constraints (rangeset/range/constant).; ///; /// It is designed to have one derived class, but generally it can have more.; /// Derived class can control which types we handle by defining methods of the; /// following form:; ///; /// bool handle${SYMBOL}To${CONSTRAINT}(const SYMBOL *Sym,; /// CONSTRAINT Constraint);; ///; /// where SYMBOL is the type of the symbol (e.g. SymSymExpr, SymbolCast, etc.); /// CONSTRAINT is the type of constraint (RangeSet/Range/Const); /// return value signifies whether we should try other handle methods; /// (i.e. false would mean to stop right after calling this method)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:107,log,logic,107,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['log'],['logic']
Testability,"//===----------------------------------------------------------------------===//; // Constraint manipulation for Delta test.; // Given a linear SCEV,; // return the coefficient (the step); // corresponding to the specified loop.; // If there isn't one, return 0.; // For example, given a*i + b*j + c*k, finding the coefficient; // corresponding to the j loop would yield b.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:119,test,test,119,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"//===----------------------------------------------------------------------===//; // DependenceInfo::Constraint methods; // If constraint is a point <X, Y>, returns X.; // Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:182,assert,assert,182,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['assert'],['assert']
Testability,"//===----------------------------------------------------------------------===//; // Dup, Pop, Test; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:95,Test,Test,95,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,1,['Test'],['Test']
Testability,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:251,assert,assertion,251,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['assert'],['assertion']
Testability,"//===----------------------------------------------------------------------===//; // GlobalValue Class; //===----------------------------------------------------------------------===//; // GlobalValue should be a Constant, plus a type, a module, some flags, and an; // intrinsic ID. Add an assert to prevent people from accidentally growing; // GlobalValue while adding flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Globals.cpp:290,assert,assert,290,interpreter/llvm-project/llvm/lib/IR/Globals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Globals.cpp,1,['assert'],['assert']
Testability,//===----------------------------------------------------------------------===//; // Logical element selection using patterns.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp:85,Log,Logical,85,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,1,['Log'],['Logical']
Testability,//===----------------------------------------------------------------------===//; // Logical visitor.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:85,Log,Logical,85,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['Log'],['Logical']
Testability,//===----------------------------------------------------------------------===//; // MDNode implementation.; //; // Assert that the MDNode types will not be unaligned by the objects; // prepended to them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Metadata.cpp:116,Assert,Assert,116,interpreter/llvm-project/llvm/lib/IR/Metadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Metadata.cpp,1,['Assert'],['Assert']
Testability,//===----------------------------------------------------------------------===//; // Machine Instruction Shuffler for Correctness Testing; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:130,Test,Testing,130,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['Test'],['Testing']
Testability,//===----------------------------------------------------------------------===//; // Main RegionStore logic.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:102,log,logic,102,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // Main logic 'check' functions; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:90,log,logic,90,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // Main logic to evaluate a call.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastValueChecker.cpp:90,log,logic,90,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastValueChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastValueChecker.cpp,1,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // Main logic to evaluate a cast.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastValueChecker.cpp:90,log,logic,90,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastValueChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastValueChecker.cpp,1,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // Main test driver code.; //===----------------------------------------------------------------------===//; /// Demo main routine which takes the type info types to throw. A test will; /// be run for each given type info type. While type info types with the value; /// of -1 will trigger a foreign C++ exception to be thrown; type info types; /// <= 6 and >= 1 will be caught by test functions; and type info types > 6; /// will result in exceptions which pass through to the test harness. All other; /// type info types are not supported and could cause a crash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:90,test,test,90,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,4,['test'],['test']
Testability,//===----------------------------------------------------------------------===//; // ObjCQualifiedIdTypesAreCompatible - Compatibility testing for qualified id's.; //===----------------------------------------------------------------------===//; /// ProtocolCompatibleWithProtocol - return 'true' if 'lProto' is in the; /// inheritance hierarchy of 'rProto'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:135,test,testing,135,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['test'],['testing']
Testability,"//===----------------------------------------------------------------------===//; // PPCBranchCoalescing; //===----------------------------------------------------------------------===//; ///; /// Improve scheduling by coalescing branches that depend on the same condition.; /// This pass looks for blocks that are guarded by the same branch condition; /// and attempts to merge the blocks together. Such opportunities arise from; /// the expansion of select statements in the IR.; ///; /// This pass does not handle implicit operands on branch statements. In order; /// to run on targets that use implicit operands, changes need to be made in the; /// canCoalesceBranch and canMerge methods.; ///; /// Example: the following LLVM IR; ///; /// %test = icmp eq i32 %x 0; /// %tmp1 = select i1 %test, double %a, double 2.000000e-03; /// %tmp2 = select i1 %test, double %b, double 5.000000e-03; ///; /// expands to the following machine code:; ///; /// %bb.0: derived from LLVM BB %entry; /// liveins: %f1 %f3 %x6; /// <SNIP1>; /// %0 = COPY %f1; F8RC:%0; /// %5 = CMPLWI killed %4, 0; CRRC:%5 GPRC:%4; /// %8 = LXSDX %zero8, killed %7, implicit %rm;; /// mem:LD8[ConstantPool] F8RC:%8 G8RC:%7; /// BCC 76, %5, <%bb.2>; CRRC:%5; /// Successors according to CFG: %bb.1(?%) %bb.2(?%); ///; /// %bb.1: derived from LLVM BB %entry; /// Predecessors according to CFG: %bb.0; /// Successors according to CFG: %bb.2(?%); ///; /// %bb.2: derived from LLVM BB %entry; /// Predecessors according to CFG: %bb.0 %bb.1; /// %9 = PHI %8, <%bb.1>, %0, <%bb.0>;; /// F8RC:%9,%8,%0; /// <SNIP2>; /// BCC 76, %5, <%bb.4>; CRRC:%5; /// Successors according to CFG: %bb.3(?%) %bb.4(?%); ///; /// %bb.3: derived from LLVM BB %entry; /// Predecessors according to CFG: %bb.2; /// Successors according to CFG: %bb.4(?%); ///; /// %bb.4: derived from LLVM BB %entry; /// Predecessors according to CFG: %bb.2 %bb.3; /// %13 = PHI %12, <%bb.3>, %2, <%bb.2>;; /// F8RC:%13,%12,%2; /// <SNIP3>; /// BLR8 implicit %lr8, implicit %rm,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp:745,test,test,745,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,3,['test'],['test']
Testability,"//===----------------------------------------------------------------------===//; // PowerPC 970 Hazard Recognizer; //; // This models the dispatch group formation of the PPC970 processor. Dispatch; // groups are bundles of up to five instructions that can contain various mixes; // of instructions. The PPC970 can dispatch a peak of 4 non-branch and one; // branch instruction per-cycle.; //; // There are a number of restrictions to dispatch group formation: some; // instructions can only be issued in the first slot of a dispatch group, & some; // instructions fill an entire dispatch group. Additionally, only branches can; // issue in the 5th (last) slot.; //; // Finally, there are a number of ""structural"" hazards on the PPC970. These; // conditions cause large performance penalties due to misprediction, recovery,; // and replay logic that has to happen. These cases include setting a CTR and; // branching through it in the same dispatch group, and storing to an address,; // then loading from the same address within a dispatch group. To avoid these; // conditions, we insert no-op instructions when appropriate.; //; // FIXME: This is missing some significant cases:; // 1. Modeling of microcoded instructions.; // 2. Handling of serialized operations.; // 3. Handling of the esoteric cases in ""Resource-based Instruction Grouping"".; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp:839,log,logic,839,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,1,['log'],['logic']
Testability,"//===----------------------------------------------------------------------===//; // Public interface for accessing registered options.; //; /// Use this to get a StringMap to all registered named options; /// (e.g. -help).; ///; /// \return A reference to the StringMap used by the cl APIs to parse options.; ///; /// Access to unnamed arguments (i.e. positional) are not provided because; /// it is expected that the client already has access to these.; ///; /// Typical usage:; /// \code; /// main(int argc,char* argv[]) {; /// StringMap<llvm::cl::Option*> &opts = llvm::cl::getRegisteredOptions();; /// assert(opts.count(""help"") == 1); /// opts[""help""]->setDescription(""Show alphabetical help information""); /// // More code; /// llvm::cl::ParseCommandLineOptions(argc,argv);; /// //More code; /// }; /// \endcode; ///; /// This interface is useful for modifying options in libraries that are out of; /// the control of the client. The options should be modified before calling; /// llvm::cl::ParseCommandLineOptions().; ///; /// Hopefully this API can be deprecated soon. Any situation where options need; /// to be modified by tools or libraries should be handled by sane APIs rather; /// than just handing around a global list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:607,assert,assert,607,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['assert'],['assert']
Testability,"//===----------------------------------------------------------------------===//; // Symbolic reasoning logic; //===----------------------------------------------------------------------===//; /// A little component aggregating all of the reasoning we have about; /// the ranges of symbolic expressions.; ///; /// Even when we don't know the exact values of the operands, we still; /// can get a pretty good estimate of the result's range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:104,log,logic,104,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // Top-level transfer function logic (Dispatcher).; //===----------------------------------------------------------------------===//; /// evalAssume - Called by ConstraintManager. Used to call checker-specific; /// logic for handling assumptions on symbolic values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:113,log,logic,113,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,['log'],['logic']
Testability,//===----------------------------------------------------------------------===//; // Type Compatibility Testing; //===----------------------------------------------------------------------===//; /// areCompatVectorTypes - Return true if the two specified vector types are; /// compatible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:104,Test,Testing,104,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['Test'],['Testing']
Testability,"//===----------------------------------------------------------------------===//; // banerjeeMIVtest -; // Use Banerjee's Inequalities to test an MIV subscript pair.; // (Wolfe, in the race-car book, calls this the Extreme Value Test.); // Generally follows the discussion in Section 2.5.2 of; //; // Optimizing Supercompilers for Supercomputers; // Michael Wolfe; //; // The inequalities given on page 25 are simplified in that loops are; // normalized so that the lower bound is always 0 and the stride is always 1.; // For example, Wolfe gives; //; // LB^<_k = (A^-_k - B_k)^- (U_k - L_k - N_k) + (A_k - B_k)L_k - B_k N_k; //; // where A_k is the coefficient of the kth index in the source subscript,; // B_k is the coefficient of the kth index in the destination subscript,; // U_k is the upper bound of the kth index, L_k is the lower bound of the Kth; // index, and N_k is the stride of the kth index. Since all loops are normalized; // by the SCEV package, N_k = 1 and L_k = 0, allowing us to simplify the; // equation to; //; // LB^<_k = (A^-_k - B_k)^- (U_k - 0 - 1) + (A_k - B_k)0 - B_k 1; // = (A^-_k - B_k)^- (U_k - 1) - B_k; //; // Similar simplifications are possible for the other equations.; //; // When we can't determine the number of iterations for a loop,; // we use NULL as an indicator for the worst case, infinity.; // When computing the upper bound, NULL denotes +inf;; // for the lower bound, NULL denotes -inf.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:138,test,test,138,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"//===----------------------------------------------------------------------===//; // gcdMIVtest -; // Tests an MIV subscript pair for dependence.; // Returns true if any possible dependence is disproved.; // Marks the result as inconsistent.; // Can sometimes disprove the equal direction for 1 or more loops,; // as discussed in Michael Wolfe's book,; // High Performance Compilers for Parallel Computing, page 235.; //; // We spend some effort (code!) to handle cases like; // [10*i + 5*N*j + 15*M + 6], where i and j are induction variables,; // but M and N are just loop-invariant variables.; // This should help us handle linearized subscripts;; // also makes this test a useful backup to the various SIV tests.; //; // It occurs to me that the presence of loop-invariant variables; // changes the nature of the test from ""greatest common divisor""; // to ""a common divisor"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:102,Test,Tests,102,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"//===----------------------------------------------------------------------===//; // getSplitIteration -; // Rather than spend rarely-used space recording the splitting iteration; // during the Weak-Crossing SIV test, we re-compute it on demand.; // The re-computation is basically a repeat of the entire dependence test,; // though simplified since we know that the dependence exists.; // It's tedious, since we must go through all propagations, etc.; //; // Care is required to keep this code up to date with respect to the routine; // above, depends().; //; // Generally, the dependence analyzer will be used to build; // a dependence graph for a function (basically a map from instructions; // to dependences). Looking for cycles in the graph shows us loops; // that cannot be trivially vectorized/parallelized.; //; // We can try to improve the situation by examining all the dependences; // that make up the cycle, looking for ones we can break.; // Sometimes, peeling the first or last iteration of a loop will break; // dependences, and we've got flags for those possibilities.; // Sometimes, splitting a loop at some other iteration will do the trick,; // and we've got a flag for that case. Rather than waste the space to; // record the exact iteration (since we rarely know), we provide; // a method that calculates the iteration. It's a drag that it must work; // from scratch, but wonderful in that it's possible.; //; // Here's an example:; //; // for (i = 0; i < 10; i++); // A[i] = ...; // ... = A[11 - i]; //; // There's a loop-carried flow dependence from the store to the load,; // found by the weak-crossing SIV test. The dependence will have a flag,; // indicating that the dependence can be broken by splitting the loop.; // Calling getSplitIteration will return 5.; // Splitting the loop breaks the dependence, like so:; //; // for (i = 0; i <= 5; i++); // A[i] = ...; // ... = A[11 - i]; // for (i = 6; i < 10; i++); // A[i] = ...; // ... = A[11 - i]; //; // breaks the depende",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:212,test,test,212,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['test'],['test']
Testability,//===----------------------------------------------------------------------===//; // log builtins; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/hlsl/hlsl_intrinsics.h:85,log,log,85,interpreter/llvm-project/clang/lib/Headers/hlsl/hlsl_intrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/hlsl/hlsl_intrinsics.h,1,['log'],['log']
Testability,"//===----------------------------------------------------------------------===//; //--- IntervalMapOverlaps ----//; //===----------------------------------------------------------------------===//; /// IntervalMapOverlaps - Iterate over the overlaps of mapped intervals in two; /// IntervalMaps. The maps may be different, but the KeyT and Traits types; /// should be the same.; ///; /// Typical uses:; ///; /// 1. Test for overlap:; /// bool overlap = IntervalMapOverlaps(a, b).valid();; ///; /// 2. Enumerate overlaps:; /// for (IntervalMapOverlaps I(a, b); I.valid() ; ++I) { ... }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:415,Test,Test,415,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['Test'],['Test']
Testability,"//===----------------------------------------------------------------------===//; /// CoreEngine - Implements the core logic of the graph-reachability; /// analysis. It traverses the CFG and generates the ExplodedGraph.; /// Program ""states"" are treated as opaque void pointers.; /// The template class CoreEngine (which subclasses CoreEngine); /// provides the matching component to the engine that knows the actual types; /// for states. Note that this engine only dispatches to transfer functions; /// at the statement and block-level. The analyses themselves must implement; /// any transfer function logic and the sub-expression level (if any).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:119,log,logic,119,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,2,['log'],['logic']
Testability,"//===----------------------------------------------------------------------===//; /// \class; /// This class is used in conjunction with the Attribute::get method to; /// create an Attribute object. The object itself is uniquified. The Builder's; /// value, however, is not. So this can be used as a quick way to test for; /// equality, presence of attributes, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:313,test,test,313,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['test'],['test']
Testability,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:708,log,logically,708,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,1,['log'],['logically']
Testability,//===--------------------------------------------------------------------===//; // Accessors that tell you what kind of MachineOperand you're looking at.; //===--------------------------------------------------------------------===//; /// isReg - Tests if this is a MO_Register operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:247,Test,Tests,247,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Test'],['Tests']
Testability,"//===--------------------------------------------------------------------===//; // Function stubs that are invoked instead of certain library calls; //; // Force the following functions to be linked in to anything that uses the; // JIT. This is a hack designed to work around the all-too-clever Glibc; // strategy of making these functions work differently when inlined vs. when; // not inlined, and hiding their real definitions in a separate archive file; // that the dynamic linker can't see. For more info, search for; // 'libc_nonshared.a' on Google, or read http://llvm.org/PR274.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp:92,stub,stubs,92,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp,1,['stub'],['stubs']
Testability,//===--------------------------------------------------------------------===//; // Utility creation methods; //===--------------------------------------------------------------------===//; /// Return a boolean value testing if \p Arg == 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:216,test,testing,216,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['test'],['testing']
Testability,//===--------------------------------------------------===//; // For testing.; //===--------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h:69,test,testing,69,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h,4,['test'],['testing']
Testability,"//====- X86FlagsCopyLowering.cpp - Lowers COPY nodes of EFLAGS ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Lowers COPY nodes of EFLAGS by directly extracting and preserving individual; /// flag bits.; ///; /// We have to do this by carefully analyzing and rewriting the usage of the; /// copied EFLAGS register because there is no general way to rematerialize the; /// entire EFLAGS register safely and efficiently. Using `popf` both forces; /// dynamic stack adjustment and can create correctness issues due to IF, TF,; /// and other non-status flags being overwritten. Using sequences involving; /// SAHF don't work on all x86 processors and are often quite slow compared to; /// directly testing a single status preserved in its own GPR.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:980,test,testing,980,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['testing']
Testability,"//==========================================================; // (3) return the result in; // lCurve logTauX logTauY",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:101,log,logTauX,101,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,2,['log'],"['logTauX', 'logTauY']"
Testability,"//==========================================================; // (3) return the result in; // scanResult lCurve logTauX logTauY",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:112,log,logTauX,112,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,2,['log'],"['logTauX', 'logTauY']"
Testability,"//==========================================================; // algorithm:; // (1) do the unfolding for nPoint-1 points; // and store the results in the map; // curve; // (1a) store minimum and maximum tau to curve; // (1b) insert additional points, until nPoint-1 values; // have been calculated; //; // (2) determine the best choice of tau; // do the unfolding for this point; // and store the result in; // curve; // (3) return the result in; // lCurve logTauX logTauY; //==========================================================; // (1) do the unfolding for nPoint-1 points; // and store the results in; // curve; // (1a) store minimum and maximum tau to curve",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:457,log,logTauX,457,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,2,['log'],"['logTauX', 'logTauY']"
Testability,"//==============================================================================; // TGLScene::TSceneInfo; //==============================================================================; //______________________________________________________________________; //; // Extend TGLSceneInfo for needs of TGLScene:; //; // 1. DrawElement vectors for opaque/transparent shapes which cache; // physicals that pass the clip tests (frustum and additional; // clip-object);; //; // 2. Statistics / debug information; //; ////////////////////////////////////////////////////////////////////////////////; /// Constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:419,test,tests,419,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['test'],['tests']
Testability,"//A logical to toggle whether the final, global pruning step to simplify the tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,log,logical,4,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['log'],['logical']
Testability,"//A logical toggle to evaluate possible advanced splits of the data. See Quinlan (1993) for details and examples.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,log,logical,4,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['log'],['logical']
Testability,"//A logical vector indicating the variables to be scaled. If; //‘scale’ is of length 1, the value is recycled as many times; //as needed. Per default, data are scaled internally (both ‘x’; //and ‘y’ variables) to zero mean and unit variance. The center; //and scale values are returned and used for later predictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:4,log,logical,4,tmva/rmva/inc/TMVA/MethodRSVM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h,1,['log'],['logical']
Testability,"//A logical: should the model evaluate groups of discrete predictors for splits?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,log,logical,4,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['log'],['logical']
Testability,"//A logical: should the tree be decomposed into a rule-based model?; //Control options see C5.0Control",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:4,log,logical,4,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['log'],['logical']
Testability,"//Abstract base class for PROOF benchmark run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRun.h:32,benchmark,benchmark,32,proof/proofbench/inc/TProofBenchRun.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRun.h,1,['benchmark'],['benchmark']
Testability,"//Architecture_t::PrintTensor(inputTensor, std::string(TString::Format("" test batch %d"",i++).Data()));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:73,test,test,73,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,"//Argument of logarithm negative. Real continuation -> function equals zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx:14,log,logarithm,14,roofit/roofit/src/RooNovosibirsk.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx,1,['log'],['logarithm']
Testability,"//Assert is better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:2,Assert,Assert,2,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,2,['Assert'],['Assert']
Testability,"//Aux. functions - gradient and solid fill of arbitrary area.; ////////////////////////////////////////////////////////////////////////////////; ///At the moment I assume both linear and radial gradients will work the same way -; ///using a stencil buffer and some big rectangle(s) to fill with a gradient.; ///Thus I have a 'common' part - the part responsible for a stencil test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:376,test,test,376,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['test'],['test']
Testability,"//CPU-intensive PROOF benchmark",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunCPU.h:22,benchmark,benchmark,22,proof/proofbench/inc/TProofBenchRunCPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunCPU.h,1,['benchmark'],['benchmark']
Testability,"//Change in logZ updates only bin heights.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLH2PolyPainter.h:12,log,logZ,12,graf3d/gl/inc/TGLH2PolyPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLH2PolyPainter.h,1,['log'],['logZ']
Testability,"//Class implementing a log graphic box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h:23,log,log,23,gui/sessionviewer/inc/TProofProgressLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h,1,['log'],['log']
Testability,"//Compute fU(j,j) and test for non-positive-definiteness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompChol.cxx:22,test,test,22,math/matrix/src/TDecompChol.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompChol.cxx,1,['test'],['test']
Testability,"//Example of the various methods of interpolation provided by the; // ROOT::Math::Interpolator class; //; //Example can also be run in ROOT by doing :; //; // root> .x testInterpolation.cxx; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testInterpolation.cxx:168,test,testInterpolation,168,math/mathmore/test/testInterpolation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testInterpolation.cxx,1,['test'],['testInterpolation']
Testability,"//Execute logoff macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:10,log,logoff,10,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,1,['log'],['logoff']
Testability,"//FIXME: Move the nested transaction marker out of the decl lists and; // reenable this assertion.; //size_t DeclSize = std::distance(T->decls_begin(), T->decls_end());; //if (T->getCompilationOpts().CodeGenerationForModule); // assert (!DeclSize && ""No parsed decls must happen in parse for module"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:88,assert,assertion,88,interpreter/cling/lib/Interpreter/TransactionUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp,2,['assert'],"['assert', 'assertion']"
Testability,"//Fortran logical unit for this file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h:10,log,logical,10,hist/hbook/inc/THbookFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/inc/THbookFile.h,1,['log'],['logical']
Testability,"//Full remote path to log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TApplicationRemote.h:22,log,log,22,net/net/inc/TApplicationRemote.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TApplicationRemote.h,1,['log'],['log']
Testability,"//GL pad painter does not use depth test, so,; //switch it off now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:36,test,test,36,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,1,['test'],['test']
Testability,"//GL pad painter does not use depth test,; //so, switch it on now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:36,test,test,36,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,1,['test'],['test']
Testability,"//GOOD: this is called after running same test suite and not at; // end of main program.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:42,test,test,42,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['test']
Testability,"//Get objects generated in previous test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:36,test,test,36,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,2,['test'],['test']
Testability,"//Header description of a logical record on file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TKey.h:26,log,logical,26,io/io/inc/TKey.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TKey.h,1,['log'],['logical']
Testability,"//I will switch o "" << Endl;; //Log() << ""--> I switch do default nCuts = 20 and use standard node splitting WITH possible Fisher criteria""<<Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:32,Log,Log,32,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['Log'],['Log']
Testability,"//I would prefer an assert here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx:20,assert,assert,20,graf3d/gl/src/TGLViewerEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx,2,['assert'],['assert']
Testability,"//I'd prefer an assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:16,assert,assert,16,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['assert'],['assert']
Testability,"//I've never tested accumulation buffer size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFormat.cxx:13,test,tested,13,graf3d/gl/src/TGLFormat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFormat.cxx,1,['test'],['tested']
Testability,"//I've never tested stencil buffer size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFormat.cxx:13,test,tested,13,graf3d/gl/src/TGLFormat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFormat.cxx,1,['test'],['tested']
Testability,"//IO-intensive PROOF benchmark",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunDataRead.h:21,benchmark,benchmark,21,proof/proofbench/inc/TProofBenchRunDataRead.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBenchRunDataRead.h,1,['benchmark'],['benchmark']
Testability,"//Just in case asserts were deleted from ctor:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/Display.cpp:15,assert,asserts,15,interpreter/cling/lib/MetaProcessor/Display.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/Display.cpp,7,['assert'],['asserts']
Testability,"//LM: Dec 2010 : rmeake this test as; // a test of histogram with some different labels not all filled",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:29,test,test,29,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['test'],['test']
Testability,"//Log the loss value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:2,Log,Log,2,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,6,['Log'],['Log']
Testability,"//Log() << kDEBUG << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:2,Log,Log,2,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['Log'],['Log']
Testability,"//Log() << kERROR <<""ANN Network is not initialized, doing it now!""<< Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:2,Log,Log,2,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['Log'],['Log']
Testability,"//Log() << kFATAL << ""Please implement writing of weights as XML"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:2,Log,Log,2,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,2,['Log'],['Log']
Testability,"//Log() << kHEADER << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:2,Log,Log,2,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,2,['Log'],['Log']
Testability,"//Log() << kINFO << "" "" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:2,Log,Log,2,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['Log'],['Log']
Testability,"//Log() << kINFO << "" GetResults(""<<info<<"") builds new result."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:2,Log,Log,2,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['Log'],['Log']
Testability,"//Log() << kINFO << "" GetResults(""<<info<<"") can't create new one."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:2,Log,Log,2,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['Log'],['Log']
Testability,"//Log() << kINFO << "" GetResults(""<<info<<"") returns existing result."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:2,Log,Log,2,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['Log'],['Log']
Testability,"//Log() << kINFO << ""Reading methods from XML done "" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx:2,Log,Log,2,tmva/tmva/src/MethodCompositeBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCompositeBase.cxx,1,['Log'],['Log']
Testability,"//Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:2,Log,Log,2,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,2,"['Log', 'test']","['Log', 'testing']"
Testability,"//Log() << kINFO <<""Preparing trees for training and testing...""<< Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:2,Log,Log,2,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,2,"['Log', 'test']","['Log', 'testing']"
Testability,"//Log() << kVERBOSE << Data()->GetNEvtSigTrain() << "" Signal and ""; // << Data()->GetNEvtBkgdTrain() << "" background"" << "" events in trainingTree"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:2,Log,Log,2,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['Log'],['Log']
Testability,"//Log() << kWARNING << __FILE__ <<"":InverseTransform fTransformationsReferenceClasses is empty"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:2,Log,Log,2,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['Log'],['Log']
Testability,"//Log() << kWARNING << neuron << "" "" << weight << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:2,Log,Log,2,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['Log'],['Log']
Testability,"//Log() << kWarning << DefaultDataSetInfo().GetNClasses() /*fClasses.size()*/ << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:2,Log,Log,2,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['Log'],['Log']
Testability,"//Log(2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx:2,Log,Log,2,roofit/roofit/src/RooNovosibirsk.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx,1,['Log'],['Log']
Testability,"//Logical indicator, if TRUE the particle can not decay",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TAttParticle.h:2,Log,Logical,2,montecarlo/eg/inc/TAttParticle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TAttParticle.h,1,['Log'],['Logical']
Testability,"//Main control function invoking all test programs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:37,test,test,37,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,2,['test'],['test']
Testability,"//Now we fill the whole scene with one big rectangle; //(group of rectangles) with a gradient fill using; //stencil test.; //Find a bounding rect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:116,test,test,116,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['test'],['test']
Testability,"//PLC calculates intervals. for one sided ul multiply testsize by two",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx:54,test,testsize,54,roofit/roostats/src/UpperLimitMCSModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx,1,['test'],['testsize']
Testability,"//PROOF selector for CPU-intensive benchmark test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelHist.h:35,benchmark,benchmark,35,proof/proofbench/inc/TSelHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelHist.h,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"//PROOF selector for I/O-intensive benchmark test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h:35,benchmark,benchmark,35,proof/proofbench/inc/TSelEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"//Path to log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TApplicationServer.h:10,log,log,10,net/net/inc/TApplicationServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TApplicationServer.h,1,['log'],['log']
Testability,"//Prepare plot painter.; //Forget about log scale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTH3Composition.cxx:40,log,log,40,graf3d/gl/src/TGLTH3Composition.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTH3Composition.cxx,1,['log'],['log']
Testability,"//ROOT::TestSupport",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx:8,Test,TestSupport,8,core/testsupport/src/TestSupport.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx,1,['Test'],['TestSupport']
Testability,"//Run the standard test suite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:19,test,test,19,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['test'],['test']
Testability,"//Sqrt( Log(2) )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx:8,Log,Log,8,roofit/roofit/src/RooNovosibirsk.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx,1,['Log'],['Log']
Testability,"//Sqrt( Log(4) )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx:8,Log,Log,8,roofit/roofit/src/RooNovosibirsk.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx,1,['Log'],['Log']
Testability,"//Sqrt( pi/Log(2) )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx:11,Log,Log,11,roofit/roofit/src/RooNovosibirsk.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNovosibirsk.cxx,1,['Log'],['Log']
Testability,"//Sum of logs (array of fNlog elements)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TFitter.h:9,log,logs,9,math/minuit/inc/TFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TFitter.h,1,['log'],['logs']
Testability,"//TEST(RNNTest, ForwardPass); //{; // EXPECT_EQ(testForwardPass<TReference<double>>(3, 8, 100, 50), 0.0);; //}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.cxx:2,TEST,TEST,2,tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.cxx,4,"['TEST', 'test']","['TEST', 'testForwardPass']"
Testability,"//THE TEST",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:6,TEST,TEST,6,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['TEST'],['TEST']
Testability,"//TRUE if log messages should be send back in real-time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TApplicationServer.h:10,log,log,10,net/net/inc/TApplicationServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TApplicationServer.h,1,['log'],['log']
Testability,"//TString probatext(""Kolmogorov-Smirnov test: "");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/mvasMulticlass.cxx:40,test,test,40,tmva/tmvagui/src/mvasMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/mvasMulticlass.cxx,1,['test'],['test']
Testability,"//Test TKDTree::FindInRange() function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:2,Test,Test,2,math/mathcore/test/kDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx,1,['Test'],['Test']
Testability,"//Test adding and subtracting entry lists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Test,Test,2,test/stressEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx,1,['Test'],['Test']
Testability,"//Test central quantiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooGaussian.cxx:2,Test,Test,2,roofit/roofit/test/testRooGaussian.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooGaussian.cxx,1,['Test'],['Test']
Testability,"//Test class with functions for each of the cases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:2,Test,Test,2,math/mathcore/test/fit/testLogLExecPolicy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx,1,['Test'],['Test']
Testability,"//Test correspondence of event lists and entry lists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Test,Test,2,test/stressEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx,1,['Test'],['Test']
Testability,"//Test entry lists with very many or very few events; //Only makes sense to check if there are > 64000 events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Test,Test,2,test/stressEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx,1,['Test'],['Test']
Testability,"//Test the bare CDF with some known values from publicly available tables:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooPoisson.cxx:2,Test,Test,2,roofit/roofit/test/testRooPoisson.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooPoisson.cxx,1,['Test'],['Test']
Testability,"//Test the functionality of entry lists for chains:; //making new entry lists out of parts of other entry lists; //applying same entry lists to different chains, etc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Test,Test,2,test/stressEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx,1,['Test'],['Test']
Testability,"//TestStatistic();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:2,Test,TestStatistic,2,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['Test'],['TestStatistic']
Testability,"//The logic in the loop should be improved to use the fact; //that fPositionX,Y give a precise position inside a bin.; //The current algorithm takes the center of the bin only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx:6,log,logic,6,hist/spectrum/src/TSpectrum2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx,2,['log'],['logic']
Testability,"//Train/Test/Evaluation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:8,Test,Test,8,tmva/tmva/src/VariableImportance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx,4,['Test'],['Test']
Testability,//Use the worse block ordering to test the algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:34,test,test,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['test'],['test']
Testability,"//We still can show an empty splashscreen with; //our nice logo! ;) - so this error is not fatal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:59,log,logo,59,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['log'],['logo']
Testability,"//_________________________________________; // GammaCDF tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:57,test,tests,57,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['tests']
Testability,"//_________________________________________; // Log-Parabola tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:48,Log,Log-Parabola,48,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,2,"['Log', 'test']","['Log-Parabola', 'tests']"
