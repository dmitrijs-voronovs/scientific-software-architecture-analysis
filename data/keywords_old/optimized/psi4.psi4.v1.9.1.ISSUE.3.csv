quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2438,interface,interface,2438,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"g it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2849,depend,depending,2849,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['depend'],['depending']
Integrability,"ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:2664,Depend,Depending,2664,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Depend'],['Depending']
Integrability,"gin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3906,wrap,wrapper,3906,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['wrap'],['wrapper']
Integrability,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:22511,rout,routines,22511,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,"['rout', 'wrap']","['routines', 'wrappers']"
Integrability,"hat `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a select few boost headers. In building the L2 package, one can either ask L2 to copy those few files in to `include/libint2/boost/` (that is, vendor boost) or not, effectively passing the problem along to the consumer (psi). In my own conda packages for L2, I did the former, so psi didn't need any boost. For the c-f L2 packages, I figured it was better practice to not vendor, hence the ""new"" dep. It's header-only, not boost::python or any of the boost compiled libs, so not too much trouble, I think. ## Questions; Can look at the libmints files to form an opinion on these.; - [x] `libint2::initialize()` was called three times, but `libint2::finalize()` only once. I added two more, but should I have?; - [x] Also, since we need to set the ordering, should the init be centralized in core.cc, or is it fine as is?; - [ ] technically, ordering could be set at runtime. that seemed hard to reliably prevent mixing of scratch files so I stuck with the restricted build-ti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:2801,interface,interface,2801,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['interface'],['interface']
Integrability,"hat have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been reformulated to enable calculations with grids containing negative grid weights. ## Questions; - [x] Is the current way of han",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:1386,contract,contracted,1386,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['contract'],['contracted']
Integrability,"hen you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:1656,wrap,wrapper,1656,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrapper']
Integrability,"here-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, etc. Whenever possible, try to provide conditions that didn't run and a docs link. Some examples of before and after at https://github.com/psi4/psi4/pull/2731/files#diff-d6e974accd9a58a9993b3babac9fab5c85099ba6072de01c9a6bcc4ad430dc56L22-R82 .; - [x] Added mp4(sdq), mp4, zapt2, cisd, qcisd, qcisd(t), ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:9032,message,messages,9032,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['messages']
Integrability,"hon-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2636,interface,interface,2636,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['interface'],['interface']
Integrability,"hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauX",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:3112,interface,interface,3112,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,hybrid dft-sapt integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1834:16,integrat,integration,16,https://psicode.org,https://github.com/psi4/psi4/issues/1834,1,['integrat'],['integration']
Integrability,"iagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt` Davidson solver used by `adc/prepare_tensors.cc`; - [x] Mark the return value of the `libqt` Davidson solve",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3226,wrap,wrapper,3226,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"ib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python2 (found version ""2.7.11"") ; -- Found Python: /usr/lib64/libpython2.7.so ; -- Boost version: 1.60.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /home/piton/gitdir/psi4/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. Error message:. [100%] Linking CXX executable ../../../bin/psi4; CMakeFiles/psi4_objlib.dir/create_new_plugin.cc.o: In function `boost::re_detail_106000::perl_matcher<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::match_imp()':; create_new_plugin.cc:(.text._ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv[_ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv]+0x42d): undefined reference to`boost::match_results<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >::maybe_assign(boost::match_results<__gnu_cxx::__normal_itera",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:5428,message,message,5428,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['message'],['message']
Integrability,"iency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:2122,DEPEND,DEPENDENT,2122,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['DEPEND'],['DEPENDENT']
Integrability,"iirc, @jeffschriber is going to take up bridging between psiapi tddft by @robertodr (atop QC guts by various) and ~`energy(""tddft"")` for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1836:40,bridg,bridging,40,https://psicode.org,https://github.com/psi4/psi4/issues/1836,1,['bridg'],['bridging']
Integrability,"in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:518,Rout,Routine,518,https://psicode.org,https://github.com/psi4/psi4/issues/3159,2,['Rout'],['Routine']
Integrability,"include <boost/regex.hpp>`; - [x] `lib/libmints/get_writer_file_prefix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/molecule.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/oeprop.cc:#include <boost/regex.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/regex.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/regex.hpp>`. `std::regex` is a drop in replacement **except** no more pearl syntax support. Not sure how much pearl we use, I think its all python based so we _should_ be fine.; ## . Boost serial:; - [x] `lib/libmints/serializers.h:#include <boost/serialization/serialization.hpp>`. No idea here, do we actually use our serialization capability?; ## . Boost xpressive(??):; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/lib3index/denominator.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset_parser.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/xpressive/xpressive.hpp>`. Since Xpressive is based off boost spirit it scares me a bit. Not sure what this does exactly.; ## . Also, @andysim I still have no idea on EFP. I would need your help to remove boost from that. I will be traveling until August 10th at which point ill start ripping this out provided we have a path forward for the remaining issues.; ## ; ### LAB edit, 4 Aug. big ticket items/dependencies:; - [x] `add_custom_target(BoostPy)` convert Boost Python to Pybind11; - [x] `add_custom_target(BoostNonPy)` evict all the other Boost libraries we depend on (checkboxed above); - [x] `add_custom_target(FilterBranch DEPENDS BoostPy BoostNonPy)` remove all Boost tarballs and other large files from repo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450:4365,depend,dependencies,4365,https://psicode.org,https://github.com/psi4/psi4/issues/450,3,"['DEPEND', 'depend']","['DEPENDS', 'depend', 'dependencies']"
Integrability,ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Looking for include file dlfcn.h; -- Looking for include file dlfcn.h - found; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for erf; -- Looking for erf - found; -- Looking for MPI_Finalize; -- Looking for MPI_Finalize - not found; -- Checking for restrict keyword; -- Checking for restrict keyword - **restrict**; -- Looking for Fortran dgemm; -- Looking for Fortran dgemm - not found; -- Looking for Fortran dgemm; -- Looking for Fortran dgemm - not found; -- Looking for Fortran sgemm; -- Looking for Fortran sgemm - not found; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; CMake Error at /usr/local/Cellar/cmake/2.8.12.1/share/cmake/Modules/FindBLAS.cmake:594 (message):; A required library with BLAS API not found. Please specify library; location.; Call Stack (most recent call first):; /usr/local/Cellar/cmake/2.8.12.1/share/cmake/Modules/FindLAPACK.cmake:142 (find_package); CMakeLists.txt:135 (find_package),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:4448,message,message,4448,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['message'],['message']
Integrability,"inly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:1242,depend,dependencies,1242,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['depend'],['dependencies']
Integrability,"ion (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:1825,depend,dependency,1825,https://psicode.org,https://github.com/psi4/psi4/issues/1562,4,"['Interface', 'Interoperab', 'depend', 'interface']","['Interface', 'Interoperability', 'dependency', 'interfaces']"
Integrability,"ion of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, sphe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2607,interface,interface,2607,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"itals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate them back to libmints instead of SCF (#1759); - Let the `Deriv` class be instructable in the flavor it computes, rather than trying to devine SCF vs correlated (#1756); - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:6945,rout,routines,6945,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['rout'],['routines']
Integrability,"ity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:1728,rout,routine,1728,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['rout'],['routine']
Integrability,"k_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:1861,depend,dependency,1861,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['depend'],['dependency']
Integrability,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2708,depend,dependencies,2708,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['depend'],['dependencies']
Integrability,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:2037,rout,routed,2037,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['rout'],['routed']
Integrability,"l indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi is blocking developers who want density-fitted gradients interfaced through Psi. (@fevangelista at least, and I believe @edeprince3 and @ssh2 as well.). ## Causes of Problems with the Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:3174,interface,interfaced,3174,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['interface'],['interfaced']
Integrability,"l integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this beha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2787,rout,routine,2787,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['rout'],['routine']
Integrability,"l quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauXC interface to support GPU execution. Additionally, for internally-build GauXC instances, setting `gauxc_ENABLE_GPU` to `ON` will build the internal GauXC install with GPU support. For external GauXC installs, `gauxc_ENABLE_GPU` will ensure that the external GauXC install supports GPU execution. ; - [X] Adds a new `SplitJK` derived class, `snLinK`. When Psi4 is built with GauXC support, `snLinK` contains the implementation of the details of the Psi4/GauXC interface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comprehensive_jk_screening.py` pytests to test sn-LinK functionalities, given that GauXC is installed.; - [X] Adds a new file, `gauxc_writer.py` to generate HDF5 files as input for GauXC's `standalone_driver` functionality. Reference files for benzene at the cc-pVDZ, cc-pVTZ, and cc-pVQZ basis set have been added, and a `test_gauxc_writer.py` file has been added to test the writer's functionality, given that GauXC is installed. . ## Notes; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:4640,interface,interface,4640,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1728,rout,routes,1728,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['rout'],['routes']
Integrability,"last sequence PR before splitting away qcdb. I suggest it form the start of `v1.3` . ~Since originally posted (+27k/–10k), this PR has had #834 subtracted from it (now +13k/–7k). It is built atop #965, so I wouldn't review until that gets pulled in and subtracted from this. What does need answering soonish is whether for 1.2/1.3 purposes, the remaining commits of this PR should be separated further.~. ~Now this has had #965 rebased through, it should be stable for a good while. It now has size (+9k/–6k). There doesn't seem much interest in promoting the below to 1.2, so no need for further subdivision.~. This has now had **v1.2 rebased through** so I sincerely hope it's been kneaded for the last time. ## Todos: Py-side SCF/PCM/EFP (1.3); * **Developer Interest**; - [x] SCF iterations moved py-side; - [x] includes control of MOM, DIIS, damping, soscf, frac, efp; - [x] SCF finalize, stability, post-iterations, printing moved py-side; - [x] Rework a good bit of Wfn::HF::common_init() to minimize the convergence helper controllers that are c-side; - [x] A couple export/def bugs fixed in Wfn::HF and more fns exported and moved to public in class; - [x] PCMSolver interface reworked for py-side; - [x] libefp EFP object moved from c-side `P::e.EFP` to a py-side attached EFP attribute on the `psi4.core.Molecule` object.; - [x] Psi4 forgot about the c-side EFP object in bin, lib, globals, exports (still in options); - [x] EFP/EFP calcs moved purely py-side; - [x] SCF/EFP calcs carry out operations on the EFP object py-side; - [x] efp_torque no longer in `P::e` but `EFP TORQUE` in `P::e:arrays`. ## Todos: Py-side Mol Parsing (could be split out for 1.2); * **User Interest**; - [x] `molecule {...}` will take xyz (element symbol _or_ atomic number) or psi4 formats.; - [x] overall chgmult now specifiable through `1 3\n--` before any fragments.; - [x] can specify atomic number, mass number, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953:1675,interface,interface,1675,https://psicode.org,https://github.com/psi4/psi4/pull/953,1,['interface'],['interface']
Integrability,"le in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2936,rout,routine,2936,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['rout'],['routine']
Integrability,"le total_elecs = sum_of_elecs*D_[0]*D_[1]*D_[2];. ```; example file:; ```; molecule mol {; 0 1; C -0.000000000000 0.000000000000 -1.285087454295; N -0.000000000000 1.193800518377 -0.689363570963; N -0.000000000000 0.000000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; gr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:1573,integrat,integrated,1573,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['integrat'],['integrated']
Integrability,"mize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:1750,interface,interface,1750,https://psicode.org,https://github.com/psi4/psi4/pull/1813,1,['interface'],['interface']
Integrability,"mpty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicode character width, otherwise the table gets far too wide; layering allowed. Several tables are produced:; - [x] an all-methods, one row per method table for the front page: introduction.rst#capabilities . this table complements the comprehensive hand-written one. [summary](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_summary.rst); - [x] an all-methods, one row per module per method table for the ""Alternate Implementations"" page: [details](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_details.rs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:1661,contract,contracts,1661,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['contract'],['contracts']
Integrability,"n from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1000,wrap,wrappers,1000,https://psicode.org,https://github.com/psi4/psi4/pull/2686,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"n function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1260,interface,interfaces,1260,https://psicode.org,https://github.com/psi4/psi4/issues/414,1,['interface'],['interfaces']
Integrability,"n psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:1075,rout,routing,1075,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['rout'],['routing']
Integrability,"ncies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1359,depend,dependency,1359,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependency']
Integrability,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341:2018,message,message,2018,https://psicode.org,https://github.com/psi4/psi4/issues/1341,1,['message'],['message']
Integrability,new Multipole interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1720:14,interface,interface,14,https://psicode.org,https://github.com/psi4/psi4/pull/1720,1,['interface'],['interface']
Integrability,"new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Ind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:2233,integrat,integration,2233,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integration']
Integrability,"nknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3809,Rout,Routine,3809,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,"nknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:4444,Rout,Routine,4444,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,nmopi() and Ca()->coldim() not consistent when linear dependencies present,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120:54,depend,dependencies,54,https://psicode.org,https://github.com/psi4/psi4/issues/2120,1,['depend'],['dependencies']
Integrability,"ns you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consol",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7072,wrap,wrapped,7072,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['wrap'],['wrapped']
Integrability,"nstructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5856,contract,contracted,5856,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['contract'],['contracted']
Integrability,"nted and working, see the [adcc manual](https://adc-connect.org/calculations.html#general-adc-n-calculations), so this should mainly be an effort of connecting the strings together on the Psi4 side. Currently I am still very much in the planning phase of this PR, thankful for any early pointers or feedback to get me moving in a sensible direction. Since this is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:1210,Integrat,Integration,1210,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['Integrat'],['Integration']
Integrability,"o latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:1268,depend,dependency,1268,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['depend'],['dependency']
Integrability,"o separate PRs for reviewer convenience. Then I can bring in this PR. - [x] #2886; - [x] #2887; - [x] #2888; - [x] #2889. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:1617,integrat,integrate,1617,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integrate']
Integrability,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:1300,message,message,1300,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['message'],['message']
Integrability,"o transition to a modular nature and it is easiest for the users of these modules if they only have to specify the Psi4 include directory as an include and not each subdirectory of it. Note that this is how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6332,interface,interface,6332,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['interface'],['interface']
Integrability,"object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/transform_read_so.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_bw.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_mk.cc.o; [ 12%] Linking CXX static library libpsimrcc.a; [ 12%] Built target psimrcc; [ 12%] Building CXX object src/psi4/sapt/CMakeFiles/sapt.dir/wrapper.cc.o; [ 12%] Linking CXX static library libsapt.a; [ 12%] Built target sapt; Consolidate compiler generated dependencies of target scf_solver; [ 13%] Built target scf_solver; Consolidate compiler generated dependencies of target scfgrad; [ 13%] Built target scfgrad; Consolidate compiler generated dependencies of target l2export; [ 13%] Built target l2export; Consolidate compiler generated dependencies of target 3index; [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ^; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:674,depend,dependencies,674,https://psicode.org,https://github.com/psi4/psi4/issues/3006,10,['depend'],['dependencies']
Integrability,"occ': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array has the wrong dimensions; Error occurred in file: /home/c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1250,message,message,1250,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['message'],['message']
Integrability,odd DF-CCSD problems depending on molecule input method,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110:21,depend,depending,21,https://psicode.org,https://github.com/psi4/psi4/issues/1110,1,['depend'],['depending']
Integrability,"odels (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart needed or not ([this stuff](https://github.com/psi4/psi4/pull/2767/commits/108b6bb1a53cdc428933475dea991e08a3330d98#diff-48947c7a095c933d6843e0564043f051b0e54dff111fff222bf25cd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:1196,interface,interface,1196,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['interface'],['interface']
Integrability,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1009,interface,interface,1009,https://psicode.org,https://github.com/psi4/psi4/pull/2132,2,['interface'],['interface']
Integrability,omp_set_nested routine deprecated,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:15,rout,routine,15,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['rout'],['routine']
Integrability,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:2714,integrat,integration,2714,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['integrat'],['integration']
Integrability,"ons in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/maste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:1476,rout,routing,1476,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['rout'],['routing']
Integrability,"ons in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to han",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1085,interface,interfaces,1085,https://psicode.org,https://github.com/psi4/psi4/issues/414,1,['interface'],['interfaces']
Integrability,"ook 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1995,depend,dependencies,1995,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"ormation. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:1887,interface,interface,1887,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['interface'],['interface']
Integrability,"ortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log"". Howevewer, there is no file /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log and no directory objdir at all.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:16035,Interface,Interface,16035,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Interface'],['Interface']
Integrability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:9428,interface,interface,9428,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1538,interface,interface,1538,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['interface'],['interface']
Integrability,prototype basis-dependent basis guess,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:16,depend,dependent,16,https://psicode.org,https://github.com/psi4/psi4/pull/1484,1,['depend'],['dependent']
Integrability,psi4 mrcc interface PSIO_ERROR,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:10,interface,interface,10,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['interface'],['interface']
Integrability,"psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #T",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7618,depend,dependency,7618,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependency']
Integrability,psiembed integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1839:9,integrat,integration,9,https://psicode.org,https://github.com/psi4/psi4/issues/1839,1,['integrat'],['integration']
Integrability,psixas integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1837:7,integrat,integration,7,https://psicode.org,https://github.com/psi4/psi4/issues/1837,1,['integrat'],['integration']
Integrability,"pullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:1271,depend,dependencies,1271,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['depend'],['dependencies']
Integrability,"qcarchive tag, protocol passing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3013:15,protocol,protocol,15,https://psicode.org,https://github.com/psi4/psi4/pull/3013,1,['protocol'],['protocol']
Integrability,"r any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:1845,interface,interface,1845,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['interface'],['interface']
Integrability,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10407,Interface,Interface,10407,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['Interface'],['Interface']
Integrability,"ral major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a densi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:1169,depend,depending,1169,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['depend'],['depending']
Integrability,"rapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2498,wrap,wrapper,2498,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"re were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3800,depend,dependencies,3800,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4039,wrap,wrapper,4039,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrapper']
Integrability,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:2830,Contract,Contracted,2830,https://psicode.org,https://github.com/psi4/psi4/pull/475,2,['Contract'],['Contracted']
Integrability,"rk with the distributed driver. Now all such methods and a reasonable number of levels are added explicitly to the procedures table and splitting/parsing happen at run_detci.; - [x] the `scf_type`, `mp2_type`, `mp_type`, `ci_type`, `cc_type` keywords were a good idea in that they allow different defaults for different levels of theory and are fairly easy to guess and uniform to use. One flaw is that you don't know programmatically what controls what method -- it's all hard-coded, sometimes in more than one place, in proc.py . Now there's a method:type association dict in procrouting/proc_data.py . There's also a little function there serving up the info, so you can get out the keyword and current value with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error mess",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8084,integrat,integrated,8084,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['integrat'],['integrated']
Integrability,"rreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds two new member functions to `Psi4::Matrix`, `eigen_map()` and `eigen_maps()`, that return `Eigen::Map` representations of the Psi4 matrix object. ## Questions; - [X] N/A. ## Notes; - [X] I did look into forward declaring the necessary Eigen classes, but forward declaring `Eigen::Map` turns out to be a bit ugly, as it is a class template that, to forward declare, ends up requiring forward declarations for other Eigen classes and enums (such as `Stride` and `AlignmentType`) that aren't specifically necessary for the Psi4 use case. Therefore, I have skipped forward declarations here.; - [X] I can confirm the correctness of the `eigen_map()` function, as I have implemented these PR changes into my Psi-GauXC interface, wherein `eigen_map()` replaces the original formulation I used for the equivalent result. `eigen_maps()`, however, is currently untested as there is no current use case for it yet, and should thus be considered experimental. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:2753,interface,interface,2753,https://psicode.org,https://github.com/psi4/psi4/pull/3143,1,['interface'],['interface']
Integrability,"ry installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Int",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:1562,rout,routines,1562,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"s (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2509,depend,depending,2509,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['depend'],['depending']
Integrability,"s GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2274,integrat,integration,2274,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['integrat'],['integration']
Integrability,"s in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3097,wrap,wrapper,3097,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"s letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY` in C++ where available.; - [x] Fixes up the conventional CCSD qcvars in ccenergy, including closes #1702 ; - [x] Fixes up CD/DF-CCSD qcvars in fnocc, dfocc; - [x] Moves qcvars in fnocc from P::e.globals to wfn; - [x] Adds fc/ae aspects to managed method for gradient mp2. Old behavior for fc conv mp2 grad was to stop with an informative message. New behavior is to hop into finite difference. Users who definitely want to avoid finite difference for compute time or accuracy should run `gradient(..., dertype=1)` to get psi to stop instead. ## Questions; - [ ] ~Organization of tests is not finalized. qcng does 6 tests per method (r/u/ro x ae/fc) (https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/test_standard_suite_ccsd.py), which is nice, but in psi, it's nice to keep all the modules together. I'm undecided.~; - [ ] @JonathonMisiewicz, did you ever get the impression that `pcg_convergence` should be tighter in dfocc? Present setting 1.e-6 doesn't converge gradients to 6 digits. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review - most of the new tests are skipped pending https://github.com/MolSSI/QC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:2427,message,message,2427,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['message'],['message']
Integrability,"s optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:1480,interface,interface,1480,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['interface'],['interface']
Integrability,"s://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gradients. As best as I can tell, the rewrite just changes orbital indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi is blocking developers who want density-fitted gradients interfaced through Psi. (@fevangelista at least, and I believe @edeprince3 and @ssh2 as well.). ## Causes of Problems with the Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:2938,contract,contracts,2938,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['contract'],['contracts']
Integrability,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2672,interface,interface,2672,https://psicode.org,https://github.com/psi4/psi4/issues/2491,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"serves a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174500000; H -4.468441100000 -0.526892600000 -1.348265500000; C -3.356878400000 -0.865573300000 1.355714100000; H -3.371868200000 -0.108729700000 2.151443200000; C -3.157712400000 1.802287600000 0.144667000000; H -2.704252500000 2.31",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:1271,wrap,wrapper,1271,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['wrap'],['wrapper']
Integrability,"sh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11957,integrat,integrated,11957,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['integrat'],['integrated']
Integrability,"sr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:8855,Interface,Interface,8855,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Interface'],['Interface']
Integrability,"stand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V terms with no mechanism to request the - terms. _This_ is why we can't do triplets. This should be fixed, once the code is better organized and commented so it's clear exactly which terms need the freedom to change sign.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:1292,depend,dependent,1292,https://psicode.org,https://github.com/psi4/psi4/issues/2841,1,['depend'],['dependent']
Integrability,"t -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1419,message,message,1419,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['message'],['message']
Integrability,"t of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1598,rout,routines,1598,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['rout'],['routines']
Integrability,"t parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:11841,message,message,11841,https://psicode.org,https://github.com/psi4/psi4/issues/1562,4,"['depend', 'interface', 'message']","['dependencies', 'interface', 'message']"
Integrability,t symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:4647,depend,depending,4647,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['depend'],['depending']
Integrability,"t, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2845,wrap,wrapper,2845,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"table and splitting/parsing happen at run_detci.; - [x] the `scf_type`, `mp2_type`, `mp_type`, `ci_type`, `cc_type` keywords were a good idea in that they allow different defaults for different levels of theory and are fairly easy to guess and uniform to use. One flaw is that you don't know programmatically what controls what method -- it's all hard-coded, sometimes in more than one place, in proc.py . Now there's a method:type association dict in procrouting/proc_data.py . There's also a little function there serving up the info, so you can get out the keyword and current value with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8167,message,message,8167,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['message']
Integrability,"tasks for after #1721. feel free to add items. - [ ] switch CI to conda package, not from-source build; - [ ] remove Libint1 & Libint1t; - [ ] remove ERD #1780 ; - [ ] determine the best way to handle spherical harmonic max AM requirements in libmints, without the LIBINT_MAX_AM macro; - [ ] ~fix lgtm l2 build and move extra cmake out of main CMakeLists.txt~ LGTM defunct; - [ ] resolve `libint2_DIR` vs. `Libint2_DIR` with Valeev; - [x] update sphinx<2 requirement -- we're on 7 now?; - [ ] update one electron integrals to use Libint2, and remove existing routines",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1940:559,rout,routines,559,https://psicode.org,https://github.com/psi4/psi4/issues/1940,1,['rout'],['routines']
Integrability,"this PR is ready to go; - fix uninitialized variables in dfocc affecting UHF calcs. @bozkaya should review; - fix bug where default `cepa(0)` was routing to qcisd instead of cepa; - fix bug where dfocc `cepa(0)` with `DF` was getting orbital-optimized; - added test case that compares mp2 calcs btwn occ/fnocc/detci/dfmp2. rohf conv still broken btwn detci and occ, but not addressed here",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270:146,rout,routing,146,https://psicode.org,https://github.com/psi4/psi4/pull/270,1,['rout'],['routing']
Integrability,"thm in Psi4 (currently DF-DirJ, LinK, and COSX) is contained within CompositeJK itself. This runs a high risk of CompositeJK becoming monolithic, especially as more separate J/K build methods are added (e.g., CFMM). This PR is meant to be the solution to that issue. Rather than storing every separate J or K build algorithm in CompositeJK itself, they are now implemented as derived classes of a new base class, SplitJK. SplitJK features the `build_G_component` member function, which derived classes of SplitJK then implement to execute their own algorithm for building one of J or K. CompositeJK is reworked to match, featuring a pair of shared_ptrs to SplitJK classes, one representing the J algorithm, and one representing the K algorithm. Actual machinery for computing J or K, as well as other functionalities such as header printing, is then done through calling corresponding functions from the SplitJK pointers. My thought is for this PR to be added in v1.9. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Implements the SplitJK class for representing algorithms that build one of J or K.; - [x] Refactors DF-DirJ, LinK, and COSX as derived classes of SplitJK.; - [x] Reworks the CompositeJK class to execute in terms of SplitJK derived classes. ## Questions; - [ ] Is passing the eri_computers variable to COSX::build_G_component() as an argument acceptable, even though it is unused in that function? My logic, for now, is that the SplitJK implementation allows for a universal interface for calling different SplitJK derived classes, and thus different composite algorithm combinations; but this is a case where specifically fine-tuning the input for different methods may be preferable. What does everyone think?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2955:1958,interface,interface,1958,https://psicode.org,https://github.com/psi4/psi4/pull/2955,1,['interface'],['interface']
Integrability,"tl;dr Psi4 itself needs no changes for numpy v2, but its runtime major version does need to match the compile-time major version. Current conda-package v1.9.1 with _1 needs to be used in a np v1 env. I'll rebuild a _2 soon that can be used with np v2. longer:; Numpy v2 is up on conda-forge and so may show up in an environment near you. The situation wrt psi4 is that it needs either v1 or v2 depending on what it was compiled against. So:. * the conda package -- AVOIDABLE PROBLEM, this is compiled against numpy v1, so constrain your env. I'll do a new build against v2 after qcel is ready.; * an old objdir compiled against a v1 numpy -- no problem, just don't let any new conda commands update the env to v2 numpy. use `numpy=1* -c conda-forge` in any `conda update` or `conda install` commands.; * a fresh objdir where the numpy is v2 -- no problem, psi4 compiles just fine. Might need https://github.com/MolSSI/QCElemental/pull/338; * an old objdir compiled against a v1 numpy that now sees a v2 numpy at runtime -- PROBLEM, see signature below. downgrade the numpy with `conda install numpy=1 -c conda-forge`. The symptom of an incompatible psi4+numpy is the following. ```; !----------------------------------------------------------------------------------!; ! !; ! Following atoms are too close: [(0, np.int64(1), np.float64(0.0)), (0, !; ! np.int64(2), np.float64(0.0)), (1, np.int64(2), np.float64(0.0))] !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184:394,depend,depending,394,https://psicode.org,https://github.com/psi4/psi4/issues/3184,1,['depend'],['depending']
Integrability,"transform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementatio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5662,contract,contract,5662,https://psicode.org,https://github.com/psi4/psi4/issues/1736,2,['contract'],['contract']
Integrability,"uggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2269,rout,routine,2269,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['rout'],['routine']
Integrability,"ulates throughout the job. Psi4Errors printed above when a particular molecule fails to optimize, leading to the calculation to skip to the next molecule Other job input parameters are 1 node, 16 cores. . I have attempted to produce a minimal example of the context I running my program and where the memory leaks occur. ```; from openff.recharge.grids import LatticeGridSettings, GridGenerator; import psutil; import psi4; from openff.toolkit.topology import Molecule; from psi4.core import GeometryUnits; from openff.units.elements import SYMBOLS; from qcelemental.models.common_models import Model; from qcelemental.models import Molecule as QCMolecule; from qcelemental.models.procedures import OptimizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conformer number in the molecule to run the optimisation on. . Returns; -------; The ff optimised conformer. ; """"""; xtb_model = Model(method=""gfn2-xtb"", basis=None); keywords = {""verbosity"": ""muted""}; return qcengine_opt(; qc_mol=qc_mol, model=xtb_model, program=""xtb"", spec_keywords=keywords; ). def qcengine_opt(qc_mol: QCMolecule, model: Model, program: str, spec_keywords: dict[str, str]) -> QCMolecule:; """"""; A general function to run an optimisation via qcengine.; """"""; spec = QCInputSpecification(model=model, keywords=spec_keywords, driver=""gradient""); opt_spec = OptimizationInput(; initial_molecule=qc_mol,; input_specification=spec,; keywords={""coordsys"": ""dlc"", ; ""program"": program; } ; ); opt = qcengine.compute_procedure(opt_spec, ""geometric"", local_options = { ""memory"": 4, ; ""ncores"": 1}, ; raise_error=True); print(opt); return opt.final_molecule. def generate_grid(molecu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:5394,wrap,wrapper,5394,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['wrap'],['wrapper']
Integrability,"ult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:1800,message,messages,1800,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['message'],['messages']
Integrability,update PCMSolver interface to v1.2.3,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2903:17,interface,interface,17,https://psicode.org,https://github.com/psi4/psi4/pull/2903,1,['interface'],['interface']
Integrability,update distributed driver interface for qcfractal next,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:26,interface,interface,26,https://psicode.org,https://github.com/psi4/psi4/pull/2645,1,['interface'],['interface']
Integrability,update error message box: preserve newlines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1868:13,message,message,13,https://psicode.org,https://github.com/psi4/psi4/pull/1868,1,['message'],['message']
Integrability,user interface to tddft,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1836:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/1836,1,['interface'],['interface']
Integrability,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ###",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2716,wrap,wrapper,2716,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new features; - [x] 503/503 ctests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2324,wrap,wrapper,2324,https://psicode.org,https://github.com/psi4/psi4/pull/2686,5,['wrap'],"['wrapper', 'wrappers']"
Integrability,"vates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1955,depend,dependency,1955,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependency']
Integrability,"version. > Traceback (most recent call last):; > File ""/root/miniconda3/envs/psi4/bin/psi4"", line 184, in <module>; > import psi4; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/__init__.py"", line 82, in <module>; > from .driver import endorsed_plugins; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; > import v2rdm_casscf; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; > psi4.core.plugin_load(sofile); > RuntimeError:; > Fatal Error: load_plugin: Cannot open library: /root/miniconda3/envs/psi4/lib/python3.7/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi8ERISieveC1ESt10shared_ptrINS_8BasisSetEEd; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1573157589938/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; > The most recent 5 function calls were:; > ; > ; > forrtl: severe (174): SIGSEGV, segmentation fault occurred; > Image PC Routine Line Source; > libgdma.so 00007FDBC5B360DC for__signal_handl Unknown Unknown; > libpthread-2.27.s 00007FDBD8DF2890 Unknown Unknown Unknown; > ld-2.27.so 00007FDBD9016A31 Unknown Unknown Unknown; > libc-2.27.so 00007FDBD8B472DF _dl_catch_excepti Unknown Unknown; > libc-2.27.so 00007FDBD8B4736F _dl_catch_error Unknown Unknown; > libdl-2.27.so 00007FDBD87D1735 Unknown Unknown Unknown; > libdl-2.27.so 00007FDBD87D10B3 dlclose Unknown Unknown; > core.cpython-37m- 00007FDBC6A8034A Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC672D382 Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC6756337 Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC6762AB4 Unknown Unknown Unknown; > python3.7 00007FDBD94D3B65 PyCFunction_Call Unknown Unknown; > python3.7 00007FDBD95B2E74 Unknown Unknown Unknown; > python3.7 00007FDBD95B99E7 Py_FinalizeEx Unknown Unknown; > python3.7 00007FDBD95D1C63 Unknown Unknown Unknown; > python3.7 0000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750:1163,Rout,Routine,1163,https://psicode.org,https://github.com/psi4/psi4/issues/1750,1,['Rout'],['Routine']
Integrability,"wargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_func",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2056,wrap,wrappers,2056,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrappers']
Integrability,"will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2471,depend,dependencies,2471,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004:663,message,message,663,https://psicode.org,https://github.com/psi4/psi4/issues/1004,1,['message'],['message']
Integrability,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:2230,depend,dependencies,2230,https://psicode.org,https://github.com/psi4/psi4/issues/2572,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2317,wrap,wrapper,2317,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1912,wrap,wrapper,1912,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:3702,integrat,integration,3702,https://psicode.org,https://github.com/psi4/psi4/pull/2885,2,['integrat'],"['integrated', 'integration']"
Integrability,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:376,rout,routine,376,https://psicode.org,https://github.com/psi4/psi4/pull/3087,1,['rout'],['routine']
Modifiability," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:1958,variab,variable,1958,https://psicode.org,https://github.com/psi4/psi4/issues/2497,5,['variab'],['variable']
Modifiability, - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4319,plugin,plugins,4319,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability, - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeL,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5052,plugin,plugins,5052,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," 0.68542522 0.00000000 -4.16299454; C -2.88740001 0.00000000 -1.13057937; N -2.05486054 0.00000000 0.01405448; C -2.81721573 0.00000000 1.05258796; C -4.23537365 0.00000000 0.67022148; C -4.27600326 0.00000000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libparallel/parallel.h>; #include <liboptions/libop",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:1943,plugin,plugin,1943,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['plugin'],['plugin']
Modifiability," 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n""); psi4.print_out(""CP-corrected interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)); ```; Output; ```; R [Ang] E_int [kcal/mol] ; -----------------------------------------------------; 1.4 70.792944; 1.5 70.792944; 1.6 70.792944; 1.7 70.792944; 1.8 70.792944; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:1427,variab,variable,1427,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['variab'],['variable']
Modifiability," 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step B (thanks, Jet!); * 22 Feb: add OS->MD step in. convert unordered steps to letters; * 16/17 Mar: switch out good conda packages for step 3 (M: 4->6; W: 3->5); * 23 Mar: add more PRs and items to list from 2414; * 23 Mar: added `_7` pkg for mac for step B; * 23 Mar: clarified M-D multipole integral notes (@maxscheurer); * 25 Mar: reordered some bullets for merged PRs; * 5 Apr: add more M-D/OS removal PRs to step C (@maxscheurer); * 5 Apr: switch to new linux pkg for step A (L: 12->16); * 9 Apr: add new mac pkg for step A (M: 8) and edited step A; * 21 May: updated table for v1.6; * 10 Feb 2023: updated table for v1.7 and A' replacing step A. deleted A packages and posted A' Linux one; * 17 Feb 2023: added A' Mac; * 16 May 2023: finish out A' row for v1.8; * 4 Dec 2023: finish out A'' row (incomplete B' strategy) for v1.9. note L2 sh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:7690,config,config,7690,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['config'],['config']
Modifiability, 31. optking/beran: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skelet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4236,plugin,plugins,4236,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," @psi-rking, I don't remember seeing any projection of rot/trans out of Hessian. Is this just because by using SALCs you're assured of only displacements in vib-active directions? Assuming we someday get an analytic Hessian mtd, projection would be needed, right? I'm inclined to group projection with the vib analysis for comparison of proj and unproj freqs, so psi4.fd module needn't be involved.; - [ ] signature `SharedMatrix fd_freq_1(boost::shared_ptr<Molecule> mol, Options &options, const boost::python::list& grad_list, int freq_irrep_only)` (just like at present); - [ ] remove communication with globals (`Process`); - [ ] return nmw H (just like at present). vibrational analysis; - should move to python; - possibly already drafted/ready by Addison/Brandon; - [ ] tentative signature `normalmode(molecule, hessian, gradient=None, **kwargs)` where the arrays are `psi4.Matrix` or numpy arrays, gradient defaults to None (just there to project out of Hessian), and I don't care about the function name; - [ ] mass-weights by masses in molecule; - [ ] does H = 1 – R – T projection; - should dress up printing w/reduced masses IR intensities (if get dipder) someday but that's beyond the scope of this issue; - [ ] returns freq & normco arrays (or OrderedDict w/symm, force constant, etc. info). thermo analysis; - should move to python; - already ready by Addison/Brandon; - [ ] needs printing and Cp additions backported from forthcoming C++ version; - [ ] tentative signature `thermo(molecule, frequencies, E0=None, **kwargs); - [ ] stash all those energy pieces in a dict or psivars; - should review anharm analysis so harm readily subcases it; - [ ] tentatively returns Total Gibbs Energy in E_h. application; - [ ] take freq-isotope test case (not checked in yet) and rewrite it (and the `driver.frequency()` fn) so that wfn (containing mol & H) from first H2O 2nd deriv calc can be passed into vib and thermo analyses w/o ever recomputing H. All the compare_values should still pass.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347:3730,rewrite,rewrite,3730,https://psicode.org,https://github.com/psi4/psi4/issues/347,1,['rewrite'],['rewrite']
Modifiability," C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1251,config,configured,1251,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['config'],['configured']
Modifiability," Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:2245,plugin,plugins,2245,https://psicode.org,https://github.com/psi4/psi4/pull/246,2,['plugin'],['plugins']
Modifiability," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:4023,Config,Configuring,4023,https://psicode.org,https://github.com/psi4/psi4/issues/1041,3,"['Config', 'config']","['Configuring', 'configure']"
Modifiability," EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1696426865911/work/build/stage/share/psi4'; ``` . To decode this output a little, the failure results from qcarchive trying to get the version of psi4. The specific qcarchive code is here: https://github.com/MolSSI/QCFractal/blob/32a29a86d6673b0ea1a743b02d3af314c2fd164c/qcfractalcompute/qcfractalcompute/run_scripts/qcengine_list.py#L12. The code to query the version in qcarchive is newer than issue #3084, which is why it probably was not caught at the time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:1866,variab,variable,1866,https://psicode.org,https://github.com/psi4/psi4/issues/3126,2,['variab'],['variable']
Modifiability, PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5866,Adapt,Adapted,5866,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability," Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2078,rewrite,rewrite,2078,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability," This allows for easy extension of the COSX code to support more grids in the future, if desired; and allows for smoother implementation of other features in this PR. 2. Control over the active COSX grid now relies on the `current_grid_` string variable instead of the boolean `early_screening_` variable. This fits better with the `unordered_map` arrangement this code proposes, and is not limited to a two-grid scheme. 3. Upon user request (i.e., setting `DEBUG` != 0), information about each grid is printed out. Information printed out includes: total number of grid points, total number of grid blocks, average grid points per block, and average grid points per atom. 4. The timer.dat file presents the amount of time spent in COSX per grid, as well as the total COSX time. ## User API & Changelog headlines; - [X] Setting `DEBUG` to != 0 now prints out specific information on each grid used during a COSX calculation. ## Dev notes & details; - [X] COSX grids, and related variables, are now grouped together in `unordered_map` objects, and the code is adjusted to match.; - [X] Control over active grids is now controlled by `gridopt_` instead of `early_screening_`.; - [X] For COSX calculations, timer.dat now generates COSX timings per-grid, as well as the overall COSX time.; - [X] Informational printout of COSX grids has been added. ## Questions; - [ ] What do we want to do with `early_screening_`? In this PR, it basically has no use, since its functionality has been replaced by that of `gridopt_`. Early screening as a tactic (i.e., using looser ERI screening thresholds for early SCF iterations) _is_ a thing that could be added in the future for which `early_screening_` could be applicable, but that is not yet in Psi4 as far as I know. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3032:1356,variab,variables,1356,https://psicode.org,https://github.com/psi4/psi4/pull/3032,1,['variab'],['variables']
Modifiability, [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5296,plugin,plugins,5296,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4687,plugin,plugin,4687,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugin']
Modifiability," `PSI_API`, to serve as a potential replacement for the lost functionality. Other LAPACK functions are already `PSI_API`, so this should not be any more burden Psi4-side. ### Archival; - [x] Add `ael.cc` to [psi4attic](https://github.com/psi4/psi4attic) **(merged https://github.com/psi4/psi4attic/pull/1)**; - [ ] Add `Wabei_RHF_FT2_a.cc` to [psi4attic](https://github.com/psi4/psi4attic). ### TODO; - [ ] Rework the remaining `Matrix::diagonalize` to only take references, and rework all callers to only pass references, eliminating pointer arguments. May touch: `dct/dct_memory.cc`, `libmints/cdsalclist.cc`, `libmints/molecule.cc`, ...; - [ ] `adc/prepare_tensors.cc` is now the only remaining caller of the Davidson solver in `libqt`. It has exactly one call site, and the solver is not `PSI_API`. Candidate for future cleanup. ## Questions; - [ ] Question1. ## Checklist; - [x] No new features; - [x] Almost the entire test suite passes, sans MRCC due to unrelated issues. Some runtime-loaded plugins are not covered.; ```; ========================================================================================================== short test summary info ==========================================================================================================; > FAILED ../tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > FAILED ../tests/pytests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; > FAILED ../tests/mrcc/optfreq/test_input.py::test_mrcc_optfreq - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > =========================================================================== 3 failed, 3726 passed, 173 skipped, 219 xfailed, 7068 warnings in 2238.06s (0:37:18) ==================================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:6341,plugin,plugins,6341,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['plugin'],['plugins']
Modifiability," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:11363,Config,ConfigX,11363,https://psicode.org,https://github.com/psi4/psi4/pull/442,2,"['Config', 'variab']","['ConfigX', 'variable']"
Modifiability," b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:1445,config,config,1445,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['config'],['config']
Modifiability," being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Core",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:1007,plugin,plugin,1007,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['plugin'],['plugin']
Modifiability," called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:1700,variab,variable,1700,https://psicode.org,https://github.com/psi4/psi4/pull/1393,1,['variab'],['variable']
Modifiability, comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-so,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5099,plugin,plugins,5099,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital response or the exact form of the conjugate gradient equation to be solved. The caller code should be able to compute the PDMs however they want, with just a link to the relevant paper in the comments. ## Open Questions; * @dgasmith, what do you need to get MP2 RDM information passed to double hybrid functionals (#1333)?; * Crawford group in general, how willing are you to adapt the CC gradients to the new style of gradients?; * What is the fate of CI gradients? These were operational in Psi3 but were not hooked back up to Psi4. This means that at present, Psi can't even do CASSCF gradients. I believe this is enough of an issue for @fevangelista that he was playing with getting these hooked back in.; * Do we want to allow blocks to only include the correlation density but not the reference density? This is simple enough for a Hartree-Fock reference but does introduce ambiguity for other references, e.g., if MR-DSRG wants the gradient code to add a CAS reference to its correlation density.; * Is there some inherent problem with Psi's 3-index tensor technology that would have forced Ugur to use his own tensor classes? I'm not familiar with 3-index manipulations.; * One of the other major problems with the current approach to gradients is prefactors. When writing different blocks of the gradient code to `libiwl`, there's a prefactor you need for dif",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:7252,adapt,adapt,7252,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['adapt'],['adapt']
Modifiability," engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:2241,adapt,adapted,2241,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Modifiability," external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://github.com/evaleev/libint does not seem to have `find_package(Eigen3 MODULE)` line and `FindEigen3.cmake` file. A workaround is to `export EIGEN3_ROOT=/path/to/eigen3/include`, or patch; ```diff; --- a/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt; +++ b/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt; @@ -114,3 +114,3 @@; ; -find_package(Eigen3 MODULE); +find_package(Eigen3); ; ```; and remove `FindEigen3.cmake`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:1786,variab,variable,1786,https://psicode.org,https://github.com/psi4/psi4/issues/2606,2,"['config', 'variab']","['configuration', 'variable']"
Modifiability," friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version dete",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2062,variab,variables,2062,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['variab'],['variables']
Modifiability," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1382,variab,variable,1382,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['variab'],['variable']
Modifiability," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:2199,plugin,plugin,2199,https://psicode.org,https://github.com/psi4/psi4/pull/593,1,['plugin'],['plugin']
Modifiability, missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4831,plugin,plugins,4831,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," name you want, and comment out any optional qc addons you don't want. ; 2. Then issue something like`conda env create -f Linux-buildrun-maxeco.yaml` and activate the environment. ; 3. Clone psi4, then `cmake -S. -Bobjdir -DBUILD_SHARED_LIBS=ON ...`, and it usually configures fine. ; 4. For Apple Silicon, there isn't a env yaml file yet, but replacing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://github.com/psi4/psi4/blob/master/devtools/conda-envs/Linux-buildrun-maxeco.yaml#L22 with `psi4/label/testing::libint2=2.7.2=h2fe1556_1` . Despite the different package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compilers, cmake, etc.) and psi4 buildtime ecosystem packages along with a little script `psi4-path-advisor` to firmly configure cmake with conda env locations. As far as I know, this is pretty convenient and durable, especially for build-once-use-forever workflows. Complications I've heard of are (1) Mac `CONDA_BUILD_SYSROOT` sometimes required present/absent and (2) `psi4-dev` is monolithic, awkward to update, or sometimes out-of-date with psi4 master's requirements. I, for one, don't often use `psi4-dev` b/c I want more flexibility with switching out packages. **So, I'd be glad to hear thoughts on what form and contents the build helpers should take. A few plans and questions below, but any feedback appreciated.**. 1. Do you want",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:2536,config,configuration,2536,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['config'],['configuration']
Modifiability," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:4469,Plugin,Plugin,4469,https://psicode.org,https://github.com/psi4/psi4/issues/468,3,"['Plugin', 'Rewrite', 'rewrite']","['Plugin', 'Rewrite', 'rewrite']"
Modifiability," only pops up for cbs/findif/nbody jobs, which can be confusing. This PR promotes to tag complaint to upon `import psi4` for uniformity.; - [x] ""OliP"" [reported a bug at the forum](http://forum.psicode.org/t/problems-with-cbs-and-version-1-6/2494) where an input like the below returned `‘<’ not supported between instances of ‘dict’ and ‘dict’ `. This came about because I was comparing well-behaved dertype per method tuples like; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (1, {}), (1, {}), (1, {})]; ```. rather than the real-life cases one gets with ROHF. Sorting on only the dertype fixes the bug.; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (0, {1: ""\nPsiException: select_mp2_gradient: Method 'mp2' with MP2_TYPE 'DF', FREEZE_CORE 'True', and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""})]; ```. ```; molecule N {; 0 4; N 0.00 0.00 0.00; }. set {; scf_type direct; reference rohf; r_convergence 6; d_convergence 7; e_convergence 8; freeze_core true; }. e_cbs = energy(‘cbs’,; scf_basis=‘aug-cc-pV[TQ5]Z’,; corl_wfn=‘mp2’,; corl_basis=‘aug-cc-pV[TQ]Z’,; delta_wfn=‘ccsd(t)’,; delta_basis=‘aug-cc-pV[DT]Z’); ```. - [x] @hokru reported that `energy('SCF/def2-SVP',bsse_type=['cp','nocp'],dft_functional=my_functional)` got broken with the distributed driver. That's patched up for string `dft_functional` at least.; - [x] I noticed that a change I made to `_qcvars_transitions` to help version reported would make `variables(include_deprecated_keys=True)` fail. that's fixed. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2590:2041,variab,variables,2041,https://psicode.org,https://github.com/psi4/psi4/pull/2590,1,['variab'],['variables']
Modifiability," psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2008,plugin,plugin,2008,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugin']
Modifiability," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108:2357,plugin,plugins,2357,https://psicode.org,https://github.com/psi4/psi4/pull/1108,1,['plugin'],['plugins']
Modifiability,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:190,enhance,enhancements,190,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['enhance'],['enhancements']
Modifiability,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:857,plugin,plugin,857,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['plugin'],['plugin']
Modifiability,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:23,Variab,Variable,23,https://psicode.org,https://github.com/psi4/psi4/issues/1375,1,['Variab'],['Variable']
Modifiability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The current PR has two objectives. First, condense the MP2 amplitude functions, MP2 energy functions, and MP2 1RDM functions into one function each. Although several methods needed these functions with minimal changes, there were two or three functions created for each of those three. Dealing with how he handled spin-scaling forced me to take a second objective: to clean OCC's handling of spin-scaling variables. OCC previously allowed the user to overwrite the definitions of opposite-spin scaling and spin-component-scaling schemes and used far too many variables. The current scheme still allows users to make their own definitions, but those are now sent to custom variables. In addition, many keywords have been eliminated. OCC's handling of spin-scaling now differs from DFOCC's, but I am not fool enough to take on that module. Obligatory ping of @susilehtola and @hokru, who expressed opinions about this on Slack, and @loriab, who expressed many opinions about this on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] We have shed another 800+ lines of code.; - [x] Major refactor of spin-scaling in OCC. All keywords for manual handling of spin scaling in OCC are removed. Please use `os_scale` and `ss_scale` for custom scaling. Select the spin scaling method that goes to the current energy by the method string you pass to the energy call.; ~~- [ ] Update documentation accordingly.~~ Deferred to Lori PR. ## Checklist; - [x] Quick tests, occ related tests, manual diff checks, and `test_mp2.py` all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:675,variab,variables,675,https://psicode.org,https://github.com/psi4/psi4/pull/1789,4,"['refactor', 'variab']","['refactor', 'variables']"
Modifiability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The objective of the current PR is to clean up `occ/manager.cc`. All duplicated printing and variable setting code is now located in `postprocessing.cc`. ## Infrastructure Changes; * Less code duplication and less code!; * The important `occ` variables are now set in `variables_` C-side so they can be set Py-side.; * A new file has been created, `postprocessing.cc`, for all `occ`'s repetitive printng and Psi variable-setting needs. ## Questions; * @loriab, please check that there's nothing obvious missing. In particular, there is no `test_omp.py`, so I just made a .txt file for you. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785:363,variab,variable,363,https://psicode.org,https://github.com/psi4/psi4/pull/1785,3,['variab'],"['variable', 'variable-setting', 'variables']"
Modifiability,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2013:235,variab,variable,235,https://psicode.org,https://github.com/psi4/psi4/pull/2013,1,['variab'],['variable']
Modifiability,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/413:499,plugin,plugin,499,https://psicode.org,https://github.com/psi4/psi4/pull/413,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:250,adapt,adapt,250,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['adapt'],['adapt']
Modifiability,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405:136,plugin,plugin,136,https://psicode.org,https://github.com/psi4/psi4/pull/405,1,['plugin'],['plugin']
Modifiability,"## Description. Code used in the roa driver has been re-organized into a module `findif_response_utils`. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - ROA driver functions the same as it does currently.; - New drivers (in the works) will use this module rather than c+p functions from roa.py . _RE comments by @dgasmith_; - [x] Change naming scheme in tensor_helpers.py to clarify return types are not proper matrix/tensor objects; - [x] Change Exceptions raised to `PsiException` so that error information is printed to screen and the output files ; ## Questions; - [x] @lothian thoughts on the `registered_props` dict? It isn't very flexible, but I don't know if this kind of driver _needs_ to be flexible. The hard-coded `registerd_props` dict has been removed in favor of a solution that allows each driver to choose the arguments to the `property()` function in each sub-dir. The module doesn't need to know anything except what the calling driver tells it :).; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395:676,flexible,flexible,676,https://psicode.org,https://github.com/psi4/psi4/pull/395,2,['flexible'],['flexible']
Modifiability,"## Description. Configures LGTM properly. In the last cbs() pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] introduces a `.lgtm` file to define the approval regex and number of approvers.; - [x] Now all methods that are usable in cbs() use the same psivar.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/469:16,Config,Configures,16,https://psicode.org,https://github.com/psi4/psi4/pull/469,1,['Config'],['Configures']
Modifiability,"## Description. Distribute test cases and misc.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] For each test case in `samples`, add a `test.in` (intact w/ `#TEST` lines) alongside the plain `input.dat` (w/o`#TEST` lines). This way one can test (by hand) from an installed copy (e.g., conda pkg).; - [x] In `setup`, be more explicit about how to handle argument values that argparse might want to interpret as arguments themselves. Response to http://forum.psicode.org/t/odd-behavior-of-setup/233; - [x] Fix bug that kept undefined literal `${MCONDA}` in `psi4-config` for conda packages. This bug made it useless for querying `psi4-config --includes` for plugin configuration.; ## Status; - [x] Ready to go. Nothing controversial here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/401:603,config,config,603,https://psicode.org,https://github.com/psi4/psi4/pull/401,4,"['config', 'plugin']","['config', 'configuration', 'plugin']"
Modifiability,"## Description. Documentation for plugin creation using binary distribution (on linux only).; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [X] Documents setup of conda envs (w gcc and openblas), compilation of Makefile.conda, and updates documentation of --new-plugin with `+ambit` keyword.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/366:34,plugin,plugin,34,https://psicode.org,https://github.com/psi4/psi4/pull/366,2,['plugin'],['plugin']
Modifiability,## Description. Don't build the ambit plugin if ambit is not present.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/pull/436,1,['plugin'],['plugin']
Modifiability,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/433:99,flexible,flexible,99,https://psicode.org,https://github.com/psi4/psi4/pull/433,3,"['flexible', 'variab']","['flexible', 'variable']"
Modifiability,## Description. Extends DDX interface to support SCF response and TDSCF. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967:16,Extend,Extends,16,https://psicode.org,https://github.com/psi4/psi4/pull/2967,1,['Extend'],['Extends']
Modifiability,"## Description. Finally, some modernization of the PK JK object. I coded everything trying to maximize code reuse and using polymorphism where it would be good, but if you have any suggestions on the code organization please let me know.; Traditionally, PK denotes the integral supermatrices stored on disk. Here I use it more generally for the class of algorithm storing integrals somewhere instead of recomputing them.; ## Caution:. Some older commits contain additional attempts at algorithms that were deleted since (for being inefficient). You may want to review the most recent commits only.; ## Todos. Notable points that this PR has accomplished:; - [x] In-core PK algorithm when enough memory is available; - [x] ""Reorder"" PK algorithm: the PK supermatrices are directly written on file without any intermediates by reordering the integral computation (thanks to @dgasmith for discussion), good for large to medium memory; - [x] ""Yoshimine"" PK algorithm: pre-sorts integrals on disk, similar to more traditional algorithm. Best for low memory, otherwise quite slow.; - [x] Automatic selection of the algorithm depending on available memory; - [x] wK long-range integrals are also handled; - [x] Non-symmetric density matrices are handled ; ## Questions; - [x] I'd like this pull request to stay unmerged for a few days so everyone who wants to have a look at it has some time to do so. (@andysim, @jturney ?); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387:124,polymorphi,polymorphism,124,https://psicode.org,https://github.com/psi4/psi4/pull/387,1,['polymorphi'],['polymorphism']
Modifiability,## Description. Fixes the os.environ KeyError in setup with compilers are not provided to the setup script and CC/CXX/FC environment variables are not set.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes setup.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/329:133,variab,variables,133,https://psicode.org,https://github.com/psi4/psi4/pull/329,1,['variab'],['variables']
Modifiability,"## Description. General wavefunction cleanup, should fix #259. The other TODO's in that issue have been moved to separate issues or were already flagged elsewhere.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixed py-side Molden writer; - [x] Added a py-side Molden test; - [x] Moved `return_wfn` warnings into the `energy` class. As these can only be called from here I think thats fine for now. Needs to find a better home in the future.; - [x] Modernized a few plugins; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304:510,plugin,plugins,510,https://psicode.org,https://github.com/psi4/psi4/pull/304,1,['plugin'],['plugins']
Modifiability,## Description. If Matrix::gemm was called with matrices of different point group size the routine did not fail and returned erroneous results.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Checks the nirrep variable on each matrix of the gemm and throws if they are different.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/276:252,variab,variable,252,https://psicode.org,https://github.com/psi4/psi4/pull/276,1,['variab'],['variable']
Modifiability,"## Description. Increases compatibility with external analysis tools, by providing Gaussian formatted checkpoint file (FCHK) output. Also adds built-in distributed multipole analysis via Stone's GDMA package.; ## Todos; - [x] Add FCHK writer to libmints.; - [x] Incorporate GDMA 2, for distributed multipole analysis.; - [x] Add GDMA options, to prevent user from having to provide a separate input file.; - [x] Put GDMA results in the variables map.; - [x] Add GDMA test case.; - [x] Document FCHK writer and GDMA.; ## Questions; - [x] Although GDMA is released under GPL2, I want to try to contact Anthony Stone to get explicit permission to release his code as a subdirectory of Psi4. I don't think there are any legal problems with including an FCHK writer; I simply followed the [format description](http://www.gaussian.com/g_tech/g_ur/f_formchk.htm) and checked it against some of the GDMA examples. Anybody disagree?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323:436,variab,variables,436,https://psicode.org,https://github.com/psi4/psi4/pull/323,1,['variab'],['variables']
Modifiability,## Description. It was discovered that Psi4 was not properly passing Boost configuration to Ambit this PR rectifies that. Also bumps up the Ambit version tag to v0.1.1-alpha as other fixes were pushed to Ambit.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes Boost configuration passing to Ambit.; - [x] Updates Ambit version tag to v0.1.1-alpha.; - [x] Ambit was not being forced linked into the binary on Linux.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/275:75,config,configuration,75,https://psicode.org,https://github.com/psi4/psi4/pull/275,2,['config'],['configuration']
Modifiability,"## Description. Just removes the VERSION file, because the information is already contained in CMake's configuration files.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Gets rid of the superfluous VERSION file.; - [x] Allows me to see how the new template and contributing files work in practice.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272:103,config,configuration,103,https://psicode.org,https://github.com/psi4/psi4/pull/272,1,['config'],['configuration']
Modifiability,## Description. Makes all components of the dHF computation in FISAPT available as Psi Variables.; ## Todos; - [x] Export detailed components of FISAPT dHF as Psi variables; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480:87,Variab,Variables,87,https://psicode.org,https://github.com/psi4/psi4/pull/480,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"## Description. Minor mods to gdma docs, commas in basis sets, and kJ/mol; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Make GDMA manual pdf linkable from sphinx docs, autodoc gdma setting of array variables, small other GDMA documentation tweaks; - [x] Add the warning about 5930 processors + fnocc + Intel 2015 compilers composed by @ryanmrichard ; - [x] Process basis sets in input parser a little differently so that can use commas in `6-311G(2d,2p)` mentioned in #43 ; - [x] Updated SAPT output format (@jgonthier & @andysim, note); - added third column in kJ/mol ; - realigned output columns (Total SAPT were off) and between SAPT levels; - changed `scal.` to `sc.` to save space; - adjusted fisapt formatting accordingly; - added `[]` around units; - [x] added kJ/mol in `cp()`, `n_body()`, `database()`; ## Questions; - [x] @andysim, I think you were the one who set it up in the input parser so that comma was always signal for python list. Do you foresee any trouble with the scheme here?; ## Status; - [x] Ready to go, though changes to thermo aren't in yet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/330:242,variab,variables,242,https://psicode.org,https://github.com/psi4/psi4/pull/330,1,['variab'],['variables']
Modifiability,"## Description. The `setup` script was not honoring the user's `CC`, `CXX`, or `FC` environment variables as it claimed to do. Also, if compiler options were not set then allow CMake to decide.; ## Todos; - [x] Honor environment variables.; - [x] Allow CMake to decide which compilers to use.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/325:96,variab,variables,96,https://psicode.org,https://github.com/psi4/psi4/pull/325,2,['variab'],['variables']
Modifiability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:338,rewrite,rewrite,338,https://psicode.org,https://github.com/psi4/psi4/pull/1253,1,['rewrite'],['rewrite']
Modifiability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:338,rewrite,rewrite,338,https://psicode.org,https://github.com/psi4/psi4/pull/1243,1,['rewrite'],['rewrite']
Modifiability,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/479:176,variab,variables,176,https://psicode.org,https://github.com/psi4/psi4/pull/479,3,['variab'],['variables']
Modifiability,"## Description. This PR does two things:. 1. Adds a new compile-time option, `FORCE_PEDANTIC`, that adds the `-pedantic-errors` flag to the compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:640,variab,variable-length,640,https://psicode.org,https://github.com/psi4/psi4/pull/3145,2,"['portab', 'variab']","['portability', 'variable-length']"
Modifiability,"## Description. This PR makes a couple of changes to the handling of grids, and debugging thereof, within the COSX code:. 1. The code is refactored so that grids, instead of being stored in separate variables, are combined together in an `unordered_map` structure. Variables reliant on specific grids, such as `Q_mat_`, are treated similarly; and the code is adjusted to match. This allows for easy extension of the COSX code to support more grids in the future, if desired; and allows for smoother implementation of other features in this PR. 2. Control over the active COSX grid now relies on the `current_grid_` string variable instead of the boolean `early_screening_` variable. This fits better with the `unordered_map` arrangement this code proposes, and is not limited to a two-grid scheme. 3. Upon user request (i.e., setting `DEBUG` != 0), information about each grid is printed out. Information printed out includes: total number of grid points, total number of grid blocks, average grid points per block, and average grid points per atom. 4. The timer.dat file presents the amount of time spent in COSX per grid, as well as the total COSX time. ## User API & Changelog headlines; - [X] Setting `DEBUG` to != 0 now prints out specific information on each grid used during a COSX calculation. ## Dev notes & details; - [X] COSX grids, and related variables, are now grouped together in `unordered_map` objects, and the code is adjusted to match.; - [X] Control over active grids is now controlled by `gridopt_` instead of `early_screening_`.; - [X] For COSX calculations, timer.dat now generates COSX timings per-grid, as well as the overall COSX time.; - [X] Informational printout of COSX grids has been added. ## Questions; - [ ] What do we want to do with `early_screening_`? In this PR, it basically has no use, since its functionality has been replaced by that of `gridopt_`. Early screening as a tactic (i.e., using looser ERI screening thresholds for early SCF iterations) _is_ a thin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3032:137,refactor,refactored,137,https://psicode.org,https://github.com/psi4/psi4/pull/3032,5,"['Variab', 'refactor', 'variab']","['Variables', 'refactored', 'variable', 'variables']"
Modifiability,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1410:553,plugin,plugin,553,https://psicode.org,https://github.com/psi4/psi4/pull/1410,1,['plugin'],['plugin']
Modifiability,"## Description. With prompting and help from @SebWouters this PR updates ChemPS2 to v1.7 for DMRG-CASPT2 computations.; ## Todos; - [x] Psi4 now uses ChemPS2 tag 1.7; - [x] ChemPS2 no longer requires GSL, nuked that from CMake; - [x] Fiddled with the CMake a bit to clear up BLAS linking issues; - [x] Names have moved from `dmrgci` to `dmrg-ci` following discussion with @loriab @SebWouters ; - [x] Updated `src/dmrg` to latest version from ChemPS2; - [x] Added CASPT2 test case; - [x] Closes #263, #266, and #384 ; - [ ] Issue #150 is still open, for 1.0 we really need to clean this up. I think the two largest issues are the documentation and the keyword review. I think @loriab and @dgasmith will have to handle the rest.; - [ ] We have been experiencing some linking issues. While this works on my linux box and OS X laptop a few others testing this compilation would be beneficial. May close #264.; ## Questions; - [x] Keywords have moved around to align to the ""plugin"" version of ChemPS2 with a few minor alterations. Please check these out @loriab @kannon92 @SebWouters ; - [x] Do we want to add additional test cases?; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388:970,plugin,plugin,970,https://psicode.org,https://github.com/psi4/psi4/pull/388,1,['plugin'],['plugin']
Modifiability,## Description. With this change `psi4 --new-plugin` now creates `Makefile.conda`.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [X] Add `Makefile.conda` and fetch CMAKE_INSTALL_PREFIX; ## Status; - [X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/358:45,plugin,plugin,45,https://psicode.org,https://github.com/psi4/psi4/pull/358,1,['plugin'],['plugin']
Modifiability,## Description. `1.0rc2` prep; ## Todones; - [x] pull ambit and chemps repos from proper upstream; - [x] bump chemps to `1.7.1`; - [x] fix that +something plugins weren't actually getting their specialized code. ambit couldn't run with default (c2v) input file; - [x] prep version computer for `1.0rc2`; ## Status; - [x] Ready to go. curious about travis and scf5,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/430:155,plugin,plugins,155,https://psicode.org,https://github.com/psi4/psi4/pull/430,1,['plugin'],['plugins']
Modifiability,"## Description. docs and licenses and castup, oh my; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] few tweaks to the energy/grad docstring tables, #249 ; - [x] improve molecule and fn return docs, #351 & #352 ; - [x] update licenses in plugin template dir, since those are mixed py/c++ and awkward to do by script; - [x] hesitant replacement of cast-up with pyconstruct basis machinery. no differences detected in relevant output files (castup1/2/3, sapt2/4/5, pywrap-all), #285 ; - [x] do `[s]` on seconds in sapt; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/364:279,plugin,plugin,279,https://psicode.org,https://github.com/psi4/psi4/pull/364,1,['plugin'],['plugin']
Modifiability,## Description. fixed up some plugin templates that escaped the wavefunction pass; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Make [asm]ointegrals plugin templates wavefunction-pass (and basis-building) compliant; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/309:30,plugin,plugin,30,https://psicode.org,https://github.com/psi4/psi4/pull/309,2,['plugin'],['plugin']
Modifiability,"## Description. housekeeping; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] enables plugins to access wfn python only (w/o `psi4.wavefunction()`), if they're not needing it c-side; - [x] removes pyparsing.py that was pcmsolver legacy and cleans up a few wrappers refs; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/377:127,plugin,plugins,127,https://psicode.org,https://github.com/psi4/psi4/pull/377,1,['plugin'],['plugins']
Modifiability,"## Description. plugins from conda binary work; ## Todos; - [x] plugin Makefile.template had turned into 3 files with little differences, so ditched them and moved the configuration in cmake; - [x] updated conda and plugin docs; - [x] updated and condensed capabilities table. some features were getting exhaustively included, others not at all. and references weren't clear wrt energy or grad. so shrunk table, while deferring details to the individual module pages. everyone should look over this.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/370:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/pull/370,4,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,## Description. psi4-config had PYTHON_INTERPRETER rather than PYTHON_EXECUTABLE. I need this for my v2rdm plugin to compile with @loriab 's fancy configure script.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/378:21,config,config,21,https://psicode.org,https://github.com/psi4/psi4/pull/378,3,"['config', 'plugin']","['config', 'configure', 'plugin']"
Modifiability,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:1257,plugin,plugin,1257,https://psicode.org,https://github.com/psi4/psi4/pull/306,1,['plugin'],['plugin']
Modifiability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:119,inherit,inherit,119,https://psicode.org,https://github.com/psi4/psi4/pull/2628,3,"['inherit', 'refactor']","['inherit', 'refactor']"
Modifiability,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:44,adapt,adapt,44,https://psicode.org,https://github.com/psi4/psi4/pull/1914,1,['adapt'],['adapt']
Modifiability,"## Description; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. This should be merged close to #1804 . This one only hits def2 orbital and RI, while that one hits JFIT and JKFIT, so I think the only conflict should be in the NOTES file. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1806:419,plugin,plugins,419,https://psicode.org,https://github.com/psi4/psi4/pull/1806,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; ... and another one!. This PR is a continuation of the IncFock standardization effort initially started in https://github.com/psi4/psi4/pull/2682, and continued in https://github.com/psi4/psi4/pull/2792 and https://github.com/psi4/psi4/pull/2808. This PR continues to standardize the Incremental Fock process across the current integral-direct JK algorithms present in Psi4. However, this PR stands somewhat in contrast to https://github.com/psi4/psi4/pull/2682 and https://github.com/psi4/psi4/pull/2792. In those PRs, their IncFock schemes were adapted to use that of DFJCOSK, without removing the bells and whistles of their IncFock implementations (e.g., recomputing the full Fock matrix every so often, disabling IncFock after a given convergence threshold). In contrast, DFJCOSK is the template IncFock upon which the two previous PRs were based; however, DFJCOSK does not have the IncFock bells and whistles that DirectJK and DFJLinK had. Unmitigated, the incremental Fock procedure can actually significantly increase the number of SCF iterations needed to converged; and the IncFock bells and whistles in DirectJK and DFJLinK notably mitigate the effect of IncFock on SCF convergence counts. Without these bells and whistles, DFJCOSK runs the significant risk of excessive SCF iterations needed to converge when IncFock is enabled, an issue I have run into in my own calculations. This PR seeks to rectify the aforementioned issue by implementing the IncFock bells and whistles of DirectJK and DFJLinK into DFJCOSK. With these extra features, DFJCOSK can now recompute the full Fock matrix every n iterations, or disable IncFock past a given convergence threshold, at the will of the end user. These features can notably reduce the amount of SCF iterations needed to converge. This PR is also the continued effort to standardize IncFock among all integral-direct SCF algorithms in Psi4. With this PR, DirectJK, DFJLinK, and DFJCOSK will have effectively the exact same increme",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816:563,adapt,adapted,563,https://psicode.org,https://github.com/psi4/psi4/pull/2816,1,['adapt'],['adapted']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392:466,adapt,adaptation,466,https://psicode.org,https://github.com/psi4/psi4/pull/2392,1,['adapt'],['adaptation']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:112,config,config,112,https://psicode.org,https://github.com/psi4/psi4/pull/2391,2,"['config', 'inherit']","['config', 'inherit']"
Modifiability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #2210 revealed that an early test case had fallen prey to `phi_ao`'s Cartesian-only usefulness; - [x] mild enhancement to `diff_gbs` utility script so it can compare out-of-order basis sets; - [x] bump a few dep from-source-build versions. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2262:294,enhance,enhancement,294,https://psicode.org,https://github.com/psi4/psi4/pull/2262,1,['enhance'],['enhancement']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:424,extend,extend,424,https://psicode.org,https://github.com/psi4/psi4/pull/2142,2,['extend'],['extend']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes the wfn plugin; - [x] Adds a libecpint test to smoke so the c-f build can track it. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2988:369,plugin,plugin,369,https://psicode.org,https://github.com/psi4/psi4/pull/2988,1,['plugin'],['plugin']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] It turns out one can build a psi4 with Fortran extensions (detected, not compiled) w/o a Fortran compiler by letting the CXX compiler handle the linking. This is very useful on Windows where we want a `clang-cl` C/CXX compiler, but the only cohesive Fortran-including stack is the ming (gcc/g++/gfortran) one. So this adds an option `psi4_SKIP_ENABLE_Fortran` to _not_ enable Fortran when the code otherwise would. It doesn't check that the circumstances are suitable (that is, all detected, none to-be-compiled). Works great on Windows (that's how the conda pkg has dkh); haven't tried it on Linux.; - [x] Increasingly, where the <project>Config.cmake files get installed to is configurable, esp. as there's no one place cmake looks for linux/mac/win. So adding that option `psi4_INSTALL_CMAKEDIR`. You won't see a change unless you were customizing `CMAKE_INSTALL_DATADIR`.; - [x] also fix a couple install locations that were obvious for windows install.; - [x] stop testing the extra cli qcf tests for qcf master since those are run on mac, and it hangs. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:995,Config,Config,995,https://psicode.org,https://github.com/psi4/psi4/pull/2946,2,"['Config', 'config']","['Config', 'configurable']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Allow psi4 to be used with pydantic v1 or v2. ## Dev notes & details; - [x] still using pydantic v1 API but now tolerant of a v1 or v2 pydantic environment. qcel v0.26 and qcng v0.27 have recieved the same treatment. This is that part that's worthy of backport. It's already available on the c-f 1.8.1 build number `_2` conda packages, having been applied by patch.; - [x] bump qcel and qcng versions. for local build cases, switch from `python setup.py` to `pip install` from src. the latter is preferred as setup.py gets phased out, and, in any case, was necessary for qcel, which has transitioned from a setuptools to poetry build backend. this only handles the module, so if a module comes with an executable (e.g., `bin/qcengine` from qcng, that doesn't end up in the right place. ; - [x] fix docs GHA by constraining pb11 to 2.10 for the docs build spec. https://github.com/pybind/pybind11/pull/4679 seems to be the culprit. It's a good and standards-conforming change, but other tooling and/or typing stores on the internet to which sphinx refers all need time to adapt.; - [x] generalize a few cmake config dir locations for addons.; - [x] remove youtube links to F/I SAPT tutorials that have been taken private.; - [x] some build docs I had lying around. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:1192,adapt,adapt,1192,https://psicode.org,https://github.com/psi4/psi4/pull/3019,2,"['adapt', 'config']","['adapt', 'config']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `samples/` changes are autogenerated -- don't read them; - [x] update docs env to use psi4-path-advisor; - [x] the old versions of `variable`/`set_variable` fns on core and wfn have been warning-and-forwarding since v1.4 . we had a debugging case where that forward was the problem, so it's time to actually disable them. they'll still give upgrade advice but won't run; - [x] allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through `atin.extras[""extra_infiles""] = {""grid.dat"": <contents>}` and be sure to `atin.protocols.native_files = ""all""`, then one can retrieve through `atres.native_files[""grid_esp.dat""]` or `""grid_field.dat""` closes #2307 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3095:643,variab,variable,643,https://psicode.org,https://github.com/psi4/psi4/pull/3095,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Refactor `electric_field()` to return ElectricFieldInt rather than OneBodyAOInt. Fixes #2793 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper` made to stop immediate `static cast`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper`. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795:80,Refactor,Refactor,80,https://psicode.org,https://github.com/psi4/psi4/pull/2795,1,['Refactor'],['Refactor']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. closes #3040. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] print_variables prints array variables. (first and last element); - [x] Used this to test scf guesses in pytest.; - [x] Store new qc variable ""SCF TOTAL ENERGIES"" that is a list of all the SCF iteration energies. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3052:554,variab,variables,554,https://psicode.org,https://github.com/psi4/psi4/pull/3052,2,['variab'],"['variable', 'variables']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:497,Adapt,Adapt,497,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['Adapt'],['Adapt']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After seeing some GCC warnings related to sprintf usage I decided to modernize SAPTDIIS label generation with the use of `std::string` and a new utility function to retain the output format of `%2d`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `to_str_width`: converts any type supported by `std::to_string` to an `std::string`, and prepends as many spaces as required to meet the specified minimum width.; - [x] `SAPTDIIS::get_vec_label` and `SAPTDIIS::get_err_label` are modernized to return an `std::string`, instead of a `char*` that the caller needs to deallocate.; - [x] Functions using these two functions have been adapted to the changes. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2804:1111,adapt,adapted,1111,https://psicode.org,https://github.com/psi4/psi4/pull/2804,1,['adapt'],['adapted']
Modifiability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389:146,variab,variable,146,https://psicode.org,https://github.com/psi4/psi4/pull/2389,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Much like PR #2804, this PR is mostly about eliminating `sprintf`-related compiler warnings and modernizing C-style string handling to C++, this time in libmints' `BasisSet::print_detail_cfour`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernized `BasisSet::print_detail_cfour()`, highlights:; - [x] No longer uses `sprintf` and a fixed-size char array; - [x] Variables are made `const` wherever reasonable; - [x] Use of `std::find` on doubles is replaced by new functions (`none_of_equal` and `fpeq`) that implement a fuzzy compare with a default tolerance of 1E-14. Probably no behaviour change in practice (unless someone has basis fns which differ in exponent by >0 but <1E-14), but it is usually not recommended to use == on FP types, which is what `std::find` does.; - [x] The `slater.chemie.uni-mainz.de` URL has succumbed to link rot. Replaced with one that points to the latest version that is being preserved by the Internet Archive, both in the C++ and Python implementations.; - [x] Ran clang-format on `basisset.cc` and `basisset.h`. ## Questions; - [x] The new functions `none_of_equal` and `fpeq` are just living in `basisset.cc` and `basisset.h` right now. Would some other file be a better place to put them?. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] I do not have CFOUR, so I cannot really test if this breaks something. It should not, but the `std::find` change _is_ behaviour-altering, albeit only in a corner case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937:639,Variab,Variables,639,https://psicode.org,https://github.com/psi4/psi4/pull/2937,1,['Variab'],['Variables']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; My main goal is to provide an option for users to run FSAPT directly through the psiapi and not to have to create extra files and post-process the psi4 outputs. This is largely done by adding an fsapt analysis function to `./psi4/driver/driver.py`. I extended `fsapt.py` by moving its history to `psi4/driver/procrouting/sapt/fsapt.py` to enable users to either run the analysis directly after a `psi4.energy('fisapt0')` calculation through psi variables or through an `AtomicResults` as is demonstrated in `tests/pytests/test_fisapt.py`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Addition of `./psi4/driver/driver.py:fsapt_analysis()` to call fsapt analysis through the psi4 module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] FSAPT is now available directly through psi4 instead of post-processing output files; - [ ] FISAPT results can be stored in `AtomicResults` permitting the storage of results in a QCArchive database. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3222:331,extend,extended,331,https://psicode.org,https://github.com/psi4/psi4/pull/3222,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Printf format specifiers are required to match the type of the variable being printed. Using an incorrect format specifier may be UB. This PR resolves instances where the format specifier was incorrect. At least some of these have been triggering GCC warnings, so Psi4 now compiles with a couple fewer warnings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Likely no user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cctransort/memcheck`: Replace 14 instances of `%1lu` being used for printing an `int`, with `%d`. Make argument `const`.; - [x] `detci/olsengraph.cc`: fix one instance of `%3d` being used for printing a `size_t` integer; - [x] `dlpno/mp2.cc`: fix 12 instances of %d being used for `size_t` integers; - [x] `fnocc/lowmemory_triples.cc`: fix `%i` being used to print a `long`; - [x] `libfock/DirectJK.cc`: fix %3d being used for `size_t` integer; - [x] `libfock/solver.cc`: fix %d being used for `size_t` integer; - [x] `libmints/cdsalclist.cc`: fix 5 instances of %d being used for `size_t` integers; - [x] `libmints/extern.cc`: fix 3 instances of %d being used for `size_t` integers. Make argument `const &`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2771:143,variab,variable,143,https://psicode.org,https://github.com/psi4/psi4/pull/2771,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:80,Refactor,Refactored,80,https://psicode.org,https://github.com/psi4/psi4/pull/2980,4,"['Refactor', 'variab']","['Refactored', 'variable']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:588,plugin,plugin,588,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['plugin'],['plugin']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:834,plugin,plugin,834,https://psicode.org,https://github.com/psi4/psi4/pull/2785,1,['plugin'],['plugin']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:1293,adapt,adapted,1293,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['adapt'],['adapted']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the continuation of my previous MOInfo PR #3112, with the following general themes:. - Adding new docstrings and making existing ones machine readable for VS Code (and probably also Doxygen); - Rebalancing the class hierarchy by sinking things that get reused to the base class, and hoisting things up in the inheritance chain that only get used in one derived class; - Reducing visible and mutable state, as well as the contact surface of the classes. This is achieved by making data and functions as private as possible, providing access to data through getters returning `const&` when necessary, and making a few data members `const`. Having `const` members in classes is sometimes considered to be bad form, but AFAIK all of the downsides are already incurred on account of `MOInfoBase` having reference members. The git history on this branch is admittedly a bit messy, I changed my mind about a couple of things. LMK if that is a problem.; The next PR in this series will get to what I originally wanted to achieve and remove uses of the ugly ""cast Dimension object to pointer"" operators (see #2953) from `libmoinfo.`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No API changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:397,inherit,inheritance,397,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['inherit'],['inheritance']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; While testing PR https://github.com/psi4/psi4/pull/2756, I have discovered a regression introduced by an earlier PR (#2700) of mine.; Before `throw`ing, `psio_error()` tries to write some data to the scratch files. But if `psio_error()` is called due to a write error, and the scratch disk is completely full, then this write will also fail, leading to `psio_error()` getting called again, and an infinite recursion ensues. The source of the regression is that `psio_tocwrite()` ends up calling `wt_toclen()`, which has been enhanced in #2700 to use `psio_error()` if it fails.; This PR resolves the issue by not trying to write anything to scratch if `psio_error()` is called due to a write failure. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? This regression was new enough that no release suffered from it. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Do not call `psio_tocwrite()` in `psio_error()` if `errval == PSIO_ERROR_WRITE`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2773:605,enhance,enhanced,605,https://psicode.org,https://github.com/psi4/psi4/pull/2773,1,['enhance'],['enhanced']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` has some problems, the main scope of the function is quite ~~polluted~~ cluttered and it is a behemoth of a function.; This PR attempts to improve that by moving the incore/out-of-core decision logic into a separate function and file. `DPD::buf4_sort_axpy(...)` had the same code duplicated. The new function uses `const` wherever possible, its integers are now `int64_t` (with the exception of irrep numbers - having >2 billion irreps seems unlikely) and the `incore` variable is now a `bool`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` are slightly easier to read and debug; - [x] Code duplication between `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` is reduced; - [x] Possible reduction in `int` overflow risk via `int64_t`. ## Checklist; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717:571,variab,variable,571,https://psicode.org,https://github.com/psi4/psi4/pull/2717,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` is not exactly easy on the eyes. This PR attempts to improve that by reducing the scope pollution of the main scope of the function. Const is now used wherever appropriate. The `int` variables are suspect when it comes to overflowing, but this PR intends to be purely a cleanup that does not change any behavior, so all types are preserved as-is, modulo the addition of `const` qualifiers. Squash merge may be a good idea for this PR. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Make `DPD::buf4_sort(...)` slightly easier to read/debug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Compiles with -Wshadow -Werror=shadow. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2716:285,variab,variables,285,https://psicode.org,https://github.com/psi4/psi4/pull/2716,1,['variab'],['variables']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:1390,parameteriz,parameterize,1390,https://psicode.org,https://github.com/psi4/psi4/pull/2929,1,['parameteriz'],['parameterize']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:437,config,configure,437,https://psicode.org,https://github.com/psi4/psi4/pull/3021,2,['config'],"['configurable', 'configure']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Note: this isn't going to pass until after #2946~. ## Dev notes & details; - [x] We had the odd situation where the install directories (GNUInstallDirs) were pretty flexible. But it wasn't quite flexible enough for the usual Windows install layout (see https://github.com/psi4/psi4/blob/master/conda/win/meta.yaml#L32-L41). And if you got those all in the right place, the paths computation in `run_psi4.py` (-> `bin/psi4`) and `psi4/__init__.py` wasn't quite as flexible as GNUInstallDirs allowed. So I modernized the lot with pathlib and hopefully systemitized it a bit, too.; - [x] There's a weird case on linux c-f where we're in a git repo, but it's not the psi git repo. Thus versioning is much confused. The versioner can now escape from that case and version as if tarball. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] works for lin, mac, win conda-builds. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2948:246,flexible,flexible,246,https://psicode.org,https://github.com/psi4/psi4/pull/2948,3,['flexible'],['flexible']
Modifiability,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844:88,extend,extended,88,https://psicode.org,https://github.com/psi4/psi4/pull/844,1,['extend'],['extended']
Modifiability,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:491,config,configured,491,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['config'],['configured']
Modifiability,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:209,variab,variable,209,https://psicode.org,https://github.com/psi4/psi4/pull/1381,4,['variab'],['variable']
Modifiability,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/703:326,plugin,plugins,326,https://psicode.org,https://github.com/psi4/psi4/pull/703,1,['plugin'],['plugins']
Modifiability,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1039:115,plugin,plugin,115,https://psicode.org,https://github.com/psi4/psi4/pull/1039,3,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:926,adapt,adaption,926,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['adapt'],['adaption']
Modifiability,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1131:110,plugin,plugin,110,https://psicode.org,https://github.com/psi4/psi4/pull/1131,1,['plugin'],['plugin']
Modifiability,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/pull/1934,1,['plugin'],['plugin']
Modifiability,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1212:250,plugin,plugins,250,https://psicode.org,https://github.com/psi4/psi4/pull/1212,1,['plugin'],['plugins']
Modifiability,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:34,refactor,refactoring,34,https://psicode.org,https://github.com/psi4/psi4/pull/975,1,['refactor'],['refactoring']
Modifiability,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981:68,plugin,plugins,68,https://psicode.org,https://github.com/psi4/psi4/pull/981,2,['plugin'],['plugins']
Modifiability,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/672:108,variab,variable,108,https://psicode.org,https://github.com/psi4/psi4/pull/672,1,['variab'],['variable']
Modifiability,## Description; Adds more CC variables and fixes docstring. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/711:29,variab,variables,29,https://psicode.org,https://github.com/psi4/psi4/pull/711,1,['variab'],['variables']
Modifiability,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022:532,variab,variables,532,https://psicode.org,https://github.com/psi4/psi4/pull/2022,2,['variab'],['variables']
Modifiability,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:924,Extend,Extends,924,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['Extend'],['Extends']
Modifiability,"## Description; Allow symmetry to be used in SCF, but then convert the symmetrized wavefunction to a desymmetrized (C1) format for use by non-symmetry-aware modules. ## Todos; * **Developer Interest**; - [x] Correct bug in D_subset_helper() and F_subset_helper() for nonsymmetric matrices; - [x] Refactor D_subset_helper() and F_subset_helper() to a generic matrix_subset_helper(); - [x] Implement Wavefunction::c1_deep_copy() function; - [ ] Update bassisset_ to be C1 inside c1_deep_copy() function; - [ ] Call the new c1 deep copy from the driver in the appropriate places. * **User-Facing for Release Notes**; - [ ] Allow symmetry to be used in SCF even when post-SCF module is C1-only. ## Questions; - [x] The wavefunction object has a bassiset_ member that needs to be updated to C1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/737:296,Refactor,Refactor,296,https://psicode.org,https://github.com/psi4/psi4/pull/737,1,['Refactor'],['Refactor']
Modifiability,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/640:44,plugin,plugins,44,https://psicode.org,https://github.com/psi4/psi4/pull/640,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393:224,adapt,adapted,224,https://psicode.org,https://github.com/psi4/psi4/pull/2393,1,['adapt'],['adapted']
Modifiability,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043:399,enhance,enhances,399,https://psicode.org,https://github.com/psi4/psi4/pull/1043,1,['enhance'],['enhances']
Modifiability,"## Description; As the title says, plus some preparatory work for solvated response (but not yet implemented or tested). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The interface towards the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:361,extend,extended,361,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['extend'],['extended']
Modifiability,## Description; As the title says: calls to `conda config` are not saved in the cache. It works!. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:51,config,config,51,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['config'],['config']
Modifiability,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1927:45,variab,variable,45,https://psicode.org,https://github.com/psi4/psi4/pull/1927,1,['variab'],['variable']
Modifiability,## Description; Because @huangm29 needs the SVD function plugin-exposed for Forte purposes. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2585:57,plugin,plugin-exposed,57,https://psicode.org,https://github.com/psi4/psi4/pull/2585,1,['plugin'],['plugin-exposed']
Modifiability,## Description; Breaks off documentation and `.travis.yml` linting off of #809. I have added a `.pre-commit-config.yaml` that will check for:; - Filenames that would conflict on a case-insensitive filesystem; - Files that contain merge conflict strings.; - Python formatting with YAPF.; - C++ formatting with clang-format. Hooks are **opt-in** and require you to install [`pre-commit`](https://pre-commit.com/) (with pip or conda) and then run `pre-commit install` to integrate the actual hooks. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Document code style and how to enforce it.; - [x] Add `.pre-commit-config.yaml` and explain how to use it.; - [x] Use build stages on Travis and lint/clean up `.travis.yml` . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1594:108,config,config,108,https://psicode.org,https://github.com/psi4/psi4/pull/1594,2,['config'],['config']
Modifiability,## Description; Bug fix. Exports missing `MP3 TOTAL ENERGY` variable for `mp2.5` calculations. Expected by the `cbs` driver function. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:60,variab,variable,60,https://psicode.org,https://github.com/psi4/psi4/pull/1707,1,['variab'],['variable']
Modifiability,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:636,plugin,plugins,636,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['plugin'],['plugins']
Modifiability,"## Description; Bump the QCA stack. qcng 0.6.3 is minted but doesn't exist on c-f yet, so this'll be a nice test of does it do internal build. Some tools (LGTM) won't `git clone`, so switching remaining upstreams to URL, which thanks to GH is as flexible as `GIT_TAG`. Also, fix some cfour interface issues, fix some deprecationwarnings, and add mp2d to smoke tests. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1577:246,flexible,flexible,246,https://psicode.org,https://github.com/psi4/psi4/pull/1577,1,['flexible'],['flexible']
Modifiability,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/788:159,Extend,Extend,159,https://psicode.org,https://github.com/psi4/psi4/pull/788,2,['Extend'],['Extend']
Modifiability,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1911:366,extend,extending,366,https://psicode.org,https://github.com/psi4/psi4/pull/1911,2,"['Extend', 'extend']","['Extend', 'extending']"
Modifiability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:1006,variab,variables,1006,https://psicode.org,https://github.com/psi4/psi4/pull/1289,1,['variab'],['variables']
Modifiability,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:638,layers,layers,638,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['layers'],['layers']
Modifiability,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:117,inherit,inherited,117,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['inherit'],['inherited']
Modifiability,"## Description; Cleanup `ccenergy/rotate.cc`. There's more cleanup to do, but this is a sufficiently large algorithm change that I'm breaking up the PR here. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `ccenergy/rotate` return type changed to `bool`; - [x] Orbital rotation uses newer `libmints` tech for greatly reduced LoC; - [x] Gets rid of the last bit of code in `ccenergy` that needs to map between QT and Pitzer ordering. I'll leave it to a future PR to eject that from `ccenergy` permanently; - [x] Replaces yet more `MOInfo` variable access with wavefunction variable access. ## Checklist; - [x] `cc15` and `cc16` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2719:597,variab,variable,597,https://psicode.org,https://github.com/psi4/psi4/pull/2719,2,['variab'],['variable']
Modifiability,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2270:206,variab,variables,206,https://psicode.org,https://github.com/psi4/psi4/pull/2270,1,['variab'],['variables']
Modifiability,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:423,refactor,refactoring,423,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['refactor'],['refactoring']
Modifiability,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:121,refactor,refactoring,121,https://psicode.org,https://github.com/psi4/psi4/pull/2193,1,['refactor'],['refactoring']
Modifiability,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1217:411,variab,variable,411,https://psicode.org,https://github.com/psi4/psi4/pull/1217,2,['variab'],['variable']
Modifiability,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/689:275,plugin,plugins,275,https://psicode.org,https://github.com/psi4/psi4/pull/689,2,"['plugin', 'variab']","['plugins', 'variables-as-values']"
Modifiability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:99,plugin,plugin,99,https://psicode.org,https://github.com/psi4/psi4/pull/865,4,"['Adapt', 'adapt', 'plugin']","['Adapt', 'adapted', 'plugin']"
Modifiability,## Description; Discovered while poking around `wavefunction.h` for the ongoing `libtrans` refactor. 150 less lines of code with no effort sounds good to me. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed dead code. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1766:91,refactor,refactor,91,https://psicode.org,https://github.com/psi4/psi4/pull/1766,1,['refactor'],['refactor']
Modifiability,## Description; Drop string expansion of variables which breaks down when they are empty strings.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/652:41,variab,variables,41,https://psicode.org,https://github.com/psi4/psi4/pull/652,1,['variab'],['variables']
Modifiability,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734:210,flexible,flexible,210,https://psicode.org,https://github.com/psi4/psi4/pull/734,2,"['flexible', 'layers']","['flexible', 'layers']"
Modifiability,"## Description; ECP basissets, counter, AM lookup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed some `****` around ECP that weren't situated so as to satisfy our picky parser; - [x] Fixed unititialized ECP printing counter variable noticed by @fevangelista ; - [x] Extended dict looking up ECP AM noticed by @fevangelista ; * **User-Facing for Release Notes**; - [x] Add `ao_efp_multipole_potential` and `electric_field` integrals to mintshelper. ## Questions; - [ ] Should we suppress [this printing](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L500)? or redirect to outfile?; - [ ] Should consider origin question with mintshelper. Some ints use the PROPERTIES option to set origin. Just added ints take origin as an arg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/790:299,variab,variable,299,https://psicode.org,https://github.com/psi4/psi4/pull/790,2,"['Extend', 'variab']","['Extended', 'variable']"
Modifiability,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866:97,plugin,plugin,97,https://psicode.org,https://github.com/psi4/psi4/pull/866,2,['plugin'],['plugin']
Modifiability,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997:24,plugin,plugin,24,https://psicode.org,https://github.com/psi4/psi4/pull/997,2,['plugin'],['plugin']
Modifiability,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1241:16,Enhance,Enhances,16,https://psicode.org,https://github.com/psi4/psi4/pull/1241,1,['Enhance'],['Enhances']
Modifiability,"## Description; Exports Boys localization for plugins. ## Checklist; - [X] ""smoke"" tests pass. ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1026:46,plugin,plugins,46,https://psicode.org,https://github.com/psi4/psi4/pull/1026,1,['plugin'],['plugins']
Modifiability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:768,Variab,Variable,768,https://psicode.org,https://github.com/psi4/psi4/pull/952,1,['Variab'],['Variable']
Modifiability,"## Description; Exports symbols for my tutorial plugins, some private plugins, and gpu_dfcc. * **User-Facing for Release Notes**; - [x] GPU-DFCC plugin (https://github.com/edeprince3/gpu_dfcc) will compile and run. ## Checklist; - [x] quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/992:48,plugin,plugins,48,https://psicode.org,https://github.com/psi4/psi4/pull/992,3,['plugin'],"['plugin', 'plugins']"
Modifiability,## Description; Expose P::e.options in Python and enable pure pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720:71,plugin,plugins,71,https://psicode.org,https://github.com/psi4/psi4/pull/720,1,['plugin'],['plugins']
Modifiability,## Description; Exposes `FittingMetric` to plugins for one of @fevangelista's students. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2420:43,plugin,plugins,43,https://psicode.org,https://github.com/psi4/psi4/pull/2420,1,['plugin'],['plugins']
Modifiability,## Description; Exposes options class functions necessary for pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/725:71,plugin,plugins,71,https://psicode.org,https://github.com/psi4/psi4/pull/725,1,['plugin'],['plugins']
Modifiability,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024:686,variab,variable,686,https://psicode.org,https://github.com/psi4/psi4/pull/1024,1,['variab'],['variable']
Modifiability,"## Description; Fix a minor logic error in DLPNO-MP2 code, where Mulliken charges are used for determining local density fitting domains, also cleans up variable names (removes underscores from variables that are not instance variables). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2707:153,variab,variable,153,https://psicode.org,https://github.com/psi4/psi4/pull/2707,3,['variab'],"['variable', 'variables']"
Modifiability,## Description; Fix a stupid typo from DIIS refactor. Needed to prevent a crash in Forte. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2441:44,refactor,refactor,44,https://psicode.org,https://github.com/psi4/psi4/pull/2441,1,['refactor'],['refactor']
Modifiability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:238,variab,variables,238,https://psicode.org,https://github.com/psi4/psi4/pull/1314,2,['variab'],['variables']
Modifiability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:171,variab,variables,171,https://psicode.org,https://github.com/psi4/psi4/pull/1637,2,['variab'],"['variable', 'variables']"
Modifiability,"## Description; Fixes #719 by changing the `name` that's passed to the C++ BasisSet constructor. It used to be like `file /path/to/basis/set.gbs`, but that it very tricky to read the basis set name from a dumped wavefunction and reinstantiate the basis set. For built-in basis sets, it's not too bad -- we can just [parse the string](https://github.com/psi4/psi4/blob/9d1564e67837bbf7f348c1600aa2c353457671ec/psi4/driver/procrouting/proc.py#L1295). For custom basis sets that assign different basis sets to different atoms, that string ends up as a `'+'`-delimited list of gbs files, which isn't information preserving. @andysim: if you're going to rewrite this stuff anyways, it might not be worth merging this. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721:649,rewrite,rewrite,649,https://psicode.org,https://github.com/psi4/psi4/pull/721,1,['rewrite'],['rewrite']
Modifiability,"## Description; Fixes a bug in the semicanonicalization procedure cause by an uninitialized matrix. This also exposes a `set_Lagrangian` in the `Wavefunction` class, which is needed to make gradients work for plugins not based on `Wavefunction`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847:209,plugin,plugins,209,https://psicode.org,https://github.com/psi4/psi4/pull/1847,1,['plugin'],['plugins']
Modifiability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:858,plugin,plugin,858,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['plugin'],['plugin']
Modifiability,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:498,extend,extended,498,https://psicode.org,https://github.com/psi4/psi4/pull/2543,2,"['Refactor', 'extend']","['Refactor', 'extended']"
Modifiability,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:447,plugin,plugin,447,https://psicode.org,https://github.com/psi4/psi4/pull/593,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/557:927,adapt,adaptation,927,https://psicode.org,https://github.com/psi4/psi4/pull/557,1,['adapt'],['adaptation']
Modifiability,"## Description; Goodbye, unused variable that leaks memory. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2466:32,variab,variable,32,https://psicode.org,https://github.com/psi4/psi4/pull/2466,1,['variab'],['variable']
Modifiability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:79,config,config,79,https://psicode.org,https://github.com/psi4/psi4/pull/554,5,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872:266,plugin,plugin,266,https://psicode.org,https://github.com/psi4/psi4/pull/872,1,['plugin'],['plugin']
Modifiability,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/826:229,variab,variables,229,https://psicode.org,https://github.com/psi4/psi4/pull/826,1,['variab'],['variables']
Modifiability,"## Description; I need to give `psimrcc` a wavefunction for the upcoming `libtrans` refactor. Step one is to take the existing `compute_energy`-like functions and make them conform to the normal `Wavefunction::compute_energy` API. No arguments. Returns a double. A follow-up PR will be needed to actually give `psimrcc` a wavefunction. I'm hopeful this will not be another long series like the `occ` one. I don't care whether this is in 1.4 or not. Pinging @fevangelista and @andysim, the two people who have some chance of remembering how this code works. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Conform `psimrcc`'s myriad `Wavefunction::compute_energy`-like functions to the `Wavefunction` interface, as prep for the next PR.; - [x] Removed unpublished ""perturbative CBS"" capabilities from `psimrcc` and adds appropriate warnings. ## Questions; - [x] @fevangelista, can you explain what the ""perturbative CBS"" is? Those should be added to the current energy somehow, but I can't tell which of the three flavors to add, or even what this is. ## Checklist; - [x] `ctest -R psimrcc` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:84,refactor,refactor,84,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['refactor'],['refactor']
Modifiability,"## Description; I originally had grand plans for a few of the base classes, but this turned out to be harder then expected so this PR kind of took a turn. Best description of this is perhaps ""general cleanup"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Might compile faster. As a note two libraries have moved:; ```; ""psi4/libparallelPsiOutStream.h"" -> ""psi4/libpsi4util/PsiOutStream.h""; ""psi4/libparallel/process.h"" -> ""psi4/libpsi4util/process.h""; ```; There is no longer a `""psi4/libparallel/libparallel.h""`, you may need to include one of the two above libraries. - [x] Removed several IWL functions; - [x] Removed some `libciomr` functions; - [x] Cleaned up `libparallel`; - [x] Fixed a few bugs and syntax issues in Wavefunction; - [x] Removed some headers from `Process` and `psi4-dec` which required a larger header shake up. I hope we are finally starting to peel away the points where we accidentally include too many headers and those headers go viral.; - [x] Still working to pull pybind11 out of a few layers; - [x] A GEMM routine with the tag line ""a reasonably fast matrix multiply (at least on the DEC3100)"" was removed.; - [x] `extern1` was temporarily removed from quickest. Still need to decided on what to do here. ## Questions; - [x] Anything else we can do?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736:1087,layers,layers,1087,https://psicode.org,https://github.com/psi4/psi4/pull/736,1,['layers'],['layers']
Modifiability,"## Description; I recently discovered a bug where CBS finite-difference Hessians will crash on systems with zero dipole moment. This is due to `CompositeComputer` not loading a dipole with entries all exactly zero into qcvars. This fix checks that CBS results are not None rather than have any non-zero entries before loading into qcvars. I have verified that this fixes the crash and that e.g. non-existing Hessians are stiil not loaded into result qcvars. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing CBS extrapolated finite-difference Hessians to crash on systems with zero dipole moment. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `CompositeComputer` loads variables with zero'd entries in qcvars.; - [x] `FiniteDifferenceComputer` checks for dipoles when doing finite-difference by gradients. ## Checklist; - [x] cbs tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2759:1006,variab,variables,1006,https://psicode.org,https://github.com/psi4/psi4/pull/2759,1,['variab'],['variables']
Modifiability,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2106:516,plugin,plugin,516,https://psicode.org,https://github.com/psi4/psi4/pull/2106,1,['plugin'],['plugin']
Modifiability,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:225,variab,variable,225,https://psicode.org,https://github.com/psi4/psi4/pull/1950,2,['variab'],['variable']
Modifiability,"## Description; In master Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for revie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970:755,variab,variables,755,https://psicode.org,https://github.com/psi4/psi4/pull/1970,1,['variab'],['variables']
Modifiability,"## Description; In preparation of the DLPNO-CCSD(T) code, I have changed the class heirarchy of the DLPNO module. Currently, there is only a `DLPNOMP2` class. However, I have split that class into a `DLPNO -> DLPNOMP2` inheritance heirarchy, to allow for ; `DLPNO -> DLPNOCCSD -> DLPNOCCSD_T` in the future, and potentially `DLPNO -> DLPNOMP2 -> DLPNOMP2_F12`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes class heirarchy of DLPNO module; - [x] Changes the way the DOI grids are handled in DLPNO-MP2, adds separate user options for the DOI grid specifically. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3192:219,inherit,inheritance,219,https://psicode.org,https://github.com/psi4/psi4/pull/3192,1,['inherit'],['inheritance']
Modifiability,## Description; Includes the small missing term in SAPT E(30)ind (issue #1677) with one extra DDOT of size o*v. The additional term is passed around using the variable `e_ind30_vsasb_term_` defined in `sapt2p3.h` - please change if that's not the preferred way. The results on the A24 database agree with the Psi4NumPy code of Jonathan Waldrop. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803:159,variab,variable,159,https://psicode.org,https://github.com/psi4/psi4/pull/1803,1,['variab'],['variable']
Modifiability,"## Description; Initial draft. Next step is going to be ensure more backwards compatibility... This will involve more complicated manipulations of the current module, probably. Mark III of this refactor is going to use this code in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3220:194,refactor,refactor,194,https://psicode.org,https://github.com/psi4/psi4/pull/3220,1,['refactor'],['refactor']
Modifiability,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:255,plugin,plugins,255,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['plugin'],['plugins']
Modifiability,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942:49,flexible,flexible,49,https://psicode.org,https://github.com/psi4/psi4/pull/942,1,['flexible'],['flexible']
Modifiability,## Description; Makes changes suggested by lgtm; ATTENTION: Changes local variable names that overlapped with parameter names in ; libfock/hamiltonian.cc. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1635:74,variab,variable,74,https://psicode.org,https://github.com/psi4/psi4/pull/1635,1,['variab'],['variable']
Modifiability,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:723,extend,extended,723,https://psicode.org,https://github.com/psi4/psi4/pull/2190,1,['extend'],['extended']
Modifiability,"## Description; Minor ECP fixes, so that more ECP's from EMSL Basis set exchange work out of the box. See issue #926 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extended naming tables to include H-shell (Stuttgart-Cologne ECP's eg. for Hg need it); - [x] Trapping ""0.0"" in contraction coefficients. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937:234,Extend,Extended,234,https://psicode.org,https://github.com/psi4/psi4/pull/937,1,['Extend'],['Extended']
Modifiability,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2425:137,variab,variable,137,https://psicode.org,https://github.com/psi4/psi4/pull/2425,2,['variab'],['variable']
Modifiability,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394:717,adapt,adapted,717,https://psicode.org,https://github.com/psi4/psi4/pull/1394,1,['adapt'],['adapted']
Modifiability,"## Description; Modelled (esp. the bash) on pybind11, this imposes a script checking for tabs and trailing whitespace on the C++ and flake8 on the python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] a dozen or so python files converted, incl. driver/driver and driver/procedures/proc. Many more skipped for now.; - [x] flake governed by /.flake8 file; - [x] C++ goverened by /cmake/check-style.sh file . Right now, just has a couple checks, and it's not even run in the travis b/c so many tabs in C++ code. . ## Questions; - [ ] Do we want to do something like this? [Here's](https://travis-ci.org/loriab/psi4/builds/179363444) what it looks like. Compared to compiling, it's a very short build. Seems an easy way to get style checking that's non-binding (can still merge if fails) and doesn't involve everyone configuring their git hooks.; - [ ] I set max line width at 120, as I can live with that. It's open for discussion. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530:882,config,configuring,882,https://psicode.org,https://github.com/psi4/psi4/pull/530,1,['config'],['configuring']
Modifiability,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541:224,variab,variables,224,https://psicode.org,https://github.com/psi4/psi4/pull/2541,2,['variab'],['variables']
Modifiability,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488:396,plugin,plugins,396,https://psicode.org,https://github.com/psi4/psi4/pull/488,1,['plugin'],['plugins']
Modifiability,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643:225,variab,variable,225,https://psicode.org,https://github.com/psi4/psi4/pull/643,1,['variab'],['variable']
Modifiability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:565,variab,variable,565,https://psicode.org,https://github.com/psi4/psi4/pull/1122,1,['variab'],['variable']
Modifiability,"## Description; OpenMP detection is very finely balanced to compensate for LAPACK demands, `libgomp` self aggrandizement, and psi4's need to sanely and transparently impose the psi4-compile-omp status on any derived plugins. Unfortunately, #1348 disturbed some of that for the particular case of plugins with fewer active languages than their parent psi4. A plugin (dfmp2) wasn't inheriting openmp from psi4 and thus was giving unknown openmp pragma warnings upon compile. This wasn't getting caught on linux because I was only checking that iomp5/gomp/omp weren't mixing, not that at least one was present. By happenstance, this did trigger an error on Mac in the course of building `psi4-dev`. This seems to patch things up on Linux. Will use this branch to try out Mac again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:216,plugin,plugins,216,https://psicode.org,https://github.com/psi4/psi4/pull/1520,4,"['inherit', 'plugin']","['inheriting', 'plugin', 'plugins']"
Modifiability,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857:360,variab,variables,360,https://psicode.org,https://github.com/psi4/psi4/pull/857,2,['variab'],['variables']
Modifiability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:621,Rewrite,Rewrite,621,https://psicode.org,https://github.com/psi4/psi4/pull/2637,1,['Rewrite'],['Rewrite']
Modifiability,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949:293,variab,variable,293,https://psicode.org,https://github.com/psi4/psi4/pull/1949,1,['variab'],['variable']
Modifiability,## Description; PSI_API for eigsort function in libciomr. ## Todos; Nothing notable... just fixes missing symbol in one of my plugins. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049:126,plugin,plugins,126,https://psicode.org,https://github.com/psi4/psi4/pull/1049,1,['plugin'],['plugins']
Modifiability,"## Description; Part of #1144. DFOCC was already formatted in #797, so there's very few changes. DMRG we want to avoid formatting so can easily diff with the plugin in the CheMPS2 repo. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1392:158,plugin,plugin,158,https://psicode.org,https://github.com/psi4/psi4/pull/1392,1,['plugin'],['plugin']
Modifiability,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2049:40,refactor,refactor,40,https://psicode.org,https://github.com/psi4/psi4/pull/2049,1,['refactor'],['refactor']
Modifiability,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/490:29,plugin,plugin,29,https://psicode.org,https://github.com/psi4/psi4/pull/490,1,['plugin'],['plugin']
Modifiability,## Description; Preparing for future code by improving docstrings and removing unused member variables. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2610:93,variab,variables,93,https://psicode.org,https://github.com/psi4/psi4/pull/2610,1,['variab'],['variables']
Modifiability,## Description; Prevents the user from using a C++ keyword as a name for a new plugin. It came up on [this](http://forum.psicode.org/t/trouble-in-build-plugin-for-psi4/349) forum post. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Prevents the user from using a C++ reserved keyword as a name for a new plugin. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532:79,plugin,plugin,79,https://psicode.org,https://github.com/psi4/psi4/pull/532,3,['plugin'],"['plugin', 'plugin-for-']"
Modifiability,"## Description; Previously, the `dertype` specified in a frequency or optimization-with-hessian computaiton wouldn't get passed on to the pre-hessian gradient. This is now fixed. For optimizations, we can do one better and pass in the last gradient, so we don't need to recompute it. While solving this, I uncovered that supplying a dertype that was ""too high"" for the derivative level would lead to the default case of energy-only computations. That is also fixed. **Although this is an enhancement, this is also a bug fix.** Without this PR, I have no way to get a frozen core MP2 optimization with a `full_hess_every` hessian. The user is responsible for supplying the `dertype`, and they currently have no way to get the `dertype` argument to the pre-hessian gradient. ## Checklist; - [x] Tested this solved my fc-MP2 use case; - [x] Tested this solved the case of a dertype=2 RHF hessian. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551:488,enhance,enhancement,488,https://psicode.org,https://github.com/psi4/psi4/pull/1551,1,['enhance'],['enhancement']
Modifiability,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:658,variab,variable,658,https://psicode.org,https://github.com/psi4/psi4/pull/3226,1,['variab'],['variable']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] deprecate DIPOLE X and QUADRUPOLE XX qcvars that were anomolously in Debye-Ang units; - [x] add DIPOLE and QUADRUPOLE array qcvars in atomic units; - [x] edit all the tests so that they check both for the interim; - [x] the `P::e.globals` and `Wfn.variables_` maps work in `core.Matrix`. Want to keep this storage for continuity and the preservation of symmetry, but 2D is not what one expects for dipole or charges (much less what one expects for octupole). So selected properties vars are returned as ndarray from the `variable()` query fns. This means you can't assume the return is a Matrix.; - [x] schema handling addressed accordingly and tested for run_json and run_qcschema setups. Note that return units now au; - [x] handling >quadrupole. **EDIT** change of plans from first post. in order not to have to go from unique multipole elements (10 for octupole) to complete array (27) c-side and flat since P::e.globals restricted to Matrix, now only the compressed array is stored in globals/variables_ and that gets turned into (and back) the complete multidimensional ndarray when queried py-side. quadrupole has been turned back c-side to `(6)`, rather than `(3,3)` for consistency with the other poles. ## Checklist; - [x] Tests added for any new features ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1800:607,variab,variable,607,https://psicode.org,https://github.com/psi4/psi4/pull/1800,1,['variab'],['variable']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:501,plugin,plugin,501,https://psicode.org,https://github.com/psi4/psi4/pull/1031,2,['plugin'],['plugin']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950:398,plugin,plugins,398,https://psicode.org,https://github.com/psi4/psi4/pull/950,1,['plugin'],['plugins']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:605,plugin,plugins,605,https://psicode.org,https://github.com/psi4/psi4/pull/659,2,"['Plugin', 'plugin']","['PluginCache', 'plugins']"
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486:399,variab,variables,399,https://psicode.org,https://github.com/psi4/psi4/pull/486,1,['variab'],['variables']
Modifiability,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/509:166,evolve,evolve,166,https://psicode.org,https://github.com/psi4/psi4/pull/509,1,['evolve'],['evolve']
Modifiability,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:723,plugin,plugin,723,https://psicode.org,https://github.com/psi4/psi4/pull/2982,1,['plugin'],['plugin']
Modifiability,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543:189,plugin,plugin,189,https://psicode.org,https://github.com/psi4/psi4/pull/543,2,['plugin'],"['plugin', 'plugins']"
Modifiability,## Description; Recent changes to the cmake build systems introduced an issue when compiling psi4 plugins and Forte on a Mac. Compilation fails at the linking stage with the error; ```; ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB); ```. This PR reverts two changes. ## Questions; - [ ] Is there a better solution that still uses `pybind11_add_module(core MODULE NO_EXTRAS core.cc)`?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640:98,plugin,plugins,98,https://psicode.org,https://github.com/psi4/psi4/pull/1640,1,['plugin'],['plugins']
Modifiability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:417,variab,variable,417,https://psicode.org,https://github.com/psi4/psi4/pull/2030,1,['variab'],['variable']
Modifiability,"## Description; Refactor `assemble_Q` [like `JK_deriv2`](https://github.com/psi4/psi4/pull/2994). The code had the same problem, so I use the same solution. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `assemble_Q` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `assemble_Q` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf_hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2996:16,Refactor,Refactor,16,https://psicode.org,https://github.com/psi4/psi4/pull/2996,2,['Refactor'],"['Refactor', 'Refactored']"
Modifiability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1095,plugin,plugin,1095,https://psicode.org,https://github.com/psi4/psi4/pull/623,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,## Description; Restore a `const` lost during the Vector refactor. Quick merge appreciated - needed to fix Forte. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2705:57,refactor,refactor,57,https://psicode.org,https://github.com/psi4/psi4/pull/2705,1,['refactor'],['refactor']
Modifiability,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/540:16,Rewrite,Rewrite,16,https://psicode.org,https://github.com/psi4/psi4/pull/540,1,['Rewrite'],['Rewrite']
Modifiability,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1273:16,Rewrite,Rewrite,16,https://psicode.org,https://github.com/psi4/psi4/pull/1273,1,['Rewrite'],['Rewrite']
Modifiability,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:38,enhance,enhancements,38,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['enhance'],['enhancements']
Modifiability,"## Description; Simple fix for the SCF plugin template, to work with the new `set_variable` syntax. ## Questions; - [x] What about [these](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_nbody.py#L295-L298)? I only discovered them by grepping the codebase so I have no evidence to suggest they should be changed - it's probably the difference between the `wfn` or `core` namespaces, vs. the `psi4` namespace being used in the plugin snippet. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1680:39,plugin,plugin,39,https://psicode.org,https://github.com/psi4/psi4/pull/1680,2,['plugin'],['plugin']
Modifiability,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/624:57,plugin,plugins,57,https://psicode.org,https://github.com/psi4/psi4/pull/624,1,['plugin'],['plugins']
Modifiability,"## Description; Since we [say we're returning the dimer wfn](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L505-L507), let's return the dimer wfn for fisapt. currently returning a `psi4.core.FISAPT` object that does not inherit from Wfn. Hence no way to drive OEPROP on a sapt calc. ## Checklist; - [x] I checked that the dipole/quadrupole from running oeprop on this returned wfn matches a forced quadrupole in the early scf_helper; - [x] ran all the sapt tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1201:237,inherit,inherit,237,https://psicode.org,https://github.com/psi4/psi4/pull/1201,1,['inherit'],['inherit']
Modifiability,"## Description; So I wrote `run_dftd3` back in the day. Then @dgasmith unified dftd3 and libdisp handling through the `EmpiricalDispersion` class. Then @PeterKraus added the DFT dict_builder that allowed dispersion parts of a functional. Then @hokru added NL dispersion into the mix. And we were all very courteous and worked around each other's code, yet all used selected pieces from dashparam.py. The result was a tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:614,flexible,flexible,614,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['flexible'],['flexible']
Modifiability,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1032:328,plugin,plugins,328,https://psicode.org,https://github.com/psi4/psi4/pull/1032,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:46,Config,ConfigMath,46,https://psicode.org,https://github.com/psi4/psi4/pull/615,2,['Config'],['ConfigMath']
Modifiability,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269:260,variab,variables,260,https://psicode.org,https://github.com/psi4/psi4/pull/1269,1,['variab'],['variables']
Modifiability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:581,variab,variable,581,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['variab'],['variable']
Modifiability,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2561:134,variab,variables,134,https://psicode.org,https://github.com/psi4/psi4/pull/2561,1,['variab'],['variables']
Modifiability,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/619:438,variab,variables,438,https://psicode.org,https://github.com/psi4/psi4/pull/619,1,['variab'],['variables']
Modifiability,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1445:659,variab,variables,659,https://psicode.org,https://github.com/psi4/psi4/pull/1445,1,['variab'],['variables']
Modifiability,## Description; T1 and D1 diagnostics computed by ccsd/df-ccsd routed through fnocc are added to psi4 global variables. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712:109,variab,variables,109,https://psicode.org,https://github.com/psi4/psi4/pull/712,1,['variab'],['variables']
Modifiability,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/pull/2462,3,['variab'],"['variable', 'variables']"
Modifiability,"## Description; Thanks to @JonathonMisiewicz for catching this one!. This PR fixes a typo in `SplitJK::set_lr_symmetric`, wherein the `lr_symmetric_` variable is assigned to itself rather than the intended behavior of being assigned to the function input. This also opens up the question of why this wasn't caught in testing, which I plan on exploring further and addressing in a second PR. Currently, composite methods where `LinK` is used, throw exceptions for cases where `lr_symmetric_` is set to false; but composite methods using `COSX` does not. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] `SplitJK::set_lr_symmetric` now behaves as intended. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3055:150,variab,variable,150,https://psicode.org,https://github.com/psi4/psi4/pull/3055,1,['variab'],['variable']
Modifiability,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:521,variab,variables,521,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['variab'],['variables']
Modifiability,"## Description; The `JK_deriv2` function exists to compute the overlap-derivative-times-TEI part of the right side of the CPHF equation. It's a J-term and a K-like term. with overlap derivative integrals instead of a density.[1] The previous algorithm to do this first computed the alpha spin part in one function call, and then the beta spin part in another function call. This approach was redundant. The first function call had all the intermediates _necessary_ to compute the beta part, but didn't use them. As a result, the function re-computed JK. This PR refactors `JK_deriv2` so it computes both spin cases in a single function call. [1] = There's also a Vx term, but its implementation was both unused and buggy. Now it's just unused. Trying to use it in the _old_ way would be even more redundant. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The UHF hessian algorithm has been slightly adjusted, which should lead to slightly faster computations. Please report any errors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `JK_deriv2` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `JK_deriv2` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf-hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:562,refactor,refactors,562,https://psicode.org,https://github.com/psi4/psi4/pull/2994,2,"['Refactor', 'refactor']","['Refactored', 'refactors']"
Modifiability,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409:104,config,configured,104,https://psicode.org,https://github.com/psi4/psi4/pull/1409,1,['config'],['configured']
Modifiability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:50,flexible,flexible,50,https://psicode.org,https://github.com/psi4/psi4/pull/1235,1,['flexible'],['flexible']
Modifiability,"## Description; The idea is to try to extend Psi4 to the calculation of repulsive potentials. Unfortunately, some of Psi4's machinery is preventing such calculations to be run due to chemists' short-sightedness ;). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change cutoffs so that close-lying atoms are accepted by the program (the cutoffs / disabling them should be an input parameter); - [ ] Fix problem with the code putting atoms on top of each other. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843:38,extend,extend,38,https://psicode.org,https://github.com/psi4/psi4/pull/1843,1,['extend'],['extend']
Modifiability,"## Description; The next batch of readability fixes to `dfhelper.cc`. The potentially contentious issue here is that I remove the `AO_files_` variable, which was just an identity mapping. Plenty more cleanup to go!. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2654:142,variab,variable,142,https://psicode.org,https://github.com/psi4/psi4/pull/2654,1,['variab'],['variable']
Modifiability,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:470,variab,variables,470,https://psicode.org,https://github.com/psi4/psi4/pull/2171,2,['variab'],['variables']
Modifiability,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2100:1285,variab,variables,1285,https://psicode.org,https://github.com/psi4/psi4/pull/2100,1,['variab'],['variables']
Modifiability,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:282,inherit,inheritance,282,https://psicode.org,https://github.com/psi4/psi4/pull/1061,3,['inherit'],"['inheritance', 'inherits']"
Modifiability,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:51,refactor,refactors,51,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['refactor'],['refactors']
Modifiability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:523,variab,variables,523,https://psicode.org,https://github.com/psi4/psi4/pull/1383,1,['variab'],['variables']
Modifiability,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:125,extend,extended,125,https://psicode.org,https://github.com/psi4/psi4/pull/1001,1,['extend'],['extended']
Modifiability,"## Description; This PR ; (a) adds checks that alloc's have been succesful in optking; (b) rewrites detci's print_config routine to use dynamic memory allocation instead of static arrays, which I believe caused issue #606. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607:91,rewrite,rewrites,91,https://psicode.org,https://github.com/psi4/psi4/pull/607,1,['rewrite'],['rewrites']
Modifiability,"## Description; This PR added missing class variables in the assignment operator to reflect the current status of Options, which ensures a correct copy behavior. ## Todos; - [x] Add missing class variables in Options::operator=. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1437:44,variab,variables,44,https://psicode.org,https://github.com/psi4/psi4/pull/1437,2,['variab'],['variables']
Modifiability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:781,variab,variables,781,https://psicode.org,https://github.com/psi4/psi4/pull/2443,1,['variab'],['variables']
Modifiability,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644:486,variab,variables,486,https://psicode.org,https://github.com/psi4/psi4/pull/644,1,['variab'],['variables']
Modifiability,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:158,adapt,adapt,158,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['adapt'],['adapt']
Modifiability,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:42,plugin,plugin,42,https://psicode.org,https://github.com/psi4/psi4/pull/850,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:45,plugin,plugin,45,https://psicode.org,https://github.com/psi4/psi4/pull/1855,3,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:51,variab,variables,51,https://psicode.org,https://github.com/psi4/psi4/pull/2534,7,['variab'],"['variable', 'variables']"
Modifiability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:682,variab,variables,682,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['variab'],['variables']
Modifiability,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:35,refactor,refactored,35,https://psicode.org,https://github.com/psi4/psi4/pull/571,2,"['Refactor', 'refactor']","['Refactors', 'refactored']"
Modifiability,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1956:282,refactor,refactor,282,https://psicode.org,https://github.com/psi4/psi4/pull/1956,2,['refactor'],['refactor']
Modifiability,"## Description; This PR does cleanup in `dmrgscf` to mark variables const, remove non-RAII dynamic memory, and switch from pointers to references where possible. This PR is in preparation for updating the deprecated molden call. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG memory and `const` cleanup. ## Checklist; - [x] DMRG tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2383:58,variab,variables,58,https://psicode.org,https://github.com/psi4/psi4/pull/2383,1,['variab'],['variables']
Modifiability,"## Description; This PR eliminates the old debugging and timer system from `psimrcc`. All debugger code is gone for good, since we have `lldb` and such nowadays. All timer code now uses the more standard `libqt` timer system. This eliminates two globals from psimrcc and several hundreds of lines of code. This also eliminates some functions that were never completely coded. They had no reason to be in the code. This is part of the yak shaving needed for the gradient refactor. Yes, seriously. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated `psimrcc` globals and standardized timer behavior. ## Checklist; - [x] `ctest -R psimrcc -j4` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1879:470,refactor,refactor,470,https://psicode.org,https://github.com/psi4/psi4/pull/1879,1,['refactor'],['refactor']
Modifiability,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:64,plugin,plugins,64,https://psicode.org,https://github.com/psi4/psi4/pull/1400,1,['plugin'],['plugins']
Modifiability,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:155,flexible,flexible,155,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['flexible'],['flexible']
Modifiability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:210,refactor,refactored,210,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['refactor'],['refactored']
Modifiability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:812,inherit,inherited,812,https://psicode.org,https://github.com/psi4/psi4/pull/2124,1,['inherit'],['inherited']
Modifiability,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2447:91,adapt,adapts,91,https://psicode.org,https://github.com/psi4/psi4/pull/2447,2,['adapt'],"['adaptation', 'adapts']"
Modifiability,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2349:403,variab,variable,403,https://psicode.org,https://github.com/psi4/psi4/pull/2349,2,['variab'],['variable']
Modifiability,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2350:89,refactor,refactoring,89,https://psicode.org,https://github.com/psi4/psi4/pull/2350,2,"['refactor', 'variab']","['refactoring', 'variable']"
Modifiability,"## Description; This PR gets rid of the `TaskListComputer` base class, condensing it into `OEProp`, the only class that inherited from it. We gained nothing from having that class around. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2531:120,inherit,inherited,120,https://psicode.org,https://github.com/psi4/psi4/pull/2531,1,['inherit'],['inherited']
Modifiability,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498:378,adapt,adapt,378,https://psicode.org,https://github.com/psi4/psi4/pull/1498,1,['adapt'],['adapt']
Modifiability,"## Description; This PR implements standard grid pruning techniques, where one assumes that the electron density is largely isotropic close to the atomic centre and thus coarse grids are sufficient. Typically the atomic integration sphere is divided into several (3-4) regions where the outer region gets the most accurate grid and the grid get step-wise more coarse towards the inner region(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:871,extend,extended,871,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['extend'],['extended']
Modifiability,"## Description; This PR introduces an option in the call to `Deriv::compute()` so that the user can specify the type of gradient computation. Currently, this class determines which procedure to follow using an internal logic that is not sufficiently flexible to accommodate plugins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add deric_calc_type option to `Deriv::compute()`; - [x] Define enum and python interface. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756:250,flexible,flexible,250,https://psicode.org,https://github.com/psi4/psi4/pull/1756,2,"['flexible', 'plugin']","['flexible', 'plugins']"
Modifiability,"## Description; This PR is a companion to https://github.com/psi4/psi4/pull/2933. The goal of https://github.com/psi4/psi4/pull/2933 is to completely eliminate the `ERISieve` class, for reasons explained there. However, it turns out that eliminating `ERISieve` requires fiddling with the v2rdm_casscf plugin, as well, since it also uses `ERISieve`. This PR is meant to be a deprecation of the `ERISieve` class that will show up in v1.8 in the meantime, in case `ERISieve` isn't fully removed by then. ## User API & Changelog headlines; - [X] Deprecates the `ERISieve` class. ## Dev notes & details; - [X] Fully deprecates the `ERISieve` class C++-side by tagging it with the deprecated attribute.; - [X] Deprecates the `ERISieve` class Python-side by creating helper functions for the Python-facing `ERISieve` functions that warn about deprecation. ## Questions; - [x] Is `PSI_DEPRECATED` the preferred mechanism by which to perform this deprecation?; - [X] Assuming the answer to the first question is ""yes"", are there any other functions in `ERISieve` that should be tagged? I chose specifically the user-facing functions.; - [x] I _loathe_ having to use a global variable for the Python-side helper functions. But, unbelievably, it is what I considered the best one I could think of. I would be very happy to hear out alternative suggestions.; - [ ] Using the `PSI_API` and `PSI_DEPRECATED` macros together to tag the `ERISieve` class cause the compiler to complain. On further exploration, replacing `PSI_DEPRECATED` with its textual definition seems to work fine. Is this an acceptable solution?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935:301,plugin,plugin,301,https://psicode.org,https://github.com/psi4/psi4/pull/2935,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"## Description; This PR is a follow-up to https://github.com/psi4/psi4/pull/2906, and what can be considered an official solution to the issue discussed in https://github.com/psi4/psi4/issues/2890. The current issue is that COSX does not work with certain grid configurations - specifically, it does not work with grids that have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:261,config,configurations,261,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['config'],['configurations']
Modifiability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:1516,plugin,plugins,1516,https://psicode.org,https://github.com/psi4/psi4/pull/2974,1,['plugin'],['plugins']
Modifiability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:495,plugin,plugin,495,https://psicode.org,https://github.com/psi4/psi4/pull/563,3,"['CONFIG', 'Plugin', 'plugin']","['CONFIG', 'Plugins', 'plugin']"
Modifiability,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2475:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/pull/2475,5,['variab'],"['variable', 'variables']"
Modifiability,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:603,refactor,refactor,603,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['refactor'],['refactor']
Modifiability,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2505:120,plugin,plugin,120,https://psicode.org,https://github.com/psi4/psi4/pull/2505,1,['plugin'],['plugin']
Modifiability,"## Description; This PR makes small changes to the `PsiException` class, specifically regarding the printout of the function call stack upon throwing. Now, the number of functions included in the printed call stack during exception printout is tied to a singular variable, instead of being scattered about in multiple places. The goal is to allow easier control of the function call stack size during printout for debugging purposes, if desired. . There are a couple small cleanups here and there as well. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] All separate instances of function call stack printout sizes have been replaced with a single variable definition.; - [X] The `Stack` variable now uses a `std::array` instead of a `std::vector`.; - [X] Uses of `&Stack[0]` have been replaced with `Stack.data()`. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:263,variab,variable,263,https://psicode.org,https://github.com/psi4/psi4/pull/3179,3,['variab'],['variable']
Modifiability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:703,variab,variable,703,https://psicode.org,https://github.com/psi4/psi4/pull/2529,2,['variab'],['variable']
Modifiability,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2568:145,adapt,adapted,145,https://psicode.org,https://github.com/psi4/psi4/pull/2568,1,['adapt'],['adapted']
Modifiability,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:152,config,configure,152,https://psicode.org,https://github.com/psi4/psi4/pull/2140,1,['config'],['configure']
Modifiability,"## Description; This PR moves the printing of the SCF pre-iteration header from `scf_iterate` (where we had to check the number of iterations to know if we needed to print) to the SCF initializer (where no checks are needed). This can and should wait until 1.5. This is part of a larger project to remove overloading of the `iterations_` variable in HF, needed to get MOM properly working. ## Questions; - [ ] Do we need to regenerate samples for this? The printing should be exactly the same except in pathological corner cases involving SOSCF instabilities at less than two iterations. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2247:338,variab,variable,338,https://psicode.org,https://github.com/psi4/psi4/pull/2247,1,['variab'],['variable']
Modifiability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:205,variab,variable,205,https://psicode.org,https://github.com/psi4/psi4/pull/1942,2,['variab'],['variable']
Modifiability,"## Description; This PR provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:205,config,configurations,205,https://psicode.org,https://github.com/psi4/psi4/pull/2906,3,['config'],['configurations']
Modifiability,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2111,2,"['Refactor', 'refactor']","['Refactor', 'refactors']"
Modifiability,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2489:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2489,1,['refactor'],['refactors']
Modifiability,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2483,2,"['inherit', 'refactor']","['inherit', 'refactors']"
Modifiability,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2473,2,['refactor'],"['refactoring', 'refactors']"
Modifiability,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2345:264,refactor,refactoring,264,https://psicode.org,https://github.com/psi4/psi4/pull/2345,1,['refactor'],['refactoring']
Modifiability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:260,variab,variable,260,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['variab'],['variable']
Modifiability,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2078:117,variab,variables,117,https://psicode.org,https://github.com/psi4/psi4/pull/2078,2,['variab'],['variables']
Modifiability,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569:83,variab,variable,83,https://psicode.org,https://github.com/psi4/psi4/pull/2569,1,['variab'],['variable']
Modifiability,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:38,sandbox,sandbox,38,https://psicode.org,https://github.com/psi4/psi4/pull/2018,2,"['config', 'sandbox']","['config', 'sandbox']"
Modifiability,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1046:68,plugin,plugins,68,https://psicode.org,https://github.com/psi4/psi4/pull/1046,1,['plugin'],['plugins']
Modifiability,"## Description; This code removes `oeprop`'s specialized dipole/quadrupole functions in favor of the general multipole function. The output for dipoles _does_ change. I can change the printout if there's demand for it, but I don't care either way. I just want to have less code to mess with for the next stage of excited state variable cleanup. ### Old Function; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.9783. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -0.1680. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8103 Total: 0.8103. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 2.0595 Total: 2.0595; ```. ### New Function; See [here](https://github.com/psi4/psi4/pull/2485#issuecomment-1077774801). ## Checklist; - [x] Quick tests pass; - [x] Properties pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:327,variab,variable,327,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['variab'],['variable']
Modifiability,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:77,plugin,plugin,77,https://psicode.org,https://github.com/psi4/psi4/pull/582,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/919:134,extend,extends,134,https://psicode.org,https://github.com/psi4/psi4/pull/919,2,"['extend', 'variab']","['extends', 'variables']"
Modifiability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:778,adapt,adapt,778,https://psicode.org,https://github.com/psi4/psi4/pull/2557,1,['adapt'],['adapt']
Modifiability,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2449:240,variab,variables,240,https://psicode.org,https://github.com/psi4/psi4/pull/2449,2,['variab'],"['variable', 'variables']"
Modifiability,## Description; This is a non-optimal way out of https://github.com/psi4/psi4/pull/2048#issuecomment-771213188 . Non-optimal b/c libpython will be linked in to enable plugins. All indications are it'll work for v2rdm. Should but so far doesn't work for Forte on Azure. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2103:167,plugin,plugins,167,https://psicode.org,https://github.com/psi4/psi4/pull/2103,1,['plugin'],['plugins']
Modifiability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:431,config,configured,431,https://psicode.org,https://github.com/psi4/psi4/pull/1539,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:612,config,configured,612,https://psicode.org,https://github.com/psi4/psi4/pull/1527,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:1083,Adapt,Adapted,1083,https://psicode.org,https://github.com/psi4/psi4/pull/591,1,['Adapt'],['Adapted']
Modifiability,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:27,enhance,enhancement,27,https://psicode.org,https://github.com/psi4/psi4/pull/864,4,"['adapt', 'enhance']","['adaptive', 'enhancement']"
Modifiability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:510,refactor,refactoring,510,https://psicode.org,https://github.com/psi4/psi4/pull/3081,1,['refactor'],['refactoring']
Modifiability,"## Description; This is another minor cleanup PR that I saw was possible while working on a larger project. Three `temp` variables were previously saved to the wavefunction but only needed to be called by one or two functions. Those are better suited to be function variables than class variables, and this PR makes them so. ## Questions; - [x] Fewer class variables means less memory, but re-allocating these matrices every iteration could cause a timing hit. Is this a problem? ~~I expect the time cost to be negligible in comparison with the cost of the BLAS operations, but if anybody believes otherwise, better to say so now.~~ **Negligible in comparison to diagonalization time.**. ## Checklist; - [x] `ctest -L ^scf` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2319:121,variab,variables,121,https://psicode.org,https://github.com/psi4/psi4/pull/2319,4,['variab'],['variables']
Modifiability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:177,variab,variable,177,https://psicode.org,https://github.com/psi4/psi4/pull/1219,1,['variab'],['variable']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348:118,config,config,118,https://psicode.org,https://github.com/psi4/psi4/pull/1348,3,['config'],['config']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384:187,adapt,adaptation,187,https://psicode.org,https://github.com/psi4/psi4/pull/1384,1,['adapt'],['adaptation']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1385:187,adapt,adaptation,187,https://psicode.org,https://github.com/psi4/psi4/pull/1385,1,['adapt'],['adaptation']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1386:187,adapt,adaptation,187,https://psicode.org,https://github.com/psi4/psi4/pull/1386,1,['adapt'],['adaptation']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). Enable *conda* package building for *Windows* with *Azure*. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Enable package building; - [x] Add conda recipe; - [x] Add an option to trigger package building; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `conda.build` with default `false` (settable at queuing time). ## Questions; - [x] Currently, the conda recipe is in `conda/win`. Maybe it should be somewhere in https://github.com/psi4/psi4meta/? --> Recipe will stay in `conda/win`, for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560:380,config,configured,380,https://psicode.org,https://github.com/psi4/psi4/pull/1560,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:175,config,configuration,175,https://psicode.org,https://github.com/psi4/psi4/pull/1185,1,['config'],['configuration']
Modifiability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067:301,variab,variables,301,https://psicode.org,https://github.com/psi4/psi4/pull/1067,1,['variab'],['variables']
Modifiability,"## Description; This is take one at adding the kinetic energy, potential energy, and virial ratio as psivars, for the purposes of `cc` testing. I'm not confident on how this handles PCM, EFP, PE, and point charges, so putting it up very early for feedback. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Kinetic energy, potential energy, and virial energy are added as Psi variables for fully QM HF and CC computations. The variable names are subject to change. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Standardize `E_h` in docs. ## Checklist; - [ ] Do we want tests for the new psivars now, or in the next PR?. ## Status; - [x] Ready for review; - [x] Ready for merge - need Lori re-review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769:499,variab,variables,499,https://psicode.org,https://github.com/psi4/psi4/pull/2769,2,['variab'],"['variable', 'variables']"
Modifiability,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:190,plugin,plugins,190,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['plugin'],['plugins']
Modifiability,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504:505,adapt,adapt,505,https://psicode.org,https://github.com/psi4/psi4/pull/2504,1,['adapt'],['adapt']
Modifiability,"## Description; This patch adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores, with settings more customizable than TRUE/FALSE/1/0/-1/-2. This patch addresses some (but not all) issues raised in #2631 by allowing for more flexible policies to be set appropriate to multi-part calculations. . ## Todos; - [x] Add POLICY as option to FREEZE_CORE; - [x] Add global variable FREEZE_CORE_POLICY to hold custom frozen-core policy. ## Checklist; - [x] A functionality test for this flag has been added to `tests/dfmp2-ecp/input.dat`; - [x] `ctest -L quick` runs successfully, which includes the above listed test; - [ ] `ctest ` still in-flight but given the scope of this patch I don't expect any issues. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667:161,variab,variable,161,https://psicode.org,https://github.com/psi4/psi4/pull/2667,4,"['flexible', 'variab']","['flexible', 'variable']"
Modifiability,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:505,inherit,inheritable,505,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['inherit'],['inheritable']
Modifiability,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760:374,variab,variable,374,https://psicode.org,https://github.com/psi4/psi4/pull/760,1,['variab'],['variable']
Modifiability,"## Description; Through tests of the `COSX` code, we have discovered numerical instabilities in larger systems, leading to slow convergence for later iterations. We discovered that the version of incremental Fock currently in `COSX` performs `incfock` every iteration, and does not include stability features included in the Incremental Fock PR from #2155 (i.e. Shutting it off every few iterations (resets) as well as shutting it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:504,refactor,refactors,504,https://psicode.org,https://github.com/psi4/psi4/pull/2682,2,"['refactor', 'variab']","['refactors', 'variables']"
Modifiability,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/569:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/pull/569,4,['plugin'],"['plugin', 'plugins']"
Modifiability,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/489:24,plugin,plugins,24,https://psicode.org,https://github.com/psi4/psi4/pull/489,8,"['config', 'plugin']","['configuring', 'plugin', 'plugin-template', 'plugins']"
Modifiability,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1421:404,flexible,flexible,404,https://psicode.org,https://github.com/psi4/psi4/pull/1421,2,"['evolve', 'flexible']","['evolve', 'flexible']"
Modifiability,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:353,plugin,plugin,353,https://psicode.org,https://github.com/psi4/psi4/pull/2205,1,['plugin'],['plugin']
Modifiability,"## Description; We often have PRs held up because CI needs fixing. Then all the ""broken"" PRs have to rebase or hit the update button (which means their remotes are out-of-sync with the local branches). The beta GH merge queue might help this, since PRs are built on top of their predecessor, so a CI fix PR can be inserted at the head of the queue. This PR does hopefully the prep work needed and described in:; Following directions at https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:476,config,configuring-branches-and-merges-in-your-repository,476,https://psicode.org,https://github.com/psi4/psi4/pull/2922,2,['config'],"['configuring-branches-and-merges-in-your-repository', 'configuring-pull-request-merges']"
Modifiability,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1962:347,variab,variable,347,https://psicode.org,https://github.com/psi4/psi4/pull/1962,2,['variab'],['variable']
Modifiability,"## Description; When requesting uncoupled induction in RHF-based SAPT0, the final summary still printed Ind20,r instead of Ind20,u as the line title, and no warning was issued about the uncoupled induction stored in the Psi4 variable for coupled induction, contrary to what is happening for open-shell SAPT0.; Solves #907. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Correct printing of titles and warning for uncoupled induction in RHF-based SAPT0. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908:225,variab,variable,225,https://psicode.org,https://github.com/psi4/psi4/pull/908,1,['variab'],['variable']
Modifiability,"## Description; `LEOM_CCSD` is included in the list of EOM methods, but I can find no evidence that this method exists in Psi, other than as an option. This PR removes the option entirely. This brings the EOM methods to create variables for down to EOMCCSD, EOMCC2, and EOMCC3. Per Lori observation, the `LOCAL_GHOST` option is removed as unused. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2467:227,variab,variables,227,https://psicode.org,https://github.com/psi4/psi4/pull/2467,1,['variab'],['variables']
Modifiability,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1028:98,plugin,plugins,98,https://psicode.org,https://github.com/psi4/psi4/pull/1028,2,['plugin'],['plugins']
Modifiability,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:216,variab,variable,216,https://psicode.org,https://github.com/psi4/psi4/pull/2513,1,['variab'],['variable']
Modifiability,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856:355,variab,variable,355,https://psicode.org,https://github.com/psi4/psi4/pull/856,2,"['config', 'variab']","['configuration', 'variable']"
Modifiability,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1449:35,config,configure,35,https://psicode.org,https://github.com/psi4/psi4/pull/1449,2,"['config', 'plugin']","['configure', 'plugins']"
Modifiability,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034:535,variab,variable,535,https://psicode.org,https://github.com/psi4/psi4/pull/2034,1,['variab'],['variable']
Modifiability,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1937:656,variab,variables,656,https://psicode.org,https://github.com/psi4/psi4/pull/1937,2,['variab'],['variables']
Modifiability,"## Description; misc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] let plugins work with pybind11 v2.6.0; - [x] there was extra testing in the == of cbs() tasks when options was involved (e.g., delta(ae - fc)). but I don't understand it, and it was preventing deduplication. so fixed it; - [x] Susi noticed trouble with ENABLE_XHOST in that the two options directed at Intel and GCC are valid cross-options. this is a workaround. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2028:133,plugin,plugins,133,https://psicode.org,https://github.com/psi4/psi4/pull/2028,1,['plugin'],['plugins']
Modifiability,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:204,parameteriz,parameterization,204,https://psicode.org,https://github.com/psi4/psi4/pull/1414,1,['parameteriz'],['parameterization']
Modifiability,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:206,plugin,plugins,206,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['plugin'],['plugins']
Modifiability,## Description; test module plugin on windows. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099:28,plugin,plugin,28,https://psicode.org,https://github.com/psi4/psi4/pull/2099,1,['plugin'],['plugin']
Modifiability,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:202,plugin,plugins,202,https://psicode.org,https://github.com/psi4/psi4/pull/726,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; very much misc. ## Todos; - [x] update CheMPS2 target to v1.8.9. update min to 1.8.7. I've no evidence that the old min doesn't work, but there have been some build commits since then.; - [x] fill in missing tests comment lines; - [x] since the same feature has broken v2rdm _twice_ in the past month, let's back up the target commit and avoid it.; - [x] update some plugin template syntax, add missing v2rdm7 syntax. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1515:383,plugin,plugin,383,https://psicode.org,https://github.com/psi4/psi4/pull/1515,1,['plugin'],['plugin']
Modifiability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernize the `cc` virial theorem tech to use `Matrix` rather than `block_matrix`. This takes us one step closer to having `Matrix`-based densities. ## Questions; - [x] New code uses stored HF kinetic energy, rather than re-computing it. TDC, is this okay?; - [x] The variables are saved to the wavefunction, but not to globals. Lori, is that okay?. ## Checklist; - [x] `cc1` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2782:508,variab,variables,508,https://psicode.org,https://github.com/psi4/psi4/pull/2782,1,['variab'],['variables']
Modifiability,"## Information:. I have two versions of boost installed on my system. ; - I installed boost 1.59 in a conda env using the ([recipe](https://github.com/conda/conda-recipes/tree/b9570c14d5a25ac88b98c6c597365bfcba4174ce/boost)) from the condo/conda-recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //B",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:910,variab,variable,910,https://psicode.org,https://github.com/psi4/psi4/issues/313,2,"['config', 'variab']","['configured', 'variable']"
Modifiability,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/425:124,inherit,inheritance,124,https://psicode.org,https://github.com/psi4/psi4/pull/425,2,"['inherit', 'plugin']","['inheritance', 'plugins']"
Modifiability,"## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a GHA to build the docs for every PR; * gives us advance warning if the docs break, rather than having to watch master; * advance warning is particularly necessary since the warnings-to-errors and nitpicky flags are on. these make sure links (functions, options, etc) aren't dead and that lists don't end up as mushed text.; * unlike #2364, this isn't ambitious by building a website preview and writing a comment to the PR. but it does provide a tarball of the docs as a GHA artifact, so you can download, unpack, and view it locally in a browser. this happens whether the build succeeds or fails.; * the new docs-pr.yml file looks so close to docs.yml, that you could argue for merging them. However, I think they could develop differently, with the master one also doing samples commits and auto-formatting, while the PR one does linting like add-a-comment-to-that-test or reformat warnings.; - [x] a filesystem.py file could be easily replaced by pathlib. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Plugin tests generate and run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2607:1261,Plugin,Plugin,1261,https://psicode.org,https://github.com/psi4/psi4/pull/2607,1,['Plugin'],['Plugin']
Modifiability,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:372,variab,variable,372,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['variab'],['variable']
Modifiability,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:1926,variab,variable,1926,https://psicode.org,https://github.com/psi4/psi4/pull/1393,3,['variab'],"['variable', 'variables']"
Modifiability,"(fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:958,rewrite,rewrite,958,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['rewrite'],['rewrite']
Modifiability,"(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:1108,extend,extends,1108,https://psicode.org,https://github.com/psi4/psi4/pull/1591,2,"['extend', 'variab']","['extends', 'variables']"
Modifiability,* CMake; * license (convenient `sed` commands at psi4/psi4#690); * test case and/or plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/692:84,plugin,plugin,84,https://psicode.org,https://github.com/psi4/psi4/issues/692,1,['plugin'],['plugin']
Modifiability,"**TL;DR** If conda psi4 is acting up, update libint, too: `conda update libint -c psi4/label/dev`. If locally compiled psi4 is acting up, trigger a partial recompile: `cd objdir && rm -rf external/upstream/libint/ && make`. We've been planning for a while to distribute conda psi4 with libint compiled at `MAX_AM_ERI` 8, not 6. I have rebuilt the `libint` package and now the `v1.3rc1` will be the first `psi4` package with extended AM. Unfortunately, both **libint of different AM are not hot-swappable** and **AM not detectable at runtime**. That is, a built psi4 is perfectly happy to link (in the `ldd` sense) to a `libint.so` that is inconsistent with fixed data dimensions in psi4 _libmints_, and libmints can't even throw an error for enlightenment. . I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. ### which `libint`s are out there?; `conda list`; ```; # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:424,extend,extended,424,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['extend'],['extended']
Modifiability,"+]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1405,variab,variable,1405,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['variab'],['variable']
Modifiability,", with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to be done in 3 PRs. This PR is the first one. The second PR in the CompositeJK process is the combining of the DFJLinK and DFJCOSK subclasses into the initial ""CompositeJK"" subclass and the implementation of the planned CompositeJK User API/user-facing end. The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. ## Dev notes & details; - [x] The new JK subclass ""DFJLinK"" has been added to Psi4. DFJLinK combines the integral-direct density fitted formation of J with the linear-scaling formation of the exact K through the LinK algorithm. DFJLinK supports both density screening and incremental Fock construction, using machinery similar to the DirectJK class to do so.; - [x] The computation of LinK, and all references thereof, have been removed from DirectJK. This includes, e.g., removal of the build_linK() function from DirectJK entirely.; - [x] All relevant tests, samples, and documentation (particularly those pertaining to LinK) have been updated to reflect the two previous changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:3621,refactor,refactoring,3621,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['refactor'],['refactoring']
Modifiability,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:269,variab,variables,269,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['variab'],['variables']
Modifiability,"- [x] At the end of the detailed build directions in https://github.com/psi4/psi4/wiki/3_Building, add a step `7. Configure Runtime` directing user to set scratch and otherwise configure environment (e.g., add to path).; - [x] In docs/sphinxman/source/external.rst, break up ""scratch files and the ~/.psi4rc file"" into separate sections so that we're not suggesting psi4rc is the best way to set your scratch (pretty much, PSI_SCRATCH envvar is). Use `make sphinxmini` if you need to test the docs build.; - [x] In docs, show example csh/bash in the PSI_SCRATCH envvar section. Can probably steal some text/code from conda.rst.; - [x] In docs, show an example of a threaded pbs job file. Here's one to work from. See @loriab about any parts that are obscure. ```; #!/bin/tcsh; ## this file auto-generated by submit4 ...; #PBS -j oe ; #PBS -l walltime=80:00:00:00; #PBS -l pmem=2120mb; #PBS -N SSI-084TYR-095LEU-1-dimer; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/loriab/psi4.$PBS_JOBID. cat $PBS_NODEFILE; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end; unsetenv PSI4DATADIR; unsetenv PSIDATADIR; if ! ( $?PYTHONPATH ) setenv PYTHONPATH """"; setenv PYTHONPATH /theoryfs2/ds/cdsgroup/psi4aux:$PYTHONPATH; setenv PSI_SCRATCH $myscratch; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/scripts/bin:${PATH}; setenv PATH /theoryfs2/ds/loriab/chem/psi4_trials/c4/c4v2/cfour_v2.00beta/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/psi4-compile/mrcc:${PATH}; setenv PSIDATADIR /theoryfs2/ds/cdsgroup/psi4-install/psi3930/share/psi4; source /theoryfs2/common/software/intel2016/bin/compilervars.csh intel64; /theoryfs2/ds/cdsgroup/scripts/bin/runpsi.py -i SSI-084TYR-095LEU-1-dimer.in -o SSI-084TYR-095LEU-1-dimer.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/109:114,Config,Configure,114,https://psicode.org,https://github.com/psi4/psi4/issues/109,2,"['Config', 'config']","['Configure', 'configure']"
Modifiability,"- [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] R",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:1755,variab,variables,1755,https://psicode.org,https://github.com/psi4/psi4/pull/1393,1,['variab'],['variables']
Modifiability,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:787,plugin,plugins,787,https://psicode.org,https://github.com/psi4/psi4/pull/2048,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1716,plugin,plugins,1716,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['plugin'],['plugins']
Modifiability,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:12968,Config,Configuring,12968,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Config'],['Configuring']
Modifiability,"---------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ----------------------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3342,Variab,Variable,3342,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Variab'],['Variable']
Modifiability,--new-plugin-makefile does not work properly with conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214:6,plugin,plugin-makefile,6,https://psicode.org,https://github.com/psi4/psi4/issues/214,1,['plugin'],['plugin-makefile']
Modifiability,-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6372,Adapt,Adapted,6372,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability,. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4727,plugin,plugins,4727,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 28 17:20:52 2023; Module time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; ```. PySCF; ```; [ENV] PYSCF_MAX_MEMORY 120000; [CONFIG] conf_file None; [INPUT] verbose = 4; [INPUT] num. atoms = 8; [INPUT] num. electrons = 18; [INPUT] charge = 0; [INPUT] spin (= nelec alpha-beta = 2S) = 0; [INPUT] symmetry False subgroup None; [INPUT] Mole.unit = angstrom; [INPUT] Cartesian GTO integrals (6d 10f); [INPUT] Symbol X Y Z unit X Y Z unit Magmom; [INPUT] 1 C -0.759130000000 0.027045000000 0.000000000000 AA -1.434547792941 0.051107643039 0.000000000000 Bohr 0.0; [INPUT] 2 C 0.759130000000 -0.027045000000 0.000000000000 AA 1.434547792941 -0.051107643039 0.000000000000 Bohr 0.0; [INPUT] 3 H -1.125990000000 0.306235000000 1.010150000000 AA -2.127812718999 0.578700279756 1.908906844729 Bohr 0.0; [INPUT] 4 H -1.171340000000 -0.966695000000 -0.274750000000 AA -2.213511798748 -1.826788795986 -0.519202252724 Bohr 0.0; [INPUT] 5 H -1.109050000000 0.781825000000 -0.735390000000 AA -2.095800758449 1.477435127338 -1.389685694744 Bohr 0.0; [INPUT] 6 H 1.109040000000 -0.781815000000 0.735390000000 AA 2.095781861188 -1.477416230077 1.3896,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:9894,CONFIG,CONFIG,9894,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['CONFIG'],['CONFIG']
Modifiability,.58.0. (Both 1.59.0 and 1.60.0 aren't included) I am not sure if that is related to this problem though. FindBoost.cmake debuting output : . ```; -- Found Python: /Users/admin/anaconda/lib/libpython2.7.dylib ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:515 ] _boost_TEST_VERSIONS = 1.58.0;1.58;1.57.0;1.57;1.56.0;1.56;1.55.0;1.55; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:517 ] Boost_USE_MULTITHREADED = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:519 ] Boost_USE_STATIC_LIBS = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:521 ] Boost_USE_STATIC_RUNTIME = OFF; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:523 ] Boost_ADDITIONAL_VERSIONS = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:525 ] Boost_NO_SYSTEM_PATHS = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:577 ] Declared as CMake or Environmental Variables:; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:579 ] BOOST_ROOT = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:581 ] BOOST_INCLUDEDIR = /Users/admin/anaconda/envs/psi4-py2.7/include; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:583 ] BOOST_LIBRARYDIR = /Users/admin/anaconda/envs/psi4-py2.7/lib; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:585 ] _boost_TEST_VERSIONS = 1.58.0;1.58;1.57.0;1.57;1.56.0;1.56;1.55.0;1.55; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:654 ] Include debugging info:; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:656 ] _boost_INCLUDE_SEARCH_DIRS = /Users/admin/anaconda/envs/psi4-py2.7/include;PATHS;C:/boost/include;C:/boost;/sw/local/include; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:658 ] _boost_PATH_SUFFIXES = boost-1_58_0;boost_1_58_0;boost/boost-1_58_0;boost/boost_1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:3887,Variab,Variables,3887,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['Variab'],['Variables']
Modifiability,".so); -- Found LAPACK: SYSTEM_NATIVE (/lib64/liblapack.so); -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python2 (found version ""2.7.11"") ; -- Found Python: /usr/lib64/libpython2.7.so ; -- Boost version: 1.60.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /home/piton/gitdir/psi4/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. Error message:. [100%] Linking CXX executable ../../../bin/psi4; CMakeFiles/psi4_objlib.dir/create_new_plugin.cc.o: In function `boost::re_detail_106000::perl_matcher<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::match_imp()':; create_new_plugin.cc:(.text._ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv[_ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv]+0x42d): undefined reference to`boost::match_results<__gnu_cxx::__normal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:5224,Config,Configuring,5224,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['Config'],['Configuring']
Modifiability,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:1438,variab,variable,1438,https://psicode.org,https://github.com/psi4/psi4/issues/1975,6,['variab'],['variable']
Modifiability,"000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libparallel/parallel.h>; #include <liboptions/liboptions.h>; #include <libmints/wavefunction.h>; #include <libmints/basisset.h>; #include <libmints/matrix.h>; #include <libmints/vector.h>; #include <libpsio/psio.hpp>; #include <libthce/lreri.h>; #include <",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:2025,plugin,plugin,2025,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['plugin'],['plugin']
Modifiability,"2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""true"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap; ""pywrap-opt-sowreap"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat; Traceback (most recent call last):; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 127, in <module>; main(*sys.argv[1:]); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 106, in main; files_list,master_in,master_out= sowList(first_output); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 31, in sowList; master_in=the_tag+""-master.in""; UnboundLocalError: local variable 'the_tag' referenced before assignment; Performing finite difference calculations; 5 displacements needed ...Exit Status: infile ( 0 ); autotest ( None ); sowreap ( 1 ); overall ( 1 ); <end of output>; Test time = 0.90 sec; ----------------------------------------------------------; Test Failed.; ""pywrap-opt-sowreap"" end time: Feb 15 13:13 CET; ""pywrap-opt-sowreap"" time elapsed: 00:00:00; ----------------------------------------------------------; ```. I've saved the output of `sapt4` and `opt10` to https://gist.github.com/wpoely86/60885c5adec8dcc8b63b. Furthermore, `opt2` is flaky. It doesn't always pass. Most of the time but not always.; These tests where run on a dual socket Xeon E5-2660v3 (20 cores in total without HT) with icc/icpc 2016.1.150 + MKL 11.3.1.150.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:4451,variab,variable,4451,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['variab'],['variable']
Modifiability,"205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4465,plugin,plugins,4465,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugins']
Modifiability,"2230226. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 1.16 seconds = 0.02 minutes; system time = 0.06 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 11.55 seconds = 0.19 minutes; system time = 0.35 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 10 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 10 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1 1 1 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 5 NUM BET = 5; NUM ALP EXPL = 5 NUM BET EXPL = 5; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:11343,COUPLING,COUPLING,11343,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['COUPLING'],['COUPLING']
Modifiability,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4178,variab,variables,4178,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['variab'],['variables']
Modifiability,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:2712,config,configuration,2712,https://psicode.org,https://github.com/psi4/psi4/issues/1588,2,['config'],"['config', 'configuration']"
Modifiability,35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunctio,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4579,plugin,plugins,4579,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"44, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:3632,refactor,refactored,3632,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['refactor'],['refactored']
Modifiability,": The custom assignment operator for `Dimension` objects (`Dimension& operator=(const int*)`) is being deprecated. Unless someone speaks up, 1.10 may be the last release to have it.; - [x] API change: Cast-to-pointer operators for `Dimension` objects (`operator int*()` and `operator const int*() const`) are being deprecated. Unless someone speaks up, 1.10 may be the last release to have them.; - [x] Minor API change: Several constructors and member functions of `Dimension` are now using `size_t` instead of `int` for indexing:; −`Dimension::Dimension(int, const std::string&)` is now `Dimension::Dimension(size_t, const std::string&)`; −`void Dimension::init(int, const std::string&)` is now `void Dimension::init(size_t, const std::string&)`; −`int Dimension::n() const` is now `size_t Dimension::n() const`; −`int& Dimension::operator[](int)` is now `int& Dimension::operator[](size_t)`; −`const int& Dimension::operator[](int) const` is now `const int& Dimension::operator[](size_t) const`; −`const int& Dimension::get(int) const` is now `const int& Dimension::get(size_t) const`; −`void Dimension::set(int, int)` is now `void Dimension::set(size_t, int)`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Machine-readable docstrings have been added to `dimension.h` to improve suggestions offered by IDEs like VSCode; - [x] `size_t` is now used instead of `int` when dealing with array indexing. Python bindings have been updated to reflect the change in constructor arguments.; - [x] Local variables have been made `const` where possible; - [x] Deprecation notices have been added to `Dimension& operator=(int*)`, `operator int*()` and `operator const int*() const`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953:2673,variab,variables,2673,https://psicode.org,https://github.com/psi4/psi4/pull/2953,1,['variab'],['variables']
Modifiability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8347,variab,variables,8347,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['variab'],['variables']
Modifiability,"; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:2430,config,configuration,2430,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['config'],['configuration']
Modifiability,"@hokru, @jturney, @AlexHeide, @susilehtola, @bennybp, and anyone else interested/knowledgeable about containers:. I've got a proof-of-principle building in GHA at https://github.com/psi4/docker-expt . It seems to be successful at building a linux docker container from a conda environment.yaml, uploading it to dockerhub (https://hub.docker.com/repository/docker/psi4/clockbox/general), running smoke tests on the image, building an apptainer from the docker, and doing nothing with the sif file. This is all based on a tutorial https://docs.docker.com/build/ci/github-actions/ (hence the `clockbox`es) and modeled on some files that Ben is using (operational docker file is the `Dockerfile-BPP` one). So far it's gone remarkably smoothly for me not knowing what I'm doing. At this point, other than cleaning up names, what else shall I do to improve it? If anyone wants edit access to the repo to fix it up, just let me know. A few points:; * I think we can stick with just Linux for the v1.8; * Where should the apptainer image be sent?; * Should there be a container for each py version or do ppl not care since layers are independent?. Thanks for any guidance and edits.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951:1115,layers,layers,1115,https://psicode.org,https://github.com/psi4/psi4/issues/2951,1,['layers'],['layers']
Modifiability,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697:280,variab,variable,280,https://psicode.org,https://github.com/psi4/psi4/issues/697,1,['variab'],['variable']
Modifiability,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:202,variab,variable,202,https://psicode.org,https://github.com/psi4/psi4/issues/2203,3,['variab'],['variable']
Modifiability,"According to [the documentation](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330) of `sotoao()`, the function is supposed to return the inverse of `PetiteList.aotoso()`. This matrix is not guaranteed to be invertible. If the matrix is _not_ invertible, multiplying `sotoao()` and `aotoso()` together does not yield the identity matrix. The problem is that `aotoso()` isn't even guaranteed to be square. The SO space will always be [the number of basis functions](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639). The AO space will be [the number of basis functions or the number of atomic orbitals ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620), depending on whether `include_pure_transform_` is set. In other words, you may be transforming from either Cartesian or pure angular momentum functions to symmetry-adapted pure angular momentum functions. If `d` or higher angular momentum functions are present, then choosing to transform from Cartesian functions means you have more atomic orbitals than basis functions, so the row and column dimensions don't match. The transformation isn't even square, let alone invertible, so of course `sotoao()` returns nonsense. The following input file almost demonstrates the problem. You'll need to PyBind the `PetiteList` initializer over as well for it to run. ```; molecule mol {; 0 3; symmetry c1; C 0.0000000000 0.0000000000 -0.5928430915; H -0.0000000000 0.9469373770 -1.1509808737; H 0.0000000000 -0.9469373770 -1.1509808737; }. basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); factory = core.IntegralFactory(basis). # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses. # We have a problem!; petite = core.PetiteList(basis, factory, True); so2ao = petite.sotoao().nph[0]; print(so2ao); print(so2ao.shape) # (24, 25) ; ao2so = petite.aotoso().nph[0]; print(np.dot(so2ao, ao2so)). # Works ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763:929,adapt,adapted,929,https://psicode.org,https://github.com/psi4/psi4/issues/1763,1,['adapt'],['adapted']
Modifiability,Adapt PSIMRCC to compute_energy standard,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:0,Adapt,Adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['Adapt'],['Adapt']
Modifiability,Add Appveyor configuration to compile and tests on Windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:13,config,configuration,13,https://psicode.org,https://github.com/psi4/psi4/pull/1185,1,['config'],['configuration']
Modifiability,"Add a little additional documentation about the SAPT related Psi variables. ## Description; Clarify a little about the construction of the SAPT Psi variables. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] ; ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Clarification of SAPT Psi variables for developers (function documentation only, no code change); - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3017:65,variab,variables,65,https://psicode.org,https://github.com/psi4/psi4/pull/3017,3,['variab'],['variables']
Modifiability,Addition of psi4fockci plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:23,plugin,plugin,23,https://psicode.org,https://github.com/psi4/psi4/pull/1855,1,['plugin'],['plugin']
Modifiability,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/770:725,plugin,plugins,725,https://psicode.org,https://github.com/psi4/psi4/pull/770,2,['plugin'],['plugins']
Modifiability,"Adds the ability to compile and link [Ambit](https://github.com/jturney/ambit) v0.1-alpha into Psi4. The interface is disabled by default but can be enabled with either `setup --ambit=on` or `cmake -DENABLE_AMBIT=ON`. Even though the interface is disabled by default both states have been tested in Travis: [disabled](https://travis-ci.org/jturney/psi4/builds/109861480) and [enabled](https://travis-ci.org/jturney/psi4/builds/109700703). A new plugin template has also been added, `psi4 --new-plugin mycode +ambit`, which shows how to use Ambit with added Psi4 functionality. This PR also includes fixing a typo in Wavefunction and renaming the macro NotImplementedException to NOT_IMPLEMENTED_EXCEPTION to avoid conflicts with Ambit. This PR is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:445,plugin,plugin,445,https://psicode.org,https://github.com/psi4/psi4/pull/265,2,['plugin'],['plugin']
Modifiability,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:113,variab,variables,113,https://psicode.org,https://github.com/psi4/psi4/pull/1393,6,['variab'],"['variable', 'variables']"
Modifiability,"Apologies if this is off the development timeline or out of left field. The psi4 plugin system is excellent, and it's one of the really cool unique features of the package. One way to make it even better would be if it didn't require having access to the source to compile a plugin. Currently, all the static archives stay inside the object directory and are not installed to `prefix`, which means that when the plugins need to link against psi4, they link against the archives in the object directory, and the psi4 binary embeds the location of the source and build directory to use when generating an example plugin makefile. It would be nice to copy the archives to `$PREFIX/lib` instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:81,plugin,plugin,81,https://psicode.org,https://github.com/psi4/psi4/issues/162,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want to stick to DMRG-SCF?. If you would like to, I can release an intermediate version v1.7, and you can use the plugin (or copy parts of) https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc to run the CASPT2 calculations...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384:184,plugin,plugin,184,https://psicode.org,https://github.com/psi4/psi4/issues/384,1,['plugin'],['plugin']
Modifiability,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980:203,rewrite,rewrite,203,https://psicode.org,https://github.com/psi4/psi4/issues/980,5,"['PLUGIN', 'plugin', 'rewrite']","['PLUGINDUMP', 'plugin', 'rewrite']"
Modifiability,"At long last, some gradient refactoring. Supersedes [my previous attempt](https://github.com/psi4/psi4/pull/1745). Only the OPDM and Lagrangian are a 1.7 target. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Orbital-optimized `occ` densities now available on the wavefunction; - [x] DC-06 densities now symmetrized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Conventional gradients now check whether the density and Lagrangian are set on the wavefunction. If so, it uses those rather than reading MO-basis quantities from disk. `dct` and `occ` use this new system. `cc` will use it in the next PR. The old system will be removed for 1.8. Old system vs new system is toggled by the `reset_oneel` flag. ## Questions; - [x] How to create a warning that plugin developers should use new-style gradients?. ## Checklist; - [x] All `dct`, `omp`, `mp`, `olccd`, lccd`, `cepa`, and `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2788:28,refactor,refactoring,28,https://psicode.org,https://github.com/psi4/psi4/pull/2788,2,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,Auto-generation of plugin template failing?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/503,1,['plugin'],['plugin']
Modifiability,"Azure CI is currently configured to run the ""gcc_7"" build using Ubuntu 18.04.; This is deprecated and Azure has already started to prune the VMs that are running Ubuntu 18.04.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2749:22,config,configured,22,https://psicode.org,https://github.com/psi4/psi4/issues/2749,1,['config'],['configured']
Modifiability,"BLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:2003,config,configuring,2003,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['config'],['configuring']
Modifiability,Build plugins without psi installed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/91:6,plugin,plugins,6,https://psicode.org,https://github.com/psi4/psi4/pull/91,1,['plugin'],['plugins']
Modifiability,Building plugins fails,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:9,plugin,plugins,9,https://psicode.org,https://github.com/psi4/psi4/issues/90,1,['plugin'],['plugins']
Modifiability,CMake rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6,rewrite,rewrite,6,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['rewrite'],['rewrite']
Modifiability,CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavef,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4468,plugin,plugins,4468,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,CUBEPROP: Compute adaptive isocontour range for cube files,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:18,adapt,adaptive,18,https://psicode.org,https://github.com/psi4/psi4/pull/864,1,['adapt'],['adaptive']
Modifiability,Can we create a portable Mac binary for binary distribution?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49:16,portab,portable,16,https://psicode.org,https://github.com/psi4/psi4/issues/49,1,['portab'],['portable']
Modifiability,Carried forward from [forum post](http://forum.psicode.org/t/calculating-transition-and-state-density-matrices-and-dipole-moment-matrices/1784). The API to get transition density matrix elements out of a `detci` computation currently fails unless the first state is zero. This is [not expected behavior](https://github.com/psi4/psi4/issues/1638#issuecomment-489080431). Doing `grep` for a minute leads me to think the culprit is [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/opdm.cc#L113-L117). This looks like an extremely easy fix: just loop over another variable to change the first element in the tuple as well. Can a developer more experienced in the ways of `detci` (probably @dgasmith) confirm this?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1890:586,variab,variable,586,https://psicode.org,https://github.com/psi4/psi4/issues/1890,1,['variab'],['variable']
Modifiability,Change TDSCF Variable Names,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:13,Variab,Variable,13,https://psicode.org,https://github.com/psi4/psi4/pull/2462,1,['Variab'],['Variable']
Modifiability,Clean manager.cc Variables: OCC's Open-Heart Surgery II,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785:17,Variab,Variables,17,https://psicode.org,https://github.com/psi4/psi4/pull/1785,1,['Variab'],['Variables']
Modifiability,"Closes #1482; DCT gradients are now compatible with ROHF starting orbitals. The problem was that UDCT wavefunctions inherited the `same_a_b_orbs_` of the reference wavefunction, which was wrong for ROHF references. This caused the derivative machinery to try to try an RDCT gradient, which failed for obvious reasons. While I was changing features inherited from the reference wavefunction, I gave DCT ""wavefunctions"" proper names. ## Checklist; - [x] [All DCT tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) and verified this fixes the original issue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1487:116,inherit,inherited,116,https://psicode.org,https://github.com/psi4/psi4/pull/1487,2,['inherit'],['inherited']
Modifiability,Compile plugins without access to source directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/174:8,plugin,plugins,8,https://psicode.org,https://github.com/psi4/psi4/pull/174,1,['plugin'],['plugins']
Modifiability,Compiling Psi4 I got this error:; .; .; .; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/nao.cc.o; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/am2canon_shell_order.cc.o; [ 60%] Linking CXX static library ../../../lib/libchkpt.a; [ 60%] Built target chkpt; Scanning dependencies of target cubeprop; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/csg.cc.o; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/cubeprop.cc.o; [ 60%] Linking CXX static library ../../../lib/libcubeprop.a; [ 60%] Built target cubeprop; Scanning dependencies of target git_update; fatal: Not a git repository (or any of the parent directories): .git; make[2]: **\* [src/lib/libpsipcm/CMakeFiles/git_update] Error 128; make[1]: **\* [src/lib/libpsipcm/CMakeFiles/git_update.dir/all] Error 2; make: **\* [all] Error 2. ---. The git and cmake version from macports is 2.5.3 and 3.3.3 respectively. I used the setup command:; ./setup --plugins --fc gfortran-mp-4.8 --accelerate objdir. I was wondering if you can provide me some input to solve the problem. Thank you.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183:992,plugin,plugins,992,https://psicode.org,https://github.com/psi4/psi4/issues/183,1,['plugin'],['plugins']
Modifiability,Compiling plugins without source,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:10,plugin,plugins,10,https://psicode.org,https://github.com/psi4/psi4/issues/162,1,['plugin'],['plugins']
Modifiability,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415:0,Config,Configuring,0,https://psicode.org,https://github.com/psi4/psi4/issues/415,1,['Config'],['Configuring']
Modifiability,Correlated Derivative Refactor: Planning,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:22,Refactor,Refactor,22,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['Refactor'],['Refactor']
Modifiability,Coupled Cluster Rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:16,Rewrite,Rewrite,16,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['Rewrite'],['Rewrite']
Modifiability,Created variable and method for storing and retrieving the gradients …,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:8,variab,variable,8,https://psicode.org,https://github.com/psi4/psi4/pull/3087,1,['variab'],['variable']
Modifiability,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416:210,variab,variables,210,https://psicode.org,https://github.com/psi4/psi4/issues/2416,1,['variab'],['variables']
Modifiability,"Currently works inside rhf only. ## Description; Improves wall clock time of range separated DFT calculations by storing range separated and regular HF integrals together. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Improves integral calculation and storage strategies inside `DFHelper`; - [x] Makes changes to the `driver` , `libscf_solver`, and the `jk` base class to set the necessary parameters.; - [ ] Intelligent use of tensors to calculate J to save memory; - [ ] Create a class inside libmints to return the desired integrals; - [ ] Extend this functionality to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1832:595,Extend,Extend,595,https://psicode.org,https://github.com/psi4/psi4/pull/1832,1,['Extend'],['Extend']
Modifiability,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:744,Extend,Extending,744,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['Extend'],['Extending']
Modifiability,"DFT overhaul, ECPs, SAPT(DFT), EP2, performance enhancements",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:48,enhance,enhancements,48,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['enhance'],['enhancements']
Modifiability,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796:455,config,configuration,455,https://psicode.org,https://github.com/psi4/psi4/issues/796,2,['config'],['configuration']
Modifiability,"Dear Psi4 Developers,. Could you add an option for doing finite temperature DFT?. I find that there already exists an option for allowing fractional occupation number (FON) to accelerate SCF, so it should be handy to extend it to finite temperature DFT by allowing FON for the converged wavefunction. Specifically, the FONs with Fermi-Dirac distribution smearing Gaussian smearing are most commonly used. Reference: Springborg, Michael, R. C. Albers, and Karla Schmidt. “Fractional occupancies and temperature in electronic-structure calculations.” Physical Review B 57, no. 3 (1998): 1427.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646:217,extend,extend,217,https://psicode.org,https://github.com/psi4/psi4/issues/1646,1,['extend'],['extend']
Modifiability,"Dear all, . I added a new plugin into PSI4 (the newest psi-master code from github) (dmrgscf plugin), but ; when running psi4 on the input.dat file, i obtain the following error :; ## symbol lookup error: /home/luca/psi-master/psi4public/plugins/mypsi4plugins/dmrgscf/dmrgscf.so: undefined symbol: _ZN7CheMPS26Irreps12getGroupNameEi; ## my input file is :. molecule O2 {; O 0.0 0.0 0.0; O 0.0 0.0 3.0 ; units au; }. plugin_load(""/home/luca/psi-master/psi4public/plugins/mypsi4plugins/dmrgscf/dmrgscf.so""). set basis cc-pVDZ; set reference rhf. set dmrgscf wfn_irrep 0; set dmrgscf wfn_multp 1; set dmrgscf frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrgscf active [ 2 , 0 , 2 , 2 , 0 , 2 , 2 , 2 ]. set dmrgscf dmrg_states [ 500, 1000, 1000 ]; set dmrgscf dmrg_econv [ 1e-10, 1e-10, 1e-10 ]; set dmrgscf dmrg_maxsweeps [ 5, 5, 10 ]; set dmrgscf dmrg_noiseprefactors [ 0.05, 0.05, 0.0 ]; set dmrgscf dmrg_print_corr false; set dmrgscf mps_chkpt false. set dmrgscf dmrgscf_convergence 1e-6; set dmrgscf dmrgscf_store_unit true; set dmrgscf dmrgscf_do_diis true; set dmrgscf dmrgscf_diis_branch 1e-2; set dmrgscf dmrgscf_store_diis true. set dmrgscf dmrgscf_max_iter 100; set dmrgscf dmrgscf_which_root 2 # First excited state; set dmrgscf dmrgscf_state_avg true; set dmrgscf dmrgscf_active_space NO # INPUT; NO; LOC; set dmrgscf dmrgscf_loc_random false. scf(). plugin(""dmrgscf.so""). ---. Best wishes; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/96:26,plugin,plugin,26,https://psicode.org,https://github.com/psi4/psi4/issues/96,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"Dear all,. I have built the latest version of psi4 with plugins:. ```; BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; ```. and can create new plugins and compile them. However, the old examples, typically in the folder. ```; /path/to/source/psi4/objects/plugins/; ```. are not generated anymore. I don't know if this was intentional?. Best regards,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78:56,plugin,plugins,56,https://psicode.org,https://github.com/psi4/psi4/issues/78,3,['plugin'],['plugins']
Modifiability,"Dear all,. I just made a clone of the psi4public. However, I got the error message ""Cannot find source file sapt_dft.cc"" when trying to compile psi4 (in a directory ""psi4public/build"") by either ""../configure.cmake"" or ""cmake .."". Is it a bug in psi4? Thank you. Cheers; Gao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55:199,config,configure,199,https://psicode.org,https://github.com/psi4/psi4/issues/55,1,['config'],['configure']
Modifiability,"Dear all,. Previously - when outfile was a ""FILE *"" - I redirected my output stream to psi4's stream as follows:. ```; ** stuff in plugin **. std::ofstream psi4outfile;; std::streambuf * cout_buffer;; if ( outfile_name != ""stdout"" ){; fclose(myoutfile);; myoutfile = NULL;; psi4outfile.open( outfile_name.c_str() , ios::app ); // append; cout_buffer = cout.rdbuf( psi4outfile.rdbuf() );; }. ** stuff in my code **. if ( outfile_name != ""stdout"" ){; cout.rdbuf(cout_buffer);; psi4outfile.close();; myoutfile = fopen(outfile_name.c_str(), ""a"");; if (myoutfile == NULL){; throw PSIEXCEPTION(""PSI4: Unable to reopen output file."");; }; }. ** stuff in plugin **; ```. The original plugins can be found here:; https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc; https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc. Which way would you prefer to redirect C++'s cout to the psi4 outfile now?. Thank you!; Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77:131,plugin,plugin,131,https://psicode.org,https://github.com/psi4/psi4/issues/77,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Dear all,. ```; I tried to install the latest PSI4 on my PC, whose operating system is Fedora 14. I have passed the steps ""./configure --with-opt=-O2"" and ""make"" successfully according to PSI4's manual. However, I met a trouble in ""make tests"". One of the error report is pasted below:; ```. ---. echo ""Testing omp2_5-grad1...""; Testing omp2_5-grad1...; make -C omp2_5-grad1; true; make[2]: Entering directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'; PSIO_ERROR: unit = 32, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); Traceback (most recent call last):; File ""<string>"", line 38, in <module>; File ""/usr/local/src/psi4/lib/python/driver.py"", line 671, in gradient; procedures['gradient'][lowername](lowername, **kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 459, in run_omp2_5_gradient; run_omp2_5(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 440, in run_omp2_5; scf_helper(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 757, in scf_helper; e_scf = psi4.scf(precallback, postcallback); RuntimeError: PSIO Error; file: /usr/local/src/psi4/src/lib/libpsio/error.cc; line: 116P; make[2]: **\* [omp2_5-grad1.passed] Error 1; ## make[2]: Leaving directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'. There are also many other error report which are similar to this. I am wondering what cause these errors and how can I fix them. Can you help me to install PSI4 successfully? . Looking forward to any comments and suggestions! Many thanks!. Best Regards; Xin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56:125,config,configure,125,https://psicode.org,https://github.com/psi4/psi4/issues/56,1,['config'],['configure']
Modifiability,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:420,variab,variables,420,https://psicode.org,https://github.com/psi4/psi4/issues/2008,2,['variab'],['variables']
Modifiability,Density Screening Refactor Part 1: test_erisieve.py Rework,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:18,Refactor,Refactor,18,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['Refactor'],['Refactor']
Modifiability,Density Screening Refactor Part 2: Implementation of shell_significant(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:18,Refactor,Refactor,18,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['Refactor'],['Refactor']
Modifiability,Docs : class inheritance diagrams are broken,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/792:13,inherit,inheritance,13,https://psicode.org,https://github.com/psi4/psi4/issues/792,1,['inherit'],['inheritance']
Modifiability,Document Makefile for plugin from binary,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/366:22,plugin,plugin,22,https://psicode.org,https://github.com/psi4/psi4/pull/366,1,['plugin'],['plugin']
Modifiability,Don't build ambit plugin if it's not found.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436:18,plugin,plugin,18,https://psicode.org,https://github.com/psi4/psi4/pull/436,1,['plugin'],['plugin']
Modifiability,"Due to a lull in impending c-side changes, we’d like to take the opportunity to auto-format the c-side codebase according to [the existing clang-format file](https://github.com/psi4/psi4/blob/master/.clang-format). You (and we, reviewing and merging) have until Friday, 24 Aug to get code submitted for review/merged. After that, we will be making per-module PRs of formatted changes. None of these will be merged until Wed, 29 Aug. You have until then to indicate (on the PR) that this will interrupt your development. If that happens, the PR can be closed and postponed to accommodate you. Unchallenged PRs will be merged over the week. Modules to be skipped include occ/dfocc/findif/optking/interface_dmrg because of outstanding PRs, imminent demise, or need to compare easily with upstream plugin. - [x] adc #1152; - [x] ambit_interface #1172 ; - [x] ccdensity -- delay to 29 Aug #1202; - [x] ccenergy -- delay to 29 Aug #1203; - [x] cceom #1204; - [x] cchbar #1205; - [x] cclambda -- delay to 29 Aug #1206; - [x] ccresponse #1207; - [x] cctransort #1208; - [x] cctriples -- ~delay to 29 Aug (wait for #1199) #1209~ #1252 ; - [x] dcft #1154; - [x] detci #1155; - [x] dfep2 #1157 ; - [x] dfmp2 #1159; - [x] dfocc -- mostly done in #797, touch-ups in #1392; - [x] dmrg -- turning off formatting so can diff with plugin in CheMPS2 repo #1392; - ~findif~; - [x] fisapt #1175; - [x] fnocc #1158; - [x] gdma_interface #1166; - [x] lib3index ~#1169 (wait for #1200)~ #1389; - [x] libciomr #1173; - [x] libcubeprop -- delay to 29 Aug (wait for #1138) #1210 ; - [x] libdiis #1167; - [x] libdisp #1168; - [x] libdpd -- ~delay to 29 Aug (wait for #1199) #1211~ #1251 ; - [x] libfilesystem #1174; - [x] libfock ~#1164 (wait for #1224 and for @dgasmith )~ #1397; - [x] libfunctional -- ~delay to 29 Aug #1195 (wait for @dgasmith)~ #1396; - [x] libiwl #1163 ; - [x] libmints -- delay to 29 Aug #1156; - [x] libmoinfo #1165; - [x] liboptions #1187; - [x] libplugin #1190; - [x] libpsi4util #1176; - [x] libpsio #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1144:794,plugin,plugin,794,https://psicode.org,https://github.com/psi4/psi4/issues/1144,1,['plugin'],['plugin']
Modifiability,Duplicate of Refactoring of Dimension Class,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/574:13,Refactor,Refactoring,13,https://psicode.org,https://github.com/psi4/psi4/pull/574,1,['Refactor'],['Refactoring']
Modifiability,ENH: CCLambdaWfn inherits from CCEnergyWfn,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1257:17,inherit,inherits,17,https://psicode.org,https://github.com/psi4/psi4/pull/1257,1,['inherit'],['inherits']
Modifiability,Error about pybind11 in cmake while creating a new psi4 plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:56,plugin,plugin,56,https://psicode.org,https://github.com/psi4/psi4/issues/775,1,['plugin'],['plugin']
Modifiability,Excited State Variable Cleanup,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:14,Variab,Variable,14,https://psicode.org,https://github.com/psi4/psi4/issues/2486,1,['Variab'],['Variable']
Modifiability,Excited State Variable Cleanup for `adcc`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:14,Variab,Variable,14,https://psicode.org,https://github.com/psi4/psi4/pull/2513,1,['Variab'],['Variable']
Modifiability,Expose flexible cube generation to Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:7,flexible,flexible,7,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['flexible'],['flexible']
Modifiability,Expose good chunks of libmints and libciomr to plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:47,plugin,plugins,47,https://psicode.org,https://github.com/psi4/psi4/pull/1400,1,['plugin'],['plugins']
Modifiability,Expose reset_subspace to C++ for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2437:33,plugin,plugins,33,https://psicode.org,https://github.com/psi4/psi4/pull/2437,1,['plugin'],['plugins']
Modifiability,Extend Francesco's documentation on writing cube files to explain how to actually plot orbitals using VMD or similar software. Consider adding Evangelista group VMD script to Psi4 source. Assigned to Wallace.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/142:0,Extend,Extend,0,https://psicode.org,https://github.com/psi4/psi4/issues/142,1,['Extend'],['Extend']
Modifiability,Extend ddx interface by support for dd-LPB,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:0,Extend,Extend,0,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['Extend'],['Extend']
Modifiability,Failure on compiling plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:21,plugin,plugins,21,https://psicode.org,https://github.com/psi4/psi4/issues/565,1,['plugin'],['plugins']
Modifiability,Fix OpenMP config for clang-cl on Windonws,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348:11,config,config,11,https://psicode.org,https://github.com/psi4/psi4/pull/1348,1,['config'],['config']
Modifiability,Fix Plugin Testing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/624:4,Plugin,Plugin,4,https://psicode.org,https://github.com/psi4/psi4/pull/624,1,['Plugin'],['Plugin']
Modifiability,Fix SCF plugin python file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1680:8,plugin,plugin,8,https://psicode.org,https://github.com/psi4/psi4/pull/1680,1,['plugin'],['plugin']
Modifiability,Fix cmake changes causing plugin link problems on Mac,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1642:26,plugin,plugin,26,https://psicode.org,https://github.com/psi4/psi4/pull/1642,1,['plugin'],['plugin']
Modifiability,Fix undefine variable in psi::CIvect::dcalc2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:13,variab,variable,13,https://psicode.org,https://github.com/psi4/psi4/pull/1219,1,['variab'],['variable']
Modifiability,"Fixed a bug in the stability analysis: some rotation parameters for the orbitals were not correct, it should be easier to converge on a stable solution now. SAPT: changed the output according to Friday's meeting. Updated the tests for SAPT and the Sphinx manual as well.; @CDSherrill : you can have a look at the updated output.ref to make sure the output looks good to you.; @loriab : I did not modify the Psivars yet. Do you want to do it by passing a SCALE_FACTOR PsiVars to your code computing all the other variables, or do you prefer some other way?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/248:512,variab,variables,512,https://psicode.org,https://github.com/psi4/psi4/pull/248,1,['variab'],['variables']
Modifiability,"Fixes #2493 . ## Description; <!-- Provide a brief description of the PR's purpose here. -->. For memory safety, the integrals in libmints should be returned as unique_ptrs rather than raw pointers. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All integrals in libmints now return a unique_ptr rather than a raw pointer; - [x] Call sites refactored to match; ## Questions; - [x] Are my refactors to the call sites correct? Many are just an immediate release of the unique_pointer, with the assumption that the memory management / pointer deletion occurs elsewhere; - [x] Should iterators eg `CartesianIter` also return unique_ptrs?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775:700,refactor,refactored,700,https://psicode.org,https://github.com/psi4/psi4/pull/2775,2,['refactor'],"['refactored', 'refactors']"
Modifiability,"From discussion today, the following tasks to wrap up https://github.com/psi4/psi4public/issues/103; - [x] In driver.py, delete reference-bearing methods from procedures table (multiple places). Delete table:energy_scf rst table and its analogies. Salvage 'hf' from them and move it into the main rst table.; - [x] In proc.py, remove much of parse_scf_cases, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [x] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [x] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:497,adapt,adapt,497,https://psicode.org,https://github.com/psi4/psi4/issues/117,2,['adapt'],['adapt']
Modifiability,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5298,config,configuration,5298,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['config'],['configuration']
Modifiability,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:492,extend,extended,492,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['extend'],['extended']
Modifiability,Gradient Refactor,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:9,Refactor,Refactor,9,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['Refactor'],['Refactor']
Modifiability,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:199,rewrite,rewrite,199,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:102,plugin,plugin,102,https://psicode.org,https://github.com/psi4/psi4/issues/565,5,"['Config', 'plugin', 'variab']","['Configuring', 'plugin', 'variable']"
Modifiability,"Hello Psi4 community,; I was trying to simulate a simple reference model, pentacene on two layers of NaCl but cannot get it to converge. I am posting here instead of the Psi4 forum, since it does not support https, but I hope that someone can help me with this issue and see if I made any wrong assumptions. . In the input file I fixed the coordinated of the lower most NaCl monolayer and I use the OptKing solver (maybe geomeTRIC is more efficient here but did not know the input) with b3lyp-d3 (in hope to have a vdW-correction) and 6-31G as the basis set. I think that in itself b3lyp is not ideal for the surface, but I think that a plane-wave approach is better for the crystal itself. I'm interested in the electronic structure of the molecule in presence of the insulating layer, compared to gas-phase and in the atomic positions of the relaxed system. Any kind of help is much appreciated! Thank you in advance. My output file is the following:; ```; ==> Input File <==. --------------------------------------------------------------------------; memory 25 GB. set basis 6-31G. molecule {; 0 1; H 3.7651778770 9.5503410836 -1.8903043554 ; H 3.7651778770 7.0753410836 -1.8903043554 ; H 17.8091778770 7.0753410836 -1.8903043554 ; H 17.8091778770 9.5503410836 -1.8903043554 ; C 4.7039778770 9.0113410836 -1.8890043554 ; C 4.7039778770 7.6143410836 -1.8890043554 ; C 16.8703778770 7.6143410836 -1.8890043554 ; C 16.8703778770 9.0113410836 -1.8890043554 ; H 5.8910778770 10.7979410836 -1.8875043554 ; H 5.8910778770 5.8277410836 -1.8875043554 ; H 15.6832778770 5.8277410836 -1.8875043554 ; H 15.6832778770 10.7979410836 -1.8875043554 ; C 5.9119778770 9.7145410836 -1.8874043554 ; C 5.9119778770 6.9110410836 -1.8874043554 ; C 15.6623778770 6.9110410836 -1.8874043554 ; C 15.6623778770 9.7145410836 -1.8874043554 ; C 7.1332778770 9.0207410836 -1.8859043554 ; C 7.1332778770 7.6048410836 -1.8859043554 ; C 14.4410778770 9.0207410836 -1.8859043554 ; C 14.4410778770 7.6048410836 -1.8859043554 ; H 8.34",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:91,layers,layers,91,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['layers'],['layers']
Modifiability,"Hello Psi4!; First of all, thank you for your hard work on improving the Psi.; This is not a bug report but rather a possible enhancement: we have recently developed a wave function format called [TREXIO](https://github.com/TREX-CoE/trexio) with the focus on self-consistence and I/O performance. The format comes with a C library and an API to interact with the data: it has a text (ASCII-based) and HDF5 (binary) back ends for I/O. Bindings in Python, Fortran and OCaml are available. Sparse data like 2e integrals or CI coefficients are stored in a sparse data representation (similar to FCIDUMP) which significarntly improved the performance of the I/O (especially in the HDF5 case). The source code can be found [here](https://github.com/TREX-CoE/trexio) and a detailed description of the format and an API can be found [here](https://trex-coe.github.io/trexio/trex.html). Would it be interesting to have TREXIO as an alternative I/O back end in Psi4? The library is packaged for both PyPI and conda (via conda-forge). I am one of the core developers and can help/contribute.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:126,enhance,enhancement,126,https://psicode.org,https://github.com/psi4/psi4/issues/2847,1,['enhance'],['enhancement']
Modifiability,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:342,config,configuration,342,https://psicode.org,https://github.com/psi4/psi4/issues/2060,2,['config'],['configuration']
Modifiability,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:472,config,configuration,472,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['config'],['configuration']
Modifiability,"Hello, i recently installed the psi4 package using the conda prompt (Im using miniconda) with this code:; `conda create -n p4env psi4 python=3.8 -c psi4 -c conda-forge`; I configurated the paths, adding the ones given by `psi4 --psiapi`, but when importing the package in Jupyter Notebook I still have issues. It seems like the `import psi4` works, but when pressing tab after `psi4.` there are no suggestions, but with `psi4._` I get only seven suggestions (`__doc__`, `__file__`,`__loader__`, ...). So, when trying `psi4.set_memory(int(5e8))`, I get `AttributeError: module 'psi4' has no attribute 'set_memory'`. Thanks for any suggestions (Im new to psi4 and just recently started using Python, and GitHub).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329:172,config,configurated,172,https://psicode.org,https://github.com/psi4/psi4/issues/2329,1,['config'],['configurated']
Modifiability,"Hello,. I am trying to compile a plug-in as described in http://www.psicode.org/psi4manual/master/plugins.html .; The plug-in is one of those used as example (https://github.com/psi4/psi4/tree/master/plugins/mointegrals). All I did is: ; 1. Create a directory. ; 2. Copy into it the files from the last link.; 3. Execute: `psi4 --new-plugin myplugin +mointegrals`; 3''. Alternatively I tried `psi4 --new-plugin myplugin mointegrals`; 4. Change dir to the new directory and execute `make`. It returns:; `Makefile:15: /build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars: No existe el archivo o el directorio; make: *** No hay ninguna regla para construir el objetivo «/build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars». Alto.`; (The file or directory doesn't exist. There is no rule to build the target. Stop.). What I'm doing wrong?. My work station is running linux Ubuntu LTS 14.04. The psi4 version is the last stable release. . I'm trying to compile the plug-in with the hope it helps me to build the full CI matrix. If Psi4 provides a simple way to generate the Hamiltonian matrix elements it would be even more useful to me. Thank you very much for your time and the opportunity of using your software.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308:33,plug-in,plug-in,33,https://psicode.org,https://github.com/psi4/psi4/issues/308,7,"['plug-in', 'plugin']","['plug-in', 'plugin', 'plugins']"
Modifiability,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:256,adapt,adapted,256,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['adapt'],['adapted']
Modifiability,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419:37,plugin,plugin,37,https://psicode.org,https://github.com/psi4/psi4/issues/419,6,['plugin'],['plugin']
Modifiability,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102:447,variab,variables,447,https://psicode.org,https://github.com/psi4/psi4/issues/2102,1,['variab'],['variables']
Modifiability,"Hi all,. I just built Psi4 on mac os x, and everything seem to build and test fine. However, in doing a calculation I received the following error: . ```; An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(_object*, boost::shared_ptr<psi::Wavefunction>): File ""<string>"", line 28, in <module>. File ""/usr/local/psi4/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); ```. Input was:. ```; import psi4. molecule {; C 0.012220093121 -0.717626540721 0.000000000000; O -0.062545506204 0.679938040344 0.000000000000; H 0.518735639503 -1.098516178616 0.883563931671; H 0.518735639503 -1.098516178616 -0.883563931671; H -1.002097021106 -1.091505681690 0.000000000000; H 0.811765758420 1.042084199023 0.000000000000; }. set globals {; basis 6-31g*; }. energy('scf'); oeprop(""MULLIKEN_CHARGES""); ```. Commenting out the `oeprop` line not surprisingly gets rid of the error. . I doubt any of the rest of this matters, but... I did get two errors building, in case they're relevant, but I've seen them in other open issues:. ```; The following tests FAILED:; 254 - pywrap-opt-sowreap (Failed); 263 - sapt4 (Failed); Errors while running CTest; make: *** [test] Error 8; ```. Command used to configure: `./setup -DBUILD_CUSTOM_BOOST=TRUE --python /usr/bin/python objdir`; Compiler: gcc/g++/gfortran from hpc.sourceforge.net; OS: OS X 10.10.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260:1332,config,configure,1332,https://psicode.org,https://github.com/psi4/psi4/issues/260,1,['config'],['configure']
Modifiability,"Hi all,. I've tried to build psi4-0.5 with the intel compiler but it fails. Config:. ```; CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is Intel 16.0.0.20150815; -- The C compiler identification is Intel 16.0.0.20150815; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:76,Config,Config,76,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['Config'],['Config']
Modifiability,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905:591,config,configures,591,https://psicode.org,https://github.com/psi4/psi4/issues/905,1,['config'],['configures']
Modifiability,"Hi guys,. @raimis found this bug and we are adapting to it on our code, but I find it kind of an ugly workaround. Have you experienced it?. @raimis, can you provide some more details? Thanks!. João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817:44,adapt,adapting,44,https://psicode.org,https://github.com/psi4/psi4/issues/817,1,['adapt'],['adapting']
Modifiability,"Hi, . I was doing the Energy surface scan in PSI4. . The surface scan worked well when there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:351,variab,variable,351,https://psicode.org,https://github.com/psi4/psi4/issues/2880,3,['variab'],['variable']
Modifiability,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:409,config,config,409,https://psicode.org,https://github.com/psi4/psi4/issues/3154,1,['config'],['config']
Modifiability,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:209,config,configuration,209,https://psicode.org,https://github.com/psi4/psi4/issues/1902,11,['config'],['configuration']
Modifiability,"Hi,. I have been using psi4 on its own for a while and now I am looking to extend its utility by adding more optional plugins as displayed in the https://psicode.org/installs/v182/# such as ambit, chemps2, etc. I am a bit confused about how these are implemented. Do I have to manually reinstall psi4 from source? I am asking since I could not find a straightforward way add those to my existing psi4.; ![conda_ovals installer](https://github.com/psi4/psi4/assets/137749626/6e189615-b2c2-4d67-8fcb-d4eeeb54ae06). Many thanks in advance!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094:75,extend,extend,75,https://psicode.org,https://github.com/psi4/psi4/issues/3094,2,"['extend', 'plugin']","['extend', 'plugins']"
Modifiability,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:71,config,configures,71,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['config'],"['configuration', 'configures']"
Modifiability,"Hi,. I'm using DiskJK in a plugin: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292 . Does it reuse the existing disk AO integrals or does it recompute them? In case of the latter: How do I avoid this? Is there a way to fetch the JK from the wavefunction object or the environment?. Thank you for your time and answer!; Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65:27,plugin,plugin,27,https://psicode.org,https://github.com/psi4/psi4/issues/65,1,['plugin'],['plugin']
Modifiability,"Hi,. Since 0.3.530 or so, all of the difficulties that I've had about compiling plugins have been worked out. I'm sure there are other possible schemes, but the one I have now is a `configure` shell script that writes a `Makefile` using some information from the new `psi4-config` ([link](https://github.com/rmcgibbo/resp2/blob/master/configure)). The remaining plugin-related question I have now is about ""installation"". If I want to distribute this plugin to other users (it's really just the `<plugin_name>.so` file, I don't have any obligatory Python code), and make it easy for them to install, I'd like to make something like `conda install -c rmcgibbo <my_plugin>` work. If this were a standard Python module, I'd install the package with a Pyton wrapper to `lib/python2.7/site-packages/`, since that'll definitely be on `sys.path` -- is that what I should do here too? Or is there an alternative more psi4-specific location in `share/psi4/` where they would ideally go?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:80,plugin,plugins,80,https://psicode.org,https://github.com/psi4/psi4/issues/229,6,"['config', 'plugin']","['config', 'configure', 'plugin', 'plugin-related', 'plugins']"
Modifiability,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648:346,Config,Configuring,346,https://psicode.org,https://github.com/psi4/psi4/issues/648,1,['Config'],['Configuring']
Modifiability,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/issues/2239,2,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:687,config,configurations,687,https://psicode.org,https://github.com/psi4/psi4/issues/1907,2,['config'],"['configuration', 'configurations']"
Modifiability,"Hi,; I try to do a bunch of DFT single point energy calculations of small fragments on the university HPC cluster with a custom basis set.; After the first 20 or so calculations ran smoothly, every subsequent one failed with:; ```. PSIO_ERROR: unit = 35, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); PSIO_ERROR:; PSIO_ERROR: Check the location of your scratch directory which can be; PSIO_ERROR: specified via the $PSI_SCRATCH environment variable or in; PSIO_ERROR: the $HOME/.psi4rc file.; PSIO_ERROR:; PSIO_ERROR: Please note that the scratch directory must exist and be; PSIO_ERROR: writable by Psi4; ```; Thats one example input:; ```; molecule {; 0 1; N -1.4457680611716 -1.1047188295845 0.49148092386593; C -0.19168175766337 -0.75584211512691 0.20898275954952; S 1.16737932640644 -1.82766284403922 0.14616844519932; C 2.16597045357598 -0.42448441793899 -0.26698146976982; N 1.54724741904672 0.67798068286713 -0.34204940942266; C 0.21550144939676 0.55519535899526 -0.0839857520715; C -0.70195776564886 1.65045791061703 -0.10441352532731; O -1.89802765802088 1.54782198311403 0.1259571991072; H -2.11563998092643 -0.33690782979021 0.4823163098176; H -1.71164622110861 -2.0497008550553 0.69762302601465; H 3.21537348272138 -0.55453850454389 -0.43220307841028; H -0.24675068660743 2.6223994604856 -0.34875937387462. no_reorient; no_com; }. # Set the basis set; set {; basis sdzhf; }. # Compute the energy and return the wavefunction; E, wfn = energy('WB97X-D', return_wfn=True). # Save the wavefunction to a file; wfn.to_file(""mol.wfn""); ```; and thats the last portion of the out:; ```; ==> Integral Setup <==. Traceback (most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:457,variab,variable,457,https://psicode.org,https://github.com/psi4/psi4/issues/3069,1,['variab'],['variable']
Modifiability,"I am running some psi4 jobs which involve modifying the parameters DFT_VV10_B and DFT_VV10_C for various benzene dimer configurations. For several dimer configurations and several values of (b,c), I get an error telling me that ADIIS minimization failed, and asking me to file a bug report. I've prepared an example and put my input and output files below. Any help I could get would be wonderful—and please let me know if I can provide any more information that would be helpful! . Input file:; ```; set num_frozen_docc 12; set {; dft_vv10_b 0.06022547162926983; dft_vv10_c 0.7450476605857299; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.260781259973 -0.714012941782 1.022641061033; C 0.448798235138 -0.584866555587 1.116392879147; C 0.671191593804 0.158609920222 1.104026912627; C 0.177969561551 0.681404978559 1.093307893756; C -0.560580808895 0.542719215332 1.056079456761; C -0.776583606603 -0.133446136243 1.103859872549; H -0.442720873003 -1.244238976392 0.982141695030; H 0.874512929539 -0.960390442589 1.119149924166; H 1.217460053606 0.336381670040 1.046181387539; H 0.335297687566 1.281777775821 0.982193856028; H -0.948519039798 0.925731991759 1.117846063269; H -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.3724813932",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:119,config,configurations,119,https://psicode.org,https://github.com/psi4/psi4/issues/2641,2,['config'],['configurations']
Modifiability,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:28,plugin,plugin,28,https://psicode.org,https://github.com/psi4/psi4/issues/775,5,"['config', 'plugin']","['config', 'configuration', 'plugin', 'plugin-name', 'plugin-template']"
Modifiability,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:701,Config,Configuring,701,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Config'],['Configuring']
Modifiability,"I am trying to install Psi4 with Conda on a Linux machine with Python 3.11. However, it does not seem like Python 3.11 is supported at this time despite the README badge showing 3.11. Are there plans to add a Python 3.11 Conda build in the near future?; ; ```; conda create --name psi4 python=3.11; conda activate psi4; conda install psi4 -c psi4; ```. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.10,<3.11.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.6,<3.7.0a0|>=3.5,<3.6.0a0']. Your python: python=3.11. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.35=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']; - python=3.11 -> libgcc-ng[version='>=11.2.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.35; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031:486,flexible,flexible,486,https://psicode.org,https://github.com/psi4/psi4/issues/3031,2,['flexible'],['flexible']
Modifiability,"I am trying to run a porphyrin radical calculation with 1700 basis functions. I call dferi->compute() in my plugin and it seems that during the generation of the MO DF integrals, there is some sort of segmentation fault. I generate all of the MO integrals using density fitting. . I have a minimal plugin available to test this input. . The input is given below: . ```; memory 100 gb; molecule {; 0 1; C 0.68541667 0.00000000 4.17724008; C -0.68541667 0.00000000 4.17724008; C -1.07715949 0.00000000 2.85236290; C 1.07715949 0.00000000 2.85236290; N 0.00000000 0.00000000 2.03366350; C 2.35903958 0.00000000 2.45806358; C 2.81721573 0.00000000 1.05258796; N 2.05486054 0.00000000 0.01405448; C 2.88740001 0.00000000 -1.13057937; C 4.23537365 0.00000000 0.67022148; C 4.27600326 0.00000000 -0.70111647; C 2.48623109 0.00000000 -2.40919453; C 1.07657777 0.00000000 -2.84029441; N 0.00000000 0.00000000 -2.02366514; C -0.68542522 0.00000000 -4.16299454; C 0.68542522 0.00000000 -4.16299454; C -2.88740001 0.00000000 -1.13057937; N -2.05486054 0.00000000 0.01405448; C -2.81721573 0.00000000 1.05258796; C -4.23537365 0.00000000 0.67022148; C -4.27600326 0.00000000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:108,plugin,plugin,108,https://psicode.org,https://github.com/psi4/psi4/issues/157,2,['plugin'],['plugin']
Modifiability,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:42,extend,extend,42,https://psicode.org,https://github.com/psi4/psi4/issues/3004,1,['extend'],['extend']
Modifiability,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:411,adapt,adapt,411,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['adapt'],['adapt']
Modifiability,"I cannot use the default options provided by ../configure.cmake to finish compiling unless --with-ldflags='-lm' is added. With the default options, it complains; gcc: : No such file or directory; during compiling of libint_compiler. My platform is gcc-4.4, cmake-2.8.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/53:48,config,configure,48,https://psicode.org,https://github.com/psi4/psi4/issues/53,1,['config'],['configure']
Modifiability,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:283,config,configure,283,https://psicode.org,https://github.com/psi4/psi4/issues/199,2,['config'],['configure']
Modifiability,"I have a dimer complex in z-matrix form that I am calculating the interaction energy. I have two scripts, one is the an object that lives inside my software and the other is an external script that I use for testing the configurations for psi4. . When I run the python on the external script, the function returns the total energy:. ```python; dimer_energy = psi4.energy(; theory,; molecule=dimer2,; bsse='cp'; ); ```; However, if I run this programmatically, although the same result in terms of the output file but the dimer energy returned is the interaction energy. . I am running this on `hf/6-31g*' so not SAPT. Is there something that I am missing where psi4 decides to return the interaction energy over the dimer energy and why would I see this inconsistency in my code. Kind of lost on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:220,config,configurations,220,https://psicode.org,https://github.com/psi4/psi4/issues/2730,1,['config'],['configurations']
Modifiability,"I have generated a plain plugin template and read so basis overlap integrals as follows:; MintsHelper mints(MintsHelper(ref_wfn->basisset(), options, 0));; Sso_ = mints.ao_overlap();. I used the following geometry with cc-pvdz basis set and with the ""puream false"" option:; O 0.000000000000 0.000000000000 -0.065775570538; H 0.000000000000 -0.759061990794 0.521953018295; H 0.000000000000 0.759061990794 0.521953018295; symmetry c1; noreorient. and I get the following output:; ## SO-basis Overlap Ints ##. 1 2 3 4 5 6 7 8 9 10. 1 1.0000000 -0.2140627 0.1943842 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -0.0000000 0.0705864; 2 -0.2140627 1.0000000 0.7086073 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.6299064; 3 0.1943842 0.7086073 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.6642838; 4 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 0.0000000; 5 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000; 6 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 -0.0000000; 7 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000; 8 0.0000000 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000; 9 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000; 10 0.0705864 0.6299064 0.6642838 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 1.0000000; 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 12 0.0000000 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 13 0.0705864 0.6299064 0.6642838 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.3333333; 14 0.0000000 0.0000000 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 15 0.0705864 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/issues/874,1,['plugin'],['plugin']
Modifiability,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:340,inherit,inherits,340,https://psicode.org,https://github.com/psi4/psi4/issues/2631,1,['inherit'],['inherits']
Modifiability,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2317:90,variab,variable,90,https://psicode.org,https://github.com/psi4/psi4/issues/2317,1,['variab'],['variable']
Modifiability,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/898:115,variab,variables,115,https://psicode.org,https://github.com/psi4/psi4/issues/898,1,['variab'],['variables']
Modifiability,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:55,plugin,plugin,55,https://psicode.org,https://github.com/psi4/psi4/issues/971,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:492,variab,variable,492,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['variab'],['variable']
Modifiability,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:791,Variab,Variable,791,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Variab'],['Variable']
Modifiability,"I was trying the `sointegrals` plugin with 14c78eabdca but I got a exception:. ```; RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; ```. GDB show this as the traceback:. ```; #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; ```. Has something in the API changed that needs changing in the plugin?; Replacing the line. ``` c++; shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; ```. with. ``` c++; shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; ```. seems to help. Is this the correct way of handling this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74:31,plugin,plugin,31,https://psicode.org,https://github.com/psi4/psi4/issues/74,2,['plugin'],['plugin']
Modifiability,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455:276,Variab,Variable,276,https://psicode.org,https://github.com/psi4/psi4/issues/455,1,['Variab'],['Variable']
Modifiability,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:290,variab,variable,290,https://psicode.org,https://github.com/psi4/psi4/issues/954,1,['variab'],['variable']
Modifiability,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:573,parameteriz,parameterization,573,https://psicode.org,https://github.com/psi4/psi4/issues/1354,1,['parameteriz'],['parameterization']
Modifiability,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:221,config,configure,221,https://psicode.org,https://github.com/psi4/psi4/issues/1118,2,['config'],['configure']
Modifiability,"I'm having trouble getting everything copied into the install location. I generally configure with `mkdir build; cd build; ccmake ..;`, and then customize the CMAKE_INSTALL_PREFIX and other options from the curses gui. I think maybe `CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT` doesn't get updated here: https://github.com/psi4/psi4public/blob/master/CMakeLists.txt#L103-L114. What's the purpose of that section explicitly changing the install prefix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161:84,config,configure,84,https://psicode.org,https://github.com/psi4/psi4/issues/161,1,['config'],['configure']
Modifiability,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:64,config,configure,64,https://psicode.org,https://github.com/psi4/psi4/issues/1426,2,['config'],['configure']
Modifiability,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410:104,plugin,plugin,104,https://psicode.org,https://github.com/psi4/psi4/issues/410,1,['plugin'],['plugin']
Modifiability,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:462,variab,variables,462,https://psicode.org,https://github.com/psi4/psi4/issues/464,1,['variab'],['variables']
Modifiability,"I've build the default `sointegrals` plugin and used it on the following input file:. ```; molecule CO; {; C; O 1 1.14; units au; }. set {; basis sto-3g; }. plugin_load(""./sointegrals.so""). set sointegrals {; print 10; }. plugin(""sointegrals.so""); ```. This is the output: https://gist.github.com/wpoely86/15abc32a634c0cc4a73f. I think something went wrong. `CO` has `c2v` symmetry here. If I look at the TEI, I'm missing `(2 0 | 0 0)`. Both orbital 0 and 2 are part of the `A1` irrep and so on basis of symmetry, I don't expect this integral to be zero. If I run exactly the same molecule with the `mointegrals` plugin (and symmetric orthogonalisation, so `nmo`==`nso`.), then it does give me the `(2 0 | 0 0)` integral.; The `(0 0 | 0 0)`, `(1 0 | 0 0)`, `(3 0 | 0 0)`, `(4 0 | 0 0)` and `(5 0 | 0 0)` integrals are all present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68:37,plugin,plugin,37,https://psicode.org,https://github.com/psi4/psi4/issues/68,3,['plugin'],['plugin']
Modifiability,"I` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:2606,plugin,plugin,2606,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['plugin'],['plugin']
Modifiability,"If the SCF calculation raises a ``ConvergenceError``, the default ``SCF_TYPE`` option is not restored to the previous value. This means that if the exception is catched, and the program continues, all subsequent calculations might use a different SCF algorithm. I'm using ``psi4 1.8`` installed through ``conda-forge``. Minimal reproducible example; ```python; import numpy as np; import psi4; from psi4.driver.p4util import OptionsState. # Create water molecule.; positions = np.array([; [-0.2950, -0.2180, 0.1540],; [-0.0170, 0.6750, 0.4080],; [0.3120, -0.4570, -0.5630],; ], dtype=np.double); molecule = psi4.core.Molecule.from_arrays(geom=positions, units='angstrom', elem=['O', 'H', 'H']). # Configure.; psi4.core.be_quiet(); psi4.core.set_active_molecule(molecule); psi4.set_options(dict(basis='sto-3g', reference='RHF')). # Check scf type.; scf_type1 = psi4.core.get_global_option('SCF_TYPE'). # Run calculation.; psi4.energy(name='scf'). # Check scf type after converged calculation.; scf_type2 = psi4.core.get_global_option('SCF_TYPE'). # Now run an unconverged calculation.; option_stash = OptionsState(['MAXITER']); psi4.set_options(dict(maxiter=1)); try:; psi4.energy(name='scf'); except psi4.ConvergenceError:; pass; option_stash.restore(). # Check scf type after unconverged calculation.; scf_type3 = psi4.core.get_global_option('SCF_TYPE'). print(scf_type1, scf_type2, scf_type3); ```; output; ```; PK PK DF; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000:697,Config,Configure,697,https://psicode.org,https://github.com/psi4/psi4/issues/3000,1,['Config'],['Configure']
Modifiability,"Improve Compiler Portability Through ""Pedantic"" Compilation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:17,Portab,Portability,17,https://psicode.org,https://github.com/psi4/psi4/pull/3145,1,['Portab'],['Portability']
Modifiability,Improve build configuration for MSVC,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1182:14,config,configuration,14,https://psicode.org,https://github.com/psi4/psi4/pull/1182,1,['config'],['configuration']
Modifiability,"In [`oeprops.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1415), the function `compute_mulliken_charges()` is defined, which adds a vector of atom-centered Mulliken charges to the wavefunction's array variables:. ```c; void OEProp::compute_mulliken_charges() {; PAC::SharedStdVector Qa, Qb, apcs;; std::tie(Qa, Qb, apcs) = pac_.compute_mulliken_charges(true);; wfn_->set_atomic_point_charges(apcs);. auto vec_apcs = std::make_shared<Matrix>(""Mulliken Charges: (a.u.)"", 1, apcs->size());; for (size_t i = 0; i < apcs->size(); i++) {; vec_apcs->set(0, i, (*apcs)[i]);; }; wfn_->set_array_variable(""MULLIKEN CHARGES"", vec_apcs);; }; ```. It would be useful to also get spin densities here, which would just be `Qa - Qb`. Would it also be possible to add an array variable `MULLIKEN SPIN DENSITIES` which contains this value? (also perhaps for Lowdin populations too)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3211:236,variab,variables,236,https://psicode.org,https://github.com/psi4/psi4/issues/3211,2,['variab'],"['variable', 'variables']"
Modifiability,"In the spirit of _not_ keeping issues open for years just because there's something more that could be done, this is a new ticket for some enhancements to the finite difference code, now that we can play with it py-side. - [ ] instead of lists to track all the geometries and corresponding energies, use lists with a bit of metadata to facilitate workflows. discussion started [here](https://github.com/psi4/psi4/issues/884#issuecomment-360953535); - [ ] (adding mostly so we don't lose track) make sure the findif can handle a qcdb.Mol as well as a psi4.core.Mol. I believe @JonathonMisiewicz is on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148:139,enhance,enhancements,139,https://psicode.org,https://github.com/psi4/psi4/issues/1148,1,['enhance'],['enhancements']
Modifiability,Incorrect normalization in SO basis overlap integrals from the plugin template,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874:63,plugin,plugin,63,https://psicode.org,https://github.com/psi4/psi4/issues/874,1,['plugin'],['plugin']
Modifiability,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1257:0,Inherit,Inherit,0,https://psicode.org,https://github.com/psi4/psi4/pull/1257,2,"['Inherit', 'inherit']","['Inherit', 'inheritance']"
Modifiability,"InlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98805== ; ==98805== Process terminating with default action of signal 11 (SIGSEGV); ==98805== Access not within mapped region at address 0x18; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== If you believe this happened as a result of a stack; ==98805== overflow in y",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:2682,plugin,plugin,2682,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['plugin'],['plugin']
Modifiability,Installing Optional Plugins for Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094:20,Plugin,Plugins,20,https://psicode.org,https://github.com/psi4/psi4/issues/3094,1,['Plugin'],['Plugins']
Modifiability,"Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:1256,variab,variables,1256,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['variab'],['variables']
Modifiability,"Investigate DIIS/SAD memory requirements at low memory ranges. cc44 (that sets memory artificially low for other reasons) segfaults in parallel apparently during SAD. The DIIS rewrite is a possible trigger, as test was ok under these conditions at ` 2c5b6e3 - (master) Merge pull request #2191 from loriab/libxc514 (11 months ago) <Andy Simmonett>`. This error is unlikely to be hit under normal running conditions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576:176,rewrite,rewrite,176,https://psicode.org,https://github.com/psi4/psi4/issues/2576,1,['rewrite'],['rewrite']
Modifiability,"It is clear to me that, after a full-CI calculation, is possible to print out the two-particle density matrix (2PDM) in MO basis, BUT it is not clear to me if psi4 also allows to print out the 2PDM in AO basis. Could someone help me to solve this problem, please? I really need the 2PDM in AO basis!. Thanks in advance!. PS: this is the input file I am struggling with:. memory 256 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. plugin_load(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so""). set basis 6-31G; set print 5; set OPDM true; set OPDM_PRINT true; set TPDM true; set TPDM_PRINT true; energy('fci'). plugin(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67:476,plugin,plugins,476,https://psicode.org,https://github.com/psi4/psi4/issues/67,3,['plugin'],"['plugin', 'plugins']"
Modifiability,JK_Grad: Fix for disk paging after wK rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1096:38,rewrite,rewrite,38,https://psicode.org,https://github.com/psi4/psi4/pull/1096,1,['rewrite'],['rewrite']
Modifiability,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525:1284,plugin,plugin,1284,https://psicode.org,https://github.com/psi4/psi4/issues/525,1,['plugin'],['plugin']
Modifiability,Localization of Psi4 variables to Wavefunction objects,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883:21,variab,variables,21,https://psicode.org,https://github.com/psi4/psi4/issues/883,1,['variab'],['variables']
Modifiability,Mac-conda-plugin and other docs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/703:10,plugin,plugin,10,https://psicode.org,https://github.com/psi4/psi4/pull/703,1,['plugin'],['plugin']
Modifiability,"Make OEProp names flexible, to fix CC prop name bug.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:18,flexible,flexible,18,https://psicode.org,https://github.com/psi4/psi4/pull/2534,1,['flexible'],['flexible']
Modifiability,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/977:920,extend,extend,920,https://psicode.org,https://github.com/psi4/psi4/issues/977,1,['extend'],['extend']
Modifiability,"Modifies the exception translator to communicate the file() and line() information to the python exception wrapper class. When debugging a plugin (my use case), this makes it much easier to figure out the source of an exception that's thrown from C++ as `throw PSIEXCEPTION('message')`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/152:139,plugin,plugin,139,https://psicode.org,https://github.com/psi4/psi4/pull/152,1,['plugin'],['plugin']
Modifiability,More variable names for EOM properties. Required infrastructure changes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:5,variab,variable,5,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['variab'],['variable']
Modifiability,Move SCF Class Variables to Function Variables,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2319:15,Variab,Variables,15,https://psicode.org,https://github.com/psi4/psi4/pull/2319,2,['Variab'],['Variables']
Modifiability,N-Body driver refactor (fixes #885),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:14,refactor,refactor,14,https://psicode.org,https://github.com/psi4/psi4/pull/975,1,['refactor'],['refactor']
Modifiability,"NFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -g -O0 -debug -DDEBUG -Wall -Wuninitialized -Wno-unknown-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-report -Wall -Wuninitialized ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:3628,Plugin,Plugins,3628,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['Plugin'],['Plugins']
Modifiability,"O Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. With these changes, 30 lines of code replaces about 230. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L58-L68), and likewise for virtual orbitals. These spaces have conflicting labels. ; [Uppercase letters mean the alpha orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L306) and [lower case letters mean the beta orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L505). We need to change the labels of the frozen core and frozen virtual spaces to break the conflict. We currently have five votes (Lori, Andy, Susi, Jet, and I) for `C` for froze",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:2837,plugin,plugin-friendly,2837,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['plugin'],['plugin-friendly']
Modifiability,"OInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual initialization of screening variables via `create_sieve_pair_info()` needed for JK builds.; - [X] Uses the above function to fix combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` which were broken.; - [X] Updates the `test_comprehensive_jk_screening.py` and `test_erisieve.py` test to account for the previously-described fixes. ## Questions; -[] Should we keep the `initialize_sieve` name? I named it as such, because it is basically a light wrapper to manually call `create_sieve_pair_info`. But the name of ""sieve"" might be objectionable. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:2090,variab,variables,2090,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['variab'],['variables']
Modifiability,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612:1687,config,configured,1687,https://psicode.org,https://github.com/psi4/psi4/issues/612,1,['config'],['configured']
Modifiability,"On some systems, the default temp location should not be `/tmp`; but it is set by either `$TMPDIR`, `$TEMP` or `$TMP` (commenly done on HPC; systems, where the temp location may be somthing special, a ssd for example).; This patch first checks those 3 environment variables; and uses its value when set. It falls back to `/tmp` when; nothing is set. `std::getenv` needs C++11 to be thread safe.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97:264,variab,variables,264,https://psicode.org,https://github.com/psi4/psi4/pull/97,1,['variab'],['variables']
Modifiability,Options Rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3220:8,Rewrite,Rewrite,8,https://psicode.org,https://github.com/psi4/psi4/pull/3220,1,['Rewrite'],['Rewrite']
Modifiability,Patch to allow the plugin code to work with PYMOD paths,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/490:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/pull/490,1,['plugin'],['plugin']
Modifiability,Plugin example broken,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/3093,1,['Plugin'],['Plugin']
Modifiability,Plugin examples gone,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/78,1,['Plugin'],['Plugin']
Modifiability,Plugin fix,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['Plugin'],['Plugin']
Modifiability,Plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/489:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/489,1,['Plugin'],['Plugins']
Modifiability,"Plugins `aointegrals` and `mointegrals` work, but at least `backtrans` is broken, presumably by @lothian changes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/221:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/issues/221,1,['Plugin'],['Plugins']
Modifiability,Plugins aren't getting global variables,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/issues/3200,2,"['Plugin', 'variab']","['Plugins', 'variables']"
Modifiability,Plugins psiapi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/992:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/992,1,['Plugin'],['Plugins']
Modifiability,Prevents the user from using C++ keywords for plugin names.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532:46,plugin,plugin,46,https://psicode.org,https://github.com/psi4/psi4/pull/532,1,['plugin'],['plugin']
Modifiability,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:44,variab,variables,44,https://psicode.org,https://github.com/psi4/psi4/issues/3200,5,"['Config', 'plugin', 'variab']","['Configure', 'plugin', 'plugin-compile', 'plugins', 'variables']"
Modifiability,Psi4 fails to configure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092:14,config,configure,14,https://psicode.org,https://github.com/psi4/psi4/issues/3092,1,['config'],['configure']
Modifiability,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883:27,variab,variable,27,https://psicode.org,https://github.com/psi4/psi4/issues/883,9,['variab'],"['variable', 'variables']"
Modifiability,"Question about plugin ""installation""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:15,plugin,plugin,15,https://psicode.org,https://github.com/psi4/psi4/issues/229,1,['plugin'],['plugin']
Modifiability,"R will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementation? If we decide to make the changes to DFJCOSK this PR, it would essentially consist of refactoring the DFJCOSK IncFock to match that of DFJLinK, and adding the bells and whistles that DFJLinK currently has.; - [ ] Should the relevant test outputs be updated?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:3222,refactor,refactorings,3222,https://psicode.org,https://github.com/psi4/psi4/pull/2792,2,['refactor'],"['refactoring', 'refactorings']"
Modifiability,"RARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.a; ```. If I unlink the home-brew boost in `/usr/local` and run the same setup the custom boost is configured to build. . adding the flags `-DBoost_DEBUG=ON -DBoost_DETAILED_FAILURE_MESSAGE=ON`. I can see all of the output related to FindBoost.cmake is identical. CMake is searching the correct path for the boost library files (`$HOME/anaconda/envs/psi4-py2.7/lib`). And does not add `/usr/local/anything` to the search paths. . Yet, if boost 1.60.0 is linked it reports it found the correct libraries version 1.59.0, and if those links are removed it reports they are not found. In both cases it sets `Boost_FOUND = 1` but with the boost 1.60.0 links removed the pre-packaged boost is configured to build anyway. . It is also interesting that `_boost_TEST_VERSIONS` includes 1.55.0-1.58.0. (Both 1.59.0 and 1.60.0 aren't included) I am not sure if that is related to this problem though. FindBoost.cmake debuting output : . ```; -- Found Python: /Users/admin/anaconda/lib/libpython2.7.dylib ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:2199,config,configured,2199,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['config'],['configured']
Modifiability,Reboot - Density Screening Refactor Part 2: Implementation of shell_significant(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:27,Refactor,Refactor,27,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['Refactor'],['Refactor']
Modifiability,"Rebuilding Psi4 1.3.2 in Fedora rawhide fails with; ```; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; error: Bad exit status from /var/tmp/rpm-tmp.sQzcRh (%build); ```; The issue here is that distutils was deprecated in Python 3.10 and marked for deletion in 3.12:; https://docs.python.org/3/whatsnew/3.10.html#distutils-deprecated. The file in master has been slightly updated, but still features the use of distutils, so this issue is likely present on the master branch as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020:225,config,config,225,https://psicode.org,https://github.com/psi4/psi4/issues/3020,2,"['Config', 'config']","['Configuring', 'config']"
Modifiability,Refactor Incremental Fock Builds in Chain-of-Spheres Exchange,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2682,1,['Refactor'],['Refactor']
Modifiability,Refactor LinK and COSK into Composite JK,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['Refactor'],['Refactor']
Modifiability,Refactor Recursive Driver Into Distributed Driver,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['Refactor'],['Refactor']
Modifiability,"Refactor Recursive Driver Into Distributed Driver, Again",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['Refactor'],['Refactor']
Modifiability,Refactor `JK_deriv2`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2994,1,['Refactor'],['Refactor']
Modifiability,Refactor `PseudospectralInts` using Libint2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2473,1,['Refactor'],['Refactor']
Modifiability,Refactor `Vector` and `IntVector`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2628,1,['Refactor'],['Refactor']
Modifiability,Refactor `libmints::IntegralFactory.electric_field()` to return ElectricFieldInt,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2795,1,['Refactor'],['Refactor']
Modifiability,Refactor assemble_Q,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2996:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2996,1,['Refactor'],['Refactor']
Modifiability,Refactoring of Dimension class,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:0,Refactor,Refactoring,0,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['Refactor'],['Refactoring']
Modifiability,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660:220,variab,variables,220,https://psicode.org,https://github.com/psi4/psi4/issues/660,4,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,Replace 'get_array' with 'variable' to avoid deprecation warning. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1549:26,variab,variable,26,https://psicode.org,https://github.com/psi4/psi4/pull/1549,1,['variab'],['variable']
Modifiability,Resolves configure issue in libqt wrt lapack,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1342:9,config,configure,9,https://psicode.org,https://github.com/psi4/psi4/pull/1342,1,['config'],['configure']
Modifiability,Restore Plugin SCF Subclasses,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:8,Plugin,Plugin,8,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['Plugin'],['Plugin']
Modifiability,Rewrite `ras_set`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3208:0,Rewrite,Rewrite,0,https://psicode.org,https://github.com/psi4/psi4/pull/3208,1,['Rewrite'],['Rewrite']
Modifiability,"SCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1029,variab,variable,1029,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['variab'],['variable']
Modifiability,SNS-MP2 Plugin Addition,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:8,Plugin,Plugin,8,https://psicode.org,https://github.com/psi4/psi4/pull/850,1,['Plugin'],['Plugin']
Modifiability,"SX_GUESS` can be used in conjunction with either the `DIRECT` or `DFDIRJ+LINK` options for `SCF_TYPE` . When enabled, the calculation will first converge the SCF on a small `COSX` grid, followed by executing SCF using the specified `SCF_TYPE`. Another way of framing it, is that `SCF_COSX_GUESS` is similar to `DF_SCF_GUESS`, but uses `COSX` instead of `DFJK` for the initial SCF convergence process. To support `SCF_COSX_GUESS`, some keyword functionality has been expanded. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` can be used to control the `COSX` grid size for the `SCF_COSX_GUESS`, with the grid in this context defaulting to (20/50). `COSX_MAXITER_FINAL` can be used to control the number of `DIRECT`/`DFDIRJ+LINK` iterations to run after the `COSX` guess, defaulting to 2 in this context. Note that the grid for `SCF_COSX_GUESS` uses different defaults compared to the usual initial grid for `DFDIRJ+COSX` runs. This PR also adds a fair bit of cleanup/QoL changes, as follows:; - The `early_screening` variable in `scf_iterator.py`, and all related quantities, have been renamed for clarity.; - `DFDIRJ+LINK` can now be used in conjunction with `DF_SCF_GUESS`.; - Tests have been expanded. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`. The grid used by the COSX guess can be controlled by the `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` keywords.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:1836,variab,variable,1836,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['variab'],['variable']
Modifiability,"Search the code for units. Modify as needed accordint to principles below. Don't forget to extend table lines if needed; - [x] `[Eh]` _may_ go unlabeled, but not recommended (future pass).; - [x] If more than one units is printed or unit is _not_ `[Eh]` it must have a label.; - [x] `[Eh]`, not `[Ha]` or `[H]`; - [x] all units in square brackets; - [x] use parentheses if needed and space for multiplication, e.g., `[kJ/(mol K)]`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/357:91,extend,extend,91,https://psicode.org,https://github.com/psi4/psi4/issues/357,1,['extend'],['extend']
Modifiability,"See conversation at https://github.com/psi4/psi4public/issues/214 . If an experienced psi4 developer checks out a plugin from the binary, he can guess what modifications the Makefile will need and proceed. If an inexperience user checks out a plugin from the binary, he may not even have a compiler. So there needs to be at least one easy and documented way to get the plugin working. This ticket is to make that happen.; - [x] Implement the Makefile template reference in https://github.com/psi4/psi4/issues/214#issuecomment-172256746 . There's a cmake variable `-DENABLE_CONDA_DEST` that you can use to tell c-side if it's a conda build.; - [ ] Use that same cmake variable to print to the user a link to the manual on compiling plugins from conda; - [ ] at that manual page, talk about; - conda env w/`psi4`, `gcc`, `openblas`; - must _activate_ conda env; - register plugins at https://github.com/psi4/psi4public/blob/master/lib/python/aliases.py#L46; - place plugins a la https://github.com/psi4/psi4meta/blob/master/conda-recipes/csx4psi/build.sh. I'm not sure myself how `PYTHONPATH`/`PSIPATH` is picking up on where plugins located. Conda metapackage is still under assembly, so don't do too detailed docs yet. The first two bullets are ready, though.; - [ ] in doc/sphinxman/plugins.rst, review and update the available plugin flavors; - [ ] in doc/sphinxman/plugins.rst, remove reference to needing `--with-plugins`, as everything is fPIC these days",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216:114,plugin,plugin,114,https://psicode.org,https://github.com/psi4/psi4/issues/216,13,"['plugin', 'variab']","['plugin', 'plugins', 'variable']"
Modifiability,"Separate J and K Build Capabilities, DirectDFJ Algorithm, and Refactor of LinK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:62,Refactor,Refactor,62,https://psicode.org,https://github.com/psi4/psi4/pull/2543,1,['Refactor'],['Refactor']
Modifiability,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:268,adapt,adapted,268,https://psicode.org,https://github.com/psi4/psi4/issues/1021,1,['adapt'],['adapted']
Modifiability,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:1269,plugin,plugins,1269,https://psicode.org,https://github.com/psi4/psi4/issues/688,2,['plugin'],['plugins']
Modifiability,Single cpu job fails in `qcengine/config.py` with `KeyError`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:34,config,config,34,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,Small Refactor of Exception Call Stack Size,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:6,Refactor,Refactor,6,https://psicode.org,https://github.com/psi4/psi4/pull/3179,1,['Refactor'],['Refactor']
Modifiability,"Some of the MRCC-related tests fail to run, for reasons unrelated to the actual MRCC interface as far as I can tell.; ```; (p4env) gytibor@CRD-CSLW-1:~/qcta$ pytest -m mrcc /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.9.12, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4, configfile: pytest.ini; collected 4121 items / 4114 deselected / 7 selected. ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_addons.py . [ 14%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py F [ 28%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py F [ 42%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt/test_input.py . [ 57%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt_q_/test_input.py . [ 71%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/optfreq/test_input.py F [ 85%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/rohf_ccsdt_q_/test_input.py . [100%]; .; <snip>; .; ========================================================================================================== short test summary info ==========================================================================================================; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2634:629,config,configfile,629,https://psicode.org,https://github.com/psi4/psi4/issues/2634,1,['config'],['configfile']
Modifiability,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:82,plugin,plugin,82,https://psicode.org,https://github.com/psi4/psi4/issues/1920,1,['plugin'],['plugin']
Modifiability,"TD-DFT has [symmetry-labeled psivars](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L643-L670). The EOM-CC code psivars do not. For both consistency and user convenience, these variables should be symmetry-labelled. The offending code is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L974-L977). Because the variables are written to globals rather than a wavefunction, the code is doubly offensive. (See #883.). Carried forward from [forum request](http://forum.psicode.org/t/excited-state-properties-from-psi4-api/2100/6).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2145:221,variab,variables,221,https://psicode.org,https://github.com/psi4/psi4/issues/2145,2,['variab'],['variables']
Modifiability,"Thanks for putting Psi4 on conda-forge, this is very exciting. However, I noticed that creating an environment out of the box with mamba using conda-forge Psi4 seems to set PSIDATADIR to a build directory. (I'll try with conda as well). ```shell; $ mamba create --name psi4-1.8-py39 python=3.9 psi4=1.8 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8-py39; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/lib/python3.9/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815705089/work/build/stage/share/psi4'; ```. I tried 3.11 as well:. ```shell; $ mamba create --name psi4-1.8 psi4 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/lilywang/miniconda3/envs/psi4-1.8/lib/python3.11/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815712644/work/build/stage/share/psi4'; ```; Manually setting PSIDATADIR seems to fix things, but the docs actively recommend against doing that:. ```; $ export PSIDATADIR=~/miniconda3/envs/psi4-1.8/share/psi4; $ psi4 --version; 1.8; `",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2993:760,variab,variable,760,https://psicode.org,https://github.com/psi4/psi4/issues/2993,2,['variab'],['variable']
Modifiability,"The CheMPS2 interface is missing support for an additional input value for the parameter `DMRG_SCF_ACTIVE_SPACE`. According to [Psi4 documentation](http://www.psicode.org/psi4manual/1.2/autodoc_glossary_options_c.html#term-dmrg-scf-active-space-dmrg) it can be `INPUT`, `NO` and `LOC`, which map to `0`, `1` and `2` respectively for the variable `WhichActiveSpace_in` in [CheMPS2](https://sebwouters.github.io/CheMPS2/dmrgscfcalcs.html). However, `WhichActiveSpace_in` accepts an additional value of `3` for reordering orbitals without localization. This feature seems to have been introduced in https://github.com/SebWouters/CheMPS2/commit/79fb7c6f2b4cc2d628e5593fc8aa548c572a9e83.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1242:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/issues/1242,1,['variab'],['variable']
Modifiability,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2209:409,config,configurations,409,https://psicode.org,https://github.com/psi4/psi4/issues/2209,1,['config'],['configurations']
Modifiability,The Python_EXECUTABLE variable should be passed down to all cmake invocations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796:22,variab,variable,22,https://psicode.org,https://github.com/psi4/psi4/issues/2796,1,['variab'],['variable']
Modifiability,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2153:264,variab,variables,264,https://psicode.org,https://github.com/psi4/psi4/issues/2153,1,['variab'],['variables']
Modifiability,"The `--new-plugin` and `--new-plugin-makefile` generators are a really awesome idea. Unfortunately, they don't quite work properly with the latest conda binaries from `conda install -c psi4 psi4`, because the `Makefile` is generated with absolute paths to the build machine. For example, I get something like this setting the compiler and include directories in the generated makefile. I assume this works great on your cluster, but no to much on mine:. ```; # Flags that were used to compile Psi4.; CXX = /theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG; LDFLAGS = -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel -L/theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/usr/lib64 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libpthread.so.0 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libc.so.6; INCLUDES = -I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/home/rmcgibbo/miniconda/envs/2.7/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include; OBJDIR = /scratch/cdsgroup/conda-builds/work/build; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214:11,plugin,plugin,11,https://psicode.org,https://github.com/psi4/psi4/issues/214,2,['plugin'],"['plugin', 'plugin-makefile']"
Modifiability,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519:837,refactor,refactor,837,https://psicode.org,https://github.com/psi4/psi4/issues/2519,2,['refactor'],"['refactor', 'refactoring']"
Modifiability,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2215:137,coupling,coupling,137,https://psicode.org,https://github.com/psi4/psi4/issues/2215,1,['coupling'],['coupling']
Modifiability,"The class inheritance diagrams in the documentation are currently broken: [http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram](http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram). My best guess is that something must have went wrong with the sphinx doc generation, but beyond that I have no idea.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/792:10,inherit,inheritance,10,https://psicode.org,https://github.com/psi4/psi4/issues/792,3,['inherit'],"['inheritance', 'inheritance-diagram']"
Modifiability,"The eps file doc/progman/svn/svn.eps.in is 1.4 MB and takes a long time to render in Gnome evince. Furthermore, it has the following commtens inside:. %%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.; %%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved. Apparently, doc/progman/svn.fig is the source for a previous version of this .eps. As the progman Makefile is no longer generated by configure.ac, maybe the whole directory could be yanked or the .eps regenerated with fig2dev (which also reduces the size to a few kilobytes)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/26:437,config,configure,437,https://psicode.org,https://github.com/psi4/psi4/issues/26,1,['config'],['configure']
Modifiability,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305:368,variab,variable,368,https://psicode.org,https://github.com/psi4/psi4/issues/2305,2,['variab'],['variable']
Modifiability,"The following input:. ```; E, wfn = energy(cbs, cbs_metadata=[{""wfn"":""hf"", ""basis"": ""cc-pwcv[tq]z-pp""},; {""wfn"":""mp2"", ""basis"": ""cc-pwcvtz-pp""}],; molecule=dimer,; return_wfn=True, dertype=0,; bsse_type=""cp""); ```. crashes with `UnboundLocalError: local variable 'bsse' referenced before assignment`. This is related to the logic on line 665:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L661-L668. The first (and only) assignment into `bsse` comes after, on line 681:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L680-L685. I'm not sure what this logic is doing exactly, but I'm guessing just switching the order of the blocks might do the trick.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649:254,variab,variable,254,https://psicode.org,https://github.com/psi4/psi4/issues/1649,1,['variab'],['variable']
Modifiability,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:168,plugin,plugin,168,https://psicode.org,https://github.com/psi4/psi4/pull/1552,1,['plugin'],['plugin']
Modifiability,"The title is pleasantly self-explanatory. The `set_gradient` call will automatically set the `gradient_` variable. With the old way of setting the gradient, the gradient wouldn't be picked up by serialization, meaning my attempt at an optking3 IRC (of course) was failing. I'll also take this opportunity to soapbox about why we (read: I) need to centralize our DF gradient code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1737:105,variab,variable,105,https://psicode.org,https://github.com/psi4/psi4/pull/1737,1,['variab'],['variable']
Modifiability,"The up-to-date master branch fails to configure in Fedora; ```; $ cmake ..; CMake Error at CMakeLists.txt:5 (cmake_policy):; Policy ""CMP0144"" is not known to this version of CMake.; $ rpm -q cmake; cmake-3.27.7-1.fc39.x86_64; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092:38,config,configure,38,https://psicode.org,https://github.com/psi4/psi4/issues/3092,1,['config'],['configure']
Modifiability,"There are many ways to converge RHF, and sometimes you can get stuck in a local minmum, that's true. However, the following case is quite striking. My input:. ---. molecule N2 {; N 0.000000000000 0.000000000000 0.000000000000; N 0.000000000000 0.000000000000 2.060000000000; units au; }. plugin_load(""./mointegrals.so""). set basis sto-3g; set mointegrals print 1; set reference rhf. scf(). plugin(""mointegrals.so""). ---. I use the MO integrals for a subsequent FCI calculation (in a self-written program). When I start from the RHF determinant given by Psi4:. DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; Total Energy = -106.7540443603229363. the FCI energy converges to the wrong answer. When I look at the energies from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in the MO single-particle basis from Psi4, there is a determinant (in that MO basis!) with an energy which is lower: E = -107.488903265175 . The FCI energy then does converge to the right answer when this determinant is given as input for Davidson iterations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63:390,plugin,plugin,390,https://psicode.org,https://github.com/psi4/psi4/issues/63,1,['plugin'],['plugin']
Modifiability,There seems to be a regression in Boost 1.60 that causes problems with Psi4 (and other projects).; It has been created as an issue in the boost python repo: https://github.com/boostorg/python/issues/56. Maybe the version could be checked in the CMake configure step. It can then either abort (if the user was trying to force the use of system boost) or use the boost distributed with Psi4. Adding this since #230 was closed (and it was unrelated anyway),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/243:251,config,configure,251,https://psicode.org,https://github.com/psi4/psi4/issues/243,1,['config'],['configure']
Modifiability,"There was some discussion on coming up with a coding style guide for Psi4. I don't think the idea is that we reformat all of Psi, but if you are going to reformat a section you should *try* to adhere to the following. My personal `clang-format` settings for C++ are:; ```; {; ""BasedOnStyle"": ""Google"",; ""IndentWidth"": 4,; ""ColumnLimit"": 120,; }; ```. Personally, I feel fairly strongly about the 4 indent width, I like the Google style in general, and the column limit is sort of an arbitrary number. My YAPF setting for Python are:; ```; {; ""config"": {; ""COLUMN_LIMIT"": 119,; }; }; ```; I seem to recall there is a good reason that it's 119 not 120, but I cannot remember what that is for the life of me. Personally, not a huge fan of enforced style guides through hook mechanisms, but I can go with the flow on it. I mostly feel that being a consistent style is really nice to have, but is not required. And those hook warnings like `# noflakes...` is worse than having a style thats a little off, again, IMO. Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752:543,config,config,543,https://psicode.org,https://github.com/psi4/psi4/issues/752,1,['config'],['config']
Modifiability,"There's a lot of steps in the grand Libint2 project, so here's a place to organize and update progress. Also, this is a place to see if there's a conda package configured to test each step. Table at the top includes steps that need new requirements of L2 library. List below has more intermediate steps. | step | status | libint ver & branch | Psi4 | tarball[^1] | order | component style | linux-64[^8] | osx-64[^8] | win-64[^8] |; | ---- | ------ | ------- | ---- | -------- | ---- | ------ | ----- | ------ | -------- |; | 1[^3] | longstanding L1 | L1 [evaleev:5c89451](https://github.com/evaleev/libint/tree/5c89451) | v1.3 | — | gss | `5` | L1 `_6` | L1 `_2` | — |; | 2[^4] | TEI L2 | [loriab:l2cmake](https://github.com/loriab/libint/tree/l2cmake) https://github.com/evaleev/libint/pull/148 | 20Nov20, after #1721, v1.4, 1.5 | L: `7-7-4-7-7-5_1`, MW: `5-4-3-6-5-4_1` | gss | `g5` | `_9` | `_3` | `_1` |; | 3[^5] | OEI L2 | ditto step 2 | 11Mar22, after #2388 | L: `5-4-3-6-5-4_mm25f12ob2`, MW: `5-4-3-6-5-4_mm4ob2` | gss | `g5` | rm `_13` | ~`_4`~ rm `_6` | ~`_3`~ rm `_5` |; | B[^7] | upstream L2 cmake | [loriab:new-cmake-harness-lab-rb1](https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1) https://github.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:160,config,configured,160,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['config'],['configured']
Modifiability,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:229,extend,extended,229,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['extend'],['extended']
Modifiability,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2514:207,variab,variable,207,https://psicode.org,https://github.com/psi4/psi4/pull/2514,2,"['refactor', 'variab']","['refactor', 'variable']"
Modifiability,"This command fails:; ```; $ cd samples/cc24 && psi4 test.in ; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:619,config,config,619,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['config'],['config']
Modifiability,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114:794,variab,variables,794,https://psicode.org,https://github.com/psi4/psi4/issues/1114,1,['variab'],['variables']
Modifiability,"This is a list of things that are generally agreed as ""good things to do"", but nobody has actually tackled yet. The hope is that this is used a central repository of ""have you thought about this"" comments. Note that this is a not a feature wish list.; ## High; - [ ] Deprecate PSIO by moving to HDF5. With a temporary under the hood PSIO move to HDF5.; - [x] Remove `boost::python` and replace with PyBind11.; - [x] Possibly remove Boost with C++11 features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402:566,flexible,flexible,566,https://psicode.org,https://github.com/psi4/psi4/issues/402,3,"['Rewrite', 'Variab', 'flexible']","['Rewrite', 'Variables', 'flexible']"
Modifiability,"This is not a psi4 issue, but users are affected by it. Something is off with the new single dynamic library from intel and gcc + mkl2017 building. Essentially, sometimes you can get over subscription (nested OpenMP+MKL threading), and sometimes threading does not work at all. Through trial and error I found the following env variables set the expected behavior:. ```; export MKL_THREADING_LAYER=GNU; export MKL_INTERFACE_LAYER=GNU; export OMP_NESTED=""FALSE"" <-- supposed to be libgomp default, but is not?; ```. Maybe not all 3 are needed, or there is some other flag. I was just happy to get the proper behavior. I tested gcc 4.9.4/6.3 and MKL2017 and MKL2017.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671:328,variab,variables,328,https://psicode.org,https://github.com/psi4/psi4/issues/671,1,['variab'],['variables']
Modifiability,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562:355,extend,extending,355,https://psicode.org,https://github.com/psi4/psi4/issues/562,1,['extend'],['extending']
Modifiability,"This is the list of changes made for the wavefunction passing update. This is a very large change that modified virtually every file in Psi4, details of the why and what can be found [here](https://github.com/psi4/psi4public/wiki/Changes-to-Information-Passing-in-Psi4-%28Jan-2016%29). This is slightly long, but please read this fully as there is a decent chance that advanced users will have to make some tweaks to their existing input files. A quick rundown of the changes:; - Energy, gradient, etc now actually return a energy (a number), gradient (a matrix), etc. A good example of these changes is [this](https://github.com/psi4/psi4public/commit/a559003d1e4be8ac36107ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::env",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:785,variab,variables,785,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['variab'],['variables']
Modifiability,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:1216,Plugin,Plugin,1216,https://psicode.org,https://github.com/psi4/psi4/issues/259,1,['Plugin'],['Plugin']
Modifiability,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:56,variab,variables,56,https://psicode.org,https://github.com/psi4/psi4/issues/2486,8,"['Variab', 'variab']","['Variables', 'variable', 'variables']"
Modifiability,"This issue is a code cleanup wishlist. Please place a code cleanup issue here if you see it in a PR, but fixing it would be outside the scope of the PR. - [x] Remove `new` from `lib3index/fittingmetric.cc`. In some cases, `new` is used to initialize... a raw pointer that points to `std::shared_ptr<OneBodyAOInt>`. In 2022, this should be a `std::vector`.; - [ ] `onebody.h` and its derived classes have many member variables that are `double*`. Let's change to `std::vector<double>` if we can, to avoid having to worry about new/delete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412:416,variab,variables,416,https://psicode.org,https://github.com/psi4/psi4/issues/2412,1,['variab'],['variables']
Modifiability,"This issue is intended more as a discussion, than a real issue. At the moment it is not possible to call Psi4 under MPI with more than one process per node because of [this](https://github.com/psi4/psi4/blob/fe3ab0d351e05276185ad838f3bcf2c0321be2fe/psi4/driver/procedures/proc.py#L1340). Basically this creates a file that has a non-unique name on each process and then when it goes to delete the file each process deletes the same file leading to an error for every process after the first one. Although this could be fixed easily (either only write to some master process or ensure that the filename is unique. The latter is easily done [in python](http://stackoverflow.com/questions/2961509/python-how-to-create-a-unique-file-name) and [in C++](http://en.cppreference.com/w/cpp/io/c/tmpnam), or by using the process ID) this has been a problem before and is likely to be a problem again, hence I am hoping to reach a more permanent solution. To me the most obvious solution is to make a file writer (stream writer is even better as it then also works for printing, in turn killing two birds with one stone) object/library that handles all read/writes and does so in a way that will not interfere with MPI. In theory `libpsio` could be used for this, but it would have to be extended to writing other types of files aside from binary (I'm under the impression that it only writes binary files). Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548:1277,extend,extended,1277,https://psicode.org,https://github.com/psi4/psi4/issues/548,1,['extend'],['extended']
Modifiability,"This issue is similar to #3084. For psi4 installed via conda/mamba (both 4.18.2 and 4.19) on an hpc system that has a symlink for the /home directory (the same hpc system in the prior issue), psi4 has trouble resolving paths that don't call `.resolve()`. while the changes made in response to #3084 mostly fix the issue, there appears to be two other places `.resolve()` should be added:. https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/__init__.py#L47-L48. The full error is below:; ```; [2024-01-25 07:17:41 EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:570,config,config,570,https://psicode.org,https://github.com/psi4/psi4/issues/3126,4,['config'],"['config', 'configs', 'configuration']"
Modifiability,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?. _Originally posted by @mbanck in https://github.com/psi4/psi4/issue_comments#issuecomment-451527924_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1457:255,variab,variables,255,https://psicode.org,https://github.com/psi4/psi4/issues/1457,1,['variab'],['variables']
Modifiability,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:526,enhance,enhancement,526,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,['enhance'],"['enhancement', 'enhancements']"
Modifiability,Travis: conda config settings are not saved in cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:14,config,config,14,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['config'],['config']
Modifiability,"Trying out the SCF plugin with the current master branch I get the error; ```; $ psi4 h2o.in; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/openorbital/openorbital/psi4/scf/myplugin/pymodule.py"", line 60, in run_myplugin; psi4.set_scalar_variable('CURRENT ENERGY', myplugin_wfn.energy()). AttributeError: module 'psi4' has no attribute 'set_scalar_variable'. Printing out the relevant lines from the Psithon --> Python processed input file:; H 0.866811766153153 0.601435735686679 0.000000000000000; H -0.866811766153153 0.601435735686679 0.000000000000000; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""pcseg-1""); --> energy('myplugin'). !-------------------------------------------------------!; ! !; ! module 'psi4' has no attribute 'set_scalar_variable' !; ! !; !-------------------------------------------------------!. Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/3093,1,['plugin'],['plugin']
Modifiability,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452:150,plugin,plugins,150,https://psicode.org,https://github.com/psi4/psi4/issues/452,1,['plugin'],['plugins']
Modifiability,Tweaking cmake ConfigPython,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/172:15,Config,ConfigPython,15,https://psicode.org,https://github.com/psi4/psi4/pull/172,1,['Config'],['ConfigPython']
Modifiability,"Update the SAPT output to conform with the recommendations of our systematic study in ``Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M. Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140, 094106 (2014) [doi: 10.1063/1.4867135 ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37:107,Adapt,Adapted,107,https://psicode.org,https://github.com/psi4/psi4/issues/37,1,['Adapt'],['Adapted']
Modifiability,Updates Ambit version and Psi4's configuration of it,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/275:33,config,configuration,33,https://psicode.org,https://github.com/psi4/psi4/pull/275,1,['config'],['configuration']
Modifiability,"Upon examining the reference output from tests, none of the four OMP2.5 tests show convergence of the T2 amplitudes. [The T2 residuals stay at the same order of magnitude for every single iteration.](https://github.com/psi4/psi4/blob/master/tests/omp2p5-2/output.ref#L352-L360) Neither the OMP3 tests nor the DF-OMP2.5 tests show this behavior, which suggests the T2 amplitude non-convergence is a bug in the `occ` modification of OMP3 to produce OMP2.5. This issue blocks improving orbital convergence in OCC by coupling it to amplitude convergence, issue #1777. Due to this issue, the proposed scheme instead causes non-convergence of both quantities. I will fix this issue as the next PR in the ""OCC's Open-Heart Surgery"" series. Core developers, please mark this issue as a 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808:513,coupling,coupling,513,https://psicode.org,https://github.com/psi4/psi4/issues/1808,1,['coupling'],['coupling']
Modifiability,"Using 521f06adb441ac1e2f1732eb1cd090190b409c49:. ```; make[2]: Entering directory '/home/ward/tmp/psi4release/build'; /usr/bin/cmake -E cmake_progress_report /home/ward/tmp/psi4release/build/CMakeFiles ; [ 98%] [ 98%] Build aointegrals example plugin; cd /home/ward/tmp/psi4release/build/plugins/aointegrals && ../../bin/psi4 --new-plugin-makefile; Build skeleton example plugin; cd /home/ward/tmp/psi4release/build/plugins && /usr/bin/cmake -E remove_directory /home/ward/tmp/psi4release/build/plugins/skeleton; cd /home/ward/tmp/psi4release/build/plugins && ../bin/psi4 --new-plugin skeleton; Creating new plugin Makefile in the current directory.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; Created new plugin directory, skeleton, using 'plugin' template.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/build.make:49: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals' failed; make[2]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals] Error 1; plugins/CMakeFiles/plugin_skeleton.dir/build.make:49: recipe for target 'plugins/CMakeFiles/plugin_skeleton' failed; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; make[2]: *** [plugins/CMakeFiles/plugin_skeleton] Error 1; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; CMakeFiles/Makefile2:9569: recipe for target 'plugins/CMakeFiles/plugin_skeleton.dir/all' failed; make[1]: *** [plugins/CMakeFiles/plugin_skeleton.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; CMakeFiles/Makefile2:9619: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all' failed; make[1]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all] Error 2; make[1]: Leaving directory '/home/ward/tmp/psi4release/build'; Makefile",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:244,plugin,plugin,244,https://psicode.org,https://github.com/psi4/psi4/issues/90,16,"['plugin', 'variab']","['plugin', 'plugin-makefile', 'plugins', 'variable']"
Modifiability,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272:385,variab,variable,385,https://psicode.org,https://github.com/psi4/psi4/issues/2272,1,['variab'],['variable']
Modifiability,WIP: Adds compiler flags from Psi4 to plugins.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543:38,plugin,plugins,38,https://psicode.org,https://github.com/psi4/psi4/pull/543,1,['plugin'],['plugins']
Modifiability,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:47,rewrite,rewrite,47,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['rewrite'],['rewrite']
Modifiability,"We tend to build with all Gnu compilers or all Intel compilers or maybe icpc/gfortran? Sometime, give the other combinations a spin to make sure our CMake config system can handle them. There's evidence (http://forum.psicode.org/t/gcc-and-fort-on-an-el-capitan-mac/165) that it can't. ; - [x] icpc & gfortran on linux; - [ ] g++ & ifort on linux; - [ ] icpc & gfortran on mac; - [ ] g++ & ifort on mac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/297:155,config,config,155,https://psicode.org,https://github.com/psi4/psi4/issues/297,1,['config'],['config']
Modifiability,We use the strategy devised by @loriab for external add ons. This commit provides the necessary Find\* and Config\* CMake script files. Other modifications take into account the new strategy.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/217:107,Config,Config,107,https://psicode.org,https://github.com/psi4/psi4/pull/217,1,['Config'],['Config']
Modifiability,"Wed, 29 Aug. You have until then to indicate (on the PR) that this will interrupt your development. If that happens, the PR can be closed and postponed to accommodate you. Unchallenged PRs will be merged over the week. Modules to be skipped include occ/dfocc/findif/optking/interface_dmrg because of outstanding PRs, imminent demise, or need to compare easily with upstream plugin. - [x] adc #1152; - [x] ambit_interface #1172 ; - [x] ccdensity -- delay to 29 Aug #1202; - [x] ccenergy -- delay to 29 Aug #1203; - [x] cceom #1204; - [x] cchbar #1205; - [x] cclambda -- delay to 29 Aug #1206; - [x] ccresponse #1207; - [x] cctransort #1208; - [x] cctriples -- ~delay to 29 Aug (wait for #1199) #1209~ #1252 ; - [x] dcft #1154; - [x] detci #1155; - [x] dfep2 #1157 ; - [x] dfmp2 #1159; - [x] dfocc -- mostly done in #797, touch-ups in #1392; - [x] dmrg -- turning off formatting so can diff with plugin in CheMPS2 repo #1392; - ~findif~; - [x] fisapt #1175; - [x] fnocc #1158; - [x] gdma_interface #1166; - [x] lib3index ~#1169 (wait for #1200)~ #1389; - [x] libciomr #1173; - [x] libcubeprop -- delay to 29 Aug (wait for #1138) #1210 ; - [x] libdiis #1167; - [x] libdisp #1168; - [x] libdpd -- ~delay to 29 Aug (wait for #1199) #1211~ #1251 ; - [x] libfilesystem #1174; - [x] libfock ~#1164 (wait for #1224 and for @dgasmith )~ #1397; - [x] libfunctional -- ~delay to 29 Aug #1195 (wait for @dgasmith)~ #1396; - [x] libiwl #1163 ; - [x] libmints -- delay to 29 Aug #1156; - [x] libmoinfo #1165; - [x] liboptions #1187; - [x] libplugin #1190; - [x] libpsi4util #1176; - [x] libpsio #1170; - [x] libpsipcm #1153; - [x] libqt #1186 ; - [x] libsapt_solver & sapt #1171 ; - [x] libscf_solver -- delay to 29 Aug #1194; - [x] libtrans #1162; - [x] mcscf #1189; - [x] mrcc #1161; - [x] occ #1391; - ~optking~; - [x] psimrcc #1191; - sapt (w/libsapt_solver); - [x] `psi4/src` #1192; - [x] `psi4/include` -- will probably need selective c-f disabling for headers #1193. replaced by #1223 ; - [ ] final catch-all",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1144:1314,plugin,plugin,1314,https://psicode.org,https://github.com/psi4/psi4/issues/1144,1,['plugin'],['plugin']
Modifiability,"What is the proper way to specify the compiler in Boost ? I modified the user-config.jam file to include the following lines:. using intel : linux : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : <find-shared-library>mpich ;. but then, the build fails and I get the following complaint:. error: at project-config.jam:12; error: intel-linux initialization: parameter 'version' inconsistent; error: an explicit value was specified in an earlier initialization; error: no value is specified now. Apparently this is because project-config.jam contains the following:. if ! intel-linux in [ feature.values <toolset> ]; {; using intel-linux ; # <= this is line 12; }. in my understanding, the above condition should make sure we are not trying to redefine intel-linux when it has been specified in user-config.jam, is that correct ?. @robertodr, do you know how I could solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196:78,config,config,78,https://psicode.org,https://github.com/psi4/psi4/issues/196,4,['config'],['config']
Modifiability,"When passing the -DCMAKE_INSTALL_PREFIX=/home/user/directory at the top-level build this flag does not get passed on to cmake processes that are called by the main, like in my case pybind11. As a result cmake tries to install that package in /usr/local. Is there any way around it other than manually installing all the dependencies?; ; ```; [100%] Built target pybind11_tests; Install the project...; -- Install configuration: ""MinSizeRel""; -- Installing: /usr/local/include/pybind11; CMake Error at cmake_install.cmake:41 (file):; file INSTALL cannot make directory ""/usr/local/include/pybind11"":; Permission denied; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548:413,config,configuration,413,https://psicode.org,https://github.com/psi4/psi4/issues/1548,1,['config'],['configuration']
Modifiability,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234:173,variab,variable,173,https://psicode.org,https://github.com/psi4/psi4/issues/2234,2,['variab'],['variable']
Modifiability,"While testing out some enhancements to third-order SAPT, Jonathan Waldrop and I seem to have found a bug in the E(30)ind implementation in psi4/psi4/src/psi4/libsapt_solver/ind30.cc. The E(30)ind correction is given by Eq. (72) of JCP 125, 154107 (2006), which stems from evaluating the matrix elements in Eq. (75) using the second-order induction amplitudes in Eq. (79). Psi4 proceeds slightly differently, by actually evaluating the induction amplitudes from Eq. (79) (as far as I can see, the code in psi4/psi4/src/psi4/libsapt_solver/amplitudes.cc matches Eq. (79) exactly) and contracting them with the \omega electrostatic potential matrix elements in psi4/psi4/src/psi4/libsapt_solver/ind30.cc in SAPT2p3::ind30(). The problem is that this algorithm accounts for the first 2 matrix elements in Eq. (75) but not for the last one, <VS_AS_B>. Unless I understand something incorrectly, the Psi4 code is missing the <VS_AS_B> contribution in E(30)ind. Going now back to Eq. (72), it is easy to prove that <VS_AS_B>=4s^r_a v^{ab}_{rs} s^s_b, that is, it contributes a quarter of the last term in Eq. (72). Our working hypothesis was that, because of the omission of this term, E(30)ind programmed in Psi4 has the last term in Eq. (72) multiplied by 12 instead of 16. Therefore, Jonathan modified his Psi4NumPy E(30)ind code to include this last term with the incorrect factor of 12, and now his values are matching Psi4 perfectly! In other words, we are quite certain that the Psi4 implementation includes the last term in Eq. (72) with an erroneous factor of 12 instead of 16. Fortunately, this doesn’t affect the SAPT2+(3) or SAPT2+3 results that also include delta HF, but it will (slightly) affect the third-order SAPT results computed without delta HF. I think the E(30)ind,resp code is fine but the wrong E(30)ind will slightly affect the scaled approximated value of E(30)exch-ind,resp. Please let me know if I need to explain anything better or if I can be of any further help. All the best,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677:23,enhance,enhancements,23,https://psicode.org,https://github.com/psi4/psi4/issues/1677,1,['enhance'],['enhancements']
Modifiability,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:140,extend,extend,140,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['extend'],['extend']
Modifiability,Windows Azure config,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:14,config,config,14,https://psicode.org,https://github.com/psi4/psi4/pull/2018,1,['config'],['config']
Modifiability,"With `ENABLE_bse`, BSE tries to install in the wrong place; ```; [ 11%] Installing Psi4-detected BLAS/LAPACK; [ 11%] Performing build step for 'bse_external'; -- Install configuration: ""Release""; [ 11%] Built target lapack_external; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; [ 17%] Performing install step for 'bse_external'; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running install; /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; warnings.warn(; running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; running install_lib; copying build/lib/basis_set_exchange/_version.py -> /home/work/psi4/objdir/stage/lib/basis_set_exchange; byte-compiling /home/work/psi4/objdir/stage/lib/basis_set_exchange/_version.py to _version.cpython-311.pyc; running install_data; copying LICENSE -> /usr/local/; error: could not create '/usr/local/LICENSE': Permission denied; make[2]: *** [external/upstream/bse/CMakeFiles/bse_external.dir/build.make:105: external/upstream/bse/bse_external-prefix/src/bse_external-stamp/bse_external-install] Error 1; make[1]: *** [CMakeFiles/Makefile2:11190: external/upstream/bse/CMakeFiles/bse_external.dir/all] Error 2; make: *** [Makefile:146: all] Error 2; (p4env) [susi@lenovo objdir]$ ccmake . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:170,config,configuration,170,https://psicode.org,https://github.com/psi4/psi4/issues/3067,1,['config'],['configuration']
Modifiability,"With current master on Ubuntu 15.04. ```; $ ./setup obj2 --python=/usr/bin/python3; [... snip ...]. $ grep PYTHON build/CMakeCache.txt ; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_python.a; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_python.a; PYTHON_INCLUDE_DIR:PATH=/usr/include/python3.4m; PYTHON_INTERPRETER:UNINITIALIZED=/usr/bin/python3; PYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython2.7.so; PYTHON_LIBRARY_DEBUG:FILEPATH=PYTHON_LIBRARY_DEBUG-NOTFOUND; [... snip ...]; ```. Note that the include path points to the python3 headers, but the library path points incorrectly libpython2.7.so. The idea of https://github.com/psi4/psi4public/blob/master/cmake/ConfigPython.cmake#L37-L39 should be to select matching headers/library.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/163:730,Config,ConfigPython,730,https://psicode.org,https://github.com/psi4/psi4/issues/163,1,['Config'],['ConfigPython']
Modifiability,"With the current code, when `make update_version` is run with py3, the fields variable is something like `[""b'f9256f7\\n'""]`, with the extra escaped newline.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/159:78,variab,variable,78,https://psicode.org,https://github.com/psi4/psi4/pull/159,1,['variab'],['variable']
Modifiability,"Ycoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 238, in normalize_shell; self.contraction_normalization(); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 228, in contraction_normalization; self.PYcoef[i] *= norm. UnboundLocalError: local variable 'norm' referenced before assignment; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/846:2241,variab,variable,2241,https://psicode.org,https://github.com/psi4/psi4/issues/846,1,['variab'],['variable']
Modifiability,"[Some users who are using `clone` to change the number of orbitals report that `nmo_` doesn't update and request a way to change `nmo_`.](https://forum.psicode.org/t/reallocation-of-matrix-object-ca-with-new-matrix-of-different-dimension/2720/3?u=jmisiewicz) Ideally, `nmo()` should be `nmopi_.sum()`, and the `nmo_` variable no longer stored. This eliminates a possible internal inconsistency, and on the scale of other operations, the store/compute time savings are negligible.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2875:317,variab,variable,317,https://psicode.org,https://github.com/psi4/psi4/issues/2875,1,['variab'],['variable']
Modifiability,[WIP] Coupled cluster wavefunction rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1273:35,rewrite,rewrite,35,https://psicode.org,https://github.com/psi4/psi4/pull/1273,1,['rewrite'],['rewrite']
Modifiability,"[cct3 plugin] crash will different molecules in same input, e.g. in NBody calculations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:6,plugin,plugin,6,https://psicode.org,https://github.com/psi4/psi4/issues/2009,1,['plugin'],['plugin']
Modifiability,"[draco:~/src] crawdad% psi4 --new-plugin myplugin; Traceback (most recent call last):; File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'. This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503:34,plugin,plugin,34,https://psicode.org,https://github.com/psi4/psi4/issues/503,1,['plugin'],['plugin']
Modifiability,"] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:2601,parameteriz,parameterizations,2601,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['parameteriz'],['parameterizations']
Modifiability,"](lowername, molecule=molecule, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:1970,config,config,1970,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,"_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:1154,variab,variable,1154,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['variab'],['variable']
Modifiability,"_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:1360,config,configure,1360,https://psicode.org,https://github.com/psi4/psi4/issues/2572,1,['config'],['configure']
Modifiability,"_restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -O0 -g3 -Wall -Wextra -Winit-self -Wuninitialized -Wmissing-declarations -Wwrite-strings ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-fopenmp;-Wl,--end-group;-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;-fopenmp;-Wl,--end-group; -- Definitions : SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;FC_SYMBOL=2;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H; -- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. But it fails when the binary is linked:. ```; Linking CXX executable ../../../bin/psi4; ../../../lib/libdmrg.a(dmrgscf.cc.o): In function `psi::dmrg::chemps2_groupnumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)':; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:43: undefined reference to `CheMPS2::Irreps::getGroupName[abi:cxx11](int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:51: undefined reference to `CheMPS2::Irreps::getGroupName[abi:cxx11](int)'; ../../../lib/libdmrg.a(dmrgscf.cc.o): In function `psi::dmrg::copyPSIMXtoCHEMPS2MX(boost::shared_ptr<psi::Matrix>, CheMPS2::DMRGSCFindices*, CheMPS2::DMRGSCFmatrix*)':; /home/seba/software",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:5360,Config,Configuring,5360,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['Config'],['Configuring']
Modifiability,```; !pip install -q condacolab; import condacolab; condacolab.install(). %%capture; !conda config --add channels http://conda.anaconda.org/psi4; !mamba install psi4 resp -c conda-forge/label/libint_dev -c conda-forge; !mamba install nglview ase -c conda-forge. from google.colab import output; output.enable_custom_widget_manager(). import psi4; ```. returns: ModuleNotFoundError: No module named 'psi4',MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109:92,config,config,92,https://psicode.org,https://github.com/psi4/psi4/issues/3109,1,['config'],['config']
Modifiability,"```; [ 22%] Performing configure step for 'psi4-core'; cd /usr/ports/science/psi4/work/.build/psi4-core-prefix/src/psi4-core-build && /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/ports/science/psi4/work/.build/stage -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=/usr/bin/c++ ""-DCMAKE_CXX_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -fno-omit-frame-pointer -isystem /usr/local/include -march=native"" -DCMAKE_C_COMPILER=/usr/bin/cc ""-DCMAKE_C_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -march=native"" -DCMAKE_CXX_STANDARD=14 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_Fortran_COMPILER= -DCMAKE_Fortran_FLAGS= -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_DATADIR=share -DCMAKE_INSTALL_INCLUDEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:23,config,configure,23,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['config'],['configure']
Modifiability,"```console; $ cmake --version; cmake version 3.18.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; $ ls /path/to/eigen3/share/eigen3/cmake; Eigen3Config.cmake Eigen3ConfigVersion.cmake Eigen3Targets.cmake UseEigen3.cmake; ```. Here Eigen 3.3.7 is manually installed. ```console; $ git describe --always; v1.5-178-gd725195826a1; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3/share/eigen3/cmake; $ cmake --build build -- external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:770,config,configure,770,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['config'],['configure']
Modifiability,"```external/upstream/libint/CMakeLists.txt``` has this line:; ```; find_package(Libint 1.2.0 CONFIG QUIET COMPONENTS ${MAX_AM_ERI}); ```. I have the latest version of libint installed: libint-1.2.1_1 (also see here https://repology.org/project/libint/versions). I changed this line to the latest version:; ```; find_package(Libint 1.2.1 CONFIG QUIET COMPONENTS ${MAX_AM_ERI}); ```; but it fails to find it:; ```; -- Suitable Libint could not be located, Building Libint instead.; ```. libint-1.2.1_1 doesn't provide .pc or .cmake files, so I am not sure how can it even ever be able to find it through a cmake script like this?. It's undesirable to download and rebuild libint when the package is available. Please also note that the latest generation of libint is libint2, which does provide ```libint2.pc``` .",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589:93,CONFIG,CONFIG,93,https://psicode.org,https://github.com/psi4/psi4/issues/1589,2,['CONFIG'],['CONFIG']
Modifiability,"`detci` has a variable called `print_lvl_` that is currently set at 0 and remains at 0, no matter what the user sets the `print` keyword to. As a result, it's not possible [for a user to see the S^2 value if they want](http://forum.psicode.org/t/computing-s-2-on-an-fci-calculation/2439/2). A developer should have `print_lvl_` take the value of the standard `print` keyword.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2487:14,variab,variable,14,https://psicode.org,https://github.com/psi4/psi4/issues/2487,1,['variab'],['variable']
Modifiability,"`distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-sea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:4962,inherit,inheritance,4962,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['inherit'],['inheritance']
Modifiability,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1553,Adapt,Adapting,1553,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['Adapt'],['Adapting']
Modifiability,`wfn` Variable Names,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:6,Variab,Variable,6,https://psicode.org,https://github.com/psi4/psi4/issues/2203,1,['Variab'],['Variable']
Modifiability,"a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1304:1194,inherit,inheritance,1194,https://psicode.org,https://github.com/psi4/psi4/pull/1304,1,['inherit'],['inheritance']
Modifiability,adapt for pydantic v1 and v2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:0,adapt,adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/3019,1,['adapt'],['adapt']
Modifiability,add cct3 plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:9,plugin,plugin,9,https://psicode.org,https://github.com/psi4/psi4/pull/1934,1,['plugin'],['plugin']
Modifiability,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:1423,config,configuring,1423,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['config'],['configuring']
Modifiability,adds missing mp3 energy variables to dfocc and occ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:24,variab,variables,24,https://psicode.org,https://github.com/psi4/psi4/pull/1707,1,['variab'],['variables']
Modifiability,adds t1/d1 diagnostics computed in fnocc to psi4 global variables,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712:56,variab,variables,56,https://psicode.org,https://github.com/psi4/psi4/pull/712,1,['variab'],['variables']
Modifiability,"algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1214,variab,variable,1214,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['variab'],['variable']
Modifiability,"all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2150,refactor,refactored,2150,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['refactor'],['refactored']
Modifiability,"and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong.; - `print` in Psithon (input file syntax) no longer processed into `print_out` commands that redirect to output file. Now it means whatever your python print means. ## Suggest adopting conda/conda RN categories:. ### New Features. ### Deprecations/Breaking Changes. ### Improvements. ### Non-User-Facing Changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:3084,variab,variable,3084,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['variab'],['variable']
Modifiability,"args); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the erro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:1726,variab,variables,1726,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['variab'],['variables']
Modifiability,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2346,config,configure,2346,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['config'],['configure']
Modifiability,"ase update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fail with a proper error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:3720,Plugin,Plugin,3720,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['Plugin'],['Plugin']
Modifiability,at least one testing channel should run; - [ ] full ctest tests -- 7/8 now in Linux Azure by #3021 for v1.9; - [ ] full pytest tests -- 7/8 of non-stdsuite in Linux Azure by #3021 for v1.9; - [ ] codecov analysis; - [ ] bonus wish -- use GitHub Actions to test master regularly against plugin repos.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1841:286,plugin,plugin,286,https://psicode.org,https://github.com/psi4/psi4/issues/1841,1,['plugin'],['plugin']
Modifiability,"ate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are buil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8585,variab,variables,8585,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variables']
Modifiability,"ave been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.a; ```. If I unlink the home-brew boost in `/usr/local` and run the same setup the custom boost is configured to build. . adding the flags `-DBoost_DEBUG=ON -DBoost_DETAILED_FAILURE_MESSAGE=ON`. I can see all of the output related to FindBoost.cmake is identical. CMake is searching the correct path for the boost library files (`$HOME/anaconda/envs/psi4-py2.7/lib`). And does not add `/usr/local/anything` to the search paths. . Yet, if boost 1.60.0 is linked it reports it found the correct libraries version 1.59.0, and if those links are removed it reports they are not found. In both cases it sets `Boost_FOUND = 1` but with the boost 1.60.0 links removed the pre-packaged boost is configured to build anyway. . It is also interesting that `_boost_TEST_VERSIONS` includes 1.55.0-1.58.0. (Both 1.59.0 and 1.60.0 aren't included) I am not sure if that is related to this problem though. FindBoost.cmake debuting output : . ```; -- Found Python: /Users/admin/anaconda/lib/libpython2.7.dylib ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:515 ] _boost_TEST_VERSIONS = 1.58.0;1.58;1.57.0;1.57;1.56.0;1.56;1.55.0;1.55; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:517 ] Boost_USE_MULTITHREADED = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:519 ] Boost_USE_STATIC_LIBS = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:521 ] Boost_USE_STATIC_RUNTIME = OFF; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:523 ] Boost_ADDITIONAL_VERSIONS = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:525 ] Boost_NO_SYSTEM_PATHS = ; -- [ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:2787,config,configured,2787,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['config'],['configured']
Modifiability,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1044,config,configure,1044,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['config'],['configure']
Modifiability,"b.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_mult",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3065,Enhance,Enhanced,3065,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Enhance'],['Enhanced']
Modifiability,beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMa,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4413,plugin,plugins,4413,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table do",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1186,Config,ConfigMath,1186,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 beca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:1659,Config,ConfigMath,1659,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['Config'],['ConfigMath']
Modifiability,cast int to list for array variable,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1927:27,variab,variable,27,https://psicode.org,https://github.com/psi4/psi4/pull/1927,1,['variab'],['variable']
Modifiability,"cc #162. this does seem to be sufficient for compiling my plugin, but I could be missing something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/174:58,plugin,plugin,58,https://psicode.org,https://github.com/psi4/psi4/pull/174,1,['plugin'],['plugin']
Modifiability,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:2175,variab,variables,2175,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['variab'],['variables']
Modifiability,cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. p,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4997,plugin,plugins,4997,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4369,plugin,plugins,4369,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;-openmp;-Wl,--end-group); INFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -g -O0 -debug -DDEBUG -Wall -Wuninitialized -Wno-unknown-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:3593,config,config,3593,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['config'],['config']
Modifiability,"conda plugins, psiapi docs, py36",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:6,plugin,plugins,6,https://psicode.org,https://github.com/psi4/psi4/pull/659,1,['plugin'],['plugins']
Modifiability,configure doesn't remove control sequences when its output isn't a terminal,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2680:0,config,configure,0,https://psicode.org,https://github.com/psi4/psi4/issues/2680,1,['config'],['configure']
Modifiability,configure fails to find libint2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2675:0,config,configure,0,https://psicode.org,https://github.com/psi4/psi4/issues/2675,1,['config'],['configure']
Modifiability,configure fails to find libxc and then downloads and rebuilds it,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2676:0,config,configure,0,https://psicode.org,https://github.com/psi4/psi4/issues/2676,1,['config'],['configure']
Modifiability,"core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""; LINK: command ""C:\PROGRA~2\MI0E91~1.0\VC\bin\X86_AM~1\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1419:2572,plugin,plugin,2572,https://psicode.org,https://github.com/psi4/psi4/pull/1419,1,['plugin'],['plugin']
Modifiability,"core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: vir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1419:5119,plugin,plugin,5119,https://psicode.org,https://github.com/psi4/psi4/pull/1419,1,['plugin'],['plugin']
Modifiability,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1687,plugin,plugin,1687,https://psicode.org,https://github.com/psi4/psi4/issues/414,5,['plugin'],['plugin']
Modifiability,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:2532,config,config,2532,https://psicode.org,https://github.com/psi4/psi4/issues/516,2,"['Config', 'config']","['Configuring', 'config']"
Modifiability,"ction91, among others, with the purpose of computing XC terms within Density Functional Theory (DFT) calculations in a massively parallel fashion, including utilization of multiple nodes via MPI, and GPU support. Of more interest to this PR, GauXC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is sp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:1036,parameteriz,parameterizes,1036,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['parameteriz'],['parameterizes']
Modifiability,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:1738,Refactor,Refactor,1738,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['Refactor'],['Refactor']
Modifiability,"d by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1304:1126,variab,variables,1126,https://psicode.org,https://github.com/psi4/psi4/pull/1304,1,['variab'],['variables']
Modifiability,"d; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the requested orbital.; ; Thus, if the MSCF calculation is performed for CASINO, it is necessary simultaneously with the molden file create correlation.data. If PSI4 using configuration state function (**CSF**), then group of determinants for each **CSF** should be labeled for simultaneous optimization like the 2nd and 3rd determinants in the example above. The opt-flag for all determinants except the first one should be equal to 1. PSI4 [output](https://github.com/user-attachments/files/17463891/output.txt) on the basis of which the above-described file could be generated. Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:2533,config,configuration,2533,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['config'],['configuration']
Modifiability,"d_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1648,variab,variables,1648,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['variab'],['variables']
Modifiability,dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4886,plugin,plugins,4886,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ded up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands ca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:1415,variab,variable,1415,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['variab'],['variable']
Modifiability,directory registration. `vi optking/CMakeLists.txt`; - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs commen,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4280,plugin,plugins,4280,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` doesn't seem to use ``OpenMP_LIBRARY_DIRS`` but I don't know anything about CMake so I might just be wrong here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:2357,Config,Configuring,2357,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['Config'],['Configuring']
Modifiability,"driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:1843,config,config,1843,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,"e. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1053,adapt,adapted,1053,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['adapt'],['adapted']
Modifiability,"e. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1057,config,configures,1057,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['config'],['configures']
Modifiability,"eJK, any combinations of its sub-algorithms can be called by setting SCF_TYPE to `J_alg+K_alg`, where _J_alg_ is the separate J build algorithm of choice, and _K_alg_ is the separate K algorithm of choice. As of now, the two CompositeJK options available are `DIRECTDFJ+LINK` representing the old DFJLinK class, and `DIRECTDFJ+COSX` representing the old DFJCOSK class. The key here, is that the ""+"" delimiter in SCF_TYPE serves as a signal to Psi4 that a CompositeJK algorithm is being used. ; - Back end. Basically all of the back-end changes can be classified into two categories - merging DFJLinK and DFJCOSK into the initial CompositeJK implementation, and modifications of functions where necessary to support the above front-end changes. . ## User API & Changelog headlines; - [X] The ""COSX"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+COSX"".; - [X] The ""LINK"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+LINK"". ## Dev notes & details; - [X] Refactors the DFJLinK and DFJCOSK classes into the combined CompositeJK JK subclass. CompositeJK can perform the computations previously performed by both DFJLinK and DFJCOSK within a single JK subclass. These changes are largely localized to the commits f0c4f6c8e31696f6690e101d71bef1863bcf324c - ca66c91976cb5e8c42c8292fcf90c6d28b885fd0, with bfdff974dbfbb9513c85a460b00495598e5f240e also counting. ; - [X] Implements a new scheme for ""SCF_TYPE"" names associated with CompositeJK algorithm combinations. This scheme uses the ""+"" delimiter in conjunction with the names of the separate J and K algorithms present in CompositeJK to use a specific combination of separate J and K build algorithms. ; - [X] Changes functionalities in DFJLinK and DFJCOSK, as well of the JK base class itself, as necessary to support the standardized ""SCF_TYPE"" naming scheme and the general flexibility and ease of expansion that CompositeJK is aiming for.; - [X] Updates relevant tests and documentation. ## To-do; - [x] Update CompositeJK metho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:3222,Refactor,Refactors,3222,https://psicode.org,https://github.com/psi4/psi4/pull/2833,1,['Refactor'],['Refactors']
Modifiability,"ear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.29114",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:974,variab,variable,974,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['variab'],['variable']
Modifiability,"edure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:5976,Extend,Extend,5976,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Extend'],['Extend']
Modifiability,"ef_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:1884,variab,variables,1884,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['variab'],['variables']
Modifiability,"eference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1172,variab,variable,1172,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['variab'],['variable']
Modifiability,"ema(conformer=0); psi4.set_num_threads(4); psi4.set_memory(5e+9). xtb_opt = xtb_ff_opt(qc_mol=qc_mol); opt_molecule = Molecule.from_qcschema(xtb_opt); conformer_Ang = opt_molecule.conformers[0].to(unit.angstrom).m. #Generate Grid to calculate properties to; grid = generate_grid(molecule = molecule, ; conformer= opt_molecule.conformers[0].to(unit.bohr), ; grid_settings=grid_settings); grid = grid.to(unit.angstrom).m; numpy.savetxt(""grid.dat"", grid, delimiter="" "", fmt=""%16.10f""). psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT_EPSILON"": 70.84,; ""DDX_RADII_SET"": ""uff"",; ""DDX_MODEL"": ""PCM""}). conformer_Ang_string = ""nocom\nnoreorient\n""; for index, atom in enumerate(opt_molecule.atoms):; conformer_Ang_string += f""{SYMBOLS[atom.atomic_number]}\t{conformer_Ang[index, 0]}\t{conformer_Ang[index, 1]}\t{conformer_Ang[index, 2]}\n"". molecule_psi4 = psi4.geometry(conformer_Ang_string.strip()); print(molecule_psi4); molecule_psi4.set_units(GeometryUnits.Angstrom). E, wfn = psi4.energy('PBE0-D3BJ/def2-TZVPPD', molecule = molecule_psi4, return_wfn = True); psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print( wfn.variable(""MULLIKEN_CHARGES"")); log_memory_usage(); #very basic error handling; except Exception as e:; continue. if __name__ == ""__main__"":; main(); ```. For the minimal example above, memory usage slowly rises too (I have checked the QCEngine tools and this is not occurring here):. ```; Memory Usage: 484.4296875 MB; Memory Usage: 632.46875 MB; Memory Usage: 634.3203125 MB; Memory Usage: 635.75390625 MB; Memory Usage: 636.6015625 MB; Memory Usage: 676.36328125 MB; Memory Usage: 676.7109375 MB; Memory Usage: 676.7421875 MB; Memory Usage: 676.77734375 MB; Memory Usage: 676.8046875 MB; Memory Usage: 676.890625 MB; Memory Usage: 676.921875 MB; Memory Usage: 676.98828125 MB; Memory Usage: 677.015625 MB; Memory Usage: 677.03125 MB; ```. Apologies for the long post but I wanted to add as much info as possible!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:8516,variab,variable,8516,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['variab'],['variable']
Modifiability,"en running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:977,variab,variable,977,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['variab'],['variable']
Modifiability,"en using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:1980,variab,variable,1980,https://psicode.org,https://github.com/psi4/psi4/issues/3156,1,['variab'],['variable']
Modifiability,enables plugin gpu_dfcc as external plugin compiled with psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997:8,plugin,plugin,8,https://psicode.org,https://github.com/psi4/psi4/pull/997,2,['plugin'],['plugin']
Modifiability,enhances the visibility of psi4's error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:0,enhance,enhances,0,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['enhance'],['enhances']
Modifiability,"equires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you only write it once. I'm not sure how well it generalizes to other functions, but it sure cleaned up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you wo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:1669,variab,variable,1669,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['variab'],['variable']
Modifiability,"er/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gradients. As best as I can tell, the rewrite just changes orbital indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:2094,rewrite,rewrite,2094,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['rewrite'],['rewrite']
Modifiability,"erest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:1333,config,configurable,1333,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['config'],['configurable']
Modifiability,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2878,Config,ConfigMath,2878,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6507,Adapt,Adapted,6507,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability,"et_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10 pin for docs build by adding to nitpick list; - [x] Avoid all the warnings about INSIST_FIND_PACKAGE_<pkg> and <pkg>_DIR unused user-spec variable warnings that could be unnerving.; - [x] Use a different way of detecting libdl for plugins that doesn't throw cmake warnings. lmk if there's any problems.; - [x] Patch over a sapt+windows+ecp bug described at #3072 so can test complete ecosystem; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:4181,layers,layers,4181,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['layers'],['layers']
Modifiability,"ething is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6798,variab,variable,6798,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variable']
Modifiability,export boys localizer for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1026:26,plugin,plugins,26,https://psicode.org,https://github.com/psi4/psi4/pull/1026,1,['plugin'],['plugins']
Modifiability,externals and plugins prep for 1.0rc2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/430:14,plugin,plugins,14,https://psicode.org,https://github.com/psi4/psi4/pull/430,1,['plugin'],['plugins']
Modifiability,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6874,Adapt,Adapted,6874,https://psicode.org,https://github.com/psi4/psi4/pull/1349,4,['Adapt'],['Adapted']
Modifiability,"features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atomic numbers instead of symbols, #418. (fixed by #953); - [ ] DETCI for more than 256 orbitals; - [ ] Automatic choice between `rhf/uhf/rohf/cuhf` for input molecules.; - [ ] Potenital integral derivative performance can be improved, see #3.; - [ ] Allow a DECON keyword to basis sets #43.; - [ ] Remove `char *` for `std::string`. Modify, expand, delete as desired. If you take up a feature make sure to post here so that we do not duplicate effort.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402:1539,rewrite,rewrite,1539,https://psicode.org,https://github.com/psi4/psi4/issues/402,1,['rewrite'],['rewrite']
Modifiability,"fit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-jkfit.gbs: 0; ```. According to @bennybp the sets should be all the same, see https://github.com/MolSSI-BSE/basis_set_exchange/issues/103. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] remove redundant def2-*-[jk|j]fit basis sets. Presuming Susi accepts my PR, this one will additionally accomplish; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:2756,plugin,plugins,2756,https://psicode.org,https://github.com/psi4/psi4/pull/1804,2,['plugin'],"['plugin', 'plugins']"
Modifiability,fix failing test case plugin skeleton,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/139:22,plugin,plugin,22,https://psicode.org,https://github.com/psi4/psi4/issues/139,1,['plugin'],['plugin']
Modifiability,fix local options for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1032:22,plugin,plugins,22,https://psicode.org,https://github.com/psi4/psi4/pull/1032,1,['plugin'],['plugins']
Modifiability,fix plugin for doccpi_ and misc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2988:4,plugin,plugin,4,https://psicode.org,https://github.com/psi4/psi4/pull/2988,1,['plugin'],['plugin']
Modifiability,g/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeL,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5141,plugin,plugins,5141,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take abou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1761,adapt,adapted,1761,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Modifiability,"gins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:5458,plugin,plugin,5458,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugin']
Modifiability,"gnificantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:; 1. Separate out density screening from the SCREENING keyword and into its own keyword (likely something like DENSITY_SCREENING); 2. Removal of any density matrix function/variable from TwoBodyAOInt. Without density screening in TwoBodyAOInt, these density matrix references in TwoBodyAOInt are unnecessary and more properly placed into JK, as well. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implementation of shell_significant() framework in JK class to represent shell significance testing.; - [x] Removal of shell_significant_density() from TwoBodyAOInt.; - [x] Reimplementation of density screening in DirectJK via the shell_significant framework.; - [ ] Reimplementation of density screening in other JK methods via the shell_significant framework.; - [x] Alteration of other shell quartet screening implementations in other JK algorithms via the JK framework. ## Questions; - [ ] The shell_significant framework has not yet been added to DFJCOSK. Should that be done this PR, or added in a later PR? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:2173,variab,variable,2173,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['variab'],['variable']
Modifiability,"hat contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:4094,rewrite,rewrite,4094,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,"he compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:1740,variab,variable-length,1740,https://psicode.org,https://github.com/psi4/psi4/pull/3145,1,['variab'],['variable-length']
Modifiability,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:1557,config,config,1557,https://psicode.org,https://github.com/psi4/psi4/pull/554,7,"['config', 'plugin']","['config', 'plugin', 'plugin-compile', 'plugin-makefile', 'plugin-name']"
Modifiability,"hing. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gra",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:1035,rewrite,rewrite,1035,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['rewrite'],['rewrite']
Modifiability,"home/ward/tmp/psi4release/build/CMakeFiles ; [ 98%] [ 98%] Build aointegrals example plugin; cd /home/ward/tmp/psi4release/build/plugins/aointegrals && ../../bin/psi4 --new-plugin-makefile; Build skeleton example plugin; cd /home/ward/tmp/psi4release/build/plugins && /usr/bin/cmake -E remove_directory /home/ward/tmp/psi4release/build/plugins/skeleton; cd /home/ward/tmp/psi4release/build/plugins && ../bin/psi4 --new-plugin skeleton; Creating new plugin Makefile in the current directory.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; Created new plugin directory, skeleton, using 'plugin' template.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/build.make:49: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals' failed; make[2]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals] Error 1; plugins/CMakeFiles/plugin_skeleton.dir/build.make:49: recipe for target 'plugins/CMakeFiles/plugin_skeleton' failed; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; make[2]: *** [plugins/CMakeFiles/plugin_skeleton] Error 1; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; CMakeFiles/Makefile2:9569: recipe for target 'plugins/CMakeFiles/plugin_skeleton.dir/all' failed; make[1]: *** [plugins/CMakeFiles/plugin_skeleton.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; CMakeFiles/Makefile2:9619: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all' failed; make[1]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all] Error 2; make[1]: Leaving directory '/home/ward/tmp/psi4release/build'; Makefile:127: recipe for target 'all' failed; make: *** [all] Error 2; ```. It tries to use the `PSIDATADIR` of the install directory before psi4 is actually installe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:1089,plugin,plugins,1089,https://psicode.org,https://github.com/psi4/psi4/issues/90,3,['plugin'],['plugins']
Modifiability,"hon-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2587,Plugin,Plugins,2587,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['Plugin'],['Plugins']
Modifiability,"i was trying to parameterize a compound with FFParam and i wanted to do a dihedral scan for one of the dihedrals in my molecule, however, an error was produced saying that the atoms should not be in a ring. . is there a way to overcome this error?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2599:16,parameteriz,parameterize,16,https://psicode.org,https://github.com/psi4/psi4/issues/2599,1,['parameteriz'],['parameterize']
Modifiability,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:1041,plugin,plugin,1041,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['plugin'],['plugin']
Modifiability,"igen_maps()` functions, then, return Eigen matrix-like objects that directly link with the Psi4 matrix data buffer of the Psi4 matrix for which the function was called. This provides an efficient fashion by which to utilize Psi4 matrices in contexts which require Eigen constructs, with no data deepcopying or Eigen-to-Psi4 back-conversions required. There is a key difference between the two functions. `eigen_map()` assumes that the matrix has a single irrep, and returns a single `Eigen::Map` object. `eigen_maps()` , on the other hand, is used for matrices with multiple irreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds two new member functions to `Psi4::Matrix`, `eigen_map()` and `eigen_maps()`, that return `Eigen::Map` representations of the Psi4 matrix object. ## Questions; - [X] N/A. ## Notes; - [X] I did look into forward declaring the necessary Eigen classes, but forward declaring `Eigen::Map` turns out to be a bit ugly, as it is a class template that, to forward declare, ends up requiring forward declarations for other Eigen classes and enums (such as `Stride` and `AlignmentType`) that aren't specifically necessary for the Psi4 use case. Therefore, I have skipped forward declarations here.; - [X] I can confirm the correctness ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:1620,plugin,plugins,1620,https://psicode.org,https://github.com/psi4/psi4/pull/3143,1,['plugin'],['plugins']
Modifiability,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:3200,inherit,inherit,3200,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['inherit'],['inherit']
Modifiability,implement adaptable reference for closed/open-shell,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:10,adapt,adaptable,10,https://psicode.org,https://github.com/psi4/psi4/issues/118,1,['adapt'],['adaptable']
Modifiability,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:9087,Config,Configuring,9087,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Config'],['Configuring']
Modifiability,"ing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://github.com/psi4/psi4/blob/master/devtools/conda-envs/Linux-buildrun-maxeco.yaml#L22 with `psi4/label/testing::libint2=2.7.2=h2fe1556_1` . Despite the different package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compilers, cmake, etc.) and psi4 buildtime ecosystem packages along with a little script `psi4-path-advisor` to firmly configure cmake with conda env locations. As far as I know, this is pretty convenient and durable, especially for build-once-use-forever workflows. Complications I've heard of are (1) Mac `CONDA_BUILD_SYSROOT` sometimes required present/absent and (2) `psi4-dev` is monolithic, awkward to update, or sometimes out-of-date with psi4 master's requirements. I, for one, don't often use `psi4-dev` b/c I want more flexibility with switching out packages. **So, I'd be glad to hear thoughts on what form and contents the build helpers should take. A few plans and questions below, but any feedback appreciated.**. 1. Do you want docker images of the stuff that was in `psi4-dev`? I think from PsiCon2022 the answer is yes.; 2. Do you want minimal (build tools & req'd deps) or maximal (+ optional addons) or micro (no build tools, just L2, g2g, libxc, qcng, scipy, pytest) or several of those choices Docker images? (I have one vote for minimal.); 3. Docker images are hefty (~",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:2864,config,configure,2864,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['config'],['configure']
Modifiability,"ing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3894,coupling,coupling,3894,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['coupling'],['coupling']
Modifiability,"ing the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3004,variab,variables,3004,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variables']
Modifiability,ins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-f,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5346,plugin,plugins,5346,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,integrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest (long;cart). `vi snsmp2/cc-cc/CMakeLists.txt snsmp2/cc-cc/test_i,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5569,plugin,plugins,5569,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ints pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2544,variab,variables,2544,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['variab'],['variables']
Modifiability,"it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 DIIS/INCFOCK; @RHF iter 5: -235.38297663987922 -6.19818e-05 1.50376e-05 DIIS/INCFOCK; @RHF iter 6: -235.38298211805841 -5.47818e-06 2.18669e-06 DIIS; @RHF iter 7: -235.38298224217732 -1.24119e-07 6.25234e-07 DIIS; Energy and wave function converged with early screening.; Performing final iteration with tighter screening. @RHF iter 8: -235.38489215328417 -1.90991e-03 8.02480e-05 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:1486,refactor,refactor,1486,https://psicode.org,https://github.com/psi4/psi4/pull/2682,1,['refactor'],['refactor']
Modifiability,"ix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to `std::shared_ptr<TYPE> VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Use `auto` on the left-hand side of some of the now converted declarations: `auto VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Replace occurrences of `NULL` with `nullptr`. ## Status; - [x] Ready to go. [Effective Modern C++]:; https://edisciplinas.usp.br/pluginfile.php/1995323/mod_resource/content/1/Effective%20Modern%20C%2B%2B%202014.pdf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:2965,VARIAB,VARIABLE,2965,https://psicode.org,https://github.com/psi4/psi4/pull/836,4,"['VARIAB', 'plugin']","['VARIABLE', 'pluginfile']"
Modifiability,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:3205,Config,ConfigMath,3205,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['Config'],['ConfigMath']
Modifiability,"l check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:1491,plugin,plugins,1491,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugins']
Modifiability,"l project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3221,variab,variables,3221,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variables']
Modifiability,"l_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:2211,variab,variable,2211,https://psicode.org,https://github.com/psi4/psi4/issues/1375,3,['variab'],"['variable', 'variables']"
Modifiability,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1790,Config,ConfigMath,1790,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"le plugin; cd /home/ward/tmp/psi4release/build/plugins/aointegrals && ../../bin/psi4 --new-plugin-makefile; Build skeleton example plugin; cd /home/ward/tmp/psi4release/build/plugins && /usr/bin/cmake -E remove_directory /home/ward/tmp/psi4release/build/plugins/skeleton; cd /home/ward/tmp/psi4release/build/plugins && ../bin/psi4 --new-plugin skeleton; Creating new plugin Makefile in the current directory.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; Created new plugin directory, skeleton, using 'plugin' template.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/build.make:49: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals' failed; make[2]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals] Error 1; plugins/CMakeFiles/plugin_skeleton.dir/build.make:49: recipe for target 'plugins/CMakeFiles/plugin_skeleton' failed; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; make[2]: *** [plugins/CMakeFiles/plugin_skeleton] Error 1; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; CMakeFiles/Makefile2:9569: recipe for target 'plugins/CMakeFiles/plugin_skeleton.dir/all' failed; make[1]: *** [plugins/CMakeFiles/plugin_skeleton.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; CMakeFiles/Makefile2:9619: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all' failed; make[1]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all] Error 2; make[1]: Leaving directory '/home/ward/tmp/psi4release/build'; Makefile:127: recipe for target 'all' failed; make: *** [all] Error 2; ```. It tries to use the `PSIDATADIR` of the install directory before psi4 is actually installed. CMake needs to set the `PSIDATADIR` to the build directory prior to installing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:1295,plugin,plugins,1295,https://psicode.org,https://github.com/psi4/psi4/issues/90,6,['plugin'],['plugins']
Modifiability,"led); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input file:; for method in Earray:; water.reset_point_group(sym); water.fix_orientation(True); water.update_geometry(); banner('Testing %s' % (method)); --> G, wfn = gradient(method, return_wfn=True); ans = wfn.energy(); print('%16s\t%s\t%s\t%s' % (method, water.schoenflies_symbol(), variable('CURRENT ENERGY') - ans, ans)); clean(); print(' Checking gradient methods (excited state) ...'); Earray = [; Psi4 stopped on: Friday, 31 January 2020 05:10PM; Psi4 wall time for execution: 0:00:06.47; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:2277,variab,variable,2277,https://psicode.org,https://github.com/psi4/psi4/issues/1793,1,['variab'],['variable']
Modifiability,letonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registr,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5407,plugin,plugins,5407,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:5295,Variab,Variable,5295,https://psicode.org,https://github.com/psi4/psi4/issues/2510,3,['Variab'],['Variable']
Modifiability,"ll return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""OpenMP::Open",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:3585,plugin,plugins,3585,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugins']
Modifiability,"low. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, plus it's so easy to adjust after link. I'm hoping to continue ignoring rpath on Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:3247,Config,ConfigMath,3247,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:2140,variab,variable,2140,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['variab'],['variable']
Modifiability,"m the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1136,refactor,refactor,1136,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['refactor'],['refactor']
Modifiability,missing symbol for JK object in plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:32,plugin,plugins,32,https://psicode.org,https://github.com/psi4/psi4/issues/971,1,['plugin'],['plugins']
Modifiability,more wavefunction-pass for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/309:27,plugin,plugins,27,https://psicode.org,https://github.com/psi4/psi4/pull/309,1,['plugin'],['plugins']
Modifiability,"mpty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`.; - [X] Expands the use cases of the `COSX_RADIAL_POINTS_INITIAL`, `COSX_SPHERICAL_POINTS_INITIAL`, and `COSX_MAXITER_FINAL` keywords. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` control the size of the grid used for the `SCF_COSX_GUESS` guess ( default: (20/50) ). `COSX_MAXITER_FINAL` controls how many `DIRECT`/`DFDIRJ+LINK` iterations to run after the converged `COSX` SCF (default: 2).; -[X] Cleans up `scf_iterator.py`, renaming `early_screening` and all associated variables, and adding comments for cases where multi-stage SCF convergence procedures are used.; - [X] Adds testing for `SCF_COSX_GUESS` and `COSX_MAXITER_FINAL`. ## Questions; - [ ] I already know this will be brought up, so I'll start it off: what's the best name for this keyword? `SCF_COSX_GUESS` and `DF_SCF_GUESS` do very similar things, but have a different naming structure, i.e., SCF is located at a different point in the variable name. I intentionally picked `SCF_COSX_GUESS` because putting SCF at the front makes it clear that the option applies for the whole SCF rather than just COSX itself, which is exacerbated by the existence of other `COSX_xxx` variables that exist specifically for COSX. I actually wouldn't mind switching the name of `DF_SCF_GUESS`, too, to maintain consistency. But if `COSX_SCF_GUESS` is preferred by everyone else, I'll switch to that. . ## Checklist; - [X] Tests added for any new features; - [] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:4219,variab,variable,4219,https://psicode.org,https://github.com/psi4/psi4/pull/3158,2,['variab'],"['variable', 'variables']"
Modifiability,"n Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3164,plugin,plugin,3164,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,['plugin'],['plugin']
Modifiability,"n-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-report -Wall -Wuninitialized ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-group;-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;-openmp;-Wl,--end-group; -- Definitions : SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;FC_SYMBOL=2;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H; -- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. Point where it fails:. ```; [ 45%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/softw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:5652,Config,Configuring,5652,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['Config'],['Configuring']
Modifiability,naive Makefile for plugin from binary,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/216,1,['plugin'],['plugin']
Modifiability,naointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5518,plugin,plugins,5518,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:7237,config,config,7237,https://psicode.org,https://github.com/psi4/psi4/issues/2510,5,['config'],['config']
Modifiability,"nda-forge` (latter cmd is a simplification -- don't use as-is), so while most of the `-c psi4` packages are perfectly compatible with master, they're not the freshest and will continue to decay.; 3. New release means new tag, so you'll need to pull tags anyway (`git fetch upstream 'refs/tags/*:refs/tags/*'`) for versioning, distributed driver, and dispersion addons to work. ### Interim Build Directions. Altogether, now is a good time to do a fresh clone, environment, and compile ... if only there were directions. The interim build guidance is:; 1. Create an environment from one of the ""buildrun"" env spec files under https://github.com/psi4/psi4/tree/master/devtools/conda-envs . First edit it to the python you want and the env name you want, and comment out any optional qc addons you don't want. ; 2. Then issue something like`conda env create -f Linux-buildrun-maxeco.yaml` and activate the environment. ; 3. Clone psi4, then `cmake -S. -Bobjdir -DBUILD_SHARED_LIBS=ON ...`, and it usually configures fine. ; 4. For Apple Silicon, there isn't a env yaml file yet, but replacing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://github.com/psi4/psi4/blob/master/devtools/conda-envs/Linux-buildrun-maxeco.yaml#L22 with `psi4/label/testing::libint2=2.7.2=h2fe1556_1` . Despite the different package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:1752,config,configures,1752,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['config'],['configures']
Modifiability,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341:1921,variab,variable,1921,https://psicode.org,https://github.com/psi4/psi4/issues/1341,1,['variab'],['variable']
Modifiability,"ne-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10 pin for docs build by adding to nitpick list; - [x] Avoid all the warnings about INSIST_FIND_PACKAGE_<pkg> and <pkg>_DIR unused user-spec variable warnings that could be unnerving.; - [x] Use a different way of detecting libdl for plugins that doesn't throw cmake warnings. lmk if there's any problems.; - [x] Patch over a sapt+windows+ecp bug described at #3072 so can test complete ecosystem; - [x] Add a plain `psi4 --psiapi` variation on `psi4 --psiapi-path` that can be used in `eval $(psi4 --psiapi)`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:4895,variab,variable,4895,https://psicode.org,https://github.com/psi4/psi4/pull/3021,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,ng CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4683,plugin,plugins,4683,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ng for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:; 1. Separate out density screening from the SCREENING keyword and into its own keyword (likely something like DENSITY_SCREENING); 2. Removal of any density matrix function/variable from TwoBodyAOInt. Without density screening in TwoBodyAOInt, these density matrix references in TwoBodyAOInt are unnecessary and more properly placed into JK, as well. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implementation of shell_significant() framework in JK class to represent shell significance testing.; - [x] Removal of shell_significant_density() from TwoBodyAOInt.; - [x] Reimplementation of density screening in DirectJK via the shell_significant framework.; - [ ] Reimplementation of density screening in other JK methods via the shell_significant framework.; - [x] Alteration of other shell quartet screening implementations in other JK algorithms via the JK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:1972,refactor,refactor,1972,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['refactor'],['refactor']
Modifiability,"nown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_dict_[json_data[""driver""]](method, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1386, in select_mrcc; return func(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 4935, in run_mrcc; ref_wfn = scf_helper(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:8904,config,config,8904,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['config'],['config']
Modifiability,"nt, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quali",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:1178,enhance,enhancements,1178,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['enhance'],['enhancements']
Modifiability,ntegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5462,plugin,plugins,5462,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"o latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:1338,plugin,plugins,1338,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['plugin'],['plugins']
Modifiability,o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4936,plugin,plugins,4936,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ombinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual ini",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:1005,variab,variables,1005,https://psicode.org,https://github.com/psi4/psi4/pull/3060,2,['variab'],['variables']
Modifiability,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:3099,refactor,refactor,3099,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['refactor'],['refactor']
Modifiability,"on there. This PR completely eliminates the `ERISieve` class, and replaces all of its old functionalities with that of `TwoBodyAOInt`. `ERISieve` is a class in libmints that does many of the same things as `TwoBodyAOInt`. The amount of features that `ERISieve` has, that `TwoBodyAOInt` doesn't, is minimal. It's really just absolute redundancy. Currently, `ERISieve` _only_ finds use within the PKJK class and its subalgorithms. As mentioned, this PR eliminates `ERISieve` and replaces it with `TwoBodyAOInt` in all of the former's previous use cases. Any previously-utilized functionality that was present in `ERISieve` and not in `TwoBodyAOInt` (a couple functions determining basis function significance) were added to `TwoBodyAOInt`. Furthermore, any adjustments needed to support `TwoBodyAOInt` within the PKJK code were made. With all of this, `ERISieve` was also ripped out of the code entirely. Maybe it could go into the attic. ## User API & Changelog headlines; - [X] The core.ERISieve class has been removed, along with its associated functions core.ERISieve.build and core.ERISieve.shell_significant. The removed functionalities, specifically shell_significant, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been removed from Psi4 and replaced with `TwoBodyAOInt`.; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [ ] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - [ ] I guess `ERISieve` can go into the attic now?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933:1823,plugin,plugins,1823,https://psicode.org,https://github.com/psi4/psi4/pull/2933,1,['plugin'],['plugins']
Modifiability,"on; cmake version 3.18.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; $ ls /path/to/eigen3/share/eigen3/cmake; Eigen3Config.cmake Eigen3ConfigVersion.cmake Eigen3Targets.cmake UseEigen3.cmake; ```. Here Eigen 3.3.7 is manually installed. ```console; $ git describe --always; v1.5-178-gd725195826a1; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3/share/eigen3/cmake; $ cmake --build build -- external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://github.com/evaleev/libint ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:953,Config,Configuring,953,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['Config'],['Configuring']
Modifiability,ondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest (long;cart). `vi snsmp2/cc-cc/CMakeLists.txt snsmp2/cc-cc/test_input.py`; - [ ] 66. snsmp2/cf-o: mismatched marks ct,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5631,plugin,plugins,5631,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5999,Adapt,Adapted,5999,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability,openmp inheritance for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:7,inherit,inheritance,7,https://psicode.org,https://github.com/psi4/psi4/pull/1520,2,"['inherit', 'plugin']","['inheritance', 'plugins']"
Modifiability,"opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;-fopenmp;-Wl,--end-group); INFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: gcc; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O0 -g3 -DDEBUG -Wall -Wextra -Winit-self -Woverloaded-virtual -Wuninitialized -Wmissing-declarations -Wwrite-strings; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -O0 -g3 -Wall -Wextra -Winit-self -Wuninitialized -Wmissing-declarations -Wwrite-strings ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_201",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:3474,config,config,3474,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['config'],['config']
Modifiability,"optional fortran compiler, adjustable cmake config installation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:44,config,config,44,https://psicode.org,https://github.com/psi4/psi4/pull/2946,1,['config'],['config']
Modifiability,"or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5456,refactor,refactored,5456,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['refactor'],['refactored']
Modifiability,"ork well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:10307,rewrite,rewrite,10307,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['rewrite'],['rewrite']
Modifiability,"ort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1778,config,configuring,1778,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['config'],['configuring']
Modifiability,"ortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log"". Howevewer, there is no file /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log and no directory objdir at all.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:16288,Config,Configuring,16288,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['Config'],['Configuring']
Modifiability,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:4508,config,configured,4508,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['config'],['configured']
Modifiability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8954,variab,variables,8954,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['Refactor', 'variab']","['Refactor', 'variables']"
Modifiability,"ove, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been reformulated to enable calculations with grids containing negative grid weights. ## Questions; - [x] Is the current way of handling computation of the numerical overlap matrix acceptable? Currently, two X matrices are used to form the numerical overlap matrix. One goal of folding the grid weight sign into the formation of G was to prevent the use of multiple X matrices. However, I don't think that can be done here without removing the call to `linalg::doublet` in the `compute_numeric_overlap` function. One could probably do a slightly-modified, manually-implemented matrix multiply with the grid weight folded in, and construct $S_{N}$ with a single $X$ matrix that way. But that comes at the cost of not utilizing BLAS. What does everyone consider preferable?; - [ ] What, exactly, is the best way to test this? I would like to add a test ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:2100,config,configurations,2100,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['config'],['configurations']
Modifiability,plug-in compilation problem,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308:0,plug-in,plug-in,0,https://psicode.org,https://github.com/psi4/psi4/issues/308,1,['plug-in'],['plug-in']
Modifiability,plugin https://github.com/mayhallgroup/PsiEmbed ; work with @danclaudino and/or @shannonhouck. needs changes to psi itself. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1839:0,plugin,plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/1839,1,['plugin'],['plugin']
Modifiability,plugin: https://github.com/Masterluke87/psixas. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1837:0,plugin,plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/1837,1,['plugin'],['plugin']
Modifiability,plugins testing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/569:0,plugin,plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/569,1,['plugin'],['plugins']
Modifiability,plugins to binary,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/370:0,plugin,plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/370,1,['plugin'],['plugins']
Modifiability,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:4471,variab,variable,4471,https://psicode.org,https://github.com/psi4/psi4/issues/2330,5,['variab'],['variable']
Modifiability,psio changes break plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/221:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/221,1,['plugin'],['plugin']
Modifiability,"pt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; NUM PRINT = 20; MAXITER = 12 FREEZE CORE = yes; NUM ROOTS = 10 ICORE = 1; PRINT = 1 FCI = no; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-08 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 130; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 1; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = yes TRANS DENSITY= yes. FILES = 50 51 52 53. EX ALLOW = 1 1 ; STATE AVERAGE = 1(1.00) ; STATE AVERAGE = 1(1.00) . ORBITALS:; NMO = 246 NUM ALP = 47; ORBS IN CI = 232 NUM ALP EXPL = 33; FROZEN CORE = 14 NUM BET = 47; RESTR CORE = 0 NUM BET EXPL = 33; IOPEN = no; RAS1 LVL = 32 A RAS3 MAX = 2; RAS1 MIN = 92 B RAS3 MAX = 2; A RAS1 LVL",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:15264,COUPLING,COUPLING,15264,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['COUPLING'],['COUPLING']
Modifiability,put.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunct,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4634,plugin,plugins,4634,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"py as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, supe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1120,variab,variable,1120,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['variab'],['variable']
Modifiability,"py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current maste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:1980,Extend,Extended,1980,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['Extend'],['Extended']
Modifiability,"pybind11, plugins, externals, and targets",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:10,plugin,plugins,10,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['plugin'],['plugins']
Modifiability,"quires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be u",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2254,variab,variables,2254,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['variab'],['variables']
Modifiability,"r. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over? Anything amiss?. ## Checklist; - [x] `ctest -L scf` passes. ## Status; - [x] Ready for review; - [ ] Let's discuss the two questions before merging this in, please.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2298:1464,plugin,plugins,1464,https://psicode.org,https://github.com/psi4/psi4/pull/2298,1,['plugin'],['plugins']
Modifiability,ration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched direc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4782,plugin,plugins,4782,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"reate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:1155,plugin,plugin,1155,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['plugin'],['plugin']
Modifiability,"reating an environment out of the box with mamba using conda-forge Psi4 seems to set PSIDATADIR to a build directory. (I'll try with conda as well). ```shell; $ mamba create --name psi4-1.8-py39 python=3.9 psi4=1.8 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8-py39; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/lib/python3.9/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815705089/work/build/stage/share/psi4'; ```. I tried 3.11 as well:. ```shell; $ mamba create --name psi4-1.8 psi4 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/lilywang/miniconda3/envs/psi4-1.8/lib/python3.11/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815712644/work/build/stage/share/psi4'; ```; Manually setting PSIDATADIR seems to fix things, but the docs actively recommend against doing that:. ```; $ export PSIDATADIR=~/miniconda3/envs/psi4-1.8/share/psi4; $ psi4 --version; 1.8; ```. https://psicode.org/psi4manual/master/build_planning.html#why-not-to-set-psidatadir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2993:1548,variab,variable,1548,https://psicode.org,https://github.com/psi4/psi4/issues/2993,2,['variab'],['variable']
Modifiability,refactor empirical dispersion,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:0,refactor,refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['refactor'],['refactor']
Modifiability,"rface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:1167,plugin,plugin,1167,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['plugin'],['plugin']
Modifiability,"rfunctional class: A complete list of functionals in a superfunctional can be accessed with `functionals()`. `add_x_functional(fnctl)` and `add_c_functional(fnctl)` were removed in favor of `add_functional(fnctl)`. Also removes `is_libxc_func()` since there is now no distinction. ## Dev notes & details; - [ ] The base `Functional` class now has a `kind()` field. When implemented in the `LibXCFunctional`, this allows one to get the kind of functional from LibXC -- Now, LibXC is treated as the single source of truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python sid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:1217,inherit,inheritance,1217,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['inherit'],['inheritance']
Modifiability,"rief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:975,plugin,plugin,975,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugin']
Modifiability,"rmation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:3516,variab,variable,3516,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['variab'],['variable']
Modifiability,"roperties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:1897,variab,variables,1897,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['variab'],['variables']
Modifiability,"roup); INFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: gcc; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O0 -g3 -DDEBUG -Wall -Wextra -Winit-self -Woverloaded-virtual -Wuninitialized -Wmissing-declarations -Wwrite-strings; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -O0 -g3 -Wall -Wextra -Winit-self -Wuninitialized -Wmissing-declarations -Wwrite-strings ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:3509,Plugin,Plugins,3509,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['Plugin'],['Plugins']
Modifiability,"rsion will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_LIBERD=OFF -DENABLE_JKFACTORY=OFF -DENABLE_GPU_DFCC=OFF -DENABLE_DUMMY_PLUGIN=OFF -DENABLE_PCMSOLVER=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_A",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:9256,config,configure,9256,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['config'],['configure']
Modifiability,"s code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`.; - [X] Expands the use cases of the `COSX_RADIAL_POINTS_INITIAL`, `COSX_SPHERICAL_POINTS_INITIAL`, and `COSX_MAXITER_FINAL` keywords. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` control the size of the grid used for the `SCF_COSX_GUESS` guess ( default: (20/50) ). `COSX_MAXITER_FINAL` controls how many `DIRECT`/`DFDIRJ+LINK` iterations to run after the converged `COSX` SCF (default: 2).; -[X] Cleans up `scf_iterator.py`, renaming `early_screening` and all associated variables, and adding comments for cases where multi-stage SCF convergence procedures are used.; - [X] Adds testing for `SCF_COSX_GUESS` and `COSX_MAXITER_FINAL`. ## Questions; - [ ] I already know this will be brought up, so I'll start it off: what's the best name for this keyword? `SCF_COSX_GUESS` and `DF_SCF_GUESS` do very similar things, but have a different naming structure, i.e., SCF is located at a different point in the variable name. I intentionally picked `SCF_COSX_GUESS` because putting SCF at the front makes it clear that the option applies for the whole SCF rather than just COSX itself, which is exacerbated by the existence of other `COSX_xxx` variables that exist specifically for COSX. I actually wouldn't mind switching the name of `DF_SCF_GUESS`, too, to maintain consistency. But if `COSX_SCF_GUESS` is preferred by everyone else, I'll switch to that. . ## Checklist; - [X] Tests added for any new features; - [] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:3787,variab,variables,3787,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['variab'],['variables']
Modifiability,s comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5241,plugin,plugins,5241,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"s don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:1158,variab,variables,1158,https://psicode.org,https://github.com/psi4/psi4/issues/1375,3,['variab'],"['variable', 'variables']"
Modifiability,"s is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results, most importantly oscillators strengths, or the complete excitation vector. I tried to understand what was done in the eom-cc case and as far as I can judge, the `CCEnergyWavefunction` seems at least related. In principle it should be possible to do something similar for ADC inside the Psi4 code base. Another option is also to just blindly reduce the objec",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:1726,config,configurables,1726,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['config'],['configurables']
Modifiability,"s the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1200,flexible,flexible,1200,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['flexible'],['flexible']
Modifiability,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:993,variab,variable,993,https://psicode.org,https://github.com/psi4/psi4/issues/1975,6,['variab'],['variable']
Modifiability,"s, but show quite poor convergence when I uncouple them. ...Unfortunately, getting the DIIS coupled together requires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you only write it once. I'm not sure how well it generalizes to other functions, but it sure cleaned up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to depreca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:1585,variab,variables,1585,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['variab'],['variables']
Modifiability,"s.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python2 (found version ""2.7.11"") ; -- Found Python: /usr/lib64/libpython2.7.so ; -- Boost version: 1.60.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /home/piton/gitdir/psi4/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. Error message:. [100%] Linking CXX executable ../../../bin/psi4; CMakeFiles/psi4_objlib.dir/create_new_plugin.cc.o: In function `boost::re_detail_106000::perl_matcher<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::match_imp()':; create_new_plugin.cc:(.text._ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv[_ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv]+0x42d): undefined reference to`boost::match_results<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:5331,config,configure,5331,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['config'],['configure']
Modifiability,s/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5194,plugin,plugins,5194,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:1610,plugin,plugins,1610,https://psicode.org,https://github.com/psi4/psi4/pull/993,1,['plugin'],['plugins']
Modifiability,"ser input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:1536,refactor,refactored,1536,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['refactor'],['refactored']
Modifiability,set_output_file enhancements,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932:16,enhance,enhancements,16,https://psicode.org,https://github.com/psi4/psi4/pull/2932,1,['enhance'],['enhancements']
Modifiability,"si4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking gen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:2526,config,configuration,2526,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['config'],['configuration']
Modifiability,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:2880,config,config,2880,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,"sis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libparallel/parallel.h>; #include <liboptions/liboptions.h>; #include <libmints/wavefunction.h>; #include <libmints/basisset.h>; #include <libmints/matrix.h>; #include <libmints/vector.h>; #include <libpsio/psio.hpp>; #include <libthce/lreri.h>; #include <libthce/thcew.h>; #include <libthce/thce.h>. INIT_PLUGIN. using namespace boost;. namespace psi{ namespace dfmp2 {. extern ""C""; int read_options(std::string name, Options& options); {; if (name == ""DFMP2""|| options.read_globals()) {; /*- The amount of information printed to the output file -*/; options.add_int(""PRINT"", 1);; }. return true;; }. extern ""C""; PsiReturnType dfmp2(Options& options); {; int print = options.get_int(""PRINT"");; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; boost::shared_ptr<BasisSet> primary = wfn->basisset();. boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_orbital(primary->molecule(), ""DF_BASIS_MP2"", options.get_str",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:2858,plugin,plugin,2858,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['plugin'],['plugin']
Modifiability,sointegrals plugin not working?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74:12,plugin,plugin,12,https://psicode.org,https://github.com/psi4/psi4/issues/74,1,['plugin'],['plugin']
Modifiability,"sr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:9108,Config,Configuring,9108,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['Config'],['Configuring']
Modifiability,still merge queue config,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2923:18,config,config,18,https://psicode.org,https://github.com/psi4/psi4/pull/2923,1,['config'],['config']
Modifiability,strategy 2 for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2104:15,plugin,plugins,15,https://psicode.org,https://github.com/psi4/psi4/pull/2104,1,['plugin'],['plugins']
Modifiability,"t parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:13266,Plugin,Plugins,13266,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Plugin'],['Plugins']
Modifiability,"t this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1068,variab,variable,1068,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['variab'],['variable']
Modifiability,"t-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk.cc](https://github.com/psi4/psi4/pull/2543#discussion_r848780442)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:1230,Refactor,Refactor,1230,https://psicode.org,https://github.com/psi4/psi4/pull/2543,1,['Refactor'],['Refactor']
Modifiability,"terface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double, 3>>> pcs;; pcs.push_back({-1.0, {origin_[0], origin_[1], origin_[2]}});; engine0_->set_params(pcs);; }; ```. [plugin.cc.zip](https://github.com/psi4/psi4/files/8326964/plugin.cc.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:4171,Plugin,Plugin,4171,https://psicode.org,https://github.com/psi4/psi4/issues/2491,4,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,test module plugin on windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099:12,plugin,plugin,12,https://psicode.org,https://github.com/psi4/psi4/pull/2099,1,['plugin'],['plugin']
Modifiability,"the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1460,adapt,adapted,1460,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Modifiability,"the snsmp2 plugin (https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/wavefunctioncache.py) is a big user of the npz format for file 180 before wavefunction serialization to a npy file. (Probably the only external user.) Moreover, they both use them and write out new ones for consumption. They also modify and store `Ca_occ` in their exchange files. (Looks like npz did this: https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bf) For those from a psi4 run, the Ca_occ can just be extracted by API from the deserialized wfn. But is there any facility for storing extra items in the npy?. There's some lengthy workarounds for issues since resolved (custom cast-up) but the guess of dimer from stack of monomer isn't in psi4 and the plugin isn't being actively developed (to my knowledge), so I suggest a minimal patch-up rather than thorough update. The way to run this is to build an up-to-date psi, edit it to apply #1508, then clone the snsmp2 repo (above), navigate to `<sns-mp2-repo>/tests/` and run an input with `PYTHONPATH=../ <path-to-psi4-objdir>/stage/bin/psi4 simple.in`. If this doesn't get taken up, we'll tackle it next Wednesday the @CDSherrill group programming. In the meantime, snsmp2 is getting dropped from `psi4-rt`. FYI @rmcgibbo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514:11,plugin,plugin,11,https://psicode.org,https://github.com/psi4/psi4/issues/1514,2,['plugin'],['plugin']
Modifiability,"there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n""); psi4.print_out(""CP-corrected interaction energies\n\n""); psi4.print_out("" R [Ang] E_i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:1077,variab,variable,1077,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['variab'],['variable']
Modifiability,"this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:; 1. Separate out density screening from the SCREENING keyword and into its own keyword (likely something like DENSITY_SCREENING); 2. Removal of any density matrix function/variable from TwoBodyAOInt. Without density screening in TwoBodyAOInt, these density matrix references in TwoBodyAOInt are unnecessary and more properly placed into JK, as well. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implementation of shell_significant() fram",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:1566,refactor,refactor,1566,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['refactor'],['refactor']
Modifiability,"this PR is ready to go; - fix uninitialized variables in dfocc affecting UHF calcs. @bozkaya should review; - fix bug where default `cepa(0)` was routing to qcisd instead of cepa; - fix bug where dfocc `cepa(0)` with `DF` was getting orbital-optimized; - added test case that compares mp2 calcs btwn occ/fnocc/detci/dfmp2. rohf conv still broken btwn detci and occ, but not addressed here",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270:44,variab,variables,44,https://psicode.org,https://github.com/psi4/psi4/pull/270,1,['variab'],['variables']
Modifiability,"thm in Psi4 (currently DF-DirJ, LinK, and COSX) is contained within CompositeJK itself. This runs a high risk of CompositeJK becoming monolithic, especially as more separate J/K build methods are added (e.g., CFMM). This PR is meant to be the solution to that issue. Rather than storing every separate J or K build algorithm in CompositeJK itself, they are now implemented as derived classes of a new base class, SplitJK. SplitJK features the `build_G_component` member function, which derived classes of SplitJK then implement to execute their own algorithm for building one of J or K. CompositeJK is reworked to match, featuring a pair of shared_ptrs to SplitJK classes, one representing the J algorithm, and one representing the K algorithm. Actual machinery for computing J or K, as well as other functionalities such as header printing, is then done through calling corresponding functions from the SplitJK pointers. My thought is for this PR to be added in v1.9. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Implements the SplitJK class for representing algorithms that build one of J or K.; - [x] Refactors DF-DirJ, LinK, and COSX as derived classes of SplitJK.; - [x] Reworks the CompositeJK class to execute in terms of SplitJK derived classes. ## Questions; - [ ] Is passing the eri_computers variable to COSX::build_G_component() as an argument acceptable, even though it is unused in that function? My logic, for now, is that the SplitJK implementation allows for a universal interface for calling different SplitJK derived classes, and thus different composite algorithm combinations; but this is a case where specifically fine-tuning the input for different methods may be preferable. What does everyone think?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2955:1574,Refactor,Refactors,1574,https://psicode.org,https://github.com/psi4/psi4/pull/2955,2,"['Refactor', 'variab']","['Refactors', 'variable']"
Modifiability,thread pool: fix unsafe variable change,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/20:24,variab,variable,24,https://psicode.org,https://github.com/psi4/psi4/pull/20,1,['variab'],['variable']
Modifiability,"tions from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1917,config,configurations,1917,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['config'],['configurations']
Modifiability,"truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python side?; - [ ] GRAC functionals are still split into X and C functionals. The effect of my changes on this needs to be tested, and perhaps the GRAC functionals should be unified. ## Checklist; - [ ] Remove all `TODO`s corresponding to the above questions; - [ ] Double check that I haven't used `x_functionals()` anywhere that I might want XC functionals -- See question 2; - [ ] Double check that I haven't broken GRAC; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:1850,variab,variables,1850,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['variab'],['variables']
Modifiability,"turns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3989,extend,extend,3989,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['extend'],['extend']
Modifiability,"uency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4372,plugin,plugin,4372,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugin']
Modifiability,"urposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. Composite JK algorithms commonly implemented a density-based screening within them, as part of their formulation, but a shell_significant() formalism has been added to SplitJK. This framework isn't unified the same way it is for the base JK class, because the needs for testing shell significance for different composite subalgorithms varies from method to method. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Targe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:1859,refactor,refactor,1859,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['refactor'],['refactor']
Modifiability,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1914,variab,variables,1914,https://psicode.org,https://github.com/psi4/psi4/pull/2132,1,['variab'],['variables']
Modifiability,"ut more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3203,adapt,adapt,3203,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['adapt'],['adapt']
Modifiability,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:4963,variab,variable,4963,https://psicode.org,https://github.com/psi4/psi4/issues/2178,3,['variab'],['variable']
Modifiability,"w modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought https://sphinx-tabs.readthedocs.io/en/latest/ would be a nice way to show psithon/psiapi/qcschema syntax, so I added that requirement to the docs build along with a quick example. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1907,config,configuration,1907,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['config'],['configuration']
Modifiability,"while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3776,rewrite,rewrite,3776,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004:749,variab,variable,749,https://psicode.org,https://github.com/psi4/psi4/issues/1004,2,"['Config', 'variab']","['ConfigMath', 'variable']"
Modifiability,work with @shannonhouck on plugin https://github.com/mayhallgroup/psi4fockci. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1838:27,plugin,plugin,27,https://psicode.org,https://github.com/psi4/psi4/issues/1838,1,['plugin'],['plugin']
Modifiability,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:1940,variab,variables,1940,https://psicode.org,https://github.com/psi4/psi4/issues/2572,5,"['plugin', 'variab']","['plugin', 'variable', 'variables']"
Modifiability,"y about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3417,rewrite,rewrite,3417,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,y registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4518,plugin,plugins,4518,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:3754,polymorphi,polymorphism,3754,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['polymorphi'],['polymorphism']
Performance," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:2582,load,loaded,2582,https://psicode.org,https://github.com/psi4/psi4/issues/1870,1,['load'],['loaded']
Performance," (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/usr/local/lib/libgg.1.dylib' (no such file), '/usr/lib/libgg.1.dylib' (no such file). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kianpu/miniconda3/envs/psi4env_37/bin/psi4"", line 185, in <module>; import psi4; File ""/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/core.cpython-37m-darwin.so, 0x0002): Library not loaded: @rpath/libgg.1.dylib; Referenced from: /Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/core.cpython-37m-darwin.so; Reason: tried: '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578:2468,load,loaded,2468,https://psicode.org,https://github.com/psi4/psi4/issues/2578,1,['load'],['loaded']
Performance, -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTE,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2350,Perform,Performing,2350,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2309,Perform,Performing,2309,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance," -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.372481393212; H 0.518565778818 -1.191478177535 -0.672179821662; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,)--------------------------------------------------------------------------. SETUP_PHASE; Threads set to 14 by Python driver. Scratch directory: [REMOVED]. *** tstart() called on [REMOVED]; *** at Fri Jul 22 13:16:33 2022. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 13-18 entry C line 144 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs ; atoms 7-12, 19-24 entry H line 14 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 14 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -0.260781259973 -0.714012941782 1.022641061033 12.000000000000; C 0.448798235138 -0.584866555587 1.116392879147 12.000000000000; C 0.671191593804 0.158609920222 1.104026912627 12.000000000000; C 0.177969561551 0.681404978559 1.093307893756 12.000000000000; C -0.560580808895 0.542719215",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:5654,Load,Loading,5654,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Load'],['Loading']
Performance," -757.95743638517786 -9.76555e-01 1.78554e-03 DIIS; @DF-RKS iter 95: -759.85317643211795 -1.89574e+00 8.92026e-04 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 96: -757.77254419159442 2.08063e+00 2.04014e-03 DIIS; @DF-RKS iter 97: -759.86786185265203 -2.09532e+00 8.71296e-04 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 98: -756.63806624552649 3.22980e+00 2.28461e-03 DIIS; @DF-RKS iter 99: -759.79391928550524 -3.15585e+00 9.68819e-04 SOKS, nmicro=40; @DF-RKS iter 100: -758.45496753171210 1.33895e+00 1.31995e-03 SOKS, nmicro=40. PsiException: Could not converge SCF iterations in 100 iterations. Failed to converge.; Traceback (most recent call last):; File ""/apps/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 73, in <module>; File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1339, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 677, in gradient; return driver_nbody.nbody_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver_nbody.py"", line 291, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver_nbody.py"", line 502, in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 739, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2485, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:14758,optimiz,optimize,14758,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance," 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1468,optimiz,optimized,1468,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['optimiz'],['optimized']
Performance," 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3160,optimiz,optimized,3160,https://psicode.org,https://github.com/psi4/psi4/issues/153,3,['optimiz'],['optimized']
Performance," 302; Total Points = 239042; Total Blocks = 1831; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 9 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-8, 10-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.162 GiB; user supplied 0.162 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 166; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 4.4477; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.161 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5610928795E-04.; Reciprocal condition number of the overlap matrix is 9.8342984140E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -39.70316824232670 -3.97032e+01 0.00000e+00 ; @DF-RKS iter 1: -43.27234536758360 -3.56918e+00 3.69413e-03 ADIIS/DIIS; @DF-RKS iter 2: -43.35383639315761 -8.14910e-02 2.43782e-03 ADIIS/DIIS; @DF-RKS iter 3: -43.38733837751467 -3.35020e-02 1.10466e-03 ADIIS/DIIS; @DF-RKS iter 4: -43.39730753466733 -9.96916e-03 3.77682e-04 ADIIS/DIIS; @DF-RKS iter 5: -43.39937943728395 -2.07190e-03 2.05445e-04 ADIIS/DIIS; @DF-RKS iter 6: -43.4004478",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:10083,Cache,Cached,10083,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Cache'],['Cached']
Performance," ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3223,perform,performance,3223,https://psicode.org,https://github.com/psi4/psi4/issues/1562,3,"['Optimiz', 'perform']","['Optimize', 'performance']"
Performance," = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 minutes; 	total time = 2 seconds = 0.03 minutes; Constructing Basis Sets for SAPT... => Loading Basis Set <=. Name: (AUG-CC-PVDZ AUX); Role: RIFIT; Keyword: DF_BASIS_SAPT; atoms 1 entry LI line 90 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-qzvpp-ri.gbs ; atoms 2 entry H line 30 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz-ri.gbs . //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT0 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on filip-ThinkPad-E495; *** at Wed Mar 4 16:29:34 2020. 	 --------------------------------------------------------; 	 SAPT ; 	 Rob Parrish and Ed Hohenstein ; 	 Open-shell: Jérôme Gonthier ; 	 --------------------------------------------------------. ==> Sizes <==. => Resources <=. Memory [MiB]: 878. => Orbital Ranges <=. ------------------; Range M_A M_B; ------------------; natom 1 1; nso 32 32; ------------------; Alpha orbitals ; ------------------; nmo 32 32; nocc 2 1; nvir 30 31; nfocc 0 0; naocc 2 1; navir 30 31; nfvir 0 0; ------------------; Beta orbitals ; ------------------; nmo 32 32; nocc 1 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:11769,Load,Loading,11769,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance, ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1813,Perform,Performing,1813,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1610,Perform,Performing,1610,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance," C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1265,perform,perform,1265,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['perform'],['perform']
Performance, Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1980,Perform,Performing,1980,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:4721,load,load,4721,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['load'],['load']
Performance," Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs ; atoms 2 entry H line 23 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 732; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 23; Number of basis function: 80; Number of Car",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:2398,Load,Loading,2398,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance," J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-V <= . wB97M-V Hyb-GGA Exchange-Correlation Functional. N. Mardirossian and M. Head-Gordon, J. Chem. Phys. 144, 214110 (2016) (10.1063/1.4952647). Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0225E-02; VV10 C = 7.4505E-01. => Molecular Quadrature <=. Radial Scheme = EM; Pruning Scheme = ROBUST; Pruning Type = REGION; Nuclear Scheme = SBECKE. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 590; Total Points = 912458; Total Blocks = 6145; Max Points = 256; Max Functions = 640; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 13-18 entry C line 198 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-12, 19-24 entry H line 18 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:9715,Load,Loading,9715,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Load'],['Loading']
Performance," Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number of Cartesian functions: 226; Spherical Harmonics?: false; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 9.4278934862E-03.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -151.27216259883716 -1.51272e+02 1.06941e-01 ; @DF-RHF iter 1: -150.75117737973858 5.20985e-01 1.41546e-02 ; @DF-RHF iter 2: -150.80128895895751 -5.01116e-02 4.59853e-03 DIIS; @DF-RHF iter 3: -150.80585921166312 -4.57025e-03 1.25933e-03 DIIS; @DF-RHF iter 4: -150.80646429745690 -6.05086e-04 4.11701e-04 DIIS; @DF-RHF iter 5: -150.80654183074188 -7.75333e-05 7.17643e-05 DIIS; @DF-RHF iter 6: -150.80654589438382 -4.06364e-06 1.72552e-05 DIIS; @DF-RHF iter 7: -150.80654619116103",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:4373,Cache,Cache,4373,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Cache'],['Cache']
Performance," Na 5.6405600000 8.4608400000 2.8202800000 ; Cl 8.4608400000 8.4608400000 2.8202800000 ; Na 8.4608400000 0.0000000000 2.8202800000 ; Na 5.6405600000 2.8202800000 2.8202800000 ; Cl 8.4608400000 2.8202800000 2.8202800000 ; Na 2.8202800000 16.9216800000 2.8202800000 ; Na 0.0000000000 19.7419600000 2.8202800000 ; Cl 2.8202800000 19.7419600000 2.8202800000 ; Na 2.8202800000 11.2811200000 2.8202800000 ; Na 0.0000000000 14.1014000000 2.8202800000 ; Cl 2.8202800000 14.1014000000 2.8202800000 ; Na 2.8202800000 5.6405600000 2.8202800000 ; Na 0.0000000000 8.4608400000 2.8202800000 ; Cl 2.8202800000 8.4608400000 2.8202800000 ; Na 2.8202800000 0.0000000000 2.8202800000 ; Na 0.0000000000 2.8202800000 2.8202800000 ; Cl 2.8202800000 2.8202800000 2.8202800000 ; """""". set maxiter 1000; set fail_on_maxiter false. set scf{; #soscf true; #soscf_max_iter 100; #basis_guess true; #damping_percentage 20; }. set optking frozen_cartesian $freeze_list. set cubeprop_tasks ['frontier_orbitals']; set cubic_grid_overage 10; E, wfn = optimize('b3lyp-d3', return_wfn=True) # psicode.org/psi4manual/master/opt.html; cubeprop(wfn)--------------------------------------------------------------------------. Memory set to 23.283 GiB by Python driver. Scratch directory: PATH; gradient() will perform analytic gradient computation. *** tstart() called on Logray; *** at Tue Aug 30 11:57:29 2022. => Loading Basis Set <=. Name: 6-31G; Role: ORBITAL; Keyword: BASIS; atoms 1-4, 9-12, 21-24, 33-34 entry H line 26 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 87 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:8767,optimiz,optimize,8767,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['optimiz'],['optimize']
Performance," PR or communicate the fix here, whatever you prefer. ```; Traceback (most recent call last):; File ""/opt/conda/envs/psi4-env/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 50, in <module>; File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 1152, in optimize; return optimize_geometric(name, **kwargs); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 918, in optimize_geometric; optimizer.prepareFirstStep(); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/optimize.py"", line 376, in prepareFirstStep; self.H0 = self.IC.guess_hessian(self.coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 3457, in guess_hessian; Hprim = self.Prims.guess_hessian(coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 2730, in guess_hessian; elem1 = min(Elements.index(self.elem[ic.a]), Elements.index(self.elem[ic.b])). ValueError: 'CL' is not in list. Printing out the relevant lines from the Psithon --> Python processed input file:; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; core.set_global_option(""GEOM_MAXITER"", 5); --> optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```. Versions:; - geometric 1.0; - psi4 1.7+6ce35a5; - python 3.9. Psi4 input file:; ```; memory 14000 MB; molecule ligand {; 0 1; Cl -1.0833 -0.2140 0.0000 ; O -0.3456 1.2535 0.0000 ; O 1.0833 1.2535 0.0000 ; N 1.0362 -0.4689 0.0000 ; N -0.0436 -1.2535 0.0000 ; N 0.7813 -1.2535 0.0000 ; C 0.3688 0.0160 0.0000 ; C -0.2986 -0.4689 0.0000 ; C 0.3688 0.8410 0.0000 . units angstrom; no_com; no_reorient; symmetry c1; }. set basis 6-311G(d,p); set opt_type min; geometric_keywords = {; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:1686,optimiz,optimize,1686,https://psicode.org,https://github.com/psi4/psi4/issues/2871,2,['optimiz'],['optimize']
Performance, Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; --,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2478,Perform,Performing,2478,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; --,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2437,Perform,Performing,2437,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance," Potential <==. => LibXC <=. Version 6.2.2; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1–5 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97X3C <= . wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026); M. Muller, A. Hansen, S. Grimme, J. Chem. Phys. 158, 014103 (2023). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97X-V range-separated functional. => Exact (HF) Exchange <=. 0.8330 HF,LR [omega = 0.3000]; 0.1670 HF . => LibXC Density Thresholds <==. XC_HYB_GGA_XC_WB97X_V: 1.00E-14 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 238643; Total Blocks = 1822; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 3-8 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2, 9-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.163 GiB; user supplied 0.163 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 167; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 3.8471; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.155 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5224744543E-04.; Reciprocal condition",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:21607,Load,Loading,21607,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance," Potential <==. => LibXC <=. Version 6.2.2; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1–5 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97X3C <= . wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026); M. Muller, A. Hansen, S. Grimme, J. Chem. Phys. 158, 014103 (2023). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97X-V range-separated functional. => Exact (HF) Exchange <=. 0.8330 HF,LR [omega = 0.3000]; 0.1670 HF . => LibXC Density Thresholds <==. XC_HYB_GGA_XC_WB97X_V: 1.00E-14 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 239042; Total Blocks = 1831; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 9 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-8, 10-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.162 GiB; user supplied 0.162 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 166; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 4.4477; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.161 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5610928795E-04.; Reciprocal condit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:9209,Load,Loading,9209,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748:1372,load,loaded,1372,https://psicode.org,https://github.com/psi4/psi4/issues/748,2,['load'],['loaded']
Performance," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:34174,perform,performance,34174,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['perform'],['performance']
Performance," `PSI_API`, to serve as a potential replacement for the lost functionality. Other LAPACK functions are already `PSI_API`, so this should not be any more burden Psi4-side. ### Archival; - [x] Add `ael.cc` to [psi4attic](https://github.com/psi4/psi4attic) **(merged https://github.com/psi4/psi4attic/pull/1)**; - [ ] Add `Wabei_RHF_FT2_a.cc` to [psi4attic](https://github.com/psi4/psi4attic). ### TODO; - [ ] Rework the remaining `Matrix::diagonalize` to only take references, and rework all callers to only pass references, eliminating pointer arguments. May touch: `dct/dct_memory.cc`, `libmints/cdsalclist.cc`, `libmints/molecule.cc`, ...; - [ ] `adc/prepare_tensors.cc` is now the only remaining caller of the Davidson solver in `libqt`. It has exactly one call site, and the solver is not `PSI_API`. Candidate for future cleanup. ## Questions; - [ ] Question1. ## Checklist; - [x] No new features; - [x] Almost the entire test suite passes, sans MRCC due to unrelated issues. Some runtime-loaded plugins are not covered.; ```; ========================================================================================================== short test summary info ==========================================================================================================; > FAILED ../tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > FAILED ../tests/pytests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; > FAILED ../tests/mrcc/optfreq/test_input.py::test_mrcc_optfreq - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > =========================================================================== 3 failed, 3726 passed, 173 skipped, 219 xfailed, 7068 warnings in 2238.06s (0:37:18) ==================================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:6334,load,loaded,6334,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['load'],['loaded']
Performance," `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Also, the issue is not present when using PK in multi-threaded environments, but using a different input, e.g.; `python test.py --num_threads 6 --scf_type PK --element 6 --multiplicity 3`; >-37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675. After digging a bit deeper, it seems like the difference between results stems from the entry for TWO ELECTRON ENERGY, which is essentially random (at least for single electron systems). It seems weird to me that this entry is non-zero at all for a single hydrogen atom, even for presumably correct results (i.e. when using DIRECT instead of PK), but I am no DFT expert. Note that when changing the method from PBE0 to HF, the random results problem persists, but correct results will have a TWO ELECTRON ENERGY of zero (as expected), whereas wrong results will have a non-zero entry. . [minimal_example.py.zip](https://github.com/psi4/psi4/files/9867943",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:2052,multi-thread,multi-threaded,2052,https://psicode.org,https://github.com/psi4/psi4/issues/2760,1,['multi-thread'],['multi-threaded']
Performance," at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle on a name? Others are ""geometry"" and ""set_options"". ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:1333,load,load,1333,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['load'],['load']
Performance," by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1036,optimiz,optimization,1036,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance," from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSIT",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3033,Perform,Performance,3033,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['Optimiz', 'Perform']","['Optimizations', 'Performance']"
Performance," g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2953,optimiz,optimize,2953,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimize']
Performance," heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3153,perform,performed,3153,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['perform'],['performed']
Performance," in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:2649,optimiz,optimized,2649,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance," optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see https://optking.readthedocs.io/en/latest/; The lines changed is almost entirely due to ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:1071,optimiz,optimization,1071,https://psicode.org,https://github.com/psi4/psi4/pull/2727,2,['optimiz'],"['optimization', 'optimizations']"
Performance," psi4-0.5 with g++ and chemps2. ```; seba@seb-desktop:~/software/psi4-0.5/objects$ CXX=g++ CC=gcc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is GNU 5.2.1; -- The C compiler identification is GNU 5.2.1; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:820,Perform,Performing,820,https://psicode.org,https://github.com/psi4/psi4/issues/264,6,['Perform'],['Performing']
Performance," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1257,cache,cache,1257,https://psicode.org,https://github.com/psi4/psi4/pull/1233,3,"['Cache', 'cache']","['Cache', 'cache']"
Performance," scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2431,load,loading,2431,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['load'],['loading']
Performance," the TOC, moving it to a separate page, to be followed by notes.; - [x] the main hand-generated capabilities table in introduction.rst tried to do a lot in specifying allowed refs, types, dertypes, and parallelism, including by specifying exceptions in footnotes. This discouraged updating since it was hard to know what was right w/o extensive testing and/or it was easier to glide over details. The hand-gen table has been replaced to be more general listing maximum capabilities, the parallelism column has been removed, and the complementary auto-gen summary table has been added; - [x] the main hand-generated capabilities table in introduction.rst and the docstring methods table in driver.py (shows up in https://psicode.org/psi4manual/master/energy.html etc.) have been reconciled with the current state of the procedures table. Devs are now admonished to update all three concurrently :-); - [x] Some investigation and searching of CDS's memory and comparison to GAMESS concluded that for arbitrary-order MPn and ZAPTn through DETCI that the written docs were right (MPn for RHF only and ZAPTn for ROHF only) and what was allowed was wrong (both for both). This has been reworked to match the written docs and various UpgradeHelpers have been positioned. Some tests had to change. Note that ZAPTn reduces to MPn for RHF, and DETCI was producing that correctly. However, DETCI MPn for ROHF wasn't producing anything we had confidence in, so it's good to get that disabled. Ugur's ROHF MP2 matches GAMESS `ospt=rmp` and DETCI's ROHF ZAPT2 matches GAMESS `ospt=zapt`, so I think this puts #311 to rest.; - [x] As reported in #2634, MRCC wasn't playing nicely with distributed driver due to the two-stage call-with-mrmtd then intercept-and-replace-mtd-with-dict. This scheme is replaced by an ordinary method call with MRCC backend indicated by `set qc_program mrcc`, just like intra-psi modules. Psi4 won't just default to MRCC if available; it must be specified. An UpgradeHelper has been deplo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:5183,concurren,concurrently,5183,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['concurren'],['concurrently']
Performance," the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:1166,optimiz,optimized,1166,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['optimiz'],['optimized']
Performance," unclear about the purpose of this code block perhaps that is not the best fix. With original code:; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; ==============================================================================; ```. With lines removed/commented (EXECUTING LOOP print statements added by me during debugging, ignore them):; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; EXECUTING LOOP; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; EXECUTING LOOP; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06; EXECUTING LOOP; 3 -76.2055243922 -7.91e-08 4.89e-06 2.97e-05 6.34e-07; EXECUTING LOOP; 4 -76.2055243935 -1.38e-09 6.15e-07 4.23e-06 8.53e-08; EXECUTING LOOP; 5 -76.2055243936 -2.45e-11 1.61e-07 7.61e-07 1.16e-08; EXECUTING LOOP; 6 -76.2055243936 -9.95e-13 1.87e-08 1.49e-07 1.92e-09. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1143:1973,Perform,Performing,1973,https://psicode.org,https://github.com/psi4/psi4/issues/1143,1,['Perform'],['Performing']
Performance," using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1684,Optimiz,Optimization,1684,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Optimiz'],['Optimization']
Performance," was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:1460,optimiz,optimize,1460,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['optimiz'],['optimize']
Performance," what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2883,optimiz,optimizations,2883,https://psicode.org,https://github.com/psi4/psi4/pull/442,2,['optimiz'],['optimizations']
Performance, |	 @DF-RHF iter 47: -43.08926782443959 2.19694e+01 2.36869e+01; Module time:								 |	 @DF-RHF iter 48: -78.66235883775985 -3.55731e+01 2.94519e+00; user time = 0.52 seconds = 0.01 minutes		 |	 @DF-RHF iter 49: -70.94249211110359 7.71987e+00 1.24515e+01; system time = 0.02 seconds = 0.00 minutes		 |	 @DF-RHF iter 50: -53.43926705464214 1.75032e+01 1.87808e+01; total time = 1 seconds = 0.02 minutes		 |	 @DF-RHF iter 51: -79.39673953309567 -2.59575e+01 2.79921e+00; Total time:								 |	 @DF-RHF iter 52: -21.09855845676194 5.82982e+01 3.40665e+01; user time = 3.91 seconds = 0.07 minutes		 |	 @DF-RHF iter 53: -76.58563241339290 -5.54871e+01 2.64622e+00; system time = 0.39 seconds = 0.01 minutes		 |	 @DF-RHF iter 54: -86.44756575789327 -9.86193e+00 1.45852e+00; total time = 5 seconds = 0.08 minutes		 |	 @DF-RHF iter 55: -76.67102843314724 9.77654e+00 6.54797e+00; Constructing Basis Sets for SAPT...					 |	 @DF-RHF iter 56: -76.14089910093142 5.30129e-01 9.61054e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 57: -86.01797407418083 -9.87707e+00 3.32711e+00; Name: DEF2-QZVPP-RI							 |	 @DF-RHF iter 58: -85.08445334159371 9.33521e-01 4.87812e+00; Role: RIFIT								 |	 @DF-RHF iter 59: -73.84912066572218 1.12353e+01 7.38988e+00; Keyword: DF_BASIS_SAPT						 |	 @DF-RHF iter 60: -73.64413189685598 2.04989e-01 9.80522e+00; atoms 1-2 entry H line 24 file /Users/runner/work/psi4	 |	 @DF-RHF iter 61: -86.70368775982897 -1.30596e+01 2.11859e+00; atoms 3 entry O line 406 file /Users/runner/work/psi4	 |	 @DF-RHF iter 62: -58.03773298700472 2.86660e+01 1.34869e+01; atoms 4 entry CA line 1382 file /Users/runner/work/psi4	 |	 @DF-RHF iter 63: -70.60093508339824 -1.25632e+01 5.80309e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 64: -73.83035588197933 -3.22942e+00 5.03538e+00; Name: (LANL2DZ AUX)							 |	 @DF-RHF iter 65: -81.54129188728777 -7.71094e+00 5.28840e+00; Role: JKFIT								 |	 @DF-RHF iter 66: -85.99899600012829 -4.45770e+00 1.45148e+00; Keyword: DF_BASIS_ELST			,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:12999,Load,Loading,12999,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Load'],['Loading']
Performance,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:178,perform,performance,178,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['perform'],['performance']
Performance,"## Big Picture of the Project; For those who haven't been following the saga, orbital convergence in occ has been unreliable for quite some time. In #1772, I changed the defaults for orbital convergence to be the same as for dfocc. Tests started failing because the orbitals couldn't be converged. My investigation has indicated the problem relates back to the details of the DIIS implementation: the orbital DIIS needs to be coupled to the DIIS for T2 amplitudes. My own Psi4Numpy implementations of orbital-optimized methods show no convergence problems when I do this, but show quite poor convergence when I uncouple them. ...Unfortunately, getting the DIIS coupled together requires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you onl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:509,optimiz,optimized,509,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['optimiz'],['optimized']
Performance,"## Description. All manner of sowreap cleanup and upgrade; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] make Hessian by both E & G return same non-mass-weighted matrix, relabel output, fixing #225 ; - [x] preserve `.1` files for optimization for cbs calcs, so no more multiple first cycles, fixing #303 ; - [x] sowreap testing machinery fixed up: catches more errors, works for optimizations, pep8-ified. @amjames, you may want to take a look at 31162be; - [x] new capability to do frequencies in sow/reap by finite difference of gradients, fixing psi4/psi4private#80; - [x] in order to do previous, needed format_molecule to preserve orientation, which zmat doesn't do naturally, so added `forcexyz=True` kwarg to optionally write in Carts (including no_com/no_reorient). conveniently, this fixes http://forum.psicode.org/t/embarrassingly-parallel-frequency-calculation-misbehaving/111 also.; - [x] general cleanup of db, opt, freq by E sow/reap procedures after wavefunction_pass, especially return statements and forcing return_wfn True, fixing #291 ; ## Questions; - [x] @psi-rking should probably take a look at 380a93c; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/318:273,optimiz,optimization,273,https://psicode.org,https://github.com/psi4/psi4/pull/318,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405:401,load,load,401,https://psicode.org,https://github.com/psi4/psi4/pull/405,1,['load'],['load']
Performance,"## Description. Finally, the first of @bozkaya's new methods. These are the canonical (non-orbital-optimized, non-FNO) CC methods with UHF reference by density-fitting and Cholesky decomposition. Gradients available for the most popular methods. This is PR No. 5 in the mega-dfocc-remp series. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] new methods!; - [x] uhf df ccd E & G; - [x] uhf df ccsd E & G ; - [x] uhf df ccsd(t) E & G (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf df a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:99,optimiz,optimized,99,https://psicode.org,https://github.com/psi4/psi4/pull/2739,5,['optimiz'],['optimized']
Performance,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:264,optimiz,optimizations,264,https://psicode.org,https://github.com/psi4/psi4/pull/432,1,['optimiz'],['optimizations']
Performance,"## Description. Fixes cc14 by assigning SOCC and DOCC, which previously changed during the optimization. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/538:91,optimiz,optimization,91,https://psicode.org,https://github.com/psi4/psi4/pull/538,1,['optimiz'],['optimization']
Performance,## Description. Fixing issue #310 CH3F was not fully optimizing due to missing internal coordinates. This issue led to the discovery that the code joining separated fragments had significant problems (basically atom reindexing/ordering).; ## Todos; ## Questions. None; ## Status. Ready to go. All optimization tests passed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/314:53,optimiz,optimizing,53,https://psicode.org,https://github.com/psi4/psi4/pull/314,2,['optimiz'],"['optimization', 'optimizing']"
Performance,"## Description. Improved fixed-coordinate optimizations. Test opt7 still works, as does a full dihedral scan of HOOH in C2 symmetry. Resolves issue #10 (there are no longer any nonsymmetric displacements). A new keyword `FIXED_COORD_FORCE_CONSTANT` allows tweaking for softer or firmer constraints, if necessary. The code does interpret fixed dihedrals <-180 or >180. However, the code does NOT currently deduce the most direct way through the dihedral discontinuity at 180. So it's a bad idea to give an input geometry with a dihedral of, say 178, and assign a target value of -178. Also, I've turned off dynamic trust radius sizing for optimizations with fixed coordinate targets by default.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328:42,optimiz,optimizations,42,https://psicode.org,https://github.com/psi4/psi4/pull/328,2,['optimiz'],['optimizations']
Performance,"## Description. Modified linear bend algorithm in optking to bend, when possible, along cartesian axes. Added SF4 (opt14) test case for which this change was made.; ## Todos; - [x] Optimizer now works for odd cases where linear bend is in a symmetry plane but is not constrained to be linear by the molecular point group. Fixed problem discovered by WebMO use for SF4.; - [x] Added opt14 test case for SF4.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/300:181,Optimiz,Optimizer,181,https://psicode.org,https://github.com/psi4/psi4/pull/300,1,['Optimiz'],['Optimizer']
Performance,"## Description. Reduced memory requirements for MRPT integral presorts.; ## Todos; - [x] Less memory use for MRPT calculations.; - [x] More shorttests and quicktests coverage of PSIMRCC codes.; ## Questions; - [x] Do you think we should also use the DPD buffers to perform the presort for CCSD calculations, instead of IWL, @fevangelista ?; - [x] Also, do you agree with these changes to the MRPT setup code, @fevangelista ?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/296:265,perform,perform,265,https://psicode.org,https://github.com/psi4/psi4/pull/296,1,['perform'],['perform']
Performance,"## Description. There was a race condition in the parallel calculation of ESP over grid in memory. This was fixed in PR #1900.; This made the computation of ESP serial and quite slow (as mentioned in #1614 for example).; This PR brings back the OpenMP parallelization, the race condition is avoided by allowing each thread to hold its own copy of the `ElectrostaticInt` object. Thanks to @JonathonMisiewicz for the initial hint. ## User API & Changelog headlines; - [x] Significant acceleration of the calculation of ESP over grid in memory. ## Dev notes & details; - [x] Created a vector of thread-specific `<ElectrostaticInt>` and `<Matrix>` objects for computing the ESP at a given grid point; - [x] Added `#pragma omp parallel for schedule(dynamic)` to parallelize the outer loop over grid points. ## Questions; - [ ] While working on this part of the code I noticed that `cubeprop` uses a scheme different from the one used by `oeprop` to compute ESP on a grid. I am not sure this is documented. Should it be?; - [ ] Initially my goal was to parallelize the computation of `compute_esp_over_grid` function which reads the grid from `grid.dat` file. The way it is designed now, the grid is read iteratively, so one grid point read->one ESP point computed->one ESP point written to the output `grid_esp.dat` file. This is not parallelizible. However, if one would read grid points in batches - this can be parallelized. What do you think? . ## Checklist; - [x] Tests added for any new features => [mints14](https://github.com/psi4/psi4/tree/master/tests/python/mints14) test already in place; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2891:28,race condition,race condition,28,https://psicode.org,https://github.com/psi4/psi4/pull/2891,2,['race condition'],['race condition']
Performance,"## Description. This PR is part two of a mini-project regarding the two DFJK algorithms present in Psi4. The first PR (https://github.com/psi4/psi4/pull/2848) applied to MemDFJK, and the second PR (this one) applies to DiskDFJK. The goal of this PR project is to add an expert keyword to allow user control over which subalgorithm is used by either MemDFJK or DiskDFJK. See, MemDFJK and DiskDFJK, despite their name, each have separate ""subalgorithms"" optimized to be run either in-core or out-of-core. While MemDFJK and DiskDFJK can be independently selected with `SCF_TYPE`, their subalgorithms cannot be; subalgorithm selection was previously controlled exclusively through memory allocated to Psi4. The mini-project this PR is part of, is meant to rectify that issue. In the previous PR of this project, the `SCF_SUBTYPE` keyword was introduced, an expert option allowing for forced execution of a given subalgorithm. The default option, `AUTO`, has the code select the subalgorithm automatically, as before. `INCORE` forces MemDFJK to use the in-core subalgorithm, and throws an exception if not enough memory is allocated to Psi4 to do so. `OUT_OF_CORE` forces MemDFJK to use the out-of-core subalgorithm, even if enough memory is allocated to Psi4 to use the in-core subalgorithm. This current PR takes the `SCF_SUBTYPE` keyword, previously applied to MemDFJK, and applies it to the DiskDFJK algorithm, with the same effects. ## User API & Changelog headlines; - N/A. ## Dev notes & details; - [X] Implements functionality of the SCF_SUBTYPE keyword to the DiskDFJK class (i.e., the DISK_DF SCF_TYPE). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2924:452,optimiz,optimized,452,https://psicode.org,https://github.com/psi4/psi4/pull/2924,1,['optimiz'],['optimized']
Performance,"## Description. With ICC 2015 and `XHOST` turned off the changed loop will fail. You can either turn `XHOST` on, set `#prama novector` for the inner loops, or unroll the loop as shown to fix the problem. I would consider this a compiler bug, but I was curious if anyone had other opinions. A bit scary that we are running into this kind of thing. A few details:; - `TPDMp` and `actMOp` are both `double**`'s with shapes of `nact*nact` by `nact*nact`.; - All indices are within bounds.; - Very excited for everyone to review the most neglected piece of code in the MCSCF orbital optimization.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/316:578,optimiz,optimization,578,https://psicode.org,https://github.com/psi4/psi4/pull/316,1,['optimiz'],['optimization']
Performance,"## Description. `COSX` has always been a bit... troublesome since its introduction to Psi4. The primary issue with it, is that it is VERY tricky finding grid settings that provide a satisfactory balance of performance and accuracy. To help alleviate this issue, `COSX` uses a two-grid scheme, converging the SCF on a small initial grid, then performing `COSX_MAXITER_FINAL` number of SCF iterations (generally 1) on a larger final grid. With the two-grid scheme, the performance is controlled mainly by the initial grid, while accuracy is controlled primarily by the final grid. But this brings up an idea... instead of using a larger `COSX` grid, why not just use a 4-center **K** construction method for the final iteration(s) instead?. This PR introduces the `SCF_COSX_GUESS` keyword to Psi4. `SCF_COSX_GUESS` can be used in conjunction with either the `DIRECT` or `DFDIRJ+LINK` options for `SCF_TYPE` . When enabled, the calculation will first converge the SCF on a small `COSX` grid, followed by executing SCF using the specified `SCF_TYPE`. Another way of framing it, is that `SCF_COSX_GUESS` is similar to `DF_SCF_GUESS`, but uses `COSX` instead of `DFJK` for the initial SCF convergence process. To support `SCF_COSX_GUESS`, some keyword functionality has been expanded. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` can be used to control the `COSX` grid size for the `SCF_COSX_GUESS`, with the grid in this context defaulting to (20/50). `COSX_MAXITER_FINAL` can be used to control the number of `DIRECT`/`DFDIRJ+LINK` iterations to run after the `COSX` guess, defaulting to 2 in this context. Note that the grid for `SCF_COSX_GUESS` uses different defaults compared to the usual initial grid for `DFDIRJ+COSX` runs. This PR also adds a fair bit of cleanup/QoL changes, as follows:; - The `early_screening` variable in `scf_iterator.py`, and all related quantities, have been renamed for clarity.; - `DFDIRJ+LINK` can now be used in conjunction with `DF_SCF_GUESS`.; - Tes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:206,perform,performance,206,https://psicode.org,https://github.com/psi4/psi4/pull/3158,3,['perform'],"['performance', 'performing']"
Performance,## Description; * Fixes a line in docs that was causing a docs build fail; * Uses the new GHA concurrency feature to cancel previous docs job if new one presents itself. I've already seen it working correctly for the two commits of this branch. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2172:94,concurren,concurrency,94,https://psicode.org,https://github.com/psi4/psi4/pull/2172,1,['concurren'],['concurrency']
Performance,"## Description; - [x] Addresses #1820 with new syntax. Let's see if Windows and Mac setups can cope.; - [x] Addresses #1819 with explicit rounding direction. before (stride, memory, collocation_size) `MEM 1 954741720.0000 1678037264`; ```; (dev10) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir: (safeforqcel2018) grep iB dftmem.out ; Memory: 500.0 MiB; Memory set to 14.901 GiB by Python driver.; 1 Threads, 15258 MiB Core; DFHelper Memory: AOs need 3.981 GiB; user supplied 3.981 GiB. Using in-core AOs.; Memory [MiB]: 4076; Cached 100.0% of DFT collocation blocks in 12.502 [GiB].; ```; after `MEM 2 954741720.0000 1678037264`; ```; (dev10) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir: (safeforqcel2018) grep iB dftmem2.out ; Memory: 500.0 MiB; Memory set to 14.901 GiB by Python driver.; 6 Threads, 15258 MiB Core; DFHelper Memory: AOs need 4.062 GiB; user supplied 4.062 GiB. Using in-core AOs.; Memory [MiB]: 4159; Cached 50.0% of DFT collocation blocks in 6.277 [GiB]. ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1823:548,Cache,Cached,548,https://psicode.org,https://github.com/psi4/psi4/pull/1823,2,['Cache'],['Cached']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cast in DFTensor memory estimation so that one can perform a fno-df-cc on 6 heavy atoms with aqz in 31 GiB of memory, not 17179869183.261 GiB . (How did this bug live this long?) Improve printing to match DFHelper; - [x] start converting existing mem printing to GiB from mega. afaict, the fnocc values were already mebibytes, though labeled MB; - change in printing for identical calc below:. ```; < The DF Tensor (Qso) construction requires 31.261 GiB of memory. ; ---; > DFTensor Memory: Qso construction needs 31.261 GiB; user supplied 35.390 GiB. ; ```; ```; < Total memory available: 38146.97 mb; < CCSD memory requirements: 35113.77 mb; < 3-index integrals: 10081.38 mb; < CCSD intermediates: 25032.39 mb; < (T) algorithm: 9055.34 mb (low-memory); ---; > Total memory available: 37.253 [GiB]; > CCSD memory requirements: 34.291 [GiB]; > 3-index integrals: 9.845 [GiB]; > CCSD intermediates: 24.446 [GiB]; > (T) algorithm: 8.843 [GiB] (low-memory); ```. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2673:238,perform,perform,238,https://psicode.org,https://github.com/psi4/psi4/pull/2673,1,['perform'],['perform']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. The purpose of this PR is the following:; - Fix #2871 . The bug observed when optimizing a molecule containing `Cl` atom using `geometric` via Psi4. . ## User API & Changelog headlines. - [x] Fixing compatibility with geometric 1.0. ## Dev notes & details. - [x] The atom list in Psi4 is upper-cased while geometric expects a capitalized one. This is not a problem for atom symbols containing a single letter like `H`, `C` etc. but becomes a problem for `Cl`, `Br` etc. ## Questions; - [x] Are there any tests of the Psi4/geometric interface?. ## Checklist; - [x] Tests added for any new features -> not a new feature; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872:158,optimiz,optimizing,158,https://psicode.org,https://github.com/psi4/psi4/pull/2872,1,['optimiz'],['optimizing']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds optking keywords missed in #3204. For users, if these options are needed with an older version of Psi4, they can be passed through `psi4.optimize(..., 'optimizer_keywords'=)` to optking. Features require `optking >= 0.3.0`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Adds shortcut for freezing all dihedrals in a molecule `freeze_all_dihedrals` and `unfreeze_dihedrals` . ## Checklist; - [x] Ran -L opt subset; - [x] keywords checked explicitly in optking's tests . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3209:222,optimiz,optimize,222,https://psicode.org,https://github.com/psi4/psi4/pull/3209,1,['optimiz'],['optimize']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Disables libint2's primitive screening via the `engine_precision` parameter. This integral screening provided a minor speedup, but in rare cases led to disastrously wrong SCF behavior as noted in #2114 and [here](https://github.com/edeprince3/hilbert/issues/8). This pull request closes those issues. Note that this primitive screening is independent of the shell-pair level Schwarz and CSAM screening performed in Psi4. The previous workaround to this problem, which was to set the `ints_tolerance` keyword to 0.0, is no longer necessary. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Change precision. ## Checklist; - [x] all ctests are unaffected by this change. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139:482,perform,performed,482,https://psicode.org,https://github.com/psi4/psi4/pull/2139,1,['perform'],['performed']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fix for the bug described in [issue #1968](https://github.com/psi4/psi4/issues/1968) about incorrectly loading ECPs for ghosted atoms. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Calculations using ghosted atoms that contain ECPs in the basis set can now be executed properly. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] When loading basis functions we check if we should skip loading ECPs (`skip_ghost_ecps`) and if `true` then we check if an atom is a ghost (`mol->Z(atom) == 0.0`). If yes we do not load ECPs fot it.; - [x] Added optional boolean argument `skip_ghost_ecps` for `construct_basisset_from_pydict` function. The default is `true`, we set it `false` for atomic calculations (like SAD guess). ## Questions; - [x] Are the check runs failing due to the changes in this PR?. ## Checklist; - [x] Minimal working example; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167:183,load,loading,183,https://psicode.org,https://github.com/psi4/psi4/pull/3167,4,['load'],"['load', 'loading']"
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug encountered when running optimizations in BAKERJCC96. All calculations in a finite difference; calculation were writing orbitals to disk and overwriting the old orbitals. Only reference calculation should; be saved. In cases were the symmetry was lowered in one of the last displacements, subsequent gradient calculations; were failing to read orbitals. ``` ; File ""/home/zander/github/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1761, in scf_helper; raise ValidationError(""Cannot compute projection of different symmetries.""); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] scf_helper assumes orbitals should always be written. Passes `write_orbitals` = `false` through kwargs for displacements. ## Questions; - [ ] The new test is an optimization, would a test in ddd-function-kwargs or similar be preferred?. ## Checklist; - [x] Tests added for any new features; - [x] full ctest (Psi4, Psi4 + [CheMPS2, DFTD3, dkh, gCP, gdma, simint, ecpint]). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827:117,optimiz,optimizations,117,https://psicode.org,https://github.com/psi4/psi4/pull/2827,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:595,cache,cache,595,https://psicode.org,https://github.com/psi4/psi4/pull/2980,1,['cache'],['cache']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:320,optimiz,optimization,320,https://psicode.org,https://github.com/psi4/psi4/pull/2727,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:87,perform,performance,87,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['perform'],['performance']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2377:131,optimiz,optimization,131,https://psicode.org,https://github.com/psi4/psi4/pull/2377,1,['optimiz'],['optimization']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:751,optimiz,optimization,751,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['optimiz'],['optimization']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request fixes the functionality of the EMBPOT perturbation to the core Hamiltonian in SCF calculations and adds appropriate gradients for the EMBPOT potential. The EMBPOT perturbation works by reading x, y, z, w, and v coordinates from a file (`EMBPOT`) during the call to `HF::form_H()`. The core Hamiltonian of the `HF` object is then modified to include a contribution that is calculated by performing numerical integration of the basis over the EMBPOT coordinates, weights, and potentials. This functionality assumed that the values of phi calculated in the `BasisSet::compute_phi()` routine are always in a cartesian basis and not in a spherical basis, which was true up until the fix in #2210, which was included in the 1.4 release. Accordingly, an unnecessary AO to SO transformation is applied in the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:484,perform,performing,484,https://psicode.org,https://github.com/psi4/psi4/pull/3239,1,['perform'],['performing']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:151,optimiz,optimize,151,https://psicode.org,https://github.com/psi4/psi4/pull/2929,1,['optimiz'],['optimize']
Performance,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:377,perform,performance-on-multi-core-systems,377,https://psicode.org,https://github.com/psi4/psi4/pull/604,1,['perform'],['performance-on-multi-core-systems']
Performance,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:463,optimiz,optimized,463,https://psicode.org,https://github.com/psi4/psi4/pull/1772,2,['optimiz'],['optimized']
Performance,"## Description; A minor bugfix in optking: internal coordinate files are now kept after a successful optimization. I'm well-aware that the days of C-Optking are numbered, but I came across this when investigating a tangentially related bug report in forums, so I might as well fix it. ## Checklist; - [x] Code runs and keeps internal coordinate files when `keep_intcos` set to `true`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2188:101,optimiz,optimization,101,https://psicode.org,https://github.com/psi4/psi4/pull/2188,1,['optimiz'],['optimization']
Performance,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:217,perform,performed,217,https://psicode.org,https://github.com/psi4/psi4/pull/975,2,"['Perform', 'perform']","['Performs', 'performed']"
Performance,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2382:210,bottleneck,bottleneck,210,https://psicode.org,https://github.com/psi4/psi4/pull/2382,1,['bottleneck'],['bottleneck']
Performance,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1277:119,perform,performs,119,https://psicode.org,https://github.com/psi4/psi4/pull/1277,1,['perform'],['performs']
Performance,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/776:63,optimiz,optimization,63,https://psicode.org,https://github.com/psi4/psi4/pull/776,4,['optimiz'],"['optimization', 'optimizations']"
Performance,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2076:237,bottleneck,bottleneck,237,https://psicode.org,https://github.com/psi4/psi4/pull/2076,1,['bottleneck'],['bottleneck']
Performance,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/635:345,tune,tuned,345,https://psicode.org,https://github.com/psi4/psi4/pull/635,1,['tune'],['tuned']
Performance,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592:345,tune,tuned,345,https://psicode.org,https://github.com/psi4/psi4/pull/592,1,['tune'],['tuned']
Performance,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083:88,perform,performance,88,https://psicode.org,https://github.com/psi4/psi4/pull/1083,1,['perform'],['performance']
Performance,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:355,optimiz,optimize,355,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['optimiz'],['optimize']
Performance,"## Description; Allows for the use of the GeomeTRIC optimizer within a Psi4 input. The desired optimization engine, either `geometric` or `optking` (default), can now specified with an `engine` argument to the `optimize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:52,optimiz,optimizer,52,https://psicode.org,https://github.com/psi4/psi4/pull/1813,7,"['Optimiz', 'optimiz']","['Optimizer', 'optimization', 'optimize', 'optimizer']"
Performance,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/882:46,perform,performed,46,https://psicode.org,https://github.com/psi4/psi4/pull/882,1,['perform'],['performed']
Performance,"## Description; As part of #1005, UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The keyword `SOLVER_ROOTS_PER_IRREP` has been added to allow more fine-tuned control over the roots converged during instability analysis.; - [x] Instability keywords have moved from the `CPHF` module to the `SCF` module. See the corresponding SCF subsection of the documentation for details. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] LoC reduced by nearly 2000; - [x] Several CPHF keywords have been removed or copied over to SCF.; - [x] UHF LDA stability analysis is now enabled.; - [x] SOLVER_ROOTS_PER_IRREP keyword has been added. It overrides SOLVER_N_ROOT.; - [x] If SOLVER_N_GUESS is not set, the number of guess vectors is taken from SOLVER_CONVERGENCE, per the TDSCF code.; - [x] To the handling of landing in the same instability: the check is made more precise by checking absolute value, and we remember to reset the step scaling after landing in a new instability.; - [x] The Davidson solver no longer eliminates zero and negative eigenvalues by default. ## Question; - [x] Do we need more test coverage? I haven't actually _checked_ LDA instability analysis. Imagining a test is tricky. ## Checklist; - [x] Tests should still be passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766:395,tune,tuned,395,https://psicode.org,https://github.com/psi4/psi4/pull/2766,1,['tune'],['tuned']
Performance,## Description; As the title says: calls to `conda config` are not saved in the cache. It works!. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:80,cache,cache,80,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['cache'],['cache']
Performance,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:197,optimiz,optimized,197,https://psicode.org,https://github.com/psi4/psi4/pull/1846,1,['optimiz'],['optimized']
Performance,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:1550,optimiz,optimization,1550,https://psicode.org,https://github.com/psi4/psi4/pull/1289,1,['optimiz'],['optimization']
Performance,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/772:205,optimiz,optimize,205,https://psicode.org,https://github.com/psi4/psi4/pull/772,2,['optimiz'],"['optimization', 'optimize']"
Performance,"## Description; Cleanup of tests directory following #2555. Heals various typos preventing some tests from getting pytest registration as well as some discrepancies between ctest and pytest labels. Deletes many unused/broken tests. ## Todos; - [x] All unused optimizer tests deleted following discussion in #2555.; - [x] All unused sowreap tests deleted.; - [x] `cc5`, `scf11-freq-from-energies`,`dft-pbe0-2`, `dft-dsd`, `dft-dldf` are all unused duplicates of other tests. Deleted.; - [x] `min-input` Broken + unused. Deleted.; - [x] `fsapt-diff1` Unused + not a test. Deleted. ; - [x] `dfmp2-freq1`, `dfmp2-freq2`, `props4` were unused but are passing, quick, and useful. These are saved and added to `CMakeLists.txt`.; - [x] `tester.py` no longer erroneously complains about ecppint tests having mismatched labels. ## Checklist; - [x] All tests that were missing registrations are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655:259,optimiz,optimizer,259,https://psicode.org,https://github.com/psi4/psi4/pull/2655,1,['optimiz'],['optimizer']
Performance,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:280,optimiz,optimized,280,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['optimiz'],['optimized']
Performance,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:516,bottleneck,bottleneck,516,https://psicode.org,https://github.com/psi4/psi4/pull/2193,1,['bottleneck'],['bottleneck']
Performance,"## Description; Current qcel not compatible with the new pydantic v2. I minted a new qcel build with the constraint, but the solver sometimes optimizes for pydantic anyways. So let's try explicit constraint. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2999:142,optimiz,optimizes,142,https://psicode.org,https://github.com/psi4/psi4/pull/2999,1,['optimiz'],['optimizes']
Performance,"## Description; Currently, COSX in Psi4 uses a two-grid scheme to complete the SCF - the SCF is first converged on a smaller grid, and then a single iteration is performed on a larger grid, a scheme proposed by Neese. This scheme works quite well for energies; but since the SCF isn't converged on the larger grid, it may not be as ideal if wavefunction properties (e.g., gradients) are desired. This PR fixes that by adding a new keyword, `COSX_MAXITER_FINAL`, an integer that determines the maximum number of SCF iterations to run on the final COSX grid. By default, this keyword is set to 1, mimicking the current behavior of the code. A more detailed description of behavior can be broken down as follows:. - If `COSX_MAXITER_FINAL` < 0; the SCF will attempt to fully converge on the final COSX grid (within the constraints provided by `MAXITER`, of course).; - If `COSX_MAXITER_FINAL` == 0; the SCF will not run on the final grid at all, effectively turning the COSX algorithm into a single-grid implementation.; - If `COSX_MAXITER_FINAL` > 0; the SCF will run on the final grid for a maximum number of iterations specified by the keyword. ; - If the SCF converges on the final grid before the iteration count specified by `COSX_MAXITER_FINAL`, the SCF will exit upon convergence.; - If the iteration count specified by `COSX_MAXITER_FINAL` is reached before the SCF is converged on the final grid, the SCF will exit, treated as a success.; - If the `MAXITER` SCF iteration limit is hit before the `COSX_MAXITER_FINAL` limit is reached, the calculation will fail. Also of note, this PR changes CompositeJK so that early_screening is disabled for LinK-based composite methods. Practically, this means that LinK-based methods do not run the extra post-early-screening SCF iteration that is present in COSX-based methods. ## User API & Changelog headlines; - [X] Adds a new keyword, `COSX_MAXITER_FINAL`, for controlling the maximum number of SCF iterations to run on the final COSX grid. ## Dev not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2981:162,perform,performed,162,https://psicode.org,https://github.com/psi4/psi4/pull/2981,1,['perform'],['performed']
Performance,"## Description; Described in great detail [here](https://github.com/psi4/psi4/issues/1736). ## Todos; I see this PR occurring in six major stages.; - [x] Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:533,perform,perform,533,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['perform'],['perform']
Performance,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962:83,perform,perform,83,https://psicode.org,https://github.com/psi4/psi4/issues/962,3,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866:182,load,loaded,182,https://psicode.org,https://github.com/psi4/psi4/pull/866,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"## Description; Extracts some miscellaneous, uncontroversial and minor, changes from #1443 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `pybind11_add_module` to declare the Python module at the CMake level. This follows suggestions from the pybind11 project. Note that I had to deactivate the link-time optimization (the `NO_EXTRAS` flag). I'd get `Aborted (core dumped)` otherwise with GCC (tested with versions 5, 6, and 7); - [x] More `auto`-izing and switch to the free functions in the `linalg` namespace. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1595:362,optimiz,optimization,362,https://psicode.org,https://github.com/psi4/psi4/pull/1595,1,['optimiz'],['optimization']
Performance,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:234,optimiz,optimization,234,https://psicode.org,https://github.com/psi4/psi4/pull/1862,9,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimization', 'optimize']"
Performance,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:84,optimiz,optimization-error,84,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['optimiz'],['optimization-error']
Performance,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:196,perform,performance,196,https://psicode.org,https://github.com/psi4/psi4/pull/2543,1,['perform'],['performance']
Performance,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:1131,Optimiz,Optimized,1131,https://psicode.org,https://github.com/psi4/psi4/pull/913,1,['Optimiz'],['Optimized']
Performance,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520:332,perform,performs,332,https://psicode.org,https://github.com/psi4/psi4/pull/520,2,['perform'],['performs']
Performance,"## Description; I realized that when running PBEh-3c, the calculation would take longer than expected. This was due to the use of a large basis during the density fitting procedure. I have just added the information required to make the code use the same auxiliary basis for the def2-mSVP basis as the ones used for def2-SVP. I did not test this modifications using the test cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Improve performance of PBEh-3c when used with the default def2-mSVP basis set. ## Questions; - [ ] None. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1558:488,perform,performance,488,https://psicode.org,https://github.com/psi4/psi4/pull/1558,1,['perform'],['performance']
Performance,"## Description; I recently discovered a bug where CBS finite-difference Hessians will crash on systems with zero dipole moment. This is due to `CompositeComputer` not loading a dipole with entries all exactly zero into qcvars. This fix checks that CBS results are not None rather than have any non-zero entries before loading into qcvars. I have verified that this fixes the crash and that e.g. non-existing Hessians are stiil not loaded into result qcvars. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing CBS extrapolated finite-difference Hessians to crash on systems with zero dipole moment. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `CompositeComputer` loads variables with zero'd entries in qcvars.; - [x] `FiniteDifferenceComputer` checks for dipoles when doing finite-difference by gradients. ## Checklist; - [x] cbs tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2759:167,load,loading,167,https://psicode.org,https://github.com/psi4/psi4/pull/2759,4,['load'],"['loaded', 'loading', 'loads']"
Performance,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:891,perform,performed,891,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['perform'],['performed']
Performance,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:353,optimiz,optimize,353,https://psicode.org,https://github.com/psi4/psi4/pull/743,3,"['Optimiz', 'optimiz', 'perform']","['Optimization', 'optimize', 'performance']"
Performance,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:517,optimiz,optimizations,517,https://psicode.org,https://github.com/psi4/psi4/pull/638,1,['optimiz'],['optimizations']
Performance,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:666,cache,cached,666,https://psicode.org,https://github.com/psi4/psi4/pull/751,2,"['cache', 'latency']","['cached', 'latency']"
Performance,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:16,Optimiz,Optimizes,16,https://psicode.org,https://github.com/psi4/psi4/pull/2481,5,"['Optimiz', 'optimiz']","['Optimization', 'Optimizes', 'optimize', 'optimized']"
Performance,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1291:943,perform,performance,943,https://psicode.org,https://github.com/psi4/psi4/pull/1291,1,['perform'],['performance']
Performance,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2049:159,perform,performance,159,https://psicode.org,https://github.com/psi4/psi4/pull/2049,1,['perform'],['performance']
Performance,"## Description; Previously, the `dertype` specified in a frequency or optimization-with-hessian computaiton wouldn't get passed on to the pre-hessian gradient. This is now fixed. For optimizations, we can do one better and pass in the last gradient, so we don't need to recompute it. While solving this, I uncovered that supplying a dertype that was ""too high"" for the derivative level would lead to the default case of energy-only computations. That is also fixed. **Although this is an enhancement, this is also a bug fix.** Without this PR, I have no way to get a frozen core MP2 optimization with a `full_hess_every` hessian. The user is responsible for supplying the `dertype`, and they currently have no way to get the `dertype` argument to the pre-hessian gradient. ## Checklist; - [x] Tested this solved my fc-MP2 use case; - [x] Tested this solved the case of a dertype=2 RHF hessian. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551:70,optimiz,optimization-with-hessian,70,https://psicode.org,https://github.com/psi4/psi4/pull/1551,3,['optimiz'],"['optimization', 'optimization-with-hessian', 'optimizations']"
Performance,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:494,load,loading,494,https://psicode.org,https://github.com/psi4/psi4/pull/659,1,['load'],['loading']
Performance,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634:195,perform,performed,195,https://psicode.org,https://github.com/psi4/psi4/pull/634,1,['perform'],['performed']
Performance,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1102,cache,cache,1102,https://psicode.org,https://github.com/psi4/psi4/pull/623,1,['cache'],['cache']
Performance,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/540:801,perform,performance,801,https://psicode.org,https://github.com/psi4/psi4/pull/540,1,['perform'],['performance']
Performance,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:591,cache,cache,591,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['cache'],['cache']
Performance,"## Description; Some MO transformations were being performed many times instead of just once in the DF SCF analytic Hessians, as a result of some closed braces being in the wrong place. The results were correct before but the code was *very* slow. Sorry for the mistake - my bad. Fixes #1145. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1805:51,perform,performed,51,https://psicode.org,https://github.com/psi4/psi4/pull/1805,1,['perform'],['performed']
Performance,"## Description; Substitute ""geometry projection"" with ""geometry optimization"" in `opt.rst`. ## Todos; - [x] Fix a misprint in `opt.rst`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/589:64,optimiz,optimization,64,https://psicode.org,https://github.com/psi4/psi4/pull/589,1,['optimiz'],['optimization']
Performance,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1963:99,optimiz,optimized,99,https://psicode.org,https://github.com/psi4/psi4/pull/1963,2,['optimiz'],['optimized']
Performance,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1483:106,optimiz,optimizations,106,https://psicode.org,https://github.com/psi4/psi4/pull/1483,3,['optimiz'],"['optimization', 'optimizations']"
Performance,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409:62,perform,perform,62,https://psicode.org,https://github.com/psi4/psi4/pull/1409,1,['perform'],['perform']
Performance,"## Description; The goal of this PR is to save one-electron integrals in core and cache them. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] One-electron integrals are no longer stored on disk. The `Wavefunction` base class holds a pointer to a `MintsHelper` object.; - [x] T, V, and S integrals are cached.; - [x] Address issue #1758 (no effect of perturbation on X2C energy); - [x] Fixes issue #1794; - [x] May fix issue #1791. ## For developers; - [x] Added a `MintsHelper` object to `Wavefunction`. ## Checklist; - [x] Tests added for X2C finite field contributions; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) except for eight test cases that are linked to #1793. ## Status; - [x] Working code; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1770:82,cache,cache,82,https://psicode.org,https://github.com/psi4/psi4/pull/1770,2,['cache'],"['cache', 'cached']"
Performance,"## Description; The idea here was suggested by @CDSherrill, and implemented in this PR. What is this ""idea""? Currently, CompositeJK methods are accessed through `SCF_TYPE` options of the form `J_algo+K_algo`, with `J_algo` and `K_algo` being the respective composite J and K build algorithms to be used for the calculation. Meanwhile, one notable benefit of the CompositeJK class is that, for DFT calculations that use non-hybrid functionals, composite methods can be used to specify an algorithm specifically optimized for J matrix construction, in contrast to general algorithms which need to also account for the K matrix. Since non-hybrid DFT calculations only require the J matrix, CompositeJK can lead to speedups in such cases. But in those cases where only the J algorithm is needed, the current `SCF_TYPE` specification for CompositeJK has a problem - the composite K algorithm that must be specified, is unnecessary and unused. . This PR allows for the specification of CompositeJK algorithms via _only_ the J algorithm for cases such as non-hybrid DFT, where only the J matrix is needed. If CompositeJK is called without a K algorithm in cases where a K algorithm is needed, such as HF or hybrid DFT, an exception is thrown. Additionally, if the `J_algo+K_algo` `SCF_TYPE` specification for CompositeJK is used in conjunction with a non-hybrid functional, a note is given to the user, letting them know that the K algorithm won't be used. ## User API & Changelog headlines; - [X] Adds a new `SCF_TYPE` option, `DFDIRJ`, for usage in non-hybrid DFT calculations. ## Dev notes & details; - [X] Adjusts the CompositeJK class so that it can be called and used with _only_ the J algorithm as the `SCF_TYPE` keyword. This can be useful in non-hybrid DFT calculations, where the K matrix is unnecessary.; - [X] If only a J algorithm is specified in cases where a K matrix is required, the code throws an exception.; - [x] If the old CompositeJK `SCF_TYPE` notation is used when the K matrix is not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001:510,optimiz,optimized,510,https://psicode.org,https://github.com/psi4/psi4/pull/3001,1,['optimiz'],['optimized']
Performance,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1988:319,optimiz,optimized,319,https://psicode.org,https://github.com/psi4/psi4/pull/1988,1,['optimiz'],['optimized']
Performance,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:91,optimiz,optimize,91,https://psicode.org,https://github.com/psi4/psi4/pull/1001,1,['optimiz'],['optimize']
Performance,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:45,optimiz,optimization,45,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['optimiz'],['optimization']
Performance,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:430,Optimiz,Optimization,430,https://psicode.org,https://github.com/psi4/psi4/pull/2043,1,['Optimiz'],['Optimization']
Performance,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:139,perform,perform,139,https://psicode.org,https://github.com/psi4/psi4/pull/1855,1,['perform'],['perform']
Performance,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757:621,optimiz,optimization,621,https://psicode.org,https://github.com/psi4/psi4/pull/757,1,['optimiz'],['optimization']
Performance,"## Description; This PR aims to improve the performance of electric field integrals for multiple; coordinates. These are needed, e.g., in EFP and Polarizable Embedding (PE, #1401) calculations, where the; integrals need to be evaluated at all sites in the environment. For large environments, the electric field integrals can become the bottleneck of the calculation. The code I've already implemented is quite ugly and mainly serves as a proof of principle.; Exposure to the Python layer is also not well done at the moment, but it made testing; super easy. In my current [test script](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. Tasks the implementation enables:; - compute field integrals on multiple points; - contract the integrals with a density matrix (for expectation values of the electric field at all points); - contract the integrals with a dipole moment (for building the induction operator for PE/EFP). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] hackish, preliminary version (proof of principle); - [x] cleanup `mintshelper` etc.; - [x] proper naming of new functions. ## Checklist; - [x] Tests added for any new features (`pytests/test_elec_fields.py`); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671:44,perform,performance,44,https://psicode.org,https://github.com/psi4/psi4/pull/1671,2,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499:1465,optimiz,optimizations,1465,https://psicode.org,https://github.com/psi4/psi4/pull/1499,1,['optimiz'],['optimizations']
Performance,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:578,optimiz,optimizations,578,https://psicode.org,https://github.com/psi4/psi4/pull/2039,1,['optimiz'],['optimizations']
Performance,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:248,Optimiz,Optimization,248,https://psicode.org,https://github.com/psi4/psi4/pull/2336,2,"['Optimiz', 'perform']","['Optimization', 'performance']"
Performance,"## Description; This PR is a companion to https://github.com/psi4/psi4/pull/2933. The goal of https://github.com/psi4/psi4/pull/2933 is to completely eliminate the `ERISieve` class, for reasons explained there. However, it turns out that eliminating `ERISieve` requires fiddling with the v2rdm_casscf plugin, as well, since it also uses `ERISieve`. This PR is meant to be a deprecation of the `ERISieve` class that will show up in v1.8 in the meantime, in case `ERISieve` isn't fully removed by then. ## User API & Changelog headlines; - [X] Deprecates the `ERISieve` class. ## Dev notes & details; - [X] Fully deprecates the `ERISieve` class C++-side by tagging it with the deprecated attribute.; - [X] Deprecates the `ERISieve` class Python-side by creating helper functions for the Python-facing `ERISieve` functions that warn about deprecation. ## Questions; - [x] Is `PSI_DEPRECATED` the preferred mechanism by which to perform this deprecation?; - [X] Assuming the answer to the first question is ""yes"", are there any other functions in `ERISieve` that should be tagged? I chose specifically the user-facing functions.; - [x] I _loathe_ having to use a global variable for the Python-side helper functions. But, unbelievably, it is what I considered the best one I could think of. I would be very happy to hear out alternative suggestions.; - [ ] Using the `PSI_API` and `PSI_DEPRECATED` macros together to tag the `ERISieve` class cause the compiler to complain. On further exploration, replacing `PSI_DEPRECATED` with its textual definition seems to work fine. Is this an acceptable solution?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935:925,perform,perform,925,https://psicode.org,https://github.com/psi4/psi4/pull/2935,1,['perform'],['perform']
Performance,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:68,cache,cache,68,https://psicode.org,https://github.com/psi4/psi4/pull/1233,3,"['Cache', 'bottleneck', 'cache']","['Cache', 'bottleneck', 'cache']"
Performance,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:837,perform,performs,837,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['perform'],['performs']
Performance,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:902,perform,performing,902,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['perform'],['performing']
Performance,"## Description; This PR is the start of a two-part mini-project regarding the two DFJK algorithms present in Psi4 - MemDFJK and DiskDFJK. This first PR handles some changes to MemDFJK, while the next PR in this project will handle the same changes to DiskDFJK. So, what are the changes? MemDFJK and DiskDFJK hold a rather interesting property. Each of them is actually a combination of two sub-algorithms - one sub-algorithm which is optimized for storing ERIs in memory, and the other sub-algorithm which is optimized for storing ERIs on disk. This, in total, leads to a potential combination of 4 algorithms that can be utilized when one sets SCF_TYPE to DF. Now, one can set SCF_TYPE to either MEM_DF to DISK_DF to use MemDFJK or DIskDFJK, respectively. However, one cannot explicitly use a keyword to control whether MemDFJK or DiskDFJK uses its corresponding in-core or out-of-core sub-algorithm. Which sub-algorithm is used, is entirely dictated by the amount of memory allocated to Psi4 compared to the amount of memory needed to store ERIs. This PR project seeks to remedy the aforementioned issue by implementing exactly such a keyword for both MemDFJK and DiskDFJK, to control whether they use their in-core or out-of-core sub-algorithms. The new keyword is FORCE_MEM, which can take three options. FORCE_MEM=AUTO (the default) maintains the previous behavior, in which a sub-algorithm is selected based on user-supplied memory. FORCE_MEM=NO_INCORE forces the DF algorithm to use its out-of-core sub-algorithm, even if enough memory is given to run the calculation in-core. Finally, FORCE_MEM=FORCE_INCORE forces the DF algorithm to run its in-core sub-algorithm, and causes the calculation to throw an exception if not enough memory is given to Psi4 to utilize the in-core sub-algorithm. So why, exactly, do we want this? In truth, this is mostly a debug and expert option. The entire reason I started this PR project is actually because the lack of control over in-core vs. out-of-core DF ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2848:434,optimiz,optimized,434,https://psicode.org,https://github.com/psi4/psi4/pull/2848,2,['optimiz'],['optimized']
Performance,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:782,perform,performance,782,https://psicode.org,https://github.com/psi4/psi4/pull/2529,1,['perform'],['performance']
Performance,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:771,perform,performance,771,https://psicode.org,https://github.com/psi4/psi4/pull/2079,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:349,load,loaded,349,https://psicode.org,https://github.com/psi4/psi4/pull/1344,1,['load'],['loaded']
Performance,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:874,optimiz,optimized,874,https://psicode.org,https://github.com/psi4/psi4/pull/2381,2,['optimiz'],['optimized']
Performance,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221:377,perform,performed,377,https://psicode.org,https://github.com/psi4/psi4/pull/2221,1,['perform'],['performed']
Performance,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946:1051,perform,performance,1051,https://psicode.org,https://github.com/psi4/psi4/pull/1946,2,['perform'],['performance']
Performance,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:124,perform,performance,124,https://psicode.org,https://github.com/psi4/psi4/pull/1922,1,['perform'],['performance']
Performance,"## Description; This PR was motivated by a comment by @andyj10224 in PR https://github.com/psi4/psi4/pull/3150, pointing out that implementing method-specific setters/getters in `SplitJK` could more elegantly and sensibly be performed via downcasting. While the comment in that PR addressed knobs specific to `snLinK`, it is also applicable to other methods within the CompositeJK framework. This PR fixes that, replacing all instances of method-specific setters/getters in the base `SplitJK` class with downcasting to call the needed function at the derived-class level. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Renames `COSK::set_COSX_grid` and `COSK::get_COSX_grid` functions to `COSK::set_grid` and `COSK::get_grid`, respectively.; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions, localizing their presence to the `COSK` class.; - [X] Replaces utilizations of the above with usage of downcasting in the `CompositeJK::set_COSX_grid` and `CompositeJK::get_COSX_grid` functions. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3183:225,perform,performed,225,https://psicode.org,https://github.com/psi4/psi4/pull/3183,1,['perform'],['performed']
Performance,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:477,perform,performance,477,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['perform'],['performance']
Performance,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:111,optimiz,optimized,111,https://psicode.org,https://github.com/psi4/psi4/pull/1539,3,['optimiz'],['optimized']
Performance,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:241,queue,queue,241,https://psicode.org,https://github.com/psi4/psi4/pull/1527,1,['queue'],['queue']
Performance,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:467,optimiz,optimization,467,https://psicode.org,https://github.com/psi4/psi4/pull/591,1,['optimiz'],['optimization']
Performance,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:967,perform,perform,967,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['perform'],['perform']
Performance,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1312:366,perform,perform,366,https://psicode.org,https://github.com/psi4/psi4/pull/1312,1,['perform'],['perform']
Performance,"## Description; This is it. It's here. This PR is the initial implementation of the CompositeJK framework, the culmination of many, MANY of the JK-related PRs that are either in progress, or have been added to Psi4 already. Many methods have been added to Psi4's JK class which enable utilization of algorithms that build J or K separately to improve performance. The ones in Psi4 as of now are the JK subclasses DFJLinK and DFJCOSK, which, between the two, contain integral-direct density-fitted J construction, the Linear Exchange method (LinK), and the Chain-of-Spheres Exchange method (COSX). Further ones, such as the Continuous Fast Multipole Method (CFMM), are planned for the future, and even more (e.g., J-Engine, Local DF methods) exist beyond the work done in Psi4 for the past year. The problem is, Psi4's JK class does not have a framework that truly supports the existence of these separate J and K algorithms. DFJLinK and DFJCOSK work for now, given the low number of separate J and K algorithms current in Psi4. But, as more separate J and K algorithms are added to Psi4, the number of JK subclasses will skyrocket, assuming every combination of separate J and separate K algorithm is stored in its own JK subclass. This will lead to a nasty problem with code duplication, not even discussing the pollution of the JK hierarchy that would result. Thus, for continued research into separate J and K construction algorithms, a proper framework for supporting such algorithms is paramount. CompositeJK is that framework. CompositeJK is a single JK subclass which enables the combination and execution of any separate J and K build algorithm available in Psi4. CompositeJK can enable this without duplication of separate build algorithms across different subclasses. Additionally, CompositeJK is designed to enable simple expansion of itself, enabling the easy addition of new separate J and K builds to Psi4 with minimal programming issues. The current PR is the first implementation of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:351,perform,performance,351,https://psicode.org,https://github.com/psi4/psi4/pull/2833,1,['perform'],['performance']
Performance,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:475,optimiz,optimized,475,https://psicode.org,https://github.com/psi4/psi4/pull/1648,1,['optimiz'],['optimized']
Performance,"## Description; This is part of *Psi4* porting to Windows (#933). A templated class declaration and implementation has to be in the same translation unit. That is not a case for `psi::MaxIterationsExceeded` and `psi::ConvergenceError`. It is hacked by using template specialisation: `template <> ConvergenceError<int>`. However, it does not work with `MSVC` linker for optimized builds:; ```; [1262/1262] Linking CXX shared library src\core.cp36-win_amd64.pyd; FAILED: src/core.cp36-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && C:\tools\miniconda3\Library\bin\cmake.exe -E vs_link_dll --intdir=src\CMakeFiles\core.dir --manifests -- C:\PROGRA~2\MI0E91~1.0\VC\bin\X86_AM~1\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj src\CMakeFiles\core.dir\python_data_type.cc.obj src\CMakeFiles\core.dir\core.cc.obj /out:src\core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1419:369,optimiz,optimized,369,https://psicode.org,https://github.com/psi4/psi4/pull/1419,1,['optimiz'],['optimized']
Performance,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504:151,perform,performance,151,https://psicode.org,https://github.com/psi4/psi4/pull/2504,1,['perform'],['performance']
Performance,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:411,queue,queue,411,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['queue'],['queue']
Performance,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742:295,optimiz,optimized,295,https://psicode.org,https://github.com/psi4/psi4/pull/742,1,['optimiz'],['optimized']
Performance,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:265,perform,performance,265,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['perform'],['performance']
Performance,"## Description; Through tests of the `COSX` code, we have discovered numerical instabilities in larger systems, leading to slow convergence for later iterations. We discovered that the version of incremental Fock currently in `COSX` performs `incfock` every iteration, and does not include stability features included in the Incremental Fock PR from #2155 (i.e. Shutting it off every few iterations (resets) as well as shutting it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:233,perform,performs,233,https://psicode.org,https://github.com/psi4/psi4/pull/2682,1,['perform'],['performs']
Performance,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1889:162,load,loader,162,https://psicode.org,https://github.com/psi4/psi4/pull/1889,1,['load'],['loader']
Performance,## Description; Trying out a different strategy to get the cache working. Supposedly this gets the cache warmed up for all the build lanes before they start. See https://docs.travis-ci.com/user/build-stages/warm-cache/. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1538:59,cache,cache,59,https://psicode.org,https://github.com/psi4/psi4/pull/1538,3,['cache'],['cache']
Performance,"## Description; Two bug fixes. First is wrong projected energy change in P-RFO transition state optimization.; Second, is an i/o error that occured because the file1 was not always deleted when the ""dynamic level"" changed. Default behavior should be unaffected.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; Should resolve issue #789 ; ; ## Questions; None; ## Status; Should be ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798:96,optimiz,optimization,96,https://psicode.org,https://github.com/psi4/psi4/pull/798,1,['optimiz'],['optimization']
Performance,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359:701,perform,perform,701,https://psicode.org,https://github.com/psi4/psi4/pull/2359,1,['perform'],['perform']
Performance,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988:191,optimiz,optimization,191,https://psicode.org,https://github.com/psi4/psi4/pull/988,1,['optimiz'],['optimization']
Performance,"## Description; We often have PRs held up because CI needs fixing. Then all the ""broken"" PRs have to rebase or hit the update button (which means their remotes are out-of-sync with the local branches). The beta GH merge queue might help this, since PRs are built on top of their predecessor, so a CI fix PR can be inserted at the head of the queue. This PR does hopefully the prep work needed and described in:; Following directions at https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:220,queue,queue,220,https://psicode.org,https://github.com/psi4/psi4/pull/2922,3,['queue'],['queue']
Performance,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092:92,load,load,92,https://psicode.org,https://github.com/psi4/psi4/pull/2092,2,['load'],"['load', 'loading']"
Performance,"## Description; `BlockOPoints` performs additional pruning but the result is never checked. We recently hit a case where this pruning resulted in a `BlockOPoints` object with zero points. This would cause a segfault here: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L262 because `ncols` would be zero. Adds a check to `OctreeGridBlocker` where the list of `BlockOPoints` is populated, if the number of points is zero then don't add it to the list. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) All DFT test cases pass on my machine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1525:31,perform,performs,31,https://psicode.org,https://github.com/psi4/psi4/pull/1525,1,['perform'],['performs']
Performance,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1449:59,load,load,59,https://psicode.org,https://github.com/psi4/psi4/pull/1449,1,['load'],['load']
Performance,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034:650,optimiz,optimizer,650,https://psicode.org,https://github.com/psi4/psi4/pull/2034,1,['optimiz'],['optimizer']
Performance,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003:565,perform,performance,565,https://psicode.org,https://github.com/psi4/psi4/pull/2003,1,['perform'],['performance']
Performance,## Description; misc. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] one more nix py35; - [x] try to get around below in https://lgtm.com/projects/g/psi4/psi4/logs/languages/lang:cpp. ```; [2019-03-04 21:34:07] [build] Scanning dependencies of target libxc_external; [2019-03-04 21:34:07] [build] [ 2%] Creating directories for 'libxc_external'; [2019-03-04 21:34:07] [build] [ 4%] Performing download step (git clone) for 'libxc_external'; [2019-03-04 21:34:07] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:10] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:10] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:10] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:11] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:12] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:12] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:13] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:13] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:13] [build] -- Had to git clone more than once:; [2019-03-04 21:34:13] [build] 3 times.; [2019-03-04 21:34:13] [build] CMake Error at /opt/src/_lgtm_build_dir/external/upstream/libxc/libxc_external-prefix/tmp/libxc_external-gitclone.cmake:66 (message):; [2019-03-04 21:34:13] [build] Failed to clone repository: 'https://gitlab.com/libxc/libxc.git'; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran quicktests from libxc tarball. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1567:433,Perform,Performing,433,https://psicode.org,https://github.com/psi4/psi4/pull/1567,1,['Perform'],['Performing']
Performance,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:506,load,loading,506,https://psicode.org,https://github.com/psi4/psi4/pull/726,1,['load'],['loading']
Performance,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980:129,optimiz,optimized,129,https://psicode.org,https://github.com/psi4/psi4/pull/1980,1,['optimiz'],['optimized']
Performance,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:123,perform,performs,123,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['perform'],['performs']
Performance,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug disabling non-orbital optimized DCT with spin restriction. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] l. 55 keeps the alpha and beta orbitals pointing to the same object.; - [x] l. 142 is the central bugfix. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2860:207,optimiz,optimized,207,https://psicode.org,https://github.com/psi4/psi4/pull/2860,1,['optimiz'],['optimized']
Performance,"### System Specs:; ```; OS: MacOS Monterey 12.5.1; 2,6 GHz 6-Core Intel Core i7; 32 GB 2667 MHz DDR4; IDE: PyCharm 2022.3.2 (Community Edition); ```. ### Software Specs:; ```; Virtual Env: Conda env ; Conda version: 23.1.0; Python version: 3.6.13 and 3.7.16 (same error on both versions); PSI4 version: 1.5+e9f4d6d ; PSI4 build: py37ha809fef_0 ; Installed PSI4 using: conda install -c psi4 psi4; ```. ### Minimum reproducible example script:; ```; import psi4; psi4.set_memory('500 MB'); h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); print(psi4.energy('scf/cc-pvdz')); ```. ### Complete traceback :; ```; /Users/vandanrevanur/anaconda3/envs/psi4_env_36/bin/python /Users/vandanrevanur/personal/codes/chemistry/psi4_stuff/psi4_testing.py . Memory set to 476.837 MiB by Python driver. Scratch directory: /tmp/. Scratch directory: /tmp/. *** tstart() called on Temps-MacBook-Pro.local; *** at Mon Apr 24 13:23:21 2023. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:935,Load,Loading,935,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['Load'],['Loading']
Performance,"##; ########################## Don't Edit Below This Line ##########################; ################################################################################. # Some general Psi4 settings; set {; freeze_core True # only treat valence electrons in expensive correlated calculations; scf_type df # Use density fitting with the HF part of the calculation; mp2_type df # Use density fitting with the MP2 part of the calculation; cc_type df # for coupled cluster calculations, use the fast density fitted code; pcg_convergence 9 # helps w/ coupled cluster accuracy; e_convergence 11 # Set the energy convergence a little more stringent; }. gradient(geom_opt_method); ```; ------------------. The last handful of lines for the failing output file are included below. The difference between a failed and a successful output file appears to be the last two lines that are bolded (the ones with DFHelper and in-core AOs):. ------------------; ```; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (AUG-CC-PV(Q+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry O line 332 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs; atoms 2, 9, 11, 14, 16-19, 22-23 entry H line 30 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs; atoms 3-8, 10, 12-13, 15, 20-21 entry C line 184 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; RMP2 Wavefunction, 8 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. => Auxiliary Basis Set <=. Basis Set: (AUG-CC-PV(Q+D)Z AUX); Blend: AUG-CC-PVQZ-RI; Number of shells: 668; Number of basis functions: 2984; Number of Cart",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3030:3006,Load,Loading,3006,https://psicode.org,https://github.com/psi4/psi4/issues/3030,1,['Load'],['Loading']
Performance,"(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on broken tests, and confirm the test suite is clean. Pinging the usual suspects: @loriab, especially @dgasmith for PCG, and @jturney. I think Jet is sick today, so a different third reviewer would be welcome. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Debugged HF MO hessian based orbital step; - [x] ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:1406,optimiz,optimized,1406,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['optimiz'],['optimized']
Performance,(from http://forum.psicode.org/t/scaled-opposite-spin-sos-not-changing-orbital-optimized-mp2-omp2/1596); It appears that the spin-scaled OMP2 methods like `sos-omp2` do not apply spin-scaling to the MP-L functional. Instead spin-scaling is done in a post-scf fashion on the `omp2` results.; This is not necessarily what one would expect from the method name. Pinging both @bozkaya and @JonathonMisiewicz ; Could you have a look please? What is suppose to happen?. Test input:; [test.txt](https://github.com/psi4/psi4/files/3825609/test.txt),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1751:79,optimiz,optimized-,79,https://psicode.org,https://github.com/psi4/psi4/issues/1751,1,['optimiz'],['optimized-']
Performance,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:504,optimiz,optimization,504,https://psicode.org,https://github.com/psi4/psi4/issues/1768,3,"['Optimiz', 'Perform', 'optimiz']","['Optimizations', 'Performance', 'optimization']"
Performance,") = 3.122888	 178.928328; 	 D(75,73,72,81) = -0.019333	 -1.107720; 	 D(75,77,79,80) = 3.131087	 179.398052; 	 D(75,77,79,81) = -0.015352	 -0.879608; 	 D(76,75,77,78) = -0.007210	 -0.413100; 	 D(76,75,77,79) = 3.133177	 179.517791; 	 D(77,79,81,82) = 3.133788	 179.552810; 	 D(78,77,79,80) = -0.011717	 -0.671362; 	 D(78,77,79,81) = 3.125029	 179.050978; 	 D(80,79,81,82) = -0.012627	 -0.723483; 	 R(1,57) = 8.611430	 4.556972; 	 R(1,59) = 8.002134	 4.234547; 	 R(1,61) = 9.891833	 5.234532; 	 R(3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.335710 0.090136 63.980301 66.316011; 	 2 R(1,3) = 2.326476 0.109678 63.375593 65.702069; 	 3 R(1,4)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:18209,optimiz,optimization,18209,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['optimiz'],['optimization']
Performance,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:247,Optimiz,Optimization,247,https://psicode.org,https://github.com/psi4/psi4/issues/800,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,", '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true':",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:17488,optimiz,optimized,17488,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,", M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1\u20135 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-V <= . wB97M-V Hyb-GGA Exchange-Correlation Functional. N. Mardirossian and M. Head-Gordon., J. Chem. Phys. 144, 214110 (2016) (10.1063/1.4952647). Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0000E+00; VV10 C = 1.0000E-02. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 281815; Total Blocks = 2159; Max Points = 256; Max Functions = 305; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 4, 6 entry O line 318 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2-3, 9-13 entry H line 18 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 5, 7-8 entry C line 198 file .../share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:6480,Load,Loading,6480,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Load'],['Loading']
Performance,", haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13413,optimiz,optimized,13413,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,", so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. Composite JK algorithms commonly implemented a density-based screening within them, as part of their formulation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:1203,perform,performing,1203,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['perform'],['performing']
Performance,"- Look at the procedures dictionary https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/driver.py#L45 . These are the things you can stick into `energy(name)`, `gradient`, etc.; - Look at the docstring tables https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/driver.py#L264 in the energy, optimize, and frequency functions. Those tables aren't so neatly formatted because I'm picky. They're neatly formatted because Sphinx is picky.; - Look at the nice docs those docstrings turn into http://psicode.org/psi4manual/master/opt.html#table-grad-gen . Each line has links to the manual section where you can find more info on the theory.; - Note that there are now a lot fewer entries in the procedures dictionary than there are in the docstring table. The procedures dict is right, and the docstring table is out of date.; - Your mission is to update the docstring tables and the manual links in them to be consistent with the procedures dict and with the table at http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations; - If you're at GaTech, there's Sphinx at `/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv/bin/sphinx-build`. Otherwise, find a sphinx-build >=1.1 and <1.4 .; - [ ] eliminate from the reST tables in driver.py any methods that aren't in the procedures dict. This will mostly be df- and cd- methods; - [ ] for methods in http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations table, add ""[details]"" refs to the approriate part of the table. ""mp2"" is already done, as an example.; - [ ] for all methods, check that the ""[manual]"" link is pointing to the best part of the docs. You can add a `.. _`sec:seclabel`:` anywhere you need in the rst docs to make a more-specific link.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/249:337,optimiz,optimize,337,https://psicode.org,https://github.com/psi4/psi4/issues/249,1,['optimiz'],['optimize']
Performance,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:503,optimiz,optimization-failure,503,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['optimiz'],['optimization-failure']
Performance,"--------------------------------------------------------- ~. # Second system, a not-right by eye but still plausible geometry, oddz. molecule oddz {; C; H 1 1.792; H 1 1.792 2 59.4; H 1 1.089 2 136.7 3 -127.3; F 1 2.089 2 101.7 4 -135.9; }. # reference start NRE, E, G for this geometry. odd_nre_start = 25.7790014493 # Q-Chem; odd_e_start = -139.1749807824 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; odd_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:6219,optimiz,optimized,6219,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimized']
Performance,"---------------------------------------------; molecule {; C -3.385689447328 -1.019909032022 -1.749453831407 ; H -4.303799447328 -1.298729032022 -2.222123831407; C -2.336629447328 -0.701769032022 -1.209473831407 ; C -1.177199447328 -0.351139032022 -0.612463831407 ; C -0.119169447328 -0.031909032022 -0.066563831407 ; C 1.038150552672 0.314670967978 0.533526168593 ; C 2.088230552672 0.627260967978 1.081186168593; C 3.329350552672 0.995630967978 1.729406168593 ; H 3.940040552672 1.640920967978 1.078936168593 ; H 3.139820552672 1.543830967978 2.665426168593 ; H 3.926960552672 0.104360967978 1.976426168593 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:19:36 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3-8 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 2, 9-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.000000; ga = 3.000000; gc = 2.000000; wf = 6.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:17889,Load,Loading,17889,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance,"------------------------------------------; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -0.694370796492 ; H 4.393828194545 0.864729635345 0.797449203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:17:28 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 9 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 7-8, 10-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.000000; ga = 3.000000; gc = 2.000000; wf = 6.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full poin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:5486,Load,Loading,5486,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance,"-----------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:1986,perform,perform,1986,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['perform'],['perform']
Performance,"-----------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtran",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:1517,optimiz,optimization,1517,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['optimiz'],['optimization']
Performance,"-------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:6329,Load,Loading,6329,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Load'],['Loading']
Performance,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:2733,optimiz,optimized,2733,https://psicode.org,https://github.com/psi4/psi4/issues/1126,2,['optimiz'],"['optimize', 'optimized']"
Performance,"-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 3 -232.08477734 -6.09e-08 * 2.64e-05 * 7.35e-06 o 5.46e-05 * 1.76e-05 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 3 steps) ****; ```. If I manually specify the default:; ```; set {; g_convergence QCHEM; }; ```; the optimization finishes prematurely.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:2516,optimiz,optimization,2516,https://psicode.org,https://github.com/psi4/psi4/issues/1947,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,-86.44756575789327 -9.86193e+00 1.45852e+00; total time = 5 seconds = 0.08 minutes		 |	 @DF-RHF iter 55: -76.67102843314724 9.77654e+00 6.54797e+00; Constructing Basis Sets for SAPT...					 |	 @DF-RHF iter 56: -76.14089910093142 5.30129e-01 9.61054e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 57: -86.01797407418083 -9.87707e+00 3.32711e+00; Name: DEF2-QZVPP-RI							 |	 @DF-RHF iter 58: -85.08445334159371 9.33521e-01 4.87812e+00; Role: RIFIT								 |	 @DF-RHF iter 59: -73.84912066572218 1.12353e+01 7.38988e+00; Keyword: DF_BASIS_SAPT						 |	 @DF-RHF iter 60: -73.64413189685598 2.04989e-01 9.80522e+00; atoms 1-2 entry H line 24 file /Users/runner/work/psi4	 |	 @DF-RHF iter 61: -86.70368775982897 -1.30596e+01 2.11859e+00; atoms 3 entry O line 406 file /Users/runner/work/psi4	 |	 @DF-RHF iter 62: -58.03773298700472 2.86660e+01 1.34869e+01; atoms 4 entry CA line 1382 file /Users/runner/work/psi4	 |	 @DF-RHF iter 63: -70.60093508339824 -1.25632e+01 5.80309e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 64: -73.83035588197933 -3.22942e+00 5.03538e+00; Name: (LANL2DZ AUX)							 |	 @DF-RHF iter 65: -81.54129188728777 -7.71094e+00 5.28840e+00; Role: JKFIT								 |	 @DF-RHF iter 66: -85.99899600012829 -4.45770e+00 1.45148e+00; Keyword: DF_BASIS_ELST						 |	 @DF-RHF iter 67: -87.65325888962984 -1.65426e+00 1.75144e+00; atoms 1-2 entry H line 18 file /Users/runner/work/psi4	 |	 @DF-RHF iter 68: -77.01444051749257 1.06388e+01 8.05869e+00; atoms 3 entry O line 318 file /Users/runner/work/psi4	 |	 @DF-RHF iter 69: 25.43262340423360 1.02447e+02 5.73340e+01; atoms 4 entry CA line 1250 file /Users/runner/work/psi4	 |	 @DF-RHF iter 70: -65.40682466091306 -9.08394e+01 1.77666e+01; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//				 |	 @DF-RHF iter 71: -79.84391768105031 -1.44371e+01 6.15679e+00; // SAPT0 //				 |	 @DF-RHF iter 72: -78.19401202879601 1.64991e+00 3.40911e+00; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//				 |	 @DF-RHF iter 73: -86.93062720559368 -8.73662e+00 1.81546e+00,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:13724,Load,Loading,13724,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Load'],['Loading']
Performance,"-; Psi4Error; Memory Usage: 4008.0703125 MB; --; memory use before geom opt; Memory Usage: 4008.0859375 MB; memory use after geom opt; Memory Usage: 4008.0859375 MB; --; memory use before E wfn; Memory Usage: 4008.09765625 MB; --; memory use after E wfn; Memory Usage: 4141.6328125 MB; --; memory use before geom opt; Memory Usage: 4038.51953125 MB; memory use after geom opt; Memory Usage: 4038.51953125 MB; --; memory use before E wfn; Memory Usage: 4038.5390625 MB; --; memory use after E wfn; Memory Usage: 4223.07421875 MB; --; Psi4Error; Memory Usage: 4168.16015625 MB; --; memory use before geom opt; Memory Usage: 4168.171875 MB; memory use after geom opt; Memory Usage: 4168.171875 MB; --; ````. At the last point the calculation then hangs indefinitely, with 5gb memory set on the whole node. Although the memory usage does not completely go up at every step, the memory accumulates throughout the job. Psi4Errors printed above when a particular molecule fails to optimize, leading to the calculation to skip to the next molecule Other job input parameters are 1 node, 16 cores. . I have attempted to produce a minimal example of the context I running my program and where the memory leaks occur. ```; from openff.recharge.grids import LatticeGridSettings, GridGenerator; import psutil; import psi4; from openff.toolkit.topology import Molecule; from psi4.core import GeometryUnits; from openff.units.elements import SYMBOLS; from qcelemental.models.common_models import Model; from qcelemental.models import Molecule as QCMolecule; from qcelemental.models.procedures import OptimizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:4425,optimiz,optimize,4425,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['optimiz'],['optimize']
Performance,".000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5597,Load,Loading,5597,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance,".398322700000 -0.532419600000 -1.585326900000; H 3.622375400000 -0.006874700000 -3.674767900000; H 3.573575400000 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:5362,load,loads,5362,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['load'],['loads']
Performance,".3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in `-c psi4/label/dev` for now, not `-c psi4`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:3227,optimiz,optimizing,3227,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['optimiz'],['optimizing']
Performance,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:14412,optimiz,optimized,14412,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,".html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Tuesday, 26 September 2023 11:04AM. Process ID: 419; Host: ...; PSIDATADIR: ...; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); --------------------------------------------------------------------------. Scratch directory: /tmp/. *** tstart() called on ...; *** at Tue Sep 26 11:04:21 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1, 4, 6 entry O line 218 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 2-3, 9-13 entry H line 14 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 5, 7-8 entry C line 144 file .../share/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(O) -2.901500000000 2.033900000000 4.065300000000 15.994914619570; Gh(H) -3.022280000000 2.578500000000 4.875900000000 1.007825032230; Gh(H) -2.166320000000 1.418620000000 4.287130000000 1.007825032230; O 0.000000000000 0.000000000000 0.0000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:3089,Load,Loading,3089,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Load'],['Loading']
Performance,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4498,perform,performance,4498,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['perform'],['performance']
Performance,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:8294,perform,perform,8294,https://psicode.org,https://github.com/psi4/psi4/issues/1897,2,['perform'],['perform']
Performance,"/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (STO-3G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 318 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-3 entry H line 18 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I add `mp.set_start_method('spawn', force=True)`, I can get this to work - or I can run this script on macOS, for which `mp` uses `spawn` by default. This code also runs if I uncomment `proc.run()`, which runs the function in the same process instead of creating a new process. . Any advice here?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:2427,Load,Loading,2427,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Load'],['Loading']
Performance,"0. The current issue is that COSX does not work with certain grid configurations - specifically, it does not work with grids that have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:1154,perform,performed,1154,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['perform'],['performed']
Performance,"00 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 103, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/damasj02/softwa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:3523,optimiz,optimize,3523,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['optimiz'],['optimize']
Performance,"00 2.8202800000 ; Na 0.0000000000 14.1014000000 2.8202800000 ; Cl 2.8202800000 14.1014000000 2.8202800000 ; Na 2.8202800000 5.6405600000 2.8202800000 ; Na 0.0000000000 8.4608400000 2.8202800000 ; Cl 2.8202800000 8.4608400000 2.8202800000 ; Na 2.8202800000 0.0000000000 2.8202800000 ; Na 0.0000000000 2.8202800000 2.8202800000 ; Cl 2.8202800000 2.8202800000 2.8202800000 ; """""". set maxiter 1000; set fail_on_maxiter false. set scf{; #soscf true; #soscf_max_iter 100; #basis_guess true; #damping_percentage 20; }. set optking frozen_cartesian $freeze_list. set cubeprop_tasks ['frontier_orbitals']; set cubic_grid_overage 10; E, wfn = optimize('b3lyp-d3', return_wfn=True) # psicode.org/psi4manual/master/opt.html; cubeprop(wfn)--------------------------------------------------------------------------. Memory set to 23.283 GiB by Python driver. Scratch directory: PATH; gradient() will perform analytic gradient computation. *** tstart() called on Logray; *** at Tue Aug 30 11:57:29 2022. => Loading Basis Set <=. Name: 6-31G; Role: ORBITAL; Keyword: BASIS; atoms 1-4, 9-12, 21-24, 33-34 entry H line 26 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 87 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs . => B3LYP-D3: Empirical Dispersion <=. Grimme's -D3 (zero-damping) Dispersion Correction; Grimme S.; Antony J.; Ehrlich S.; Krieg H. (2010), J. Chem. Phys., 132: 154104. s6 = 1.000000; s8 = 1.703000; sr6 = 1.261000; alpha6 = 14.000000; sr8 = 1.000000. ---------------------------------------------------------; SCF; by Justin Tu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:9126,Load,Loading,9126,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Load'],['Loading']
Performance,"00 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 1 0 7 0; B2u 8 0 1 0 7 0; B3u 8 0 1 0 7 0. DOCC = 2 0 0 0 0 1 1 1; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 1 1 1; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 7 7 7; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -99.45080702230226. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:9591,Cache,Cache,9591,https://psicode.org,https://github.com/psi4/psi4/issues/204,2,['Cache'],['Cache']
Performance,"000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3641,Optimiz,Optimizer,3641,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Optimiz'],['Optimizer']
Performance,"00000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/pyt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:1755,optimiz,optimized,1755,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"00005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2928,optimiz,optimized,2928,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimized']
Performance,"00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; core id : 7; cpu cores : 8; apicid : 46; initial apicid : 46; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm arat pln pts md_clear flush_l1d; bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit; bogomips : 5194.34; clflush size : 64; cache_alignment : 64; address sizes : 46 bits physical, 48 bits virtual; power management:; ```. </details>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:13427,cache,cache,13427,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['cache'],['cache']
Performance,"00082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, thi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:2119,optimiz,optimized,2119,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0225E-02; VV10 C = 7.4505E-01. => Molecular Quadrature <=. Radial Scheme = EM; Pruning Scheme = ROBUST; Pruning Type = REGION; Nuclear Scheme = SBECKE. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 590; Total Points = 912458; Total Blocks = 6145; Max Points = 256; Max Functions = 640; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 13-18 entry C line 198 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-12, 19-24 entry H line 18 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:10225,Cache,Cache,10225,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Cache'],['Cache']
Performance,"00554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3020,optimiz,optimized,3020,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"00; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1123,optimiz,optimized,1123,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,"['optimiz', 'queue']","['optimized', 'queue']"
Performance,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:6361,load,loads,6361,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['load'],['loads']
Performance,"02aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308; C -0.013127 1.729838 -1.697308; H 1.809881 0.565636 -1.697308; H 0.620767 -1.623659 -1.697309; H -1.869768 -1.688580 -1.697309; H -3.171240 0.435884 -1.697309; H 0.508409 2.690100 -1.697308; C -2.142628 2.887174 -1.697308; N -2.730222 3.885021 -1.697308; symmetry c1; }. set optking {; frag_mode multi; }; set basis cc-pVDZ; optimize('blyp-d3bj'); ```; Running the same job with ""frag_mode single"", or with ""frag_mode multi"" with ""opt_coordinates cartesian"", ran for multiple opt steps (until I killed it) without giving a seg fault. I'll dig further but suspect others might have more of an idea of where to look.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680:3394,optimiz,optimize,3394,https://psicode.org,https://github.com/psi4/psi4/issues/680,1,['optimiz'],['optimize']
Performance,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094:1755,optimiz,optimize,1755,https://psicode.org,https://github.com/psi4/psi4/issues/1094,3,['optimiz'],['optimize']
Performance,"06.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 9 10:48:21 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 232. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986820. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:15334,Cache,Cache,15334,https://psicode.org,https://github.com/psi4/psi4/issues/61,2,['Cache'],['Cache']
Performance,0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1318,Perform,Performing,1318,https://psicode.org,https://github.com/psi4/psi4/issues/36,4,['Perform'],['Performing']
Performance,"0e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050244575 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973838037 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227745933 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925370471 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208625948809 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139866705314 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682110801427 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483791",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:5175,Cache,Cache,5175,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Cache'],['Cache']
Performance,"0e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483788",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:6548,Cache,Cache,6548,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Cache'],['Cache']
Performance,"12 0.000000; }. set basis def2-sv(p). optimize('pbe0'). With the lastest numpy 1.16.3 from conda, I get ""; Traceback (most recent call last):; File ""/home/psi4/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 691, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2064, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1289, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 156, in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/npyio.py"", line 447, in load; pickle_kwargs=pickle_kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/format.py"", line 692, in read_array; raise ValueError(""Object arrays cannot be loaded when "". ValueError: Object arrays cannot be loaded when allow_pickle=False; "". When I downgrade to 1.16.2, I get no error. Release note of numpy 1.16.3: ; ""The most noticeable change in this release is that unpickling object arrays; when loading *.npy or *.npz files now requires an explicit opt-in.; This backwards incompatible change was made in response to; CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>_.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610:1371,load,load,1371,https://psicode.org,https://github.com/psi4/psi4/issues/1610,5,['load'],"['load', 'loaded', 'loading']"
Performance,"148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5111,optimiz,optimized,5111,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"1937559 -1.4112107502 0.6628195511; N	2.3821384470 -0.8016830488 0.6668723530; S	4.2544548310 -1.9352085140 0.7141164692; C	0.0280306717 -0.2718210489 0.2142030812; C	1.4218510657 0.1094955364 0.2323938153; C	-0.8935306288 0.6217951694 -0.3937996518; C	0.8749866134 2.2505177854 -0.7685419788; C	1.8279888898 1.3582013966 -0.2135637897; C	-0.4555887744 -1.4910996529 0.7799513422; C	-0.4434092186 1.8876824244 -0.8862861414; C	-2.2687193610 0.2375554697 -0.4984111660; C	-1.7875187142 -1.8176564012 0.6992850376; C	-2.7005499370 -0.9522869380 0.0312086031; H	1.2191387380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:1222,optimiz,optimize,1222,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['optimiz'],['optimize']
Performance,"2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""true"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap; ""pywrap-opt-sowreap"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat; Traceback (most recent call last):; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 127, in <module>; main(*sys.argv[1:]); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 106, in main; files_list,master_in,master_out= sowList(first_output); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 31, in sowList; master_in=the_tag+""-master.in""; UnboundLocalError: local variable 'the_tag' referenced before assignment; Performing finite difference calculations; 5 displacements needed ...Exit Status: infile ( 0 ); autotest ( None ); sowreap ( 1 ); overall ( 1 ); <end of output>; Test time = 0.90 sec; ----------------------------------------------------------; Test Failed.; ""pywrap-opt-sowreap"" end time: Feb 15 13:13 CET; ""pywrap-opt-sowreap"" time elapsed: 00:00:00; ----------------------------------------------------------; ```. I've saved the output of `sapt4` and `opt10` to https://gist.github.com/wpoely86/60885c5adec8dcc8b63b. Furthermore, `opt2` is flaky. It doesn't always pass. Most of the time but not always.; These tests where run on a dual socket Xeon E5-2660v3 (20 cores in total without HT) with icc/icpc 2016.1.150 + MKL 11.3.1.150.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:4500,Perform,Performing,4500,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['Perform'],['Performing']
Performance,"2.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:9181,optimiz,optimized,9181,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:3350,Load,Loading,3350,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['Load'],['Loading']
Performance,"274847835639 -3.351496142704; C 1.013099808976 -0.096716453452 -2.640334263532; C 1.529504298267 0.292928191105 -1.409192139229; C 2.494126536754 -0.467080983006 -0.560933641235; C 3.003582432090 -1.737924160834 -0.783889065036; C 2.769133637687 -2.598542901279 -1.856952991548; C 1.277514575629 1.516518268211 -0.750473230890; C 2.043031766314 1.530064287276 0.429834437874; C 2.781071200241 0.346831462421 0.547222303270; C 0.331279128018 2.597569873302 -1.170283396618; C -1.055809083241 2.619579374400 -0.505102826064; C -3.007822478580 1.467887750457 0.346313567353; C -2.737441971995 1.210386860246 1.823863198791; C -1.771682755626 -0.377549950855 3.288385929391; C -0.725219293291 -1.470001880969 3.265198353103; O -2.011738101654 -0.000473360001 1.946048595534; N -1.814457990750 1.476521947835 -0.495974028017; O -1.486124528571 3.658969974773 -0.022977929056; H 1.983643665259 -3.200384618921 -3.705961229953; H 0.718461117324 -1.345849367127 -4.303825324337; H 0.350907237427 0.616950149147 -3.119075116214; H 3.676140620880 -2.109282391465 -0.017487285463; H 3.272531113987 -3.555754086369 -1.807900216108; H 2.058943071980 2.349266204546 1.134368500502; H 3.472739721386 0.097519945506 1.336731400325; H 0.168474080806 2.547179744292 -2.248127020046; H 0.756093357555 3.571701649289 -0.937344979453; H -3.473888529556 2.443761502993 0.233969033713; H -3.678528703972 0.693841954810 -0.023021795736; H -3.683424826831 1.122758821689 2.369341272280; H -2.158587217937 2.040718408406 2.239661235900; H -1.397654842931 0.478282649094 3.862936033974; H -2.689164190718 -0.745525653670 3.760362229725; H -0.522908742059 -1.829437030547 4.270707232296; H -1.335460161411 0.599637097912 -0.637487324770; H 0.191838379615 -1.070755100110 2.832096282140; N -1.176303107524 -2.652929380092 2.505563226321; N -1.350778086421 -2.531724211116 1.296707152615; N -1.541968166301 -2.578278885168 0.192089082738; }; set_num_threads(12); set_memory(int(10.0e9)); set basis 6-311ppg_d_p_; optimize(""b3lyp"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32:2380,optimiz,optimize,2380,https://psicode.org,https://github.com/psi4/psi4/issues/32,1,['optimiz'],['optimize']
Performance,"3 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5423,optimiz,optimized,5423,https://psicode.org,https://github.com/psi4/psi4/issues/12,2,['optimiz'],['optimized']
Performance,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:1979,load,loading,1979,https://psicode.org,https://github.com/psi4/psi4/issues/1588,3,"['cache', 'load']","['cache', 'cache-Release', 'loading']"
Performance,"3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set {; basis 6-31G*; # Do use pure angular momentum basis functions?; # PUREAM false. # SCF_TYPE DIRECT # An out-of-core, presorted algorithm using exact ERIs. # MOLDEN_WRITE true. }. optimize('scf', dertype='energy'). psi4 is installed through miniconda:. [root@titan3 2]# find /app/ -name psi4 -type f; /app/miniconda/pkgs/psi4-0.2.54-py27_gf997694/bin/psi4; /app/miniconda/bin/psi4; [root@titan3 2]# /app/miniconda/bin/psi4 --version; 0.2.54",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:5047,optimiz,optimize,5047,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimize']
Performance,"35-36 entry C line 121 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 667 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 498 file PATH\envs\psi4\lib\share\psi4\basis\def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 4; Integrals threads: 4; Memory [MiB]: 16093; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT + DEF2-UNIVERSAL-JKFIT; Number of shells: 2894; Number of basis functions: 10676; Number of Cartesian functions: 10676; Spherical Harmonics?: false; Max angular momentum: 4. Cached 10.0% of DFT collocation blocks in 1.635 [GiB]. Minimum eigenvalue in the overlap matrix is 6.3023278892E-05.; Reciprocal condition number of the overlap matrix is 6.1027737192E-06.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 1058 1058 ; -------------------------; Total 1058 1058; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -20768.03616751698792 -2.07680e+04 0.00000e+00 ; @DF-RKS iter 1: -20765.62327420015208 2.41289e+00 1.93665e-03 DIIS/ADIIS; @DF-RKS iter 2: -20391.34084894250191 3.74282e+02 9.02715e-03 DIIS/ADIIS; @DF-RKS iter 3: -20544.66036200033341 -1.53320e+02 8.84587e-03 DIIS/ADIIS; @DF-RKS iter 4: -20767.63349150712747 -2.22973e+02 9.76048e-04 DIIS/ADIIS; @DF-RKS iter 5: -20703.21493143097177 6.44186e+01 3.04393e-03 DIIS/ADIIS; @DF-RKS ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:20105,Cache,Cached,20105,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Cache'],['Cached']
Performance,"360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:19797,optimiz,optimized,19797,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:2510,load,loading,2510,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['loading']
Performance,"48052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083916 -0.015328 3.771054 4.854970; 	 9 R(4,6) = 1.083782 -0.014647 3.771929 4.855711; 	 10 B(1,2,3) = 125",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:4818,optimiz,optimization,4818,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"48758038259001, ; -108.48749538322693, -108.48743328369225, -108.48738988401745, -108.4873615842295, -108.4873453843509, -108.48733858440185, -108.48733918439734, -108.48734528435165, -108.487544082862,; -108.4875574827616, -108.48757248264921, -108.48758858252856, -108.48760498240567, -108.48762118228429, -108.48763708216514, -108.48765208205275, -108.4876661819471, ; -108.48767918184969, -108.48769108176053, -108.4877016816811, -108.48771108161066, -108.48771918154995, -108.48772618149751, -108.48773188145479, -108.48773658141958, ; -108.48774018139261, -108.48774268137387, -108.48774438136114, -108.48774518135515, -108.48774518135515, -108.48774438136114, -108.48774298137162, -108.48774098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]. psi4.diatomic.anharmonicity(r,eng,'result.out'); --------------------------------------------------------------------------. Memory set to 1.863 GiB by Python driver. Performing a fit to 85 data points. Optimizing geometry based on current surface:. E = -108.48763191189867, x = 3.2252941, grad = 0.00224788400003; E = -108.48738990806602, x = 3.3996397, grad = 0.00068618041148; E = -108.48734508016932, x = 3.4996883, grad = 0.00016321285348; E = -108.48733918433076, x = 3.5300091, grad = 0.00004224053808; E = -108.48733835624454, x = 3.5376957, grad = -0.00000455763475; E = -108.48733841386600, x = 3.5368732, grad = 0.00000047690618; E = -108.48733840748675, x = 3.5369593, grad = -0.00000005153221; E = -108.48733840817202, x = 3.5369500, grad = 0.00000000555231; E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873; Final E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873. Equilibrium Energy -108.48733840809817 Hartrees; Gradient -0.00000000059873; Quadratic Force Constant -0.0241494 MDYNE/A; Cubic Force Constant 0.0817885 MDYNE/A**2; Quartic Force Constant -0.1482087 MDYNE/A**3. Traceback (most recent call last):; File ""/home/martin/miniconda/bin/psi4"", line 287, in <module>; exec(c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:9042,Optimiz,Optimizing,9042,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['Optimiz'],['Optimizing']
Performance,54 0.996968 1.2925792; O -1.0786533 -2.3831691 -2.1082181; O -4.5550423 -0.3852824 0; O -0.5151061 0.4216645 -2.3608946; O -0.5151061 0.4216645 2.3608946; O -0.5222264 4.2956077 0; C -0.1082324 0.2374533 0; O -1.0786533 -2.3831691 2.1082181; O 2.3952343 2.1158161 0; O 0.5199028 -2.1266114 0; C 4.896284 1.1381514 0; H 5.7890291 0.519171 0; H 4.8706699 1.7767416 0.8844252; H 4.8706699 1.7767416 -0.8844252; C 2.9639859 -3.3851463 0; H 4.0304645 -3.5950568 0; H 2.4931226 -3.8054526 -0.8904149; H 2.4931226 -3.8054526 0.8904149; C -3.5099766 -1.1109136 -2.4322518; H -2.8479461 -0.7898524 -3.2353438; H -4.3402724 -0.4197278 -2.3122369; H -3.8914406 -2.1102241 -2.6557968; C -0.593268 3.1660794 2.4125448; H 0.3134452 3.7675492 2.490953; H -0.6696566 2.4797628 3.2512268; H -1.4561479 3.8307515 2.3767475; C -0.593268 3.1660794 -2.4125448; H 0.3134452 3.7675492 -2.490953; H -1.4561479 3.8307515 -2.3767475; H -0.6696566 2.4797628 -3.2512268; C -3.5099766 -1.1109136 2.4322518; H -2.8479461 -0.7898524 3.2353438; H -3.8914406 -2.1102241 2.6557968; H -4.3402724 -0.4197278 2.3122369; O 0.5199028 -2.1266114 0; C 4.896284 1.1381514 0; H 5.7890291 0.519171 0; H 4.8706699 1.7767416 0.8844252; H 4.8706699 1.7767416 -0.8844252; C 2.9639859 -3.3851463 0; H 4.0304645 -3.5950568 0; H 2.4931226 -3.8054526 -0.8904149; H 2.4931226 -3.8054526 0.8904149; C -3.5099766 -1.1109136 -2.4322518; H -2.8479461 -0.7898524 -3.2353438; H -4.3402724 -0.4197278 -2.3122369; H -3.8914406 -2.1102241 -2.6557968; C -0.593268 3.1660794 2.4125448; H 0.3134452 3.7675492 2.490953; H -0.6696566 2.4797628 3.2512268; H -1.4561479 3.8307515 2.3767475; C -0.593268 3.1660794 -2.4125448; H 0.3134452 3.7675492 -2.490953; H -1.4561479 3.8307515 -2.3767475; H -0.6696566 2.4797628 -3.2512268; C -3.5099766 -1.1109136 2.4322518; H -2.8479461 -0.7898524 3.2353438; H -3.8914406 -2.1102241 2.6557968; H -4.3402724 -0.4197278 2.3122369; }. mol.update_geometry(); mol.print_out(). set basis cc-pvtz. optimize('b3lyp-d3'). print_variables(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158:2854,optimiz,optimize,2854,https://psicode.org,https://github.com/psi4/psi4/issues/158,1,['optimiz'],['optimize']
Performance,"568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set {; basis 6-31G*; # Do use pure angular momentum basis functions?; # PUREAM false. # SCF_TYPE DIREC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3981,optimiz,optimized,3981,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimized']
Performance,"59600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:2431,optimiz,optimize,2431,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance,"6 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.84014",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:2266,optimiz,optimization,2266,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['optimiz'],['optimization']
Performance,"602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:2623,optimiz,optimized,2623,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimized']
Performance,"692; C	0.0280306717 -0.2718210489 0.2142030812; C	1.4218510657 0.1094955364 0.2323938153; C	-0.8935306288 0.6217951694 -0.3937996518; C	0.8749866134 2.2505177854 -0.7685419788; C	1.8279888898 1.3582013966 -0.2135637897; C	-0.4555887744 -1.4910996529 0.7799513422; C	-0.4434092186 1.8876824244 -0.8862861414; C	-2.2687193610 0.2375554697 -0.4984111660; C	-1.7875187142 -1.8176564012 0.6992850376; C	-2.7005499370 -0.9522869380 0.0312086031; H	1.2191387380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:1340,optimiz,optimizations,1340,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['optimiz'],['optimizations']
Performance,"6hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib 1.2.11 ha838bed_2; ```. Our input is:. ```; set_num_threads(4); set_memory('16000 MB'). set { scf_mem_safety_factor 0.7 }. set { reference rks }; set { basis 6-311++G** }. molecule MOL {; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:2921,optimiz,optimize,2921,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['optimiz'],['optimize']
Performance,"7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:3455,optimiz,optimization,3455,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11269,optimiz,optimized,11269,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"8291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; # 3 -139.282037341604 -0.044783590572 0.06072927 0.03180855 0.57480436 0.30215430 ~; # 4 -139.291415380240 -0.009378038636",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:7292,Optimiz,Optimizer,7292,https://psicode.org,https://github.com/psi4/psi4/issues/310,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11589,optimiz,optimized,11589,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"8783928065005, -108.48769318174477, -108.48758038259001, ; -108.48749538322693, -108.48743328369225, -108.48738988401745, -108.4873615842295, -108.4873453843509, -108.48733858440185, -108.48733918439734, -108.48734528435165, -108.487544082862,; -108.4875574827616, -108.48757248264921, -108.48758858252856, -108.48760498240567, -108.48762118228429, -108.48763708216514, -108.48765208205275, -108.4876661819471, ; -108.48767918184969, -108.48769108176053, -108.4877016816811, -108.48771108161066, -108.48771918154995, -108.48772618149751, -108.48773188145479, -108.48773658141958, ; -108.48774018139261, -108.48774268137387, -108.48774438136114, -108.48774518135515, -108.48774518135515, -108.48774438136114, -108.48774298137162, -108.48774098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]. psi4.diatomic.anharmonicity(r,eng,'result.out'); --------------------------------------------------------------------------. Memory set to 1.863 GiB by Python driver. Performing a fit to 85 data points. Optimizing geometry based on current surface:. E = -108.48763191189867, x = 3.2252941, grad = 0.00224788400003; E = -108.48738990806602, x = 3.3996397, grad = 0.00068618041148; E = -108.48734508016932, x = 3.4996883, grad = 0.00016321285348; E = -108.48733918433076, x = 3.5300091, grad = 0.00004224053808; E = -108.48733835624454, x = 3.5376957, grad = -0.00000455763475; E = -108.48733841386600, x = 3.5368732, grad = 0.00000047690618; E = -108.48733840748675, x = 3.5369593, grad = -0.00000005153221; E = -108.48733840817202, x = 3.5369500, grad = 0.00000000555231; E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873; Final E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873. Equilibrium Energy -108.48733840809817 Hartrees; Gradient -0.00000000059873; Quadratic Force Constant -0.0241494 MDYNE/A; Cubic Force Constant 0.0817885 MDYNE/A**2; Quartic Force Constant -0.1482087 MDYNE/A**3. Traceback (most recent call last):; File ""/home/martin/minicond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:9006,Perform,Performing,9006,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['Perform'],['Performing']
Performance,": Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; -- The CXX compiler identification is GNU 5.2.0; -- The C compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/lib64/libblas.so); -- Found LAPACK: SYSTEM_NATIVE (/lib64/liblapack.so); -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:3283,Perform,Performing,3283,https://psicode.org,https://github.com/psi4/psi4/issues/312,6,['Perform'],['Performing']
Performance,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1842,optimiz,optimized,1842,https://psicode.org,https://github.com/psi4/psi4/issues/2010,5,['optimiz'],['optimized']
Performance,"::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14868,Load,Loading,14868,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Load'],['Loading']
Performance,":function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2791,optimiz,optimized,2791,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"; <!-- Provide a brief description of the PR's purpose here. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1016,cache,cache,1016,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['cache'],['cache']
Performance,"; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1570,Optimiz,Optimized,1570,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['Optimiz'],['Optimized']
Performance,"; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Rela",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1366,optimiz,optimize,1366,https://psicode.org,https://github.com/psi4/psi4/issues/647,2,['optimiz'],"['optimization', 'optimize']"
Performance,"; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:1266,optimiz,optimization,1266,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['optimiz'],['optimization']
Performance,"<=. Version 5.2.3; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-D3BJ <= . wB97M-V with D3(BJ) instead of VV10 dispersion . A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018; N. Mardirossian, M. Head-Gordon, J. Chem. Phys. 144, 214110, 2016. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:11573,Load,Loading,11573,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Load'],['Loading']
Performance,"<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:3079,optimiz,optimized,3079,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"= 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s->order_ = lebedev_mapping_[npoints];` (the line where things hang on an Unlucky Run), and that line is definitely hit (so my breakpoints are firing correctly). I'm not sure what the consequences of this all are, as I seem to be getting sensible energies (though I suppose I haven't compared to a known good literature benchmark calculated without psi4). I don't think I'm the first person to run into concerns in this part of the code, though, given this comment:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L3812. Here's a minimal file to just check that `initialize_lebedev` is ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:2269,perform,performance,2269,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['perform'],['performance']
Performance,"='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13837,optimiz,optimized,13837,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); at Python/pythonrun.c:1914; #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); from /usr/lib/libboost_python3.so.1.54.0; #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; ```. Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:6536,optimiz,optimized,6536,https://psicode.org,https://github.com/psi4/psi4/issues/12,5,['optimiz'],['optimized']
Performance,== Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) :,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:1851,optimiz,optimized,1851,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['optimiz'],['optimized']
Performance,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:32,optimiz,optimizations,32,https://psicode.org,https://github.com/psi4/psi4/issues/893,2,['optimiz'],['optimizations']
Performance,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708:352,load,load,352,https://psicode.org,https://github.com/psi4/psi4/issues/708,1,['load'],['load']
Performance,@psi-rking @AlexHeide . The following input file is killed after the first gradient:; ```; memory 500 mb; set basis 6-31g**; set optking { opt_coordinates = cartesian }. molecule chcl {; Cl 0.7796000000 0.2288000000 0.1645000000; C 0.9471000000 0.9465000000 0.3434000000; C 0.4471000000 0.5535000000 0.6566000000; C 0.0529000000 0.4465000000 0.1566000000; C 0.5529000000 0.0535000000 0.8434000000; C 0.9001000000 0.0666000000 0.6727000000; H 0.8700000000 0.8890000000 0.4120000000; H 0.3700000000 0.6110000000 0.5880000000; H 0.1300000000 0.3890000000 0.0880000000; H 0.6300000000 0.1110000000 0.9120000000; H 0.0120000000 0.8880000000 0.2660000000; H 0.5120000000 0.6120000000 0.7340000000; H 0.9880000000 0.3880000000 0.2340000000; H 0.4880000000 0.1120000000 0.7660000000; H 0.9160000000 0.0180000000 0.2470000000; H 0.4160000000 0.4820000000 0.7530000000; H 0.0840000000 0.5180000000 0.2530000000; H 0.5840000000 0.9820000000 0.7470000000; H 0.8180000000 0.0080000000 0.6950000000; H 0.3180000000 0.4920000000 0.3050000000; N 0.9955000000 0.9963000000 0.5575000000; O 0.1222000000 0.1085000000 0.1167000000; }. optimize('blyp'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627:1115,optimiz,optimize,1115,https://psicode.org,https://github.com/psi4/psi4/issues/2627,1,['optimiz'],['optimize']
Performance,"@psi-rking, why is my gradient non-zero at the end of a successful geometry optimization, please? Below is runable input file with details of problem. ```; # these are the conditions, a purely conventional (we're going to be; # comparing to Q-Chem) MP2/cc-pVTZ optimization. set basis cc-pvtz; set g_convergence gau_verytight; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core false. # the gradient that any fully optimized molecule should match, more or less. zerograd = psi4.Matrix(5,3); refgrad = [; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0]]; zerograd.set(refgrad). # this is the first system, a fluoromethane that looks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:76,optimiz,optimization,76,https://psicode.org,https://github.com/psi4/psi4/issues/310,3,['optimiz'],"['optimization', 'optimized']"
Performance,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:712,throughput,throughput,712,https://psicode.org,https://github.com/psi4/psi4/issues/2825,1,['throughput'],['throughput']
Performance,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1298:79,optimiz,optimization,79,https://psicode.org,https://github.com/psi4/psi4/issues/1298,3,['optimiz'],"['optimization', 'optimize']"
Performance,"A fresh compile of psi4 1.9.1 on Fedora (yay, finally updating from 1.3.2!) fails to run; all the tests fail with the error; ```; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Exit Status: overall (1); ```; which suggests that there is critical path code that is accessing a `std::vector` out-of-bounds. All Fedora packages are compiled with the following default optimization flags; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214:592,optimiz,optimization,592,https://psicode.org,https://github.com/psi4/psi4/issues/3214,1,['optimiz'],['optimization']
Performance,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:853,Perform,Performing,853,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Perform'],['Performing']
Performance,"A recent [forum post](http://forum.psicode.org/t/how-to-read-multiple-external-geometry-files-improve-documentation/2044) has brought to light more holes in the Psi4 documentation. 1. The [advanced python](https://psicode.org/psi4manual/master/psithonmol.html?highlight=xyz#advanced-python) section refers to `init_with_xyz`. Thanks to Lori, this method no longer exists. All references to this method should be replaced.; 2. Because Psi4 input files are parsed as Python, it's possible to include valid Python in a Psi files, and it just runs. While we mention this in the [Psithon tutorial](https://psicode.org/psi4manual/master/tutorial.html) (first light bulb), that section is billed as the difference between Psithon and PsiAPI. Somewhere in there, we should explicitly make the point that for use beyond molecule specification and top-level driver function call, writing Python code in the Psithon file is likely the way to go.; 3. Particular application: We should demonstrate how to read in a geometry from xyz file. This is a very important use case if we want to bill Psi4 as ""for high-throughput quantum chemistry.""; 4. Particular application: Not directly related to molecule reading, but we should also document how to read in an SCF guess. This has recently caused some vexation even here at UGA, and is another reasonably common use case. [This forum post](http://forum.psicode.org/t/custom-guess-for-hartree-fock/2026/6?u=jmisiewicz) of mine should explain how it's done, but whoever works on this should confirm it works. I'm also open to this being a cookbook example.; 5. `Molecule.from_string` is not [properly documented](https://psicode.org/psi4manual/master/psi4api.html?highlight=from_string#psi4.core.Molecule.from_string). We should document the Python function, so the Sphinx knows about it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2105:1097,throughput,throughput,1097,https://psicode.org,https://github.com/psi4/psi4/issues/2105,1,['throughput'],['throughput']
Performance,AG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Looking for include file dlfcn.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2692,Perform,Performing,2692,https://psicode.org,https://github.com/psi4/psi4/issues/36,14,['Perform'],['Performing']
Performance,"According to the docs (https://psicode.org/psi4manual/master/autodir_options_c/module__ccenergy.html#cachelevel), the maximum value of cachelevel is 6. This is wrong, trying to use a cachelevel of 6 or 5 results in an invalid cachelevel error message. The largest cachelevel that appears to work is 4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:101,cache,cachelevel,101,https://psicode.org,https://github.com/psi4/psi4/issues/2701,5,['cache'],['cachelevel']
Performance,"After each exit of any run the following crash happens:. ``` bash; Program received signal SIGSEGV, Segmentation fault.; subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install atlas-3.8.4-8.fc19.x86_64 blas-3.4.2-2.fc19.x86_64 keyutils-libs-1.5.5-4.fc19.x86_64 krb5-libs-1.11.3-1.fc19.x86_64 libcom_err-1.42.7-2.fc19.x86_64 libselinux-2.1.13-15.fc19.x86_64 pcre-8.32-7.fc19.x86_64; (gdb) bt full; #0 subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; type = 0x10d7f9c0; base = <optimized out>; basedealloc = <optimized out>; tstate = 0x0; #1 0x00007ffff6b92cb2 in xdecref<_object> (p=<optimized out>) at boost/python/refcount.hpp:36; p = <optimized out>; #2 reset (this=0x1107b438) at boost/python/handle.hpp:249; No locals.; #3 boost::python::converter::shared_ptr_deleter::operator() (this=0x1107b438) at libs/python/src/converter/builtin_converters.cpp:35; No locals.; #4 0x0000000000710812 in psi::Process::Environment::~Environment() (); No symbol table info available.; #5 0x000000374f2390a9 in __run_exit_handlers (status=0, listp=0x374f5b96e8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77; atfct = <optimized out>; onfct = <optimized out>; cxafct = <optimized out>; f = <optimized out>; #6 0x000000374f2390f5 in __GI_exit (status=<optimized out>) at exit.c:99; No locals.; #7 0x000000374f221b7c in __libc_start_main (main=0x699720 <main>, argc=2, ubp_av=0x7fffffffdb38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdb28); at libc-start.c:292; result = <optimized out>; unwind_buf = {cancel_jmp_buf = {{jmp_buf = {0, -420104691260379722, 7149040, 140737488345904, 0, 0, 420104692152085942, -412673899392062026}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, ; 0x1c22e20 <__libc_csu_init>, 0x7fffffffdb38}, data =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8:686,optimiz,optimized,686,https://psicode.org,https://github.com/psi4/psi4/issues/8,4,['optimiz'],['optimized']
Performance,"All the symmetry detection in the Molecule class is through `tol` arguments for individual methods. For the Molecule as a whole, this is controlled by `DEFAULT_SYM_TOL`, which is compiled in. This means one can't just dial down the symmetry tolerance for an entire optimization. For this ticket, make the `tol` parameter not a preprocessor option but a bit of member data. Make a set function for this. Export it to python.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232:265,optimiz,optimization,265,https://psicode.org,https://github.com/psi4/psi4/issues/232,1,['optimiz'],['optimization']
Performance,Another geometry optimization crash,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/issues/2213,1,['optimiz'],['optimization']
Performance,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1266:787,TUNE,TUNED-CAM-,787,https://psicode.org,https://github.com/psi4/psi4/issues/1266,1,['TUNE'],['TUNED-CAM-']
Performance,"As suggested by @andysim on slack, the 2D array of ShellPair objects initialized in eribase.cc (linked below) could be optimized by screening out negligibly small terms. ; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L1905; The two ideas he proposed are:; 1) Shell pair (block) screening: ignore entire shell pairs only when all of their primitive pairs have small enough overlap, otherwise keep the entire shell pair; 2) Primitive pair (fine-grained) screening: individually ignore primitive pairs with small enough overlap, allowing part (or all) of a shell pair to be discarded. For both approaches, I counted how many primitive pairs would be removed in this function over a range of systems/basis sets:; ![image](https://user-images.githubusercontent.com/16376046/48686241-ee3f3700-eb88-11e8-8e69-04ffabca9b39.png); Note that this considers a pair of primitives negligible if the overlap term (shown below) is less than a cutoff of 10e-10, which will likely have to be tuned; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L2026. Block screening would definitely be easier to implement, but it doesn't remove as many primitive pairs as the fine-grained screening. However, the discrepancy between the two methods becomes smaller with both the size of the system and basis set. . Is this discrepancy small enough to justify block screening, or should we go with fine-grained screening? (Also, should I change up the overlap-cutoff / basis sets / test molecules?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1362:119,optimiz,optimized,119,https://psicode.org,https://github.com/psi4/psi4/issues/1362,2,"['optimiz', 'tune']","['optimized', 'tuned']"
Performance,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:31,perform,perform,31,https://psicode.org,https://github.com/psi4/psi4/issues/2291,1,['perform'],['perform']
Performance,"As written on psi4 forum, me and other users experience bad scaling of Pcm calculations. http://forum.psicode.org/t/pcmsolver-parallelisation/817/4. I agree that the actual calculation by pcm solver is only a small fraction of the total time used by psi4, so I currently believe the bottleneck must be on psi4 side. example input and logs and timer for acetic acid with pbe/def2-tzvppd (named pcm and scf accordingly):; [acetic_acid.zip](https://github.com/psi4/psi4/files/2451532/acetic_acid.zip). pcm_4thr:; ```; Total time:; 	user time = 205.49 seconds = 3.42 minutes; 	system time = 1.18 seconds = 0.02 minutes; 	total time = 150 seconds = 2.50 minutes; ```; pcm_1thr:; ```; Total time:; 	user time = 157.73 seconds = 2.63 minutes; 	system time = 0.41 seconds = 0.01 minutes; 	total time = 158 seconds = 2.63 minutes; ```; scf_4thr:; ```; Total time:; 	user time = 66.19 seconds = 1.10 minutes; 	system time = 0.58 seconds = 0.01 minutes; 	total time = 18 seconds = 0.30 minutes; ```; scf_1thr:; ```; Total time:; 	user time = 28.61 seconds = 0.48 minutes; 	system time = 0.25 seconds = 0.00 minutes; 	total time = 29 seconds = 0.48 minutes; ```; standalone pcmsolver call for same pcm input (yes done 10 times in the scf iteration, but no where near of being the bottleneck):; ```; real	0m0.462s; user	0m0.190s; sys	0m0.097s; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280:283,bottleneck,bottleneck,283,https://psicode.org,https://github.com/psi4/psi4/issues/1280,2,['bottleneck'],['bottleneck']
Performance,"At long last, some gradient refactoring. Supersedes [my previous attempt](https://github.com/psi4/psi4/pull/1745). Only the OPDM and Lagrangian are a 1.7 target. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Orbital-optimized `occ` densities now available on the wavefunction; - [x] DC-06 densities now symmetrized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Conventional gradients now check whether the density and Lagrangian are set on the wavefunction. If so, it uses those rather than reading MO-basis quantities from disk. `dct` and `occ` use this new system. `cc` will use it in the next PR. The old system will be removed for 1.8. Old system vs new system is toggled by the `reset_oneel` flag. ## Questions; - [x] How to create a warning that plugin developers should use new-style gradients?. ## Checklist; - [x] All `dct`, `omp`, `mp`, `olccd`, lccd`, `cepa`, and `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2788:343,optimiz,optimized,343,https://psicode.org,https://github.com/psi4/psi4/pull/2788,1,['optimiz'],['optimized']
Performance,"Attempting to run a geometry optimization on molecule at the B3LYP-D/cc-pVTZ level results in the job crashing whenever native symmetry is left on, but the job runs whenever a symmetry of C1 is specified. Further digging resulted in finding out that the job is failing because of a core dump. . Successful input file:. memory 16000 mb. molecule mol {; units Angstrom; symmetry c1 ; N 2.8186748 -1.9320605 0; C 3.9682155 -1.1155139 0; N 3.7348961 0.253345 0; C 2.4718715 0.8928656 0; C 1.3801963 -0.021916 0; C 1.6020129 -1.3565857 0; O 5.0789142 -1.6090969 0; C -1.4704537 -1.662531 1.2276603; C -0.6314352 -1.2778143 0; C -1.4704537 -1.662531 -1.2276603; N -2.7456834 -1.1146331 -1.1876558; N -2.7456834 -1.1146331 1.1876558; C -3.4215193 -0.8181518 0; C -0.4410954 0.996968 -1.2925792; N -0.5390482 2.3631797 -1.1910976; C -0.5061096 3.0855781 0; N -0.5390482 2.3631797 1.1910976; C -0.4410954 0.996968 1.2925792; O -1.0786533 -2.3831691 -2.1082181; O -4.5550423 -0.3852824 0; O -0.5151061 0.4216645 -2.3608946; O -0.5151061 0.4216645 2.3608946; O -0.5222264 4.2956077 0; C -0.1082324 0.2374533 0; O -1.0786533 -2.3831691 2.1082181; O 2.3952343 2.1158161 0; O 0.5199028 -2.1266114 0; C 4.896284 1.1381514 0; H 5.7890291 0.519171 0; H 4.8706699 1.7767416 0.8844252; H 4.8706699 1.7767416 -0.8844252; C 2.9639859 -3.3851463 0; H 4.0304645 -3.5950568 0; H 2.4931226 -3.8054526 -0.8904149; H 2.4931226 -3.8054526 0.8904149; C -3.5099766 -1.1109136 -2.4322518; H -2.8479461 -0.7898524 -3.2353438; H -4.3402724 -0.4197278 -2.3122369; H -3.8914406 -2.1102241 -2.6557968; C -0.593268 3.1660794 2.4125448; H 0.3134452 3.7675492 2.490953; H -0.6696566 2.4797628 3.2512268; H -1.4561479 3.8307515 2.3767475; C -0.593268 3.1660794 -2.4125448; H 0.3134452 3.7675492 -2.490953; H -1.4561479 3.8307515 -2.3767475; H -0.6696566 2.4797628 -3.2512268; C -3.5099766 -1.1109136 2.4322518; H -2.8479461 -0.7898524 3.2353438; H -3.8914406 -2.1102241 2.6557968; H -4.3402724 -0.4197278 2.3122369; O 0.5199028 -2.1266114 0;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/158,1,['optimiz'],['optimization']
Performance,"C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3652,Optimiz,Optimization,3652,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Optimiz'],['Optimization']
Performance,"CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:. ```; molecule f { ; f 0.00 0.00 0.00; }; set basis cc-pVTZ; set scf reference uhf ; energy('ccsd'); ```. (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. Full backtrace from gdb:. ```; (gdb) where; #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:954,optimiz,optimized,954,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1694,Perform,Performing,1694,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:525,optimiz,optimize,525,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['optimiz'],['optimize']
Performance,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:359,optimiz,optimize,359,https://psicode.org,https://github.com/psi4/psi4/issues/1924,1,['optimiz'],['optimize']
Performance,Cartesian-constraint optimization test cases,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/208:21,optimiz,optimization,21,https://psicode.org,https://github.com/psi4/psi4/pull/208,1,['optimiz'],['optimization']
Performance,Changed opt10 TS-optimization test case to a 6-31G basis. Updated the associated test files. This runs in ~20 minutes on one core with only 1gb of memory. It's ready to go.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/255:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/pull/255,1,['optimiz'],['optimization']
Performance,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6754,Perform,Performing,6754,https://psicode.org,https://github.com/psi4/psi4/issues/629,10,['Perform'],['Performing']
Performance,"Closes #2735 . Previously, `initialize_lebedev` was never called, and in fact was getting optimized out of the module completely upon compilation. When `lebedev_mappping_[]` is then accessed across multiple OpenMP threads, the std::map is empty, and a deadlock can happen where two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:90,optimiz,optimized,90,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['optimiz'],['optimized']
Performance,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:185,optimiz,optimization,185,https://psicode.org,https://github.com/psi4/psi4/issues/923,3,['optimiz'],['optimization']
Performance,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:339,perform,perform,339,https://psicode.org,https://github.com/psi4/psi4/issues/867,1,['perform'],['perform']
Performance,Concurrent `detci` Test Fail,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2618:0,Concurren,Concurrent,0,https://psicode.org,https://github.com/psi4/psi4/issues/2618,1,['Concurren'],['Concurrent']
Performance,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2457:186,cache,cachelevel,186,https://psicode.org,https://github.com/psi4/psi4/issues/2457,2,['cache'],['cachelevel']
Performance,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1062:63,Optimiz,OptimizationConvergenceError,63,https://psicode.org,https://github.com/psi4/psi4/issues/1062,3,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,"Currently the OCC/DFOCC page of the docs makes no mention of frozen core.; DFOCC seems to default to all-electron, but _does_ seem to run with `set freeze_core true`.; OCC throws a RuntimeError, and claims that ""Frozen core/virtual not implemented in Orbital-optimized methods"". I can see two issues here:. 1. The error message from OCC suggests that none of the orbital-optimized methods in Psi4 support FC. This is either wrong and misleading (if DFOCC really does support FC) or DFOCC should also throw the same error.; 2. Regardless of the answer to 1, [the relevant doc page](http://www.psicode.org/psi4manual/master/occ.html) ought to have a few words about FC support or the lack thereof.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863:259,optimiz,optimized,259,https://psicode.org,https://github.com/psi4/psi4/issues/1863,2,['optimiz'],['optimized']
Performance,"Currently the optking binary data is not saved correctly during complex operations like `cbs`, `database`, etc. At present, optimizations will proceed; however, since all previous iteration data is lost the convergence will be very slow.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/303:124,optimiz,optimizations,124,https://psicode.org,https://github.com/psi4/psi4/issues/303,1,['optimiz'],['optimizations']
Performance,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:2184,perform,perform,2184,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['perform'],['perform']
Performance,"DEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:1882,cache,cache-Release,1882,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['cache'],['cache-Release']
Performance,DFT Grid Cache and VV10 Gradients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:9,Cache,Cache,9,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['Cache'],['Cache']
Performance,"DFT overhaul, ECPs, SAPT(DFT), EP2, performance enhancements",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:36,perform,performance,36,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['perform'],['performance']
Performance,DLPNO-MP2 Performance Improvement,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:10,Perform,Performance,10,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['Perform'],['Performance']
Performance,"DZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 221 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs ; atoms 2-3 entry H line 51 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs . Process finished with exit code 139 (interrupted by signal 11: SIGSEGV); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:2582,Load,Loading,2582,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['Load'],['Loading']
Performance,"Dear Developers, . I like to know (before doing a full installation of the code) whether the new PSI4 for generation of FCIDUMP file for a subsequent dmrg calculation takes advantage of density fitting or not ?. I remember it performed a full 2-electron integral calculation in serial before entering dmrg calculation in the older version of the code. . Bests; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/458:226,perform,performed,226,https://psicode.org,https://github.com/psi4/psi4/issues/458,1,['perform'],['performed']
Performance,"Dear Developers,. I would like to perform counterpoise-corrected DBOC computations at the CCSD level, using psi4-1.9.1. For this purpose, I wrote the following input:. ```; molecule dimer {; 0 1; N 1.608094757 -0.561155368 0.000000000; N 2.389700473 0.210989439 0.000000000; --; 0 1; N -2.389700473 -0.210989439 0.000000000; N -1.608094757 0.561155368 0.000000000; }. set globals {; cfour_dboc on; basis cc-pvdz; d_convergence 11; }. e_cp = energy('c4-ccsd',bsse_type='cp', return_total_data=True); ```. When I tried to run this input, I received a segmentation fault, without any further information. If I replace `c4-ccsd` with `c4-hf`, then there occurs another segmentation fault, which is more verbose than the previous one:. `QcdbException: Psi4/Cfour gradients with ghost atoms no longer supported. Use QCEngine or QCDB where they are.`. There is a simple warning, as well, which I am not sure what to do with:. `Using qcdb.align.B787instead ofqcelemental.molutil.B787 is deprecated, and as soon as 1.5 it will stop working`. Could you please help me how to modify this input for a successful execution?. Thank you in advance for your help. Best regards,. Roland",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:34,perform,perform,34,https://psicode.org,https://github.com/psi4/psi4/issues/3217,1,['perform'],['perform']
Performance,"Dear Psi4 developers,. The 'full_hess_every N' functionality, used to compute the full Hessian; every N steps in an optimization, does not work as expected for N > 0:; the Hessian is always recalculated on the initial structure instead of; the current one. This can be tested as follows. First, we only calculate the Hessian initially (full_hess_every 0). The; minimization converges in 7 steps to an R=0.95, B=104.6 geometry. The; frequencies obtained are 1776, 4112, 4211. #input: hess0.in; molecule h2o {; symmetry c1; O; H 1 R; H 1 R 2 B; R = 1.2; B = 120; }; set basis cc-pVDZ; set full_hess_every 0; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.933505",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1282:116,optimiz,optimization,116,https://psicode.org,https://github.com/psi4/psi4/issues/1282,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Dear all, . Does any one know why psi4 performs a 2 electron integral calculation just before dmrg calculation starts, although one has activated density fitting keyword ?. Bests; Luca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/194:39,perform,performs,39,https://psicode.org,https://github.com/psi4/psi4/issues/194,1,['perform'],['performs']
Performance,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/744:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/744,1,['optimiz'],['optimization']
Performance,"Dear devs,. I've been running some dihedral-constrained optimizations on capped dipeptides, and a small percentage of them fail. Examples are attached. In the first example, the optimizer takes a huge step and ends up in a crazy geometry. I worked around it by setting `intrafrag_step_limit 0.1`. Unfortunately I lost the .intco file, but the output file shows that two dihedrals have been constrained. https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.xyz. In the second example, the energy oscillates with periodicity 3. . https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.xyz; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.THR.intco. I'll try to work around this by using `step_type nr`, but thought it was worth reporting nonetheless. Thanks,; - Lee-Ping Wang (Postdoc, Stanford)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:56,optimiz,optimizations,56,https://psicode.org,https://github.com/psi4/psi4/issues/18,9,['optimiz'],"['optimizations', 'optimize', 'optimize-', 'optimizer']"
Performance,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2195:299,optimiz,optimize,299,https://psicode.org,https://github.com/psi4/psi4/issues/2195,5,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimize']"
Performance,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504:742,optimiz,optimizations,742,https://psicode.org,https://github.com/psi4/psi4/issues/1504,1,['optimiz'],['optimizations']
Performance,"Disilylether with scf_type=pk is fine. Without it, the gradients are only c2v-symmetric to 9 decimal places, and after some geometry steps an optimization will fail due to change in point group. Is this noise an inevitable consequence of density-fitting or some other approximation? If so, can we symmetrize the gradient after it is produced? I haven't confirmed this result yet with the very latest psi4. ``` python; memory 2 gb; set {; basis 6-31G*; reference RHF; guess gwh; }. molecule {; 0 1; SI 0.0 -3.03636189 0.1503967744; SI 0.0 3.03636189 0.1503967744; O 0.0 0.00000000 -0.6720662056; H 0.0 -4.54756839 -1.9795468656; H 0.0 4.54756839 -1.9795468656; H 2.12290049 -3.58475023 1.5688329144; H -2.12290049 -3.58475023 1.5688329144; H 2.12290049 3.58475023 1.5688329144; H -2.12290049 3.58475023 1.5688329144; }; gradient('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298:142,optimiz,optimization,142,https://psicode.org,https://github.com/psi4/psi4/issues/298,1,['optimiz'],['optimization']
Performance,Docs incorrect for maximum value of CACHELEVEL (CCENERGY),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:36,CACHE,CACHELEVEL,36,https://psicode.org,https://github.com/psi4/psi4/issues/2701,1,['CACHE'],['CACHELEVEL']
Performance,Don't Cache `nmo_`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2875:6,Cache,Cache,6,https://psicode.org,https://github.com/psi4/psi4/issues/2875,1,['Cache'],['Cache']
Performance,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1309:10,optimiz,optimization,10,https://psicode.org,https://github.com/psi4/psi4/issues/1309,3,['optimiz'],"['optimization', 'optimize', 'optimizer']"
Performance,"ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2574,Perform,Performance,2574,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,"['Optimiz', 'Perform']","['Optimizations', 'Performance']"
Performance,Enable optimized builds on Azure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:7,optimiz,optimized,7,https://psicode.org,https://github.com/psi4/psi4/pull/1539,1,['optimiz'],['optimized']
Performance,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973:347,load,loaded,347,https://psicode.org,https://github.com/psi4/psi4/issues/1973,2,['load'],"['loaded', 'loading']"
Performance,Excited State Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106:14,Optimiz,Optimization,14,https://psicode.org,https://github.com/psi4/psi4/issues/3106,1,['Optimiz'],['Optimization']
Performance,"Fails on methyl chloride, succeeds on diatomic chlorine.; Did not test larger alkyl groups.; CH3Cl was pre-optimized at HF/6-31G(d). ; Attempted RHF single point energy failed to converge with these basis sets:. > 6-311g(3df); > 6-311g(3df,p); > 6-311g(3df,2p); > 6-311g(3df,2pd); > 6-311g(3df,3pd); > aug-cc-pV(D+d)Z; > aug-cc-pV(Q+d)Z; > aug-cc-pV(T+d)Z; > g3mp2large. They all have at least 3df polarization, some more. Not all heavily polarized 6-311G(*) basis sets contain both C, Cl so these basis sets are only 5 of the 51 6-311?G(etc) sets. Doubtless, the other 10 sets with diffuse functions (e.g., 6-311++G(3df)) will fail but take longer at it. Though large, the 7152 Mb memory allocation requirement did not exhaust available shared memory. G3(MP2) method requires the g3mp2large basis set and the Wilson Group's cc-CA methods require the aug-cc-pV([DQT]+d)Z basis sets. Minimal test case attached.; [CH3Cl-3df-fail.zip](https://github.com/psi4/psi4/files/214171/CH3Cl-3df-fail.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340:107,optimiz,optimized,107,https://psicode.org,https://github.com/psi4/psi4/issues/340,1,['optimiz'],['optimized']
Performance,File 1 Retained After full_hess_every Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1306:38,Optimiz,Optimization,38,https://psicode.org,https://github.com/psi4/psi4/issues/1306,1,['Optimiz'],['Optimization']
Performance,File 1 is not removed after an optimization in which a hessian is computed. This causes the step counter to not restart after consecutive optimizations. Example file below. Should be fixed as part of #1289 or Py-Optking. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; full_hess_every 0; g_convergence gau_verytight; }. optimize('scf'); optimize('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1306:31,optimiz,optimization,31,https://psicode.org,https://github.com/psi4/psi4/issues/1306,4,['optimiz'],"['optimization', 'optimizations', 'optimize']"
Performance,Fix #2875: remove cached `nmo_` var,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:18,cache,cached,18,https://psicode.org,https://github.com/psi4/psi4/pull/2980,1,['cache'],['cached']
Performance,Fix energy return value of optimize() for IRC jobs.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292:27,optimiz,optimize,27,https://psicode.org,https://github.com/psi4/psi4/pull/292,1,['optimiz'],['optimize']
Performance,Fix performance issue in DF SCF Hessians,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1805:4,perform,performance,4,https://psicode.org,https://github.com/psi4/psi4/pull/1805,1,['perform'],['performance']
Performance,Fix race condition in maximum orbital gradient of parallel ODCT.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1435:4,race condition,race condition,4,https://psicode.org,https://github.com/psi4/psi4/pull/1435,1,['race condition'],['race condition']
Performance,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1054:504,optimiz,optimize,504,https://psicode.org,https://github.com/psi4/psi4/issues/1054,2,['optimiz'],['optimize']
Performance,GHA docs concurrency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2172:9,concurren,concurrency,9,https://psicode.org,https://github.com/psi4/psi4/pull/2172,1,['concurren'],['concurrency']
Performance,"Geom looks reasonable, and the calculation performed with the ghost atoms as *real* atoms goes just fine. Just this portion of the counterpoise-corrected intene goes off the rails. I've tested in both 1.6.x and 1.7.x; I don't have 1.8.x installed but if someone else does it's a very light weight calc to try. . Input:; ```set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); ```. Output:. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (inplace). Git: Rev (inplace). D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:43,perform,performed,43,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['perform'],['performed']
Performance,Geometry optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['optimiz'],['optimization']
Performance,Geometry optimization crashes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/2208,1,['optimiz'],['optimization']
Performance,Geometry optimization failures,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/18,1,['optimiz'],['optimization']
Performance,Get useful info back after optimizer errors,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:27,optimiz,optimizer,27,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['optimiz'],['optimizer']
Performance,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:263,load,loading,263,https://psicode.org,https://github.com/psi4/psi4/issues/565,3,"['cache', 'load']","['cache', 'loading']"
Performance,"Hello PSI4 developers. [CASINO](https://en.wikipedia.org/wiki/CASINO) is well known program for performing quantum Monte Carlo (QMC) electronic structure calculations. Third-party codes are required to generate trial wave function. Support for Gaussian basis set quantum chemistry code is provided through the **[molden2qmc](https://github.com/Konjkov/molden2qmc)** utility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:96,perform,performing,96,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['perform'],['performing']
Performance,"Hello Psi4!; First of all, thank you for your hard work on improving the Psi.; This is not a bug report but rather a possible enhancement: we have recently developed a wave function format called [TREXIO](https://github.com/TREX-CoE/trexio) with the focus on self-consistence and I/O performance. The format comes with a C library and an API to interact with the data: it has a text (ASCII-based) and HDF5 (binary) back ends for I/O. Bindings in Python, Fortran and OCaml are available. Sparse data like 2e integrals or CI coefficients are stored in a sparse data representation (similar to FCIDUMP) which significarntly improved the performance of the I/O (especially in the HDF5 case). The source code can be found [here](https://github.com/TREX-CoE/trexio) and a detailed description of the format and an API can be found [here](https://trex-coe.github.io/trexio/trex.html). Would it be interesting to have TREXIO as an alternative I/O back end in Psi4? The library is packaged for both PyPI and conda (via conda-forge). I am one of the core developers and can help/contribute.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:284,perform,performance,284,https://psicode.org,https://github.com/psi4/psi4/issues/2847,2,['perform'],['performance']
Performance,"Hello Psi4,. I am running a geometry optimisation for a small molecule with a chlorium atom (see the Psi4 input at the bottom of this page) and get the following error. It comes from the fact that the atomic symbols are uppercased by Psi4 (e.g. `CL` for chlorium) while `geometric` engine expects them capitalized (e.g. `Cl`). I have a one-liner fix for this which should go in the `driver.py` module. I can open a PR or communicate the fix here, whatever you prefer. ```; Traceback (most recent call last):; File ""/opt/conda/envs/psi4-env/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 50, in <module>; File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 1152, in optimize; return optimize_geometric(name, **kwargs); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 918, in optimize_geometric; optimizer.prepareFirstStep(); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/optimize.py"", line 376, in prepareFirstStep; self.H0 = self.IC.guess_hessian(self.coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 3457, in guess_hessian; Hprim = self.Prims.guess_hessian(coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 2730, in guess_hessian; elem1 = min(Elements.index(self.elem[ic.a]), Elements.index(self.elem[ic.b])). ValueError: 'CL' is not in list. Printing out the relevant lines from the Psithon --> Python processed input file:; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; core.set_global_option(""GEOM_MAXITER"", 5); --> optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```. Versions:; - geometric 1.0; - psi4 1.7+6ce35a5; - python 3.9. Psi4 input file:; ```; memory 14000 MB; molecule ligand {; 0 1; Cl -1.0833 -0.2140 0.0000 ; O -0.3456 1.2535 0.0000 ; O 1.0833 1.2535 0.0000 ; N 1.0362 -0.4689 0.0000 ; N -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:726,optimiz,optimize,726,https://psicode.org,https://github.com/psi4/psi4/issues/2871,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"Hello Psi4. I have been doing some `oeprop` calculations and noticed that the `oeprop` module is case-sensitive, meaning some properties are not computed if requested from `oeprop` in lower case. Perhaps it is a common knowledge, but since this was not mentioned in the `oeprop` documentation - I bring it here. However, my issue is related to `MBIS_VOLUME_RATIOS`. When given in lower case to `oeprop` - Psi4 performs free-atom calculations for each atom type in the molecule (confirmed by `.log` file contents too), but does not perform (or at least does not print) the MBIS volume ratios. Thus, it seems like it does some premilinary MBIS calculations to get free-atom volumes, which is a bit surprising since I would expect it to ignore the `mbis_volume_ratios` option whatsoever (since it's lower-case). When given in upper case - Psi4 runs and prints as expected. The issue is really when the option is given in lower case. Observed with both Psi4 v.1.8 and 1.8.2 installed via `conda-forge`. Code to reproduce:. ```python; molecule lig {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. set basis def2-TZVPPD; set print 2. grad, wfn = gradient('wb97m-d3bj', return_wfn=True); oeprop(wfn, 'dipole', 'quadrupole', 'mbis_volume_ratios'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3085:410,perform,performs,410,https://psicode.org,https://github.com/psi4/psi4/issues/3085,2,['perform'],"['perform', 'performs']"
Performance,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804:25,load,load,25,https://psicode.org,https://github.com/psi4/psi4/issues/804,1,['load'],['load']
Performance,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244:28,perform,perform,28,https://psicode.org,https://github.com/psi4/psi4/issues/2244,1,['perform'],['perform']
Performance,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:38,optimiz,optimize,38,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance,"Hello,. Currently, there is the feature:; ```; set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; ```. Since one might start from a very reasonable conformer, there are some use cases; where you want to optimize the geometry, but keep the dihedral angles (from rotatable bonds); as close as possible to their initial values. The current interface makes it quite painful to setup this for one molecule.; And I need to do this for many molecules... Regards,; F.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3170:205,optimiz,optimize,205,https://psicode.org,https://github.com/psi4/psi4/issues/3170,1,['optimiz'],['optimize']
Performance,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:50,perform,perform,50,https://psicode.org,https://github.com/psi4/psi4/issues/2747,3,"['load', 'perform']","['loads', 'perform', 'performance']"
Performance,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:131,perform,performance,131,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['perform'],['performance']
Performance,"Hello,; One of our users hit a problem last year on our supercomputer with his SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation for his jobs for which we decided that 4 cpus would give him optimum efficiency. However, the jobs were large enough as to take > 1000 hours (also frowned upon by our sysadmins) so I was asked to look into whether he could make better parallel use of the processors. We had some teething problems bringing our new supercomputer on line last year so I wanted to rule out issues on our side and I think I have now ruled out issues with IO, memory and threading (that had affected other programs).; Furthermore, during the investigations we noticed that ""top"" showed an almost equal alternation between one cpu and maximum cpus thus averaging above/below 50% use no matter how many cpus were requested. Roger Amos and I had a quick look at the SAPT papers and decided there wasn't anything intrinsic about the method that wouldn't allow it to parallel or would cause this behaviour (note I initially thought it might be a load imbalance between monomer basis and dimer basis calculations but it isn't). Also, subsequently we were asked to look into the performance of energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel alternation.; Do you have any thoughts on this and have suggestions for determining optimum number of processors (does it depend on memory?) for this sort of calculation?; Thanks.; Rika; PS Do you need an input deck for this? Originally, the smallest case he had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT job) but since then I think I have a 48 hr test case that will also display this behaviour. I'll need to ask the user for permission to pass it on first though.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57:1074,load,load,1074,https://psicode.org,https://github.com/psi4/psi4/issues/57,2,"['load', 'perform']","['load', 'performance']"
Performance,Hello. is it possible for excited state optimization in psi4 and search for a transition in the excited state?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106:40,optimiz,optimization,40,https://psicode.org,https://github.com/psi4/psi4/issues/3106,1,['optimiz'],['optimization']
Performance,"Here's a minimal reproducible example (`mp_test.py`):. ```python; import multiprocessing as mp; import psi4. def run_psi4():; print(""start""); psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy(""scf/sto-3g""); print(""done""); return. if __name__ == ""__main__"":; proc = mp.Process(target=run_psi4); # proc.run(); proc.start(); proc.join(); ```. This script doesn't run successfully on an Ubuntu machine, where `multiprocessing` uses `fork` to start new processes - it just dies silently partway through starting out. . Here's the output: ; ```; $ python mp_test.py; start. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on 4f210325e2d9; *** at Tue Jul 2 19:27:19 2024. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /opt/conda/share/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:866,Load,Loading,866,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Load'],['Loading']
Performance,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213:42,optimiz,optimization,42,https://psicode.org,https://github.com/psi4/psi4/issues/2213,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Hi PSI4 developers.; I want to do OMP2 (OMP3/OCEPA) run and dump out optimized orbitals into molden file like ""molden_write true"" does.; Is it possible at the moment?. Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185:69,optimiz,optimized,69,https://psicode.org,https://github.com/psi4/psi4/issues/185,1,['optimiz'],['optimized']
Performance,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:252,perform,performing,252,https://psicode.org,https://github.com/psi4/psi4/issues/915,1,['perform'],['performing']
Performance,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:64,optimiz,optimizations,64,https://psicode.org,https://github.com/psi4/psi4/issues/789,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi chaps,; I've been trying to get Psi4 (1.0.54 Git: Rev {master} 8d4cec3 dirty) to accept user-defined mid-bond sets. To do this I have placed a set of mid-bond definitions in mb-set.gbs and used the heavier rare-gas atoms (Kr, Xe, Rn) to label the mid-bond sets. Using the commands. basis {; assign aug-cc-pVDZ; assign Rn mb-set # gets the basis set for the ghost Rn atoms from mb-set.gbs; }. Psi4 is able to perform standard (non-DF) MP2 and CC calculations using mid-bond functions. However I have encountered problems getting this to work using the DF variants of these methods. As I understand it, to get the DF-MP2, DF-CC etc to work I need to do the following:. 1. Create a set of auxiliary functions for these mid-bond sets. This I have done (mb-set-ri.gbs); 2. Specify the auxiliary basis set using; assign <aux basis> df_basis_scf/mp2. The only source of information I was able to find on the latter was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626:411,perform,perform,411,https://psicode.org,https://github.com/psi4/psi4/issues/626,1,['perform'],['perform']
Performance,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905:257,optimiz,optimization,257,https://psicode.org,https://github.com/psi4/psi4/issues/905,1,['optimiz'],['optimization']
Performance,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:597,cache,cachedir,597,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['cache'],"['cache', 'cachedir']"
Performance,"Hi, this is more of a question than an issue (almost certainly due to user error), but I haven't been able to get too far by reading the documentation. . I am trying to achieve the following using the Psi4 Python API: generate a basis set for a molecule, import a predefined grid into Psi4, and evaluate all the basis functions in a basis set on all grid points. Here's a minimal example of that (`wts.npy` and `pts.npy` are in the attached zip file). ```; def minimal_repro():; basis_set = 'cc-pv5z-jkfit'; mol_desc = '''; C 1.54012679 -1.01667266 0.93163498; C 4.07235980 -0.09826576 -0.02267671; H 1.37950007 -0.71809593 2.97064947; H 0.00000000 0.00000000 0.00000000; H 1.31146993 -3.03678988 0.54991030; H 5.61248659 -1.11682814 0.90706854; H 4.30290639 1.92185147 0.36093769; H 4.23298652 -0.39684249 -2.06169120; '''; p4mol = psi4.geometry(mol_desc). # not sure what this parameter should be set to; delta = 0.1. wts = np.load('wts.npy'); pts = np.load('pts.npy'). basis_set = psi4.core.BasisSet.build(p4mol, 'ORBITAL', basis_set); basis_extents = psi4.core.BasisExtents(basis_set, delta). xs = psi4.core.Vector.from_array(pts[:, 0]); ys = psi4.core.Vector.from_array(pts[:, 1]); zs = psi4.core.Vector.from_array(pts[:, 2]); ws = psi4.core.Vector.from_array(wts). blockopoints = psi4.core.BlockOPoints(xs, ys, zs, ws, basis_extents); max_points = blockopoints.npoints(); max_functions = basis_set.nbf(); funcs = psi4.core.BasisFunctions(basis_set, max_points, max_functions); funcs.compute_functions(blockopoints). vals = np.array(funcs.basis_values()['PHI']). all_zeros = []; for col_idx in range(vals.shape[1]):; if np.allclose(vals[:, col_idx], 0.0):; all_zeros.append(col_idx). print('basis fcns that are all zeros', all_zeros); ```. My question is regarding the `delta` parameter to the `BasisExtents` object. Modulating this parameter seems to change the number of basis functions that evaluate to zero at all grid points. For example, at delta = 0.01, I get:. ```; ('basis fcns that are ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051:929,load,load,929,https://psicode.org,https://github.com/psi4/psi4/issues/1051,2,['load'],['load']
Performance,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656:70,load,loaded,70,https://psicode.org,https://github.com/psi4/psi4/issues/656,1,['load'],['loaded']
Performance,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1936:805,load,loaded,805,https://psicode.org,https://github.com/psi4/psi4/issues/1936,1,['load'],['loaded']
Performance,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:150,optimiz,optimizing,150,https://psicode.org,https://github.com/psi4/psi4/issues/3154,2,['optimiz'],"['optimize', 'optimizing']"
Performance,"Hi,. I am wondering if it is possible to run a torsion scan from the python API using cartesian coordinates. . For example, can the following be executed solely from python?; (copying code from here : https://psicode.org/psi4manual/master/optking.html?highlight=torsion+scan#constrained-optimizations). ```; molecule hooh {; 0 1; H; O 1 0.95; O 2 1.39 1 103; H 3 0.95 2 103 1 D. D = 99. units ang; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])); ```. Thanks,; Erik",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910:287,optimiz,optimizations,287,https://psicode.org,https://github.com/psi4/psi4/issues/2910,2,['optimiz'],"['optimizations', 'optimize']"
Performance,"Hi,. I have a molecule that has Gallium ion approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:129,perform,perform,129,https://psicode.org,https://github.com/psi4/psi4/issues/3134,1,['perform'],['perform']
Performance,"Hi,. I have been comparing the basis sets _aug-cc-pVTZ_ and _aug-cc-pVQZ_. While I was running frequency calculations on a large set of molecules, I found out that some of my molecules never converged. This is not surprising, as there will always be complex geometries that will have a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016:454,optimiz,optimization,454,https://psicode.org,https://github.com/psi4/psi4/issues/2016,1,['optimiz'],['optimization']
Performance,"Hi,. I just got an MRCC license and started toying around with the Psi4 interface. Unfortunately, it is not working for me. ; ```; molecule {; 0 1; O; H 1 1.0; H 1 1.0 2 110.0; }. set qc_module mrcc; optimize('ccsdt/cc-pvdz'); freq('ccsdt/cc-pvdz'); ```; Using the mrcc.2023-08-28.binary.tar.gz binary release, I just get a big bunch of file not found errors; ```; $ psi4 -n6 h2o.in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:200,optimiz,optimize,200,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['optimiz'],['optimize']
Performance,"Hi,. I was running an optimzation followed by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:715,optimiz,optimize,715,https://psicode.org,https://github.com/psi4/psi4/issues/2020,2,['optimiz'],['optimize']
Performance,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:415,optimiz,optimize,415,https://psicode.org,https://github.com/psi4/psi4/issues/1995,3,"['Load', 'optimiz']","['Loading', 'optimize']"
Performance,"Hi,. The input file for the problem described below:. ```; molecule C6H6 {; 0 1; C 0.0 1.855 0.0; C 0.0 -1.855 0.0; C 1.6064771240201337 0.9275 0.0; C 1.6064771240201337 -0.9275 0.0; C -1.6064771240201337 0.9275 0.0; C -1.6064771240201337 -0.9275 0.0; H 0.0 3.289 0.0; H 0.0 -3.289 0.0; H 2.848357553047019 1.6445 0.0; H 2.848357553047019 -1.6445 0.0; H -2.848357553047019 1.6445 0.0; H -2.848357553047019 -1.6445 0.0; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:544,optimiz,optimize,544,https://psicode.org,https://github.com/psi4/psi4/issues/66,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:612,optimiz,optimize,612,https://psicode.org,https://github.com/psi4/psi4/issues/1907,1,['optimiz'],['optimize']
Performance,Hi; I am interested to run a QM optimization on some small molecules and I am not sure how to add a solvent model during the optimization process. I am not wanting to do the calculation in vaccum. What keywords should I use?; Thanks,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3178:32,optimiz,optimization,32,https://psicode.org,https://github.com/psi4/psi4/issues/3178,2,['optimiz'],['optimization']
Performance,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:111,optimiz,optimization,111,https://psicode.org,https://github.com/psi4/psi4/issues/2510,3,"['load', 'optimiz']","['load-missing-', 'loader-in-google-col', 'optimization']"
Performance,"I am currently building a high throughput program to calculate various one electron properties of large sets of molecules. . I am using psi4 1.81 and interacting with the program via the python API. First I optimise the geometry using the QCEngine wrapper, and then run a single point calculation with psi4.energy() where I return the wfn object and run psi4.oeprop(wfn). I am currently using the PBE0/def2-TZVPPD with the DDX solvent model DDX-4.0 level of theory. However, I began noticing the calculation would hang at a certain point, regardless of the level of theory and usage of the ddx solvent model (but seemed to hang quicker with more expansive methods), where the calculation would indefinitely stop at this stage:. ```; ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 136; Number of basis functions: 358; Number of Cartesian functions: 398; Spherical Harmonics?: true; Max angular momentum: 3; ```. I suspected a memory leak so I logged with memory usage at each stage of the calculation with:. ```; def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False); ```. When applying this function to this section of my code:. ``` ; print('memory use before E wfn'); log_memory_usage() ; E, wfn = psi4.energy(f'{settings.method}/{settings.basis}', molecule = molecule_psi4, return_wfn = True); print('memory use after E wfn'); log_memory_usage() ; psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print('memory use after oeprop'); log_memory_usage() ; ``` ; The output to my file with the above logging was:. ```; memory use before E wfn; Memory Usage: 3715.3828125 MB; --; memory use after E wfn; Memory Usage: 3783.52734375 MB; --; memory use after oeprop; Memory Usage: 3802.50390625 MB; --; memory use before wfn interaction; Memory Usage: 3802.50390625 MB; memory use after wfn interaction; Memory Usage: 380",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:31,throughput,throughput,31,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['throughput'],['throughput']
Performance,"I am currently testing out the ddx solvent model implementation (https://psicode.org/psi4manual/master/ddx.html) in my high throughput script. However, currently the DDX_SOLVENT_EPSILON option being ignored in favor of DDX_SOLVENT. . According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could *just* supply the DDX_SOLVENT_EPSILON value directly. However, without supplying the DDX_SOLVENT field too, the calculation fails with `psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:124,throughput,throughput,124,https://psicode.org,https://github.com/psi4/psi4/issues/3119,2,['throughput'],['throughput']
Performance,"I am running expensive SAPT calculations and psi4 dies due to time limit.; My calculations reached upto "" CHF Iterations converged "" and then killed due to the ; time limit of my queue system. It is possible to add restart option to sapt ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/226:179,queue,queue,179,https://psicode.org,https://github.com/psi4/psi4/issues/226,1,['queue'],['queue']
Performance,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989:39,optimiz,optimizations,39,https://psicode.org,https://github.com/psi4/psi4/issues/989,2,['optimiz'],"['optimizations', 'optimize']"
Performance,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:242,optimiz,optimization,242,https://psicode.org,https://github.com/psi4/psi4/issues/2117,3,['optimiz'],"['optimization', 'optimize']"
Performance,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:424,load,loaded,424,https://psicode.org,https://github.com/psi4/psi4/issues/710,3,"['cache', 'load']","['cache', 'cachedir', 'loaded']"
Performance,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:146,Perform,Performing,146,https://psicode.org,https://github.com/psi4/psi4/issues/199,2,['Perform'],['Performing']
Performance,"I had a crash for a geometry optimization, this is the stack track:. Reading symbols from /app/miniconda/bin/psi4...(no debugging symbols found)...done.; [New LWP 7474]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Core was generated by `psi4'.; Program terminated with signal SIGABRT, Aborted.; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55. 55 return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);; (gdb) where; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55; #1 0x00006a91c31f353a in __GI_abort () at abort.c:89; #2 0x00000000014c2e4f in opt::optking(psi::Options&) (); #3 0x0000000000a4c2fc in py_psi_optking() (); #4 0x0000000000a8993e in boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (); #5 0x000000000554b96e in boost::python::objects::function::call(_object_, _object_) const (); #6 0x000000000554b6a5 in boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimization']
Performance,"I have a system, where I'm interested in running sapt2+/aug-cc-pVDZ calculation. However, it quits after the start of SAPT2+. ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT2+ //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on cnode3005; *** at Sat Feb 29 03:11:38 2020. SAPT2+ ; Ed Hohenstein; 6 June 2009. Orbital Information; --------------------------; NSO = 1061; NMO = 1061; NRI = 3161; NOCC A = 69; NOCC B = 56; FOCC A = 19; FOCC B = 15; NVIR A = 992; NVIR B = 1005. Estimated memory usage: 140951.0 MB. Natural Orbital Cutoff: 1.000E-06; Disp(T3) Truncation: Yes; CCD (vv|vv) Truncation: Yes; MBPT T2 Truncation: Yes. Monomer A: 486 virtual orbitals dropped; Monomer B: 598 virtual orbitals dropped; ```; This the end of the log file.; ```; /home/XXX/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00007F6CEC755A15 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC753637 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BF32 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BD86 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63A38D Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63D75D Unknown Unknown Unknown; libpthread.so.0 00000034CF00F710 Unknown Unknown Unknown; core.so 00007F6CF40872D2 Unknown Unknown Unknown; core.so 00007F6CF4087EDA Unknown Unknown Unknown; core.so 00007F6CF408927E Unknown Unknown Unknown; core.so 00007F6CF404A1F0 Unknown Unknown Unknown; core.so 00007F6CF3F6CDF7 Unknown Unknown Unknown; core.so 00007F6CF33B0027 Unknown Unknown Unknown; core.so 00007F6CF33F983F Unknown Unknown Unknown; core.so 00007F6CF33C3CEA Unknown Unknown Unknown; core.so 00007F6CF33C3BB4 Unknown Unknown Unknown; core.so 00007F6CF304A32C Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FDD1 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:849,load,loaded,849,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['load'],['loaded']
Performance,"I have compiled psi4 on Linux (Centos) then I got the following run time error . ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so."". I have already sourced MKL and intel compilers as usual, with the following lines. ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/bin/compilervars.sh intel64; source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/mkl/bin/mklvars.sh intel64"". In old versions of psi4 I never encounter such a problem with the same intel package. Thanks,. @loriab @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552:112,load,load,112,https://psicode.org,https://github.com/psi4/psi4/issues/552,1,['load'],['load']
Performance,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:440,optimiz,optimize,440,https://psicode.org,https://github.com/psi4/psi4/issues/1265,2,['optimiz'],"['optimizations', 'optimize']"
Performance,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:1736,optimiz,optimization,1736,https://psicode.org,https://github.com/psi4/psi4/issues/2631,1,['optimiz'],['optimization']
Performance,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/issues/1947,3,['optimiz'],"['optimization', 'optimize']"
Performance,"I run Psi4 version 1.4 and Python 3.8 on Ubuntu 20.04.1. I wanted to calculate termochemistry properties and found that running the following:; ```; frequency(""scf""); frequency(""hf""); ```; somehow broke after optimization has completed. Although I redirected stderr to log file, there is nothing. I only receive one word in polish meaning obliterated or annihilated (in the terminal not log file). It also seems that running; ```; frequency(""mp2""); ```; resulted in displacements. . I openend a thread at [Psi forum](http://forum.psicode.org/t/optimization-complete-obliterated-annihilated/2301) regarding the issue. There is my input file. I created the issue because the returning information that I received lacks any information why does the calculation fail.; Thanks in advance for handling the problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297:209,optimiz,optimization,209,https://psicode.org,https://github.com/psi4/psi4/issues/2297,2,['optimiz'],"['optimization', 'optimization-complete-obliterated-annihilated']"
Performance,"I suspect there is something problematic in python with the use of the bash dot to specify a directory, or the use of a non-global path location. I know it is problematic with psi4+cfour. These will **not** work for me for cfour optimizations:; `psi4 -s . opt.in` [here the gradient is not parsed]; `psi4 -s ./localdir opt.in` [does not find the (correctly created) directory]. This works:; `psi4 -s /scratch/ opt.in`. If you want to force users to always use a global path, I would be fine with it. [ Psi4 1.1a2.dev375 (af8133b)]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/669:229,optimiz,optimizations,229,https://psicode.org,https://github.com/psi4/psi4/issues/669,1,['optimiz'],['optimizations']
Performance,"I tried to run a geometry optimization on (H_2)+. A segfault occurs. Input file:. memory 250 mb. molecule h2 {; 1 2; H; H 1 1.5; }. set reference uhf; set basis aug-cc-pVDZ; optimize('scf'). Valgrind trace; ==12400== Invalid read of size 8; ==12400== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (in /usr/bin/psi4); ==12400== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (in /usr/bin/psi4); ==12400== by 0x67BD9E: py_psi_scfgrad() (in /usr/bin/psi4); ==12400== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (in /usr/bin/psi4); ==12400== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12400== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12400== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12400== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0); ==12400== Address 0x0 is not stack'd, malloc'd or (recently) free'd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6:26,optimiz,optimization,26,https://psicode.org,https://github.com/psi4/psi4/issues/6,2,['optimiz'],"['optimization', 'optimize']"
Performance,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:19,perform,perform,19,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['perform'],['perform']
Performance,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:10,optimiz,optimize,10,https://psicode.org,https://github.com/psi4/psi4/issues/1095,6,['optimiz'],"['optimization', 'optimize', 'optimizer']"
Performance,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858:37,optimiz,optimization,37,https://psicode.org,https://github.com/psi4/psi4/issues/858,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimizer']"
Performance,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1296:64,optimiz,optimize,64,https://psicode.org,https://github.com/psi4/psi4/issues/1296,2,['optimiz'],['optimize']
Performance,I would like to run minimizations with an additional harmonic constraint such that the input coordinates are favored. The use case is for computing strain energy against a decreasing force.; I am currently running many of these calculations after modifying the code as described here:; http://forum.psicode.org/t/optimization-with-additional-harmonic-constraints/404/2. In essence we are changing lines 196 and 197 in Molecule.cc to this:; // Increase force constant by 5% of initial value per iteration; k = Opt_params.fixed_coord_force_constant;; H[cnt][cnt] += k;; Note: that the forum post has a minor bug: it is not adding the fc to H but just replacing the element in H. Would it be possible to have this as an option in the official build of Psi4? I think this would be useful for other people. Thanks so much!; Alberto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1079:313,optimiz,optimization-with-additional-harmonic-constraints,313,https://psicode.org,https://github.com/psi4/psi4/issues/1079,1,['optimiz'],['optimization-with-additional-harmonic-constraints']
Performance,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:321,perform,performing,321,https://psicode.org,https://github.com/psi4/psi4/issues/954,1,['perform'],['performing']
Performance,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:406,optimiz,optimized,406,https://psicode.org,https://github.com/psi4/psi4/issues/1354,1,['optimiz'],['optimized']
Performance,"I'm in the process of implementing forces in my own code, ERKALE. Related; to this, I was looking at the nuclear attraction integral derivative code; in PSI. Interestingly, it would seem that there is a bug in PSI: the loop limits; are the same in the derivative code as in the normal attraction integral; code. The relevant code in src/lib/libmints/osrecur.cc is. ```; int mmax = am1 + am2;. double *F = new double[mmax+1];. // Form Fm(U) from A20; calculate_f(F, mmax, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; for (m=0; m<=mmax-1; ++m) {; vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; }; ```. Table X in the Obara-Saika paper states that; (s | Au | s)^(0) = 2 zeta ( Pu - Cu ) (s | A0 | s)^(1). If you look at what the code above does, it gives a plain zero for this; integral. Furthermore, if you look at the recursion formulas for the integral derivatives A(mu), you see that they are equivalent to the case A(0) with an additional term depending on A(mu-1i). However, in the initializations and the recursions the derivatives only go to mmax-1, not mmax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3:479,Perform,Perform,479,https://psicode.org,https://github.com/psi4/psi4/issues/3,1,['Perform'],['Perform']
Performance,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:522,Perform,Performing,522,https://psicode.org,https://github.com/psi4/psi4/issues/1426,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287:14,optimiz,optimize,14,https://psicode.org,https://github.com/psi4/psi4/issues/2287,2,['optimiz'],"['optimization', 'optimize']"
Performance,"I'm trying to perform SAPT calculations with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:14,perform,perform,14,https://psicode.org,https://github.com/psi4/psi4/issues/2989,1,['perform'],['perform']
Performance,"I've been investigating orbital convergence problems in the `occ` module, such as in [this test case](https://github.com/psi4/psi4/blob/master/tests/omp2-3/input.dat). I find that convergence massively improves when I turn level shifting _off_, as it is [on by default](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L2695). `grep -inr 'level_shift' .` indicates that the level shifting is currently being used exclusively [to scale the diagonal elements of the B matrix in the orbital optimization step of DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/diis.cc#L74-L77). @bozkaya, I know this is old code, but can you comment on why you did the level shifting this way? This doesn't seem similar to any level shifting scheme I've ever seen. My quick numerical tests indicate that this makes convergence _much worse_, and getting rid of this heals some tests that @loriab is currently concerned about. Comments from @susilehtola are also welcome for this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777:505,optimiz,optimization,505,https://psicode.org,https://github.com/psi4/psi4/issues/1777,1,['optimiz'],['optimization']
Performance,"I've made changes and then had only the opt-irc-2 test case fail. Now I notice that others are having problems: https://testboard.org/cdash/testSummary.php?project=3&name=opt-irc-2&date=2016-02-27 . This is only a slight discrepancies at the end of a long IRC. In my case, at least, the number of IRC steps is the same. Do convergence keyword need tightening to preserve the reference progress of the IRC? Or does the compare_values check just need loosening to account for variance after many many optimization cycles? @avcopan, could you investigate?. Energy of last IRC point: computed value (-92.869134) does not match (-92.868907) to 5 decimal places.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290:499,optimiz,optimization,499,https://psicode.org,https://github.com/psi4/psi4/issues/290,1,['optimiz'],['optimization']
Performance,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145:87,load,load,87,https://psicode.org,https://github.com/psi4/psi4/issues/1145,3,"['load', 'optimiz']","['load', 'optimization', 'optimize']"
Performance,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052:60,perform,perform,60,https://psicode.org,https://github.com/psi4/psi4/issues/1052,1,['perform'],['perform']
Performance,"If you use the new optking feature that allows freezing of individual Cartesian coordinates _without_ also setting `no_reorient` and `no_com`, the molecule reportedly turns into a ""high-speed car wreck"". It is requested that the driver turn those molecule options on when performing such optimizations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179:272,perform,performing,272,https://psicode.org,https://github.com/psi4/psi4/issues/179,2,"['optimiz', 'perform']","['optimizations', 'performing']"
Performance,"Improved fixed-coordinate optimizations, PES scans.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328:26,optimiz,optimizations,26,https://psicode.org,https://github.com/psi4/psi4/pull/328,1,['optimiz'],['optimizations']
Performance,"Input below gives error below. Should this happen, @psi-rking?. ```. molecule innocentlookingwater {; O 0.00000000 0.00000000 0.00000000; H 0.16863830 0.60275550 -0.70533100; H -0.76265500 0.37866910 0.40513500; O -0.18467200 2.33422480 0.31265570; H 0.48244850 1.84992580 0.77377280; H -0.08271400 3.22838610 0.58596930; }. set basis 6-31g. optimize('scf'); ```. ```; TORS::compute_val: unable to compute torsion value; Optimizer: Optimization failed!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/231:342,optimiz,optimize,342,https://psicode.org,https://github.com/psi4/psi4/issues/231,3,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimize']"
Performance,"Is there any way to compute analytical nuclear gradients with solvent models? If none, any future plan to implement it?. It would be great if I could optimize a molecular geometry in a solvent by psi4 which has lots of excellent methods available.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2862:150,optimiz,optimize,150,https://psicode.org,https://github.com/psi4/psi4/issues/2862,1,['optimiz'],['optimize']
Performance,JK Memory estimates and tighter bounds on DFT cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:46,cache,cache,46,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['cache'],['cache']
Performance,Locally working optking 3.0 call through psi4.optimize(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120:46,optimiz,optimize,46,https://psicode.org,https://github.com/psi4/psi4/pull/1120,1,['optimiz'],['optimize']
Performance,MP2.5 and MP3 geometry optimizations crash for 2 electron systems,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:23,optimiz,optimizations,23,https://psicode.org,https://github.com/psi4/psi4/issues/893,1,['optimiz'],['optimizations']
Performance,"Memory usage seems to climb upon repeating calculations in the same process. Here's my test script:. ```; import os; import psi4; import psutil. def check_resources():; process = psutil.Process(os.getpid()); return f""Memory used by process: {process.memory_info().rss / (1024 ** 2):.2f} MB"". cyanamide = psi4.geometry(""""""; C 0.000 0.239 0.000; N -0.044 1.395 0.000; N 0.134 -1.155 0.000; H -0.315 -1.556 0.837; H -0.315 -1.556 -0.837; """"""). for n in range(21):; psi4.energy(""r2scan-3c""); psi4.core.clean(). with open(""psi4.log"", ""a"") as f2:; f2.write(f""{n}: {check_resources()}\n""); ```. Here's what I get:. ```; 0: Memory used by process: 498.48 MB; 1: Memory used by process: 463.73 MB; 2: Memory used by process: 538.73 MB; 3: Memory used by process: 610.47 MB; 4: Memory used by process: 726.72 MB; 5: Memory used by process: 788.34 MB; 6: Memory used by process: 848.44 MB; 7: Memory used by process: 904.81 MB; 8: Memory used by process: 912.50 MB; 9: Memory used by process: 912.62 MB; 10: Memory used by process: 1016.02 MB; 11: Memory used by process: 1022.06 MB; 12: Memory used by process: 1037.52 MB; 13: Memory used by process: 1037.52 MB; 14: Memory used by process: 1036.77 MB; 15: Memory used by process: 1039.41 MB; 16: Memory used by process: 1039.16 MB; 17: Memory used by process: 1039.16 MB; 18: Memory used by process: 1039.16 MB; 19: Memory used by process: 1092.38 MB; 20: Memory used by process: 1094.72 MB; ```. After the first call, only about 500 MB of memory have been claimed; after 10 calls, this has crept up to over 1 GB. This could cause issues e.g. in an *ab initio* MD context, or simply in a lengthy optimization...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3207:1637,optimiz,optimization,1637,https://psicode.org,https://github.com/psi4/psi4/issues/3207,1,['optimiz'],['optimization']
Performance,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504:568,load,loaded,568,https://psicode.org,https://github.com/psi4/psi4/issues/504,1,['load'],['loaded']
Performance,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:10611,optimiz,optimized,10611,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,OMP2 optimized orbitals dump to molden file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185:5,optimiz,optimized,5,https://psicode.org,https://github.com/psi4/psi4/issues/185,1,['optimiz'],['optimized']
Performance,OPTKING PSIO error: optimization data write failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:20,optimiz,optimization,20,https://psicode.org,https://github.com/psi4/psi4/issues/789,1,['optimiz'],['optimization']
Performance,OPTKING: Optimization failure not throwing PsiException,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:9,Optimiz,Optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/800,1,['Optimiz'],['Optimization']
Performance,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236:586,load,load,586,https://psicode.org,https://github.com/psi4/psi4/issues/2236,2,['load'],['load']
Performance,"O](https://en.wikipedia.org/wiki/CASINO) is well known program for performing quantum Monte Carlo (QMC) electronic structure calculations. Third-party codes are required to generate trial wave function. Support for Gaussian basis set quantum chemistry code is provided through the **[molden2qmc](https://github.com/Konjkov/molden2qmc)** utility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1028,optimiz,optimization,1028,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['optimiz'],['optimization']
Performance,"On issue #1861 , reading serialized wavefunctions for CASCI/detci computations was solved. However, I wonder if it was also solved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:190,perform,performing,190,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['perform'],['performing']
Performance,Open-shell DF-MP2 optimization clarifications,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106:18,optimiz,optimization,18,https://psicode.org,https://github.com/psi4/psi4/issues/106,1,['optimiz'],['optimization']
Performance,Optimization Crash,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627:0,Optimiz,Optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/2627,1,['Optimiz'],['Optimization']
Performance,Optimization/frequency calculations using JSON,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:0,Optimiz,Optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['Optimiz'],['Optimization']
Performance,"Optimize and compute vibrational frequencies of a molecule: ; ```python; # test.py; import psi4. print(psi4.__version__). psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); psi4.opt('HF/3-21G'); _, wfn = psi4.freq('HF/3-21G', return_wfn=True). print(wfn.hessian().to_array()); print(wfn.frequencies().to_array()); print(wfn.normalmodes()); ```. The hessian matrix and frequencies are in `Wafefucntion` object, as expected, but the normal mode vectors are missing, i.e. `wfn.normalmodes()` return `None`. ```bash; $ python test.py ; 1.2a1.dev781. ... skipped ... [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; 1.38565530e-17 9.84797134e-18]; [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; 7.17030485e-05 -5.29623161e-18]; [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; -5.29623161e-18 7.17030485e-05]; [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; -1.38565530e-17 -9.84797134e-18]; [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; -7.17030485e-05 5.29623161e-18]; [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; 5.29623161e-18 -7.17030485e-05]]; [4658.84858151]; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/940:0,Optimiz,Optimize,0,https://psicode.org,https://github.com/psi4/psi4/issues/940,1,['Optimiz'],['Optimize']
Performance,Optimize linalg::triplet matrix multiply,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2053:0,Optimiz,Optimize,0,https://psicode.org,https://github.com/psi4/psi4/pull/2053,1,['Optimiz'],['Optimize']
Performance,Optking assign Mn to P in Writting optimization data to binary file step,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1082:35,optimiz,optimization,35,https://psicode.org,https://github.com/psi4/psi4/issues/1082,1,['optimiz'],['optimization']
Performance,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:4039,optimiz,optimization,4039,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['optimiz'],['optimization']
Performance,"PR #2388 replaces most of the hand-coded one electron integrals with Libint2 calls, for code cleanliness and performance. However, some of the integrals we need are not provided by that library. We also need to replace the arbitrary order multipole moment integrals in the current implementation because they use an algorithm that is not numerically stable at high orders. Although we could possibly use the existing Obara-Saika recursion code, arbitrary order derivatives of the potential and arbitrary order multipoles are much better handled by McMurchie Davidson code. As a proof of concept, see the [attached Python script](https://github.com/psi4/psi4/files/7938278/integrals.py.zip) that computes these integrals through arbitrary order, as well as linear momemtum and angular momentum integrals. All of those integrals can be computed through arbitrary orbital angular momentum and the entire code to compute them all / compare to existing Psi4 implementation is around 400 lines (with comments). I plan to open a followup PR with this implementation, getting rid of all of the remaining Obara-Saika code afterwards, but welcome comments / opinions on this proposal.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414:109,perform,performance,109,https://psicode.org,https://github.com/psi4/psi4/issues/2414,1,['perform'],['performance']
Performance,Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Lookin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2605,Perform,Performing,2605,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: Ope,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2564,Perform,Performing,2564,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.413853	 2.335710; 	 R(1,3) = 4.396402	 2.326476; 	 R(1,4) = 3.793656	 2.007516; 	 R(1,7) = 3.809780	 2.016049; 	 R(4,5) = 2.616159	 1.384412; 	 R(4,13) = 2.668916	 1.412329; 	 R(5,6) = 1.963315	 1.038942; 	 R(5,10) = 2.677145	 1.416684; 	 R(7,8) = 2.602016	 1.376927; 	 R(7,29) = 2.755516	 1.458156; 	 R(8,9) = 1.932195	 1.022473; 	 R(8,26) = 2.645360	 1.399864; 	 R(10,11) = 2.753932	 1.457318; 	 R(10,15) = 2.759721	 1.460381; 	 R(11,12) = 2.041576	 1.080355; 	 R(11,13) = 2.590332	 1.370745; 	 R(13,14) = 2.036558	 1.077700; 	 R(15,16) = 2.659974	 1.407597; 	 R(15,24) = 2.642044	 1.398110; 	 R(16,17) = 2.044694	 1.082006; 	 R(16,18) = 2.630038	 1.391756; 	 R(18,19) = 2.044735	 1.082027; 	 R(18,20) = 2.637386	 1.395644; 	 R(20,21) = 2.038431	 1.078691; 	 R(20,22) = 2.641133	 1.397628; 	 R(22,23) = 2.040026	 1.079535; 	 R(22,24) = 2.631332	 1.392441; 	 R(24,25) = 2.044993	 1.082163; 	 R(26,27) = 2.527061	 1.337263; 	 R(26,31) = 2.792237	 1.477588; 	 R(27,28) = 2.042107	 1.080636; 	 R(27,29) = 2.822048	 1.493363; 	 R(29,30) = 2.100722	 1.111654; 	 R(29,58) = 5.078473	 2.687412; 	 R(31,32) = 2.664874	 1.410191; 	 R(31,40) = 2.651117	 1.402911; 	 R(32,33) = 2.041331	 1.080226; 	 R(32,34) = 2.630156	 1.391819; 	 R(34,35) = 2.045401	 1.082380; 	 R(34,36) = 2.634668	 1.394206; 	 R(36,37) = 2.040435	 1.079752; 	 R(36,38) = 2.640649	 1.397371; 	 R(38,39) = 2.040995	 1.080048; 	 R(38,40) = 2.635383	 1.394585; 	 R(40,41) = 2.041778	 1.080462; 	 R(42,43) = 4.405069	 2.331062; 	 R(42,44) = 4.409579	 2.333449; 	 R(42,45) = 3.790992	 2.006107; 	 R(42,48) = 3.811335	 2.016872; 	 R(45,46) = 2.616045	 1.384352; 	 R(45,54) = 2.676356	 1.416267; 	 R(46,47) = 1.967660	 1.041241; 	 R(46,51) = 2.675888	 1.416019; 	 R(48,49) = 2.600961	 1.376369; 	 R(48,70) = 2.754963	 1.457863; 	 R(49,50) = 1.935929	 1.024450; 	 R(49,67) = 2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/1921,2,['optimiz'],['optimization']
Performance,"Psi currently can't project orbitals across different symmetries. Attempting gives you the error, `Cannot compute projection of different symmetries.` We should be able to project to the proper subgroups. This is a common problem in finite difference computations where read is enabled. For an example file. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. This issue is blocking the expected behavior upon fix of #1296. Even when reading orbitals from the original C2v geometry, the orbitals can't be projected to Cs symmetry. #1296 will address problems of poor read orbitals and switching from one proper subgroup of the reference symmetry to another proper subgroup that is not a subgroup of the previous proper subgroup. (Example: A C1 displacement and then a Cs displacement.). Although this causes similar _symptoms_ to #1296, its fix is beyond the scope of modifications to the finite difference code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1297:471,optimiz,optimize,471,https://psicode.org,https://github.com/psi4/psi4/issues/1297,1,['optimiz'],['optimize']
Performance,PsiException: Could not converge geometry optimization in 50 iterations.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2604:42,optimiz,optimization,42,https://psicode.org,https://github.com/psi4/psi4/issues/2604,1,['optimiz'],['optimization']
Performance,"Quicktests fail on Fedora rawhide i686. The test case output is. Testing pywrap-freq-e-sowreap...; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; Testing cc8...; \tFAILED; Testing cc18...; Nuclear repulsion energy..........................................PASSED; SCF energy........................................................PASSED; CCSD correlation energy...........................................PASSED; CCSD total energy.................................................PASSED; \tFAILED; Testing cc19...; \tFAILED; Testing cc28...; \tFAILED; Testing cc49...; \tFAILED. The cc??.test files are empty, but the output.dat's seem sane...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/13:99,Perform,Performing,99,https://psicode.org,https://github.com/psi4/psi4/issues/13,1,['Perform'],['Performing']
Performance,"R is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1016,cache,cache,1016,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['cache'],['cache']
Performance,"RGSCFindices::getNVIRT(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:552: undefined reference to `CheMPS2::DMRGSCFindices::getOrigNVIRTstart(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:580: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:585: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:586: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:593: undefined reference to `CheMPS2::DMRGSCFindices::getNORB(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:605: undefined reference to `CheMPS2::EdmistonRuedenberg::EdmistonRuedenberg(CheMPS2::Hamiltonian*, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:611: undefined reference to `CheMPS2::DMRGSCFunitary::loadU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DIIS::DIIS(int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:623: undefined reference to `CheMPS2::DIIS::loadDIIS(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:637: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:646: undefined reference to `CheMPS2::DMRGSCFunitary::updateUnitary(double*, double*, double*, bool, bool)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:17990,load,loadU,17990,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['load'],['loadU']
Performance,"Radial Points = 88; Spherical Points = 434; Total Points = 292072; Total Blocks = 2181; Max Points = 256; Max Functions = 60; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: DEF2-UNIVERSAL-JFIT; Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry C line 170 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs; atoms 3-8 entry H line 17 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs. ==> Integral Setup <==. DFHelper Memory: AOs need 0.007 GiB; user supplied 83.698 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49756e-02 DIIS; @DF-RKS iter 2: -78.27124917688414 6.15118e-01 2.18391e-02 DIIS; @DF-RKS iter 3: -79.32381221986704 -1.05256e+00 1.08985e-03 DIIS; @DF-RKS iter 4: -79.32638959495554 -2.57738e-03 2.16014e-04 DIIS; @DF-RKS iter 5: -79.32647363265359 -8.40377e-05 3.30059e-05 DIIS; @DF-RKS iter 6: -79.32647565598309 -2.02333e-06 1.23652e-06 DIIS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:6292,Cache,Cached,6292,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Cache'],['Cached']
Performance,Reorder dfocc:dfmp2 Contractions to Remove Bottleneck,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1726:43,Bottleneck,Bottleneck,43,https://psicode.org,https://github.com/psi4/psi4/issues/1726,1,['Bottleneck'],['Bottleneck']
Performance,"Reproduce with the below env.yml file:. ```yaml; channels:; - conda-forge; - psi4. dependencies:; - python =3.9; - datamol ; - numpy; - scikit-learn; - pytorch >=1.10.2; - tqdm; - jupyterlab; - openmm; - psi4 >=1.6; ```. then `mamba env create -n tmp_psi4 -f env.yml` and the error is. ```; conda-forge/linux-64 Using cache; conda-forge/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change. Looking for: ['python=3.10', 'datamol', 'numpy', 'scikit-learn', ""pytorch[version='>=1.10.2']"", 'tqdm', 'jupyterlab', 'openmm', ""psi4[version='>=1.6']""]. Encountered problems while solving:; - nothing provides intel-openmp needed by psi4-1.6+77475b5-py39hceaf722_0; ```. I tried multiple combination of python and psi4 versions without success. Note that the above has been only tested on a linux machine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:318,cache,cache,318,https://psicode.org,https://github.com/psi4/psi4/issues/2621,2,['cache'],['cache']
Performance,"Right now, our SCF instability following algorithm is the following, very dumb one:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then repeat; * If unstable _with a new eigenvalue_, increment the magnitude. It must have been bad. We can guess more intelligently. A _smarter_ algorithm would look like:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then...; * Do a line fit of the SCF energy in the direction of the unstable vector. The instability analysis gave us the first two terms of the Taylor expansion, analytically. Given that, we can then use the SCF energy at the rotated build to fit the _third_ derivative. It may also be possible to project the SCF gradient into the unstable direction. We can then use both pieces of information to fit the third and fourth derivative. (Some numerical tests will be necessary to determine whether the fourth dimensional fit is worthwhile, and good rotation magnitudes.); * We then find the zeroes of f'(x)/x. This is a quadratic, and we can solve the roots analytically. If both are real, evaluate f at both zeroes to find a guess for the true minimum, and continue SCF at the guess rotation. If both are imaginary, a degree four polynomial fit predicts that f(x) has no zeroes, and our fit is unreliable. Print a warning and the current orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045:87,Perform,Perform,87,https://psicode.org,https://github.com/psi4/psi4/issues/3045,2,['Perform'],['Perform']
Performance,"Rotational = 10.668 cal/mol-K (symmetry # = 2); - Vibrational = 0.014 cal/mol-K; ```. Q-Chem Input. ```; $molecule; 0 1; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; $end. $rem; INPUT_BOHR true; BASIS STO-3G; JOBTYPE opt; METHOD hf; $end. @@@. $molecule; read; $end. $rem; INPUT_BOHR true; BASIS STO-3G; JOBTYPE freq; METHOD hf; SCF_GUESS read; ISOTOPES 1; VIBMAN_PRINT 4; THRESH 12; SCF_CONVERGENCE 7; !SYM_IGNORE TRUE; !SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end. $isotopes; 3 0 ! three loops, both at std temp and pressure; 2; 2 2.014101779; 3 2.014101779; 1; 2 2.014101779; 2; 2 2.014101779; 3 3.01604927; $end; ```. Molpro Input. ```; ***,HCl; memory,100,M; geomtyp=zmat; geometry; O,, 0.00000000 , 0.00000000 , 0.00000000; H2,, 0.00000000 , 1.93042809 , -1.10715266; H3,, 0.00000000 , -1.93042809 , -1.10715266; end. basis=sto-3g; GTHRESH,energy=1.d-8. {HF}; {OPTG}. {frequencies,analytic; thermo,; print,thermo}. mass,init,H=2.014101779,O=15.994914619560; {frequencies,analytic; thermo,; print,thermo}. mass,init,O=15.994914619560,H2=2.014101779,H3=1.007825032070; {frequencies,analytic; thermo,; print,thermo}. mass,init,O=15.994914619560,H2=2.014101779,H3=3.01604927; {frequencies,analytic; thermo,; print,thermo}; ```. NW-Chem Input. ```; start h2o; title Water . memory total 1600 mb noverify. geometry units au autosym; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; end; basis noprint; H library sto-3g ; O library sto-3g; end; scf; thresh 1e-6; end; driver; tight; end; task scf optimize. scf; thresh 1e-8; print none; end; task scf freq . freq; reuse; temp 4 298.15 300.0 350.0 400.0; end; task scf freq. freq ; reuse; mass H 2.014101779; temp 1 298.15; end; task scf freq. freq; reuse; mass 2 2.014101779; end; task scf freq. freq; reuse; mass 2 2.014101779 ; mass 3 3.01604927; end; task scf freq; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:8359,optimiz,optimize,8359,https://psicode.org,https://github.com/psi4/psi4/issues/345,1,['optimiz'],['optimize']
Performance,Run crashing at the end of optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:62,Perform,Performing,62,https://psicode.org,https://github.com/psi4/psi4/issues/2023,6,['Perform'],['Performing']
Performance,Running a geometry optimization in direct mode. SCF step reports; ```; ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Integrals threads: 8; Schwarz Cutoff: 1E-12; ```. whereas gradient step reports; ```; ==> DirectJKGrad: Integral-Direct SCF Gradients <==. Gradient: 1; J tasked: Yes; K tasked: Yes; wK tasked: No; Integrals threads: 8; Schwarz Cutoff: 0E+00; ```. The gradient step should use the same screening as the SCF. This is with; ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 undefined . Git: Rev {sadghost} cd5c9b3 dirty; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1540:19,optimiz,optimization,19,https://psicode.org,https://github.com/psi4/psi4/issues/1540,1,['optimiz'],['optimization']
Performance,Running a single point calc on a HCl dimer; [hcl2.zip](https://github.com/psi4/psi4/files/11093879/hcl2.zip); at the CCSD(T)/aug-cc-pvtz level of theory crashes with; ```; Total cached: 139345.9 kB; MRU = 31; LRU = 32; #LRU deletions = 0; #Low-priority deletions = 0; Core max size: 48000000.0 kB; Core used: 47999971.9 kB; Core available: 28.1 kB; Core cached: 139345.9 kB; Locked cached: 139345.9 kB; Most recent entry = 31; Least recent entry = 32; dpd_block_matrix: n = 18 m = 324; Error in: dpd_block_matrix: No memory left.; ```; The program gets allocated 48 Gb of memory and 16 cores. Cache level was set to 1. Any other suggestions?; Script is attached as a zip file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913:178,cache,cached,178,https://psicode.org,https://github.com/psi4/psi4/issues/2913,4,"['Cache', 'cache']","['Cache', 'cached']"
Performance,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:486,optimiz,optimize,486,https://psicode.org,https://github.com/psi4/psi4/issues/2010,5,['optimiz'],"['optimize', 'optimized']"
Performance,SAPT(DFT) MO disk I/O optimization & Exchange-Dispersion scaling scheme update,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:22,optimiz,optimization,22,https://psicode.org,https://github.com/psi4/psi4/pull/2481,1,['optimiz'],['optimization']
Performance,Segfault in RI-HF geometry optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimization']
Performance,Segfault in optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6:12,optimiz,optimization,12,https://psicode.org,https://github.com/psi4/psi4/issues/6,1,['optimiz'],['optimization']
Performance,"Setting `memory 16 gb` results in; ```; Memory set to 14.901 GiB by Python driver.; ```; but this is not reflected in the calculation:; ```; ==> Integral Setup <==. DFHelper Memory: AOs need 3.981 GiB; user supplied 3.981 GiB. Using in-core AOs.; ```; and; ```; Cached 100.0% of DFT collocation blocks in 12.502 [GiB].; ```; which already amounts to 16.5 GiB, causing the job to crash due to insufficient memory.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1819:262,Cache,Cached,262,https://psicode.org,https://github.com/psi4/psi4/issues/1819,1,['Cache'],['Cached']
Performance,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:147,load,loading,147,https://psicode.org,https://github.com/psi4/psi4/issues/688,1,['load'],['loading']
Performance,Single-Atom Optimization Not Intercepted,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971:12,Optimiz,Optimization,12,https://psicode.org,https://github.com/psi4/psi4/issues/2971,1,['Optimiz'],['Optimization']
Performance,"So one does a frequency calc, either by energies or gradients. ```; #! Optimization followed by frequencies H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); #frequencies('scf', dertype='energy') # TOGGLE; frequencies('scf', dertype='gradient') # TOGGLE. eval = psi4.get_frequencies(); eval.print_out(); evec = psi4.get_normalmodes(); evec.print_out(). ref_freqs = psi4.Vector(3) #TEST; ref_freqs.set(0, 0, 1775.65) #TEST; ref_freqs.set(0, 1, 4113.38) #TEST; ref_freqs.set(0, 2, 4212.18) #TEST. fd_freqs = psi4.wavefunction().frequencies() #TEST; compare_vectors(ref_freqs, fd_freqs, 1, ""Reference vs computed frequencies to 0.1 cm^-1"") #TEST; ```. Both versions pass the frequencies check. But if you diff their printed normal modes, as below, the coordinate system seems unaligned. This job doesn't have the sow/reap complication, though it does have the zmat one. Basically, is this expected or correctable?. ```; Frequency: 1775.58 | Frequency: 1775.65; Force constant: 0.1193 Force constant: 0.1193; X Y Z mass X Y Z mass ; O 0.000 0.000 -0.068 15.994915 | O 0.000 0.000 -0.270 15.994915; H 0.000 0.416 0.536 1.007825 | H 0.000 0.417 0.538 1.007825; H 0.000 -0.416 0.536 1.007825 | H 0.000 -0.417 0.538 1.007825. Frequency: 4113.41 | Frequency: 4113.38; Force constant: 0.6403 Force constant: 0.6403; X Y Z mass X Y Z mass ; O 0.000 0.000 0.049 15.994915 | O 0.000 0.000 0.197 15.994915; H 0.000 0.569 -0.392 1.007825 | H 0.000 0.571 -0.393 1.007825; H 0.000 -0.569 -0.392 1.007825 | H 0.000 -0.571 -0.393 1.007825. Frequency: 4212.15 | Frequency: 4212.18; Force constant: 0.6714 Force constant: 0.6714; X Y Z mass X Y Z mass ; O 0.000 0.068 0.000 15.994915 | O 0.000 0.271 0.000 15.994915; H 0.000 -0.537 0.414 1.007825 | H 0.000 -0.539 0.416 1.007825; H 0.000 -0.537 -0.414 1.007825 | H 0.000 -0.539 -0.416 1.007825. ... # # # #; Irrep: 1 Irrep: 1; 1: 1775.5835048 | 1: 1775.6479720; 2: 4113.4094219 | 2: 4113.3793970; 3: 4212",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/225:71,Optimiz,Optimization,71,https://psicode.org,https://github.com/psi4/psi4/issues/225,2,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"Spherical Harmonics?: false; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: SVWN <=. Slater exchange; Vosko, Wilk & Nusair (VWN5_RPA); P. A. M. Dirac, Math. Proc. Cambridge Philos. Soc. 26, 376 (1930) (10.1017/S0305004100016108); F. Bloch, Z. Phys. 57, 545 (1929) (10.1007/BF01340281); S. H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys. 58, 1200 (1980) (10.1139/p80-159). Deriv = 1; GGA = FALSE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_VWN_RPA. => LibXC Density Thresholds <==. XC_LDA_C_VWN_RPA: 1.00E-15; XC_LDA_X: 1.00E-15. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 88; Spherical Points = 434; Total Points = 292072; Total Blocks = 2181; Max Points = 256; Max Functions = 60; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: DEF2-UNIVERSAL-JFIT; Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry C line 170 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs; atoms 3-8 entry H line 17 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs. ==> Integral Setup <==. DFHelper Memory: AOs need 0.007 GiB; user supplied 83.698 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:5456,Load,Loading,5456,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Load'],['Loading']
Performance,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/859:15,perform,performing,15,https://psicode.org,https://github.com/psi4/psi4/issues/859,2,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,Td Molecule Breaks Symmetry-Alignment with Ref. Axes During Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474:60,Optimiz,Optimization,60,https://psicode.org,https://github.com/psi4/psi4/issues/1474,1,['Optimiz'],['Optimization']
Performance,"The Python_EXECUTABLE setting at the top level isn't being propagated down to the libint2 build.; libint2 finds a different Python version and uses it. Multiple Python versions can be installed concurrently, and it is important that the same Python version is used everywhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796:194,concurren,concurrently,194,https://psicode.org,https://github.com/psi4/psi4/issues/2796,1,['concurren'],['concurrently']
Performance,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:1038,cache,cache,1038,https://psicode.org,https://github.com/psi4/psi4/issues/911,2,['cache'],['cache']
Performance,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2215:87,optimiz,optimization,87,https://psicode.org,https://github.com/psi4/psi4/issues/2215,1,['optimiz'],['optimization']
Performance,"The cc-pVnZ-PP and aug-cc-pVnZ-PP series of basis sets, optimized for heavy elements are not available as built in basis sets.; These basis sets are available for most elements from Y to Rn, with the exceptions of alkali and alkaline earth metals, and lanthanides. They are optimized to be used with a small-core ECP that replaces only the inner core electrons, typically one from the Stuttgart-Köln ECP family. Beyond just adding the relevant basis set and ECP definitions there is also a question of ECP selection. Based on a quick look at the docs, currently ECP-optimized basis sets and ECPs are somewhat tied together. The (aug-)cc-pVnZ-PP series does not really fit into that picture, as there are multiple valid choices of ECP. So there should be some user-facing option for selecting the ECP. Also, many of the elements may not have appropriate auxiliary basis sets available, so if DF is the default for some methods, then they should probably switch to conventional/direct/incore instead of erroring out.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2697:56,optimiz,optimized,56,https://psicode.org,https://github.com/psi4/psi4/issues/2697,3,['optimiz'],['optimized']
Performance,"The context of this issue is that I got a report from @bennybp that a number of QCArchive geometry optimizations were failing, in which geomeTRIC was used to optimize the geometry by calling Psi4 (through QCEngine) for single point energies and gradients. The optimizations are part of a dataset of transition metal complexes with initial structures taken from the CSD / ICSD and pre-minimized with a semiempirical model. . Ben sent the QCArchive job specification to my student @hjnpark who converted it to a Psi4 input file (see attached input.dat in data.zip). Using this I was able to reproduce the optimization failure using geomeTRIC's command line calling Psi4 directly. We weren't sure whether the issue was due to geomeTRIC's optimization algorithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:99,optimiz,optimizations,99,https://psicode.org,https://github.com/psi4/psi4/issues/3066,5,['optimiz'],"['optimization', 'optimizations', 'optimize']"
Performance,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:234,optimiz,optimization,234,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['optimiz'],['optimization']
Performance,"The current DIIS code used in DF-OCC code fails if the size of the extrapolated quantity exceeds HUGE(int32) (sorry for the fortran syntax...). An example output including additional debug printout is; ```; ============================================================================== ; ================ Performing DF-OREMP iterations... =========================== ; ============================================================================== ; Minimizing DF-REMP-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -2211.6030242185 -2.21e+03 1.77e-04 4.91e-03 2.60e-06 ; 2 -2211.6180646887 -1.50e-02 9.31e-05 3.61e-03 1.12e-06 ; Matrix::vector_dot: Size of vector 1: 124357188 ; Matrix::vector_dot: Size of vector 2: 4419324484 . Traceback (most recent call last):; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 81, in <module>; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/driver.py"", line 548, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 685, in select_lccd; return func(name, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:305,Perform,Performing,305,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['Perform'],['Performing']
Performance,"The driver recognizes optimize('scf') has UHF analytic gradients, but not optimize('uhf'). Make sure the driver can catch other ways of specifying the same computation, like optimize('uhf') or optimize('hf') (or else warn the user about the preferred way to specify things).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103:22,optimiz,optimize,22,https://psicode.org,https://github.com/psi4/psi4/issues/103,4,['optimiz'],['optimize']
Performance,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:766,optimiz,optimize,766,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['optimiz'],['optimize']
Performance,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:466,load,loaded,466,https://psicode.org,https://github.com/psi4/psi4/issues/1564,1,['load'],['loaded']
Performance,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261:261,cache,cachelevel,261,https://psicode.org,https://github.com/psi4/psi4/issues/2261,1,['cache'],['cachelevel']
Performance,"The following input segfaults:. ```; memory 16GB; molecule{; 0 2; C -1.309749745 1.180176173 -0.025170341; O -0.725300438 2.155147669 0.452713346; C -2.816719340 1.155998649 -0.110605975; H -3.220628949 1.262541455 0.893082386; H -3.209427538 0.248634016 -0.561900090; H -3.143158132 2.016595633 -0.688893115. units angstrom; symmetry c1; }. set{; basis def2-svp; reference uhf; DFCC False; Freeze_core True; CACHELEVEL 0; scf_type direct; print 2; }; set_num_threads(32). properties('ccsd',properties=['polarizability']); ```. I've been able to reproduce this on a serial run. My initial `lldb` run isn't giving reliable information, because it's confusing the various `MOInfo` objects defined in different `cc` modules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2310:409,CACHE,CACHELEVEL,409,https://psicode.org,https://github.com/psi4/psi4/issues/2310,1,['CACHE'],['CACHELEVEL']
Performance,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503:431,Perform,Performing,431,https://psicode.org,https://github.com/psi4/psi4/issues/1503,1,['Perform'],['Performing']
Performance,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809:178,perform,perform,178,https://psicode.org,https://github.com/psi4/psi4/pull/809,1,['perform'],['perform']
Performance,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:88,Perform,Performing,88,https://psicode.org,https://github.com/psi4/psi4/issues/291,3,"['Perform', 'optimiz']","['Performing', 'optimize']"
Performance,"There have been reports of troubled SCF optimizations from within @fevangelista's group. As an attempt to put these to rest, I'll be implementing [EDIIS](https://aip.scitation.org/doi/pdf/10.1063/1.1470195) and making DIIS + EDIIS the default. DIIS + EDIIS is a standard SCF convergence technique, used to great effect by a certain code I'm not going to name. Welcome to 2021, Psi4. Due to potential merge conflicts with #2225, that PR should come in first. Because [this week is the target for 1.4](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272), this is slated for 1.5. Pinging @jturney and @susilehtola as other interested parties.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235:40,optimiz,optimizations,40,https://psicode.org,https://github.com/psi4/psi4/issues/2235,1,['optimiz'],['optimizations']
Performance,This adds a CMAke patch to lower the optimization flags for a particular file to work around a compiler crash icc 18.0.1 discussed in #923.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/925:37,optimiz,optimization,37,https://psicode.org,https://github.com/psi4/psi4/pull/925,1,['optimiz'],['optimization']
Performance,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114:188,optimiz,optimize,188,https://psicode.org,https://github.com/psi4/psi4/issues/1114,6,['optimiz'],"['optimization', 'optimize', 'optimized']"
Performance,"This is a follow-up on #504. It's been a while that I looked into this. I managed to write post-SCF natural orbitals to a molden file, but there is still a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This coul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:818,Load,Loading,818,https://psicode.org,https://github.com/psi4/psi4/issues/1485,1,['Load'],['Loading']
Performance,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:404,optimiz,optimized,404,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['optimiz'],['optimized']
Performance,"This is more of a discussion than an issue, but posting here in case this is considered a bug. Issue: Running `psi4` from the command line results in dramatically different performance than calling it from the command line with `qcengine`. Why is that? Is this intended?. `psi4` was installed via `conda`, note the results below. They suggest that `psi4` runs on a single core when called from the command line, yet multiple cores when called from `qcengine`. Is this intended? A bug? The `qcengine` call is ~3.5x faster. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json; qcengine run psi4 caffeine.json > qcng_out.json 44.65s user 1.51s system 574% cpu 8.041 total; time psi4 --qcschema -i caffeine.json -o psi4_out.json ; psi4 --qcschema -i caffeine.json -o psi4_out.json 29.30s user 0.63s system 99% cpu 29.952 total; ```. The outfiles are attached in case helpful. They are .json files, but had to name them .txt so GitHub would allow an upload. [qcng_out.txt](https://github.com/psi4/psi4/files/8880533/qcng_out.txt); [psi4_out.txt](https://github.com/psi4/psi4/files/8880534/psi4_out.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600:173,perform,performance,173,https://psicode.org,https://github.com/psi4/psi4/issues/2600,1,['perform'],['performance']
Performance,"This is rather an issue of [loriab/libint](https://github.com/loriab/libint), but I open here since it is not allowed there. Steps to reproduce is as follows:; ```console; $ git describe --always; v1.5-45-g2e3b0f2039ff; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3 -D CMAKE_BUILD_TYPE:STRING=RelWithDebInfo; $ cmake --builld build; …; [9/12] Performing build step for 'psi4-core'; [1/1097] Generating version info; Defining development snapshot version: 1.6a1.dev45+2e3b0f2 (computed); 1.6a1.dev45 {master} 2e3b0f2 1.5.0.999 1.5 <-- 1.6a1.dev45+2e3b0f2; [2/1097] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; FAILED: src/CMakeFiles/l2export.dir/export_mints.cc.o ; /usr/bin/c++ -Ipsi4/include -Ipsi4/src -I/usr/include/python3.9 -Ibuild/stage/include -I/path/to/eigen3 -march=native -O2 -g -DNDEBUG -fPIC -std=c++14 -MD -MT src/CMakeFiles/l2export.dir/export_mints.cc.o -MF src/CMakeFiles/l2export.dir/export_mints.cc.o.d -o src/CMakeFiles/l2export.dir/export_mints.cc.o -c psi4/src/export_mints.cc; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/cgshell_ordering.h:63: warning: ""INT_NCART"" redefined; 63 | #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); | ; In file included from psi4/src/export_mints.cc:48:; psi4/src/psi4/libmints/integral.h:46: note: this is the location of the previous definition; 46 | #define INT_NCART(am) ((am >= 0) ? ((((am) + 2) * ((am) + 1)) >> 1) : 0); | ; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_min",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:397,Perform,Performing,397,https://psicode.org,https://github.com/psi4/psi4/issues/2427,1,['Perform'],['Performing']
Performance,"This is the list of changes made for the wavefunction passing update. This is a very large change that modified virtually every file in Psi4, details of the why and what can be found [here](https://github.com/psi4/psi4public/wiki/Changes-to-Information-Passing-in-Psi4-%28Jan-2016%29). This is slightly long, but please read this fully as there is a decent chance that advanced users will have to make some tweaks to their existing input files. A quick rundown of the changes:; - Energy, gradient, etc now actually return a energy (a number), gradient (a matrix), etc. A good example of these changes is [this](https://github.com/psi4/psi4public/commit/a559003d1e4be8ac36107ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::env",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:1196,optimiz,optimize,1196,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['optimiz'],['optimize']
Performance,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:1049,optimiz,optimizations,1049,https://psicode.org,https://github.com/psi4/psi4/issues/259,2,"['Optimiz', 'optimiz']","['Optimization', 'optimizations']"
Performance,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208:109,optimiz,optimize,109,https://psicode.org,https://github.com/psi4/psi4/issues/2208,5,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimize']"
Performance,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:491,optimiz,optimized,491,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:514,cache,cache,514,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['cache'],['cache']
Performance,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:422,optimiz,optimize,422,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['optimiz'],['optimize']
Performance,"Transferred from [the forums](http://forum.psicode.org/t/geometry-optimization-fails-due-to-changing-comp-point-group/1191) and possibly related to #1177. In the following optimization, Psi quits after reporting a tetrahedral molecule falls from `C2v` to `Cs` molecular point group while maintaining `Td` full point group after the first step. ```; import psi4; mol_string = """""" ; C; H 1 %f; H 1 %f 2 TDA; H 1 %f 2 TDA 3 120; H 1 %f 2 TDA 4 120; """"""; mol = lambda x: mol_string%(x,x,x,x); psi4.set_options({""BASIS"": ""def2-qzvppd"", ""scf_type"": ""df""}); geom = psi4.geometry(mol(1.106)); e,wfn = psi4.optimize(""PBE"",molecule=geom, return_wfn=""yes""); ```. The first step appears to break the alignment of the molecular symmetry axes with the reference axes. For comparison, here are the starting coordinates (Bohr) and the coordinates after step 1:; ```; [[ 0. 0. 0. ]; [ 0. 1.70650814 -1.20668348]; [ 1.70650814 0. 1.20668348]; [-1.70650814 0. 1.20668348]; [ 0. -1.70650814 -1.20668348]]. [[-6.64087882e-10 2.94128033e-09 0.00000000e+00]; [-6.64087882e-10 2.06989822e+00 0.00000000e+00]; [-9.75759370e-01 -6.89966085e-01 1.69006481e+00]; [-9.75759370e-01 -6.89966085e-01 -1.69006481e+00]; [ 1.95151875e+00 -6.89966086e-01 0.00000000e+00]]; ```. The original reporter said this problem was observed with this basis set but not others. To me, this suggests numerical noise determines whether the bug occurs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474:66,optimiz,optimization-fails-due-to-changing-comp-point-group,66,https://psicode.org,https://github.com/psi4/psi4/issues/1474,3,['optimiz'],"['optimization', 'optimization-fails-due-to-changing-comp-point-group', 'optimize']"
Performance,"Transition complex optimization (PSI4, V1.3.2)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:19,optimiz,optimization,19,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['optimiz'],['optimization']
Performance,"Travis CI currently takes 2-6 (average 3) hours to complete depending on the current travis load, which is a bit on the long side. To help with this I am proposing that we reduce the number of build types from 15 to the following:; - Latest clang/gcc with both debug and release flags (4 cases); - Oldest supported clang/gcc with both debug and release flags (4 cases). It should be noted that travis CI typically runs the first 3-6 test cases immediately upon submission and then runs the rest in a general queue. The real time killer is when the 15th CI case does not start to run for 2-5 hours after initial submission. With the proposed changes we will hopefully be running through travis consistently in about an hour. . This will deteriorate our CI coverage a bit; however, I think this keeps with the CI spirit and should catch the corner cases that we really worry about. I am looking a bit into something like Docker in addition to Travis so that we can run a full test suite on a local box at the touch of a button. PS: Fiddling around with commits to practice squashing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:92,load,load,92,https://psicode.org,https://github.com/psi4/psi4/pull/237,2,"['load', 'queue']","['load', 'queue']"
Performance,Travis: conda config settings are not saved in cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:47,cache,cache,47,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['cache'],['cache']
Performance,"Tried to run the following keywords, copied directly from examples except for the modification of basis sets & functionals (omitted lengthy molecule which is fine outside of using cubeprop):. `memory 8 Gb. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']. E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); `; The following error ensues post successful optimisation:. `Traceback (most recent call last):; File ""/usr/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 65, in <module>; File ""/usr/lib/psi4/driver/p4util/util.py"", line 101, in cubeprop; cp.compute_properties(). RuntimeError: ; Fatal Error: FRONTIER_ORBITALSis an unrecognized PROPERTY_TASKS value; Error occurred in file: /build/psi4-XGp1km/psi4-1.1/psi4/src/psi4/libcubeprop/cubeprop.cc on line: 196; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::CubeProperties::compute_properties(); pybind11::cpp_function::initialize<pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}, void, psi::CubeProperties*, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}&&, void (*)(psi::CubeProperties*), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(pybind11::detail::function_record*, pybind11::handle, pybind11::detail::funct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722:313,optimiz,optimize,313,https://psicode.org,https://github.com/psi4/psi4/issues/1722,1,['optimiz'],['optimize']
Performance,Try stages to warm up cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1538:22,cache,cache,22,https://psicode.org,https://github.com/psi4/psi4/pull/1538,1,['cache'],['cache']
Performance,"Trying to install psi4 on MacOS. . I looked at this issue as a starting point #2024. I used the following procedure to install psi4. `conda create -n psi4env python=3.7`; `mamba install ambit=0.5.1=h7778601_3 -c psi4`; `mamba install chemps2=1.8.9 -c psi4`; `mamba install libint=1.2.1 -c psi4`; `mamba install libxc=4.3.4 -c psi4`; `mamba install simint=0.7 -c psi4`; `mamba install psi4=1.4a2.dev1084+9b60184=py37h55c4972_2 -c psi4/label/nofortran`. Then, I tried to test the installation using `psi4 --test`; It gave me this error:. ```; Traceback (most recent call last):; File ""/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/core.cpython-37m-darwin.so, 0x0002): Library not loaded: @rpath/libgg.1.dylib; Referenced from: /Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/core.cpython-37m-darwin.so; Reason: tried: '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/usr/local/lib/libgg.1.dylib' (no such file), '/usr/lib/libgg.1.dylib' (no such file). During handling of the above ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578:858,load,loaded,858,https://psicode.org,https://github.com/psi4/psi4/issues/2578,1,['load'],['loaded']
Performance,"UX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:1724,optimiz,optimize,1724,https://psicode.org,https://github.com/psi4/psi4/issues/1995,1,['optimiz'],['optimize']
Performance,"Update the SAPT output to conform with the recommendations of our systematic study in ``Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M. Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140, 094106 (2014) [doi: 10.1063/1.4867135 ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37:161,Perform,Performance,161,https://psicode.org,https://github.com/psi4/psi4/issues/37,1,['Perform'],['Performance']
Performance,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242:1009,load,loads,1009,https://psicode.org,https://github.com/psi4/psi4/issues/2242,1,['load'],['loads']
Performance,"We have an [example](http://forum.psicode.org/t/adiis-minimization-failed-file-a-bug/2524/4) of an ADIIS failure. Based on how _early_ minimization is failing, this looks like something other than numerical finickiness of the underlying numpy algorithm. The ADIIS problem is either 1-by-1 or 2-by-2 (I'd need to check which), and surely we can handle a 2D constrained optimization. ```; memory 5 gb. molecule dimer {; O -2.37598501 -5.25644515 4.84543259; H -2.38171765 -4.38257907 4.44628561; H -2.48821382 -4.94837176 5.80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:368,optimiz,optimization,368,https://psicode.org,https://github.com/psi4/psi4/issues/2609,1,['optimiz'],['optimization']
Performance,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/483:488,perform,perform,488,https://psicode.org,https://github.com/psi4/psi4/issues/483,1,['perform'],['perform']
Performance,"We were using the following code for teaching students geometry optimization:; ![image](https://github.com/psi4/psi4/assets/16979577/f1c07929-cf0b-436d-8dc6-aba6a89aa760). Unfortunately, the xyz is no longer printed. . Our current PSI4 version is 1.7 but it looks like it doesn't work in 1.8.2 either https://forum.psicode.org/t/changes-to-output-of-optimization-and-frequency-calculationsfor-convenience/2894",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074:64,optimiz,optimization,64,https://psicode.org,https://github.com/psi4/psi4/issues/3074,2,['optimiz'],"['optimization', 'optimization-and-frequency-calculationsfor-convenience']"
Performance,"What single function in psi4 would you wish compiler optimization not to break? At first testing, it seems that the latest (release 2, Feb 2016) Intel compilers break `C_DGEMM`. The code compiles fine, but not much runs. Below are three dgemm calls that break. Not all dgemm calls break. Possibly 'N'/'T' are fine but 'N'/'N' break. If anyone wants to investigate, you can start with my ""dftfix"" branch (https://github.com/loriab/psi4/tree/dftfix). By commenting out Mulliken analysis and File 180 printing, I've gotten the jk & out_of_core algorithms in test case scf5 working on that branch. https://github.com/loriab/psi4/commit/9bcd03959d1901e89ecea0274e0c086b0da397fa#diff-e30bd7727a15aa5a70e322a84a385291R2903. https://github.com/loriab/psi4/commit/9bcd03959d1901e89ecea0274e0c086b0da397fa#diff-ada70c1f1cf0a80abbdbacbfb7716abbR690. https://github.com/loriab/psi4/commit/9bcd03959d1901e89ecea0274e0c086b0da397fa#diff-be25444186a5073fb47c3ac4667533baR473",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321:53,optimiz,optimization,53,https://psicode.org,https://github.com/psi4/psi4/issues/321,1,['optimiz'],['optimization']
Performance,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/428:255,optimiz,optimize,255,https://psicode.org,https://github.com/psi4/psi4/issues/428,1,['optimiz'],['optimize']
Performance,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983:400,optimiz,optimize,400,https://psicode.org,https://github.com/psi4/psi4/issues/1983,3,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimize']"
Performance,"When I use ECP correction basis set like lanl2dz, Optking assign Mn to P in Writting optimization data to binary file step. [Mn2-dzvp.txt](https://github.com/psi4/psi4/files/2177450/Mn2-dzvp.txt); [Mn2-lanl2dz.txt](https://github.com/psi4/psi4/files/2177451/Mn2-lanl2dz.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1082:85,optimiz,optimization,85,https://psicode.org,https://github.com/psi4/psi4/issues/1082,1,['optimiz'],['optimization']
Performance,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1957:542,cache,cached,542,https://psicode.org,https://github.com/psi4/psi4/issues/1957,1,['cache'],['cached']
Performance,"When multiplying three matrices `A`, `B`, and `C` together in Psi4, the matrix multiplication is always performed as `((AB)C)`:; https://github.com/psi4/psi4/blob/2f085df4cab054b8b01c3e5c0bc1e1270c2e7bf2/psi4/src/psi4/libmints/matrix.cc#L3404-L3409; In some cases, this might result in more overall work than the equivalent `(A(BC))`. We should probably check for this, and choose the cheaper ordering.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2052:104,perform,performed,104,https://psicode.org,https://github.com/psi4/psi4/issues/2052,1,['perform'],['performed']
Performance,"When performing a B3LYP-D2 single point, with custom basis sets, I am getting different behavior from the conda binary (version: 1.2a1.dev458) and the source build (version: 1.2a1.dev458) on OS X with the exact same input file. . The conda binary produces the first few iterations and does not converge: ; ```; @DF-RKS iter 0: -2879.17610215408513 -2.87918e+03 1.22721e-02 ; @DF-RKS iter 1: -2858.84066999046217 2.03354e+01 1.56850e-03 ; @DF-RKS iter 2: -2827.41152127256692 3.14291e+01 5.78505e-03 DIIS; ``` . My source build produces the first few iterations and does converge: ; ```; @DF-RKS iter 0: -2879.11745920690237 -2.87912e+03 2.36222e-02; @DF-RKS iter 1: -2858.74896735363154 2.03685e+01 3.85843e-03; @DF-RKS iter 2: -2830.12148835513381 2.86275e+01 1.21879e-02 DIIS; ```. Diffing the outputs reveals nothing unexpected other than the RKS iterations. I have attached the input and basis sets for completeness. [binary_vs_source.zip](https://github.com/psi4/psi4/files/1183857/binary_vs_source.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773:5,perform,performing,5,https://psicode.org,https://github.com/psi4/psi4/issues/773,1,['perform'],['performing']
Performance,When running a calculation using. optimize('pwpb95-d3bj'). The program will try to open a file in my home directory rather than the scratch directory and crashes:; RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_092b616a'. A workaround is to use in my script; export HOME=$PSI_SCRATCH,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1724:34,optimiz,optimize,34,https://psicode.org,https://github.com/psi4/psi4/issues/1724,1,['optimiz'],['optimize']
Performance,"When running both version 1.1 and 1.2rc1 psi4 compiled with intel compilers a dftd3 optimization (optimize('pbe0-d3bj')) hangs at the SCF grad start, also I can see cpu usage falls from all cpus to only one.; if i set -n 1 it runs fine. . This problem I didn't have with psi4 compiled with gcc. Any ideas as to why this happens, and what I can do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007:84,optimiz,optimization,84,https://psicode.org,https://github.com/psi4/psi4/issues/1007,2,['optimiz'],"['optimization', 'optimize']"
Performance,"When the comment says perform a phase change on _all_ the eigenvectors, that includes eigenvector 0. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2829:22,perform,perform,22,https://psicode.org,https://github.com/psi4/psi4/pull/2829,1,['perform'],['perform']
Performance,"While PSI4 can perform PCM calculations, it does not have built in support for state of the art solvation models, like the SMD method by Cramer et al.; Paper:; http://pubs.acs.org/doi/abs/10.1021/jp810292n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227:15,perform,perform,15,https://psicode.org,https://github.com/psi4/psi4/issues/227,1,['perform'],['perform']
Performance,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:391,optimiz,optimize,391,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['optimiz'],['optimize']
Performance,"With `ENABLE_bse`, BSE tries to install in the wrong place; ```; [ 11%] Installing Psi4-detected BLAS/LAPACK; [ 11%] Performing build step for 'bse_external'; -- Install configuration: ""Release""; [ 11%] Built target lapack_external; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; [ 17%] Performing install step for 'bse_external'; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running install; /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; warnings.warn(; running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; running install_lib; copying build/lib/basis_set_exchange/_version.py -> /home/work/psi4/objdir/stage/lib/basis_set_exchange; byte-compiling /home/work/psi4/objdir/stage/lib/basis_set_exchange/_version.py to _version.cpython-311.pyc; running install_data; copying LICENSE -> /usr/local/; error: could not create '/usr/local/LICENSE': Permission denied; make[2]: *** [external/upstream/bse/CMakeFiles/bse_external.dir/build.make:105: external/upstream/bse/bse_external-prefix/src/bse_external-stamp/bse_external-install] Error 1; make[1]: *** [CMakeFiles/Makefile2:11190: external/upstream/bse/CMakeFiles/bse_external.dir/all] Error 2; make: *** [Makefile:146: all] Error 2; (p4env) [susi@lenovo objdir]$ ccmake . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:117,Perform,Performing,117,https://psicode.org,https://github.com/psi4/psi4/issues/3067,2,['Perform'],['Performing']
Performance,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223:969,optimiz,optimized,969,https://psicode.org,https://github.com/psi4/psi4/issues/2223,1,['optimiz'],['optimized']
Performance,"With the following input file:; ```; memory 500 mb; set basis cc-pVDZ. molecule mol {; 4. O 0.0 0.0 0.0; H 0.0 0.0 0.96; H 0.76 0.76 0.0; H -0.76 0.76 0.0; }. set optking {; # Freeze the dihedral angle between atoms 1, 2, 3, and 4 at 90 degrees; frozen_dihedral = [(1, 2, 3, 4, 100.0)]; }. # Perform the optimization with the frozen dihedral constraint; optimize('b3lyp'); ```; running psi4 v1.9.1 gives me a segfault: 'psi4 inp.dat' terminated by signal SIGSEGV (Address boundary error); I have tried a few other ways using keywords: fixed_dihedral, and ranged_dihedral, no luck. Thanks.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3242:292,Perform,Perform,292,https://psicode.org,https://github.com/psi4/psi4/issues/3242,3,"['Perform', 'optimiz']","['Perform', 'optimization', 'optimize']"
Performance,"With this example molecule, optKING fails to generate the internal coordinates, and the only way I can optimize is with cartesian and dynamic turned off. I am using latest stable (tags/v1.3.2); ```; molecule mol {; 0 1; C	3.4581937559 -1.4112107502 0.6628195511; N	2.3821384470 -0.8016830488 0.6668723530; S	4.2544548310 -1.9352085140 0.7141164692; C	0.0280306717 -0.2718210489 0.2142030812; C	1.4218510657 0.1094955364 0.2323938153; C	-0.8935306288 0.6217951694 -0.3937996518; C	0.8749866134 2.2505177854 -0.7685419788; C	1.8279888898 1.3582013966 -0.2135637897; C	-0.4555887744 -1.4910996529 0.7799513422; C	-0.4434092186 1.8876824244 -0.8862861414; C	-2.2687193610 0.2375554697 -0.4984111660; C	-1.7875187142 -1.8176564012 0.6992850376; C	-2.7005499370 -0.9522869380 0.0312086031; H	1.2191387380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:103,optimiz,optimize,103,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['optimiz'],['optimize']
Performance,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:2881,Optimiz,Optimized,2881,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['Optimiz'],['Optimized']
Performance,[Feature request carried forward from forums](http://forum.psicode.org/t/using-psi4-for-excited-state-optimization-with-root-following/2546/6). Some technology in Psi's excited state methods to follow a particular state. See QChem methods in the link.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2630:102,optimiz,optimization-with-root-following,102,https://psicode.org,https://github.com/psi4/psi4/issues/2630,1,['optimiz'],['optimization-with-root-following']
Performance,"[GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf exte",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2986,bottleneck,bottlenecks,2986,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['bottleneck'],['bottlenecks']
Performance,[QUESTION] No concurrency when running psi4 from command line?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600:14,concurren,concurrency,14,https://psicode.org,https://github.com/psi4/psi4/issues/2600,1,['concurren'],['concurrency']
Performance,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:588,optimiz,optimize,588,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['optimiz'],['optimize']
Performance,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1331:482,load,loading,482,https://psicode.org,https://github.com/psi4/psi4/issues/1331,1,['load'],['loading']
Performance,"],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0]]; zerograd.set(refgrad). # this is the first system, a fluoromethane that looks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZER",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:1563,optimiz,optimized,1563,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimized']
Performance,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1612,optimiz,optimized,1612,https://psicode.org,https://github.com/psi4/psi4/issues/2010,5,['optimiz'],['optimized']
Performance,"__________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:17650,Perform,Performs,17650,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Perform'],['Performs']
Performance,"_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6308,optimiz,optimized,6308,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::operator()(pybind11::detail::function_call&) const (this=0x0, call=...) at /usr/include/pybind11/pybind11.h:160; #19 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:4319,optimiz,optimized,4319,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/pyth",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2049,cache,cachedir,2049,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['cache'],['cachedir']
Performance,"_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3360,optimiz,optimized,3360,https://psicode.org,https://github.com/psi4/psi4/issues/153,3,['optimiz'],['optimized']
Performance,"`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. Wi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:1585,perform,perform,1585,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['perform'],['perform']
Performance,"`; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1508,queue,queue,1508,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['queue'],['queue']
Performance,`Atom not in list` bug with geometric optimizer,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:38,optimiz,optimizer,38,https://psicode.org,https://github.com/psi4/psi4/issues/2871,1,['optimiz'],['optimizer']
Performance,`TypeError: load()` during frequency calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:12,load,load,12,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['load'],['load']
Performance,"```; # cubane Transition State CСSD(T)/cc-pVDZ geometry optimization. memory 2 Gb. molecule cubane {; 0 1; H -1.460 -1.409 -1.325; C -0.747 -0.790 -0.779; H -1.460 -1.409 1.325; C -0.747 -0.790 0.779; H -1.388 1.387 -1.426; C -0.772 0.772 -0.772; H 1.460 -1.460 -1.475; C 0.725 -0.725 -1.177; H -1.388 1.387 1.426; C -0.772 0.772 0.772; H 1.460 -1.460 1.475; C 0.725 -0.725 1.177; H 1.409 1.460 -1.325; C 0.790 0.747 -0.779; H 1.409 1.460 1.325; C 0.790 0.747 0.779; }. set {; basis cc-pVDZ; opt_type ts; }. set_num_threads(2). optimize('ccsd(t)'); ```. ---. Initial molecule has Molecular point group: cs, Full point group: Cs; after couple of step geometry optimization atomic coordinates changed to; Center X Y Z; ------------ ----------------- ----------------- -----------------; H -1.473705914299 -1.435393855860 -1.358489164213; C -0.797159999078 -0.797004109009 -0.746661382504; H -1.476630117570 -1.415339339271 1.362245194949; C -0.797740772644 -0.782869624563 0.746875065611; H -1.403399626888 1.397804298812 -1.532486210635; C -0.816065575433 0.813208518621 -0.796372487595; H 1.564836624106 -1.553887853367 -0.825942923699; C 0.782186226366 -0.785194185540 -0.703283447355; H -1.398864375817 1.398697058928 1.533459031552; C -0.813477696736 0.814494835084 0.795484014989; H 1.543644549536 -1.569635373854 0.822765427607; C 0.785442354192 -0.778370034240 0.690456922666; H 1.425099138027 1.481569438277 -1.355017034180; C 0.789948918555 0.800919182066 -0.744361460399; H 1.425889588787 1.478227539320 1.363344118168; C 0.793832546892 0.798935970506 0.747984335038; but Molecular point group didn't - cs; error issued; ERROR: Symmetry operation 1 did not map atom 7 to another atom:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10:56,optimiz,optimization,56,https://psicode.org,https://github.com/psi4/psi4/issues/10,3,['optimiz'],"['optimization', 'optimize']"
Performance,"```; [ 22%] Performing configure step for 'psi4-core'; cd /usr/ports/science/psi4/work/.build/psi4-core-prefix/src/psi4-core-build && /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/ports/science/psi4/work/.build/stage -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=/usr/bin/c++ ""-DCMAKE_CXX_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -fno-omit-frame-pointer -isystem /usr/local/include -march=native"" -DCMAKE_C_COMPILER=/usr/bin/cc ""-DCMAKE_C_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -march=native"" -DCMAKE_CXX_STANDARD=14 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_Fortran_COMPILER= -DCMAKE_Fortran_FLAGS= -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_DATADIR=share -DCMAKE_INSTALL_INCLUDEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:12,Perform,Performing,12,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['Perform'],['Performing']
Performance,"```; molecule {; He; }. optimize(""scf/cc-pvdz""); ```. on `1.8a1.dev57` gives. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 345, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 1272, in optimize; opt_object.take_step(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/opt_helper.py"", line 174, in take_step; self.dq, self.step_str = self.opt_manager.take_step(self.fq, self._Hq, self.E, return_str=True); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/optimize.py"", line 232, in take_step; achieved_dq, returned_str = self.opt_method.take_step(fq, H, energy, return_str=True). ValueError: not enough values to unpack (expected 2, got 0); ```. Something is wrong (or outright missing) for the single-atom case, which should be a straight ""no geometry to optimize.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971:24,optimiz,optimize,24,https://psicode.org,https://github.com/psi4/psi4/issues/2971,4,['optimiz'],['optimize']
Performance,"a 0.0000000000 19.7419600000 2.8202800000 ; Cl 2.8202800000 19.7419600000 2.8202800000 ; Na 2.8202800000 11.2811200000 2.8202800000 ; Na 0.0000000000 14.1014000000 2.8202800000 ; Cl 2.8202800000 14.1014000000 2.8202800000 ; Na 2.8202800000 5.6405600000 2.8202800000 ; Na 0.0000000000 8.4608400000 2.8202800000 ; Cl 2.8202800000 8.4608400000 2.8202800000 ; Na 2.8202800000 0.0000000000 2.8202800000 ; Na 0.0000000000 2.8202800000 2.8202800000 ; Cl 2.8202800000 2.8202800000 2.8202800000 ; """""". set maxiter 1000; set fail_on_maxiter false. set scf{; #soscf true; #soscf_max_iter 100; #basis_guess true; #damping_percentage 20; }. set optking frozen_cartesian $freeze_list. set cubeprop_tasks ['frontier_orbitals']; set cubic_grid_overage 10; E, wfn = optimize('b3lyp-d3', return_wfn=True) # psicode.org/psi4manual/master/opt.html; cubeprop(wfn)--------------------------------------------------------------------------. Memory set to 23.283 GiB by Python driver. Scratch directory: PATH; gradient() will perform analytic gradient computation. *** tstart() called on Logray; *** at Tue Aug 30 11:57:29 2022. => Loading Basis Set <=. Name: 6-31G; Role: ORBITAL; Keyword: BASIS; atoms 1-4, 9-12, 21-24, 33-34 entry H line 26 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 87 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs . => B3LYP-D3: Empirical Dispersion <=. Grimme's -D3 (zero-damping) Dispersion Correction; Grimme S.; Antony J.; Ehrlich S.; Krieg H. (2010), J. Chem. Phys., 132: 154104. s6 = 1.000000; s8 = 1.703000; sr6 = 1.261",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:9020,perform,perform,9020,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['perform'],['perform']
Performance,"a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:3284,optimiz,optimized,3284,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['optimiz'],['optimized']
Performance,"adient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2309,optimiz,optimize,2309,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimize']
Performance,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:341,optimiz,optimizer,341,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['optimiz'],['optimizer']
Performance,"ail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:4539,optimiz,optimized,4539,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"ail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2228,optimiz,optimized,2228,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"al_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3507,optimiz,optimized,3507,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (na",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:1441,optimiz,optimize,1441,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['optimiz'],['optimize']
Performance,"ambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_fu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6497,optimiz,optimized,6497,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate optimization problem. Or what do y'all think?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:1999,optimiz,optimization,1999,https://psicode.org,https://github.com/psi4/psi4/issues/3134,1,['optimiz'],['optimization']
Performance,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2335,Perform,Performing,2335,https://psicode.org,https://github.com/psi4/psi4/issues/1041,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"ase update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fail with a proper error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:3579,optimiz,optimizations,3579,https://psicode.org,https://github.com/psi4/psi4/pull/246,2,"['Optimiz', 'optimiz']","['Optimization', 'optimizations']"
Performance,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:2426,optimiz,optimized,2426,https://psicode.org,https://github.com/psi4/psi4/issues/2010,11,['optimiz'],['optimized']
Performance,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1033,Perform,Performing,1033,https://psicode.org,https://github.com/psi4/psi4/issues/516,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'loading']"
Performance,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:3106,perform,perform,3106,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['perform'],['perform']
Performance,"boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimiz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2355,optimiz,optimized,2355,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimized']
Performance,bug fix of prevention of zero target optimization values by the evil atof(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:37,optimiz,optimization,37,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['optimiz'],['optimization']
Performance,"ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, pre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:15083,optimiz,optimized,15083,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/771:466,load,loaded,466,https://psicode.org,https://github.com/psi4/psi4/issues/771,1,['load'],['loaded']
Performance,"collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:7035,optimiz,optimized,7035,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:2976,optimiz,optimize,2976,https://psicode.org,https://github.com/psi4/psi4/issues/1995,2,['optimiz'],['optimize']
Performance,crash in Geometry Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:18,Optimiz,Optimization,18,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['Optimiz'],['Optimization']
Performance,cting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_CXX: /opt/intel/impi/5.0.1.035/intel64/lib/libmpicxx.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:13148,Perform,Performing,13148,https://psicode.org,https://github.com/psi4/psi4/issues/201,10,['Perform'],['Performing']
Performance,"ction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2695,optimiz,optimized,2695,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['optimiz'],['optimized']
Performance,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:1987,perform,perform,1987,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['perform'],['perform']
Performance,"d be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing the DFJLinK and DFJCOSK incremental Fock processes, the next CompositeJK PR will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:2482,bottleneck,bottleneck,2482,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['bottleneck'],['bottleneck']
Performance,"d; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the requested orbital.; ; Thus, if the MSCF calculation is performed for CASINO, it is necessary simultaneously with the molden file create correlation.data. If PSI4 using configuration state function (**CSF**), then group of determinants for each **CSF** should be labeled for simultaneous optimization like the 2nd and 3rd determinants in the example above. The opt-flag for all determinants except the first one should be equal to 1. PSI4 [output](https://github.com/user-attachments/files/17463891/output.txt) on the basis of which the above-described file could be generated. Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:2420,perform,performed,2420,https://psicode.org,https://github.com/psi4/psi4/issues/3235,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"d_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1040,Perform,Performs,1040,https://psicode.org,https://github.com/psi4/psi4/pull/836,2,['Perform'],['Performs']
Performance,"dd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:3930,optimiz,optimized,3930,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"dded QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEFP; - Added PCM implicit solvent added for SCF; - Added interface to DMRG-CI and DMRG-SCF code in CheMPS2; - Added code to do potential energy scans via the WebMO interface; ## Performance optimization; - Sped up integrals computation by optimizing lib mints layer; - The PK JK builder has received significant performance improvements; - SAD guess has been improved dramatically, now default for all RHF computations; ## Bug fixes; - Various bug fixes and improvements to optimizer and IRC code; - Fixed a bug with DF-K in systems with only one occupied orbital; - Fixed an integer overflow bug in DF-CCSD(T); - Fixed modules that crashed when not finding full integral files available (because DF-HF was run instead of conventional HF); - Fixed problem with double hybrid DFT total energies not being printed; - Fixed crash caused by changing number of MO's during optimization (changes in number of MO's dropped due to linear dependencies); - Innumerable additional bug fixes and tweaks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2927,optimiz,optimization,2927,https://psicode.org,https://github.com/psi4/psi4/issues/367,11,"['Perform', 'optimiz', 'perform']","['Performance', 'optimization', 'optimizations', 'optimizer', 'optimizing', 'performance']"
Performance,"dreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Develope",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2008,optimiz,optimizations,2008,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['optimiz'],['optimizations']
Performance,"e a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016:1986,optimiz,optimize,1986,https://psicode.org,https://github.com/psi4/psi4/issues/2016,2,['optimiz'],['optimize']
Performance,"e rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702319860 0.0000000000; H -1.5072860141 -0.8702319860 0.0000000000; ```. The new SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.0000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:1454,optimiz,optimization,1454,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['optimiz'],['optimization']
Performance,"e to `CheMPS2::DMRGSCFunitary::getLog(double*, double*, double*) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:660: undefined reference to `CheMPS2::DIIS::appendNew(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:661: undefined reference to `CheMPS2::DIIS::calculateParam(double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:662: undefined reference to `CheMPS2::DMRGSCFunitary::updateUnitary(double*, double*, double*, bool, bool)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:677: undefined reference to `CheMPS2::DMRGSCFunitary::saveU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:678: undefined reference to `CheMPS2::DIIS::saveDIIS(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:695: undefined reference to `CheMPS2::EdmistonRuedenberg::Optimize(double*, double*, bool, double, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:696: undefined reference to `CheMPS2::EdmistonRuedenberg::FiedlerExchange(int, double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:697: undefined reference to `CheMPS2::EdmistonRuedenberg::getUnitary()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:697: undefined reference to `CheMPS2::CASSCF::fillLocalizedOrbitalRotations(CheMPS2::DMRGSCFunitary*, CheMPS2::DMRGSCFindices*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:698: undefined reference to `CheMPS2::DMRGSCFunitary::rotateActiveSpaceVectors(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:729: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:731: undefined reference to `CheMPS2::DMRG::n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:20290,Optimiz,Optimize,20290,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['Optimiz'],['Optimize']
Performance,"e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB`. for example, hydrogen has 2 basis functions in `GFN1-xTB`, so the shape of their 3-index integral matrix is `(60, 2, 2)`.; ```python; import torch; three_idx_integrals = torch.load(""orbnet2_overlap3idx.pt""); print(three_idx_integrals[""H""].shape); >> torch.Size([60, 2, 2]); ```. I think the best way to go about this would be to just re-implement the formulae for calculating these 3-index integrals, in python (since i'm most familiar with python), but to allow setting the `gamma` parameter so that I can create as many rows as I want for the 1st dimension. This should be easier than trying to change some inner part of `psi4` just to have this functionality. Could anyone give any advice, or point me into some possible reference code to start things off? as you can tell, i'm not a quantum physics expert, so all this is a learning curve for me. any help would be very much appreciated! i cannot ask the authors too much, due to conflict of interest with their company. (ref 85 is their proprietary software, which I haven't found much luck using); Sorry that this post came up to be quite long. Thank you so much!; Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:2575,load,load,2575,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['load'],['load']
Performance,"e/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:586: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:593: undefined reference to `CheMPS2::DMRGSCFindices::getNORB(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:605: undefined reference to `CheMPS2::EdmistonRuedenberg::EdmistonRuedenberg(CheMPS2::Hamiltonian*, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:611: undefined reference to `CheMPS2::DMRGSCFunitary::loadU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DIIS::DIIS(int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:623: undefined reference to `CheMPS2::DIIS::loadDIIS(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:637: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:646: undefined reference to `CheMPS2::DMRGSCFunitary::updateUnitary(double*, double*, double*, bool, bool)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined reference to `CheMPS2::DIIS::DIIS(int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:657: undefined reference to `CheMPS2::DMRGSCFunitary::makeSureAllBlocksDetOne(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:659: undefined reference to `CheMPS2::DMRGSCFunitary::getLog(double*, double*, double*) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:660: undefined reference to `CheMPS2::DIIS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:18429,load,loadDIIS,18429,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['load'],['loadDIIS']
Performance,"e; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2872,cache,cache-level,2872,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['cache'],['cache-level']
Performance,"e_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dert",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:8626,optimiz,optimized,8626,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,"ed to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3795,cache,cache,3795,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['cache'],['cache']
Performance,"efs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flag",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5657,optimiz,optimized,5657,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"el-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/usr/local/psi4/bin/psi4"", line 230, in <module>; content = f.read(); File ""/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codecs.py"", line 321, in decode; (result, consumed) = self._buffer_decode(data, self.errors, final); UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 440: invalid start byte; ```. Python 3 tries to read all the bytes as UTF-8. This fails for the pickled bytes, so Psi4 crashes. Even if you read the file as binary, you would still have to (somehow) instruct Python 3 which parts of the file should be UTF-8 decoded and which parts should be pickle-loaded.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/833:2690,load,loaded,2690,https://psicode.org,https://github.com/psi4/psi4/issues/833,1,['load'],['loaded']
Performance,"en using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:1488,cache,cachelevel,1488,https://psicode.org,https://github.com/psi4/psi4/issues/3156,1,['cache'],['cachelevel']
Performance,"ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED; # opt ZERO grad.....................................................PASSED. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; # 5 -139.557391640737 -0.000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; # 6 -139.557392223903 -0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:3776,Optimiz,Optimizer,3776,https://psicode.org,https://github.com/psi4/psi4/issues/310,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"ent but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. GRADIENT ENERGY; symm c1 symm c1; ---- ---- ---- ----; <<< CCSD/aug-cc-pVDZ >>>. cfour (vcc) rhf conv 132 1650 52 1202 ; ccenergy rhf conv 266 2037 92 1099; dfocc rhf df n/a 420 n/a 230; fnocc rhf df n/a 149. cfour uhf conv 225 3473 90 2413 ; ccenergy uhf conv 463 5196 222 2576; dfocc uhf df n/a 1545 n/a 826. cfour u/r ratio 1.7 2.1 1.7 2.0 ; ccenergy u/r ratio 1.7 2.5 2.4 2.3; dfocc u/r ratio n/a 3.7 n/a 3.6; ```. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:1729,optimiz,optimization,1729,https://psicode.org,https://github.com/psi4/psi4/pull/2739,1,['optimiz'],['optimization']
Performance,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:8204,optimiz,optimized,8204,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,er: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1569,Perform,Performing,1569,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ere two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid? It never appears to be used anywhere except one print function that also appears unused. ## Checklist; - [x] No tests needed -- no observable changes and it's hard to write a test for a very rare race condition :). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:2199,race condition,race condition,2199,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['race condition'],['race condition']
Performance,"ersion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new feat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:1419,optimiz,optimize,1419,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['optimiz'],['optimize']
Performance,"escription. @lothian, I was looking at the qcvars set by the Brueckner methods. For review, cc* module has been storing the HF energy of the first Brueckner iteration as `SCF TOTAL ENERGY` and the quantities from the final B iteration as `CCSD TOTAL ENERGY`, `CCSD(T) TOTAL ENERGY`, and `(T) CORRECTION ENERGY`. In the below, I've reworked it so:; * final B energies get their own qcvars `(BCCD|BCCD(T)) (TOTAL|CORRELATION) ENERGY` in accordance with the principle that `energy(mtd)` should set `mtd TOTAL ENERGY`; * MP2 and CCSD qcvars are now collected from the first B iteration, not the last, so they have canonical values. `SCF TOTAL ENERGY` still from first B iteration.; * `(BCCD|BCCD(T)) CORRELATION ENERGY` now defined as total E of last B iteration minus HF of first B iteration. This is in accordance with the pattern that `mtd CORRELATION ENERGY` = `mtd TOTAL ENERGY` - `SCF TOTAL ENERGY`, but it is admittedly wacky when applied to Brueckner. It is, however, the same way the orbital-optimized methods of occ/dfocc have been handled. The OO methods additionally set a `mtd REFERENCE CORRECTION ENERGY` so that one can recover the ref/corl split of the final OO iteration. That could be added to the BCCD methods. Does the above sound ok, or does it need further reworking? I also tightened up the B r_conv formula a bit because the standard tests (not shown in PR) weren't matching (to 1.e-6) the highly converged values under default conditions (e_conv = 6 --> brueckner_r_conv =4). I've also been on a rampage of late to better (and automatically) document what methods are available under what detailed conditions (e.g., dertype, reference, conv/df/cd type, all-electron/frozen-core). I'd like to add the table snapshotted below to the main [CC docs page](https://psicode.org/psi4manual/master/cc.html). Unfortunately, it doesn't cover excited states or properties, so it can't replace the existing summary table, but it does provide more detail. Does it look ok, and are there any cc*",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708:1001,optimiz,optimized,1001,https://psicode.org,https://github.com/psi4/psi4/pull/2708,1,['optimiz'],['optimized']
Performance,"escription; In this PR, we implement a pilot version of least squares tensor hypercontraction (LS-THC)... factoring 4-index ERIs (O(N^4)) into two-index quantities (i.e. $(mn|rs) = x_{m}^{P}x_{n}^{P}Z^{PQ}x_{r}^{Q}x_{s}^{Q}$). In the LS-THC formulation, $P$ and $Q$ are derived from grid points, and. $x_{m}^{P} = w_{P}^{\frac{1}{4}} \phi_{m}(x_{P}, y_{P}, z_{P})$,; $E^{PQ} = x_{m}^{P}x_{n}^{P}(mn|rs)x_{r}^{Q}x_{s}^{Q}$; $S^{PP'} = (x_{m}^{P}x_{m}^{P'})^{2}$; $Z^{PQ} = (S^{PP'})^{-1} E^{P'Q'} (S^{QQ'})^{-1}$. This is based off of the work of [Parrish et al. (2012)](https://pubs.aip.org/aip/jcp/article/137/22/224106/194901/Tensor-hypercontraction-II-Least-squares). These quantities can be constructed integral-direct and non-iteratively. No four or even three-index quantities are stored, thereby allowing for the future development of efficient, low-memory quantum chemistry algorithms in Psi. This is a PR in a series of planned PRs that will involve:; 1.) LS-THC-JK (integral-direct SCF without recomputing ERIs every iteration and faster K construction); 2.) LS-THC-MP2; 3.) Local grid implementation of LS-THC to allow for use in local correlation methods (DLPNO-MP2, DLPNO-CCSD/(T)). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Added Python interface (Pybind) for building LS-THC quantities that allow for rapid prototyping of new methods involving THC; - [x] Developed infrastructure for the development of alternate ways to perform THC (i.e. PF-THC). ## Dev notes & details; - [x] Implemented LS-THC C/Py-side for future QC methods. ## Questions; - [x] Is this the proper way to export this object Py-side?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3157:1571,perform,perform,1571,https://psicode.org,https://github.com/psi4/psi4/pull/3157,1,['perform'],['perform']
Performance,"ew python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see https://optking.readthedocs.io/en/latest/; The lines changed is almost entirely due to new test output.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:1981,optimiz,optimizer,1981,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['optimiz'],['optimizer']
Performance,"explicitly np.load(..., allow_pickle=True) since we're building objects",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607:14,load,load,14,https://psicode.org,https://github.com/psi4/psi4/pull/1607,1,['load'],['load']
Performance,"f MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; odd_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:6647,optimiz,optimization,6647,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimization']
Performance,"f8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', hasc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6866,optimiz,optimized,6866,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atomic numbers instead of symbols, #418. (fixed by #953); - [ ] DETCI for more than 256 orbitals; - [ ] Automatic choice between `rhf/uhf/rohf/cuhf` for input molecules.; - [ ] Potenital integral derivative performance can be improved, see #3.; - [ ] Allow a DECON keyword to basis sets #43.; - [ ] Remove `char *` for `std::string`. Modify, expand, delete as desired. If you take up a feature make sure to post here so that we do not duplicate effort.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402:2204,perform,performance,2204,https://psicode.org,https://github.com/psi4/psi4/issues/402,1,['perform'],['performance']
Performance,for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1735,Perform,Performing,1735,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"four SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- minicon",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2078,cache,cache,2078,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['cache'],['cache']
Performance,full_hess_every optimization corruption,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1298:16,optimiz,optimization,16,https://psicode.org,https://github.com/psi4/psi4/issues/1298,1,['optimiz'],['optimization']
Performance,"func); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; ________________________________________________________________ test_psi4_dfmp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:31852,Perform,Performing,31852,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Perform'],['Performing']
Performance,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:44143,cache,cachedir,44143,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['cache'],"['cache', 'cachedir']"
Performance,"g. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1272,optimiz,optimize,1272,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['optimiz'],['optimize']
Performance,geometry optimization converges prematurely,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['optimiz'],['optimization']
Performance,"gstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVDZ; Blend: AUG-CC-PVDZ; Number of shells: 14; Number of basis function: 32; Number of Cartesian functions: 34; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (AUG-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-qzvpp-jkfit.gbs ; atoms 2 entry H line 70 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz-jkfit.gbs . Computing basis projection from 3-21G to AUG-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 32 32 0 0 0 0; -------------------------------------------------------; Total 32 32 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.001 GiB; user supplied 0.715 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 732; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:7175,Load,Loading,7175,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance,"h, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:1494,queue,queue,1494,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['queue'],['queue']
Performance,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:22070,optimiz,optimized,22070,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"he PSI_SCRATCH envvar section. Can probably steal some text/code from conda.rst.; - [x] In docs, show an example of a threaded pbs job file. Here's one to work from. See @loriab about any parts that are obscure. ```; #!/bin/tcsh; ## this file auto-generated by submit4 ...; #PBS -j oe ; #PBS -l walltime=80:00:00:00; #PBS -l pmem=2120mb; #PBS -N SSI-084TYR-095LEU-1-dimer; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/loriab/psi4.$PBS_JOBID. cat $PBS_NODEFILE; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end; unsetenv PSI4DATADIR; unsetenv PSIDATADIR; if ! ( $?PYTHONPATH ) setenv PYTHONPATH """"; setenv PYTHONPATH /theoryfs2/ds/cdsgroup/psi4aux:$PYTHONPATH; setenv PSI_SCRATCH $myscratch; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/scripts/bin:${PATH}; setenv PATH /theoryfs2/ds/loriab/chem/psi4_trials/c4/c4v2/cfour_v2.00beta/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/psi4-compile/mrcc:${PATH}; setenv PSIDATADIR /theoryfs2/ds/cdsgroup/psi4-install/psi3930/share/psi4; source /theoryfs2/common/software/intel2016/bin/compilervars.csh intel64; /theoryfs2/ds/cdsgroup/scripts/bin/runpsi.py -i SSI-084TYR-095LEU-1-dimer.in -o SSI-084TYR-095LEU-1-dimer.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```; - [x] On wiki, create FAQ on https://github.com/psi4/psi4/wiki/8_FAQ_Contents about how do i set scratch, how do i use psi4 in a pbs queue, etc. Questions go in the 8_FAQ_Contents page, answers can link back to the sphinx docs themselves, then index the questions in the https://github.com/psi4/psi4/wiki/0_FAQ.; - [x] Edit the link on page https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/tutorial.rst in sentence ""For your convenience"" to point to something you created.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/109:2195,queue,queue,2195,https://psicode.org,https://github.com/psi4/psi4/issues/109,1,['queue'],['queue']
Performance,"herical Points = 302; Total Points = 1908346; Total Blocks = 13882; Max Points = 256; Max Functions = 485; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (6-31G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-4, 9-12, 21-24, 33-34 entry H line 51 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 121 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 667 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 498 file PATH\envs\psi4\lib\share\psi4\basis\def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 4; Integrals threads: 4; Memory [MiB]: 16093; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT + DEF2-UNIVERSAL-JKFIT; Number of shells: 2894; Number of basis functions: 10676; Number of Cartesian functions: 10676; Spherical Harmonics?: false; Max angular momentum: 4. Cached 10.0% of DFT collocation blocks in 1.635 [GiB]. Minimum eigenvalue in the overlap matrix is 6.3023278892E-05.; Reciprocal condition number of the overlap matrix is 6.1027737192E-06.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 1058 1058 ; -------------------------; Total 1058 1058; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -20768.03616751698792 -2.07680e+04 0.00000e+00 ; @DF-RKS iter 1: -20765.62327420",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:19797,Cache,Cache,19797,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Cache'],['Cache']
Performance,"hon3.6/site-packages/snsmp2/snsmp2.py:81: in run_sns_mp2; m1mhigh = c.compute('m1', 'm', 'high', mp2=True, mp2_dm=True); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:386: in compute; self._init_ns(calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:143: in _init_ns; return self._init_upcast_C(oldcalc=candidate, calc=calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:172: in _init_upcast_C; new_wfn = self._basis_projection(oldcalc, calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:187: in _basis_projection; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:1710,load,load,1710,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1384,optimiz,optimization,1384,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['optimiz'],['optimization']
Performance,"http://sirius.chem.vt.edu/psi4manual/latest/basissets_byelement.html#apdx-basiselement. my molecule complex have 'I' atom, ; the complex was optimized by g09 at MP2/AUG-CC-PVDZ,and the 'I' (AUG-CC-PVDZ-PP),. NOW I want to decompose the interact energy by the psi4 software,but it didn't have basis set support the 'I' element. can you give me some suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76:141,optimiz,optimized,141,https://psicode.org,https://github.com/psi4/psi4/issues/76,1,['optimiz'],['optimized']
Performance,"i was trying to run this .py file https://drive.google.com/file/d/1ANj_pWq6d2fDPu9p-SiASfDNyfhjBsBc/view?usp=sharing to optimize a structure, but in the .out file it said:; PsiException: Could not converge geometry optimization in 50 iterations. this is the .out file: https://drive.google.com/file/d/1bCCWFvOhAA1z6tezxysS-ktDSD0_88UC/view?usp=sharing; how can i solve this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2604:120,optimiz,optimize,120,https://psicode.org,https://github.com/psi4/psi4/issues/2604,2,['optimiz'],"['optimization', 'optimize']"
Performance,"i4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; ```. Just a report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:5876,load,load,5876,https://psicode.org,https://github.com/psi4/psi4/issues/1611,4,['load'],"['load', 'loaded', 'loading']"
Performance,"ia the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:1921,perform,performed,1921,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['perform'],['performed']
Performance,"ibraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-grou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:865,Perform,Performing,865,https://psicode.org,https://github.com/psi4/psi4/issues/262,8,['Perform'],['Performing']
Performance,"iconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.ma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:2476,load,load,2476,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:1941,perform,performing,1941,https://psicode.org,https://github.com/psi4/psi4/issues/1485,1,['perform'],['performing']
Performance,"imized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6686,optimiz,optimized,6686,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1854,Perform,Performing,1854,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,interfragment optimizations with 3 test cases,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:14,optimiz,optimizations,14,https://psicode.org,https://github.com/psi4/psi4/pull/432,1,['optimiz'],['optimizations']
Performance,"ion (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:2168,optimiz,optimizer,2168,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['optimiz'],['optimizer']
Performance,"iption of the PR's purpose here. -->. This is a snapshot in which all n-body tests pass using QCManyBody locally. There's lots of code to be erased and reworked yet. And qcmb isn't installed in CI, so tests aren't expected to pass. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribut",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:995,OPTIMIZ,OPTIMIZATION,995,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['OPTIMIZ'],['OPTIMIZATION']
Performance,"is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:69",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3154,load,loaded,3154,https://psicode.org,https://github.com/psi4/psi4/issues/1611,2,['load'],['loaded']
Performance,"issue raised on the forum: http://forum.psicode.org/t/memory-usage-using-jupyter-writing-cubes/2151/3?u=hokru; A comp chem lab notebook with repeated cube file generation. > Just as an example, the whole notebook (including optimization and scan along bond-length, and visualization with NGLview) takes ~700MB (Cl2) or ~450MB (Li2), where nearly half of the memory usage happens at cubeprop().",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2181:224,optimiz,optimization,224,https://psicode.org,https://github.com/psi4/psi4/issues/2181,1,['optimiz'],['optimization']
Performance,"it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 DIIS/INCFOCK; @RHF iter 5: -235.38297663987922 -6.19818e-05 1.50376e-05 DIIS/INCFOCK; @RHF iter 6: -235.38298211805841 -5.47818e-06 2.18669e-06 DIIS; @RHF iter 7: -235.38298224217732 -1.24119e-07 6.25234e-07 DIIS; Energy and wave function converged with early screening.; Performing final iteration with tighter screening. @RHF iter 8: -235.38489215328417 -1.90991e-03 8.02480e-05 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:1551,perform,performed,1551,https://psicode.org,https://github.com/psi4/psi4/pull/2682,2,"['Perform', 'perform']","['Performing', 'performed']"
Performance,"ithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although the gradient difference in this case is larger than geomeTRIC's convergence criterion for the RMS / max gradient, a smaller difference of 1e-5 to 1e-4 could still cause a failure to converge by causing the optimizer to take incorrect steps with step sizes larger than the convergence criterion for the displacement. I suspect these subtle errors are also occurring in DFT calculations on organic molecules, but because the errors are smaller there, the convergence failures do not happen consistently but only occasionally. (I can provide another example for an organic molecule if needed.). As an aside, I ran the geometry optimization in Q-Chem with the same settings (except Q-Chem does not use DF-SCF) and the optimization converged in 83 steps (a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:1776,optimiz,optimization,1776,https://psicode.org,https://github.com/psi4/psi4/issues/3066,1,['optimiz'],['optimization']
Performance,"jects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install atlas-3.8.4-8.fc19.x86_64 blas-3.4.2-2.fc19.x86_64 keyutils-libs-1.5.5-4.fc19.x86_64 krb5-libs-1.11.3-1.fc19.x86_64 libcom_err-1.42.7-2.fc19.x86_64 libselinux-2.1.13-15.fc19.x86_64 pcre-8.32-7.fc19.x86_64; (gdb) bt full; #0 subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; type = 0x10d7f9c0; base = <optimized out>; basedealloc = <optimized out>; tstate = 0x0; #1 0x00007ffff6b92cb2 in xdecref<_object> (p=<optimized out>) at boost/python/refcount.hpp:36; p = <optimized out>; #2 reset (this=0x1107b438) at boost/python/handle.hpp:249; No locals.; #3 boost::python::converter::shared_ptr_deleter::operator() (this=0x1107b438) at libs/python/src/converter/builtin_converters.cpp:35; No locals.; #4 0x0000000000710812 in psi::Process::Environment::~Environment() (); No symbol table info available.; #5 0x000000374f2390a9 in __run_exit_handlers (status=0, listp=0x374f5b96e8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77; atfct = <optimized out>; onfct = <optimized out>; cxafct = <optimized out>; f = <optimized out>; #6 0x000000374f2390f5 in __GI_exit (status=<optimized out>) at exit.c:99; No locals.; #7 0x000000374f221b7c in __libc_start_main (main=0x699720 <main>, argc=2, ubp_av=0x7fffffffdb38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdb28); at libc-start.c:292; result = <optimized out>; unwind_buf = {cancel_jmp_buf = {{jmp_buf = {0, -420104691260379722, 7149040, 140737488345904, 0, 0, 420104692152085942, -412673899392062026}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, ; 0x1c22e20 <__libc_csu_init>, 0x7fffffffdb38}, data = {prev = 0x0, cleanup = 0x0, canceltype = 29503008}}}; not_first_call = <optimized out>; #8 0x00000000006d1619 in _start (); ```. Is this a crash in python/boost misusing python/psi misusing boost and python?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8:1342,optimiz,optimized,1342,https://psicode.org,https://github.com/psi4/psi4/issues/8,10,['optimiz'],['optimized']
Performance,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2885,optimiz,optimize,2885,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['optimiz'],['optimize']
Performance,keep_intcos works for successful optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2188:33,optimiz,optimization,33,https://psicode.org,https://github.com/psi4/psi4/pull/2188,1,['optimiz'],['optimization']
Performance,"l = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** tstart() called on xxx; *** at Tue Mar 28 17:20:51 2023. => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry C line 90 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs; atoms 3-8 entry H line 15 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 8 Threads, 114440 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; C -0.759130000000 0.027045000000 0.000000000000 12.000000000000; C 0.759130000000 -0.027045000000 0.000000000000 12.000000000000; H -1.125990000000 0.306235000000 1.010150000000 1.007825032230; H -1.171340000000 -0.966695000000 -0.274750000000 1.007825032230; H -1.109050000000 0.781825000000 -0.735390000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:2601,Load,Loading,2601,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Load'],['Loading']
Performance,"l, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2552:1435,perform,perform,1435,https://psicode.org,https://github.com/psi4/psi4/pull/2552,1,['perform'],['perform']
Performance,l/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -openmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_CXX: /opt/intel/impi/5.0.1.035/intel64/lib/libmpicxx.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_Fortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:6395,Perform,Performing,6395,https://psicode.org,https://github.com/psi4/psi4/issues/201,8,['Perform'],['Performing']
Performance,"l: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:13962,Cache,Cache,13962,https://psicode.org,https://github.com/psi4/psi4/issues/62,2,['Cache'],['Cache']
Performance,"l=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13636,optimiz,optimized,13636,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"l=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:8878,optimiz,optimized,8878,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"le contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3716,optimiz,optimize,3716,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['optimiz'],['optimize']
Performance,"lib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 threads */; tp = create_threadpool(NUM_THREADS);. for (i = 0; i < NUM_JOBS; i++); {; /* Create a unique file name i.e. ""./Files/file1.txt"" */; sprintf(&filenames[i][0], ""/home/spd/rwgreen/quad/rwgreen/forums/81088/file%d.txt"", i+1);. /* Create a unique file I/O unit */; io[i] = 10+i;. /* Add file name and I/O unit to threadpool job queue */; printf(""Main: queueing %s\n"", &filenames[i][0]);; dispatch_job(tp, job_thread, (void *) &filenames[i][0], &io[i]);; }. /* Wait a while for all the threads to do their thing */; printf(""Main: sleeping 20 secs...\n"");; sleep(20);; printf(""Main: waking up and destroying threadpool...\n"");. /* Clean up threadpool */; destroy_threadpool(tp);. /* close the Fortran Runtime */; io_status = for_rtl_finish_ () ;. printf(""Main: exiting...\n"");; return 0;; }. /* Thread job function */; void job_thread(void *arg1, void *arg2); {; char *filename = (char *) arg1;; int *io = (int *) arg2;; unsigned int len = strlen(filename);. char string[len+1];; sprintf(string, ""%s"", filename);. fpa(*io, string); . printf(""->Thread %ld: Opened %s (len=%d) on I/O unit %d\n"", pthread_self(), filename, len, *io);; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:2331,queue,queue,2331,https://psicode.org,https://github.com/psi4/psi4/pull/604,2,['queue'],"['queue', 'queueing']"
Performance,"lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::trans",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:1845,optimiz,optimized,1845,https://psicode.org,https://github.com/psi4/psi4/issues/12,2,['optimiz'],['optimized']
Performance,"libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018. s6 = 1.000000; s8 = 0.390800; a1 = 0.566000; a2 = 3.128000. ---------------------------------------------------------; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1572,perform,perform,1572,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['perform'],['perform']
Performance,ls: 3								 Number of shells: 3; Number of ECP primitives: 13						 Number of ECP primitives: 13; Number of ECP core electrons: 10						 Number of ECP core electrons: 10; Max angular momentum: 2							 Max angular momentum: 2; 									 >; => Loading Basis Set <=							 => Loading Basis Set <=; 									 >; Name: (LANL2DZ AUX)								 Name: (LANL2DZ AUX); Role: JKFIT									 Role: JKFIT; Keyword: DF_BASIS_SCF							 Keyword: DF_BASIS_SCF; atoms 1-2 entry H line 18 file /Users/runner/work/psi4	 |	 atoms 1-2 entry H line 18 file D:\a\psi4\psi4\install\; atoms 3 entry O line 318 file /Users/runner/work/psi4	 |	 atoms 3 entry O line 318 file D:\a\psi4\psi4\install\; atoms 4 entry CA line 1250 file /Users/runner/work/psi4	 |	 atoms 4 entry CA line 1250 file D:\a\psi4\psi4\install\; 									 >; ==> Integral Setup <==							 ==> Integral Setup <==; 									 >; ==> DiskDFJK: Density-Fitted J/K Matrices <==					 ==> DiskDFJK: Density-Fitted J/K Matrices <==; 									 >; J tasked: Yes						 J tasked: Yes; K tasked: Yes						 K tasked: Yes; wK tasked: No						 wK tasked: No; OpenMP threads: 1						 OpenMP threads: 1; Integrals threads: 1						 Integrals threads: 1; Memory [MiB]: 375						 Memory [MiB]: 375; Algorithm: Core						 Algorithm: Core; Integral Cache: LOAD						 Integral Cache: LOAD; Schwarz Cutoff: 1E-12						 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12						 Fitting Condition: 1E-12; 									 >; => Auxiliary Basis Set <=							 => Auxiliary Basis Set <=; 									 >; Basis Set: (LANL2DZ AUX)							 Basis Set: (LANL2DZ AUX); Blend: DEF2-UNIVERSAL-JKFIT							 Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 81							 Number of shells: 81; Number of basis functions: 336						 Number of basis functions: 336; Number of Cartesian functions: 336						 Number of Cartesian functions: 336; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 4							 Max angular momentum: 4; 									 >; Minimum eigenvalue in the overlap matrix is 3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:5172,Cache,Cache,5172,https://psicode.org,https://github.com/psi4/psi4/issues/3072,4,"['Cache', 'LOAD']","['Cache', 'LOAD']"
Performance,"master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2081,load,loader,2081,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['load'],['loader']
Performance,merge queue preparation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:6,queue,queue,6,https://psicode.org,https://github.com/psi4/psi4/pull/2922,1,['queue'],['queue']
Performance,"mizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conformer number in the molecule to run the optimisation on. . Returns; -------; The ff optimised conformer. ; """"""; xtb_model = Model(method=""gfn2-xtb"", basis=None); keywords = {""verbosity"": ""muted""}; return qcengine_opt(; qc_mol=qc_mol, model=xtb_model, program=""xtb"", spec_keywords=keywords; ). def qcengine_opt(qc_mol: QCMolecule, model: Model, program: str, spec_keywords: dict[str, str]) -> QCMolecule:; """"""; A general function to run an optimisation via qcengine.; """"""; spec = QCInputSpecification(model=model, keywords=spec_keywords, driver=""gradient""); opt_spec = OptimizationInput(; initial_molecule=qc_mol,; input_specification=spec,; keywords={""coordsys"": ""dlc"", ; ""program"": program; } ; ); opt = qcengine.compute_procedure(opt_spec, ""geometric"", local_options = { ""memory"": 4, ; ""ncores"": 1}, ; raise_error=True); print(opt); return opt.final_molecule. def generate_grid(molecule: Molecule ,conformer: unit.Quantity, grid_settings: LatticeGridSettings) -> unit.Quantity:; """"""; Generates the grid for the ESP. . Parameters; ----------; conformer; The conformer which the grid needs to be generated on. Returns; -------; The grid. ; """"""; grid = GridGenerator.generate(molecule, conformer, grid_settings); #returns grid in Angstrom; return grid. def main():; ; smiles_list = ['CCO',; 'CC#N',; 'CCCN',; 'CCCOC',; 'CCOCC',; 'c1ccccc1C',; 'Cc1ccccc1C',; 'c1ccc(cc1)C#N',; 'CN(C=O)C',; 'C1=CC=CO1',; 'c1ccccc1N',; 'CCCO',; 'CC(C)CC',; 'CN',; 'CC(C)=O',; 'CC(O)C',; 'CS(=O)C',; 'CCS',; 'CCF',; 'CC(F)(F)F',; 'CCC(C)Cl',; 'CC(Cl)CCl',; 'CCCBr',; 'CCC(Br)(C)(C)',; 'C(C)(C)(Br)C',; 'C(F)(F)(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:6019,Optimiz,OptimizationInput,6019,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['Optimiz'],['OptimizationInput']
Performance,"mize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:1666,Optimiz,Optimization,1666,https://psicode.org,https://github.com/psi4/psi4/pull/1813,2,"['Optimiz', 'optimiz']","['Optimization', 'optimizations']"
Performance,"mize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:5008,load,load,5008,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"molecule {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. set basis def2-sv(p). optimize('pbe0'). With the lastest numpy 1.16.3 from conda, I get ""; Traceback (most recent call last):; File ""/home/psi4/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 691, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2064, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1289, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 156, in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/npyio.py"", line 447, in load; pickle_kwargs=pickle_kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/format.py"", line 692, in read_array; raise ValueError(""Object arrays cannot be loaded when "". ValueError: Object arrays cannot be loaded when allow_pickle=False; "". When I downgrade to 1.16.2, I get no error. Release note of numpy 1.16.3: ; ""The most noticeable change in this release is that unpickling object arrays; when loading *.npy or *.npz files now requires an explicit opt-in.; This backwards incompatible ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610:136,optimiz,optimize,136,https://psicode.org,https://github.com/psi4/psi4/issues/1610,2,['optimiz'],['optimize']
Performance,"n I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although the gradient difference in this case is larger than geomeTRIC's convergence criterion for the RMS / max gradient, a smaller difference of 1e-5 to 1e-4 could still cause a failure to converge by causing the optimizer to take incorrect steps with step sizes larger than the convergence criterion for the displacement. I suspect these subtle errors are also occurring in DFT calculations on organic molecules, but because the errors are smaller there, the convergence failures do not happen consistently but only occasionally. (I can provide another example for an organic molecule if needed.). As an aside, I ran the geometry optimization in Q-Chem with the same settings (except Q-Chem does not use DF-SCF) and the optimization converged in 83 steps (attached qchem/ subfolder in data.zip). It would be really great if the development team could look at this. An improvement in the accuracy of DFT gradients would lead to great improvements in geometry optimization performance. . Thanks,. - Lee-Ping. [data.zip](https://github.com/psi4/psi4/files/13192796/data.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:2208,optimiz,optimizer,2208,https://psicode.org,https://github.com/psi4/psi4/issues/3066,5,"['optimiz', 'perform']","['optimization', 'optimizer', 'performance']"
Performance,"n gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:5106,load,load,5106,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"n removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4794,optimiz,optimize,4794,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['optimiz'],['optimize']
Performance,"n, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: B3LYP-D3ZERO <= . B3LYP-d3zero Hyb-GGA Exchange-Correlation Functional. P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch, J. Phys. Chem. 98, 11623 (1994) (10.1021/j100096a001). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 0.0800 Slater exchange; 0.7200 Becke 88. => Exact (HF) Exchange <=. 0.2000 HF . => Correlation Functionals <=. 0.1900 Vosko, Wilk & Nusair (VWN5_RPA); 0.8100 Lee, Yang & Parr. => LibXC Density Thresholds <==. XC_HYB_GGA_XC_B3LYP: 1.00E-15 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 1908346; Total Blocks = 13882; Max Points = 256; Max Functions = 485; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (6-31G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-4, 9-12, 21-24, 33-34 entry H line 51 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 121 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 667 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 498 file PATH\envs\psi4\lib\share\psi4\basis\def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 4; Integrals threads: 4; Memory [MiB]: 16093; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (6-31G AUX);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:18900,Load,Loading,18900,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Load'],['Loading']
Performance,"n3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/snsmp2.py:81: in run_sns_mp2; m1mhigh = c.compute('m1', 'm', 'high', mp2=True, mp2_dm=True); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:386: in compute; self._init_ns(calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:143: in _init_ns; return self._init_upcast_C(oldcalc=candidate, calc=calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:172: in _init_upcast_C; new_wfn = self._basis_projection(oldcalc, calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:187: in _basis_projection; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array fro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:1612,load,load,1612,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:7477,load,load,7477,https://psicode.org,https://github.com/psi4/psi4/issues/2510,3,"['Load', 'load']","['Loader', 'load']"
Performance,"nction_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2447,optimiz,optimized,2447,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"nd fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry tr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:5992,perform,performance,5992,https://psicode.org,https://github.com/psi4/psi4/pull/834,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Ind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:2213,perform,performing,2213,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['perform'],['performing']
Performance,"nge the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed duri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1522,perform,performed,1522,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['perform'],['performed']
Performance,"nt 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28425,optimiz,optimize,28425,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['optimiz'],['optimize']
Performance,"ntegral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs ; atoms 2 entry H line 23 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 732; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 23; Number of basis function: 80; Number of Cartesian functions: 80; Spherical Harmonics?: false; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 1.9324024167E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.34299486696379 -3.42995e-01 0.00000e+00 ; @DF-UHF iter 1: -0.48778126858064 -1.44786e-01 7.18202e-03 DIIS; @DF-UHF iter 2: -0.49627418123381 -8.49291e-03 2.58017e-03 DIIS; @DF-UHF iter 3: -0.49762079007351 -1.34661e-03 1.09982e-04 DIIS; @DF-UHF iter 4: -0.49762397190176 -3.18183e-06 1.60614e-05 DIIS; @DF-UHF iter 5: -0.49762403062183 -5.87201e-08 1.47415e-06 DIIS; @DF-UHF iter 6: -0.49762403115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF ite",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:3206,Cache,Cache,3206,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Cache'],['Cache']
Performance,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1939,Optimiz,Optimize,1939,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Optimiz'],['Optimize']
Performance,"nverge didn't look quite right. Here is a script I used:. ```python; #! Torsion scan of butane. molecule c4h10 {; 0 1; H -1.781487710695 -1.339015245276 -0.924843604480; H -2.809655081231 -0.316498366521 0.106834552942; H -1.696171739547 -1.492504703619 0.844458676121; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF sin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1132,optimiz,optimization,1132,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['optimiz'],['optimization']
Performance,"o unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/si",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:4011,optimiz,optimize,4011,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['optimiz'],['optimize']
Performance,ocal/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2229,Perform,Performing,2229,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"oml#L14) and making links seem broken for psicode.org/psi4manual .; * the combination of progressing Sphinx development and stagnant cloud theme development (from which the sphinx_psi_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1351,cache,cache,1351,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['cache'],['cache']
Performance,"onally terminates the output file with two consecutive ""Buy a developer a beer!"" statements as you can see here:. ```; Psi4 stopped on: Sunday, 12 August 2018 05:55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ----------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:1131,Load,Loading,1131,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['Load'],['Loading']
Performance,"onte Carlo (QMC) electronic structure calculations. Third-party codes are required to generate trial wave function. Support for Gaussian basis set quantum chemistry code is provided through the **[molden2qmc](https://github.com/Konjkov/molden2qmc)** utility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1126,optimiz,optimization,1126,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['optimiz'],['optimization']
Performance,"oost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:4302,optimiz,optimized,4302,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,optimization using solvent model,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3178:0,optimiz,optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/3178,1,['optimiz'],['optimization']
Performance,optimize('uhf') doesn't realize it has analytic gradients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103:0,optimiz,optimize,0,https://psicode.org,https://github.com/psi4/psi4/issues/103,1,['optimiz'],['optimize']
Performance,option to freeze all rotatable bonds during geometry optimization [feature request],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3170:53,optimiz,optimization,53,https://psicode.org,https://github.com/psi4/psi4/issues/3170,1,['optimiz'],['optimization']
Performance,ortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Per,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2065,Perform,Performing,2065,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ory Usage: 4168.171875 MB; memory use after geom opt; Memory Usage: 4168.171875 MB; --; ````. At the last point the calculation then hangs indefinitely, with 5gb memory set on the whole node. Although the memory usage does not completely go up at every step, the memory accumulates throughout the job. Psi4Errors printed above when a particular molecule fails to optimize, leading to the calculation to skip to the next molecule Other job input parameters are 1 node, 16 cores. . I have attempted to produce a minimal example of the context I running my program and where the memory leaks occur. ```; from openff.recharge.grids import LatticeGridSettings, GridGenerator; import psutil; import psi4; from openff.toolkit.topology import Molecule; from psi4.core import GeometryUnits; from openff.units.elements import SYMBOLS; from qcelemental.models.common_models import Model; from qcelemental.models import Molecule as QCMolecule; from qcelemental.models.procedures import OptimizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conformer number in the molecule to run the optimisation on. . Returns; -------; The ff optimised conformer. ; """"""; xtb_model = Model(method=""gfn2-xtb"", basis=None); keywords = {""verbosity"": ""muted""}; return qcengine_opt(; qc_mol=qc_mol, model=xtb_model, program=""xtb"", spec_keywords=keywords; ). def qcengine_opt(qc_mol: QCMolecule, model: Model, program: str, spec_keywords: dict[str, str]) -> QCMolecule:; """"""; A general function to run an optimisation via qcengine.; """"""; spec = QCInputSpecification(model=model, keywords=spec_keywords, driver=""gradient""); opt_spec = OptimizationInput(; initial_molecule=qc_mol",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:5036,Optimiz,OptimizationInput,5036,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['Optimiz'],['OptimizationInput']
Performance,"ost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2587,optimiz,optimized,2587,https://psicode.org,https://github.com/psi4/psi4/issues/153,3,['optimiz'],['optimized']
Performance,"ost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:4169,optimiz,optimized,4169,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"ostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing gre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:2725,Perform,Performance,2725,https://psicode.org,https://github.com/psi4/psi4/issues/1406,2,"['Optimiz', 'Perform']","['Optimizations', 'Performance']"
Performance,"ously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to be done in 3 PRs. This PR is the first one. The second PR in the CompositeJK process is the combining of the DFJLinK and DFJCOSK subclasses into the initial ""CompositeJK"" subclass and the implementation of the planned CompositeJK User API/user-facing end. The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combinatio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:2922,perform,performs,2922,https://psicode.org,https://github.com/psi4/psi4/pull/2762,2,['perform'],['performs']
Performance,"out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; frame #1: 0x00000001196d0a7c core.cpython-312-darwin.so`psi::BasisSet::update_l2_shells(this=0x00000001013e5128, embed_normalization=true) at basisset.cc:876:80; ```; - [x] For now GHA has both Intel and Silicon runners, so might as well test both. The Eco runners are also running ctest quick for now to get some regular testing in since those aren't covered by Azure. ; - [x] add adcc and forte tests to smoke. forte not tested in ecosystem yet.; - [x] fix docs GHA by forgiving FixedSize; - [x] fix docs again by restraining sphinx<8 b/c of an interaction with documenting pydantic v1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:2202,queue,queue,2202,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['queue'],['queue']
Performance,"own Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:3408,optimiz,optimization,3408,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:1037,perform,performance,1037,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['perform'],['performance']
Performance,problematic geometry optimization with DF-SCF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:21,optimiz,optimization,21,https://psicode.org,https://github.com/psi4/psi4/issues/1095,1,['optimiz'],['optimization']
Performance,"ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::operator()(pybind11::detail::function_call&) const (this=0x0, call=...) at /usr/include/pybind11/pybind11.h:160; #19 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:5701,optimiz,optimized,5701,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:3241,optimiz,optimized,3241,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10598,Perform,Performing,10598,https://psicode.org,https://github.com/psi4/psi4/issues/581,10,['Perform'],['Performing']
Performance,"r__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:19636,optimiz,optimized,19636,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,ran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Perfo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1939,Perform,Performing,1939,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"rd; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.00000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:1995,optimiz,optimize,1995,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['optimiz'],['optimize']
Performance,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:3040,Optimiz,Optimized,3040,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['Optimiz'],['Optimized']
Performance,"rgy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 25.59060766929188; CD-HF Energy (a.u.) : -129.25927206477397; REF Energy (a.u.) : -129.25927206477397; Alpha-Alpha Contribution (a.u.) : -0.03921205696199; Alpha-Beta Contribution (a.u.) : -0.20476196654188; Beta-Beta Contribution (a.u.) : -0.03692010667753; Scaled_SS Correlation Energy (a.u.): -0.02537738787984; Scaled_OS Correlation Energy (a.u.): -0.24571435985026; CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; CD-MP2 Total Energy (a.u.) : -129.54016619495539; =======================================================================. Number of alpha independent-pairs:172; Number of beta independent-pairs :157. ==============================================================================; ================ Performing CD-OMP2 iterations... ============================; ==============================================================================; Minimizing CD-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 2171897840405125233095316875881590551467307175332860142219670350830780702696283291230457729657914921746891661667264776735054294112163359650172177568018543474023361651834998812756231127668278305330007498940536320077394375160362584676926576578513365418212288803914428069938462720.0000000000 2.17e+276 inf 1.41e+183 8.10e+89; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 40, in <module>. File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/pyt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391:1121,Perform,Performing,1121,https://psicode.org,https://github.com/psi4/psi4/issues/391,1,['Perform'],['Performing']
Performance,rtran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Per,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2106,Perform,Performing,2106,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28276,optimiz,optimization,28276,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['optimiz'],['optimization']
Performance,"ryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; se",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:1273,optimiz,optimizer,1273,https://psicode.org,https://github.com/psi4/psi4/issues/789,1,['optimiz'],['optimizer']
Performance,"s = 302; Total Points = 238643; Total Blocks = 1822; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 3-8 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2, 9-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.163 GiB; user supplied 0.163 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 167; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 3.8471; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.155 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5224744543E-04.; Reciprocal condition number of the overlap matrix is 8.7845130506E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -40.20742626722070 -4.02074e+01 0.00000e+00 ; @DF-RKS iter 1: -41.85372076056422 -1.64629e+00 4.64946e-03 DIIS/ADIIS; @DF-RKS iter 2: -42.00985523463992 -1.56134e-01 2.18407e-03 DIIS/ADIIS; @DF-RKS iter 3: -42.04248981983608 -3.26346e-02 7.08822e-04 DIIS/ADIIS; @DF-RKS iter 4: -42.04528563064348 -2.79581e-03 3.01721e-04 DIIS/ADIIS; @DF-RKS iter 5: -42.04589556301210 -6.09932e-04 8.40052e-05 DIIS; @DF-RKS iter 6: -42.0459464131240",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:22478,Cache,Cached,22478,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Cache'],['Cached']
Performance,"s = 75; Spherical Points = 302; Total Points = 281815; Total Blocks = 2159; Max Points = 256; Max Functions = 305; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 4, 6 entry O line 318 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2-3, 9-13 entry H line 18 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 5, 7-8 entry C line 198 file .../share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap matrix is 5.7126628552E-07.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 350 350 ; -------------------------; Total 350 350; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -266.76788027937141 -2.66768e+02 0.00000e+00 ; @DF-RKS iter 1: -267.44459096234198 -6.76711e-01 2.70804e-03 DIIS/ADIIS; @DF-RKS iter 2: -266.62712078236223 8.17470e-01 4.29888e-03 DIIS/ADIIS; @DF-RKS iter 3: 222.21931934020711 4.88846e+02 3.68763e-02 DIIS/ADIIS; @DF-RKS iter 4: -220.14524491052583 -4.42365e+02 1.39645e-02 DIIS/ADIIS; @DF-RKS iter 5: 105.97080762091727 3.26116e+02 3.43637e-02 DIIS/ADIIS; @DF-RKS iter 6: -197.93937",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:7328,Cache,Cached,7328,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Cache'],['Cached']
Performance,"s alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 590; Total Points = 912458; Total Blocks = 6145; Max Points = 256; Max Functions = 640; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 13-18 entry C line 198 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-12, 19-24 entry H line 18 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880419187541 1.37930e+02 2.89342e-02 DIIS/ADIIS; @DF-RKS iter 2: -104.73618075758787 -3.00874e+01 2.89040e-02 DIIS/ADIIS. Traceback (most recent call last):; File ""[REMOVED BASE DIRECTORY]/bin/psi4"", line 347, in <module>; exec(content); File ""<string>"", line 66, in <module>; File ""[REMOVED BASE DIRECTORY]/lib/psi4/dr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:10519,Cache,Cached,10519,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Cache'],['Cached']
Performance,"s); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 739, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2485, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1607, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 473, in scf_iterate; raise SCFConvergenceError(""""""SCF iterations"""""", self.iteration_, self, Ediff, Dnorm). psi4.driver.p4util.exceptions.SCFConvergenceError: Could not converge SCF iterations in 100 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""MAXITER"", 100); core.set_global_option(""G_CONVERGENCE"", ""gau""); core.set_global_option(""SOSCF"", ""true""); core.set_global_option(""SOSCF_MAX_ITER"", 40); set_num_threads(20); --> E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'); def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Psi4 stopped on: Tuesday, 26 October 2021 02:03PM; Psi4 wall time for execution: 3:28:16.19; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:16968,optimiz,optimize,16968,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance,"s, ultimately, to create a new JK class (_CompositeJK_) that offers a proper framework for combining separate J and K algorithms for use in JK construction. Such a class will provide a home for any new separate J and K algorithm that gets added to Psi4 in the future (such as the in-progress CFMM). Additionally, the CompositeJK class will be designed in such as a way to enable arbitrary combinations of any available separate J and K build algorithm through a single JK subclass. This arbitrary mixing and matching is planned to be accesible in a user-friendly way. DFJLinK is the first step to this process. DFJLinK, itself, is a new JK subclass that combines the integral-direct density fitted J build algorithm from DFJCOSK with the LinK algorithm previously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:2218,perform,performs,2218,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['perform'],['performs']
Performance,"s/unix/sysv/linux/raise.c:55. 55 return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);; (gdb) where; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55; #1 0x00006a91c31f353a in __GI_abort () at abort.c:89; #2 0x00000000014c2e4f in opt::optking(psi::Options&) (); #3 0x0000000000a4c2fc in py_psi_optking() (); #4 0x0000000000a8993e in boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (); #5 0x000000000554b96e in boost::python::objects::function::call(_object_, _object_) const (); #6 0x000000000554b6a5 in boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 Py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2125,optimiz,optimized,2125,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9356,Load,Loading,9356,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Load'],['Loading']
Performance,seg fault possibly caused by or related to collocation grid cache build,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366:60,cache,cache,60,https://psicode.org,https://github.com/psi4/psi4/issues/1366,1,['cache'],['cache']
Performance,"separate J build algorithm of choice, and _K_alg_ is the separate K algorithm of choice. As of now, the two CompositeJK options available are `DIRECTDFJ+LINK` representing the old DFJLinK class, and `DIRECTDFJ+COSX` representing the old DFJCOSK class. The key here, is that the ""+"" delimiter in SCF_TYPE serves as a signal to Psi4 that a CompositeJK algorithm is being used. ; - Back end. Basically all of the back-end changes can be classified into two categories - merging DFJLinK and DFJCOSK into the initial CompositeJK implementation, and modifications of functions where necessary to support the above front-end changes. . ## User API & Changelog headlines; - [X] The ""COSX"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+COSX"".; - [X] The ""LINK"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+LINK"". ## Dev notes & details; - [X] Refactors the DFJLinK and DFJCOSK classes into the combined CompositeJK JK subclass. CompositeJK can perform the computations previously performed by both DFJLinK and DFJCOSK within a single JK subclass. These changes are largely localized to the commits f0c4f6c8e31696f6690e101d71bef1863bcf324c - ca66c91976cb5e8c42c8292fcf90c6d28b885fd0, with bfdff974dbfbb9513c85a460b00495598e5f240e also counting. ; - [X] Implements a new scheme for ""SCF_TYPE"" names associated with CompositeJK algorithm combinations. This scheme uses the ""+"" delimiter in conjunction with the names of the separate J and K algorithms present in CompositeJK to use a specific combination of separate J and K build algorithms. ; - [X] Changes functionalities in DFJLinK and DFJCOSK, as well of the JK base class itself, as necessary to support the standardized ""SCF_TYPE"" naming scheme and the general flexibility and ease of expansion that CompositeJK is aiming for.; - [X] Updates relevant tests and documentation. ## To-do; - [x] Update CompositeJK methods with comments on paper references.; - [x] Update CompositeJK::num_computed_shells() function. ## Questions; - [ ] ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:3323,perform,perform,3323,https://psicode.org,https://github.com/psi4/psi4/pull/2833,2,['perform'],"['perform', 'performed']"
Performance,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871:1844,CACHE,CACHE,1844,https://psicode.org,https://github.com/psi4/psi4/issues/871,2,['CACHE'],['CACHE']
Performance,"si_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought https://sphinx-tabs.readthedocs.io/en/latest/ would be a nice way to show psithon/psiapi/qcschema syntax, so I added that requirement to the docs build along with a quick example. ## ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1515,load,load,1515,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['load'],['load']
Performance,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13019,optimiz,optimized,13019,https://psicode.org,https://github.com/psi4/psi4/issues/2010,8,['optimiz'],"['optimize', 'optimized']"
Performance,"sity Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0000E+00; VV10 C = 1.0000E-02. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 281815; Total Blocks = 2159; Max Points = 256; Max Functions = 305; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 4, 6 entry O line 318 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2-3, 9-13 entry H line 18 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 5, 7-8 entry C line 198 file .../share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap matrix is 5.7126628552E-07.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 350 350 ; -------------------------; Total 350 350; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -266.76788027937141 -2.66768e+02 0.00000e+00 ; @DF-RKS iter 1: -267.44459096234198 -6.76711e-01 2.70804e-03 DIIS/ADIIS; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:7036,Cache,Cache,7036,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Cache'],['Cache']
Performance,"sively parallel fashion, including utilization of multiple nodes via MPI, and GPU support. Of more interest to this PR, GauXC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:1129,load,load,1129,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['load'],['load']
Performance,"so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018. s6 = 1.000000; s8 = 0.390800; a1 = 0.566000; a2 = 3.128000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 4 Threads, 7629 MiB Core; -------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1683,Load,Loading,1683,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Load'],['Loading']
