quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"Hey Rocco,. > And both versions are/were on the develop branches -> what exactly do you refer to here: config-files, code, mesh. The code tags 6.0.1 and 6.2.0 refer to specific master-commits of the code. So I want to know what is exactly of the develop branch, can't be the code if you understand the tags as I do. Maybe you refer to the develop code at the time where these tags were introduced. But maybe sth different. > I guess they converge eventually to the same values. I tried to compare the same case but steady (I attach the summary). Results in this case are fairly similar and (in my opinion) raise no warnings. That is good to hear. ; Luckily @cvencro (Thanks for that üëç ) ran some tests and found that #740 (which rewrites Euler Wall boundaries for compressible and incompressible flows ... which was me btw) introduces the changes you see. The Euler wall for compressible is changed a bit in the way the boundary condition is enforced. Upon convergence both version should recover (close to) the same value. If the results in a steady state are the same/very-similar and if an unsteady simulation at low enough Reynolds-number converges to the same steady result (or oscillate in the same bounds) -> I would say it is simply some purely numerical effect based on the unphysical initialization and different treatment of the euler wall boundary. . 1 thing one could test additionally is to force a very high convergence in each physical timestep, i.e. usually one converges ~3 orders of magnitude in each ts -> now try converging until residual stalling in each ts. If the code versions get the same/closer results in the temporal evolution my euler wall boundary explanation would be quite reasonable.; Together with the long running unsteady simulation proposed above, I would feel more comfortable to judge. @cvencro (bringing the conversation to this place üòâ ) concerning the pitching case: the `if (dynamic_grid)` statements in the 'old' version are not necessary as that is handle",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-562621057:103,config,config-files,103,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-562621057,4,"['config', 'rewrite']","['config-files', 'rewrites']"
Modifiability,"Hey Tim, Sorry I couldn't try this while it was still in PR mode, but I just tried it on my ubuntu 16.04 and after some poking around, it worked! Compilation from scratch was very rapid. . Just a quick thing, the documentation didn't quite work for me but that is probably because my default python is 2.7. Which meant that I had to execute it as:. `python3 meson.py ...`. When I did that, I got this error: ; ```; Message: Looking for mpi4py in /usr/lib/python3/dist-packages; Run-time dependency python3 found: NO (tried pkgconfig). SU2_PY/pySU2/meson.build:29:0: ERROR: Dependency ""python3"" not found, tried pkgconfig; ```; This was not fixed by installing mpi4py the way it is suggested in the draft documentation. Stack overflow came to the rescue and I had to run . `sudo apt-get install python3-mpi4py`. After this the installation worked perfectly. I am not sure if this is an anomaly and that it won't happen in properly configured workstations. I also am not a 100% sure about why this worked (I am a linux noob). So I will leave it to your discretion whether this is something you want to add to the documentation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/745#issuecomment-525114027:930,config,configured,930,https://su2code.github.io,https://github.com/su2code/SU2/pull/745#issuecomment-525114027,1,['config'],['configured']
Modifiability,"Hey Tobi, I have tried and succeeded in testing the HEAT_EQUATION_FVM example. One more thing to mention, to run the configSolide.cfg alone, another line needs to be edited. . ```; %EXTRA_HEAT_ZONE_OUTPUT = 2-->; EXTRA_HEAT_ZONE_OUTPUT = 1; ```. And one can directly delete all things concerning iZone=1 in the mesh file and rename iZone=2 to be iZone=1. ![2019-09-04 15-56-09 ÁöÑÂ±èÂπïÊà™Âõæ](https://user-images.githubusercontent.com/33152225/64236361-d163cc80-cf2c-11e9-9971-2d4e2c01955c.png). Except for that, is anyone familiar with the error: SU2 diverge? Every time when I want to add unsteady options to make an animation, the error tells me the solution diverges. ```; ------------------------------ Begin Solver -----------------------------. Error in ""void CSysSolve::ModGramSchmidt(int, std::vector<std::vector<double> >&, std::vector<CSysVector>&)"": ; -------------------------------------------------------------------------; SU2 has diverged.; ------------------------------ Error Exit -------------------------------; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/783#issuecomment-527789690:117,config,configSolide,117,https://su2code.github.io,https://github.com/su2code/SU2/issues/783#issuecomment-527789690,1,['config'],['configSolide']
Modifiability,"Hey Tom,. this was fast ! Thanks for the first step in making the output structure more efficient and flexible. So far it looks good. I'll test it for the adjoint soon. @LaSerpe I think for the beginning these things will be hard-coded. But defining this in the config file is definitely a feature we should discuss.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/328#issuecomment-259400331:102,flexible,flexible,102,https://su2code.github.io,https://github.com/su2code/SU2/pull/328#issuecomment-259400331,2,"['config', 'flexible']","['config', 'flexible']"
Modifiability,"Hey everyone! Just posting the results from one of the NASA TMR verification test cases I have been running: [the DSMA661](https://turbmodels.larc.nasa.gov/airfoilwakeverif500c.html). Using Least Squares (LSQ) for the gradient reconstruction does affect the results and can be seen from this force convergence plot. Using the same gradient reconstruction (GG) gives more accurate results. The two SU2 runs were done using identical linear solver parameters. The only difference is that for the GG+LSQ case, I specified : `NUM_METHOD_GRAD_RECON= LEAST_SQUARES` and for the GG case, I had to reduce the max CFL down to ~20 for it to get stable. . ![cfl_adap_force_convergence_dsma661_SA](https://user-images.githubusercontent.com/30271435/68785755-7ec12380-05f3-11ea-89e3-4b93edeb9d64.png). But due to the much lower maximum CFL, the GG run takes 40-50x longer to reach the same level of convergence. I'm not sure what else can be done to make adaptive CFL better for the GG or WLSQ cases.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-553494652:942,adapt,adaptive,942,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-553494652,1,['adapt'],['adaptive']
Modifiability,"Hey guys... I just want to clarify, as there seems to be three issues being discussed:. Issue 1) SOLVED - This was related to a crash in the the `CEulerSolver::SetUpwind_Ducros_Sensor()` - This can be fixed by changing a call from GetnNeighbor() to GetnPoints() (see my comments on April 30). I don't believe this ended up being related to the overrun in the restart file (Issue 2). Issue 2) SOLVED - This was a crash when starting with very large meshes, caused by an integer overrun in `CSolver::Read_SU2_Restart_Binary()`. This issue is solved by converting the displacement variable to MPI_Aint and using `MPI_Type_create_hindexed()`, instead of `MPI_Type_indexed()`. Issue 3) This is another issue I've been seeing with large simulations: the paraview .vtu files output by SU2 are unable to be read in by Paraview. The error in Paraview is . ""ERROR: In /local/paraview/VTK/IO/XML/vtkXMLDataReader.cxx, line 400; vtkXMLUnstructuredGridReader (0x55b6b838a330): Cannot read point data array ""Density"" from PointData in piece 0. The data array in the element may be too short."". This is the error Edwin is referring to today. I am changing the type of totalByteSize to a long, and will test to see if that solves the issue. Note that the solution to Issues 1 and 2 are *not* yet in the develop branch. I will create a pull request (should be by end of the day today) when I have verified that the solutions work.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-625381735:578,variab,variable,578,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-625381735,1,['variab'],['variable']
Modifiability,"Hi @Eduardo-Carvalho ,. your request is now merged into the develop branch and you can test/use it if you like. It will be in one of the next releases, if no further issues occur.; Handling is intuitive: Just set your restart iteration in the config file as you would do normally and activate the restart solution option. Furthermore, place your restart file (two in the case of 2nd order time integration) in the same directory as the config file of your test case. Then you are set up and can run the scripts as normal. ; For more details, I refer to pull request #964. . Best; Steffen",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/909#issuecomment-630289600:243,config,config,243,https://su2code.github.io,https://github.com/su2code/SU2/issues/909#issuecomment-630289600,4,['config'],['config']
Modifiability,"Hi @Nicola-Fonzi,. I'm not 100% sure of the reasons behind the GetFSI_Simulation criteria. I'd imagine that the nMarker_Fluid_Load might have been included there to make sure that a problem is treated as FSI only if there is transfer of load from the fluid to the structural domain, even if both zones existed independently in the config. But since the GetFSI_Simulation check is set up as an ""or"" rather than ""and"", as long as one of them is satisfied, the logic will be true for an FSI simulation, which might be sufficient for your application?. For the velocity transfer, I agree with Rafa that it would be better if you could also transfer the velocity from the external structural solver. If an external structural solver is used for dynamic analysis, it probably can output the structural velocities as well as the structural displacements? I left the methods for the recalculation of the grid velocity using finite differences in the code to support fluid-only problems with dynamic grid motion, I wouldn't suggest this as the method for FSI problems. For primal analysis, results from both methods agree with FSI benchmark cases but if you are interested in adjoint analysis at any point, transferring the velocity information from the structural domain directly to the fluid domain gives a significant simplification and improvement to the gradients.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778368854:331,config,config,331,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778368854,2,['config'],['config']
Modifiability,Hi @TobiKattmann . I am OK if we clearly explain the changes in the config template as my main concern is with the users side.; Thanks!. Eduardo,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/735#issuecomment-513959331:68,config,config,68,https://su2code.github.io,https://github.com/su2code/SU2/issues/735#issuecomment-513959331,2,['config'],['config']
Modifiability,"Hi @TobiKattmann sorry, I must have missed your message somehow! Thanks for the input, maybe when the mesh adaptation strategy has matured a little more (or is better documented), it can be a bit more easily used. This is also in response to @fredericodpc Right now, I don't know if it is a bug or I'm just unsure of how to correctly use it, but I also have not been able to get the mesh to respect the wing surface. I've also not heard from the branch author either, so I don't know if this is being maintained publically anymore. =( It's a shame because it looked really promising for optimising the cost/accuracy of supersonic solutions!. Ideally, I think one should be able to pass in a representation of the actual surface (either through an stl surface or as a very fine mesh), which should be used as a reference surface. As a minimum, we should be able to set a maximum surface mesh turning angle or some other surface-local control.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-846386250:107,adapt,adaptation,107,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-846386250,1,['adapt'],['adaptation']
Modifiability,"Hi @WallyMaier ! Could you please remove the unused variables in NEMO's ausm.hpp, ausmplusup2.hpp, lax.hpp and NEMO_diffusion.hpp files ? They were introduced in a previous PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1139#issuecomment-751794519:52,variab,variables,52,https://su2code.github.io,https://github.com/su2code/SU2/pull/1139#issuecomment-751794519,1,['variab'],['variables']
Modifiability,"Hi @WenyinWei : if they have some time, I think that @WallyMaier and @MarcoFossati could fill you in on their approach with the TNE2 branch and NEMO (the idea is for those branches to be merged). @MarcoFossati and one of his students have been coupling Mutation++ to SU2 and have been making nice progress. For the work you cite some time ago in our group at Stanford, Maxwell's equations were solved directly in SU2 (well perhaps just a subset, Gauss's law, if I remember correctly). That work should still be in the git history back in v1.0 or v2.0, I think. Should be able to find it with some searching.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/741#issuecomment-515552244:244,coupling,coupling,244,https://su2code.github.io,https://github.com/su2code/SU2/issues/741#issuecomment-515552244,1,['coupling'],['coupling']
Modifiability,"Hi @WenyinWei, ; using (on Linux) `grep -r HEAT_EQUATION_FVM .` in the `<SU2_root>/Testcases` folder will point you to `./coupled_cht/incompressible/configSolid.cfg:15:SOLVER= HEAT_EQUATION_FVM`. It is a CHT Testcase (i.e. coupled fluid and solid) but by changing `MARKER_CHT_INTERFACE ` in configSolid.cfg to `MARKER_ISOTHERMAL=(PINSD, 350)` for example you should be able to run the configSolid.cfg alone. ; Hope that helps, Tobi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/783#issuecomment-527331047:149,config,configSolid,149,https://su2code.github.io,https://github.com/su2code/SU2/issues/783#issuecomment-527331047,3,['config'],['configSolid']
Modifiability,"Hi @amirkb91,; It sounds like you have done things the right way, so if the variables are not being reset after they are registered my next guess is that they are not being considered for pre-accumulation. Try running the code without pre-accumulation (there is a config option, no need to recompile) and see if that makes a difference.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-491813704:76,variab,variables,76,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-491813704,2,"['config', 'variab']","['config', 'variables']"
Modifiability,"Hi @antares190,. Glad to see that things seem to be starting to work for you. We (Brian) are trying to improve this capability in the solver and any experiences / suggestions / help will be welcome. With that said, this seems like an interesting result. Would you mind submitting it (or other pictures that you like better) so the SU2 Foundation can use it to show this capability to others in the future? The link where you can do this is here<http://su2foundation.org/su2-promotional-material/?utm_source=hs_email&utm_medium=email&utm_content=76584389&_hsenc=p2ANqtz-9fEq2awKk2vd155cCcN_N4mWBCZK-rJ-TqNsZhqSJs-VWn-w7q-H6w8sdiA3LyuOTqlK4eqZhFFstKi-LQFyyGqYPdkwYc9JsNdB1yyd7pqMwTFzA&_hsmi=76584389>. Thanks a lot,. Juan. On Apr 29, 2020, at 1:38 PM, antares190 <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks Brian,; my bad, I misinterpreted the carpets / logs structure. I successfully ran a test of a very simple case. In the results there are some small artifacts, but the shocks are resolution improved consistently after mesh adaption.; Thanks for the support. [Comparison]<https://user-images.githubusercontent.com/41752169/80644172-84a7a580-8a69-11ea-9f16-58e98c808b73.png>; [ComparisonMesh]<https://user-images.githubusercontent.com/41752169/80644174-85403c00-8a69-11ea-819f-2ac00550a089.png>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/948#issuecomment-621450497>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AA5FFRCGLBHJCB3FS4JSSV3RPCF5RANCNFSM4MQACOXA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-621483859:1058,adapt,adaption,1058,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-621483859,2,['adapt'],['adaption']
Modifiability,"Hi @bmunguia ,; I was in the same situation as @MiracAydin1, so thanks for the hint. Nevertheless I'm having some problems. I followed your instructions to install the branch:. 1. downloaded the [feature_adapt_sst](https://github.com/su2code/SU2/tree/feature_adap_sst) branch.; 2. Used meson to configure the build; `./meson.py build -Denable-autodiff=true -Denable-directdiff=true`; 3. Added the environment variables to the .bashrc; 4. ninja build.; `./ninja -C build install`. The build didn't show any errors, only few warnings during meson ( `gcc1: warning: command line option ‚Äò-Wno-non-virtual-dtor‚Äô is valid for C++/ObjC++ but not for C`). When I try to run the mesh_adaption (or even run simply the solver through parallel_computation.py):. `$SU2_RUN/mesh_adaptation_amg.py -f invCyl.cfg -n 6`. It immediately shows an error (without even showing the SU2 splash screen) :; `Traceback (most recent call last):`; ` File ""/usr/local/bin/mesh_adaptation_amg.py"", line 38, in <module>`; ` import SU2`; ` File ""/usr/local/bin/SU2/__init__.py"", line 14, in <module>`; ` from SU2 import amginria`; ` File ""/usr/local/bin/SU2/amginria/__init__.py"", line 4, in <module>`; ` from .interface import *`; ` File ""/usr/local/bin/SU2/amginria/interface.py"", line 41, in <module>`; ` import _amgio as amgio`; `ImportError: No module named _amgio`. Am I missing any dependencies? ; Please note that I previously compiled SU2 master branch without issues, and have already installed mpich, numpy, scipy.; Any help would be really appreciated.; Thanks",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619332650:295,config,configure,295,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619332650,4,"['config', 'variab']","['configure', 'variables']"
Modifiability,"Hi @cesss ,. you can use the option `-Dcustom-mpi=true`. This will tell meson to not look for MPI (but still set all preprocessor flags) so that you can provide all necessary linker/compiler flags manually using environment variables. Let me know if it works for you.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/867#issuecomment-583985541:224,variab,variables,224,https://su2code.github.io,https://github.com/su2code/SU2/issues/867#issuecomment-583985541,1,['variab'],['variables']
Modifiability,"Hi @clarkpede I still have the same issue after using the advice you suggested above for having binary to NO. Please find attaches files for your review. I am still seeing same error like @alexfangman . Can you please help?; WARNING: Tried to find 14980 cells suitable for adaptation, but only found 0; The following cell types are currently adaptable: ; + triangles; + quadrilaterals; + tetrahedrons; Your grid may have too high a percentage of other types.; Number of elements to adapt: 0; Homothetic grid adaptation",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504564218:273,adapt,adaptation,273,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504564218,4,['adapt'],"['adapt', 'adaptable', 'adaptation']"
Modifiability,"Hi @cvencro , I think it would be good to add that Testcase to the regression tests to 'guard' the code. ; I actually wanted to do that real quick but it guess that with `SINGLEZONE_DRIVER` one cannot access `TIME_ITER`, only `EXT_ITER` with the` .test_iter` variable of the python Testcase class. Not sure if that is addressed in #724 , maybe @rsanfer or @talbring can give a quick info as this is probably affecting all unsteady regression tests. . Concerning the Testcase repo: You can simply open a PR for the develop branch of the Testcase repo, and refer to the corresponding PR here (and vice versa). As far as I know the Testcase repo is not protected, i.e. you can merge without any check. And as it is just one added mesh and no other change you could do it right now from my point of view. Another point: What about the rotating_frame for incompressible flow? If it is untested I would like an error catch in place that this feature can't be used out of the box.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/767#issuecomment-527167827:259,variab,variable,259,https://su2code.github.io,https://github.com/su2code/SU2/pull/767#issuecomment-527167827,2,['variab'],['variable']
Modifiability,"Hi @economon ,. I tested a couple of cases - laminar flow over a cylinder and turbulent flat plate and the convergence is greatly enhanced. I have attached a plot of convergence history for the flat plate case. I didn't have much luck with the laminar backward facing step case though. The residuals tends to oscillate around -5.5. I was planning to run the NACA 0012 test case soon. Do you have any cases specifically that you wanted to test? I can run some of them soon.; ![Convergence](https://user-images.githubusercontent.com/28007882/65721666-b9eeae00-e0aa-11e9-97c6-727d743e923b.png). Cheers,; Akshay",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-535683971:130,enhance,enhanced,130,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-535683971,1,['enhance'],['enhanced']
Modifiability,"Hi @msahinae00,. The branch [feature_adap_flux](https://github.com/su2code/SU2/tree/feature_adap_flux) has the fixed wall distance computations (the branch itself isn't up to date with v7, but I merged in develop way after the wall distance was fixed). However, RANS adaptation is still under development. While I've gotten decent looking meshes, e.g.:; ![vortex](https://user-images.githubusercontent.com/19416354/73195095-1c4fcd80-40e2-11ea-9590-4fbc4baf279d.png); ![Screen Shot 2019-11-04 at 1 36 27 PM](https://user-images.githubusercontent.com/19416354/73195106-2245ae80-40e2-11ea-8e24-38ec76d4cfb4.png); I still haven't properly verified the code. Cheers,; Brian",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-578842312:267,adapt,adaptation,267,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-578842312,1,['adapt'],['adaptation']
Modifiability,"Hi @pcarruscag ,; You probably mean `airfoil_fsi_rbf` from serial_regression (?); I get the written on screen:. Boundary marker leading_edge is NOT a single straight.; Boundary marker 0.0 is a single straight.; Boundary marker pressure_side is NOT a single straight.; Boundary marker 0.0 is a single straight.; Boundary marker suction_side is NOT a single straight.; Boundary marker 0.0 is a single straight. The diff of my local branch with (origin/)develop is empty, so can you double check for me if you are using the latest develop or fix_SlipWall branch?. For the 0.0 markers: In the configFlow.cfg you have ; `MARKER_EULER= ( leading_edge, 0.0, pressure_side, 0.0, suction_side, 0.0)`; I dont understand why there are zeros as nothing has to be prescribed on the Euler Wall. So the 0.0 is interpreted as a marker tag. Removing the 0.0 does not change anything for me in Residuals as well. In the mesh there are also no boundaries defined which are called `0.0` :) . Does that help or am I on the wrong track?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-537204246:589,config,configFlow,589,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-537204246,1,['config'],['configFlow']
Modifiability,"Hi @pcarruscag, just a small follow-up to my comment in the code section concerning the new adjoint implementation that might also help here (either by using it directly or just for getting some ideas). What I would like to change is in fact not the `CDiscAdjSolver` (which I find is very good) - but I'd like to propose some changes for the *interface* to the AD tool. And some subsequent stuff.; It will allow for a more direct control of derivatives which is favourable in case one deals with multiple zones, multiple sets of conservative variables, geometry coordinates in case of FSI, and so on. And of course in terms of performance as one needs only one tape that one can keep during all iterations, regardless of what their variables might be. In case you are interested, take a look at the implementation in [su2code:sc_develop](https://github.com/su2code/SU2/tree/sc_develop). I'll open the PR as soon as @talbring opened his one for his great rework on input/ouput. As for this PR, let me wait a second if we can clear up the issue concerning the registration and I'll leave a small review afterwards.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/615#issuecomment-457582842:542,variab,variables,542,https://su2code.github.io,https://github.com/su2code/SU2/pull/615#issuecomment-457582842,4,['variab'],['variables']
Modifiability,"Hi @pcarruscag, thanks for the quick response. . There are still several possible memory reductions on the FEA solver by moving stuff to the vertices. Even though over-allocating would probably be fine for the structural solver as problems remain relatively small, I am replicating this structure for the mesh solver on the fluid side, and in there we should be careful not to add tons of doubles that are only necessary at the boundaries to the whole variable structure. I might also need a similar thing in the flow solver, e.g., to store boundary loads for the adjoint solver. I believe that relying on some ordering would be quite complex and require a lot of reworking of the code, everything in the solvers links directly to the point index, which gets renumbered at the beginning. So forcing the vertex nodes to go on to the initial positions doesn't seem like an easy one. And, as you say, maybe if we flag the nodes (as boundary or interior) we end up pretty much at the starting point. Possibly, the best alternative would be to replicate the structure in CGeometry in CSolver, therefore adding some CVertexVariable parent class and child for the different solvers. There are other boundary magnitudes that could be interesting to store as well. It would require some work, but given that there is a direct correspondence iMarker+iVertex -> iPoint, I would expect that to be the least invasive approach.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-508090169:452,variab,variable,452,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-508090169,1,['variab'],['variable']
Modifiability,"Hi @pcarruscag,; I apologize for giving a poor suggestion (older version). The custom-mpi mode with all environment variables defined did not seem to work for me, as you can see from my comments on 29th of May and 8th of June.; Does the legacy build system mean using automake/make etc?. Also, I tried changing the dependency from mpi to mpich as you suggested. I changed the lines to: ; ```; mpi_dep = [dependency('mpich', language: 'c', required : get_option('with-mpi')),; dependency('mpich', language: 'cpp', required : get_option('with-mpi'))]; ```; and I got this error.; ```; meson.build:37:2: ERROR: mpich dependency does not accept ""language"" keyword argument; ```; So I removed the language part and reran the command to get the following, you can see it identifies mpich as a dependency:; ```; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./meson.py build -Denable-openblas=true -Denable-autodiff=true -Denable-directdiff=true -Dwith-mpi=enabled -Dcustom-mpi=false -Denable-pywrapper=true --prefix=/home/slimshady/UserPackages/SU2_INSTALL; The Meson build system; Version: 0.54.999; Source dir: /home/slimshady/UserPackages/SU2_HOME; Build dir: /home/slimshady/UserPackages/SU2_HOME/build; Build type: native build; Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Project name: SU2; Project version: 7.0.6 ""Blackbird""; Using 'CC' from environment with value: '/usr/bin/gcc'; Using 'CXX' from environment with value: '/usr/bin/g++'; Using 'CC' from environment with value: '/usr/bin/gcc'; C compiler for the host machine: /usr/bin/gcc (gcc 10.2.0 ""gcc (GCC) 10.2.0""); C linker for the host machine: /usr/bin/gcc ld.bfd 2.35.1; Using 'CXX' from environment with value: '/usr/bin/g++'; C++ compiler for the host machine: /usr/bin/g++ (gcc 10.2.0 ""g++ (GCC) 10.2.0""); C++ linker for the host machine: /usr/bin/g++ ld.bfd 2.35.1; Host machine cpu famil",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137:116,variab,variables,116,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137,1,['variab'],['variables']
Modifiability,"Hi @pcarruscag,; You are right, it shares a lot of code with previous PR. Here constants does not change. Differences are as follows - . 1- It has different pressure flux definition (new expression); 2 - Here sum of squares of velocity components were needed for left and right state; 3- removed few variables and added few.; 4- Also left and right state split Mach numbers are Mach number polynomials only (for programming purpose) without pressure terms. Previously SLAU and SLAU2 scheme have already been implemented in the code separately. I mean some of these sucessive schemes share a lot of common formulation but differ with some expressions, constants etc. ; So it may be fine to keep them separate. . I will see your advice and further look into similar variation implementation in the code (sorry if I missed out some simple point you mentioned). . Thanks ; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/631#issuecomment-446730390:300,variab,variables,300,https://su2code.github.io,https://github.com/su2code/SU2/pull/631#issuecomment-446730390,2,['variab'],['variables']
Modifiability,"Hi @pcarruscag,; thank you very much for the insight and the well thought proposed solution. I wasn't aware that there was such a loss in performance, it seems clear that something needs to be done. The only question I have is regarding the following comment . > There are no free lunches and this performance improvement would come at the cost of losing the ability to have different types of variables in different parts of the domain. I'm using this feature more and more, I was planning to extend it in the structural solver to remove the `if fsi` statements, and I also used it in the rework of the mesh solver, as defining variables at the interface only reduces greatly the memory footprint (sort of like the node-vertex structures in geometry). You mention there are options to keep this versatility, how difficult do you think would be to implement them?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-507998889:394,variab,variables,394,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-507998889,6,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"Hi @pcarruscag,; thanks so much for all your effort in adapting the PR. As usual, great improvements to the feature from your review. Sorry for the radio silence, as I told you I was away due to unforeseen personal circumstances and I'm only back to office today.; Hopefully it's all ready now, I think this feature is ready to go into the next release. If there are no further comments I'll merge it later today.; Best,; Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/872#issuecomment-591881962:55,adapt,adapting,55,https://su2code.github.io,https://github.com/su2code/SU2/pull/872#issuecomment-591881962,1,['adapt'],['adapting']
Modifiability,"Hi @rois1995 . For now, I'm ignoring all TKE in Total Energy in personal research. I don't remember the details clearly. ; The problem was that the enthalpy added TKE was stored in the primitive variables. ; When I tried to fix it, the problem was when the enthalpy added TKE was stored in the primitive variables. For the Roe scheme in convective flux calculations (not sure about other flux scheme), the Roe speed of sound is calculated using enthalpy. But as I mentioned above, the stored enthalpy is higher than other simulation because of TKE. I thought it make a problem.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-2245163889:195,variab,variables,195,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-2245163889,4,['variab'],['variables']
Modifiability,"Hi @rois1995. The LM model code under the development clearly has some problems. I've not finished yet all validation cases for commonly used. So, I can't help with the E387 profile problem. but, I think I can give some helpful comments. . Check the numerical scheme which you used. like Roe and L2Roe, AUSM and SLAU. In my case, I didn't think to use the low dissipation scheme because I thought the code was wrong. I upload the configure file for the T3A flat plate case, which I used.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1111261534:430,config,configure,430,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1111261534,2,['config'],['configure']
Modifiability,"Hi @rsanfer and @TobiKattmann , I agree with the more generalised solution for rigid and deforming meshes too and this is excellent timing of #760 to combine the new approach. ; I have FSI cases I can use, but thought it would be a good stepping stone to use fluid-only case to begin with to avoid the coupling terms for this verification. Using dynamic surface movement definitions for the single-zone pitching airfoil test which has previously been used for rigid motion, the primal solutions and gradients from finite differences for both are very similar as expected. Therefore this should be a good reference to check the discrete adjoints for deforming mesh when the adaptations for grid velocities are made using #760.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/766#issuecomment-524565760:302,coupling,coupling,302,https://su2code.github.io,https://github.com/su2code/SU2/pull/766#issuecomment-524565760,2,"['adapt', 'coupling']","['adaptations', 'coupling']"
Modifiability,"Hi @rsanfer,; I was afraid you were going to say that...; On the subject of memory savings, and taking the specific case of CFEAVariable, the class is 304 bytes before it allocates data, once data is allocated for a plain nonlinear 3D problem the effective size is 704 bytes, looking at the constructors, for such a problem we allocate 22 doubles or 176 bytes. So effectively 75% of the memory (equivalent to 66 doubles) is wasted.; It is important to note that this ""efficiency"" figure does not get much better even when this class allocates all it members (for which one needs fsi + adjoint + unsteady). This happens because operator `new []` needs to store the size of the allocation together with the data for when `delete []` is called so you get ""pointer + size + data"" rounded to a multiple of 16B because of the default alignment.; Therefore my opinion is that we can ""over allocate"" and still save memory, unless you need massive amounts of data for the boundary points(?)... But looking at CFEABoundVariable I don't think that is the case.; If we want to be optimum in terms of performance and memory usage, we would need to mimic the CGeometry strategy in CSolver.; If we do not want to mimic that structure we need to either be able to rely on some ordering of the special cases, e.g. boundary variables stored first, so that at runtime:; ```; double* Get(int iNode) {; if (iNode < nBoundary); return &special[iNode];; else; return &normal[iNode-nBoundary];; }; ```; If we cannot rely on some order we would need to tag nodes ""special"" or ""normal"" and then use some form of map for special cases... All this would cost a lot of indirection.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-508082019:1306,variab,variables,1306,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-508082019,1,['variab'],['variables']
Modifiability,"Hi @rsanfer,; I've updated those booleans.; The results of that verification are [these](https://github.com/su2code/SU2/files/2612501/FFD_verification.pdf), which I had linked to in #597.; I do not think the case will run without this PR, in any case [here](https://github.com/su2code/SU2/files/2792370/results.zip) are the config/mesh and solution files.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/615#issuecomment-457242410:324,config,config,324,https://su2code.github.io,https://github.com/su2code/SU2/pull/615#issuecomment-457242410,1,['config'],['config']
Modifiability,"Hi @rsanfer,; Regarding patterns, larger cases are more likely to have the issue than small ones, I did not test boundary conditions.; I have not tested the forward mode because it differentiates linear solvers and in the past I have found that to be very limiting so I'd rather not go there. The most detailed verification we have is that present by @cvencro at scitech (finite differences). @cvencro do you have any before/after cases where this problem showed?; On the recording of variables, I like the FEM_VARIABLES as a convergence monitor. But for larger sets of variables, e.g. grid nodes, topology, a ""post processing"" recording step makes sense, that increase in memory footprint is why I have not created a PR for FSI shape derivatives yet. I talked about this briefly with @oleburghardt during the annual meeting and the new adjoint driver should have hooks for this type of post processing.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/615#issuecomment-455994325:485,variab,variables,485,https://su2code.github.io,https://github.com/su2code/SU2/pull/615#issuecomment-455994325,2,['variab'],['variables']
Modifiability,"Hi @sun5k ,. I am also working on the implementation of this transition model within SU2. . In order to verify the code, I am running simulations on the E387 profile (taken from DOI:10.1177/0954406217743537) and on the Flat Plate test cases (taken from DOI: 10.2514/1.42362). . While for the E387 profile the results are similar (although not really convincing yet), for the flat plate (NASA 2DZP) the transition occurs right at the leading edge. Could you please share the config files that you have used?. I also noted a couple of inaccuracies within your implementation (by inspection of the ""Files changed"" section), maybe we can have a talk to discuss about it. Thank you in advance.; Best regards,; Andrea",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1105521136:474,config,config,474,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1105521136,1,['config'],['config']
Modifiability,"Hi @sun5k, could you please add also the configuration files to reproduce these results? I would try to run these simulations too with my implementation of the transition model. Thank you in advance!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1198118715:41,config,configuration,41,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1198118715,1,['config'],['configuration']
Modifiability,"Hi @sun5k,. I think that the restart of the solution is missing. Since for CTransLMSolver you have inherited the functions from CTurbSolver class, the restart is only applied to the turbulent solver. I solved this problem by creating another class called CTransSolver which is a copy of the CTurbSolver class but with a modified LoadRestart function. I guess that the function in the CTurbSolver class can be modified to take into account the transition solver. It depends if we want to divide the transition from the turbulence solver or not.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1111256246:99,inherit,inherited,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1111256246,1,['inherit'],['inherited']
Modifiability,"Hi @themrdjj,; Thank you for the feedback, there was already a similar report in #796 (which incidentally went stale and was closed), I will try to do something about it, or if you would like to contribute code to the project I can point you to right place to add an error message. Meanwhile my best advice is to not start a config from scratch until you know SU2 very well (and even then...) look for a test case that uses similar features and go from there.; The minimal config is the one in Quickstart, the template is more of a catalog :) I don't think we'll ever have a unified minimal config, SU2 does many things, some mutually exclusive.; Convective options are reasonably well documented here: https://su2code.github.io/docs_v7/Convective-Schemes/; The output messages before ""Begin Solver"" can be helpful (although in this particular case you would need to know what to expect). Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/842#issuecomment-566642727:325,config,config,325,https://su2code.github.io,https://github.com/su2code/SU2/issues/842#issuecomment-566642727,6,['config'],['config']
Modifiability,"Hi @timjim333 ,. Exactly (concerning your first question). . For the %s : In your initial post you stated that `mpirun --use-hwthread-cpus -np 12 SU2_CFD turb_ONERAM6.cfg` worked for you. So %s is simply the place-holder for the SU2 module together with the configure script. Which in your case would be `SU2_CFD turb_ONERAM6.cfg` . But `parallel_computation.py` will also call `SU2_SOL turb_ONERAM6.cfg` for you after the solver routine to create output files for visualization. ; If you take a look into the `interface.py` (as in my previous post) and the `parallel_computation.py` you'll find exactly how its done. Cheers, Tobi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/526#issuecomment-395712721:258,config,configure,258,https://su2code.github.io,https://github.com/su2code/SU2/issues/526#issuecomment-395712721,2,['config'],['configure']
Modifiability,"Hi @timjim333 ,. you can try to set an environmental variable 'SU2_MPI_COMMAND' which contains your specific mpirun command. Take a look at /SU2_PY/SU2/run/interface.py (line 66) in the source code, that might help. There the command which is called by parallel_computation.py is build. For your case it should be:; export SU2_MPI_COMMAND=""mpirun --use-hwthread-cpus -np %i %s"". I hope that helps :) Regards,; Tobi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/526#issuecomment-383032449:53,variab,variable,53,https://su2code.github.io,https://github.com/su2code/SU2/issues/526#issuecomment-383032449,1,['variab'],['variable']
Modifiability,"Hi @timjim333, any luck with the surface mesh deterioration issue? ; I've managed to successfully run the Onera M6 case, with a sufficiently refined volume mesh around the shock wave region, however the wing surface mesh does not follow this adaptation. Does anyone by any chance have a working .cfg file for the M6 case? I may be setting something up incorrectly.; Thanks a lot!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-846093123:242,adapt,adaptation,242,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-846093123,1,['adapt'],['adaptation']
Modifiability,"Hi Amir,; I just had a look and that is not going to work I'm afraid.; The numerics classes are not getting the value of the coefficients from the variable that you register as input, this happens because config returns cb1 by value, meaning that what you register as input is not CConfig::cb1_usrdef (seen by numerics) but CSolver::cb1_adj.; You can try registering CConfig::cb1_usrdef as input, making it a public variable would be the easiest thing. This is a hack and personally I don't like the idea of differentiating variables that belong to CConfig. I would add a cb1 member variable to numerics and a method to set it, this method would then be called after you register CSolver::cb1_adj as input to set CNumerics::cb1 = CSolver::cb1_adj and the numerics would no longer get values from the config by themselves in ComputeResidual.; I hope this makes sense but do have a look at the elasticity solver and try to mimic the strategy used there.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-492342990:147,variab,variable,147,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-492342990,6,"['config', 'variab']","['config', 'variable', 'variables']"
Modifiability,"Hi Brain. I have uploaded the branch but having problem to compile it. I use the following configuration. ./configure --prefix=/home/msahin/SU2 -enable-mpi -enable-metis --with-cxx=mpicxx --enable-PY_WRAPPER CXXFLAGS='-O3'. but having the following error message:. ... ; ...; CXX ../src/linear_algebra/libSU2_a-CPastixWrapper.o; AR libSU2.a; make[1]: Leaving directory `/home/msahin/SU2/Common/lib'; Making all in SU2_PY; make[1]: Entering directory `/home/msahin/SU2/SU2_PY'; make[1]: *** No rule to make target `SU2/amginria/_amgio.so', needed by `all-am'. Stop.; make[1]: Leaving directory `/home/msahin/SU2/SU2_PY'; make: *** [all-recursive] Error 1. Am l missing something in the configuration?. Mehmet",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-579140612:91,config,configuration,91,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-579140612,3,['config'],"['configuration', 'configure']"
Modifiability,"Hi Brain. One quick question. I have noticed that you have set ADAP_NORM to 1 (Lp=1) in one example for Euler solution. I am using original PYAMG examples and changing "" remesh_options['Lp'] "" does not alter the adapted mesh. The log file always saying LP=2 . Are you using a different PYAMG version? . Thanks",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-650061484:212,adapt,adapted,212,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-650061484,1,['adapt'],['adapted']
Modifiability,"Hi Brian, ; I'm sorry for the late reply, I've been using the feature_adap branch in 2D and 3D with success in the last weeks, so thanks for the amazing work. . After your last commit I recompiled everything, moreover now I'm using `$SU2_RUN/SU2_DEF` before running `mesh_adaption_amg`, so to be sure that element orientation is as expected. The tool is working nice, once the smoothing, grad, adaption values are tuned, thank you very much!. After a bit of use may I add pair of feature request, that in my opinion would improve the overall (already remarkable) quality of the `feature_adap` .; **_Feature request:_**; 1. The possibility to have boundary layer elements (QUAD PENTA) with the mesh adaption would be very much appreciated. If not possible, wouldn't it be possible to force a frozen interface between boundary layer elements?; 2. Add a ""region of interest"" where the refinement takes place. Sometimes it is not required to have sharp shocks resolved far away from the body.; 3. Do you plan to merge this feature in the master branch?. **_Bugs (or at least unexpected behavior):_**; 1. When I use the restart option, even if there is a `restart_flow.dat`, in the base folder, apparently the `mesh_adaption_amg` does not create a link into the \adap\ini\ folder, and I've to manually copy it (quite fast), to effectively enable the restart option. **_Clarification_**; 1. `PYADAP_BACK` option is really interesting, but I don't get it completely: shall I mesh the complete flowfield with higher detail (refined mesh), does this option handle only the body surface (or only the volume inside the body of interest, not the flowfield)? Is there any plan to use geometric files such as step or iges, to have the proper curvatures defined?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-637328023:394,adapt,adaption,394,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-637328023,2,['adapt'],['adaption']
Modifiability,"Hi Catarina. Thanks for your help. Since there's a attachment file type limitation, I am attaching the files in a zip folder here. In the folder, the configuration files marked as '_old' are the ones that worked well before. 'invbb' refers to the blunt body case and 'invram' refers to the RAM C-II case. The mesh files are the same as before (blunt body is in .su2 format and ram c-ii in .cgns). . [residual_stalling.zip](https://github.com/su2code/SU2/files/11464580/residual_stalling.zip)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2026#issuecomment-1545764913:150,config,configuration,150,https://su2code.github.io,https://github.com/su2code/SU2/issues/2026#issuecomment-1545764913,1,['config'],['configuration']
Modifiability,"Hi Daniel! Thanks again to you and Ben for working on this new feature... it is going to be a nice contribution to the code. The code looks good to me, but there is an issue with the automatic differentiation build. It is an easy fix though: please change your ""double"" declarations to ""su2double"" in the commits. We use ""su2double"" everywhere in the code so that it is straightforward to specialize the variable types at compile time, which is needed by the AD tool. Once the tests pass, we'll pull this in right away.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/214#issuecomment-164091519:404,variab,variable,404,https://su2code.github.io,https://github.com/su2code/SU2/pull/214#issuecomment-164091519,1,['variab'],['variable']
Modifiability,"Hi Daniel,. You can find the implementation of variable properties with cubic EoS in the master/develop version. If you need to compute the properties with more accurate thermo-physical models, e.g. multi-parameter, there are 2 main ways:. * By using the external library FluidProp (feature_fluidprop_final, yet outdated); * By means of look-up tables (feature_adjoint_lut). We are about to improve the look-up table method and will work on having this feature in the develop soon. Just let me know if you are interested and I will give you more details. Best,. Matteo. ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî; Dr. ir. Matteo Pini, PhD; Assistant Professor; Propulsion & Power<http://www.pp.lr.tudelft.nl/>; Aerospace Engineering Faculty; Delft University of Technology. Kluyverweg 1; 2629 HS Delft; The Netherlands. Phone : +31 15 27 84794; Skype : matteo_pini1. From: banuti <notifications@github.com>; Reply-To: su2code/SU2 <reply@reply.github.com>; Date: Thursday, 24 October 2019 at 22:18; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Subscribed <subscribed@noreply.github.com>; Subject: Re: [su2code/SU2] variable properties (transport and thermodynamic) for compressible flows with any eos (#794). Hi,. is that branch still active? It seems the last commit was more than two years ago. Best,; Daniel. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/794?email_source=notifications&email_token=ABTGC2MB627S4SOHCTMGOTTQQH7KFA5CNFSM4I2YNZ6KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECGJUEI#issuecomment-546085393>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABTGC2JPU76ZE3WG5UUKBYDQQH7KFANCNFSM4I2YNZ6A>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/794#issuecomment-546316470:47,variab,variable,47,https://su2code.github.io,https://github.com/su2code/SU2/issues/794#issuecomment-546316470,2,['variab'],['variable']
Modifiability,"Hi Economon,. I encountered an issue very similar to what Auzbaig reported: the error message ""OBJECTIVE_FUNCTION: invalid option value EntropyGeneration"" during optimization with SU2. (I am using SU2 version 8.0.1 ""Harrier.""). After thoroughly examining the existing Python optimization framework, I found that one of the steps in the optimization chain is generating different config.cfg files, with a focus on DV_VALUE and OBJECTIVE_FUNCTION. DV_VALUE controls the geometry deformation;; OBJECTIVE_FUNCTION determines the type of objective/constraints.; Then the framework calls SU2_CFD and SU2_DOT to obtain performance metrics or gradient information.; As you mentioned, ""You might need to run updateHistoryMap.py to register new outputs with Python."" Initially, I thought it meant simply providing a new input for OBJECTIVE_FUNCTION in the Python optimization framework. However, it seems that this may not work at the C++ level. To verify this, I ran $ SU2_CFD your_config.cfg -d and observed all available history outputs. However, I suspect that OBJECTIVE_FUNCTION cannot use every history output, meaning that the adjoint solver might not recognize some objective functions. Does this imply that additional modifications in the C++ code are required?. Additionally, I would appreciate more information regarding CUSTOM_OBJFUNC. From TestCases/user_defined_functions/lam_flatplate.cfg, I understand that CUSTOM_OBJFUNC allows combinations of existing OBJECTIVE_FUNCTIONs and can also utilize CUSTOM_OUTPUTS. The flexibility of CUSTOM_OUTPUTS seems to enable the construction of various desired variables. However, I am unsure whether using OBJECTIVE_FUNCTION= CUSTOM_OBJFUNC along with CUSTOM_OUTPUTS can entirely replace the need for additional modifications in the C++ code. Since I‚Äôm not very proficient in C++, I would greatly appreciate your guidance. Sincerely,; Tongtong",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/889#issuecomment-2324575133:379,config,config,379,https://su2code.github.io,https://github.com/su2code/SU2/issues/889#issuecomment-2324575133,4,"['config', 'variab']","['config', 'variables']"
Modifiability,"Hi Eduardo,. both, 'symmetry plane' and 'symmetry as the slip wall' should work in the code (upon fixing this) and it should be made clear (e.g. in the config_template.cfg) what the BC is suitable for, independent of how it is named in the end. ; The simplest solution is probably the patch I provided together with a short note in the config_template (maybe even a reference to this issue), as both 'options' will work as expected (using the very same code). It will basically 'restore' the behaviour of MARKER_SYM of before the fix in #657. The downside is some more computational cost (in case of a plane) which has to be done for each vertex on the marker. I cant say to which extend this takes more time but I would guess it is not too costly. Depends on the case as well. I can do a little check with your case here. . That's it for the diplomatic part :) (Please take the following with a grain). For me a symmetry has to be a line or plane. To cite Jiri Blazek's book 'Computational Fluid Dynamics'(...) 3rd edition using a screenshot:. ![blazekbook](https://user-images.githubusercontent.com/31306376/61662377-9ab05a80-acce-11e9-85bf-5998db204d92.png). The chapter is called 'symmetry plane' which already is kinda biased. But there is no 'slip wall for viscous flow' mentioned to my knowledge. In another book (from Ferziger&Peric, which I only have in german) symmetry is only used in the context of symmetry planes as well. ; To me, symmetry BC's are also linked to visualization using mirroring. And mirroring (as the word is commonly meant) is only possible along planes and its little brother, the straight line. I can be wrong or it might be a question of research background. So how to proceed? Trial by combat might have some unpleasant aftermath for the winner so we might go the democratic way and do a poll :) . Cheers, ; Tobi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/735#issuecomment-513957018:681,extend,extend,681,https://su2code.github.io,https://github.com/su2code/SU2/issues/735#issuecomment-513957018,2,['extend'],['extend']
Modifiability,"Hi Eduardo,; The channel 2D and supersonic vortex shedding cases are failing due to small changes in residuals, the operations in Roe were re-ordered a bit, and these cases run for many iterations, I am guessing it is just due to numerical precision. But I will have a look before updating the residuals.; The rotating cylinders case is the infamous one that appears to be sensitive to minute, and seemingly insignificant, changes as reported in #700, at the reference residuals the case is actually diverged.; Finally there is an AD case using JST that also fails because it is a file diff and we output 15 significant digits to that file. The change is due to the refactoring of central schemes that required changing the order in which variables are registered for pre-accumulation.; I do appreciate you taking the time to review this PR, especially since you are ""first author"" of the low Mach Roe schemes and there are no regressions for them, nevertheless I tested them before and after and it seems I did not break anything.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-506526475:666,refactor,refactoring,666,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-506526475,2,"['refactor', 'variab']","['refactoring', 'variables']"
Modifiability,"Hi Floris,. Can you clarify whether you are using the continuous or discrete adjoint?. One thing that I am noticing in your results above is the large difference in magnitude between the compressible and incompressible sensitivities on the surface, which could require very different scaling later when that info is sent to the optimizer... . I would recommend running the discrete adjoint to get sensitivities for lift/drag w.r.t. the same set of design variables for both the compressible and incompressible solvers and comparing the result (with a nearly incompressible flow so the conditions are basically the same). This way, you can remove the scaling for optimization that is part of the shape_optimization.py script and focus only on the gradient results first. You could use the discrete_adjoint.py script for this. Hope this helps,; Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316295088:455,variab,variables,455,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316295088,1,['variab'],['variables']
Modifiability,"Hi Francisco,. I dont know if you are referring to that, but we separated essentially the computation of the derivatives with respect to the conservative variables and with respect to the geometry (node coordinates). The latter is only needed when we write the solution files. So every ExtIter%Wrt_Frequency we have to do two recordings. Tim",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/329#issuecomment-260112703:154,variab,variables,154,https://su2code.github.io,https://github.com/su2code/SU2/issues/329#issuecomment-260112703,1,['variab'],['variables']
Modifiability,"Hi Giulio,. thanks a lot for your contribution, it looks very nice. . I just saw your reply to my comment below, I really appreciate if you don't mind giving me a bit more time before merging in. I was working on different developments and have a couple of deadlines coming up so I am a bit behind myself in merging with develop. . I'll try to review this as soon as I can, though. A couple of comments after I skipped through quickly:; - I have seen that in some cases there are a lot of lines that are removed and added just because of changes in the indentation. See, e.g., CIsoparametric::Set_TransferCoeff(CConfig **config, in which I saw two large blocks that have not changes but the indentation goes from spaces to tabs. This has caused some issues in the past, would you mind to take a look at it?; - About the change of name from MARKER_FSI_INTERFACE to MARKER_ZONE_INTERFACE. Can we hold this discussion for the future so we can give it a second thought? I think it may be important to maintain the difference between interfaces with different physics and interfaces that connect the same physics.; - I had here written a question of to what extent is the change in the physical time step iteration affecting the driver and the iteration classes. I completely understand your logic for fluid-fluid problems of transferring information at pseudo-time steps, but as I said in FSI problems this would not be adequate. I also added steady-state FSI into a separate branch, so I will take a look at potential conflicts. Thanks again for this great contribution! I'll get into this and get back to you as soon as possible!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/322#issuecomment-256047684:621,config,config,621,https://su2code.github.io,https://github.com/su2code/SU2/pull/322#issuecomment-256047684,1,['config'],['config']
Modifiability,"Hi Giulio,; Great news, thanks!; After looking at CSysMatrix more, one possibility would be to move dense matrix routines to a class that would replace/augment this CSymmetricMatrix and then CSysMatrix could use it for operations on its blocks (which are dense). But since this involves refactoring a core class of SU2 I agree more people should be involved in the discussion.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-407023516:287,refactor,refactoring,287,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-407023516,1,['refactor'],['refactoring']
Modifiability,"Hi Giulio,; Thank you for the feedback. I inherited some of this code from a previous student of my PhD supervisor and I thought the same when I saw the CSymmetricMatrix class. However, as I understand it, CSysMatrix implements a block sparse format and here we have a simpler dense format. Another big difference is that CSymmetricMatrix does not need to be used in parallel. But I agree that making these two classes related somehow would be better, so I am open to suggestions.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-406516746:42,inherit,inherited,42,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-406516746,2,['inherit'],['inherited']
Modifiability,"Hi Guilio,; I have downloaded and installed the develop branch version but I am still getting the same error. I am attaching the config file for your reference. I hope I am using the correct cfg file. Thanks and regards; Suman Vajjala; [twoprop.su2.gz](https://github.com/su2code/SU2/files/1067875/twoprop.su2.gz); [rot_prop_NN.cfg.gz](https://github.com/su2code/SU2/files/1067877/rot_prop_NN.cfg.gz)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/401#issuecomment-307756909:129,config,config,129,https://su2code.github.io,https://github.com/su2code/SU2/issues/401#issuecomment-307756909,1,['config'],['config']
Modifiability,"Hi Heather,. Can you please tell me how to generate doxygen document for the latest version on my computer (step by step commands). Thanks and Regards; Amit. ---. From: Heather Kline notifications@github.com; Sent: Wednesday, May 25, 2016 4:25:08 PM; To: su2code/SU2; Subject: Re: [su2code/SU2] Detailing config_template.cfg with all parameters and more detailed descriptions (#277). The doxygen at that link is very out of date, we no longer update it.; I meant the doxygen at https://github.com/su2code/Documentation/tree/master/Doxygen; The file there will allow you to get the doxygen documentation for whichever version of the code you have on your computer, as it uses comments within the code to generate the documentation. The output where I clipped the above example is in >Modules > Description of the Configuration Options. In reading the .cpp you have to do some searching, as the options are stored in a map in another file (option_structure.hpp). But in terms of those maps, yes, they do have all the options. ## . You are receiving this because you are subscribed to this thread.; Reply to this email directly or view it on GitHubhttps://github.com/su2code/SU2/issues/277#issuecomment-221539456",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/277#issuecomment-221655424:812,Config,Configuration,812,https://su2code.github.io,https://github.com/su2code/SU2/issues/277#issuecomment-221655424,1,['Config'],['Configuration']
Modifiability,"Hi Heather,. I have submitted a problem with my SST case causing divergence. Will you have some time to respond to that. I will greatly appreciate. Thanks. Jehan. Sent from Yahoo Mail on Android. From:""Heather Kline"" notifications@github.com; Date:Mon, May 18, 2015 at 3:17 PM; Subject:Re: [SU2] Adaptive CFL condition (apart from currently available fixed/ramp) (#94). This has been implemented. ‚Äî; Reply to this email directly or view it on GitHub.Ôøº",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/94#issuecomment-103224627:296,Adapt,Adaptive,296,https://su2code.github.io,https://github.com/su2code/SU2/issues/94#issuecomment-103224627,1,['Adapt'],['Adaptive']
Modifiability,"Hi Heather,. This is a very interesting contribution. Just one question, Does multi objective include multi point optimization? Could you please give us an example of the particular application that you have in mind? . Thanks,; Francisco. > On Feb 9, 2016, at 11:24 AM, Heather Kline notifications@github.com wrote:; > ; > This pull request is intended to be the first of two (or more) pull requests implementing multi-objective functionality. I am separating it into multiple requests since some structural changes are made which could potentially effect things outside the regression tests, and I want to make it easier for code review.; > ; > In this pull request, the ability to run multiple objectives is added to the python tools and to the config options. Within the CFD and adjoint solvers, the only major change is in the data structure containing the objectives - it now can hold a list of objectives, but when the adjoint solver is run only one objective is included. Later pull requests are planned to include the ability to run a single adjoint solution for a sum of objectives defined on different markers.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/237 https://github.com/su2code/SU2/pull/237; > Commit Summary; > ; > config options updated to be compatible with multiple objectives - mdo not yet implemented; > python tools; > python adjusted for multiple objectives: will always run 1st objective only with continuous adjoint, but will run separate continuous adjoint evaluations within optimization; > continuous adjoint evaluates the requested objectives; > fixing some errors; > File Changes; > ; > M Common/include/config_structure.hpp https://github.com/su2code/SU2/pull/237/files#diff-0 (20); > M Common/include/config_structure.inl https://github.com/su2code/SU2/pull/237/files#diff-1 (6); > M Common/src/config_structure.cpp https://github.com/su2code/SU2/pull/237/files#diff-2 (90); > M SU2_PY/SU2/eval/d",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/237#issuecomment-182175757:747,config,config,747,https://su2code.github.io,https://github.com/su2code/SU2/pull/237#issuecomment-182175757,1,['config'],['config']
Modifiability,"Hi Heather,. the problem is this code section (eval/gradient.py):. `def gradient( func_name, method, config, state=None ): ; `; ...; ```; if (type(func_name)==list):; if (config.OPT_COMBINE_OBJECTIVE==""YES""):; config.OBJECTIVE_FUNCTION = ', '.join(func_name); func_name_string = 'COMBO'; else:; func_name = func_name[0]; config.OBJECTIVE_FUNCTION = func_name; else:; config.OPT_COMBINE_OBJECTIVE=""NO""; config.OBJECTIVE_FUNCTION = func_name; config.OBJECTIVE_WEIGHT = ""1.0""; ```. Here the `config.OBJECTIVE_FUNCTION` is set also for the geometric functions. This is probably why it only occurs in v4.3 ... Previously, in older versions, this value was not set or there was some other non-geometric function set when calling SU2_GEO. I think my solution is more like a workaround and we should find a more consistent way (like removing the geometrical things from the objective function list in option structure altogether).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/352#issuecomment-271182857:101,config,config,101,https://su2code.github.io,https://github.com/su2code/SU2/pull/352#issuecomment-271182857,8,['config'],['config']
Modifiability,"Hi Himakar,. If you are using python, you don't need to manually delete the connectivity table from the ASCII Tecplot as you can use numpy genfromtxt.(https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html). Another option is to use the following restart_flow binary reader/writer that I wrote in Python. # ----------; def read_restart_bin(filename):. 	# Not efficient way; 	infile = open(filename, 'rb'); 	data = infile.read(); 	infile.close(). 	print ""Size of the file: "", len(data). # The first is a magic number that we can use to check for binary files (it is the hex; # representation for ""SU2"").; 	if (struct.unpack('i',data[:4])[0] != 535532):; 		print ""Magic number 535532 not found in the solution file %s"" %filename; 		sys.exit(); 		#try:; 		#	data_file = read_restart_ascii(filename); 		#	return data_file; 		#except:; 			# Exit; 		#	sys.exit(). 	# The second two values are number of variables and number of points (DoFs). ; 	nvar = struct.unpack('i',data[4:8])[0]; 	ndof = struct.unpack('i',data[8:12])[0]. 	# Read the variable names of the file. Note that we are adopting a; # fixed length of 33 for the string length to match with CGNS.; 	variables_names = []; 	for i in range(nvar):; 		aux = (struct.unpack('33s',data[20+(i)*33:20+(i+1)*33])[0]); 		for j in range(len(aux)):; 			if aux[j] == ""\x00"":; 				break; 		variables_names.append(aux[:j]). 	# Read data in one shoot; 	start = 20 + nvar*33; 	end = start+nvar*ndof*8; 	array = np.asfarray(struct.unpack('%dd'%(nvar*ndof),data[start:end])); 	array = array.reshape(ndof,nvar). 	# The last two values are for metadata: one int for ExtIter and 8 su2doubles.; 	# Metadata: 1 int for ExtIter and 8 doubles; 	#ncount = len(data) - nvar*ndof*8 - 4 - 64; 	ExtIter = struct.unpack('i',data[end:end+4])[0]; 	metadata = struct.unpack('8d',data[end+4:end+4+8*8]). 	# Create dictionary; 	data_file = {'names':variables_names,'data':array, 'ExtIter':ExtIter, 'MetaData':metadata}; 	return data_file. def read_restart_ascii(f",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-528461173:917,variab,variables,917,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-528461173,1,['variab'],['variables']
Modifiability,"Hi JSmith86,. I really appreciate your effort in cleaning up the changes. But it looks like as if there are still a lot of changes in other parts that are not related to the things you describe. Furthermore I really request you to split this up in multiple commits so that it is immediately clear what you did in each single one (this can be done quite simple with a proper diff tool like [meld](http://meldmerge.org/)). Let me emphasize that this is not to bother you in any way but rather to ease understanding and maintainability. I know from my own experience that this requires some additional work, but in the end it certainly pays off. . Thanks!; Tim",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/412#issuecomment-315320576:517,maintainab,maintainability,517,https://su2code.github.io,https://github.com/su2code/SU2/pull/412#issuecomment-315320576,2,['maintainab'],['maintainability']
Modifiability,"Hi Jayant; Thanks for being so prompt and fast in handling this very important issue.; I‚Äôm currently in vacation at Scotland so I‚Äôll be brief and just add few; comments:; a. As you wrote, validation is very different from test cases. Mesh,; configuration and solutions should be optimized for accuracy, experiment; reproduction and performance.; b. I think it is important to start the validation project, create a link; from the main SU2 web page to it, and than let it grow with the existing; mechanism of community contributions with approvals. Your list is very fine; for beginning. However I think we should strive to enrich it with 3D and; time dependent cases. I hope to be able to be in the loop and contribute to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familia",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:241,config,configuration,241,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,1,['config'],['configuration']
Modifiability,"Hi Jyothi,. I tried your config file and I cannot reproduce this issue here.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/417#issuecomment-318060333:25,config,config,25,https://su2code.github.io,https://github.com/su2code/SU2/issues/417#issuecomment-318060333,1,['config'],['config']
Modifiability,"Hi Lorena,. Sorry for the delay getting back to you. You are right, and the TestCases repository is starting to be huge, mainly because of the stuff that GitHub generates to track the files. Easy to maintain/access alternatives are very welcome. Some releases ago, the grids were in another place (or lab server) and in Github we only had the config files, unfortunately we checked that for some users it was frustrating to download the config files and then go to another place to download the grids. From our practical point of view, the current setting is ideal to run the regression tests. But we are open to any change that benefits the SU2 users/developers community. . Now, it is very easy to download and modify the TestCases (keep in mind that the options in the config files change frequently) but, the price to pay is a large GitHub repository that it is difficult to download if you don‚Äôt have a good internet connection. Anyway, I think you are coming to Stanford in one week, it would be great to chat with you. We would love to have you and your group as a SU2 developer/user. Looking forward to meeting you and thanks for testing SU2. Best; Francisco. ## . Dr. Francisco Palacios; Engineering Research Associate at Stanford University; AIAA Senior Member, SIAM Member, and SU2 lead developer; Editorial Board Member for Scientific Report (Nature Publishing Group); Intel Parallel Computing Center. Personal webpage: http://adl.stanford.edu/people/fpalacios.html; SU2 webpage: http://su2.stanford.edu/. Department of Aeronautics and Astronautics; Durand Building. Room 357; Stanford University; Stanford CA 94305; United States. On Feb 3, 2015, at 1:32 PM, Lorena A. Barba notifications@github.com wrote:. > And why is your Test repo so large?; > Perhaps some data files would be happier living elsewhere?; > ; > I'm thinking that if your Tests load large mesh files, for example, these mesh files could be placed in a data repository (like Figshare, Data Dryad, Zenodo), and your confi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72909446:343,config,config,343,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72909446,3,['config'],['config']
Modifiability,"Hi Ole,. Thanks for pushing the fix. It seems that the CHT still may not be working as intended. I changed to the fix_compressible_CHT branch and recompiled SU2 and then ran the same config files as before. These are the resulting volume vtk outputs attached:; [vtk_out.zip](https://github.com/su2code/SU2/files/3956891/vtk_out.zip); It seems to me that the heat fluxes are getting sent from the fluid zone to the solid zone correctly, reducing the temperature of the solid, but the updated plate surface temperature may not be getting set back into the fluid zone. Please let me know if you think the results indicate something else. Jordan",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/838#issuecomment-565089754:183,config,config,183,https://su2code.github.io,https://github.com/su2code/SU2/issues/838#issuecomment-565089754,1,['config'],['config']
Modifiability,"Hi Pedro, ; The following two configs are for a sinus motion using an elastic mesh in combination with farfield or rotating frame. ; Previous results: Looking at the CL, there used to be a difference of about 10%.; Current Results: Good agreement with only a small difference. Side note: Although the Naca0009 is a symmetric airfoil, my mesh appears to be not perfectly symmetric, resulting in non-zero lift at alpha=0.0 deg. I didn't look into this any further as the mesh is only a quick test case and symmetry probably not important for our problem. . [NACA0009_elastic.zip](https://github.com/su2code/SU2/files/11123420/NACA0009_elastic.zip); [NACA0009.zip](https://github.com/su2code/SU2/files/11123471/NACA0009.zip)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1954#issuecomment-1492161895:30,config,configs,30,https://su2code.github.io,https://github.com/su2code/SU2/pull/1954#issuecomment-1492161895,1,['config'],['configs']
Modifiability,"Hi Pedro, hi everyone,. Sorry for the closing/reopening. I am still new to Github and did a wrong manipulation. It is my fist issue ever... Here are some images of the solution every 100 iteration. The python code used to copy the flow file was not working properly and missed some of the iterations. Do not worry if some iterations are missing.; [images_100.zip](https://github.com/su2code/SU2/files/8938931/images_100.zip). Here is the config file:; [3200_config_Euler.txt](https://github.com/su2code/SU2/files/8938934/3200_config_Euler.txt). Here is the solution output. Mach number, surface, and chord were changed in or; [history.csv](https://github.com/su2code/SU2/files/8938936/history.csv). Here is the convergence plot; ![convergenceForGithub](https://user-images.githubusercontent.com/34791475/174560418-719a14b8-d426-48a3-aeba-3be6d4856327.png). Do not hesitate to ask for more information. When I have some time I will change the blade to post the mesh in order to replicate the issue. Modified blade mesh should come by the end of the week.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1669#issuecomment-1160146503:438,config,config,438,https://su2code.github.io,https://github.com/su2code/SU2/issues/1669#issuecomment-1160146503,1,['config'],['config']
Modifiability,"Hi Pedro, thanks for the probe extraction feature. I'll be looking into it when I get the chance. . I have also worked on this feature since the beginning of this year (for SU2 v7.5.0); on my version, you can set the probes in the .cfg files by directly describing the locations or by a .csv file (if you have many probes, for example). It will also create an output history file for each probe with your specified volume output variables and a probe_information.dat containing the location of the nearest node for that probe (since no interpolation is done). I initially did some workarounds to avoid OOM problems in finding the probe location since I used this in a 400M nodes mesh. I still need to clean up a little bit the additional implementation while keeping/improving the efficiency to avoid a big overhead time in the simulation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1909#issuecomment-1497344705:429,variab,variables,429,https://su2code.github.io,https://github.com/su2code/SU2/pull/1909#issuecomment-1497344705,1,['variab'],['variables']
Modifiability,"Hi Pedro,. I tried the other solution you suggested. I declared a new private variable inside the solver class, which I assigned as config->cb1_usrdef. I registered this as the AD input. I then set a method inside the solver class which returns this value when called.; In the Numerics class, instead of reading cb1 from Config as I used to, I read it from the Solver class, using the method mentioned above.; Now I couldn't create a Solver object inside numerics_structure.inl, since according to the compilation order the solver class is dependant on the numerics class (Solver_structure.hpp includes numerics_structure.hpp). So the compiler doesn't know about the solver class while inside the numerics.; To work around the compiler error, instead I included the solver header file inside the numerics src files (cpp). I then created the solver objects in the relevant numerics functions and called the method which returns the AD-registered cb1 variable.; This all compiles now, but the AD gradient is still returned as 0. Adding print statements to the functions inside the numerics src files revealed that they are getting a cb1 value of 0, which I assume it's because solver_adjoint_discrete.cpp is called after the numerics src files have read the value of cb1, which at that point would be 0.; Would you agree that it's probably best to update the numerics classes inside the adjoint iteration class for CDiscAdjSolver, similar to what's done inside CDiscAdjFEAIteration? Is this what you meant when you referred to the elasticity solver?. Thanks for your help,; Amir",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-494063905:78,variab,variable,78,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-494063905,4,"['Config', 'config', 'variab']","['Config', 'config', 'variable']"
Modifiability,"Hi Pedro,. Thank you for your reply. Apologies for my own late answer as well. I am trying to install now the SU2 6.2.0 Falcon. It is the one I particularly need for a program that calls this program for Aeroelastic analyses. I turned from Windows to Linux Manjaro as this program apparently only works with MSL on Windows.; My C++ compiler is not doing the job when I use the command ./configure for the parallel build. I have both cmake and gcc installed as compilers, but this is what happens:. [cid:ae2afe41-51cb-48da-a755-9fb054ea8537]. Which other C++ compilers can I use instead?. Thank you!. Best regards,. Avi; ________________________________; From: Pedro Gomes ***@***.***>; Sent: Tuesday, March 23, 2021 1:40 AM; To: su2code/SU2 ***@***.***>; Cc: Avish Suresh Bhambhani Wadhwani ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] Microsoft MPI not read, WIndows 10 (#1233). Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it. ‚Äî; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsu2code%2FSU2%2Fissues%2F1233%23issuecomment-804498319&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150583134%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-827688202:387,config,configure,387,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-827688202,1,['config'],['configure']
Modifiability,"Hi Pedro,. Thanks for your reply. I tried without the pre-accumulation (PREACC= NO in config file) and still the returned derivative is 0.; In the existing code, when design variables such as Temp and Pressure are registered as AD inputs, their values are re-set using appropriate Set__() functions from the config and solver classes. I have also done the same thing with the SA coefficients, by passing the values onto functions defined inside the config class which set them to the same values that are read before they are registered as AD inputs. . Still unfortunately the output gradient is zero. Anything else that might be worth trying?. Thanks again,; Amir",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-491887764:86,config,config,86,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-491887764,4,"['config', 'variab']","['config', 'variables']"
Modifiability,"Hi Pedro,. Thanks, that makes a lot of sense actually. Out of curiosity I tried the hack you suggested. I set cb1_usrdef to a public variable in CConfig, and registered config->cb1_usrdef as the AD input (config is assigned as a pointer to CConfig already). In the numerics classes I also assigned cb1=config->cb1_usrdef, to ensure it's the same variable as the one registered as input in AD. This still yielded a gradient of zero.; I'm going to try your other solution. I agree it's a much better way of going about it. I'll let you know how it goes.; Thanks again,; Amir",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-493114732:133,variab,variable,133,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-493114732,5,"['config', 'variab']","['config', 'variable']"
Modifiability,"Hi Pedro,; Thanks. I already have done that, it's already declared as virtual inside the CSolver class.; The message does get printed. What's strange is that it prints cb1_adj=0., even though inside solver_adjoint_discrete.cpp, cb1_adj is assigned as cb1_adj = config->GetSA_cb1(); before being registered as an AD variable, and therefore is not 0.; Thanks; Amir",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-498383515:261,config,config,261,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-498383515,2,"['config', 'variab']","['config', 'variable']"
Modifiability,"Hi Pedro,; thanks for cleaning up Joel's code and creating the pull request. The disc_adj_fsi testcase is failing, I believe because of the relaxation. Probably you need to update the value of the test_case config and set the relaxation to 1.0 to recover the previous test. ; About the symmetric matrix class: Joel's implementation was indeed intended to populate the matrix needed for the RBF; the CSysMatrix would not be able to accommodate some terms due to the sparsity. It's well explained in the comments. Also, his implementation was only single-core. I agree that it would be very interesting to have some methods such as the cholesky decomposition available, but I think they would require some reworking (at least for parallelization).; I think this is a very valuable contribution, so it would be good to get more people on board to push it forward.; Cheers,; Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-406847760:207,config,config,207,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-406847760,1,['config'],['config']
Modifiability,"Hi Rocco,; I used this mesh `<Testcases>/control_surface/mesh_ONERAM6_inv.su2` and the boundary marker names are a bit different in the mesh, compared to your provided config (WING vs LOWER_SIDE, UPPER_SIDE, TIP + SYMMETRY vs SYMMETRY_FACE). Can you shed some light on this?. Will the airfoil emit some vortex-shedding (or other unsteadiness) or will this converge in time to a steady-state solution? I am asking because I would like to see some longer running results until e.g. steady state, cylic shedding or maybe we'll see some chaotic behaviour in lift and drag. The initial transient through the domain based on the initial values is unphysical to some extend and if e.g. 'steady state' results are the same for both code versions .... the problem is not that big. Although it differs quite a bit in the temporal evolution tbh . In the results (also in the mail) it looks a bit like it approaches a steady state for Cl and CD. So maybe 1000 timesteps will tell us a bit more ü§î . Another thing: There is no tag 6.0.2 üòï ... 6.0.1 and then 6.1.0..; And `both versions are/were on the develop branches` -> what exactly do you refer to here: config-files, code, mesh. Cheers üêå ; Tobi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-559756575:168,config,config,168,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-559756575,3,"['config', 'extend']","['config', 'config-files', 'extend']"
Modifiability,"Hi Soumen,. As Tom said, the routines are all in place and I have been putting them; together for solution interpolation from one mesh to another for unsteady; simulation as post-processing step. So probing at a particular location for; unsteady solution can be also done with this framework. The probe search; implementation is in place for 2D configuration currently. It will be; extended to 3D and probably available in the main branch in the next 2; months.; The implementation so far is in feature_MeshInterpolation branch if you; want to take a look. Sravya. On Thu, Nov 2, 2017 at 10:09 PM, Thomas D. Economon <; notifications@github.com> wrote:. > Hi Soumen: yes, this is something that the developers are actively working; > on at the moment (in particular, @sravya91 <https://github.com/sravya91>; > has been taking the lead on this). It is true that most of the ingredients; > are already available in SU2 (fast searches, interpolation routines, etc.),; > but the trick is combining them all and making it general.; >; > Do you have any other requirements beyond simple probes? I am guessing we; > should have something available in the next few months, but it's not set; > yet.; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/466#issuecomment-341623660>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AHenII5B0Xtb2U_hj2vbBesf5Oc51uvzks5syqAEgaJpZM4QPYh8>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/466#issuecomment-342266341:345,config,configuration,345,https://su2code.github.io,https://github.com/su2code/SU2/issues/466#issuecomment-342266341,4,"['config', 'extend']","['configuration', 'extended']"
Modifiability,"Hi Steve,. I think that all your contributions are very interesting, so please feel free to create a pull request. Only one comment, please be sure that you pull to the develop branch (not the master). We only use the master branch for releasing the code. Thanks again!. Best; Francisco. On Jan 11, 2015, at 7:34 AM, Steven Endres notifications@github.com wrote:. > By the way, I have another set up updates for you guys to consider that are ; > beyond the scope of this pull request. Let me know if you are waiting on me ; > to close the pull request or if you can do that. ; > ; > I put the recommended changes for the structure of config.py file in a gist ; > https://gist.github.com/spendres/7bbe6eb60fac1f2f148a that separates the ; > low level config errors validation. I also created a few unit test cases to ; > allow a controlled build up of regex checks without risk of breaking ; > previous bug fixes. ; > ; > Let me know ; > ; > Steve ; > ; > On Sat, Jan 10, 2015 at 11:34 PM, Steven Endres spendres@gmail.com wrote: ; > ; > > thanks for the commands ; > > ; > > On Sat, Jan 10, 2015 at 11:54 AM, Trent Lukaczyk <notifications@github.com ; > > ; > > > wrote: ; > > > ; > > > so now the file is being committed as deleted... please roll back to this ; > > > commit ; > > > spendres@6cbddbe ; > > > https://github.com/spendres/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > ; > > > here are the commands you can use -- ; > > > Reset the index to the desired tree ; > > > ; > > > git reset 6cbddbe ; > > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > Move the branch pointer back to the previous HEAD ; > > > ; > > > git reset --soft HEAD@{1} ; > > > ; > > > git commit -m ""Revert to 6cbddbe ; > > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > "" ; > > > Update working copy to reflect the new commit ; > > > ; > > > git reset --hard ; > > > ; > > > ‚Äî ; > > > Reply to this email directly or vie",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/144#issuecomment-69612161:634,config,config,634,https://su2code.github.io,https://github.com/su2code/SU2/pull/144#issuecomment-69612161,2,['config'],['config']
Modifiability,"Hi Suman,; Regarding your config file: first you have to specify the turbulence model you would like to use (your config reads NONE right now), secondly you have to add the parameters for the computation of turbulent fluxes.; In this latter case I suggest you to have a look at one of the test cases in the ""rans"" folder.; This made your case working on my laptop, if you encounter any other issue don't hesitate to ask me. Cheers,; Giulio",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/401#issuecomment-308375305:26,config,config,26,https://su2code.github.io,https://github.com/su2code/SU2/issues/401#issuecomment-308375305,2,['config'],['config']
Modifiability,"Hi Tim,. Thanks!. I totally agree on the fact that Python-related functionalities could be in a separate file for code clarity. Anyway, considering only the C++ structure, those functionalities are still members of the CDriver (and all child classes). So if you are OK with the fact that having members of the same C++ class in different cpp files, I am OK too. . However, if you mean creating a new class for the Python wrapper (like CPyWrapper or whatever), and leave the CDriver ""clean"", this might be more tricky. Indeed, since the wrapper has to be a top-level class, it is better to have access to all the other main classes (config, geometry, solver, ...) and the CDriver was the perfect candidate (it instanciates all of them). So now if we create a new top-level class next to the CDriver, the direct link with all those classes is lost. Basically we will have to create accessors like CDriver::GetConfig(), CDriver::GetGeometry(), ... that will return the different containers to be used by the wrapper. Obviously this is possible but not in a short time, besides this might be a significant change in the top-level code structure. We could also think about exposing thoses CConfig, CGeometry, ... classes to Python in addition to just the driver, I already made some local tests and it worked great but this approach is less user-friendly. David",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/488#issuecomment-352045091:632,config,config,632,https://su2code.github.io,https://github.com/su2code/SU2/pull/488#issuecomment-352045091,2,['config'],['config']
Modifiability,"Hi Tom,. The code is running with nice results. However, at low Mach numbers, the code is presenting poor convergence due to the wide disparity between the particle and acoustic wave speeds in the dual time stepping. During the last weeks, I studied some preconditioning formulations that can be added to SU2. Currently, we are only scaling the dissipation part improving accuracy not convergence at Low Mach number flows. . I found this interesting paper that presents the preconditioning formulation in conservative variables (minor changes in the code) for implicit solvers based on the classical Weiss and Smith formulation. A robust low speed preconditioning formulation for viscous flow ‚Ä¶ <https://www.google.com.br/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjS8_vzre3QAhXIjJAKHatADsQQFggfMAA&url=http%3A%2F%2Fwww.sciencedirect.com%2Fscience%2Farticle%2Fpii%2FS0045793011000223&usg=AFQjCNG9Pc2UPSeqsdqHfVa0symixryb9w&sig2=2eqLmLoBa4t3XCMT_DWSrQ&bvm=bv.141320020,d.Y2I>; Preconditioning applied to variable and constant density flows - AIAA <https://www.google.com.br/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&sqi=2&ved=0ahUKEwjF65S3s-3QAhXFkZAKHfwbDlEQFggfMAA&url=http%3A%2F%2Farc.aiaa.org%2Fdoi%2Fpdf%2F10.2514%2F3.12946&usg=AFQjCNGpofvU3ntuYJaA6o_nAz8MOKubCg&sig2=YIumr88W2hKQK0AMzI3fAw&bvm=bv.141320020,d.Y2I>. I really would like some help to implement the above preconditioning implicit dual time-step formulation (Eq. 18 of the Weiss and Smith paper or section 4.3.3 of Colin et al.). Supposing I already have the preconditioning matrix, I just have to modify CEulerSolver::SetResidual_DualTime?. Thanks in advance. Eduardo . > On 5 Dec 2016, at 17:29, Thomas D. Economon <notifications@github.com> wrote:; > ; > Great! Thanks, Eduardo. Let's work now together in this branch to make sure that everything is integrated nicely. Just let me know what help you may need.; > ; > ‚Äî; > You are receiving this because you modified the open/close state.; > Re",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/333#issuecomment-266321042:518,variab,variables,518,https://su2code.github.io,https://github.com/su2code/SU2/pull/333#issuecomment-266321042,1,['variab'],['variables']
Modifiability,"Hi Tom,. Yes, we can temporarily strip off some of the excess variables, and we may just do that in the short-term to continue the simulation. In fact, I'm not sure the averaged variables are used (is the time-averaging continued from restart, or is it started from scratch at restart?). If the time-averaged variables from the restart aren't used, then another fix would be to change what is output in the restart file vs. what is output in the visualization files (vtu, szplt, etc). Regardless, in an earlier simulation, we were attempting to run a 450 million cell mesh, which would have probably caused the same overrun with just the conservatives, so I agree that we'll have to start planning on how to deal with this issue down the road when larger meshes become more commonplace. Not sure the best forum to discuss this kind of thing. Github? Slack? Email?. Hope you are well,. Paul. ________________________________; From: Thomas D. Economon <notifications@github.com>; Sent: Thursday, April 30, 2020 11:41 AM; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Paul Stephen Urbanczyk <gomer@stanford.edu>; Author <author@noreply.github.com>; Subject: Re: [su2code/SU2] Failure to Restart on Large Meshes with Time-Averaged Data (#949). How about a quick fix like removing some fields from the output if possible (39 is a lot)? Are there some auxiliary variables apart from the conservatives and time averages that you don't need?. We'll have to look into the MPI issue with INT_MAX.. we will probably hit other snags like this throughout the code as we keep increasing mesh size. I bet there are some int vs. long issues hidden. ‚Äî; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/949#issuecomment-622031229>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABU42SSQMUXG36DWEIWFNZ3RPHA6ZANCNFSM4MQLQFFQ>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-622035489:62,variab,variables,62,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-622035489,4,['variab'],['variables']
Modifiability,"Hi Tom,; I've consulted with our main TecIO developer, Dave Taflin, and the two of us are having a hard time finding the problem. There are a bunch of compile warnings in TecIO, but none of them look like they would cause the linker error. The actual error seems to be in the link of SU2, not the TecIO library. Could it be something I changed in the config stuff (configure.ac, m4/tecio.m4, or Makefile.am)?; Is it possible to get a more verbose error report for the linker?; Thanks!Scott Imlay; On Sunday, August 19, 2018, 2:44:12 PM PDT, Thomas D. Economon <notifications@github.com> wrote: ; ; ; It looks like our regression tests are failing during the compilation of TecIO on the Travis system (they use pretty standard Ubuntu builds). @ScottImlay: could you please take a look at the build errors when you have some time?. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-414463979:351,config,config,351,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-414463979,2,['config'],"['config', 'configure']"
Modifiability,"Hi Wally, ; I have run some axisymmetric cases earlier for pressure distribution (Cp) computation over typical payload fairing configuration (with older versions of SU2). Pressure distribution seemed to be fine with earlier runs (and also it matched well with other codes). ; Issue popped up while trying to compute heat flux for axisymmetric problems. I have seen folks and students running their cases with axisymmetric formulation. Now the issue has surfaced clearly, it need to be fixed asap.; How is solution of the case, you have been trying? . Best; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1063#issuecomment-699627809:127,config,configuration,127,https://su2code.github.io,https://github.com/su2code/SU2/issues/1063#issuecomment-699627809,2,['config'],['configuration']
Modifiability,"Hi again,. I am using the the Inviscid Bump in a Channel tutorial as a test case by changing the outlet boundary condition to Marker_Engine_Inflow. However, the boundary condition is still seems unstable even with very low damping values. It seems that the evaluation frequency of the marker's properties is tied to the screen write frequency through the following line:. bool Evaluate_BC = ((((config->GetInnerIter() % (config->GetScreen_Wrt_Freq(2)*40)) == 0)) || (config->GetInnerIter() == 1) || (config->GetDiscrete_Adjoint()));. which makes the minimum evaluation frequency 40. I believe 40 iteration seems to be too high, at least for this case. I have since added a new option to the code to control the evaluation frequency. I been experimenting with the evaluation frequency and the damping factor to get the marker to converge on the Mach Number on some of the cases. I will test this on larger case next week and i can get back to you on how those go as well. Finally, I am a bit of a novice and it is my first time ever using something like git. I have already created a fork of the master branch. Do i just make pull request to submit my changes or is there something else I should do?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2274#issuecomment-2102637760:395,config,config,395,https://su2code.github.io,https://github.com/su2code/SU2/issues/2274#issuecomment-2102637760,4,['config'],['config']
Modifiability,"Hi all, . After the initial excitement of clearing all tabs and trailing whitespaces... I guess it is more reasonable to follow @pcarruscag proposal:; > What about running the solution you propose only on subfolders? i.e. on src/something/ . I now trimmed all `C*.cpp`, `C*.hpp` and `C*.inl` files in `SU2_CFD` which is equivalent to all restructured files in the Sub-folders. I added a basic script `replace-tabs-...sh ` in `externals/utils` which provides this functionality. I would enhance that script if this is the way to go.; The commit size now shrunk down to ~4k changed lines. Possible merge problems will be much smaller. . I found to have to no problem when merging the develop first -> clearing all tabs/whitespaces in the feature_branch with the provided script -> merge this develop_noWhitespaces using the `--strategy-option=ours` option. Merge conflicts will be purely due to tabs/whitespaces therefore one always wants the own code in case of conflict, as all conflicts with the develop related to other stuff were already resolved in the first merge. . Now that the commit is a lot smaller, there should be even less problems. Maybe some folks will have no problems at all. . After some back and forth in the commits I briefly chatted with @talbring to do a git rebase / squash to not have these huge commits in the history. Otherwise one could open a new & clean PR if we can agree on an approach here to keep the discussion in one place.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/808#issuecomment-553412130:486,enhance,enhance,486,https://su2code.github.io,https://github.com/su2code/SU2/pull/808#issuecomment-553412130,2,['enhance'],['enhance']
Modifiability,"Hi all,. I guess the difficulty is about calling Config->GetGamma() function in everywhere in code (solver, numerics etc.). I have to change Gamma according to temperature in every routine and be sure ideal gas equation is consistent between Temperature and Pressure. I get stuck in this point. I am open to any help. Thanks in advance.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/731#issuecomment-525189226:49,Config,Config,49,https://su2code.github.io,https://github.com/su2code/SU2/issues/731#issuecomment-525189226,1,['Config'],['Config']
Modifiability,"Hi all,. as with the restructuring of the output classes, we should find a common level of abstraction for all the different physical problems we might want to have. Right now there isn't even a unified way of specifying the kind of problem for each zone (what is fluid, what is solid etc) and the kind of coupling. This might also affect the actual implementation/restructuring since we somehow have to decide what driver we have to instantiate and so on. Hopefully we can gather all the people involved to have a discussion on that. Since we have a lot of people working in their branches on multizone problems we should tackle that better sooner than later. As Edwin already suggested, maybe it is a good idea to put some people in charge of organizing some of the bigger structural changes. Furthermore in case some people don't know, we have a slack channel for the dev team. I think that makes it easier to communicate, arrange meetings, discuss problems and ask questions. In case you need an invite, let me know, everybody who wants to contribute is welcome. Thanks for the discussion, I still think that communication is the key of success !. Tim. On Sep 13, 2017 10:30 AM, Edwin van der Weide <notifications@github.com> wrote:. Hi Tom,. Sounds like a plan then to have a look at CIntegration to see what we can do to generalize the time integration. I definitely want to help with this, but I don't think I am the appropriate person to take the lead, because I simply don't have a good overview of all the multi-physics options. Tom, are you willing to take the lead for this?. Furthermore, it is good to have other people involved as well, preferably with detailed knowledge of the different disciplines. Any volunteers?. Thanks,. Edwin. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/437#issuecomment-329096830>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AEtI5MkXdqhqP",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/437#issuecomment-329146567:306,coupling,coupling,306,https://su2code.github.io,https://github.com/su2code/SU2/issues/437#issuecomment-329146567,2,['coupling'],['coupling']
Modifiability,"Hi all,; really interesting topic going on here. As @pcarruscag just very well explained, and after quite some time working on the code, I can totally see the need for dense algebra. . I agree with @juanjosealonso and @erangit that maintaining the code portable and very easy to install should be a must. It has been a signature of SU2 since the beginning and we should continue on that line. I've had some problems before with codes that rely heavily on PETSc, so I wouldn't particularly be keen to go down that road. . **Eigen** would be really easy to integrate in SU2: they have a mirror on GitHub here: [Eigen Github repo](https://github.com/eigenteam/eigen-git-mirror) which could be easily added as a submodule in the same way as CoDiPack or MeDiPack. Given that they are only header files, there would be no need to compile any external library. And there is another very important point made by @vdweide and @pcarruscag: we need to ensure compatibility with the discrete adjoint functionality. One huge advantage of Eigen is that is fully templated: we recently differentiated a code that was heavy reliant on Eigen in an afternoon, and it worked great. While LAPACK is indeed a very mature library, I believe that it would require using external functions for every functionality, which would be a really big burden. @talbring @MaxSagebaum could add some more hints in this discussion. As an additional note, I would make sure that we keep everything open source.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459656519:253,portab,portable,253,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459656519,1,['portab'],['portable']
Modifiability,"Hi all. May I just add to Edwin comment: some of you have seen the tests that I; made with SUmb (structured mesh code) using the adaptive WF: Results using; the JST scheme were definitely off, while upwind +WF converged reasonably; to wall-resolved results. Naturally this conclusion is strongly coupled; with the specific discretization and implementation so it might not apply; to a SU2 implementation. I suggest to keep working on the Carlson; formulation (due to FUN3D-SU2 similarities mentioned above) and hopefully; extend it to adaptive WF as a second step.; I'll be happy to be on board of his effort.; Best regards,; Eran. On Fri, Jun 9, 2017 at 7:49 AM, Edwin van der Weide <; notifications@github.com> wrote:. > Juan, all,; >; > The adaptive wall function formulation as described in the paper of Medic; > et al. has two serious issues. First, the convergence stalls after three; > orders of magnitude or so and second it only works with an upwind; > discretization of the inviscid fluxes. For some reason JST type of schemes; > gave rather poor results. In order to have a reliable implementation, both; > issues need to be addressed. Unfortunately, we never did.; >; > Edwin; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/399#issuecomment-307294686>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/APKNmwNgNVmXDYW_tqtQzvpDvxGe4OeLks5sCM7ugaJpZM4NvG6w>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-307303905:129,adapt,adaptive,129,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-307303905,4,"['adapt', 'extend']","['adaptive', 'extend']"
Modifiability,"Hi everyone,; I was tring to use the mesh adaptation feature but the whole procedure is not clear to me.; Following the previous indications I:. 1. downloaded the `feature_adapt branch`. 2. downloaded the Adaptive 2D NACA 0012 example (https://pyamg.saclay.inria.fr/pyamgexamples.html#2dnaca): `adap_NACA0012.cfg`, `mesh_NACA0012_inv.su2`, `NACA0012_ini.dat`. 3. added the following lines to the config:; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```. 4. run the following command: `$ python3 SU2_RUN/mesh_adaptation_amg.py -f adap_ONERAM6.cfg -n 8`. The response I have obtained is the following:; ```; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (30000, 60000, 120000); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : MACH; PYADAP_HMAX : 500.0; PYADAP_HMIN : 1e-9; PYADAP_HGRAD : 1.8; PYADAP_FLOW_ITER : (2999, 4999, 6999); PYADAP_ADJ_ITER : (2999, 4999, 6999); PYADAP_CFL : (10.0, 15.0, 20.0); PYADAP_RDG : NO. The ./adap folder was deleted. Generating GMF background surface mesh.; ## WARNING: MISSING SU2 MESH FILE KEYWORD: NCORNERS=.; Initial CFD solution is provided.; ```. As expected, a `./ADAP` folder was created, containing these docs: `amg_back_meshb`, `config_CFD.cfd`, `log.err`, `log.out` (sizes 0 byte), `mesh_NACA0012_inv.su2` (link to the mesh), `NACA0012_ini.dat` (link to the file.dat). Did I perform the procedure correctly? Or did I m",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-737134105:42,adapt,adaptation,42,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-737134105,17,"['Adapt', 'adapt', 'config']","['Adaptive', 'adaptation', 'adaptations', 'config']"
Modifiability,"Hi everyone,; I'm really interesting by the adaptitve mesh feature and i am wondering if the branch is still alive or if anyone have done any progress before starting to play with this branch; regards",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-1224179553:44,adapt,adaptitve,44,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-1224179553,1,['adapt'],['adaptitve']
Modifiability,"Hi the same issue is reported here: https://www.cfd-online.com/Forums/su2/240690-stable-solution-version-7-0-0-diverging-7-2-0-a.html; I think it is because of a bug we fixed that could cause the solution in some places to either freeze or be updated very slowly, seeing that the residuals in your 7.0.6 example don't drop, this is likely to be happening.; If you share the mesh you are using I can try suggesting better settings, to get to high CFL number you usually need CFL adaptation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1519#issuecomment-1019281442:478,adapt,adaptation,478,https://su2code.github.io,https://github.com/su2code/SU2/issues/1519#issuecomment-1019281442,1,['adapt'],['adaptation']
Modifiability,"Hi there,. I went ahead and created a dummy geometry, that is:; 1. I altered the planform so that the sweep, twist, dihedral, taper... are now different from the actual wing; 2. I replaced the airfoil by the NASA SC(2)-0712. The dummy wing has a double planform defined as:; - semi span = [5; 10]; - taper = [0.55; 0.35]; - dihedral angle = [5¬∞; 2.5¬∞]; - twist angle = [1¬∞; 0¬∞; -1¬∞] (given for root, kink and tip airfoil sections); - sweep angle at LE = 25¬∞; - Aspect ratio = 11.8; - semi area = 38. I defined the reference length as:; - reference (semi) area = 45; - reference chord = 3; - reference (semi) span = 15. The flight conditions remained unchanged:; - Mach number: 0.78; - Temperature = ~217 K; - Reynolds number: ~19 millions; - AoA = 0¬∞. I created the exact same grid as before (same number of cells, same progression), ensuring my first cell was at y+<1. Things is, this time, SU2 did not have any trouble converging and computed the right z-projected area... I checked the results with another software and the pressure distribution (taken along the chord near the kink) match, see attached Figure. I am attaching the dummy configuration file (dum.txt) as well as the mesh (dum_mesh.txt) if it can be of interest to you. The mesh is a .geo gmsh file. To get the mesh, simply open with gmsh and click mesh 3D (or, from the console: gmsh dum_mesh.txt -3). At this point, I think that my problem might be related to the actual wing airfoil geometry, which is somehow not well pre-processed by SU2... I will continue investigating and keep you posted if I find a solution. Thank you for the time you took reading this issue.; ![cp](https://user-images.githubusercontent.com/39187559/40602255-3de183ae-6258-11e8-9aba-6c8d374dc34e.png); [dum.txt](https://github.com/su2code/SU2/files/2044072/dum.txt); [dum_mesh.txt](https://github.com/su2code/SU2/files/2044073/dum_mesh.txt)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/533#issuecomment-392442127:1140,config,configuration,1140,https://su2code.github.io,https://github.com/su2code/SU2/issues/533#issuecomment-392442127,2,['config'],['configuration']
Modifiability,"Hi, . I tried to install SU2-7.4.0 to Red-hat 10.5.0 as well; however, I have got the same errors as mentioned in the post above ; while running ""./ninja -C build essential"". I presume the issue is the same for both system configurations. Any advice would be appreciated.; ; Thanks,",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2148#issuecomment-1763443205:223,config,configurations,223,https://su2code.github.io,https://github.com/su2code/SU2/issues/2148#issuecomment-1763443205,1,['config'],['configurations']
Modifiability,"Hi, . To begin with, thank you very much for your efforts and the tremendous work you put into improving the SST model!. It is very difficult for me to judge because I'm using a different time integration than the SU2, which may be critical in this regard. Moreover, my code is non-dimensional, so estimating the influence of the ""newBC"" and the ""lower limits"" is difficult for me. Can you tell the values of the ""lower limits"" relative to the freestream values? Please provide many details about the inputs in your config file (Linear solver, linear solver convergence, CFL, inviscid flux, etc')",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2334156700:516,config,config,516,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2334156700,1,['config'],['config']
Modifiability,"Hi, ; I'm worried about discontinuing the legacy build system. While on internet-connected machines the Meson-Ninja build is superior, I still didn't manage to apply it on clusters without such a connection. In my opinion should keep the configure-make-make install approach alive so that installation is possible for everyone, not just very efficient to part of the community ; Best, Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-734184730:238,config,configure-make-make,238,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-734184730,1,['config'],['configure-make-make']
Modifiability,"Hi, I have been running unsteady simulations lately and encountered the issues you mentioned. For the restart issue, it is possible to duplicate one restart file and use them both as pairs. As for the solution at each iteration issue, SU2_SOL doesn't seem to work properly for unsteady cases. However, you can use the the script below in order to get the Paraview or Tecplot output for each iteration using your config file.; ```; #!/usr/bin/python; import fileinput; import sys; import os. ni = 100; nf = 10000; dn = 100. for line in fileinput.input(inplace=True):; 	if line.startswith('UNSTEADY_SIMULATION'):; 		print('UNSTEADY_SIMULATION= NO'); 	else:; 		sys.stdout.write(line). for n in range(ni, nf+1, dn):; 	for line in fileinput.input(inplace=True):; 		if line.startswith('SOLUTION_FLOW_FILENAME'):; 			print('SOLUTION_FLOW_FILENAME= restart_flow_%05d.dat' % n); 		elif line.startswith('SURFACE_FLOW_FILENAME'):; 			print('SURFACE_FLOW_FILENAME= surface_flow_%05d' % n); 		else:; 			sys.stdout.write(line); 	os.system('SU2_SOL config_SOL.cfg'); ```. I use it by running the following on my terminal: python script.py config.cfg; Note that ni is the starting iteration, nf is the last iteration and dn is the interval. You can place this script where your config file is and run it as described. You may want to use a duplicate of your config file since the script will modify it for each iteration.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/133#issuecomment-323660917:412,config,config,412,https://su2code.github.io,https://github.com/su2code/SU2/issues/133#issuecomment-323660917,4,['config'],['config']
Modifiability,"Hi, I've seen this with some (one) cgns file but not others (larger ones), for example I never had any issue with the finest HL-CRM reference grids on nodes with 128 cores.; I suspect this has something to do with how the files are generated, but I did not investigate further. I think the HL-CRM are made by Pointwise but I do not know the export settings used, do let us know if you find a solution.; Regarding the ASCII format, we have recently improved the mesh reader (in the develop branch), if you are generating the file yourself, and if you list the ""points"" before the ""elements"" in the file, it may be up to 4 times faster to read it.; Finally, the file systems used in the clusters of some very fine institutions are absolute trash (not saying this is your case, just making you aware of the fact), and they respond very badly to having many cores reading the same file. Especially for ASCII because here all cores read the entire file, and not just some sections.; If you run the hybrid parallel version of SU2 this will be less of a problem because fewer cores will be participating in file-IO (but all of them will still be used for computation).; https://su2code.github.io/docs_v7/Build-SU2-Linux-MacOS/#basic-configuration; https://su2foundation.org/wp-content/uploads/2020/06/Gomes.pdf; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1378#issuecomment-924779452:1226,config,configuration,1226,https://su2code.github.io,https://github.com/su2code/SU2/issues/1378#issuecomment-924779452,1,['config'],['configuration']
Modifiability,"Hi, Komahan, ; I also noticed this error in fsi_computation.py. And this error was fixed by adding a periodic boundary condition. For example: ; Adding one line in parser part:; `parser.add_option(""--periodic"", dest=""periodic"", default=""False"", help=""Define whether the problem has periodic boundary conditions"", metavar=""PERIODIC""); `; And the Line 109 changes to; ` FluidSolver = pysu2.CFluidDriver(CFD_ConFile, 1, FSI_config['NDIM'], options.periodic, comm)`. However, when I want to run the basic fsi coupling of two-dimensional pitching-plunging NACA 0012 airfoil by using the 'TESTER' CSD Solver 'PitchPlungeAirfoilStructuralTester', another error occurs. If I run by typing:; `fsi_computation.py -f FSICoupler_config.cfg`; This gives the following error:; `***************************** Initializing fluid solver *****************************; ('A TypeError occured in pysu2.CSingleZoneDriver : ', TypeError(""in method 'new_CFluidDriver', argument 5 of type 'SU2_Comm'"",)); ERROR : You are trying to launch a computation without initializing MPI but the wrapper has been built in parallel. Please add the --parallel option in order to initialize MPI for the wrapper.; `. If I run in parallel by typing:; 'fsi_computation.py -f FSICoupler_config.cfg --parallel'; This works without error but the program stops at Mapping fluid-solid interfaces; `***************************** Mapping fluid-solid interfaces *****************************; Building interpolation matrices...; `. Here I upload the config files and the mesh, hope someone can notice those bugs and help to solve. Best!. [2d_coupled_fsi.zip](https://github.com/su2code/SU2/files/3790605/2d_coupled_fsi.zip); includes:; FSICoupler_config.cfg, NACA0012RANS_FullHexa.su2, StructuralTester_config.cfg, SU2_config.cfg",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/642#issuecomment-548054290:505,coupling,coupling,505,https://su2code.github.io,https://github.com/su2code/SU2/issues/642#issuecomment-548054290,2,"['config', 'coupling']","['config', 'coupling']"
Modifiability,"Hi, can you share the testcase? At least the config so we can try to replicate the problem.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-623634949:45,config,config,45,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-623634949,1,['config'],['config']
Modifiability,"Hi, good news! I made it run by changing the' if (config->GetMarker_All_KindBC(iMarker) != KIND_MARKER) continue;' to ' if (config->GetMarker_All_KindBC(iMarker) != KIND_MARKER || config->GetMarker_All_KindBC(iMarker) == SUPERSONIC_INLET) continue;' which is line 3590 in CSolver.cpp. See if this is the right answer. @pcarruscag @bigfooted",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241607243:50,config,config,50,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241607243,3,['config'],['config']
Modifiability,"Hi, hope you guys can take a look to see if I am on the right track.; Now the compelling error shows it appears that the compiler cannot find the variables¬†**Inlet_Temperature,¬†Inlet_Pressure¬†and¬†Inlet_Velocity.** This means that we need to declare and define these variables in the appropriate places in the class. Need I declare these variables in the¬†CEulerSolver¬†class and the¬†CFVMFlowSolverBase¬†class?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2326#issuecomment-2233869800:146,variab,variables,146,https://su2code.github.io,https://github.com/su2code/SU2/pull/2326#issuecomment-2233869800,3,['variab'],['variables']
Modifiability,"Hi, please post the commands you are running followed by the output of meson, with all the iterations I don't understand what is going on. Meson does not care about the variables MPICC and MPICXX, it cares about CC and CXX.; It then gets the include directories and linker arguments from the pkgconfig file for MPI. If you want to bypass pkgconfig you set CC=some/path/mpicc and CXX=some/path/mpicxx, and use -Dcustom-mpi=true when calling meson.; Depending on how they are configured it may work or it may give you undefined references, in which case you can try LIBS=""-lmpi"" LDFLAGS=""-lmpi"" before running meson (or something like that, I don't know much about environment variables). If the wrappers don't find mpi.h I would ask the administrator for instructions, then after they say it is your fault and don't solve the problem (my experience with that kind of people anyway) you can try the INCLUDE or INCLUDES variable (not sure) or directly use CXXFLAGS=""-I\some\path\mpi\include"". I've used 3 hpc systems and the recipe was never the same so... see if there is system-specific advice.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1134#issuecomment-744658431:169,variab,variables,169,https://su2code.github.io,https://github.com/su2code/SU2/issues/1134#issuecomment-744658431,4,"['config', 'variab']","['configured', 'variable', 'variables']"
Modifiability,"Hi, thank you all a lot for your help. Here is my derivation : ; [SourceAxi.pdf](https://github.com/su2code/SU2/files/5506823/SourceAxi.pdf). Mistakes have been corrected and it should be the same as your book now apart from the fact that I am neglecting the gradient of viscosity. To take it into account it needs to be evaluated and I suppose that is what those AuxVar variables are for (something like u *mu or u *mu/y I guess). This is new to me and unfortunately I do not have time to look into it atm (unless someone points me in the right direction and it's quickly done). @WallyMaier I believe that you had taken that into account already and I just came along and cut out your work. So I should close this PR and once you open a new one I can add the generalisation for the convection terms. Were you planning on implementing the k and omega sources as well? . What book is that btw?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-723641597:371,variab,variables,371,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-723641597,1,['variab'],['variables']
Modifiability,"Hi, thank you for your help. Could you please give more details about unnecessary files?. If you mean files related to cmake, I think they are generated automatically when CoolProp is compiled by cmake submodule in meson. I will try to compile without these files. If I succeed, I will remove them. PENG YAN, PhD student. Department of Aerospace Science & Technology. Politecnico di Milano; ________________________________; From: Nijso ***@***.***>; Sent: Wednesday, October 5, 2022 21:31; To: su2code/SU2 ***@***.***>; Cc: Peng Yan ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] [WIP]Coupling of SU2 and CoolProp (PR #1782). could you clean up unnecessary files first, please?. ‚Äî; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/pull/1782#issuecomment-1268867160>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ATJ4GKEET6UOH5CLSYXW5RLWBXJPVANCNFSM6AAAAAAQ53HAJY>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1782#issuecomment-1268875761:601,Coupling,Coupling,601,https://su2code.github.io,https://github.com/su2code/SU2/pull/1782#issuecomment-1268875761,1,['Coupling'],['Coupling']
Modifiability,"Hi, thanks for this interesting discussion. Just a reminder... there is a third place where the default values are stored! the config_template.cfg file. I have had similar problems to what @erangit is describing with the multiple definition of the default values in different places, in fact, sometimes is not clear what is the minimum number of parameters that you can use in a config file. I think that the ideal scenario would be to use the config_template.cfg file as the default value keeper and create subroutines in C++ and python that update the defaults with the existing information in that file. Remember that config_template.cfg is always required otherwise the user doesn't know that are the existing options. By the way... this discussion reminds me that we should update SetRunTime_Options(void). This is an incredible useful small subroutine to modify the software parameters during runtime. EXT_ITER is the only parameters currently accepted but in the near future we should add all or most of them.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-381411950:379,config,config,379,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-381411950,2,['config'],['config']
Modifiability,"Hi,. Can you please share the console output during the configure step? I'd like to see more information about the compilation set up, including libraries and flags. Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-200953042:56,config,configure,56,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-200953042,1,['config'],['configure']
Modifiability,"Hi,. I have similar issues building SU2-7.0.6 with spack-compiled libraries and mason/ninja on CentOS7. I am using gcc-6.3.0, openmpi-3.1.4 and python-3.7.0. The configure/build commands I use are:; ```; ./meson.py build -Denable-pywrapper=true --prefix=$PREFIX ; ./ninja -j16 -C build install; ```. At the linking stage, I get the error:; ```; mpiCC -o SU2_MSH/src/SU2_MSH SU2_MSH/src/SU2_MSH.p/SU2_MSH.cpp.o -Wl,--as-needed -Wl,--no-undefined -Wl,-O1 -Wl,--start-group externals/cgns/libcgns.a externals/metis/libmetis.a externals/parmetis/libparmetis.a externals/tecio/teciompisrc/libteciompi.a Common/src/libSU2Common.a -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-dtags /apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib/libmpi.so -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-dtags /apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib/libmpi_cxx.so -Wl,--end-group -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-dtags -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-dtags -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-dtags -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-dtags -Wl,-rpath -Wl,/apps/spack/brown/apps/hwloc/1.11.11-gcc-7.3.0-xoecbyv/lib -Wl,/usr/lib64 -Wl,/apps/spack/brown/apps/openmpi/3.1.4-gcc-7.3.0-ik4qowj/lib -Wl,--enable-new-",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1037#issuecomment-681033828:162,config,configure,162,https://su2code.github.io,https://github.com/su2code/SU2/issues/1037#issuecomment-681033828,1,['config'],['configure']
Modifiability,"Hi,. I observed similar restart issues for multigrid restarts when working with the discrete adjoint solver for Euler test cases.; Here, I created a reproducible setting with the NACA 0012 Euler case (mesh from the tutorials). **Describe the bug**; The primal solver works fine and for the restart there are no issues. ; However, after an adjoint restart, the residuals are completely different.; As a demonstration I run the discrete adjoint solver:; (1) 110 step and (2) 105 steps and restart for 5 steps. Residual output for the last 10 steps of (1):; | 100| -5.321370| -10.661410|; | 101| -5.351074| -10.692532|; | 102| -5.381256| -10.724276|; | 103| -5.411925| -10.756667|; | 104| -5.443087| -10.789731|; | 105| -5.474745| -10.823494|; | 106| -5.506899| -10.857980|; | 107| -5.539545| -10.893213|; | 108| -5.572670| -10.929211|; | 109| -5.606253| -10.965987|. Residual output for (2):; last 5 steps before restart; | 100| -5.321370| -10.661410|; | 101| -5.351074| -10.692532|; | 102| -5.381256| -10.724276|; | 103| -5.411925| -10.756667|; | 104| -5.443087| -10.789731|; 5 steps after restart; | 0| -2.958579| -8.264492|; | 1| -3.071182| -8.366287|; | 2| -3.165074| -8.453816|; | 3| -3.237963| -8.506268|; | 4| -3.293038| -8.552713|. When multigrid is turned of I could not observe a jump in residuals after the restart for this test case. **To Reproduce**; Use the NACA012 Euler mesh from the tutorial and the config file: [config.cfg.txt](https://github.com/su2code/SU2/files/8089442/config.cfg.txt); Converge the flow solver and then run the discrete adjoint for 105 steps and restart. **Desktop (please complete the following information):**; - OS: Linux, Fedora 34; - C++ compiler and version: gcc version 11.2.1; - MPI implementation and version: mpirun (Open MPI) 4.1.0; - SU2 Version: current develop",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1549#issuecomment-1043026024:1415,config,config,1415,https://su2code.github.io,https://github.com/su2code/SU2/issues/1549#issuecomment-1043026024,3,['config'],['config']
Modifiability,"Hi,. I think this could be a very interesting contribution in SU2. ; As you know the right section to add anything related with convergence in the config file is; % --------------------------- CONVERGENCE PARAMETERS --------------------------%. In that section you will see some parameters related with the Cauchy criteria (CAUCHY_ELEMS, CAUCHY_EPS, CAUCHY_FUNC_FLOW, or CAUCHY_FUNC_ADJFLOW) and others related with the Residual criteria (RESIDUAL_REDUCTION, RESIDUAL_MINVAL). My suggestion is to create the following parameter:; % Residual convergence criteria equation (RHO, RHO_VEL, RHO_ENERGY); RESIDUAL_FUNC_FLOW= RHO. In other words, why don't you create an equivalent to CAUCHY_FUNC_FLOW? (but for the residual convergence criteria). Please do not forget that since a couple of weeks the developers are using the branch ""develop"" and ""master"" is only for releases. So, the changes should be pushed to the ""develop"" branch not the ""master"" one. Thanks a lot for your contribution. Looking forward for an update in this useful new option. Best,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/87#issuecomment-57954164:147,config,config,147,https://su2code.github.io,https://github.com/su2code/SU2/pull/87#issuecomment-57954164,1,['config'],['config']
Modifiability,"Hi,. Mmm‚Ä¶ it is strange, it is working for me:; I have pulled from the develop branch to update feature_cleaning; $./bootstrap to be sure that the makefile.in files have been updated.; $./preconfigure.py --enable-autodiff --with-ad=CODI --enable-mpi -p'--with-cc=mpicc --with-cxx=mpicxx CXXFLAGS=""-O3‚Äù'; $make install; And everything seems ok. Tom, if you have a while, could you please checkout feature_cleaning and try to compile? Maybe my configuration is different from travis. Thanks,; Francisco. > On Oct 29, 2015, at 7:41 PM, Thomas D. Economon notifications@github.com wrote:; > ; > Francisco, when you have a moment, can you please check out the issue with Travis for this pull request? I think it is related to the autotools during the build...; > ; > ‚Äî; > Reply to this email directly or view it on GitHub https://github.com/su2code/SU2/pull/208#issuecomment-152395079.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/208#issuecomment-152416417:442,config,configuration,442,https://su2code.github.io,https://github.com/su2code/SU2/pull/208#issuecomment-152416417,1,['config'],['configuration']
Modifiability,"Hi,. Thank you for your quick answer, It indeed seems that I had some parameters that were passed that did not match su2 version 7.0.3. I am experiencing an issue while running the mesh adaptation process in SU2. The process starts but fails during the mesh generation phase, leading to a FileNotFoundError. I am looking for assistance in resolving this error.; `; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (100, 200, 300); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : MACH; PYADAP_HMAX : 200; PYADAP_HMIN : 1e-8; PYADAP_HGRAD : 1.3; PYADAP_RESIDUAL_REDUCTION : (3, 3, 3); PYADAP_FLOW_ITER : (500, 500, 500). ./adap exists. Removing old mesh adaptation in 10s.; The ./adap folder was deleted. Generating GMF background surface mesh.; Initial CFD solution is provided. Starting mesh adaptation process. Iteration 0 - Mesh size coefficient 100.0; (1/2) Generating adapted mesh using AMG; AMG done: ; Running CFD; Traceback (most recent call last):; File ""/path/to/SU2/install/bin/mesh_adaptation_amg.py"", line 111, in <module>; main(); File ""/path/to/SU2/install/bin/mesh_adaptation_amg.py"", line 72, in main; options.save_all ); File ""/path/to/SU2/install/bin/mesh_adaptation_amg.py"", line 101, in mesh_adaptation_amg; SU2.run.amg(config); File ""/path/to/SU2/install/bin/SU2/run/amg.py"", line 466, in amg; os.rename(cur_solfil, cur_solfil_ini); FileNotFoundError: [Errno 2] No such file or directory: 'flo.dat' -> 'flo_ini.dat'`. and it0 folder is created, with some log.err and log.out, but they are empty, . I would appreciate any guidance or suggestions on how to resolve this issue. Thank you!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-1855842105:186,adapt,adaptation,186,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-1855842105,13,"['Adapt', 'adapt', 'config']","['Adaptation', 'adaptation', 'adapted', 'config']"
Modifiability,"Hi,. The structure of fsi_computation.py is completely different from the one of parallel_computation(_fsi).py, this one is just a script that, if I am right, will set for you the commands in order to launch SU2_CFD in parallel and SU2_SOL right after. It is based on system calls ( it is like calling mpirun -np xx SU2_CFD SU2conf.cfg and mpirun -np xx SU2_SOL SU2conf.cfg). The fsi_computation.py has to be considered as an executable, and thus has to be launched with the mpirun command for parallel run:. $ mpirun -np XX fsi_computation.py -f FSIConfig.cfg --parallel. You have to specify the FSI configuration file (see examples in TestCase) with -f, and the --parallel option is mandatory (only if SU2 has been built in parallel). XX is the number of procs. Hope this helps,. David",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/457#issuecomment-339026305:601,config,configuration,601,https://su2code.github.io,https://github.com/su2code/SU2/issues/457#issuecomment-339026305,1,['config'],['configuration']
Modifiability,"Hi,. The use of an Omega production limiter (about the cross-diffusion term) is correct for low-Reynolds-number (LRN) models (the approach described by Peng et al. is very naive; there are other more rigorous treatments). For high-Reynolds-number (HRN) models, the clipping should be zero, keeping the cross-diffusion term positive; thus, the current implementation is correct. Indeed, it is not exactly as it appears in Menter's original publication. The factor (1-F1) aimed to promise that the cross-diffusion term will be activated only outside the boundary layer, where it is positive (the cross-diffusion term switches its sign deep inside the boundary layer). This was also recognized by Peng et al. (first paragraph above Eq. 17). However, it may happen that the factor (1-F1)=1 where the cross-diffusion term is negative. Usually, it may happen at the wake, very near the airfoil trailing edge, where the upper and lower boundary layers merge. It is due to the imperfection of the F1 function. To summarize, the current implementation is correct, and it is perfect for HRN models.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2252659742:938,layers,layers,938,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2252659742,1,['layers'],['layers']
Modifiability,"Hi,. Unfortunately the logic is quite confuse but I think that part of the code is correct, SU2 just want to use an updated version of the limiter for the turbulence variables. ` if (config->GetSpatialOrder() == SECOND_ORDER_LIMITER) SetSolution_Limiter(geometry, config);; `; and for the flow variables. ` if (limiter_flow) solver_container[FLOW_SOL]->SetPrimitive_Limiter(geometry, config);; `. Another story is if that is really worth it and we should use the values from the previous iteration. Remember that we compute the turbulence variables after updating the flow variables... so... from the theoretical point of view it makes sense to have an updated value for the limiter. However this is not 100% accurate because we are using old gradients to compute the new limiter. Anyway, the spirit is to have a limiter computed using the latest flow variables value and we should probably check that the gradients have been also updated before computing limiters again for the turbulence equation. What I don't really like is Upwind_Residual. ` bool limiter = (config->GetSpatialOrder() == SECOND_ORDER_LIMITER);; `. in this case we are using only the info about limiters or not in the turbulence model... so if, for example, we are using JST for the mean flow equations then the limiter for the flow equations have never been computed and. ```; if (limiter) {; FlowPrimVar_i[iVar] = V_i[iVar] + Limiter_i[iVar]*Project_Grad_i;; FlowPrimVar_j[iVar] = V_j[iVar] + Limiter_j[iVar]*Project_Grad_j;; }. ``` . Is incorrect because Limiter_i has never been computed (if we are lucky maybe we are using a zero value by default... but we need to check). In other words, I think this require a deeper look. @jschuele, could you please think on this and submit a new pull request (I'll close this one). If you don't have time, please let me know and we really appreciate if you could add this situation as an Issue. We'll try to fix this problem as soon as possible. By the way the initial confusion was that ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/403#issuecomment-320490588:166,variab,variables,166,https://su2code.github.io,https://github.com/su2code/SU2/pull/403#issuecomment-320490588,8,"['config', 'variab']","['config', 'variables']"
Modifiability,"Hi,. We have just updated (30min ago) the master branch of the SU2 and TestCases repositories. Could you please try again?. If you are using the develop branch, please remember that you should use the develop branch for the SU2 and TestCases repositories. Otherwise the options don‚Äôt match. Pleas let us know if it is working for you now. Best,; Francisco. On Feb 3, 2015, at 12:27 PM, Gil Forsyth notifications@github.com wrote:. > Just compiled today and it seems like the options CFL_ADAPT and CFL_ADAPT_PARAM have been deprecated?; > ; > Running the 2D inviscid cylinder and the euler channel flow example both throw an error; > ; > CFL_ADAPT: invalid option name. Check current SU2 options in config_template.cfg.; > CFL_ADAPT_PARAM: invalid option name. Check current SU2 options in config_template.cfg.; > Commenting these lines out lets the test cases run but I'm not sure what the default behavior is (are these running with adaptive CFL if we don't pass that parameter at all?); > ; > ‚Äî; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72729435:934,adapt,adaptive,934,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72729435,1,['adapt'],['adaptive']
Modifiability,"Hi,. Yep, I changed that. I know that from the math point of view it doesn‚Äôt make a lot of sense but, from the practical point of view, it is useful. . There are some cases, in which computing gradients using finite differences is the only choice. And with the shape_optimization script it was not possible to control the step size for the finite differences. The option for step size was only in finite_differences.py. The step size is scaled with the reference length because from the practical point of view, I have found that the size of the aircraft, wing, airfoil, is important to determine a meaningful step size. e.g. should we use the same step for an aircraft with a MAC of ~150in than for an airfoil with a chord of 1in. Remember that most of the times we are using FD when the adjoint is not converging‚Ä¶ so we have bad convergence of the direct problem (including some level of unsteadiness that we want to filter with the selection of the step size). In other words, with the right choice of the FD step size you can obtain, at least, an useful gradient‚Ä¶ and that number is somehow linked to the size of the aircraft, wing, or airfoil. The best solution would be to add the step size to the finite_differences.py and also to the shape_optimization.py (creating a new option in the config file)‚Ä¶ not a top priority, but I‚Äôll do it soon. Best,; Francisco. > On Mar 1, 2017, at 3:25 PM, Thomas D. Economon <notifications@github.com> wrote:; > ; > Bumping this issue. This has come up several times now for different people/projects. Is there a reason to keep it based on the reference moment length, or can we revert to specifying this through the command line options?; > ; > ‚Äî; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/issues/367#issuecomment-283505108>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AEpkllp8PXmLDDQLJNq-2yRLBoDAfXE-ks5rhf5pgaJpZM4Lq5F->.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/367#issuecomment-284288637:1294,config,config,1294,https://su2code.github.io,https://github.com/su2code/SU2/issues/367#issuecomment-284288637,1,['config'],['config']
Modifiability,"Hi,. here is the contents of config.log:. ```; This file contains any messages produced by compilers while; running configure, to aid debugging if configure makes a mistake. It was created by SU2 configure 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. $ ./configure --prefix=/gshare/work/hpascalj/CodeSU2-master --with-CGNS-lib=/gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib --with-CGNS-include=/gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include. ## --------- ##; ## Platform. ##; ## --------- ##. hostname = master; uname -m = x86_64; uname -r = 2.6.32-279.el6.x86_64; uname -s = Linux; uname -v = #1 SMP Wed Jun 13 18:24:36 EDT 2012. /usr/bin/uname -p = unknown; /bin/uname -X = unknown. /bin/arch = x86_64; /usr/bin/arch -k = unknown; /usr/convex/getsysinfo = unknown; /usr/bin/hostinfo = unknown; /bin/machine = unknown; /usr/bin/oslevel = unknown; /bin/universe = unknown. PATH: /opt/xcat/bin; PATH: /opt/xcat/sbin; PATH: /opt/pbs/default/bin; PATH: /opt/pbs/tools/bin; PATH: /usr/lpp/mmfs/bin/; PATH: /gshare/soft/star-ccm+/STAR-View+9.02.007; PATH: /gshare/soft/star-ccm+/STAR-CCM+9.02.007/star/bin; PATH: /opt/xcat/bin; PATH: /opt/xcat/sbin; PATH: /usr/lib64/qt-3.3/bin; PATH: /opt/pbs/default/bin; PATH: /opt/pbs/tools/bin; PATH: /usr/lpp/mmfs/bin/; PATH: /usr/local/bin; PATH: /bin; PATH: /usr/bin; PATH: /usr/local/sbin; PATH: /usr/sbin; PATH: /sbin; PATH: /gshare/soft/init; PATH: /gshare/soft/scripts; PATH: .; PATH: /gshare/soft/init; PATH: /gshare/soft/scripts; PATH: . ## ----------- ##; ## Core tests. ##; ## ----------- ##. configure:2465: checking build system type; configure:2479: result: x86_64-unknown-linux-gnu; configure:2499: checking host system type; configure:2512: result: x86_64-unknown-linux-gnu; configure:2532: checking target system type; configure:2545: result: x86_64-unknown-linux-gnu; configure:2587: checking for a BSD-compatible install; configure:2655: result: /usr/bin/install -c; configure:2666: checking whe",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:29,config,config,29,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,10,['config'],"['config', 'configure']"
Modifiability,"Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-804498319:288,config,config,288,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-804498319,2,"['config', 'variab']","['config', 'variable']"
Modifiability,"Hi,; I just had a few (very minor) comments.; Regarding the main contribution, everything makes sense to me and I didn't find any relevant issue.; This is a very nice contribution and the implementation is quite clear, we can go ahead and merge this in soon. Regarding the matrix stuff, perhaps we could start having a new, general, matrix class in Common and then extend it to parallel in future pushes.; It may not be ideal, but at least we'll get started.; I am just afraid that if we leave those potentially useful routines there, in the interpolator, we will soon forget about them (of course it doesn't have to be addressed in this PR but we should really discuss about this). ciao,; Giulio",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-407014370:365,extend,extend,365,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-407014370,2,['extend'],['extend']
Modifiability,"Hi,; I like this idea of self registering classes for our factories, although the instantiation logic is seldom as linear as converting a name to a type... Maybe you could refactor just one of our factories to give us a better idea of what it could look like?. This issue of ""modularizing"" pieces of the code is central to the refactoring of the optimization framework, which will require significant chunks of the code to be exposed to python, so by all means get involved in that (join #refactor_optimization on SU2 Slack and the developer meetings, Wednesdays at 4pm CET). Personally I think this flavour of extensibility is small fish compared to other structural problems we are currently addressing (duplication, code bloat, performance, robustness, etc.) and in my opinion addressing those issues will make it easier to extend the code in this manner, not harder.; Also from the pure C++ side I see no problem with having to modify the code... In so doing the new code is automatically under the same open source license, which to me is as good thing. A couple of practical considerations:; - About your examples, we want fewer drivers, not more. The methods of CVariable, CPoint, and co. need to be inline if the code is to have any semblance of performance.; - I think the majority of the code should still be statically linked, even if some parts of it can be extended by means of custom dynamic libraries, because that will just be less problematic for folks who build from source but are not developers. > The design I described above doesn't take into account C++ templates as I don't see them used that frequently (Is that a thing?). It is becoming a thing yes absolutely, although not at the very highest levels of abstraction. > Please, Please, we have to stop using raw pointers like that. It's being done... It takes time and not many people are comfortable doing this kind of refactoring (consider it an invitation :) ).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-668153867:172,refactor,refactor,172,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-668153867,5,"['extend', 'refactor']","['extend', 'extended', 'refactor', 'refactoring']"
Modifiability,"Hi,; I made the Cygwin build installation instruction example. I just checked my SU2_CFD.exe and it is 625MB as well. Nevertheless, I have no clue why this is the case and how to solve that. For reference I attach my config.log file. [config.log](https://github.com/su2code/SU2/files/3483335/config.log)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/754#issuecomment-519654913:217,config,config,217,https://su2code.github.io,https://github.com/su2code/SU2/issues/754#issuecomment-519654913,3,['config'],['config']
Modifiability,"Hi,; The standard definition of the turbulence intensity is u'/U, and we follow this definition: https://www.cfd-online.com/Wiki/Turbulence_intensity; The papers describing the transition model work with percentages, so we add a factor of 100 internally. The actual freestream value mentioned in the paper of Schubauer and Klebanoff is 0.03%, which would correspond to u'/U=0.0003 (which is also the value in Schubauer & Skramstad); So it looks to me that the value in the config file is too high.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1719#issuecomment-1191848821:473,config,config,473,https://su2code.github.io,https://github.com/su2code/SU2/issues/1719#issuecomment-1191848821,1,['config'],['config']
Modifiability,"Hi. I am using SU2-6.2.0 with PYAMG library to solve RANS equations. l have similar ascii write problem. For initial runs with SU2, i used binary format. Unfortunately, now PYAMG requires only ascii output and l have to sort it out. I compiled with SU2 with openmpi/1.8.8-gcc-4.8.5 using. ./configure --prefix=/truba/home/mesahin/LIB_ALL/SU2-6.2.0+PYAMG -enable-mpi -enable-metis --with-cxx=mpicxx --enable-PY_WRAPPER CXXFLOGS='O3'. Thanks",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/477#issuecomment-634412128:291,config,configure,291,https://su2code.github.io,https://github.com/su2code/SU2/issues/477#issuecomment-634412128,1,['config'],['configure']
Modifiability,Hi: please use the SU2_DEF module (with DV_KIND= SURFACE_FILE) to create the new mesh first before running SU2_CFD. Try the attached config file and rename your new coordinates file to 'surface_positions.dat' ; [inv_goland.txt](https://github.com/su2code/SU2/files/2979714/inv_goland.txt),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/661#issuecomment-474048371:133,config,config,133,https://su2code.github.io,https://github.com/su2code/SU2/issues/661#issuecomment-474048371,1,['config'],['config']
Modifiability,"Hi; I also support external libraries usage (no need to repeat the many advantages as it is well described above) but I think we should be very wary of portability issues. For instance in SUMB, PETSc was used for the Krylov solvers and more. While indeed it worked well and in parallel mode, each new implementation was a nightmare. LAPACK/BLAS package, on the other hand, provides a much easier implementation experience. Certainly, this is not the only consideration but it should be taken into account. Currently, resulting from the significant contributions of the members of this developers group, SU2 implementation works like a charm. I think we should strive to conserve this feature, especially if we aim at attracting more users and developers into the community. Reading what I wrote, sounds to me a bit like the concept of the old conservative, trying to hold back the young diligent revolutionaries. I don't like to be in this spot, but still...; Best,; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459613905:152,portab,portability,152,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459613905,1,['portab'],['portability']
Modifiability,"Hmm.. you are right that the Cf results look a little different than the ones posted on the V&V page (for both SA and SST). Is there anything else different in the configuration for those cases from the set up for the cases on the V&V page? For the flat plate, I may have used unweighted LSQ for the posted V&V results.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/905#issuecomment-599241140:164,config,configuration,164,https://su2code.github.io,https://github.com/su2code/SU2/pull/905#issuecomment-599241140,1,['config'],['configuration']
Modifiability,"Hmmm its complaining about Lapack functions but not about Blas functions....; Please post the contents of both openblas.pc files, there might be an issue with how openblas is configured.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631991063:175,config,configured,175,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631991063,1,['config'],['configured']
Modifiability,Hope this would make writing any variables to the solution file easy :),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/379#issuecomment-282979508:33,variab,variables,33,https://su2code.github.io,https://github.com/su2code/SU2/pull/379#issuecomment-282979508,1,['variab'],['variables']
Modifiability,How about a quick fix like removing some fields from the output if possible (39 is a lot)? Are there some auxiliary variables apart from the conservatives and time averages that you don't need?. We'll have to look into the MPI issue with INT_MAX.. we will probably hit other snags like this throughout the code as we keep increasing mesh size. I bet there are some int vs. long issues hidden.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-622031229:116,variab,variables,116,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-622031229,1,['variab'],['variables']
Modifiability,"I added it to the steady rigid case flow config file by; ```; VOLUME_OUTPUT= (GRID_VELOCITY, COORDINATES, SOLUTION, PRIMITIVE,VORTEX_IDENTIFICATION); ```; I get the following output; ```; Info: Ignoring the following volume output fields/groups:; GRID_VELOCITY; Volume output fields: COORDINATES, SOLUTION, PRIMITIVE, VORTEX_IDENTIFICATION; ```; I ignored this and copied the restart files to my FSI case and the case still diverged.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1287#issuecomment-843276449:41,config,config,41,https://su2code.github.io,https://github.com/su2code/SU2/issues/1287#issuecomment-843276449,1,['config'],['config']
Modifiability,"I added the option AUTO_DIFF=YES/NO to use the AD based projection also for the cont. adjoint. If you use SU2_DOT_AD then it is enabled by default. So setting this config option is only required if you run the python scripts, since we need to determine somehow what binary should be called (SU2_DOT or SU2_DOT_AD).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/239#issuecomment-184609929:164,config,config,164,https://su2code.github.io,https://github.com/su2code/SU2/pull/239#issuecomment-184609929,1,['config'],['config']
Modifiability,"I added the tutorial cases to the regression tests. They only do **one** iteration, just to check that the config options are correct. Everything else should be covered by the other regression tests already.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/485#issuecomment-355153943:107,config,config,107,https://su2code.github.io,https://github.com/su2code/SU2/pull/485#issuecomment-355153943,1,['config'],['config']
Modifiability,"I added this since we might have 3 directions per FFD control point. Instead of specifying them separately in DEFINITION_DV you can just set the direction of movement to (0,0,0) and it will expand to 2 or 3 variables in 2D or 3D, respectively.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/378#issuecomment-308403033:207,variab,variables,207,https://su2code.github.io,https://github.com/su2code/SU2/issues/378#issuecomment-308403033,1,['variab'],['variables']
Modifiability,"I agree with @pcarruscag , we should try to merge options. I have been thinking for quite some time that we should make the mesh deformation a full solver on its own and homogenise all the options and procedures, be able to define different boundary conditions, etc. It should be based on the linear elasticity but have it's own variable definition, so it's usable out of the box with the adjoint solver. I have a preliminary implementation in [`feature_mesh_solver` ](https://github.com/su2code/SU2/tree/feature_mesh_solver), but I would need some help with that.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/623#issuecomment-456293206:329,variab,variable,329,https://su2code.github.io,https://github.com/su2code/SU2/pull/623#issuecomment-456293206,2,['variab'],['variable']
Modifiability,"I agree, but some do [pick up](https://github.com/su2code/SU2/commits/develop/TestCases/disc_adj_fsi/Airfoil_2d/config.cfg) those changes, just not all of them. Anyway, you'll notice I put an assert for the condition that was causing the problem instead of an ""mpi error"". That is inline with the philosophy that errors/exceptions are to deal with user errors and asserts to help debugging (they are ignored with -DNDEBUG). I can off-course change it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/751#issuecomment-518536145:112,config,config,112,https://su2code.github.io,https://github.com/su2code/SU2/pull/751#issuecomment-518536145,1,['config'],['config']
Modifiability,"I also agree that there should be an explicit option, and that it should; default to the current behavior, however it may be more intuitive for the; user to specify the actual step size- people who don't have Francisco's; extensive experience will not intuit that the finite difference step will; be 1/100 of the reference length, and may have difficulty figuring that out; without help. I suggest something like FD_STEP_SIZE, either way with; documentation explaining it.; -H. On Mar 6, 2017 5:26 PM, ""juanjosealonso"" <notifications@github.com> wrote:. > Agree with Francisco: the best solution is to have an input parameter that; > can be used to scale the FD step size. I would suggest FD_REFERENCE_LENGTH; > to be created (and possibly specified in the config file). If; > FD_REFERENCE_LENGTH is not specified, then it could default to; > REF_LENGTH_MOMENT.; >; > Best,; >; > Juan; >; > On Mar 5, 2017, at 6:35 PM, Francisco Palacios <notifications@github.com<; > mailto:notifications@github.com>> wrote:; >; > Hi,; >; > Yep, I changed that. I know that from the math point of view it doesn‚Äôt; > make a lot of sense but, from the practical point of view, it is useful.; >; > There are some cases, in which computing gradients using finite; > differences is the only choice. And with the shape_optimization script it; > was not possible to control the step size for the finite differences. The; > option for step size was only in finite_differences.py.; >; > The step size is scaled with the reference length because from the; > practical point of view, I have found that the size of the aircraft, wing,; > airfoil, is important to determine a meaningful step size. e.g. should we; > use the same step for an aircraft with a MAC of ~150in than for an airfoil; > with a chord of 1in.; >; > Remember that most of the times we are using FD when the adjoint is not; > converging‚Ä¶ so we have bad convergence of the direct problem (including; > some level of unsteadiness that we want to filter with the ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/367#issuecomment-284314148:757,config,config,757,https://su2code.github.io,https://github.com/su2code/SU2/issues/367#issuecomment-284314148,2,['config'],['config']
Modifiability,"I also like the idea of renaming to ""SOLVER"" but I would also say to avoid as much churn as possible in the conditionals throughout the code... looks like a wash when reading through the PR changes (almost as many +'s as -'s). Unless the changes are going to make something much more flexible or clear, I would say just keep Kind_Regime and set it in config postprocessing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/756#issuecomment-520705829:284,flexible,flexible,284,https://su2code.github.io,https://github.com/su2code/SU2/pull/756#issuecomment-520705829,4,"['config', 'flexible']","['config', 'flexible']"
Modifiability,"I also made the von Karman constant a config option, together with the ""B"" constant. The von Karman constant is used in other places as well, but maybe its best to keep lets say all SA or SST coefficients as a complete set of coefficients and not have only one coefficient change value.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1204#issuecomment-801691188:38,config,config,38,https://su2code.github.io,https://github.com/su2code/SU2/pull/1204#issuecomment-801691188,1,['config'],['config']
Modifiability,"I also worked on refactoring (and checking) the stress tensors. So if there's any questions, feel free to ping me.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1028#issuecomment-647037294:17,refactor,refactoring,17,https://su2code.github.io,https://github.com/su2code/SU2/issues/1028#issuecomment-647037294,1,['refactor'],['refactoring']
Modifiability,"I am a little partial because I wrote it, but this https://github.com/su2code/FADO should do any kind of optimization you want.; Multiple operating points, manipulations of variables, running everything simultaneously... But I guess for something simple it is a little more work to setup.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1279#issuecomment-833754354:173,variab,variables,173,https://su2code.github.io,https://github.com/su2code/SU2/issues/1279#issuecomment-833754354,2,['variab'],['variables']
Modifiability,"I am a new developer so I might need some help. I have added some expressions based upon the discussion on cfdonline: http://www.cfd-online.com/Forums/su2/129165-add-source-terms-user-defined-boundary-condition-set-up-transient-simulation.html.; Based upon that discussion, I have allocated the already defined class in definition_structure.cpp:; numerics_container[iMGlevel][FLOW_SOL][SOURCE_FIRST_TERM] = new CSource_JouleHeating(nDim, nVar_Flow, config);. Also, I have referred to the implementation of source term of Wind Gust. To get started, I am trying to implement a Yes/No option to include Joule Heating in the configuration file. I have added the following statements:; config_structure.inl: inline bool CConfig::GetJoule_Heating(void) {return Joule_Heating}; config_structure.hpp: a flag: bool Joule_Heating and bool GetJoule_Heating(void); config_structure.cpp: addBoolOption(""JOULE_HEATING"", Joule_Heating, false). On compiling, I get an error stating that ""JOULE_HEATING"" is an invalid option name. Please let me know where I am going wrong.; Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/230#issuecomment-172099950:449,config,config,449,https://su2code.github.io,https://github.com/su2code/SU2/issues/230#issuecomment-172099950,2,['config'],"['config', 'configuration']"
Modifiability,"I am currently testing an expression parser to define custom fields in the config file. For this I modified the handling of the curly brackets {}. They now declare a ""literal"" interpretation, which means everything inside is considered as one string and will not be split while strings are tokenized when reading the config file. . When you declare the output fields you can then use expressions involving all available fields, e.g. `SCREEN_OUTPUT= INNER_ITER, RMS_DENSITY, {sqrt(LIFT)/DRAG**2}`. At the moment only inline expression are possible. But I am considering also to use a file to define more complex functions. The goal is to make that framework more flexibel to that we can use it also to define custom integrals over markers, functions defined on the whole flow field, custom boundary conditions, inlet conditions and so on. . Important to note is that I already differentiated the parser, which means everything that is defined can be used also for the adjoint solver.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/913#issuecomment-602276632:75,config,config,75,https://su2code.github.io,https://github.com/su2code/SU2/pull/913#issuecomment-602276632,2,['config'],['config']
Modifiability,I am fine with this request from a conceptual point of view. Once we complete the alignment with develop and the full integration with Mutation++ we might need to review the config structure according to the discussions we had sometime ago. I am attaching here a snapshot illustrating where we would like to head with it. We will need to review it especially considering the efficiency of the approach that uses Mutation++ but allow introducing a custom mechanism of reaction in CHEMKIN format.; ![config-01](https://user-images.githubusercontent.com/22177881/83354211-4561c280-a34f-11ea-9920-f6f066b72d14.png); ![config-02](https://user-images.githubusercontent.com/22177881/83354220-47c41c80-a34f-11ea-9022-b49f132abf88.png),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1010#issuecomment-636475242:174,config,config,174,https://su2code.github.io,https://github.com/su2code/SU2/pull/1010#issuecomment-636475242,3,['config'],"['config', 'config-']"
Modifiability,"I am having some trouble in getting the Fixed CL mode to work properly with the new Output structure and SingleZoneDriver was wondering if anyone had some advice. . The way the fixed Cl mode works is that it first converges the solution to the target CL that is set in the config options. After that, it increases the `AOA` by 0.001 and runs for `ITER_DCL_DALPHA` iterations to determine the gradient `dCL_dAlpha`. This is essentially a finite differencing step to calculate gradients such as dCD_dCL so that it can be added to the objective function if the discrete adjoint is run in the fixed_cl mode. Currently, both the fixed cl convergence and the finite differencing occurs within the one call of `CFluidIteration::Solve` . This PR just changes how the fixed_CL mode converges to the `TARGET_CL` value and doesn't change anything about how the finite differencing step is performed. . My issue is to do with how to output the correct solution (the state before the finite differencing step) at the end of the simulation. Both the fixed cl convergence and the finite differencing occur within the one call of `CFluidIteration::Solve`. But the final solution output is controlled by the `CSinglezoneDriver::Output`. But by the time this is called the solution is at the state after the finite difference step has been taken and the CL is no longer matched. . The proper way to do it in this new output structure/SingleZoneDriver format would be to run the fixed CL mode to convergence using the SingleZoneDriver (including doing all the outputs from the `CSinglezoneDriver::Output` and then running the finite difference after that. But that wouldn't be possible without putting the if (fixed_cl) statement in either the SingleZoneDriver or in SU2_CFD, both of which are much higher level, and shouldn't have a problem specific if statement. The other way to do it would be to force the output structure to write the solution files before the finite differencing step (within the CFluidIteration) ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539148332:273,config,config,273,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539148332,1,['config'],['config']
Modifiability,"I am not entirely sure, but as far as I know SU2 has not been tested on cygwin. So if the setting of the SU2_RUN environment variable does not solve the problem, could you test it without python? You do this using the following command. mpirun -np <# of ranks> <path to SU2 bin directory>/SU2_CFD.exe inv_ONERAM6.cfg. It could be that instead of mpirun you must use mpiexec. That depends on your MPI implementation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/521#issuecomment-378164049:125,variab,variable,125,https://su2code.github.io,https://github.com/su2code/SU2/issues/521#issuecomment-378164049,1,['variab'],['variable']
Modifiability,"I am not so familiar with turbomachinery but it looks like all spanwisesection initialization is done in CPhysicalGeometry.cpp. I think it initializes in the function ComputeNSpan. This function is called in CDriver like this:; ```; geometry[iZone][INST_0][MESH_0]->ComputeNSpan(config[iZone], iZone, INFLOW, true);; geometry[iZone][INST_0][MESH_0]->ComputeNSpan(config[iZone], iZone, OUTFLOW, true);; ```; So you should get an initialized value for inflow and outflow.; Maybe you can check what is going on there and see if this function does what is expected.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2203#issuecomment-1899157368:279,config,config,279,https://su2code.github.io,https://github.com/su2code/SU2/issues/2203#issuecomment-1899157368,2,['config'],['config']
Modifiability,"I am not sure about why periodic boundaries are allowed to deform. It doesn't seem to be a good idea unless there is a way to deform its periodic pair in the same way. As for @auzbaig's question about why SLSQP converges in one step: There is a huge difference in the magnitude of the objective function, O(1) and the gradient O(-11). I am guessing the optimizer doesn't think it can reduce the function value any further since the gradient with respect to the DVs is so small. . To change the relative magnitudes of the objective and gradient, you need to change the DV scaling. This isn't intuitive and is one of the things we are hoping to address in #922 . Check out the `obj_df` function in `SU2_PY/SU2/eval/design.py` (line 386 in the develop branch). There you see how the gradient is scaled: . `grad[k] = grad[k] * sign * scale * global_factor / dv_scl` . Here `scale` is the objective function scaling factor, `global_factor` is what you specify for the `OPT_GRADIENT_FACTOR`, the `dv_scl` is the design variable scaling. . So if you wanted to bring the gradient norm to O(1), you'd have to specify a DV scaling of 1e-11. Usually a gradient norm of O(-6) is what seems to work best with SLSQP.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-628724163:1013,variab,variable,1013,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-628724163,2,['variab'],['variable']
Modifiability,"I am not sure whether this is the correct place to mention this, but when I build a parallel Windows version, I have to change a few things in order to make things work. I use the MinGW using the instructions given in http://www.math.ucla.edu/~wotaoyin/windows_coding.html. The changes in METIS and ParMETIS are minor and can be handled via an #ifdef. Not sure about the mkdir command in geometry_structure.cpp though, which I just commented in order to make it work. Below are what I had to change in the develop version. git diff Common/src/geometry_structure.cpp; diff --git a/Common/src/geometry_structure.cpp b/Common/src/geometry_structure.cpp; index 80eb3a272..fa0b7d144 100644; --- a/Common/src/geometry_structure.cpp; +++ b/Common/src/geometry_structure.cpp; @@ -11060,11 +11060,6 @@ void CPhysicalGeometry::SetTurboVertex(CConfig *config, unsigned short val_iZone; std::string sPath = ""TURBOMACHINERY"";; mode_t nMode = 0733; // UNIX style permissions; int nError = 0;; -#if defined(_WIN32); - nError = _mkdir(sPath.c_str()); // can be used on Windows; -#else; - nError = mkdir(sPath.c_str(),nMode); // can be used on non-Windows; -#endif; if (nError != 0) {; cout << ""TURBOMACHINERY folder creation failed."" <<endl;; }. git diff externals/metis/GKlib/gk_arch.h; diff --git a/externals/metis/GKlib/gk_arch.h b/externals/metis/GKlib/gk_arch.h; index 6735c4d7c..611b7dc87 100644; --- a/externals/metis/GKlib/gk_arch.h; +++ b/externals/metis/GKlib/gk_arch.h; @@ -41,7 +41,7 @@; #endif; #include <inttypes.h>; #include <sys/types.h>; - #include <sys/resource.h>; +//#include <sys/resource.h>; #include <sys/time.h>; #endif. git diff externals/metis/GKlib/gk_getopt.h; diff --git a/externals/metis/GKlib/gk_getopt.h b/externals/metis/GKlib/gk_getopt.h; index 4bb86115f..597c0802a 100644; --- a/externals/metis/GKlib/gk_getopt.h; +++ b/externals/metis/GKlib/gk_getopt.h; @@ -52,11 +52,11 @@ struct gk_option {. /* Function prototypes */; -extern int gk_getopt(int __argc, char **__argv, char *__sho",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/332#issuecomment-323265729:841,config,config,841,https://su2code.github.io,https://github.com/su2code/SU2/pull/332#issuecomment-323265729,1,['config'],['config']
Modifiability,"I am trying to run again the SWBLI V&V case on the SU2 page. However, as it is provided, it does not work with the SU2 standard boundary conditions. In particular, it always diverges due to NaN residuals in the X-Momentum equation. However, when I use the BCs from the NASA TMR page it works just fine (although only the v2003m model). . Here are the results of the computations performed. . Three configs are used:; 1 - With dimensionless limits $k_{lim} = 10^{-20}$ and $w_{lim} = 10^{-10}$.; 2 - Without dimensionless limiters.; 3 - With dimensionless limits $k_{lim} = 10^{-30}$ and $w_{lim} = 10^{-20}$. I am reporting the Skin Friction Coefficient on the lower wall against the Experimental results and the trend of the residual for $\rho$ during the simulations. Five different meshes have been considered. ![ComparisonNewBCsResiduals](https://github.com/user-attachments/assets/d84d7a23-e173-449a-9968-8d8d49b6000f). ![ComparisonNewBCsSFC](https://github.com/user-attachments/assets/243c55c6-e9c7-4335-b889-67244fa81e6b). The solutions are pretty much identical for the same mesh level, but the cases with the config 3 achieved convergence across all of the meshes. It is interesting how, on finer meshes, the use of dimensionless limits (config 1) actually had worst convergence than the one with std limits (config 2) (up until the finest mesh, where config 2 diverges). I am going to try to perform the simulations also with the non m variants of the SST model and the full production term. It may require some work since all of the occurrences of the ""ComputeStressTensor"" have to be changed. Ideally I think that it should be computed only once and then used that value for all of the other instances. I will focus only on the V2003 model for now as it is the only one that does not diverge.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2325316937:398,config,configs,398,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2325316937,5,['config'],"['config', 'configs']"
Modifiability,"I am using SU2 V5. I have been using SU2 for less than 6 months now and the SU2_SOL command doesn't work in parallel for me, it gives a segmentation fault error. Otherwise, I managed to run it in serial as of yesterday but I have to change restart files names to solution file names and make sure the config file restart input matches the first iteration file name.; Secondly, by interval I meant solutions between one iteration and another. For instance, when I want Paraview output from between iterations 10000 and 20000 with steps of 500 iterations, how do I proceed? I think WRT_SOL_FREQ_DUALTIME only lets me define 500 as the step size. How do I input the starting and ending iterations for postprocessing?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/133#issuecomment-324236681:301,config,config,301,https://su2code.github.io,https://github.com/su2code/SU2/issues/133#issuecomment-324236681,1,['config'],['config']
Modifiability,"I attach my `pkgconfig` file for `ompi-cxx.pc` . Note the `Libs.private` line, which correctly states dependencies, but it seems to be ignored by the SU2 build system:. ```; # Copyright (c) 2010 Cisco Systems, Inc. All rights reserved.; # Copyright (c) 2016 IBM Corporation. All rights reserved.; #; Name: Open MPI; Description: Portable high-performance MPI implementation; Version: 4.0.2; URL: http://www.open-mpi.org/; #; prefix=/Users/cesss/OpenMPI/4.0.2; exec_prefix=${prefix}; includedir=${prefix}/include; libdir=${exec_prefix}/lib; pkgincludedir=${includedir}/openmpi; #; # Note that -lopen-pal and all the EXTRA_LIBS are only necessary when; # static linking (they're pulled in by libopen-rte.so's implicit; # dependencies), so only list these in Libs.private.; #; Libs: -L${libdir} -lmpi; Libs.private: -lopen-rte -lopen-pal -lm -lz ; #; Cflags: -I${includedir}; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/867#issuecomment-583904437:329,Portab,Portable,329,https://su2code.github.io,https://github.com/su2code/SU2/issues/867#issuecomment-583904437,1,['Portab'],['Portable']
Modifiability,"I believe I have the solution. SU2 is downloading and installing a fixed version of meson, which is now outdated. I believe this is set by the `sha_version_meson` in the `init.py` file in the meson_scripts folder?. The update to meson that accounts for Python3.8 was made in December, which is after the release of the version SU2 is using. Can we update the meson version we are downloading and using with `./meson.py`? Is this as easy as just changing the `sha_version_meson` variable?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631593655:478,variab,variable,478,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631593655,1,['variab'],['variable']
Modifiability,"I believe the viscous components of a lot of bcs are commented out and can probably be removed at this point. I'm not even sure if they are formulated properly for NEMO problems. I think BC_Inlet can be removed. Or all the commented code can be removed with just an error message. Regarding the outlet boundaries, supersonic outlet does seem to be redundant. However, many validation cases use a supersonic outlet, regardless of boundary layers (ASWBLI), so it may be fine to keep.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1368248064:438,layers,layers,438,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1368248064,1,['layers'],['layers']
Modifiability,"I believe this happened because of the Metis version. I had something similar already, when I was using the 5.0.3 version, and changing to the 4.0.3 worked for me. . How can I make the auto-configure to use the the 4.0.3 source files instead of provided library which seems to be the 5.0.3, and build the suite to see whether it will work in parallel with cgns format mesh or not? I tried to edit the m4/metis.m to use the 4.0.3 precompiled header; however, it didn't worked. Any suggestions?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/40#issuecomment-50249870:190,config,configure,190,https://su2code.github.io,https://github.com/su2code/SU2/issues/40#issuecomment-50249870,1,['config'],['configure']
Modifiability,"I believe this is the section you're talking about:; https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/SU2_CFD/src/solvers/CNSSolver.cpp#L552-L559. Without understanding the structure of the Jacobian (and the overall solver) it's a bit hard for me to understand what's going on here. But if these contributions cause this issue than it should not occur when a Transfer_coefficient of 0.0 is specified, right? I tried that (by setting the BC in the config file accordingly), but the convergence issues remain.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1872#issuecomment-1371206301:475,config,config,475,https://su2code.github.io,https://github.com/su2code/SU2/issues/1872#issuecomment-1371206301,1,['config'],['config']
Modifiability,I believe this was fixed with the new config file parsing code.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/15#issuecomment-44468189:38,config,config,38,https://su2code.github.io,https://github.com/su2code/SU2/issues/15#issuecomment-44468189,1,['config'],['config']
Modifiability,"I build mine for parallel with OpenMP and then use the environment variable; OMP_NUM_THREADS. On Mon, 10 Feb 2020, 14:41 cesss, <notifications@github.com> wrote:. > *Is your feature request related to a problem? Please describe.*; > I'm going to build SU2 with PaStiX, which requires BLAS built in serial; > mode (not parallel). So, I must build OpenBLAS as sequential for PaStiX.; >; > However, SU2 also makes use of BLAS... but... what kind of build for; > OpenBLAS, sequential or parallel?; >; > It's not a subtle thing, because things can go wrong (or lose a lot of; > performance) if it's built in a way different to what SU2 expects.; >; > *Describe the solution you'd like*; > Just mention it in the build instructions where you mention that OpenBLAS; > can be used by SU2.; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/869?email_source=notifications&email_token=AJCOXN5ODRHEGDIWPFF6YITRCFRS3A5CNFSM4KSPLSO2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IMIWASA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN7HGYWRNCWPPNOLHKTRCFRS3ANCNFSM4KSPLSOQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/869#issuecomment-584254305:67,variab,variable,67,https://su2code.github.io,https://github.com/su2code/SU2/issues/869#issuecomment-584254305,1,['variab'],['variable']
Modifiability,"I built it with OpenMPI v2.1.1 in combination with gnu compilers, version 7.0.1, and all debug flags enabled. Apart from a lot of warnings in ParMETIS and CGNS, I also get the following warnings. ../src/geometry_structure.cpp:16468:103: warning: variable ‚ÄòSemiSpan‚Äô set but not used [-Wunused-but-set-variable]; su2double Angle, MinAngle, MaxAngle, dAngle, *Area, *MaxThickness, *ToC, *Chord, *LERadius, *Twist, SemiSpan;. ../src/output_structure.cpp:16249:46: warning: variable ‚ÄòEnergy‚Äô set but not used [-Wunused-but-set-variable]; Velocity[3], Velocity2, MassFlow, Density, Energy, Area, AxiFactor = 1.0, SoundSpeed, Vn, Weight = 1.0;. ../src/output_structure.cpp:16253:13: warning: unused variable ‚ÄòGamma_Minus_One‚Äô [-Wunused-variable]; su2double Gamma_Minus_One = Gamma - 1.0;. ../src/output_structure.cpp:16256:18: warning: unused variable ‚ÄònVar‚Äô [-Wunused-variable]; unsigned short nVar = solver->GetnVar();. However, these are from an earlier merge. I already took care of them in feature_hom, so I suppose it can wait until we merge that branch into develop. So it is good to go as far as I am concerned.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/473#issuecomment-354407661:246,variab,variable,246,https://su2code.github.io,https://github.com/su2code/SU2/pull/473#issuecomment-354407661,8,['variab'],['variable']
Modifiability,"I came across this when I was working on a mesh generation program that generates an extruded boundary layer. I had checks in the program to make sure I was generating elements of positive volume and that they weren't self intersecting. While some of the elements were very badly skewed, I knew I didn't want the elements to be reoriented. However, SU2 reorients several of the prisms and tries to reorient some of the pyramids as well (which isn't a defined operation in SU2). . This is why in my particular case it was easier for me to just turn off the feature. . In general though, I think that the reorientation check could be a bit better. Currently for the prism element for example, it does a volume like calculation using the top and bottom triangles separately, and reorients if either one is negative. Obviously if only one of these calculations is negative, by reorienting, the other calculation would become negative. Similar things are done for pyramids and hexas. . A simple solution would be to change the ""or"" conditions in these calculations to ""and"", so that it is only reoriented if it fails all the checks. I think a better solution would be to decide on a volume calculation method for each element type, and then use that as a criteria. . If you'd prefer to just improve the reorientation checks instead of adding this configuration option, I could submit work on a pull request for that if you'd like.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/162#issuecomment-103679295:1342,config,configuration,1342,https://su2code.github.io,https://github.com/su2code/SU2/pull/162#issuecomment-103679295,2,['config'],['configuration']
Modifiability,"I can guarantee Medi works with MSMPI, my MinGW setup links with `C:/Windows/System32/msmpi.dll` and uses nearly identical MPI header. It most likely is MSVC issue, it often works differently to gcc/clang and has its own set of bugs. Still, the issue with meson is MinGW pkgconfig cannot find MSMPI because it's not in MinGW directly and there's no way of specifying the library location. So it looks like MinGW build with MPI is currently broken. Edit: I'm now getting different errors:; ```; 2>C:\Users\dauma\Documents\SU2\externals\medi\include\medi/adToolImplCommon.hpp(63,1): error C2182: 'Target of operator new()': illegal use of type 'void'; 2>C:\Users\dauma\Documents\SU2\externals\medi\include\medi/adToolImplCommon.hpp(62): message : while compiling class template member function 'void medi::ADToolImplCommon<CoDiPackTool<su2double>,false,false,CoDiType,double,double,int>::createIndexTypeBuffer(medi::ADToolInterface::IndexType *&,size_t) const'; 2> with; 2> [; 2> CoDiType=su2double; 2> ]; 2>C:\Users\dauma\Documents\SU2\externals\codi\include\codi/externals/codiMediPackTypes.hpp(140): message : see reference to class template instantiation 'medi::ADToolImplCommon<CoDiPackTool<su2double>,false,false,CoDiType,double,double,int>' being compiled; 2> with; 2> [; 2> CoDiType=su2double; 2> ]; ```; It's both a template parameter name and inherited typedef. Regex replace for `AdjoinType`, `PrimalType` and `IndexType` works.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-554043358:1351,inherit,inherited,1351,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-554043358,1,['inherit'],['inherited']
Modifiability,"I can report that we did find a couple of small issues with the y+, depending on the file format. Those have been fixed in a recent pull request, so now the current develop branch contains the updates. For ParaView, the variable labels have been reverted to the originals. Thank you again for opening this issue: it led directly to improvements in the code!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/283#issuecomment-226012861:220,variab,variable,220,https://su2code.github.io,https://github.com/su2code/SU2/issues/283#issuecomment-226012861,1,['variab'],['variable']
Modifiability,I can write the probe location for debugging purposes.; The probes have access to the same things as the custom outputs and they only output one scalar.; So if someone wants to probe the entire flow field they need to define one probe per variable.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1909#issuecomment-1418292228:239,variab,variable,239,https://su2code.github.io,https://github.com/su2code/SU2/pull/1909#issuecomment-1418292228,1,['variab'],['variable']
Modifiability,"I cannot answer whether something will work for your system, but I'll describe what the build system does.; The blas dependency is entirely handled by pkg-config, we ask for something called ""whats in front of -Dblas-name"" (the default is openblas) that something needs to provide blas+lapack functions.; pkg-config then looks for ""blas-name"".pc and gets all information regarding libraries from there... If those libraries give you blas+lapack it should work (if it does not its a bug).; Different OS will configure these packages in different ways (e.g. Ubuntu 16 is a bit different from 18), so I honestly cannot tell you what will work on a system I've not tried before.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632104708:155,config,config,155,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632104708,3,['config'],"['config', 'configure']"
Modifiability,"I certainly agree with using the most permanent/established reference for these values, and especially with consistent use within the code. . Since viscosity is notoriously difficult to measure accurately, I suspect that the variations are due to using different data sets. In short, it may be more important to be consistent within the code than to pick the 'right' constants - and a user who places more trust in NASA's numbers than White's can manually change the constants through the config file as necessary. Best,; Heather",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/301#issuecomment-241291419:489,config,config,489,https://su2code.github.io,https://github.com/su2code/SU2/issues/301#issuecomment-241291419,1,['config'],['config']
Modifiability,"I checked and I could not find a place in the code where this option is used explicitly. Since all the drivers split between primary recording for state variables and secondary recording for geometry variables for efficiency. My own use case was for research I did, where I needed to record a tape w.r.t. to both. Since this is not ready to become a pull request any time soon, I do not really need this option. If you suggest I can create a commit to remove the enum option for simplicity.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1492#issuecomment-1012241237:153,variab,variables,153,https://su2code.github.io,https://github.com/su2code/SU2/pull/1492#issuecomment-1012241237,4,['variab'],['variables']
Modifiability,"I compressed the boost sources and added a call to extract it to configure.ac (its much easier than in the m4 scripts, since you can use shell commands). I also added a check whether the boost folder exists, so that it is only done the first time you call configure.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-431005389:65,config,configure,65,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-431005389,2,['config'],['configure']
Modifiability,"I could but I do not think updating that branch will fix your problem. We have not found any mesh handling bugs recently.; Creating / modifying meshes manually can get tricky (at least in my experience).; Have you tried simpler problems? Try starting with a problem that is known to work (there is a long issue with success stories, do a search for mesh adaptation here on github). Then build up from it, e.g. take the same problem and use a finer grid, change the physics to what you need, use a grid for your problem (ideally change one thing at a time).; Also keep in mind that if that branch was finished work it would probably have been merged into develop by now...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1156#issuecomment-757123547:354,adapt,adaptation,354,https://su2code.github.io,https://github.com/su2code/SU2/issues/1156#issuecomment-757123547,2,['adapt'],['adaptation']
Modifiability,"I did run the viscous ONERA M6 case. The speed up with the default config was marginal (2-3%). I also tried with multigrid enabled, in which case the MKL version was 10% faster. Overall the bottlenecks for the rans case were different than the inviscid onera case. I'll look at what can be done here next.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/543#issuecomment-416955089:67,config,config,67,https://su2code.github.io,https://github.com/su2code/SU2/pull/543#issuecomment-416955089,1,['config'],['config']
Modifiability,I don't have any geometric constraints (or definitions) hence SU2_GEO is not being called. You can look at the config file.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-626856238:111,config,config,111,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-626856238,1,['config'],['config']
Modifiability,"I don't mind the ""pairs"" by themselves, it fits nicely with how the NdFlattener works, i.e. its efficient to split them and pass them down to lower layers.; The only slight problem is that ""first"" and ""second"" are not a super expressive interface, but I think that is ok for now.; If it ever becomes needed you can create some adapter to convert something with operator (i,j,....) into pairs of pairs behind the scenes, but for the current use that would not be an option anyway.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1286#issuecomment-847329246:148,layers,layers,148,https://su2code.github.io,https://github.com/su2code/SU2/pull/1286#issuecomment-847329246,2,"['adapt', 'layers']","['adapter', 'layers']"
Modifiability,"I don't think the fix is as simple as it seems.; Indeed looking back at how we developed the CGNS reader, It was originally meant to read multiple zone in a single file. But during development, someone decided to restrict the reader to only one zone per file (and I don't know if it was validated). So now we are seating in the middle. If we replace line 169 of CGNSFVMMeshReader :; <pre>; if ( nzones > 1 ) {; SU2_MPI::Error(string(""CGNS reader currently expects only 1 zone per CGNS file."") +; string(""Multizone problems can be run with separate CGNS files for each zone.""), CURRENT_FUNCTION);; }; </pre>; by; <pre>; if ( cgnsZone > nzones) {; cgnsZone = 1;; }; </pre>. we can easily support multiple zone in one file. To support one CGNS zone per file, I guess that user should provide either the index in the cgns file of the zone we want to read or even better its name and not rely on SU2 numbering of zones. I think that supporting multiple mesh zones in the same file at the same time as one zone per mesh file should be possible as long as enough information is provided by the user. In this case, I am wondering how the option MULTIZONE_MESH and MULTIZONE option are interacting in the related issue. When MULTIZONE_MESH is set to NO do we expect one mesh file per zone ?; And in this case we can force CGNS Reader to read only the first Zone. In a more generic way something like this should be possible:; MULTIZONE=YES; CONFIG_LIST= (zone_1.cfg, zone_2.cfg, zone_3.cfg); CGNSZONENAMES = (""FluidRotor"", ""Solid"", ""FluidStator"") # To let CGNS pick the right zone in the file and if it not found the first zone can be used (current SU2 behavior). CGNSZONENAMES could also be set in each config file.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1566#issuecomment-1073204565:1695,config,config,1695,https://su2code.github.io,https://github.com/su2code/SU2/pull/1566#issuecomment-1073204565,2,['config'],['config']
Modifiability,"I don't think there is any good way to fix this (without completely changing how the config file is defined). Many of the options allow one or multiple entries, and colons are among the tokens used to split up the entries. If we don't use a token to split it, then we won't know how many BCs there are (for example).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/163#issuecomment-103241607:85,config,config,85,https://su2code.github.io,https://github.com/su2code/SU2/issues/163#issuecomment-103241607,1,['config'],['config']
Modifiability,"I don't think we can actually say that, or, at least, we can say that it is not the only factor affecting the convergence. The problem is that it is not consistent across the meshes: for sure, using dimensionless limits help, but changing their values has different effects for finer meshes. ![ComparisonNewBCsResiduals_EF0 2_Other](https://github.com/user-attachments/assets/c50ef5b6-3d96-4a24-96ff-3dfdf704f826). The effect on the residual of the turbulent variables is the same. The most problematic one is always the Omega equation where the residuals remain always large. ![ComparisonNewBCsResiduals_EF0 2_Other_TKE](https://github.com/user-attachments/assets/bdc5383d-37e1-4b1d-a8c2-a2f7edfccb67). ![ComparisonNewBCsResiduals_EF0 2_Other_Omega](https://github.com/user-attachments/assets/3d2b413c-57bc-4692-9b06-73c0065fff56). The problem is that Omega is too large with respect to all the other variables, especially near the wall (where the residuals remain high).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2337816304:459,variab,variables,459,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2337816304,2,['variab'],['variables']
Modifiability,"I encountered a similiar ""double free"" message as above when i am evaluating fixed CL RANS simulation.; I have tested three cases to see when does this error occur.; The first case is a RANS simulation for CRM wing. My configure file is opt_crm.txt in the attachment.; In this case, when I set FIXED_CL_MODE= YES, then in the end of the SU2_CFD execution, it will return messages below:. `Writing comma-separated values (CSV) surface files.; Merging coordinates in the Master node.; Merging solution in the Master node.; Writing SU2 native restart file.; Writing the forces breakdown file.; *** Error in `SU2_CFD': double free or corruption (!prev): 0x0000000007dc2aa0 ***; ======= Backtrace: =========; /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbaa7b177e5]; /lib/x86_64-linux-gnu/libc.so.6(+0x7fe0a)[0x7fbaa7b1fe0a]; /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbaa7b2398c]; SU2_CFD[0x8553d5]; SU2_CFD[0x855c59]; SU2_CFD[0x7583c2]; SU2_CFD[0x75ceb5]; SU2_CFD[0x40759c]; /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbaa7ac0830]; SU2_CFD[0x735109]; ======= Memory map: ========; 00400000-00d07000 r-xp 00000000 08:28 1068882 /home/wanghao/software/SU2-5.0.0_me/bin/SU2_CFD; 00f06000-00f2d000 r--p 00906000 08:28 1068882 /home/wanghao/software/SU2-5.0.0_me/bin/SU2_CFD; ......`. But, if i turn off the FIXED_CL_MODE, this error won't occur.; Then i tried an invisid test case, this case is orriginally from the TestCases folder of SU2 (TestCases/euler/naca0012). In this case, SU2 works well for both FIXED_CL_MODE and FIXED_AOA_MODE.; Finally, i tried another tutorial case for NACA0012 (from /TestCases/rans/naca0012), then SU2 has the same problem in FIXED_CL_MODE as in the first case. Furthermore, I have noticed that this bug is related to the compilers. ; 1. Intel C++ 2013 + Mpich2-3.0.4, fixed Cl model works; System: RHEL 5.3; 2. Intel C++ 2017 + Mpich2-3.0.4, fixed Cl model fails; System: Ubuntu 16.04; 3. GCC6.1.0 + Mpich2-3.0.4, fixed Cl model fails; System: RHEL 5.3",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/383#issuecomment-306425408:219,config,configure,219,https://su2code.github.io,https://github.com/su2code/SU2/issues/383#issuecomment-306425408,1,['config'],['configure']
Modifiability,I experience the same problem. . * mpich-3.3.2 is installed under /opt using:; ```; ./configure CC=$cc CXX=$cxx FC=$fc --enable-shared --prefix=/opt/mpich-3.3.2; make; make install; ```. * Then su2 build is initiated with:; ```; ./meson.py build \; -Denable-autodiff=true \; -Denable-openblas=true \; -Dwith-mpi=auto; ./ninja -C build install; ```. I tried exporting stuff like:; ```; export MPICC=/opt/mpich-3.3.2/bin/mpicc ; export MPICXX=/opt/mpich-3.3.2/bin/mpicxx; export PKG_CONFIG_PATH=$OPENBLAS_LIB/pkgconfig:$MPI_LIB/pkgconfig; ```. Even though the paths are correct and binaries do exist none of that works. I always get:; ```; mpicc found: NO; Run-time dependency MPI for c found: NO (tried pkgconfig and config-tool); mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); ```. OpenBLAS is found for instance:; ```; Using 'PKG_CONFIG_PATH' from environment with value: '/opt/OpenBLAS/lib/pkgconfig'; Run-time dependency openblas found: YES 0.3.6; ```. FYI,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721280907:86,config,configure,86,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721280907,3,['config'],"['config-tool', 'configure']"
Modifiability,"I experienced the issue you described and tried different strategies to mitigate it. ; The back mesh was promising, but after setting it up properly (yes, full mesh, only surfaces need to be refined, volume and boundaries may be kept coarse/high growth ratio), it doesn‚Äôt help much. I think this behavior is related to the inability of the adaptation to either keep a tbd element size along curvatures / have a max element size on the surface. ; I bet the nodes of the adapted grid are still on the surface but huge elements (indicating no particular gradient there) ultimately deteriorate the surface mesh quality. . As a way around to this I separated into different zones/groups the parts of the surface mesh I wanted to ‚Äúfreeze‚Äù, this approach works as the mesh adaptation always respect/keeps the original mesh edge position. The approach above obviously helps mitigating the issue, surface mesh quality is still highest in the initialization mesh. As this method only mitigates the problem, please share your experience! Any other indication/suggestion is very welcome!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-761773094:340,adapt,adaptation,340,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-761773094,3,['adapt'],"['adaptation', 'adapted']"
Modifiability,I fixed this when I redid the config parsing.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/13#issuecomment-103676648:30,config,config,30,https://su2code.github.io,https://github.com/su2code/SU2/issues/13#issuecomment-103676648,1,['config'],['config']
Modifiability,I forgot to mention that MPI-3 functionality is required for these changes. Can we assume that all practical MPI implementations support the MPI-3 standard or should we add a test in configure to check?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/574#issuecomment-418477655:183,config,configure,183,https://su2code.github.io,https://github.com/su2code/SU2/pull/574#issuecomment-418477655,1,['config'],['configure']
Modifiability,"I found the SWBLI config file. I noticed that it is the NK solver. I would test this case without the NK solver.; Moreover, I've noticed that the entropy fix is very low; how about raising it to 0.2 or using a different flux (JST, AUSMPLUSUP2)? It may sound irrelevant, but it is worth the try.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2334419307:18,config,config,18,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2334419307,1,['config'],['config']
Modifiability,"I had a chat with @pcarruscag in the meantime. Summary of the recent changes:; - All the non-FEM classes derived from CPrimalGrid (CLine, CTriangle etc) declared the static members for the connectivity themselves. So they all had to override the virtual getter functions for the connectivity themselves, resulting in a lot of code duplication. -> Now we have an intermediate class `CPrimalGridWithConnectivity<Connectivity>` that overrides them once, accessing the static members of `Connectivity` = `CLineConnectivity`, `CTriangleConnectivity` etc.; - `type*` array -> `std::vector<type>`. As a special case for a fixed-size boolean array, `std::bitset`.; - removed unused variables and functions",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1352#issuecomment-903237756:674,variab,variables,674,https://su2code.github.io,https://github.com/su2code/SU2/pull/1352#issuecomment-903237756,1,['variab'],['variables']
Modifiability,I had a quick look at the merging process and it seems like quite a few files conflict. I'm not sure which files I can merge from develop and not accidentally break the feature_adap functionality. Can I more or less pull across most of these changes? I can give it a go if you can give me some pointers but I'm not well-versed in cpp! Thanks.; ```; Common/include/CConfig.hpp; Common/include/adt/CADTElemClass.hpp; Common/include/geometry/dual_grid/CEdge.hpp; Common/include/geometry/dual_grid/CPoint.hpp; Common/include/geometry/dual_grid/CVertex.hpp; Common/include/option_structure.hpp; Common/src/adt/CADTElemClass.cpp; Common/src/geometry/CPhysicalGeometry.cpp; Common/src/geometry/dual_grid/CPoint.cpp; SU2_CFD/include/output/COutputLegacy.hpp; SU2_CFD/include/solvers/CEulerSolver.hpp; SU2_CFD/include/solvers/CSolver.hpp; SU2_CFD/src/iteration_structure.cpp; SU2_CFD/src/numerics/flow/flow_diffusion.cpp; SU2_CFD/src/output/CFlowCompOutput.cpp; SU2_CFD/src/output/output_structure_legacy.cpp; SU2_CFD/src/solvers/CEulerSolver.cpp; SU2_CFD/src/solvers/CNSSolver.cpp; SU2_CFD/src/solvers/CSolver.cpp; SU2_CFD/src/solvers/CTurbSASolver.cpp; SU2_CFD/src/solvers/CTurbSSTSolver.cpp; SU2_CFD/src/solvers/CTurbSolver.cpp; SU2_CFD/src/variables/CEulerVariable.cpp; SU2_DOT/src/meson.build; SU2_IDE/Xcode/SU2_CFD.xcodeproj/project.pbxproj; SU2_PY/pySU2/pySU2.i; SU2_PY/pySU2/pySU2ad.i; meson_scripts/init.py; preconfigure.py; ```,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1156#issuecomment-755887085:1235,variab,variables,1235,https://su2code.github.io,https://github.com/su2code/SU2/issues/1156#issuecomment-755887085,1,['variab'],['variables']
Modifiability,"I had the same issue, its depended on the way the mesh is partitioned. There is an error in the calculation of NSpan (they should be the same for the inlet and outlet) when the boundary is on two different cores (points are counted twice). I resolved it by making an extra entry in the config that specifies the number of spanwise sections. The testcases are meshed in such a way that the partitioning rarely lead to the outlet being partitioned across two cores, so the errors doesnt pop up there.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/990#issuecomment-630646560:286,config,config,286,https://su2code.github.io,https://github.com/su2code/SU2/issues/990#issuecomment-630646560,1,['config'],['config']
Modifiability,"I hard coded the number of span-wise sections for my case as suggested in #990. By hard coding the number of span-wise sections I am able to get it to work on cores more than 6. For now this works for me. . I added the change in the file CPhysicalGeometry.cpp of version V711. if(marker_flag == OUTFLOW){; // Added by Ashvin MArch 4th 2021	; 	nSpanWiseSections[INFLOW - 1] = 137;; 	nSpanWiseSections[OUTFLOW - 1] = 137;; if(nSpanWiseSections[INFLOW -1] != nSpanWiseSections[OUTFLOW - 1]){; char buf[100];; SPRINTF(buf, ""nSpan inflow %u, nSpan outflow %u"", nSpanWiseSections[INFLOW], nSpanWiseSections[OUTFLOW]);; SU2_MPI::Error(string("" At the moment only turbomachinery with the same amount of span-wise section can be simulated\n"") + buf, CURRENT_FUNCTION);; }; else{; config->SetnSpanWiseSections(nSpanWiseSections[OUTFLOW -1]);; }; }. }. }",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1219#issuecomment-791034298:771,config,config,771,https://su2code.github.io,https://github.com/su2code/SU2/issues/1219#issuecomment-791034298,1,['config'],['config']
Modifiability,"I have a couple of question and suggestions about things I noticed during moving the initialization.; 1. `SU2_DOT` did not call `omp_initialize()`, it does now after moving `omp_initialize()` to the driver constructor. Does it actually run any hybrid AD stuff?; 2. The number of OpenMP threads can be specified for `SU2_CFD` via the `-t` parameter, but for `SU2_DOT` and the python wrapper I saw no way to configure it. Making the number of threads a parameter of the driver constructors and calling `omp_set_num_threads` in the constructor of `CDriverBase` seems like a natural way to enable this for all flavours of SU2. Would that be a nice addition?; 3. I couldn't find any python wrapper tests among the parallel AD and hybrid AD tests. Could any of the serial AD python wrapper tests serve as a basis for a parallel AD or hybrid AD one?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1966#issuecomment-1470026920:406,config,configure,406,https://su2code.github.io,https://github.com/su2code/SU2/pull/1966#issuecomment-1470026920,1,['config'],['configure']
Modifiability,"I have a few updates. I found out that most of my FGMRES problems in this branch where related to the fact that I was using single precision for the linear system. You can see it in this graphs for the residuals of Rho. ![RMSRho_Mesh_3](https://github.com/user-attachments/assets/185b8195-e415-4dff-9332-cff573c069cc). The first two curves are in mixed-precision and they stop long before reaching the minimum residual required due to divergence of the linear solver. Moreover, it seems that the 2003 model here implemented (which, simply put, considers the full reynolds stress tensor for the computation of the production of k and always considers k in the stress tensor and in the thermodynamic variables) has faster convergence and increases the recirculating zone (maybe due to the reduction of turbulence kinetic energy) which is a feature that has also been seen in [DOI:10.1017/aer.2020.93]. . ![SFC_Mesh_3](https://github.com/user-attachments/assets/81a50021-6b58-4a84-9057-a18b5bab023c). There are some differences between the use of the TMR boundary conditions and the ones used before. The results improve with respect to the develop in the prediction of the SFC distribution, which has results completely off from the V&V page of SU2. ![SFC_Mesh_3_Old](https://github.com/user-attachments/assets/0f4d634b-df31-4f86-a324-d9f67947f1ff). ![RMSRho_Mesh_3_Old](https://github.com/user-attachments/assets/24d5c2f5-93fe-432f-82d9-c050a90f7339). I may keep on checking if the implementation of the v2003 model is correct or not by searching for other test cases (probably coming from DOI:10.1017/aer.2020.93).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2393433487:698,variab,variables,698,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2393433487,2,['variab'],['variables']
Modifiability,"I have a question regarding the failed test case:; `opt_multiobj1surf_py` using the config file `inv_wedge_ROE_multiobj_1surf`. ; In this config, is the option `RESTART_SOL=YES` neccessary? There is no `RESTART_ITER` specified. ; (Setting `RESTART_SOL=NO` fixes the failed test, however, I don't want to roam in other test cases without asking first ;) ). Edit: Fixed this issue without touching the test case. I got the point of this test case wrong :)...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/964#issuecomment-626120951:84,config,config,84,https://su2code.github.io,https://github.com/su2code/SU2/pull/964#issuecomment-626120951,2,['config'],['config']
Modifiability,"I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035:272,variab,variable,272,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035,1,['variab'],['variable']
Modifiability,"I have added all existing config options to the config_template file. I do not know what these options do in many cases, but at least they are all visible to the users without immediately diving into the code. For some options, I do not know in which category they belong, so if you see some options that are misplaced, let me know.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1934#issuecomment-1464368418:26,config,config,26,https://su2code.github.io,https://github.com/su2code/SU2/pull/1934#issuecomment-1464368418,1,['config'],['config']
Modifiability,"I have added built-in support for 2D rectangular (quad) and 3D box (hexa) meshes, so no mesh file is required. Works in serial and parallel - all partitioning is taken care of for you. For example, if you wanted to run a 65^3 Taylor Green Vortex problem on a triply-periodic box, you could use the following new config options:. ```; MESH_FORMAT= BOX; MESH_BOX_SIZE= 65 65 65; MESH_BOX_LENGTH = 6.283185307179586 6.283185307179586 6.283185307179586; MESH_BOX_OFFSET = 0.0 0.0 0.0; ```. The marker names are ""x_minus"" ""x_plus"" ""y_minus"" ""y_plus"" ""z_minus"" and ""z_plus"" by default.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/728#issuecomment-521559088:312,config,config,312,https://su2code.github.io,https://github.com/su2code/SU2/pull/728#issuecomment-521559088,1,['config'],['config']
Modifiability,"I have done some comparison cases for Cp distribution with axisymmetric formulation with older versions, they were matching well with commercial codes (I must say for the specific configurations I simulated, it somehow matched). This issue came into light while trying to obtain heat flux with axisymmetric formulation.; I will also try to run this axisymmetric case with some other code and compare....",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1106#issuecomment-740795422:180,config,configurations,180,https://su2code.github.io,https://github.com/su2code/SU2/pull/1106#issuecomment-740795422,1,['config'],['configurations']
Modifiability,"I have just made a quick test. Because --enable-PY_WRAPPER is not in the form of --key=value (like --prefix=PREFIX or --with-cc=mpicc), it is not automatically included in the argument_dict dictionary and thus not passed to the configure script. That is why a treated this option in the same way as the --enable-mpi option, just to be sure. Any advice on how should I treat this --enable-PY_WRAPPER option without changing the ./preconfigure.py ? Or do we just keep everything like it is ?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/298#issuecomment-240523627:228,config,configure,228,https://su2code.github.io,https://github.com/su2code/SU2/pull/298#issuecomment-240523627,1,['config'],['configure']
Modifiability,"I have no idea, that function is not a problem even with gcc 4.7.3, and I also use a similar version of mpich on some machines.; a) Clean the code directory, delete the whole thing and re-download the code just to be sure.; b) What OS are you on?; c) Run mpirun --version, mpicxx --version post the output here.; d) Run the configuration with meson, post the output here.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620546862:324,config,configuration,324,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620546862,1,['config'],['configuration']
Modifiability,"I have run some test to verify that the changes here also work ok for unsteady flows with dual time-stepping (even the CFL adaption seems to work pretty well for pseudo time). I also added some checks to make sure CFL adaption is disabled for TIME_STEPPING mode. @EduardoMolina @clarkpede @cvencro: if you have some time, can you please test this branch out with some of your unsteady cases to verify that everything is ok for you as well? Let me know if you see any issues",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-539278925:123,adapt,adaption,123,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-539278925,2,['adapt'],['adaption']
Modifiability,"I have seen that it is possible to specify the number of iterations in command line (shape_optimization.py)... but, I think it is clear to have both options (number of iterations and bounds - same for all the variables- ) in the config file.; Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/49#issuecomment-54920484:209,variab,variables,209,https://su2code.github.io,https://github.com/su2code/SU2/issues/49#issuecomment-54920484,4,"['config', 'variab']","['config', 'variables']"
Modifiability,"I have tested the adjoint FSI solver, results from matching, conservative, and consistent interpolation all agree. I am attaching only the bare minimum [files](https://github.com/su2code/SU2/files/2475798/testing.zip): meshes, configs, histories and logs. As to avoid uploading large files, I can obviously share the solutions.; To me the original issue is fixed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/597#issuecomment-429571819:227,config,configs,227,https://su2code.github.io,https://github.com/su2code/SU2/pull/597#issuecomment-429571819,1,['config'],['configs']
Modifiability,"I have used both weight +1 and -1 but the optimization direction appears to be independent of it. Another issue is that the OBJECTIVE_WEIGHT parameter is not printed correctly in the configs generated during optimization. Its always +1 (even if I set it as -1). Is the DV_VALUE the same as ""FINDIFF_STEP""? Or does its value happens to be the same?. And why is the DV_VALUE always the same during the optimization to 0.001? Shouldn't this depend on the case itself?. I have attached my config.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-626404968:183,config,configs,183,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-626404968,2,['config'],"['config', 'configs']"
Modifiability,"I haven't explicitly checked if they match but for the rigid motion cases the grid velocity is calculated from the transformation matrices and then imposed to update the grid. Therefore if the grid velocities are back calculated from the grid using FD then I would expect them to be close but not exact. For a pitching airfoil case with FFD design variables, the average difference in gradients for an objective function of L/D was within 1% between discrete adjoint and finite differences. This is very similar for both imposed grid velocities in the adjoint preprocessing and with the FD calculation for the grid velocities. So I think the results are pretty reliable for the rigid motion cases using the updated grid velocities calculation. . The deforming grid on the other hand is a different story. I still haven't been able to complete an adjoint run without diverging. More exploring to be done there...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/766#issuecomment-525715240:348,variab,variables,348,https://su2code.github.io,https://github.com/su2code/SU2/pull/766#issuecomment-525715240,1,['variab'],['variables']
Modifiability,"I ifdeffed the availability of MPI_Ibarrier for checking whether the error call is collective. If MPI_Ibarrier is not present, there is a delay in the writing of the error message of 1 second (to make sure that the buffers for the one-sided communication are updated). If MPI_Ibarrier should be used when available (this is the cleaner solution), an additional check in configure must be added.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/574#issuecomment-418669548:370,config,configure,370,https://su2code.github.io,https://github.com/su2code/SU2/pull/574#issuecomment-418669548,1,['config'],['configure']
Modifiability,"I implemented most of the reviewers suggestions. The only suggestion I left unchanged is the upper-case consistency issue raised by Wally. Since it is an optional output and it depends on the controlling variable names the user provides, I think it would be more intuitive to keep the font case consistent between the names under `CONTROLLING_VARIABLE_NAMES` and the corresponding `RMS_` outputs.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2057#issuecomment-1643680580:204,variab,variable,204,https://su2code.github.io,https://github.com/su2code/SU2/pull/2057#issuecomment-1643680580,2,['variab'],['variable']
Modifiability,I just pulled the master branch of SU2 and it worked fine with configuration file and mesh file. Which files did you use for your 3D simulation? You may download files from following links. Inviscid : https://github.com/su2code/su2code.github.io/tree/master/Inviscid_ONERAM6; Turbulent : https://github.com/su2code/su2code.github.io/tree/master/Turbulent_ONERAM6,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/523#issuecomment-381741128:63,config,configuration,63,https://su2code.github.io,https://github.com/su2code/SU2/issues/523#issuecomment-381741128,1,['config'],['configuration']
Modifiability,"I just pushed a new version of your inlet profile branch. I really like the solver class abstractions. I can tell you have a good grip on the classes and where data should live - nice job. Here are the changes I have made:; * everything is generalized in parallel for an arbitrary number of inlets in the file. The file format changed slightly.; * I moved around some routines and data to take more advantage of inheritance and encapsulation: it is now more like the restart routines where the reading and data live in the parent CSolver class, the specific load functions are found in the solvers (I overloaded SetInletAtVertex), and the template file is written by COutput. It is written such that any solver could eventually use it for any marker type by adding the appropriate SetInletAtVertex routine for solver-specific data (might need to rename for different marker types rather than inlet) and writing an appropriate template file writer in the output.; * for now, it is still requiring a essentially a matching profile point (nearest neighbor within a tight tolerance) by default, but you can have an arbitrary number of points in the file for each marker, and we can eventually add interpolation easily. We already have some of these routines.; * the turbulent solvers now all use the Inlet_TurbVars data structure even for uniform inlets. Can you please check this with Python?; * multigrid is now working. I put in a boundary face area-averaged restriction operator for the inlet profiles. Any decent approximation on the coarse levels should work ok. I left all of your original routines there, but deactivated them for the moment. Can you please give it a look and let me know what you think (and whether it is working for you)? Feedback most welcome. If we are happy with it, we can clean it up and submit a PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/467#issuecomment-371716916:412,inherit,inheritance,412,https://su2code.github.io,https://github.com/su2code/SU2/issues/467#issuecomment-371716916,1,['inherit'],['inheritance']
Modifiability,"I just tested the 3D adaptation on an ONERA M6 and it seems to be working fine for me. <img width=""790"" alt=""Screen Shot 2020-05-06 at 2 05 56 PM"" src=""https://user-images.githubusercontent.com/19416354/81228401-e0f75180-8fa2-11ea-98e2-c0e378566212.png"">. I just updated AMGIO to include surface/volume element orientation checks, not sure if that'll help with your issue. If the updated code doesn't fix things, can you upload your initial mesh, flow restart, and the flo.meshb and flo.solb files from adap/ini?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-624894422:21,adapt,adaptation,21,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-624894422,1,['adapt'],['adaptation']
Modifiability,"I just tried it and it failed. The error message is extremely long, I am attaching a [text file](https://github.com/su2code/SU2/files/4685129/su2_custom-mpi.log) for that. This was my meson command earlier: `./meson.py build -Denable-openblas=true -Denable-autodiff=true -Denable-directdiff=true -Dwith-mpi=enabled -Denable-pywrapper=true --prefix=/home/slimshady/UserPackages/SU2_INSTALL`. Then I did this: ; ```; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./meson.py configure build -Denable-openblas=true -Denable-autodiff=true -Denable-directdiff=true -Dcustom-mpi=true -Dwith-mpi=enabled -Denable-pywrapper=true --prefix=/home/slimshady/UserPackages/SU2_INSTALL; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./meson.py setup --wipe build; The Meson build system; Version: 0.54.999; Source dir: /home/slimshady/UserPackages/SU2_HOME; Build dir: /home/slimshady/UserPackages/SU2_HOME/build; Build type: native build; Project name: SU2; Project version: 7.0.4 ""Blackbird""; C compiler for the host machine: cc (gcc 9.2.1 ""cc (Arch Linux 9.2.1+20200130-2) 9.2.1 20200130""); C linker for the host machine: cc ld.bfd 2.34; C++ compiler for the host machine: c++ (gcc 9.2.1 ""c++ (Arch Linux 9.2.1+20200130-2) 9.2.1 20200130""); C++ linker for the host machine: c++ ld.bfd 2.34; Host machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/usr/bin/python3); Message: Boost sources found.; Found pkg-config: /usr/bin/pkg-config (1.6.3); Run-time dependency openblas found: YES 0.3.8; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_HOME/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.4 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-634298776:476,config,configure,476,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-634298776,1,['config'],['configure']
Modifiability,"I looked for ""UCX error"" and got e.g. this https://github.com/openucx/ucx/issues/4742; IDK but it looks like an MPI configuration problem...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1156#issuecomment-759610569:116,config,configuration,116,https://su2code.github.io,https://github.com/su2code/SU2/issues/1156#issuecomment-759610569,1,['config'],['configuration']
Modifiability,"I made a fully unstructured version of the mesh and it seems I can now pass the `Geometry Preprocessing` stage. I'm now having a different issue that I do not know if it is related. After 250 iterations, the simulation hangs, with the following output in the `/adap/ini/log.out`:. ```; | 249| -7.427827| 0.000000| 0.024016| 0.000401| 8.4160e+09|; | 250| -7.390279| 0.000000| 0.024016| 0.000401| 8.4160e+09|; +-----------------------------------------------------------------------+; | File Writing Summary | Filename |; +-----------------------------------------------------------------------+; |SU2 restart |restart_flow.dat |; |Paraview binary |flow.vtk |; |Paraview binary surface |surface_flow.vtk |; [1609863350.417715] [super:1071838:0] sock.c:344 UCX ERROR recv(fd=50) failed: Bad address; [1609863350.417771] [super:1071838:0] sock.c:344 UCX ERROR recv(fd=25) failed: Connection reset by peer; [1609863350.418024] [super:1071838:0] sock.c:344 UCX ERROR sendv(fd=-1) failed: Bad file descriptor; ```. UPDATE: Bizarrely, if I attempt to run the adaptation script again, it now fails earlier with the same UCX Connection reset error:; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 774736 grid points before partitioning.; 4416440 volume elements before partitioning.; 3 surface markers.; 18040 boundary elements in index 0 (Marker = BODY).; 44930 boundary elements in index 1 (Marker = FARFIELD).; 177930 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency structure.; [1609864445.066242] [super:1075233:0] sock.c:344 UCX ERROR recv(fd=98) failed: Connection reset by peer; [1609864445.066058] [super:1075147:0] sock.c:344 UCX ERROR recv(fd=54) failed: Connection reset by peer; ```; Is this a bug?. UPDATE: This seems to have gone away pulling a different version OpenMPI and recompiling.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754746706:1051,adapt,adaptation,1051,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754746706,1,['adapt'],['adaptation']
Modifiability,"I managed to implement the computation of grad(n*U)*n, but at the moment it is located into CTransLMSolver::PreProcessing. It seems to work with a structured mesh on a flat plate. Currently, I am testing with a 2D profile too. However, being into the PreProcessing of the transition solver, the normals are computed at each iteration, thus it is not computationally efficient if non-deforming meshes are used. I am looking into where to put it such that it is computed just if the mesh is updated (and at the first iteration of course). . Plus, I have added a whole lot of variables to the output, but they will be removed in the final version. They are just used as debug.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1443670288:573,variab,variables,573,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1443670288,1,['variab'],['variables']
Modifiability,"I opened a PR with the fix, you also have a problem in your config, the motion of the trailing edge is not consistent with the other surfaces (the amplitude has too many zeros)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2215#issuecomment-1951598929:60,config,config,60,https://su2code.github.io,https://github.com/su2code/SU2/issues/2215#issuecomment-1951598929,1,['config'],['config']
Modifiability,I ran your test case 4 times and could not reproduce the problem. The code rewrites the `restart_flow.dat` fine and there were no warnings. I even tried to run modify the `config.cfg` so we run with different number iterations; therer are still no errors. . I have SU2 v7.0.2 running on Manjaro x64 and mpiexec 4.0.2,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/906#issuecomment-602097912:75,rewrite,rewrites,75,https://su2code.github.io,https://github.com/su2code/SU2/issues/906#issuecomment-602097912,2,"['config', 'rewrite']","['config', 'rewrites']"
Modifiability,I remember having the same problem when computing impinging jets flows on a hot surface in symmetric configurations. The maximum heat flux should be at the stagnation point of the jet (which is in the symmetry plane) but the simulation predicted the maximum at some distance from the symmetry. Mirroring the mesh and computing the full geometry led to the correct solution. ; I was using JST but didn't test with upwind schemes for comparison. I may do so if I have some time.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1125#issuecomment-782058918:101,config,configurations,101,https://su2code.github.io,https://github.com/su2code/SU2/issues/1125#issuecomment-782058918,1,['config'],['configurations']
Modifiability,"I run into the same issue in the last few days. Iooks to me that this behavior is related to the Parent_CV variable which is not initialized. I solved this issue by setting it to 0 in the CPoint constructor in dual_grid_structure.cpp. Could someone have a look into this and confirm this?. I opened a new issue earlier today, im closing it right now so we can keep working in this thread",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/276#issuecomment-252726716:107,variab,variable,107,https://su2code.github.io,https://github.com/su2code/SU2/issues/276#issuecomment-252726716,1,['variab'],['variable']
Modifiability,"I said this could be a _POSSIBLE_ bug. Shouldn't numerical flux (at farfield) be evaluated based on boundary variables calculated from the Riemann Invariants? Check the corresponding implementation for Euler_Wall and I think you'll understand why I thought it could be an issue! I think that is the standard implementation. Also when checking for subsonic/supersonic conditions i.e. |u.n+c| >= c or vice-versa you do not do it with freestream values. Please check lines 10368, 10378. . And I think this is my third interaction with the developers (I suppose you are one of the developers too). And let me guess......I havent opened any random file and a random line to report an issue. . Since you accuse me of randomly reporting issues which annoy you let me also tell you that there is a bug in your CUSP flux scheme implementation. Figure out what that is unless you also accuse me like the way you did. Hint: look at beta and Nu_c. This will be my last interaction with you. You've taught me how *your* open-source environment works. . @fpalacios Please take note of the following discussion.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/405#issuecomment-313582779:109,variab,variables,109,https://su2code.github.io,https://github.com/su2code/SU2/issues/405#issuecomment-313582779,1,['variab'],['variables']
Modifiability,"I searched for `TWO3` in the project and this revealed two other locations. I adapted the one in `CSolver.cpp` in commit 64bd077. There is another one in `python_wrapper_structure.cpp`, lines 400-415. There I hesitate a bit because in the `incompressible` case, `div_vel` is manually set to zero. As long as the solver has not converged, this has an effect, right?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-743033388:78,adapt,adapted,78,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-743033388,1,['adapt'],['adapted']
Modifiability,"I see thanks for sharing that.; The way I understand (or not) blocking v non-blocking communication, with the former there will be more communications in flight at a given moment since the code does not wait to receive before issuing the next message. Maybe this puts a lot of pressure on your network...; Maybe there are tuning parameters to improve network performance under these conditions (it could be worth having a look around CFD Online), or maybe your new hardware will not have any problem. As for software solutions.; If your usual application is compressible RANS/URANS you can try the new and experimental hybrid parallel mode we just introduced in 7.0.2. This will allow you to have one MPI process per node which will unfold in 16 threads each.; I cannot guarantee this will work flawlessly since I have not tested it for pure unstructured meshes (which seems to be your case) but for block-structured-ish meshes the results so far are very promising (#861).; To use this add option `-Dwith-omp=true` to meson, and then launch the code with `mpirun -n 4 --bind-to none SU2_CFD -t 16 config.cfg` (or something equivalent, the ""--bind-to none"" part is important).; Let me know if you get a cryptic error along the lines of ""coloring failed"". For pure MPI, @economon would it be viable to force per-message waits? and would that be roughly equivalent to the old communication mode? (this would be more work on our side @drewkett so if you could give option 1 a go it would be great).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593162200:1098,config,config,1098,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593162200,1,['config'],['config']
Modifiability,"I see, I hope that @bmunguia will have a chance to take a look! I tried to have a look through the past commits but I didn't manage to successfully merge all the functions. From what I can tell, these are the edited variables/functions:; ; CConfig Class; - WRT_SLICE; - GetBool_Compute_Metric; - GetWrt_Aniso_Sensor; - GetKind_Aniso_Sensor; - GetKind_Hessian_Method; - GetAdap_Norm; - GetAdap_Hmax; - GetAdap_Hmin; - GetAdap_ARmax; - GetAdap_Complexity. Cvertex (not sure if values should be initialised); - ~CVertex; - GetnDonorPoints; - SetDonorCoeff; - GetDonorCoeff; - SetInterpDonorPoint; - GetInterpDonorPoint; - SetInterpDonorProcessor; - GetInterpDonorProcessor; - Allocate_DonorInfo; - GetVarRot; - SetVarRot. Option_structure; - ENUM_ANISO_SENSOR; - MapType; - ENUM_OUTPUT; - MakePair(""INRIA"", INRIA); - MPI_QUANTIFIES enums. CPhysicalGeometry - probably AMG stuff?; - CPhysicalGeometry::LoadAdaptedMeshParallel_FVM; - CPhysicalGeometry::Check_IntElem_Orientation; - CPhysicalGeometry::Check_BoundElem_Orientation; 	; 	; Common/src/geometry/dual_grid/CPoint.cpp'; - Check this one!. COutputLegacy.hpp; - Import inria amg. output_structure_legacy.cpp'; - SpecialOutput - Inria methods?. Csolver; - CSolver::SetPositiveDefiniteHessian. meson.build; - Add 'output/filewriter/CInriaFileWriter.cpp',. Init.py - add amgio stuff; - Add sha_version_amg; - Add github_repo_amg. Preconfigure.py; - Add init_inria; - Add other inria flags",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1156#issuecomment-756056762:216,variab,variables,216,https://su2code.github.io,https://github.com/su2code/SU2/issues/1156#issuecomment-756056762,1,['variab'],['variables']
Modifiability,"I see, those warnings didn‚Äôt pop up with LLVM on Mac. Actually, in a next pass, each of those Set_MPI_* routines that carry the warnings will be deleted. I didn‚Äôt do it yet, because git was getting confused with the spacings again. None of those routines are active anywhere any longer, so even just removing that index variable is fine to get rid of the warning",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/699#issuecomment-498966410:320,variab,variable,320,https://su2code.github.io,https://github.com/su2code/SU2/pull/699#issuecomment-498966410,1,['variab'],['variable']
Modifiability,"I should have said I was already using that ""polytropic Peng-Robinson"" eos and I have read the publications related to it. It just takes gamma as an argument from the config. Also for many boundary conditions Cp is calculated as gamma/(gamma-1)*R which is only true for ideal gases. And I am curious about how gamma is used in CNumerics. Nevermind, thank you. For my cases I will try to update Gamma whenever the Temperature is calculated with the eos.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1065#issuecomment-671405067:167,config,config,167,https://su2code.github.io,https://github.com/su2code/SU2/issues/1065#issuecomment-671405067,1,['config'],['config']
Modifiability,"I suspect this may have been related to some changes I made to allow; passing extra DVS to my multifidelity flowpath model. If that's the issue,; go ahead and take it out the offending code, if I decide to put it back in; I'll try to do it more cleanly. If it isn't urgent, I can look more into; this in a couple weeks. On Feb 22, 2017 7:14 AM, ""Francisco Palacios"" <notifications@github.com>; wrote:. Hi All,. I‚Äôm a little bit confused with the python scripts and the design variable; definition. It seems that to compute the number of design variable we use; something like this:. # number of design variables; dv_size = project.config['DEFINITION_DV']['SIZE']; n_dv = sum(dv_size). I think that dv_size is new for me. Do you know what is the reason for; this? Is it possible to put several design variable together in the output; file and the python stuff will split the design variables?. Related with this, I have noticed several inconsistencies like:. We use:. # prescale x0; dv_scales = project.config['DEFINITION_DV']['SCALE']; k = 0; for i, dv_scl in enumerate(dv_scales):; for j in range(dv_size[i]):; x0[k] = x0[k]/dv_scl;; k = k + 1. or this:. # prescale x0; dv_scales = project.config['DEFINITION_DV']['SCALE']; x0 = [ x0[i]/dv_scl for i,dv_scl in enumerate(dv_scales) ]. Any clarification would be very appreciated. Thanks!; Francisco. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub; <https://github.com/su2code/SU2/issues/378>, or mute the thread; <https://github.com/notifications/unsubscribe-auth/AE7akObYA4LCPNs05XhJdpZZYIjIV0Boks5reylmgaJpZM4MHrCJ>; .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/378#issuecomment-281462330:476,variab,variable,476,https://su2code.github.io,https://github.com/su2code/SU2/issues/378#issuecomment-281462330,8,"['config', 'variab']","['config', 'variable', 'variables']"
Modifiability,"I tend to agree w Eran on this topic. When it is working as it should, it is very convenient to have the makefiles already available in the repo. I switch between Mac, Ubuntu, and a red hat cluster without needing to update anything or call the bootstrap script. I rarely use it.. basically only when adding or removing files to the build. Also, it is good to minimize dependencies, as sometimes old machines or clusters have limited tool sets. But, clearly we should at a minimum fix the issue that some of you are finding with the autotools, which should just need an update. What systems are you having trouble with? It‚Äôs important that we don‚Äôt jump too far ahead for portability reasons (that‚Äôs why we have kept the old versions for so long). Do you have an idea of the minimum autotools you need for the failing systems? We could start by updating to that version and see if things stabilize.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/586#issuecomment-424210049:672,portab,portability,672,https://su2code.github.io,https://github.com/su2code/SU2/pull/586#issuecomment-424210049,2,['portab'],['portability']
Modifiability,"I tested this on Ubuntu 18.04 and Centos 7.5. On Ubuntu both options work fine. However, on Centos only the most recent commit (i.e. running ./bootstrap) works. The commit ce9cd2b fails, because the system runs automake 1.13 and therefore it cannot find aclocal-1.15 when running configure. This can be solved by either changing am__api_version in configure to 1.13 (dirty) or running bootstrap. However, I don't know if either option is desired. BTW, this problem will also show up for the master branch, whatever option will be chosen, as for the master branch the configure and Makefile.in's will be in the distribution. In short, the option with bootstrap works fine on the operating systems I tested (and I assume on all Linux and Unix distributions). When configure is present in the distribution, you could run into problems if the system does not have the required version of autotools.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/586#issuecomment-427011685:280,config,configure,280,https://su2code.github.io,https://github.com/su2code/SU2/pull/586#issuecomment-427011685,4,['config'],['configure']
Modifiability,"I think I have zoomed on the problem:; First I had to renstall m4 (a local problem); Then, In the AD part, there is a refernce to CHeatSolverFVM instead of CHeatSolver.; So, a patch, is to copy routines:; in SU2_CFD/src/solvers : cp CHeatSolver.cpp CHeatSolverFVM.cpp; in SU2_CFD/src/variables : cp CHeatVariable.cpp CHeatFVMVariable.cpp; After that make and make install work. This is a patch. The repair requires a match of the names of the CHeat routines to the actual files names. I didn't track where the list exists. Last but not important: configure.ac prints a header with Release 6.2.0 Falcon; instead of 7.02 Blackbird. This explaines the header that I have printed in previous message",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-600786911:284,variab,variables,284,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-600786911,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"I think along with this, the testcases/tutorials cfgs will have outdated configs. If we have a new template, I can help with the update.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/772#issuecomment-524913164:73,config,configs,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/772#issuecomment-524913164,1,['config'],['configs']
Modifiability,"I think combining options where possible would be great. Also, won‚Äôt the move to multiple config files for multizone avoid the linear solver tolerance issue you mention for FSI, as the elasticity config can again reuse Linear_Solver_Error once it is not simultaneously being used by the fluid? Therefore, the deform option can be solely for grid deformation either during shape design or for the mesh equations in FSI problems.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/623#issuecomment-444003331:90,config,config,90,https://su2code.github.io,https://github.com/su2code/SU2/pull/623#issuecomment-444003331,2,['config'],['config']
Modifiability,"I think its a good idea to separate the weight from the objective function. This makes it more clear and flexible. However, what bothers me a little bit is that the OBJECTIVE_FUNCTION option is now used for two things. Namely for the optimization and for the individual adjoint runs. Maybe it would be good to still have another option for specifying the obj. function for the adjoint run itself (with a completely different name, so that there won't be any confusions). . Maybe it's less of a problem then I think, though.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-185126081:105,flexible,flexible,105,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-185126081,2,['flexible'],['flexible']
Modifiability,"I think one option would add yet one more config option and make it more difficult for the user, and the other would be to extend new features to all existing capabilities of the code. The idea behind the single and multi-zone drivers was precisely generalization. In my opinion it would be a no brainer to go for the second, but I'll leave it up to the community, but it depends also a lot on what timing we are moving in.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542210441:42,config,config,42,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542210441,2,"['config', 'extend']","['config', 'extend']"
Modifiability,"I think that defining these regions in separate files would be better. It would keep the mesh format intact and allow users to change the regions without regenerating the mesh.; We could also use the regions to define volumetric source terms.; 1) Config option to provide the file with regions; 2) Preprocess the regions in each mpi rank to define them as lists of local indices (based on the global indices that are owned by the rank).; 3) Extend the custom outputs to perform volume integrals and averages (not too different from the surface averages we already have), this would directly allow the volume averages to be used in optimizations.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1894#issuecomment-1396263229:247,Config,Config,247,https://su2code.github.io,https://github.com/su2code/SU2/issues/1894#issuecomment-1396263229,2,"['Config', 'Extend']","['Config', 'Extend']"
Modifiability,"I think the sst-rewrite team did a pretty good job going over the equations for the restructuring, and this one went unnoticed because it happened outside of the turbulence modeling. We have to go through the equations anyway as part of the sst-v1994 bugfix PR...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1784#issuecomment-1278091290:16,rewrite,rewrite,16,https://su2code.github.io,https://github.com/su2code/SU2/pull/1784#issuecomment-1278091290,1,['rewrite'],['rewrite']
Modifiability,"I think the way the prefix is set up is fine. My suggestion is more about where things go under $prefix. For python scripts meant to be used as executables... I'd put these directly under `$prefix/bin`, e.g. on my system, `/usr/bin/foo.py` and be sure that foo.py has execute permission. Python modules meant to be imported ... I'd put these in <somewhere>/python3.x/site-packages or let pip decide where to put them. So `foo.py` could end up in two different places, I guess. Concrete example: I just installed and ended up with:; ```; /usr/bin/SU2_Nastran/; /usr/bin/SU2_Nastran/pysu2_nastran.py; /usr/bin/SU2_Nastran/__init__.py; ```; Instead, a better setup might be:. `/usr/bin/pysu2_nastran.py` (with mode 755). and. ```; /usr/lib64/python3.9/site-packages/SU2_Nastran/; /usr/lib64/python3.9/site-packages/SU2_Nastran/pysu2_nastran.py; /usr/lib64/python3.9/site-packages/SU2_Nastran/__init__.py; ```. Whereby /usr/lib64/python3.9/site-packages is right for my system, but other systems will have their own place to install modules. That's where I suspect pip might be helpful. Perhaps it could be figured out from sys.path, though not sure how portable that is. This is an easy fix for someone who understands the build/install process well (and that's not me). But if nobody steps forward after a week or three, I'll give it a try anyway.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2075#issuecomment-1627815111:1150,portab,portable,1150,https://su2code.github.io,https://github.com/su2code/SU2/issues/2075#issuecomment-1627815111,1,['portab'],['portable']
Modifiability,"I think we are all in agreement then.. as @pcarruscag points out, we should always keep code duplication in mind and try to abstract when possible. But, let's do it gradually.. sometimes we need to balance this against keeping duplicate code if it helps reduce conflicts and allows for different parts of the code to evolve separately and in parallel by different developers. I think a good first step is what @talbring has in mind for the flow output.. exactly this type of mid-level flow output class will show up there I believe. We can see how well that goes and then port to the solver classes too. Will merge this in today so we can keep moving forward. Thanks all",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/657#issuecomment-472547987:317,evolve,evolve,317,https://su2code.github.io,https://github.com/su2code/SU2/pull/657#issuecomment-472547987,1,['evolve'],['evolve']
Modifiability,"I think we're going to need to add a separate config option NEMO_SUPERSONIC_INLET since we need mass fracs and Tve, or is there a way to overload the existing option?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1372911265:46,config,config,46,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1372911265,1,['config'],['config']
Modifiability,"I tried to give a non-zero Mach Number in config file and it succeed. I obtained a rotary solution. However, giving a non-zero Mach Number would mean it is not hover anymore. Is there anyway to initialize this problem without given any forward speed ?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/997#issuecomment-632678700:42,config,config,42,https://su2code.github.io,https://github.com/su2code/SU2/issues/997#issuecomment-632678700,1,['config'],['config']
Modifiability,"I tried using adaptive CFL as you suggested for v7.2.1 with settings below;. CFL_ADAPT_PARAM= ( 0.1, 2.0, 1.0, 1e10, 0.001 ). Even though it doesn't diverge it still needs more iterations to converge compared to v7.0.6 and result is pretty much the same with constant CFL 250. Also, with adaptive CFL residuals are changing but they are oscillating in an interval. . What I don't really understand is why using same settings would yield less accurate results in a newer version. Since these settings are working with v7.0.6 and are very common I don't think I need to alter them for a newer version to give the same results. Here is the code output for v7.2.1 with adaptive cfl enabled. [codeOutput_v721_CFLadapt.txt](https://github.com/su2code/SU2/files/7919208/codeOutput_v721_CFLadapt.txt)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1519#issuecomment-1019351706:14,adapt,adaptive,14,https://su2code.github.io,https://github.com/su2code/SU2/issues/1519#issuecomment-1019351706,3,['adapt'],['adaptive']
Modifiability,"I tried your suggestion. I ran the FSI case in 1st order for one time-step and then made two copies of the restart file. I then tried 2nd order restart from this and the case still diverged. The FSI flow config file had the following VOLUME_OUTPUT; ```; VOLUME_OUTPUT= (GRID_VELOCITY, COORDINATES, SOLUTION, PRIMITIVE,VORTEX_IDENTIFICATION); ```; I also tried to manually add columns ""Grid_Velocity_x"" and ""Grid_Velocity_y"" to the ASCII restart file of the rigid case. The case still diverged.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1287#issuecomment-843801037:204,config,config,204,https://su2code.github.io,https://github.com/su2code/SU2/issues/1287#issuecomment-843801037,1,['config'],['config']
Modifiability,"I understand, but it helps to keep the code more approachable and portable. That being said, there may be some work proposed soon using templates in the linear solver classes, and it would be great to have your feedback then. We really appreciate your interest!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/400#issuecomment-360075745:66,portab,portable,66,https://su2code.github.io,https://github.com/su2code/SU2/issues/400#issuecomment-360075745,2,['portab'],['portable']
Modifiability,"I was just giving this a try on a mac, and while the configure/unpack of boost seems to work fine, I get the following error:. teciosrc/auxdata.cpp:14:2239: error: cast from pointer to smaller type '___90' (aka 'int') loses information. This is with LLVM. @ScottImlay : anything obvious I am missing w.r.t. data types or the build steps for mac? Maybe there is something with 32 v 64 bit. Have others given this a try yet?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-431207236:53,config,configure,53,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-431207236,1,['config'],['configure']
Modifiability,"I was looking a bit more into this because of the issue with having to treat the structural solver differently in the Update function.; (I gotta say I feel lucky I never had to look into time domain stuff, because 3 nested iterations... not easy). Anyway, I think there is a problem here, the ""predicted displacement"" that is transferred to the fluid during outer iterations (the coupling iterations within each time iteration) is the one set in CFEASolver::SetAitken_Relaxation, which is part of the Corrector step at the end of the structural inner iterations (the ones within each outer iteration). The ""predicted velocity"" is not set in SetAitken_Relaxation thus the grid velocities are lagged by one time step, since they are only set to the current velocity of the structure at the end of the time step (in the Update methods). I have little trust in the predictor step, looking at it I thing only zero order has a chance of working and anything else will cause the fluid and structural sides to separate / overlap, I'll test the theory.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-774712415:380,coupling,coupling,380,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-774712415,1,['coupling'],['coupling']
Modifiability,"I was not able to reproduce this behavior. Below is the result I get when using the master branch for both the code and the test cases. . ![image](https://cloud.githubusercontent.com/assets/5167760/7709282/d36254b2-fe10-11e4-8827-f01ec46fbf0f.png). Note that since the config file provided uses a restart it depends on also having the provided restart files, which may have been produced with slightly different settings (ie, lower CFL number), and if you are not using the restart files you should check that the solution has converged. If you have further questions about the settings of SU2, checking convergence, etc please post them to the forum at:; cfd-online.com/Forums/su2/. You will find that in addition to a wider audience who can answer your questions, the answers may also already be posted from users who had similar problems.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/179#issuecomment-103602179:269,config,config,269,https://su2code.github.io,https://github.com/su2code/SU2/issues/179#issuecomment-103602179,1,['config'],['config']
Modifiability,"I was not suggesting a ""reversion"" Juan, just a compatibility mode. But from what Tom wrote it would not be trivial (nor worth doing since it is just speculation at this point). @drewkett you can try to get past the coloring issue with the config option `EDGE_COLORING_GROUP_SIZE= X`, try X=1 and if that fails X=1024,2048,4096,... (with large enough value the coloring will eventually work but the parallelism won't be great).; The algorithm is a bit primitive but it does work for the unstructured Onera M6 grid in the repo.; Indeed the preprocessing is not hybrid parallel yet.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593291846:240,config,config,240,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593291846,1,['config'],['config']
Modifiability,"I was running some tests using a simple geometry but for the refinement seems to be chewing up the geometry. Has anyone who has worked on 3D geometries experienced this or figured out a way to avoid this?. I was using the following settings:; ```; % ------------- MESH ADAPTATION PARAMETER ------------%; %; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= MACH; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 2.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (1000000, 1300000, 1500000); % Number of adaptations performed at each level; PYADAP_SUBITE= (2, 2, 2); ```. ![refine](https://user-images.githubusercontent.com/16842258/104834786-0b94fa80-58e5-11eb-9018-687ffc5aaa9d.png). I noticed a few comments up, there is the `PYADAP_BACK` setting, which sounds like it might solve this, but how should one use this? Should the geometry alone be re-meshed to a high resolution and the whole volume exported as a SU2 block? Or should it be just a surface mesh? (It seems that Pointwise is not able to output only the surface mesh in SU2 format.)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-761751741:269,ADAPT,ADAPTATION,269,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-761751741,11,"['ADAPT', 'adapt']","['ADAPTATION', 'adaptation', 'adaptations']"
Modifiability,"I will try it right now (sorry I got absorbed by 753). If I make it work I volunteer to update the docs with the procedure. Edit: Actually I cannot get even the basic version to work.; I tried a fresh clone of this branch and running ./meson.py build -Dwith-mpi=enabled -Denable-autodiff; The script stops when it tries to build ninja as it cannot find the associated configure.py script.; If I supply a binary for ninja it stops because the submodules are not initialized properly (maybe it's the git version the cluster uses ? 1.8.3.1).; If I init the submodules manually, meson.py stops because the submodule folders are not empty.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/745#issuecomment-519991805:368,config,configure,368,https://su2code.github.io,https://github.com/su2code/SU2/pull/745#issuecomment-519991805,1,['config'],['configure']
Modifiability,"I would always suggest adding the corresponding pkg config path to the `PKG_CONFIG_PATH` variable and use the `dependency` method. This way you get the correct version, additional dependencies, the include path and necessary flags.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/745#issuecomment-520973327:52,config,config,52,https://su2code.github.io,https://github.com/su2code/SU2/pull/745#issuecomment-520973327,2,"['config', 'variab']","['config', 'variable']"
Modifiability,"I would give a cautious yes, cautious because Meson appears quite new, and probably still has some wrinkles to iron out. It‚Äôs definitely worth a try. Dave. From: Tim Albring [mailto:notifications@github.com]; Sent: Thursday, May 23, 2019 1:21 AM; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Dave Taflin <d.taflin@tecplot.com>; Mention <mention@noreply.github.com>; Subject: Re: [su2code/SU2] Meson build system (#685). @economon<https://github.com/economon> Hm ok, that is strange. The one that it builds is the newest on github (v1.9). On linux meson finds ninja if it is in the root directory of the source code (which should be there after bootstrapping), apparently that is not the case on mac. Can you check whether it works when you add the source dir in your path variable? Like @davetaflin<https://github.com/davetaflin> also mentioned for windows, on mac you can also directly generated xcode files (by adding --backend=xcode to the meson call), then ninja is not required. But anyway, I will look for a solution to that problem. @davetaflin<https://github.com/davetaflin> Thanks for your impressions. I would say the documentation is decent. The important things are there, which helped me setting it up. But I guess that we can also ask the developers if we have some problems when adding more complex dependencies (however, we then also should ask ourselves whether we really want to add them in this case). But is the conclusion that you'd also prefer meson over automake ? :D. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/685?email_source=notifications&email_token=AADV2HBRMBCYV43557RMHRTPWZHYPA5CNFSM4HOUXHQKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWBOI7I#issuecomment-495117437>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AADV2HB3AK7BY3OH5LY66R3PWZHYPANCNFSM4HOUXHQA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/685#issuecomment-495299585:773,variab,variable,773,https://su2code.github.io,https://github.com/su2code/SU2/issues/685#issuecomment-495299585,1,['variab'],['variable']
Modifiability,"I would like to reopen the issue regarding the dry run. When having turbomachine settings on, the dry run fails when calculating (preprocessing the turbomachine geometry) with the following error:. - Case Testcases APU_Turbomachinery; - Version 7.5.1 ; - Command: SU2_CFD -d Jones_restart.cfg. ```; ---------------------- Turbomachinery Preprocessing ---------------------; Initialize Turbo Vertex Structure.; Number of span-wise sections in Zone 0: 0.; Number of span-wise sections in Zone 1: 0.; Max number of span-wise sections among all zones: 0.; Initialize solver containers for average and performance quantities.; Compute inflow and outflow average geometric quantities.; Set span-wise sections between zones on Mixing-Plane interface.; Transfer average geometric quantities to zone 0.; [---] *** Process received signal ***; [---] Signal: Segmentation fault (11); [---] Signal code: Address not mapped (1); [---] Failing at address: 0x8; [---] [ 0] /lib/x86_64-linux-gnu/libc.so.6(+0x43090)[0x7ffa2d583090]; [---] [ 1] SU2_CFD(+0x5e6dc4)[0x55c98b9dedc4]; [---] [ 2] SU2_CFD(+0x1ab51e)[0x55c98b5a351e]; [---] [ 3] SU2_CFD(+0x1bc2d3)[0x55c98b5b42d3]; [---] [ 4] SU2_CFD(+0x201b26)[0x55c98b5f9b26]; [---] [ 5] SU2_CFD(+0x151f79)[0x55c98b549f79]; [---] [ 6] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7ffa2d564083]; [---] [ 7] SU2_CFD(+0x171b3e)[0x55c98b569b3e]; [---] *** End of error message ***; Segmentation fault; ```. i guess in the dry run mode, some algorithm are ignored and therefore the segmentation fails. ; I was wondering: . 1) Are there any additional output variables that come with the turbomachinery settings (besides those, available in the folder) . 2) If not, available output for the solver can be achieved by just dry running a case that has the same solver but no turbomachine settings on. Maybe a flag in the dry run option could be implemented on, that deactives the turbomachine settings in the case, to avoid the error message.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/857#issuecomment-1623092119:1594,variab,variables,1594,https://su2code.github.io,https://github.com/su2code/SU2/issues/857#issuecomment-1623092119,1,['variab'],['variables']
Modifiability,"I would love to change the branch, if I really knew how to. Should I create a new Pull Request?; I am in the process of rerunning my isothermal validation cases with the updated code. As soon as I can get a stable config+mesh, I will send them over to you for a regression test!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/71#issuecomment-56638023:214,config,config,214,https://su2code.github.io,https://github.com/su2code/SU2/pull/71#issuecomment-56638023,1,['config'],['config']
Modifiability,I'll adapt one of the existing Testcases to use this feature,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1382#issuecomment-927306822:5,adapt,adapt,5,https://su2code.github.io,https://github.com/su2code/SU2/pull/1382#issuecomment-927306822,1,['adapt'],['adapt']
Modifiability,"I'll do you one better. Here is a mesh and config file for the NREL Phase VI: http://stanford.edu/~economon/dropbox/nrel.tgz. It's been a while since I have run that to convergence, so it may need some tweaking. Give it a try and let me know. It's ~3 million grid nodes, so you'll likely need a few cores...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-258498677:43,config,config,43,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-258498677,1,['config'],['config']
Modifiability,"I'll take a more in-depth look my cases tomorrow (Saturday) to adapt the regression values, and options if necessary. In some cases I saw a massive improvement in convergence speed so I'll decrease the prescribed iterations to reflect that :+1: I hope it is ok to push to this PR directly (won't be that many lines ;)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1585#issuecomment-1085574919:63,adapt,adapt,63,https://su2code.github.io,https://github.com/su2code/SU2/pull/1585#issuecomment-1085574919,1,['adapt'],['adapt']
Modifiability,"I'm currently unable to reproduce the bug(s)... . I tried by apply [diff.txt](https://github.com/su2code/SU2/files/10437018/diff.txt) according to https://github.com/su2code/SU2/issues/1000#issuecomment-633079695 to enable MPICH builds, and then run the following commands in a `ubuntu:22.04` container,; ```bash; apt-get update; apt-get install gcc g++ mpich python3 python3-distutils git pkg-config; ./meson.py build --buildtype=debug -Dwith-mpi=enabled -Denable-tests=true --prefix=$PWD/install; ./ninja -C build install; ```. With the current master 1b08506, or commit 13dae36 before @pcarruscag's fix in #1892, ; several iterations of `install/bin/test_driver [NdFlattener]` consistently print ; ```; Filters: [NdFlattener]; ===============================================================================; All tests passed (45 assertions in 1 test case); ```. With `mpirun -np 2`, I see this output multiple times. Is this correct? In the SU2 test container (`ghcr.io/su2code/su2/test-su2:220614-1237`) with OpenMPI, I get this:; ```; Filters: [NdFlattener]; Filters: [NdFlattener]; ===============================================================================; All tests passed (74 assertions in 1 test case). ===============================================================================; All tests passed (77 assertions in 1 test case); ```. With 13dae36, running the new testcase (with `ITER=11`) like this:; ```bash; root@ed3df1d7769f:/workdir/SU2/TestCases/disc_adj_heat# ../../install/bin/SU2_CFD primal.cfg | grep "" 10|""; ```; consistently outputs ; ```; | 10| -15.998258| -14.557474| -14.812760| -8.956924| -18.202673| -1.040382| 5.7162e+00|; ```; or, with `mpirun -np 2`, the same line multiple times. So maybe I observe a problem with my way of installing mpich on Ubuntu, but no failing unit tests or non-deterministic regression tests. . Are the reported problems restricted to mpich? Could you provide build and run commands with the observed and expected output?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1893#issuecomment-1385673898:394,config,config,394,https://su2code.github.io,https://github.com/su2code/SU2/issues/1893#issuecomment-1385673898,1,['config'],['config']
Modifiability,"I'm doing my tests on a fresh clone from the git.; None of the folders that you menthoned exist after cloning. They are created during; the preconfigure run. The wrong naming does not originate from layers of history in ; the git folder.; And yes, adding no debug flag makes sense.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-600837563:199,layers,layers,199,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-600837563,1,['layers'],['layers']
Modifiability,I'm fine with the consistency with the user input. Is the dry run mode working ok for these variables?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2057#issuecomment-1644953529:92,variab,variables,92,https://su2code.github.io,https://github.com/su2code/SU2/pull/2057#issuecomment-1644953529,1,['variab'],['variables']
Modifiability,"I'm getting to the same conclusion, the easier step might be to set; Multizone_Problem to false during recording steps... Ole Burghardt <notifications@github.com> escreveu no dia ter√ßa, 15/10/2019; √†(s) 12:42:. > @rsanfer <https://github.com/rsanfer> You shouldn't get in touch with the; > new AD routines at all unless you're using CDiscAdjMultizoneDriver.; > So in case; > direct_solver->GetNodes()->GetAdjointSolution_intIndexBased(iPoint,Solution);; > gets executed, that likely means that the if-statement above,; > config->GetMultizone_Problem(), evaluates to true.; > Some weeks ago I added another boolean (Get_MultiphysicsDiscreteAdjoint or; > similar) but I was asked to revert that to the line above.; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/803?email_source=notifications&email_token=AJCOXNYKA2UDXBUN6DTFXVDQOWUBNA5CNFSM4JAY4HS2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBIN6GA#issuecomment-542170904>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN2V3264434E3UH75ITQOWUBNANCNFSM4JAY4HSQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542173510:521,config,config,521,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542173510,1,['config'],['config']
Modifiability,"I'm having an issue compiling on macOS. I get an error after ""./meson.py build"":. ```; Configuring H5pubconf.h using configuration. externals/cgns/hdf5/meson.build:662:0: ERROR: #mesondefine does not contain exactly two tokens: #cmakedefine H5_HAVE_WINDOWS @H5_HAVE_WINDOWS@; ```. I'm not sure where to go from there... since I don't need cgns I workaround this by disabling it...; LMK if you need the full configure error",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1500#issuecomment-1018249584:87,Config,Configuring,87,https://su2code.github.io,https://github.com/su2code/SU2/pull/1500#issuecomment-1018249584,3,"['Config', 'config']","['Configuring', 'configuration', 'configure']"
Modifiability,"I'm ok with it in the solver files, since there we are actually separating the mean flow from the turbulence. Having Euler and N-S solver files would be nice, but then we'd have to separate those classes, which might be confusing since they are so tied together through inheritance.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/375#issuecomment-279838334:270,inherit,inheritance,270,https://su2code.github.io,https://github.com/su2code/SU2/pull/375#issuecomment-279838334,1,['inherit'],['inheritance']
Modifiability,"I'm pinning this issue, to my knowledge this is not being worked on directly but it should be something we keep in mind as we refactor code.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/594#issuecomment-592950547:126,refactor,refactor,126,https://su2code.github.io,https://github.com/su2code/SU2/issues/594#issuecomment-592950547,1,['refactor'],['refactor']
Modifiability,"I'm sorry but I have to say, this is why the code never evolves, you open an issue, get a solution for your problem, then close the issue without there being a pull request that actually fixes the problem for everyone else.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1727#issuecomment-1209715657:56,evolve,evolves,56,https://su2code.github.io,https://github.com/su2code/SU2/issues/1727#issuecomment-1209715657,1,['evolve'],['evolves']
Modifiability,"I'm the one who created that warning message, so I can fill in some details about when and why that error message occurs. For adaptive mesh refinement, SU2 looks at each element and checks how important it would be to divide that element. It then assigns a numeric value (a ""sensor"") to each element representing the relative importance. That sensor is normalized by the max value and is assumed to be positive, so its range should be from 0 to 1. SU2 defines a number of elements that it wants to create (4455 in your case). It then loops through all the elements and looks for elements whose sensors fall above a threshold. That threshold starts at 0.999, close to the max value of 1. If an element has a sensor above that threshold, SU2 marks that cell for division. If it doesn't find enough elements, then it lowers the threshold and continues looking. That process continues all the way down till the threshold hits 0. Sometimes, SU2 can't find enough elements to adapt. The threshold goes all the way to 0, and there's still not enough. Then it prints that warning and continues. That's what you're seeing. The code only mentions triangles, quadrilaterals, and tetrahedrons as a guess to what's wrong. You'll notice it says your grid ""may"" have too high a percentage of other types. If your grid were composed solely of hexahedrons, for example, then it won't find any elements to adapt and print that warning message. There's no check to confirm that this guess is actually correct. In your case, you only have quads and triangles, so the guess is obviously mistaken. As to what is actually going wrong in your case, I would have to dig in a little deeper to find out what's going on. I would guess that your elements aren't being marked as ""divisible,"" but I'm not sure why.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-434924444:126,adapt,adaptive,126,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-434924444,3,['adapt'],"['adapt', 'adaptive']"
Modifiability,"I've been doing some recreational reading on strategies that people have used for vectorization of fluxes but so far I have not thought of a way to reconcile them with the nice encapsulation we have of the numerics. For gradients (at least GG) and limiters on the other hand I do have ideas. By the way is there a branch on the repo for the work you, Francisco, Intel, and others did on this kind of stuff?. Yeah making solution variables members of the solver would avoid a lot of virtual calls but it would make it harder to eventually reach the solution for post processing, or in other areas like Integration/Iteration where the solution is manipulated directly by non-solver classes, we will see...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-513171591:429,variab,variables,429,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-513171591,1,['variab'],['variables']
Modifiability,"I've tracked down the source of the bug, and I'll submit a pull request later today. During the output of the periodic mesh in `SU2_MSH`, `CPeriodicGeometry::SetMeshFile` sorts the nodes into the order normal, receive, send. This can be found in [lines 18798-18819 of Common/src/geometry_structure](https://github.com/su2code/SU2/blob/68991cd1005cf118e1ff21b8952bb366bb299cf3/Common/src/geometry_structure.cpp#L18798). I've copied down the lines here for reference:. ```cpp; /*--- Change the numbering to guarantee that the all the receive; points are at the end of the file ---*/; unsigned long OldnPoint = geometry->GetnPoint();; unsigned long *NewSort = new unsigned long[nPoint];; for (iPoint = 0; iPoint < nPoint; iPoint++) {; NewSort[iPoint] = iPoint;; }; ; unsigned long Index = OldnPoint-1;; for (iMarker = 0; iMarker < nMarker; iMarker++) {; if (bound[iMarker][0]->GetVTK_Type() == VERTEX) {; if (config->GetMarker_All_SendRecv(iMarker) < 0) {; for (iElem_Bound = 0; iElem_Bound < nElem_Bound[iMarker]; iElem_Bound++) {; if (bound[iMarker][iElem_Bound]->GetNode(0) < geometry->GetnPoint()) {; NewSort[bound[iMarker][iElem_Bound]->GetNode(0)] = Index;; NewSort[Index] = bound[iMarker][iElem_Bound]->GetNode(0);; Index--;; }; }; }; }; }; ```. In order to sort the points, a list mapping the old points to the new points (`NewSort`) is created. The problem is that this list is sorted by switching nodes. But it doesn't switch around the _contents_ of the list (i.e. two node numbers from the list). Instead it switched an index from the list and an actual node number pulled from the geometry. This presents two problems:. 1. If any of the receive nodes actually are at the end of the list, they will get switched away from the end of the list.; 2. If any node is switched twice, data is lost. That's because the sorting assumes that the elements being switched have not already been switched. This is how the three points went missing from the cube problem I previously referenced. If my write",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/431#issuecomment-358340153:906,config,config,906,https://su2code.github.io,https://github.com/su2code/SU2/issues/431#issuecomment-358340153,1,['config'],['config']
Modifiability,"ION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:10129,config,configure,10129,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,"If I recall correctly @tobikattman was dealing with a similar issue; (relating local markers to global ones) on his symmetry boundary condition; pull request. I think it would be worth keeping the ADT as clean and; generic as possible. On Mon, 9 Mar 2020, 19:32 Akshay.K.R, <notifications@github.com> wrote:. > Do I understand correctly that the roughness height does not influence the; > wall distance calculation itself?...; >; > @pcarruscag <https://github.com/pcarruscag> , Yes. I can use the markerID; > to find the corresponding roughness as long as the field element and the; > nearest wall marker are on the same rank. I was not sure how to relate the; > markerID on rankID from a different rank to the global config list, hence; > the current implementation. I am open to fixing it with a different; > implementation if I can figure out how to actually do it. The few things I; > tried all ended up causing problems and this was one way to avoid them; > (also my inexperience with MPI did not help).; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/877?email_source=notifications&email_token=AJCOXNZA5Z2CBAXSTXG7BTTRGUY3XA5CNFSM4KVE7ON2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEOIQ3CA#issuecomment-596708744>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN2KX3BY5CXBZFKIMM3RGUY3XANCNFSM4KVE7ONQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-597205550:718,config,config,718,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-597205550,1,['config'],['config']
Modifiability,"If I understand, you're calling `swig` manually? The typical way to set up the python wrapper is to use the typical build process (i.e. configure, make, make install) but to include the flag `--enable-PY_WRAPPER` during the configure step. The build process will automatically call `swig` for you, with the correct arguments. See the docs for more information: https://su2code.github.io/docs/Python-Wrapper-Build/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/551#issuecomment-404888496:136,config,configure,136,https://su2code.github.io,https://github.com/su2code/SU2/issues/551#issuecomment-404888496,2,['config'],['configure']
Modifiability,"If I'm not mistaken the residual of discrete adjoints is based on normalized variation of the adjoint variables (since there is no conservation principle) and this is already akin to the Cauchy criterion.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/627#issuecomment-444813302:102,variab,variables,102,https://su2code.github.io,https://github.com/su2code/SU2/issues/627#issuecomment-444813302,1,['variab'],['variables']
Modifiability,"If modifying the configure is necessary, I can help with that, but I think Tim is suggesting we just use the MPI_VERSION macro that is already defined by the implementations within the C++ (correct me if I am wrong). So, we could check for MPI_VERSION > 3, for instance. However, I think that in some older implementations this may not be defined, in which case we should default to something safe.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/574#issuecomment-419880168:17,config,configure,17,https://su2code.github.io,https://github.com/su2code/SU2/pull/574#issuecomment-419880168,1,['config'],['configure']
Modifiability,"If we go that direction we could use the ENUM options structure that already exits for other settings, allowing the user to set this with a word rather than a number (maybe NO, YES, and APPEND_HISTORY so that current config files would still work the same way, where ""YES"" means the same as ""from initialization file"")",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/99#issuecomment-103964647:217,config,config,217,https://su2code.github.io,https://github.com/su2code/SU2/issues/99#issuecomment-103964647,1,['config'],['config']
Modifiability,"If you are looking for another way to view all of the current config options, you can find them all directly in config_structure.cpp under the routine SetConfig_Options(). We also have a script that should be able to parse this portion of code automatically to give you a clean list, but it might need to be fixed up a little. That script is parse_config.py and can be found in SU2/SU2_PY/.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/277#issuecomment-221687875:62,config,config,62,https://su2code.github.io,https://github.com/su2code/SU2/issues/277#issuecomment-221687875,1,['config'],['config']
Modifiability,"If you are referring to surface heat flux it is one of the default surface outputs.; Maybe there is a bug in v6.2 but in current develop it seems to work fine, you can try using this config: [v7.cfg.zip](https://github.com/su2code/SU2/files/3762621/v7.cfg.zip); Some options changed name since v6.2, you can read about it here: https://su2code.github.io/docs/Guide-to-v7/; I replaced the relevant time domain options but commented out all the output options. On another note I think you should revise your settings, you had a time step of 0 on an unsteady simulation for example. If you have setup questions have a look at the user forum https://www.cfd-online.com/Forums/su2/ and start a topic if there is no related one already. If you have issues with heatflux output with the develop version / v7 we can re-open this issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/805#issuecomment-545454125:183,config,config,183,https://su2code.github.io,https://github.com/su2code/SU2/issues/805#issuecomment-545454125,1,['config'],['config']
Modifiability,"In CDriver::Numerics_Preprocessing(...), around line 2030, begins a (large) switch `switch (config->GetKind_ConvNumScheme_Flow()) {` which is where the numerics classes get instantiated, there is a check there for `NO_CONVECTIVE` which should trigger an error (¬¥SU2_MPI::Error(...)¬¥).; But it appears that the error is not triggered, I would start by checking what value CConfig::GetKind_ConvNumScheme_Flow returns when the option is not present in the config, possibly the default value (set somewhere in CConfig) is not `NO_CONVECTIVE`.; If you look for `CONV_NUM_METHOD_FLOW` in config_structure.cpp you will find the line that tries to read that option. The definition for `NO_CONVECTIVE` and all common enumerators is in option_structure.hpp.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/842#issuecomment-567588529:92,config,config,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/842#issuecomment-567588529,2,['config'],['config']
Modifiability,"In CNSSolver, we do in BC_Isothermal_Wall_Generic:; ```; if (!cht_mode) {; Twall = config->GetIsothermal_Temperature(Marker_Tag) / Temperature_Ref;; }. ```. And we do not check for cht_mode in IncNSSolver. I think this might be the root cause of entering this routine? ; @Cristopher-Morales can you check this?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2281#issuecomment-2111147187:83,config,config,83,https://su2code.github.io,https://github.com/su2code/SU2/pull/2281#issuecomment-2111147187,1,['config'],['config']
Modifiability,"In Xcode, go to the menu item Product -> Scheme -> Edit Scheme... Once the dialogue pops up, there are tabs for ""Arguments"" where you can add the config file name to the command line call, and also ""Options"" where you can set a custom working directory where the config/mesh are located.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/994#issuecomment-631669081:146,config,config,146,https://su2code.github.io,https://github.com/su2code/SU2/issues/994#issuecomment-631669081,2,['config'],['config']
Modifiability,"In `CVolumetricMovement::SetBoundaryDisplacements` the periodic boundaries are left free, and so there is no guarantee that periodicity will be preserved. I don't use the optimization framework, but the default formulation is usually to minimize, i.e. you use a negative weight if you want to maximize, have you tried not setting the weight to -1?. If you want to perturb a single parameter you change one of the values in DV_VALUE. Attach your config...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-626400442:445,config,config,445,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-626400442,1,['config'],['config']
Modifiability,"In order to plausibilize the results in a first step I took the fluid-domain of the streamwise periodic 2D-cht testcase .; 1. h=0 <=> adiabatic wall, i.e. heatflux=0; 2. h>>0 <=~> isothermal wall with Twall = Tinfinity. which the results recover (I also checked that nondimensionalization works correct) :+1: See the archive below for mesh and cfg files. See also below for some images. Note though that the definition of the heat-transfer/convection bc above in the PR-header is not correct. the heatflux computes to:. `q=h (T_infinity - T_wall)` with. `h` the the heat transfer coefficient (to be set in config by the user). `T_infinity` the reference temperature at infinity (to be set in config by the user). `T_wall` the the current local temperature of the specific FV-cell (of course done by the code). [htc-cases.tar.gz](https://github.com/su2code/SU2/files/6893231/htc-cases.tar.gz). The first two are for the isothermal case 2. (nondimensionalized). There is still a ~2.5K gap but I cannot go higher with h then 1e5 as I got bad convergence then. . *EDIT 29.07.2021: * In a comment below @pedro pointed out that one should/could add the Jacobian contribution from that bc. Doing so resolves the previously seen (and here documented) convergence issues with high `h`. Running the case again with h=1e8 converges nicely and results in an averaged surface temperature of exactly 400K üëç . ![image](https://user-images.githubusercontent.com/31306376/127329398-65c4fdb2-2c1c-4657-bf1f-451624de87e0.png); ![image](https://user-images.githubusercontent.com/31306376/127329428-39ec0ef5-2c7b-4df6-8fb5-8ca7778b818d.png). For heatflux=0 and h=0 the results are (as expected) completely identical, the diff between the screen outputs is only that one uses a different bc in that `config file boundary information` tab; ![image](https://user-images.githubusercontent.com/31306376/127329459-ca9c0f26-a69e-498b-ae5a-31dbedf778cf.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1226#issuecomment-888307312:606,config,config,606,https://su2code.github.io,https://github.com/su2code/SU2/pull/1226#issuecomment-888307312,3,['config'],['config']
Modifiability,"In our case, he added the libraries himself and I believe he did some stuff in the configure file in his fork, so I wouldn't be sure whether the `--with-LAPACK-lib` option works as is.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/478#issuecomment-347944491:83,config,configure,83,https://su2code.github.io,https://github.com/su2code/SU2/issues/478#issuecomment-347944491,1,['config'],['configure']
Modifiability,"In part yes. Some old versions do not work.; In part no. I am trying to ensure people use our ""extended meson.py"" by at least checking that the version is the one we expect. This is based on having answered 10's or maybe 100 questions on CFD online and here on GitHub about not being able to build the code because they were using the ""wrong"" meson.py. As I said it has room for improvement both for experts and novices, it seems like either of you would be capable to help, implement it, open a PR, and we'll go from there. The limited time I have for this project is better spent on other things.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1945#issuecomment-1451032341:95,extend,extended,95,https://su2code.github.io,https://github.com/su2code/SU2/issues/1945#issuecomment-1451032341,1,['extend'],['extended']
Modifiability,"In principle yes, but there are a few complications for coupling everything which made me take a step back:; - The way the different solvers treat the linear system solution is not consistent, e.g. SST does not use it directly, which means the Jacobian-vector product would not be consistent.; - Scaling, this uses finite differences to compute a directed derivative, if the variables have very different magnitudes the error will be large.; - Conditioning, the residual Jacobian is very ill-conditioned it is difficult to solve systems with it at high CFL, and if CFL is low there is not much point in having the true Jacobian...; - Speed, each matrix-free product means one evaluation of the convective and viscous residuals, for schemes that are not vectorized yet this costs a lot which means the quasi-Newton approach will be faster even if it takes more iterations. The current implementation seems capable of pushing through some limit cycles that would otherwise just last forever.; But coupling everything is a bigger bite than I can take right now.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1183#issuecomment-774498456:56,coupling,coupling,56,https://su2code.github.io,https://github.com/su2code/SU2/pull/1183#issuecomment-774498456,3,"['coupling', 'variab']","['coupling', 'variables']"
Modifiability,"In reply to:; > You are adding the prefix ""_Abstract"" to the new parent classes. For the time being, as we are applying this only for the turbulence model, would it be possible to add also the key word ""Turb"". And... are you completely sure about using the word ""Abstract"" does it makes sense to use something like for example CAvgGrad_TurbBaseline instead of CAvgGrad_Abstract. What do you think?. I'm not fixed on ""Abstract"". In fact, I wanted to use the suffix ""Template"" instead, and only decided on ""Abstract"" as a less satisfactory second choice. As the code currently stands, I totally agree with you. ""Turb"" would be a better suffix. But I was also thinking about possible changes in the future. I can see these classes (`CAvgGrad_Abstract` and `CUpwSca_Abstract`) being used for the transition model (in `numerics_direct_transition.cpp`) as well. Do you agree? Do you think this refactoring should be applied to the transition model?. I didn't picture the transition model as part of this pull request's scope. I wanted to include the transition model as a separate pull request. If we do want to refactor the transition model to eliminate the duplicate code there, then I don't think ""Turb"" or ""TurbBaseline"" are good suffixes. If you do want the duplicate code in the transition model eliminated, then which would you prefer: ""Baseline"", ""Abstract"", ""Outline"", or ""Scalar""? Or do you have another idea?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/422#issuecomment-320700900:888,refactor,refactoring,888,https://su2code.github.io,https://github.com/su2code/SU2/pull/422#issuecomment-320700900,2,['refactor'],"['refactor', 'refactoring']"
Modifiability,"In terms of file organisation I can think of two strategies, one would be grouping them according to parent class, numerics, solver, etc. this would maybe make navigation easier for people who work on the code daily but it does little more than what the naming convention already does. The other would be to group families of classes and that, I think, would help people who are less familiar with the code, so for example numerics, solvers, variables, etc. used for fluid simulations would be separate from the ones used for other physics. The main re-compilation trigger is probably the config, every file includes it and not all need it. Not much can be done here because most classes do use the config in some way but we could try to minimise how much the dependency spreads by:; - Reviewing what cpp files actually need to include config_structure.hpp; - Including from the cpp and using a forward declaration on the corresponding hpp. Other sensitive ""triggers"" are the header files of classes with many children (solver, numerics, and variable) splitting the header files for these (maybe by family for small classes to avoid an explosion of hpp files) would allow working on a child class without re-compiling all others so often. The clients of CSolver would only include the header for the abstract class so those too would be shielded from changes in children classes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-423970045:442,variab,variables,442,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-423970045,4,"['config', 'variab']","['config', 'variable', 'variables']"
Modifiability,"In terms of general look and feel this is ready for folks to have a look, there are a couple kinks to iron out:; - AD preaccumulation, @talbring is it ok to register the same variable for preaccumulation multiple times?; - Boundary numerics, it may not be possible to use these high efficiency classes for boundary terms, they are not as flexible in terms of what can be used as data sources, the current numerics take any old pointer, but these assume the data always comes from CVariable. They will probably need to complement each other.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1022#issuecomment-651205859:175,variab,variable,175,https://su2code.github.io,https://github.com/su2code/SU2/pull/1022#issuecomment-651205859,2,"['flexible', 'variab']","['flexible', 'variable']"
Modifiability,"In terms of streamlining dev process, `clang-format` would help keep code style consistent and `clang-tidy` - consistent code standard and prevent some common programmer errors. Both need a configuration file each in the root directory and most IDEs have built-in support for them. You might also want to consider `fmt` [library](https://github.com/fmtlib/fmt) for string formatting and output instead of `iostream`s. Using it should improve compile and text output times and make writing/understanding formatted strings much easier compared to the current ""chevron hell"". A subset of `fmt` is also becoming standard in C++20.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552244793:190,config,configuration,190,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552244793,1,['config'],['configuration']
Modifiability,"In the first instance I would just try to run the new and original Testcase with just the original config. And from what I can see you need to do the 2 steps mentioned above (Remove `MATH_PROBLEM` and use `SU2_CFD_AD` directly for the adjoint test + use the `no_restart = True` option for the reg test). If nothing else (apart from `Math_Problem` and `restart_sol`) was changed then this should work without an extra `*_adj.cfg`. . In a next step (which is then more of a cosmetic, optional nature) you could strip the comments and unnecessary options from the cfg",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1571#issuecomment-1076205105:99,config,config,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/1571#issuecomment-1076205105,1,['config'],['config']
Modifiability,"In this current form there is too much dissipation in most situations in my RANS simulations with k-omega-SST (in some situations it appears there is not enough, probably related to a low magnitude of du/dy). I don't have time to try any pure Navier-Stokes cases. The source terms (convection and diffusion) for k and omega should also be implemented I suppose which should be very much analogous so I think I could try to do that. . Otherwise I don't see what could be wrong with the flow source terms. Please let me know if you do. . I have a couple of questions and I would really appreciate if anybody could give any input. 1. What happens when a user specifies several sources? Will only the last one be retained since they are always assigned to the same numerics[iMGlevel][FLOW_SOL][source_first_term]? This matters most for the turbulent source since there is always already another source. 2. Why is the axisymmetric source term for the incompressible variable density version what it is (the publication related to this does not give any derivation)? If it is correct, something about my derivation must be wrong. My derivation : ; - take the equations in cylindrical coordinates (convection term as well as the tau definition, see ""Bird - Transport Processes"" Annex B if needed); - set any d/dtheta and velocity_theta (ignoring swirl) to zero ; - rearrange into two parts, one which resembles the cartesian 2D form (r=y, z=x) and the remaining part is the source term to be added. ; - Is the above derivation wrong?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-721121285:961,variab,variable,961,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-721121285,1,['variab'],['variable']
Modifiability,"Indeed Sigfried, additional turbulence models would only enhance the capabilities of SU2, so they are welcome. In the late 1990s (and when Paul Durbin was still at Stanford), we tried v2-f in a couple of other codes (structured mesh or multi-block structured). I think there was even an implementation that was done for Fluent. In most cases the solution quality was rather good but the stiffness of the solution was significant. It would be interesting to see how the implementation converges in a fully-unstructured code like SU2.; Juan",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/369#issuecomment-281571814:57,enhance,enhance,57,https://su2code.github.io,https://github.com/su2code/SU2/issues/369#issuecomment-281571814,1,['enhance'],['enhance']
Modifiability,"Indeed, at the moment, we are relying on brute force searches. We have discussed using tree searches internally (and potentially have some reusable code available for this), but nothing has been implemented. It looks like pointcloud is released under a BSD license, which is very permissive. Do you have an implementation in SU2 already with this code embedded? It is also fairly straightforward for us to add hooks in the configure process to installed libraries on your system.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-223807001:423,config,configure,423,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-223807001,1,['config'],['configure']
Modifiability,InitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:15477,plugin,plugins,15477,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"Interestingly I recompiled the code with no parallel feature i.e. just ./configure instead of ./configure --enable-mpi and then re-ran the Quick folder case. It did produce the plots. Then I ran the rotating airfoil case and it also produced the plots. Finally I ran my particular case and it also dumped the plot files. However, it is sad as it is taking way too longer to process on a single core as compared to what I can do with multi-cores. I wish some one can attend to this unique problem ASAP. Thanks :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/173#issuecomment-99216018:73,config,configure,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/173#issuecomment-99216018,2,['config'],['configure']
Modifiability,Is it possible the lift coefficient is different because the reference velocity is not the same in the 2 configurarions? Can you output the forces breakdown and see what is the force factor?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1954#issuecomment-1459445037:105,config,configurarions,105,https://su2code.github.io,https://github.com/su2code/SU2/pull/1954#issuecomment-1459445037,1,['config'],['configurarions']
Modifiability,"It changes somehow the convergence, but again, it doesn't always have the same effect. ![ComparisonNewBCsRho_EF0 2](https://github.com/user-attachments/assets/9888d427-31b2-4334-be81-4828578d39a3). ![ComparisonNewBCsTKE_EF0 2](https://github.com/user-attachments/assets/0525d670-1236-4cff-8105-df69f9474f13). My problem right now is that if I run the v2003m config on the finest mesh with 40 cores then it diverges after 125 iterations. If I run with 20 cores then it does not diverge. The number of cells/core is more then 10k thus I don't think that the domain is overly partitioned.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2338344025:358,config,config,358,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2338344025,1,['config'],['config']
Modifiability,"It does not break the multizone adjoint but it does not fix the problem. So now when we register the coordinates we do it index-based because the multizone_problem boolean is set.; What are the implications for when we extract the adjoints? Do we need an index-based GetDerivative?. UPDATE: This solves the segfault issue, but the derivatives are probably wrong.; The residuals for the flow adjoint are not moving, @rsanfer any chance that this due to some output adaptation (I'm guessing not).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542191835:464,adapt,adaptation,464,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542191835,1,['adapt'],['adaptation']
Modifiability,"It is not really a bug, since there is indeed a new recording at ExtIter=1 because the tape at this point holds the recording with respect to the geometry variables, but for the iteration we need it with respect to the flow variables. . But I agree that this output is confusing, so yes, I think the change you made is ok (I can remember that some time back it was already like that, but sometimes for debugging purposes I disable that, so maybe at some point it forgot to revert it)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/329#issuecomment-260129837:155,variab,variables,155,https://su2code.github.io,https://github.com/su2code/SU2/issues/329#issuecomment-260129837,2,['variab'],['variables']
Modifiability,"It is now possible to define more complex functions in a separate file called `functions.su2x`. The functions defined there are available in the inline expressions. You can either give the functions explicit arguments or you can use them without any arguments. All fields are available in the global scope. Which variables are available depends on the context in which the function is used in the code. . functions.su2x:; ```; function dragOverLift(){; l = LIFT;; d = DRAG;; return d/l;; }. function speedOfSound(gamma){; p = PRESSURE;; d = DENSITY;; return sqrt(gamma*p/d);; }; ```. config file:; ```; SCREEN_OUTPUT=(INNER_ITER, WALL_TIME, RMS_DENSITY, {dragOverLift()}); VOLUME_OUTPUT = (COORDINATES, SOLUTION, {speedOfSound(1.4)}); ```. The language is much more flexible and allows also for if-statements, loops, maps and so on. For the output it does not make that much sense, but for initial conditions it might be useful later.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/913#issuecomment-605486038:313,variab,variables,313,https://su2code.github.io,https://github.com/su2code/SU2/pull/913#issuecomment-605486038,3,"['config', 'flexible', 'variab']","['config', 'flexible', 'variables']"
Modifiability,"It looks like all the tests are finally working. However, the `directdiff_euler_py` output variables are written in the wrong order. It looks like this comes from `SU2/eval/gradients.py`:. ```python; # initialize gradients; func_keys = list(su2io.grad_names_map.keys()); func_keys = ['VARIABLE'] + func_keys; ```. My guess is that there was some assumption that dictionary keys have an inherent order. Now, should the test be doing a diff of the text output, or should it really be checking the numerical values?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/424#issuecomment-339951861:91,variab,variables,91,https://su2code.github.io,https://github.com/su2code/SU2/pull/424#issuecomment-339951861,2,"['VARIAB', 'variab']","['VARIABLE', 'variables']"
Modifiability,"It looks like pointwise Mesh Link frame have a support for both mesh link and database (CAD) and it includes both edge data and corners (""Edge2"" for edges and begining and end vertices of each edge data set corresponds to corner data.); https://www.pointwise.com/doc/user-manual/file/export/cae/kestrel.html ; https://github.com/pointwise/MeshLink library also provides some info for mesh to CAD projection. . Therefore adap_back mesh file can be prepared in GAMMA mesh file format including corners, edges, triangles, tets and vertices. But l am not sure about the correctness of su2 files created at each refinement level since corner and edge data will be lost when they are written in su2 format. It may be a good idea to use the GAMMA mesh file format for pyamg mesh adaptation levels and use su2 mesh file format only when it is needed for SU2 runs.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-1673116005:772,adapt,adaptation,772,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-1673116005,1,['adapt'],['adaptation']
Modifiability,It looks like that path ('C:\MINGW_W64\mingw_w64\posix\mingw64\bin\..\lib\gcc\x86_64-w64-mingw32\8.1.0\libC:\MICROSOFT_SDKs\MPI\Lib\x64\msmpi.a') should actually be 2; C:\MINGW_W64\mingw_w64\posix\mingw64\bin\..\lib\gcc\x86_64-w64-mingw32\8.1.0\lib; C:\MICROSOFT_SDKs\MPI\Lib\x64\msmpi.a. Maybe some environment variable is not setup correctly? I'm not at all familiar with building SU2 on Windows unfortunately.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1093#issuecomment-715277100:312,variab,variable,312,https://su2code.github.io,https://github.com/su2code/SU2/issues/1093#issuecomment-715277100,1,['variab'],['variable']
Modifiability,"It looks like the SU2_RUN environment variable was not set as described here<https://su2code.github.io/docs/Build-from-Source/>. Scroll to near the bottom for more details. Best,. Juan. On Apr 2, 2018, at 12:00 AM, Edwin van der Weide <notifications@github.com<mailto:notifications@github.com>> wrote:. From the picture it looks like you use the python script, but that is about all I could see. Could you therefore give some more details? What operating system do you use? How did you compile the code? What version of MPI do you use?. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/521#issuecomment-377870148>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxJgeJsbnZC4ituvS1SoETz-iCeWfks5tkcxxgaJpZM4TDNbe>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/521#issuecomment-377870818:38,variab,variable,38,https://su2code.github.io,https://github.com/su2code/SU2/issues/521#issuecomment-377870818,1,['variab'],['variable']
Modifiability,It passed because the config options were not updated and so no mesh deformation was specified for any of the FSI cases.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/751#issuecomment-518277470:22,config,config,22,https://su2code.github.io,https://github.com/su2code/SU2/pull/751#issuecomment-518277470,1,['config'],['config']
Modifiability,"It's good to hear Paraview has this capability. If SU2 has the structure for such an output maybe this can be extended to Tecplot as well. This will be a good capability. Additionally, I was also thinking of finding a way to plot along gridlines but that is not possible in Tecplot. It's an unstructured mesh so no i, j, k. If the output structure can have some additional information (maybe assign ""dummy"" i, j, k?) that would be a good capability to have as well.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/995#issuecomment-631645199:110,extend,extended,110,https://su2code.github.io,https://github.com/su2code/SU2/issues/995#issuecomment-631645199,1,['extend'],['extended']
Modifiability,"It's possible that you hit a bug, or the adjoint solver diverged, or... who knows, the python scripts are not very friendly at reporting errors and they are also not very flexible.; My most sincere advice is to follow what is done in this tutorial https://su2code.github.io/tutorials/Species_Transport/ it will save you time in the medium term, and at least you will know what the optimization is doing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1666#issuecomment-1160907119:171,flexible,flexible,171,https://su2code.github.io,https://github.com/su2code/SU2/issues/1666#issuecomment-1160907119,1,['flexible'],['flexible']
Modifiability,"It's running.; A small problem is that I have to change `ubuntu:19.04` to `ubuntu:18.04` and change `libopenmpi3` to `libopenmpi-dev openmpi-bin` in the definition, or it will fail.; ```; ubuntu@main-3:~/main_shared_volume/build_singularity_image/builid_image$ sudo singularity build su2_tensorforce.sif su2_tensorforce.def ; INFO: Starting build...; Getting image source signatures; Skipping fetch of repeat blob sha256:1eecd0e4c2cd8c1f628b81c53a487aae6c8d4140248a8617313cd73079be09c4; Skipping fetch of repeat blob sha256:fac13afdf65bf403945c8d6bee654a26940c5527a9913bdf8daa54b69a49f550; Skipping fetch of repeat blob sha256:0c6dd534ddf18642a5af19c09c2d9744d0d1aa93680995d430b5257b6eed079d; Skipping fetch of repeat blob sha256:854703cff8700dce5b5ff70e54f5d612ab701405bc200a5b10a0213ca9025e50; Copying config sha256:993d5f573a24af19dd6006bc3e6e113bd0c709797dc48676f4f0b5ed456470cc; 2.42 KiB / 2.42 KiB [======================================================] 0s; Writing manifest to image destination; Storing signatures; singularity image-build: relocation error: /lib/x86_64-linux-gnu/libnss_files.so.2: symbol __libc_readline_unlocked version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference; FATAL: While performing build: while running engine: exit status 127; ```. My OS is ubuntu 18.04, and OpenMPI version is 2.1.1. I will take a test to see the reason. Once if finishes, I will let you know. Thank you.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-515383478:804,config,config,804,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-515383478,1,['config'],['config']
Modifiability,"It's used to implement #1478, and it was merged into develop.; Are those mesons the same version? Because the meson from Ubuntu 18.04 can't even configure SU2, let alone build.; Our build instructions state that you should use the versions shipped with the code.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1528#issuecomment-1023012372:145,config,configure,145,https://su2code.github.io,https://github.com/su2code/SU2/issues/1528#issuecomment-1023012372,1,['config'],['configure']
Modifiability,Its fine to change the name in the config file,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2006#issuecomment-1501033456:35,config,config,35,https://su2code.github.io,https://github.com/su2code/SU2/pull/2006#issuecomment-1501033456,1,['config'],['config']
Modifiability,"Juan, all,. The adaptive wall function formulation as described in the paper of Medic et al. has two serious issues. First, the convergence stalls after three orders of magnitude or so and second it only works with an upwind discretization of the inviscid fluxes. For some reason JST type of schemes gave rather poor results. In order to have a reliable implementation, both issues need to be addressed. Unfortunately, we never did. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-307294686:16,adapt,adaptive,16,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-307294686,1,['adapt'],['adaptive']
Modifiability,"Just another note, portability is one of the cornerstones of SU2, so please try to work within C++11 boundaries, a lot of C++14 features are syntax sugar on top of C++11 capabilities, you can just adapt the example implementations from the online c++ documentation (no boost :) ).; Also compiler specific flags will be a bit of a deal breaker if they don't have support from the major vendors (gcc, clang, intel, ms).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-669267383:19,portab,portability,19,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-669267383,2,"['adapt', 'portab']","['adapt', 'portability']"
Modifiability,"Just as a hint: To print a list of all possible output fields, use the `-d` flag, i.e. `SU2_CFD -d config.cfg`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-535429251:99,config,config,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-535429251,1,['config'],['config']
Modifiability,"Just as an information: I enabled CodeFactor to check the pull requests for tabs and white-spaces (I added CPPLINT.cfg file in the develop branch). However, this configuration does not work properly for PRs that are already open, they still use the default config. That is the reason why it is complaining about ""Redundant blank line .."" For new PRs it should work properly.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/808#issuecomment-550000663:162,config,configuration,162,https://su2code.github.io,https://github.com/su2code/SU2/pull/808#issuecomment-550000663,2,['config'],"['config', 'configuration']"
Modifiability,"Just delete the configuration folder that you used in the meson call (probably ""build"" if you followed the documentation).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-619964844:16,config,configuration,16,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-619964844,1,['config'],['configuration']
Modifiability,"Just one thought on this. I think it would be nice to run the validation suite for every release, that would force us to keep the configurations up to date, and provide an extra level of quality assurance. Most of the cases will be too expensive for travis but hopefully the computational burden can be spread over the community.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423119881:130,config,configurations,130,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423119881,1,['config'],['configurations']
Modifiability,"Just playing devil's advocate: are there reasons for removing the files other than possible conflicts in the generated Makefile.in during development?. If it works most of the time out of the box, then I think the lesser evil is for a few developers (who know a little about autotools) to deal with these conflicts from time to time rather than force all users to take an additional step to run bootstrap, which could be confusing. I think that having configure-make-install work immediately for most folks is important for the growth of the code (ease of install is critical or people will give up). In some cases it will fail, and bootstrap is there to save the day in those cases. Any other considerations I am forgetting?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/586#issuecomment-427404615:452,config,configure-make-install,452,https://su2code.github.io,https://github.com/su2code/SU2/pull/586#issuecomment-427404615,1,['config'],['configure-make-install']
Modifiability,"Just to be sure, you tried the develop branch right?; Please provide everything necessary to run the case, just the configs is not enough to reproduce the issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2085#issuecomment-1640401833:116,config,configs,116,https://su2code.github.io,https://github.com/su2code/SU2/issues/2085#issuecomment-1640401833,1,['config'],['configs']
Modifiability,"Just to save others the trouble, the python scripts work by automatically creating temporary configs for the different steps, e.g. running SU2_CFD, SU2_CFD_AD, etc. It seems that if there are multiple control points (DV_PARAM) in the user config, the scripts break because they only write one DV_VALUE (and DV_KIND I think).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1289#issuecomment-841797597:93,config,configs,93,https://su2code.github.io,https://github.com/su2code/SU2/issues/1289#issuecomment-841797597,2,['config'],"['config', 'configs']"
Modifiability,"Just want to leave some notes here, open to any thoughts or suggestions. I think it's best to have it work something like this for 1st-order dual timestepping:. TIME_STEP=0.5; RESTART_ITER=0; ----------------------------------------------------------------------; Time_Iter Cur_Time; 0 0.0; 1 0.5; 2 1.0; ----------------------------------------------------------------------; Output of restart_flow_00002.dat associated with t=1.0. Then if I want to restart that simulation but with a different timestep, I would have to make sure `START_TIME` represents the time at which the first iteration in the restart is completed to, NOT the time from the previous restart file:. TIME_STEP=0.25; RESTART_ITER=3; START_TIME=1.25; ----------------------------------------------------------------------; Time_Iter Cur_Time; 3 1.25. I think it may make more sense to just call it `RESTART_TIME` so it is consistent with `RESTART_ITER`. However I don't think that this adaptive timestepping functionality / changing of timesteps for unsteady restarts would work for 2nd-order dual timestepping since information on the previous dt is lost. It wouldn't be too challenging to have a check for this in `CDriver::SetUnsteadyTimestep` and also a warning if `START_TIME` is used on an unsteady restart with it, but it may be getting a bit clunky at that point.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2190#issuecomment-1871406591:956,adapt,adaptive,956,https://su2code.github.io,https://github.com/su2code/SU2/pull/2190#issuecomment-1871406591,1,['adapt'],['adaptive']
Modifiability,"KAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; con",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:9853,config,configure,9853,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,"KER_MONITORING, MARKER_DESIGNING: The main idea is to be able to compute to different integrals over the surfaces: one for simulation and the other for design. e.g. You maybe want to include all the solid surfaces and fan faces, and charging stations in MARKER_MONITORING to compute (Drag-Thrust) but in MArKER DESIGN you are only interested on the wing surface for design.; > ; > DV_MARKER. This is an unfortunately name. At the very beginning the mesh deformation capability was developed only for shape design (DV = Design Variables). We should generalize the names of the grid deformation parameters without using DV. Thanks!; Francisco. On Aug 18, 2015, at 4:31 AM, Heather Kline notifications@github.com wrote:. > Thanks Tom; > I agree that we should make things easy to understand. ; > My thinking was that most users will want to know what parts of the mesh they are moving, but don't necessarily need to know what's happening underneath - if they specify the entire mesh the code just reverts to the more efficient method. But (from the users perspective) it may be just as easy to have a separate specification for scaling the entire mesh.; > ; > In terms of moving it to SU2_MSH; I think it may make sense to include scale/rotate/translate in SU2_MSH, but I think it would be confusing to have two options that do the same thing. I would side with separate option names (this would also eliminate a loop over markers in this pull request); > ; > On this topic, I have sometimes found MARKER_DESIGNING and DV_MARKER to be confusing; on their own they sound very similar, in the description MARKER_DESIGNING is where the objective function is evaluated - but in the code, it's not clear what MARKER_DESIGNING does - the surfaces specified by MARKER_MONITORING are what are actually used to evaluate the objective function value.; > ; > There may be other similar areas where config file options could be clarified or compressed.; > ; > ‚Äî; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-133010923:2340,config,config,2340,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-133010923,2,['config'],['config']
Modifiability,"Krishna,. Thanks for your contributions. I have a couple of questions...; 1. Can the dockerfiles be made more general so that a user does not need to manually change the paths, i.e., avoid having the pathname on your machine hard-coded?; 2. The config generator is nice (it seems to even be working in Safari), but I have one concern: can it be made to automatically track the current available options in the code since these change somewhat frequently? For instance, we have a gui utility that does this in Python by parsing the config_structure.cpp file for current options (SU2_PY/config_gui.py). Can your web-based tool be made to do something similar?. Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/172#issuecomment-126105709:245,config,config,245,https://su2code.github.io,https://github.com/su2code/SU2/pull/172#issuecomment-126105709,1,['config'],['config']
Modifiability,LAPACK is currently not used at all ... we probably need to clean up the configure script at some point.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/478#issuecomment-347913899:73,config,configure,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/478#issuecomment-347913899,1,['config'],['configure']
Modifiability,"Lately I've been playing with Ipopt, which has auto scaling, the documentation (https://coin-or.github.io/Ipopt/OPTIONS.html#OPT_NLP_Scaling) and implementation papers go into decent detail about the strategies they have.; That being said, in the optimizations I've run in the past using L-BFGS-B, I scaled the objectives, constraints, and variables to the [-1, 1] range, and things seemed to work ok, i.e. not excessively long line searches etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616830810:340,variab,variables,340,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616830810,1,['variab'],['variables']
Modifiability,"Let's continue this here @suargi as it should be more visible for everyone. In principle, I like what you suggest, it is clean and concise.; However, I see one big issue with backwards compatibility of the config. KIND_TURB_MODEL is in almost every config (in the world) and we cannot simply break compatibility, something with this much impact would require SU2 v8 :smile: . This is not to say you could not implement what you propose, just that you need to make it compatible with the status quo.; For example:; KIND_TURB_MODEL= SA-NEQ; QCR= YES; (I'm not even sure if that makes sense but anyway); Needs to be converted internally to:; KIND_TURB_MODEL= SA; TURB_MODEL_CORRECTIONS= SA-NEG, SA-QCR2000. And of course, if someone uses the new option TURB_MODEL_CORRECTIONS you can enforce that KIND_TURB_MODEL only contains NONE, or SA, or SST, and that corrections do not appear in the config in any other way.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1364#issuecomment-907388593:206,config,config,206,https://su2code.github.io,https://github.com/su2code/SU2/issues/1364#issuecomment-907388593,6,['config'],['config']
Modifiability,"Look at the warnings in the first couple of lines, e.g.; warning: libopen-rte.so.40, needed by /work/A/openmpi/3.0.0_intel2018u2/lib/libmpi.so, not found; Apparently your MPI implementation relies on these libraries, but it cannot find them. You'd better ask your system administrator, because I don't know the details of the configuration of your machine.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1134#issuecomment-744534832:326,config,configuration,326,https://su2code.github.io,https://github.com/su2code/SU2/issues/1134#issuecomment-744534832,1,['config'],['configuration']
Modifiability,MARKER_ROUGHWALL is fine too. Do you want some help with the MPI to avoid setting data into the config? (I don't want to create too much friction but that is something that should really be avoided).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-652641123:96,config,config,96,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-652641123,1,['config'],['config']
Modifiability,"Made the last of the changes that I wanted too in connection to the comments provided by @economon and @pcarruscag . Just as a review of the things I changed: . 1) Changed the error message; 2) Implemented the UQ methodology for a non-ideal fluid and for both gradient methods (AvgGrad and AvgCorrectedGrad). ; 3) generalized the eigen-decomposition functions for order n matrices. Also made the functions static so that they can be used without the need for an instantiation of the CNumerics class; 4) Improved performance by moving variable declarations to the class constructor for CNumerics; 5) Changed UQ config option names to be more specific. Added an output message for when people use the previous names.; 6) This instigated some changes to the TestCases config files, and to the compute_uncertainty.py script.; 7) Some general code clean up. Let me know if there are any other improvements that I should include.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/570#issuecomment-434551782:534,variab,variable,534,https://su2code.github.io,https://github.com/su2code/SU2/pull/570#issuecomment-434551782,3,"['config', 'variab']","['config', 'variable']"
Modifiability,"May I add my 10 cents: I also encountered this problem, starting from ver 7 if I recall correctly. It happens on a cluster using rdma protocol and NFS, with Redhat Linux (matches the Centos configuration listed above). It doesn't happen on a single machine with several cores using Ubuntu (my LT). Fortunately, it aborts after all writing is complete... Moving to ascii output (RESTART_ASCII, READ_BINARY_RESTART=NO, WRT_BINARY_RESTART=NO had no effect (still aborts).; I think that it is a problem related to the machine setup/system SW. However, it doesn't happen with other codes or previous versions of SU2.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-624457511:190,config,configuration,190,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-624457511,1,['config'],['configuration']
Modifiability,"Maybe CNumerics is not the perfect place, but it is good enough for government work (there are much more misplaced things in there). The ""everything is class"" OO approach applied to the lowest level of abstraction is... well I think it is terrible -- and it has taken me a mighty long time to get rid of it in CPoint and CVariable and to design alternative Numerics -- because:; - Boilerplate: Set this, get that, constructor, destructor;; - Thread safety: Those classes always end up having some mutable state that renders them thread-unsafe;; - Correctness: Many of the classes we have follow this paradigm of ""pass by member variable"" - I like to know what are the inputs and outputs of something just by looking at the signature;; - Slowww: Too much virtual;; - Unnecessary complexity: A case of using a canon to kill the mosquito, good code should be as simple as possible, if a function does the job then that is the level of abstraction we should use. My introduction to C++ was also the ""everything is class"", then one day I read ""From Mathematics to Generic Programming"" and well, I started liking C++ a whole lot more.; The standard template library is incredibly successful, and it ""just"" provides some containers and generic algorithms which are functions. That is what we need in SU2, some decent containers and generic algorithms to operate on them. OO and its patterns are very good high level tools to achieve encapsulation and to isolate code, which are very important for projects with millions of lines of code, but for low level things they are overkill. Sorry for the rant, I guess I have strong feelings about tiny classes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-742629412:628,variab,variable,628,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-742629412,2,['variab'],['variable']
Modifiability,Maybe it makes more sense to have this changes in a separate branch for now ? This way we avoid potential problems for others in case there are some modifications of this config option necessary during the final implementation of the wall functions.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/435#issuecomment-329400246:171,config,config,171,https://su2code.github.io,https://github.com/su2code/SU2/pull/435#issuecomment-329400246,1,['config'],['config']
Modifiability,"Merging this now to keep the PR and the number of problems, that will arise in other code, in bounds. This work will be continued in a future PR. If your code breaks after merging this PR you most likely just have to add an `<ENUM_NAME>::` in front of your enum variable. Thanks @pcarruscag for the idea and the setup in `option_structure.inl`",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1242#issuecomment-815011215:262,variab,variable,262,https://su2code.github.io,https://github.com/su2code/SU2/pull/1242#issuecomment-815011215,1,['variab'],['variable']
Modifiability,MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ;,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14605,plugin,plugins,14605,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/f,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19788,plugin,plugins,19788,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.inl (0) ; - I SU2_CFD/include/numerics_machine_learning_turbulent.hpp (0) ; - I SU2_CFD/include/numerics_structure.hpp (0) ; - I SU2_CFD/include/numerics_structure.inl (0) ; - I SU2_CFD/include/output_structure.hpp (0) ; - I SU2_CFD/include/solver_structure.hpp (0) ; - ,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20379,plugin,plugins,20379,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"Motti; Welcome to the community üôÇ; Did you install with mpi?; Best; Eran. On Wed, Apr 15, 2020 at 17:39 mottiadar <notifications@github.com> wrote:. > Hi Everyone.; >; > I'm new to SU2.; > Installed on my mac (Catalina) the parallel version 7.0.2.; > Also installed MPICH.; >; > I am not using bash but rather tcsh (maybe there is a problem there...); > Added the following lines to .tcshrc:; > setenv SU2_RUN /Applications/SU2/bin; > setenv PYTHONPATH $SU2_RUN; >; > I have tried to run the onera3D tutorial case in parallel and got the; > following message:; > % parallel_computation.py -f inv_ONERAM6.cfg -n 2; > Traceback (most recent call last):; > File ""/Applications/SU2/bin//parallel_computation.py"", line 110, in; > main(); > File ""/Applications/SU2/bin//parallel_computation.py"", line 57, in main; > options.compute ); > File ""/Applications/SU2/bin//parallel_computation.py"", line 88, in; > parallel_computation; > info = SU2.run.CFD(config); > File ""/Applications/SU2/bin/SU2/run/interface.py"", line 111, in CFD; > the_Command = build_command( the_Command, processes ); > File ""/Applications/SU2/bin/SU2/run/interface.py"", line 266, in; > build_command; > raise RuntimeError('could not find an mpi interface'); > RuntimeError: could not find an mpi interface; >; > Ideas to what can I do?; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/938>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADZI3G6VMI65FZZ5IRC7BT3RMXBLRANCNFSM4MIUECNQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/938#issuecomment-614081827:944,config,config,944,https://su2code.github.io,https://github.com/su2code/SU2/issues/938#issuecomment-614081827,1,['config'],['config']
Modifiability,"My fault - I realised that I only specified the CC variable, and not the CXX variable too. For anyone who faces this issue in the future (or myself, if I forget), you'll need to also install both gcc and g++. i.e.:; ```; conda install gcc_linux-64 gxx_linux-64; ```; Then you can run meson with the following:; ```; CC=/home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-gcc CXX=/home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-g++ ./meson.py build -Denable-pywrapper=true --prefix=/home/user/programs/su2/SU2-7.0.8; ```; That solves the first issue above and the compilation which stalled before now completes. Now, I'm hitting another issue, @vdweide - can you take a look again? I'm getting a lot of undefined references; is it conflicting with the supercomputer's openmpi? Thank you for the help.; ```; ninja: Entering directory `build'; [437/448] Linking target SU2_SOL/src/SU2_SOL; FAILED: SU2_SOL/src/SU2_SOL ; /home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-g++ -o SU2_SOL/src/SU2_SOL SU2_SOL/src/SU2_SOL.p/SU2_SOL.cpp.o SU2_CFD/src/libSU2core.a.p/solvers_CSolver.cpp.o SU2_CFD/src/libSU2core.a.p/solvers_CBaselineSolver.cpp.o SU2_CFD/src/libSU2core.a.p/solvers_CBaselineSolver_FEM.cpp.o SU2_CFD/src/libSU2core.a.p/CMarkerProfileReaderFVM.cpp.o SU2_CFD/src/libSU2core.a.p/output_COutput.cpp.o SU2_CFD/src/libSU2core.a.p/output_output_structure_legacy.cpp.o SU2_CFD/src/libSU2core.a.p/output_tools_CWindowingTools.cpp.o SU2_CFD/src/libSU2core.a.p/output_CBaselineOutput.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CParallelDataSorter.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CParallelFileWriter.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CFEMDataSorter.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CSurfaceFEMDataSorter.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CFVMDataSorter.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CSurfaceFVMDataSorter.cpp.o SU2_CFD/src/libSU2core.a.p/output_filewriter_CCSVFileWriter.cpp.o SU2_CFD/src/libSU2core",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1134#issuecomment-744503849:51,variab,variable,51,https://su2code.github.io,https://github.com/su2code/SU2/issues/1134#issuecomment-744503849,2,['variab'],['variable']
Modifiability,"My previous post used a linear solver precision of 1E-6. I ran a couple of test cases at near machine precision (a linear solver tolerance of 1E-14) and higher CFL number (CFL=150), with no CFL adaptation. As suggested, I used ILU+FGMRES. I capped the maximum number of linear solver iterations at 200, and did not raise any errors if the linear solver stopped at 200 iterations with less than 1E-14. The linear solver didn't exceed 200 iterations for the RANS equations, but it did for the Navier-Stokes equations. Once again, there doesn't appear to be a huge difference. For the flat-plate, the results were almost identical:. ![flat_plate_improved](https://user-images.githubusercontent.com/13340225/35233993-595fe2d4-ff65-11e7-9fd6-4b98f30b4d75.png). For the NACA 0012 airfoil, the current `develop` branch of the code outperformed this pull request:. ![naca0012_improved](https://user-images.githubusercontent.com/13340225/35233983-4f79b380-ff65-11e7-81f4-4b65964acecc.png). I believe overall convergence was similar because the Navier-Stokes solver, not the turbulence-solver, is the limiting factor when it comes to precision. The linear solver always converged on a turbulence solution with high precision in under 50 linear solver iterations. Meanwhile, the linear solver sometimes failed to find a Navier-Stokes solution within 1E-14 even after 200 iterations. The only way to make the Navier-Stokes solver converge to 1E-14 was to use small time steps (CFL ~= 1) at difficult points in the overall convergence.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/491#issuecomment-359811658:194,adapt,adaptation,194,https://su2code.github.io,https://github.com/su2code/SU2/pull/491#issuecomment-359811658,1,['adapt'],['adaptation']
Modifiability,"N ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954:",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:9487,config,configure,9487,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"N; ++k); grad(iPoint+k,iVar,iDim) = gradI[iVar][iDim][k];; ...; ```; Similarly when computing the gradient we need to first fetch/transpose it to be able to vectorize subsequent computations; ```c++; FltVec gradI[MAXNVAR][MAXNDIM];. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); gradI[iVar][iDim][k] = grad(iPoint+k,iVar,iDim);; ...; ```; Performance wise this is actually better than the SoA version (4% on gradients, 35% on limiters) as it also benefits from better locality, and it is only slightly (3%) worse than zig zag storage, especially when fusing limiters and gradients as the transposition of the gradient into storage is greatly amortised.; Regarding readability, the 3 nested loops can be moved to methods of the container, but we cannot get rid off the local variable (if we want vectorization that is). **We lose the ability to vectorize primitive variable updates efficiently with AoS** but currently that only accounts for 3% of the runtime and it is a memory bound operation therefore it would not gain much from vectorization anyway. On the subject of de-swizzling data remember I said the writes into CSysMatrix would be a bit weird, that is because each Jacobian contribution will be a ""matrix of short arrays"" that needs to be transformed into a short array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 = T0.widePermuteLo(T2); C1 = T1.widePermuteLo(T3);; C2 = T0.widePermuteHi(T2); C3 = T1.widePermuteHi(T3);. (Array4d(&bjj[0][k])-C0).store(&bjj[0][k]);; (Array4d(&bjj[1][k])-C1).store(&bjj[1][k]);; (Arr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:15136,variab,variable,15136,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['variab'],['variable']
Modifiability,"NT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <stdio.h>; | #ifdef HAVE_SYS_TYPES_H; | # include <sys/types.h>; | #endif; | #ifdef HAVE_SYS_STAT_H; | # include <sys/stat.h>; | #endif; | #ifdef STDC_HEADERS; | # include <stdlib.h>; | # include <stddef.h>; | #else; | # ifdef HAVE_STDLIB_H; | # include <stdlib.h>; | # endif; | #endif; | #ifdef HAVE_STRING_H; | # if !defined STDC_HEADERS && defined HAVE_MEMORY_H; | # include <memory.h>; | # endif; | # include <string.h>; | #endif; | #ifdef HAVE_STRINGS_H; | # include <strings.h>; | #endif; | #ifdef HAVE_INTTYPES_H; | # include <inttypes.h>; | #endif; | #ifdef HAVE_STDINT_H; | # include <stdint.h>; | #endif; | #ifdef HAVE_UNISTD_H; | # include <unistd.h>; | #endif; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking X11/Intrinsic.h presence; configure:5409: gcc -E conftest.c; conftest.c:28:27: error: X11/Intrinsic.h: No such file or directory; configure:5409: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | #define STDC_HEADERS 1; | #define HAVE_SYS_TYPES_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:14157,config,configure,14157,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,"Naturally, I was using preconfig.py; However, while running it complained that it can't find configure: here is the printout; ----------------------; export CXXFLAGS=""-O3 -Wall -std=c++11 "" && ./preconfigure.py --enable-autodiff --enable-mpi --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test ; -------------------------------------------------------------------------; | ___ _ _ ___ | ; | / __| | | |_ ) Release 6.2.0 'Falcon' | ; | \__ \ |_| |/ / | ; | |___/\___//___| Pre-configuration Script | ; | | ; -........ (I removed the header print here) ... Checking the status of submodules; =====================================================================; Initialize submodule externals/codi using git ... ; Submodule 'externals/codi' (https://github.com/scicompkl/CoDiPack) registered for path 'externals/codi'; Cloning into '/home/eran/applications/SU2/git_noMeson/SU2/externals/codi'...; Submodule path 'externals/codi': checked out '501dcf0305df147481630f20ce37c2e624fb351f'; Found correct version of CoDiPack in externals/codi.; Initialize submodule externals/medi using git ... ; Submodule 'externals/medi' (https://github.com/SciCompKL/MeDiPack) registered for path 'externals/medi'; Cloning into '/home/eran/applications/SU2/git_noMeson/SU2/externals/medi'...; Submodule path 'externals/medi': checked out 'edde14f9ac4026b72b1e130f61c0a78e8652afa5'; Found correct version of MeDiPack in externals/medi. Preparing build environment; =====================================================================; Command: ./bootstrap; Logfile written to bootstrap.log. Running configure in folder SU2_AD using CODI; =====================================================================; Command: ../configure --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test --enable-mpi --enable-codi-reverse. There was an error while running command '../configure --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test --enable-mpi ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-598686170:93,config,configure,93,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-598686170,2,['config'],"['configuration', 'configure']"
Modifiability,Need to figure out how to adapt for noneq flows. I haven't been able to find a separate description of how to solve for boundary conditions for noneq flows with Riemann invariants.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1882#issuecomment-1378279716:26,adapt,adapt,26,https://su2code.github.io,https://github.com/su2code/SU2/pull/1882#issuecomment-1378279716,1,['adapt'],['adapt']
Modifiability,"Nice progress @pcarruscag!. I like the concept of your SIMD-friendly class that will take care of the data structure under the hood coupled with a standard type of loop statement (w/ +SIMDLEN). This should make it pretty easy for folks to still modify the kernels without having to worry about the data alignment, and they can reuse the same simple 'for' construct repeatedly. . Another reason to have our own lightweight class for this is that you can avoid dependence on OpenMP for SIMD (although that feature looks to have potential and wasn't available until somewhat recently) as well as the intrinsics. In my experience, the latter is especially bad for portability and readability (part of why we left the CaF work in a separate repo). It starts to become so specialized that compiling and modifying become difficult. W.r.t. OpenMP, another roadblock there a few years ago was making sure it is interoperable with CoDi for the adjoint, but I know this has been worked on and may be available by now. Might keep an open mind about point vs. edge. In some places, we may be able to pump up the compute in our loops by fusing kernels, as previously discussed (and I am guessing you are working on this already with gradients/limiters). Could change the final performance numbers significantly. Lastly, I know you are not there yet, but it is worth considering whether you can reuse anything you are developing in the kernels here for the linear solver routines. At some point, you will successfully reduce the cost of the residual kernels (RHS) to the bandwidth limit, and the majority of the iteration cost will be in the linear solver (it is already about 50% of the iteration cost before optimization, if I recall). Before making final decisions on strategy, you should consider if it will help in any of the linear solver routines too.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530440072:660,portab,portability,660,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530440072,2,['portab'],['portability']
Modifiability,"Nice work already! If you click on 'Details' at the right of the failed Regression and Unit Testing cases you will see why they fail. I think one of the first things to do is go through these error messages ('variable may be used uninitialized', etc) and fix them so the regression tests will run.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1810#issuecomment-1307771069:209,variab,variable,209,https://su2code.github.io,https://github.com/su2code/SU2/pull/1810#issuecomment-1307771069,1,['variab'],['variable']
Modifiability,"Nice work, and thanks for sharing, @jayantmukho. I expect you'll add everything to the V&V repo and eventually the V&V tab once we understand what is happening?. The GG results look great, potentially even better than the previous set of results we had for the DSMA case. I am also surprised to see the behavior of the GG+LSQ.. the finest mesh seems to be especially errant. I have been running the NACA 0012 case, and I also see that the results with pure GG or WLSQ are slightly better there, but not this drastic. I think we still need to dial in the LSQ and make sure we do not have any bugs. Although, the flat plate and bump-in-channel cases were run with LSQ and gave very good results. It could be that too much curvature in the grid, especially near walls (which is known to be a potential problem), is causing these issues for the LSQ accuracy, but I'm surprised it would be that significant. Still looking into this... As for adaptive CFL, sometimes I find that just turning it off for some rans cases and using a fixed 250, 500, or 1000 works best. Does that work for you with these cases with GG or WLSQ, @jayantmukho ?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-553521522:937,adapt,adaptive,937,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-553521522,1,['adapt'],['adaptive']
Modifiability,"Nice! . Since the probe location is taken from the nearest neighbor, should the actual probe location also be written to output?; [edit] the transported variables of all active solvers are written?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1909#issuecomment-1418283041:153,variab,variables,153,https://su2code.github.io,https://github.com/su2code/SU2/pull/1909#issuecomment-1418283041,1,['variab'],['variables']
Modifiability,"No meson option yet, it is a very small one though, the whole system works by detecting `-fopenmp`.; Your second comment is the main argument against moving the parallel section further up.; Allocation routines have the highest risk of making a mess, but even seemingly innocuous things like the small auxiliary arrays we allocate e.g. in CSolver and then use in derived classes are a problem.; I am almost done making the FEA solver completely hybrid parallel and I had to refactor most uses of those arrays. This is also why I took a more functional approach to the new limiter and gradient routines. The way we use CConfig is also not thread safe, we would need to make all ""SetSomethings"" atomic, which would be monumental.; Initially I would have a few parallel sections (it is not too difficult to then move them up if we think that is the way to go) I want to use the FEA solver to get an idea for the relative performance, after seeing the effect of `OMP_WAIT_POLICY` I am optimistic.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-566667503:474,refactor,refactor,474,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-566667503,1,['refactor'],['refactor']
Modifiability,"No need for Intel buddies, I know what's up. Take [this code:](https://gcc.godbolt.org/z/siQamn); ```; class Base {; public:; inline virtual double get() const {return 0.0;}; };. class Derived : public Base {; double val;; public:; Derived(double a) : val(a) {}. inline double get() const final {return val;}; };. double fun1(Base* obj) {; return obj->get();; }. double fun2(Base* obj) {; return static_cast<Derived*>(obj)->get();; }; ```. `get` of derived has been marked `final` so in `fun2` polymorphism should be optimized away. Here is the assembly for gcc 5.4:. ```; fun1(Base*):; mov rax, QWORD PTR [rdi]; jmp [QWORD PTR [rax]]; fun2(Base*):; movsd xmm0, QWORD PTR [rdi+8]; ret; ```; `fun1` needs a jump, `fun2` knows what to return right away. Here is the assembly for icc 17:; ```; fun1(Base*):; mov rax, QWORD PTR [rdi] #16.12; mov rdx, QWORD PTR [rax] #16.12; jmp rdx #16.12; fun2(Base*):; mov rax, QWORD PTR [rdi] #20.34; mov rdx, QWORD PTR [rax] #20.34; jmp rdx #20.34; ```. @vdweide please tell me you did not use icc 19, because it performs this optimization just fine on this simple example. By the way @talbring (since you asked in #753), take away the `final` keyword and nothing gets optimized by the `static_cast`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-523952473:494,polymorphi,polymorphism,494,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-523952473,2,['polymorphi'],['polymorphism']
Modifiability,"No problem at all Francisco. As I said in the mail before, I'll update the; subroutine without using complex variables so that we don't have the issues; with AD and still have a working version of HB. On Fri, Nov 11, 2016 at 10:13 PM, Francisco Palacios <; notifications@github.com> wrote:. > By the way, you are doing a great job with the HB. And, sorry to comment; > out your subroutine. I'm using #ifdef CHECK_AD (line 3670, driver; > structure.cpp). For the time being, I have also commented out the; > regression test.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/su2code/SU2/pull/325#issuecomment-260104666, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AHenIPv43Yc0PSQdW37_iQbnxcUFWwuQks5q9Vj_gaJpZM4KjG5K; > .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/325#issuecomment-260167823:109,variab,variables,109,https://su2code.github.io,https://github.com/su2code/SU2/pull/325#issuecomment-260167823,1,['variab'],['variables']
Modifiability,"No, I think we're all set. I am going to merge this in. We have two issues that we are going to be clearing up very soon: the ONERA M6 adjoint case that is failing somewhat irregularly, and a reorganization of the test cases/config files to make the regression tests more effective (in particular for pull requests). Thanks for fixing the conflicts!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/186#issuecomment-127486074:225,config,config,225,https://su2code.github.io,https://github.com/su2code/SU2/pull/186#issuecomment-127486074,2,['config'],['config']
Modifiability,"No, your assumption of calling `swig` manually is not the cause why I've opened this issue (though, admittedly, ""compile SU2 in `$SU2_HOME` first"" ‚Äì for getting the required libraries done ‚Äì might sound confusing). Trying to be utterly relevant, I only replicated that part of the compilation process (yes, would-be with `--enable-PY_WRAPPER`) where one can explicitly debug the issue (please, have a look at the environment variables substituted by the `configure` script after `#` or post your `objdump -p _pysu2.so`, and/or `nm -u _pysu2.so` as also from the `config.log`/`Makefile` your `CXX`, `pySU2_CC_FLAGS`, `PY_INCLUDE`, `SO_LINK_FLAGS`, `SWIG_SO_REAL`, `SWIG_WRAP_REAL`, and `pySU2_LD_FLAGS` to compare the correct arguments). The docs had been definitely read before opening the issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/551#issuecomment-404905415:425,variab,variables,425,https://su2code.github.io,https://github.com/su2code/SU2/issues/551#issuecomment-404905415,3,"['config', 'variab']","['config', 'configure', 'variables']"
Modifiability,"Not sure if this is still an issue or not, but these constants are configurable via the config, so I'll play the role of the stale bot and close the issue.; If the defaults need changing doing it just before releasing 7.1 would be appropriate.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/301#issuecomment-661426428:67,config,configurable,67,https://su2code.github.io,https://github.com/su2code/SU2/issues/301#issuecomment-661426428,2,['config'],"['config', 'configurable']"
Modifiability,Not without changing the meson.build script to treat blas and lapack separately (which I don't think we should do since a default build-from-source openblas will have both) or specifying a load of environment variables.; In said script you can try modifying `su2_deps += blas_dep` to; ```; su2_deps += blas_dep; su2_deps += dependency('lapack'); ```; Or maybe it will work if you just specify `-Dblas-name=lapack` and blas happens to be included as an automatic dependency of that.; Our documentation does state that:; >Note: The BLAS library needs to provide support for LAPACK functions. I'll update it with this arch linux special case when I get a minute.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632083173:209,variab,variables,209,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632083173,1,['variab'],['variables']
Modifiability,"Now I am happy with the results of the code but the question now is: How to code this up nicely!; This concept of an additional iterated variable next to the solution variable is ""new"" to SU2.; 1. Add the Adjoint pressure-drop variables always to the existing arrays (`Solution`, `External`, `AD_InputIndex`, etc.) which would make for ugly allocation routines and one would have to mess with `nPoint` as one would prob extend the containers by one element. So I consider this direction to be a bit too intrusive as this concept is not needed for most applications anyway.; 2. Add an `Extended` part to all relevant copide methods and variables and keep that general for the different applications",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1033817456:137,variab,variable,137,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1033817456,6,"['Extend', 'extend', 'variab']","['Extended', 'extend', 'variable', 'variables']"
Modifiability,Now you need to set the environment variables to pickup mutation in this script https://github.com/su2code/Docker-Builds/blob/master/test/runTests.sh via PR to the Docker-Builds repo.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1935#issuecomment-1444822483:36,variab,variables,36,https://su2code.github.io,https://github.com/su2code/SU2/pull/1935#issuecomment-1444822483,1,['variab'],['variables']
Modifiability,"No‚Ä¶ I can‚Äôt. I‚Äôm sorry. Great to hear from you. Machine learning is a very valuable research work and I will add it as a feature branch. . Removing code from the main release is a complex task and, as in the past, I have taken tough decisions. Anyway, to maintain a clean code is critical for its growing, it is like trimming a large tree. Basic criteria to maintain forever an implementation on the develop->master branch are: - Clear benefit to the CFD community (more accurate, robust, etc.) - Existing community of users or active developers - Minimal code documentation (at least the options should be in the config file). - Easy to install and use. - The implementation style should be aligned with the SU2 style - Regressions tests. Best,; Francisco. > On Oct 28, 2015, at 11:35 PM, Brendan Tracey notifications@github.com wrote:; > ; > Could you leave in the machine learning section a bit longer?; > ; > ‚Äî; > Reply to this email directly or view it on GitHub https://github.com/su2code/SU2/pull/208#issuecomment-152095697.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/208#issuecomment-152384158:614,config,config,614,https://su2code.github.io,https://github.com/su2code/SU2/pull/208#issuecomment-152384158,2,['config'],['config']
Modifiability,"OK I Solved it by use version 7.2. this problem still exists for version 7.3.1. > @Zcaic nope, I add '\' before`'C:Program Files...` and the environment MSMPI_LIB64 finally like `\C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x64\`; > ; > I paste wrong error message before . the actual error message after I change the envirnment variable is from `xxx\\8.1.0\\libC:\\Program...` to `xxx\\8.1.0\\lib\\C:\\Program...` . just a more `\\`",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1471#issuecomment-1194064916:331,variab,variable,331,https://su2code.github.io,https://github.com/su2code/SU2/issues/1471#issuecomment-1194064916,1,['variab'],['variable']
Modifiability,"OK the failing regression test were due to:; 1. One simple wrong function call in Csolver; 2. Creating new output in existing groups (AERO_COEFF, FLOW_COEFF) which invalidates some regression tests; 3. pyhton code which does not test if some config variable is present or altering the python code such that it invalidates other regression tests; 4. and finally the AVG_TEMP thing above. Now all these alone were somewhat minor things. Feature_flamelet is now up-to-date with develop with all regression test working",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1223#issuecomment-898617272:242,config,config,242,https://su2code.github.io,https://github.com/su2code/SU2/pull/1223#issuecomment-898617272,4,"['config', 'variab']","['config', 'variable']"
Modifiability,"OK, I see that some refactoring happened e.g. to the python wrapper in the meantime. What's the best way to resolve the conflicts? --> If I hit the Resolve conflicts button, there is nothing I can do.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2024#issuecomment-1535961512:20,refactor,refactoring,20,https://su2code.github.io,https://github.com/su2code/SU2/pull/2024#issuecomment-1535961512,1,['refactor'],['refactoring']
Modifiability,"OK, I think I did some progress regarding this issue. After you read this, please [Compare](https://github.com/FoamScience/SU2/compare/master...FoamScience:feature_self_reg_classes) the master and the feature branches. ## Design Idea. - We need to register a child class to a map stored in a factory class; obviously, well before construction time.; - The static variables to the rescue: Associate a static variable to the class and call the registration function when initializing the static variable. done!. ## Work Status. > I'm using ""Inviscid Bump in the Channel"" case for testing. 1. I had to make some changes to the building options; - Upgrading to ""C++14"" allowing me to use make_unique; a personal preference.; - ""--whole-archive"" GCC compiler option is necessary in order to pull and force-initialize all symbols from statically-linked library. This is compiler-specific and may bloat the result binary with unnecessary symbols. But it's the quickest way.; 2. I tried to make changes so the interaction with the code is minimal so I went and took advantage of **CSolverFactory::CreateSubSolver()** to create a pointer to self-registered **CEulerSolver**.; 3. By the way, I thought the solver would be created only once. Little I knew!; 4. Anyway, The registration works as expected now. If you change ""EULER"" in [this line](https://github.com/FoamScience/SU2/blob/feature_self_reg_classes/SU2_CFD/src/solvers/CSolverFactory.cpp#L226) to ""SOMETHINGELSE"", you get:; ```; -------------------- Solver Preprocessing ( Zone 0 ) --------------------; <---------- Solver SOMETHINGELSE was not found.; <---------- Available Solvers: ; EULER ; ``` ; and the program exists.; 5. However, after returning the created solver out of **CSolverFactory::CreateSubSolver()** some strange things happen:; ```; -------------------- Solver Preprocessing ( Zone 0 ) --------------------; <----------- Making CEulerSolver ...; ...... Some other output; Initialize Jacobian structure (Euler). MG level: 0.; <------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-669146957:363,variab,variables,363,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-669146957,3,['variab'],"['variable', 'variables']"
Modifiability,"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2132#issuecomment-1967081745:456,config,configuration-options-for-dependency-updates,456,https://su2code.github.io,https://github.com/su2code/SU2/pull/2132#issuecomment-1967081745,2,['config'],"['config', 'configuration-options-for-dependency-updates']"
Modifiability,"OK, code is now functional and cleaned up. If the approach for binary restart is fixed, I can will extend it to other outputs. I think the most interesting are the outputs that are used for visualization.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1465#issuecomment-997344813:99,extend,extend,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/1465#issuecomment-997344813,1,['extend'],['extend']
Modifiability,"OK, thanks, SU2_MPI::Barrier definitely helps in narrowing down where the problem is. In MergeProfileMarkers, we get the number of profiles:; ```; for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {; if (config->GetMarker_All_KindBC(iMarker) == markerType) {; numberOfProfiles++;; ```. Then downstream, we do:. ```; if (rank == MASTER_NODE) {; ...; profileCoords.resize(numberOfProfiles);; ```. And when it fails, it is because for MASTER, we did not have the condition that ; `config->GetMarker_All_KindBC(iMarker) == markerType`; ,although this condition is true for another rank.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1767#issuecomment-1265030228:175,config,config,175,https://su2code.github.io,https://github.com/su2code/SU2/issues/1767#issuecomment-1265030228,3,['config'],['config']
Modifiability,"OLUTION_FLOW_FILENAME']; ; sys.stdout.write('Initial CFD solution is provided.\n'); ; #--- Check existence of initial mesh, solution; ; required_files = [current_mesh,current_solution]; ; if not all (os.path.exists(fil) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):; err += fil + '\n'; raise RuntimeError , err; ; #--- Start looping; ; # Get mesh dimension; dim = su2amg.get_su2_dim(current_mesh); if ( dim != 2 and dim != 3 ):; raise RuntimeError , ""Wrong dimension number\n""; ; #--- AMG parameters; ; config_amg = dict(); ; config_amg['hgrad'] = float(config['ADAP_HGRAD']); config_amg['hmax'] = float(config['ADAP_HMAX']); config_amg['hmin'] = float(config['ADAP_HMIN']); config_amg['mesh_in'] = 'current.meshb'; config_amg['mesh_out'] = 'current.new.meshb'; config_amg['metric_in'] = ''; config_amg['sol_in'] = 'current_sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7008,config,config,7008,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"ONFIG_PATH=""${PKG_CONFIG_PATH}"":/lib/pkgconfig; slimshady@arch-linux-hp-probook-g3-450: pkgconfig$ export PKG_CONFIG_PATH=""${PKG_CONFIG_PATH}"":/usr/lib/pkgconfig; ```. ```; slimshady@arch-linux-hp-probook-g3-450: SU2_NEW$ meson build -Denable-openblas=true -Dwith-mpi=enabled -Denable-autodiff=true -Denable-directdiff=true -Denable-pywrapper=true --prefix=/home/slimshady/UserPackages/SU2_INSTALL_NEW; The Meson build system; Version: 0.53.2; Source dir: /home/slimshady/UserPackages/SU2_NEW; Build dir: /home/slimshady/UserPackages/SU2_NEW/build; Build type: native build; Project name: SU2; Project version: 7.0.4 ""Blackbird""; C compiler for the host machine: cc (gcc 9.2.1 ""cc (Arch Linux 9.2.1+20200130-2) 9.2.1 20200130""); C linker for the host machine: cc ld.bfd 2.34; C++ compiler for the host machine: c++ (gcc 9.2.1 ""c++ (Arch Linux 9.2.1+20200130-2) 9.2.1 20200130""); C++ linker for the host machine: c++ ld.bfd 2.34; Host machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/usr/bin/python); Found pkg-config: /usr/bin/pkg-config (1.6.3); Dependency python found: YES (pkgconfig); Run-time dependency MPI for c found: YES 4.0.2; Run-time dependency MPI for cpp found: YES 4.0.2; Message: Boost sources found.; Run-time dependency openblas found: YES 0.3.8; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Run-time dependency python3 found: YES 3.8; Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_NEW/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.4 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631986633:1345,config,config,1345,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631986633,2,['config'],['config']
Modifiability,"ON|OFF, disabled when building with Codi; * SU2_BUILD_PY_WRAPPER: ON|OFF, disabled when building with Codi forward; * SU2_BUILD_SOL: ON|OFF, disabled when building with Codi; * Enable modules:; * SU2_ENABLE_CGNS:; * SU2_CGNS_CPPFLAGS: flags to pass when compiling CGNS; * SU2_ENABLE_CODI: no|forward|reverse; * SU2_CODI_CPPFLAGS: flags to pass to SU2 modules when compiling with Codi; * SU2_ENABLE_METIS: ON|OFF; * SU2_METIS_CPPFLAGS: flags to pass when compiling Metis; * SU2_ENABLE_MKL: ON|OFF; * SU2_ENABLE_MPI: ON|OFF; * SU2_ENABLE_MUTATIONPP: ON|OFF; * SU2_ENABLE_PARMETIS: ON|OFF, only available when SU2_ENABLE_MPI is ON; * SU2_PARMETIS_CPPFLAGS: flags to pass when compiling Parmetis; * SU2_ENABLE_TECIO: ON|OFF; * SU2_TECIO_CPPFLAGS: flags to pass when compiling Tecio and TecioMPI; * SU2_TECIOMPI_CPPFLAGS: flags to pass when compiling TecioMPI, requires SU2_ENABLE_MPI. There is an additional variable that is recognized by CMake scripts - DEBUG, turning it ON enables additional STATUS messages, mainly to check that correct include directories, compile definitions and linked libraries were set up correctly. The remaining options like install location and compilers are handled by CMake. Tested this on Ubuntu with CMake 3.15.5 and everything except pySU2ad wrapper compiles. Haven't tested on earlier CMake versions so there might be bugs with them but they should be easy to resolve if any. Related Work. Resolve any issues (bug fix or feature request), note any related PRs, or mention interactions with the work of others, if any. PR Checklist. Put an X by all that apply. You can fill this out after submitting the PR. If you have any questions, don't hesitate to ask! We want to help. These are a guide for you to know what the reviewers will be looking for in your contribution. * I am submitting my contribution to the develop branch.; * My contribution generates no new compiler warnings (try with the '-Wall -Wextra -Wno-unused-parameter -Wno-empty-body' compiler flags).; * My",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:2853,variab,variable,2853,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,2,['variab'],['variable']
Modifiability,"Obviously it is possible to implement this, but it would significantly complicate the config parsing code. Right now the parser is very simple: Go through each line, and get the name and the tokens. As far as I can see there aren't good ways to allow this aside from either having a whitelist of options that can go on multiple lines (thus, only some options are allowed to do so), or to switch up the config file entirely and go to a more standard format like JSON.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/166#issuecomment-103241030:86,config,config,86,https://su2code.github.io,https://github.com/su2code/SU2/issues/166#issuecomment-103241030,4,['config'],['config']
Modifiability,"Of course I'll provide an example of an MLP input file, as well as a python script I wrote that translates an MLP trained through TensorFlow to such an input file. . Very well, I'll move the files from the numerics folder to the common folder and change names accordingly. The models I used so far had between 5 and 50 perceptrons and up to 15 layers. Performance is quite important, as evaluation of MLP's is generally more computationally expensive than for example lookup tables. The larger the MLP architecture, the more costly evaluations get of course. Any improvement to the computation speed will therefore be welcome. In terms of memory, the MLP's don't seem to be an issue so far.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1757#issuecomment-1247834992:344,layers,layers,344,https://su2code.github.io,https://github.com/su2code/SU2/pull/1757#issuecomment-1247834992,1,['layers'],['layers']
Modifiability,"Oh interesting, just to be fully complete here's what made me think that:. 1.I have a well-converged steady-state solution and outputted the minimum DT's for each cell when running with a CFL=1.0, no adaptive. I was unable to restart this for an unsteady one with no changes in BCs without using a DT orders-of-magnitude smaller. 2. When I run /Tutorials/compressible_flow/Turbulent_OneraM6 with `MIN_DELTA_TIME` set as a screen output, I get orders-of-magnitude different final timestep when I run with `REF_DIMENSIONALIZATION= DIMENSIONAL` instead of `FREESTREAM_VEL_EQ_ONE`. . 3. When I run `SU2_CFD -d` on the /Tutorials/compressible_flow/Unsteady_NACA0012 example **using `FREESTREAM_VEL_EQ_ONE`** I see the attached image below, which appears to nondimensionalize using length/velocity. ![Unsteady_NACA0012_SU2CFDd](https://github.com/su2code/SU2/assets/116454159/44a5b0c4-2220-4e98-a911-cf0229f0cb21). 4. I also looked briefly at the code it _appeared_ that the calculations were using nondimensional values; here's what I looked at:. Setting of local timestep:; https://github.com/su2code/SU2/blob/b80e4ce0e4fd05afa136af0990a17dd619cdce42/SU2_CFD/include/solvers/CFVMFlowSolverBase.hpp#L506-L522. Calculation of Lambda's:; https://github.com/su2code/SU2/blob/b80e4ce0e4fd05afa136af0990a17dd619cdce42/SU2_CFD/include/solvers/CFVMFlowSolverBase.hpp#L413-L444. GetProjVel:; https://github.com/su2code/SU2/blob/b80e4ce0e4fd05afa136af0990a17dd619cdce42/SU2_CFD/include/variables/CEulerVariable.hpp#L244-L254. Then at this point admittedly I just assumed that the `MatrixType Primitive` of `CEulerVariable` was indeed nondimensional. I am not familiar with where/when data is stored/updated throughout SU2 as nondimensional v dimensional.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2060#issuecomment-1613895947:200,adapt,adaptive,200,https://su2code.github.io,https://github.com/su2code/SU2/pull/2060#issuecomment-1613895947,2,"['adapt', 'variab']","['adaptive', 'variables']"
Modifiability,"Oh yeah, @pcarruscag, I finally got it to work. I am wondering if we can add `-Dmpi-name` flag like we have a `-Dblas-name` flag because I think mpich is a very common MPI implementation and accommodating for it would be really beneficial, for people and the package both. The lapack thing was discussed in #991 earlier and I forgot I didn't have that change in my commit (it has been months). Thanks a lot!. @fertinaz, you might be able to get it to work with this change in `meson.build` file, like Pedro suggested:; > ```; > mpi_dep = [dependency('mpich', language: 'c', required : get_option('with-mpi')),; > dependency('mpich', language: 'cpp', required : get_option('with-mpi'))]; > ```; I had kept the `-Dcustom-mpi` flag as `false`; Make sure you export all the environment variables:; ```; export CC='/usr/bin/gcc'; export CXX='/usr/bin/g++'; export MPICC='/opt/mpich-3.3.2/bin/mpicc'; export MPICXX='/opt/mpich-3.3.2/bin/mpicxx'; export LD_FLAGS='-L/opt/mpich-3.3.2/lib -lmpi -lxml2 -lbacktrace -lz -lpthread -lrt'; export CXX_FLAGS='-I/opt/mpich-3.3.2/include'; export C_FLAGS='-I/opt/mpich-3.3.2/include'; export PKG_CONFIG_PATH='/opt/mpich-3.3.2/lib/pkgconfig'; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721493822:782,variab,variables,782,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721493822,1,['variab'],['variables']
Modifiability,Oh yes you are right. I was looking in ADJOINT_/config_DOT_AD.cfg. That shows as 0.001 for all design variables.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/977#issuecomment-628744629:102,variab,variables,102,https://su2code.github.io,https://github.com/su2code/SU2/issues/977#issuecomment-628744629,1,['variab'],['variables']
Modifiability,"Ok I'll see what I can do. On Tue, 27 Aug 2019, 16:33 Tim Albring, <notifications@github.com> wrote:. > Ah I just mean adding it to the meson.build file as an option and to; > provide the paths to headers/libraries. I am not in favor of doing it via; > environment variables ...; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/771?email_source=notifications&email_token=AJCOXN5NB6Z4366OSSPH373QGVCNPA5CNFSM4IPIUEI2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5IE6FQ#issuecomment-525356822>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AJCOXNYGAQR35RW43NXLW3DQGVCNPANCNFSM4IPIUEIQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/771#issuecomment-525370429:265,variab,variables,265,https://su2code.github.io,https://github.com/su2code/SU2/pull/771#issuecomment-525370429,1,['variab'],['variables']
Modifiability,"Ok so the other parts of MPI are working fine but file operations are having some issue.; You can remove the OUTPUT_FILES line from the config.; When you run SU2, are you running in a clean directory? Does it segfault in a clean directory? Or only once the files already exist?; I also see you are running on the head node. Have you tried running SU2 on a compute node of the cluster?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2103#issuecomment-1680763161:136,config,config,136,https://su2code.github.io,https://github.com/su2code/SU2/issues/2103#issuecomment-1680763161,1,['config'],['config']
Modifiability,"Ok, I see - So where do you think should my new functions go?. Now that a bunch of function names changed, I am sure I need to refactor my side as well, so I can't tell if this proposal is still working.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2024#issuecomment-1536366268:127,refactor,refactor,127,https://su2code.github.io,https://github.com/su2code/SU2/pull/2024#issuecomment-1536366268,1,['refactor'],['refactor']
Modifiability,"Ok, I went back to try varying the `.cfg` settings on the simple v7.0.3 repo `TestCases/euler/naca0012` case and managed to get `mesh_adaptation_amg.py` to run successfully. It seems that one bit of advice [from here](https://www.cfd-online.com/Forums/su2/214613-grid-adaptation-options.html) is no longer true, i.e. one needs to set:; ```; % Write binary restart files (YES, NO); WRT_BINARY_RESTART= YES; %; % Read binary restart files (YES, NO); READ_BINARY_RESTART= YES; ```; in order for the amg mesh adaptation to function. However, for some reason, I can't get it working for my actual mesh of interest. When using the same settings, I get a different ParMETIS error (from the `adap/ini/log.out`):; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 4929018 grid points before partitioning.; 7406196 volume elements before partitioning.; 3 surface markers.; 18040 boundary elements in index 0 (Marker = BODY).; 50968 boundary elements in index 1 (Marker = FARFIELD).; 284054 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency structure.; [ 1] ***ASSERTION failed on line 207 of file ../externals/parmetis/libparmetis/comm.c:sendind[i] >= firstvtx && sendind[i] < lastvtx; [ 1] 361316 123226 246452; [1609857970.901920] [super:1060888:0] sock.c:344 UCX ERROR recv(fd=62) failed: Connection reset by peer; ```. The only difference that I can think of is that my flow is fully supersonic and my mesh is an unstructured core with a structured collar - might this be causing the issue? Kind regards.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754686447:268,adapt,adaptation-options,268,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754686447,4,['adapt'],"['adaptation', 'adaptation-options']"
Modifiability,"Ok, I will prepare a test case. I will take the Mach=0.1 case from the tutorial and change it slightly. Now the coupling between fluid and structure occurs after 100 steps, I will just couple them immediately. ; The only issue with #902 I see at the moment is with the file fsi_computation.py. The others are in separate folders so they should not create conflicts...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-746408443:112,coupling,coupling,112,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-746408443,1,['coupling'],['coupling']
Modifiability,"Ok, SIMD update, with #753, #959, and #966 we now have a unified storage type for the data we need in CNumerics. This means that we (I) only need to implement ""SIMD accessor methods"" (i.e. that return a SIMD type instead of a su2double) for one class (C2DContainer and co.). I think to do SIMD right we need a new way of going about CNumerics, these are my design requirements for ""CNewNumerics"":; - Thread-safe (consequently const-correct), a single object must be safe to use by multiple threads.; - Minimal indirection, the polymorphic overhead will be reduced to a single call (ComputeResidual), all auxiliary functions (like the ones that live in CNumerics) will be forcefully inlined, no useless copies of data (no more numerics->SetBlaBla).; - Compile time nDim/nVar, which will: a) avoid heap allocations; b) allow effective loop-unrolling (also during the writes to CSysMatrix).; - Allow low-overhead composition, e.g. have one CRoe for Euler and one CRoeVisc for NS to fuse convective and viscous residuals (without copy pasting code).; - A lot more readable, those cryptic V_i[iDim+1] need to go (somehow...). To achieve all this, the ""CNewNumerics"" will work as a template (obvs) decorator/visitor.; A visitor in the sense that the solver calls the numerics and gives it (read-only) access to all its data, the object pulls whatever it needs directly and there is no need for numerics->SetBlaBla.; A template decorator in the sense that the class can be augmented simply by inheriting from another, along the lines of `class CRoeVisc : public CRoe, public CVisc` (to allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not por",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:527,polymorphi,polymorphic,527,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['polymorphi'],['polymorphic']
Modifiability,"Ok, here is an example. A steady simulation is used and the relevant files are attached below. The geometry is A-airfoil case with AoA = 13.3 deg, and the spanwise boundaries are set to MARKER_SYM. Two cases shown below use the same configuration and mesh file, the only difference comes from the submitted code and the original code. For the distribution on the sym bc, the spanwise speed keeps zero.; ![5](https://github.com/su2code/SU2/assets/58663453/35d550d2-8ff9-45ed-aee0-c222551b6245). For the history of drag and lift (CSF here for the spanwise direction is z-direction), submitted code shows little differences after convergence.; ![1](https://github.com/su2code/SU2/assets/58663453/302f79f6-c775-460a-92b3-15ea235544c5); ![2](https://github.com/su2code/SU2/assets/58663453/a820b221-40ad-489d-b977-9d447a9b0e46). For the history of the residual, increasing instabilities is not observed.; ![3](https://github.com/su2code/SU2/assets/58663453/03a285d9-5a2c-4332-81c5-cb9340efb2e3); ![4](https://github.com/su2code/SU2/assets/58663453/8459916e-796f-45b4-ad18-c42911da4f88). Relevant files:; [cfd.txt](https://github.com/su2code/SU2/files/13448935/cfd.txt); [history-original.txt](https://github.com/su2code/SU2/files/13448940/history-original.txt); [history-submitted.txt](https://github.com/su2code/SU2/files/13448942/history-submitted.txt)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2174#issuecomment-1824200775:233,config,configuration,233,https://su2code.github.io,https://github.com/su2code/SU2/pull/2174#issuecomment-1824200775,1,['config'],['configuration']
Modifiability,"Ok. I don't think [these](https://github.com/su2code/SU2/pull/774/commits/e632133eded5edab7ff04f0979334c25c0f44ff8) changes are over-complicated. But I'm fine with changing the index saving procedure everywhere. There'd be just some work to do (we would have to adapt everything for the FEA elasticity solvers and all the variables they need as well)... so it's also a question of time, testing and so on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542206395:262,adapt,adapt,262,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542206395,2,"['adapt', 'variab']","['adapt', 'variables']"
Modifiability,"Ok. I will do it as soon as possible. . With kind regards,. Jairo. > On Jan 30, 2019, at 14:13, Thomas D. Economon <notifications@github.com> wrote:; > ; > @economon approved this pull request.; > ; > LGMT. Thanks @jaspe55 <https://github.com/jaspe55>; > Just one request: I have adjusted the number of iterations for the regression test and updated the residual values in the python script. I also had to move around some files. Can you please run the case (to convergence) and verify that the results are what you expect? Note that the config file and target Cp are in the code repository and the mesh and solution file are in the testcases repository. If everything looks ok, then this is ready to be merged.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/600#pullrequestreview-198200089>, or mute the thread <https://github.com/notifications/unsubscribe-auth/Ac180hqzVnSUPCnSBkQrTPfIv0kIltygks5vIdKrgaJpZM4X34F2>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/600#issuecomment-459029239:538,config,config,538,https://su2code.github.io,https://github.com/su2code/SU2/pull/600#issuecomment-459029239,1,['config'],['config']
Modifiability,"Ok. My advice would be to not use the `SUPERSONIC_SHOCK` option, but other developers may have further recommendations there. It doesn't seem to be set up for general cases. Are you having any further issues with the mesh adaptation? For example, is the `GRAD_FLOW` option working as you expected? Has the issue been resolved?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-444955431:222,adapt,adaptation,222,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-444955431,1,['adapt'],['adaptation']
Modifiability,Okay @pcarruscag I believe ; I reverted all the annoying format changes. Can you please review the code when you get the chance?. BTW I am aware about the boilerplate code in `python_wrapper_structure.cpp` and I plan to adapt `CPyWrapperMatrixView`. Would appreciate some feedback anyways,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1750#issuecomment-1779150012:220,adapt,adapt,220,https://su2code.github.io,https://github.com/su2code/SU2/pull/1750#issuecomment-1779150012,2,['adapt'],['adapt']
Modifiability,"Okay so I'm new at all this and I'm just kinda figureing it out as I go on my own...¬† I've been at it for about 6 months and I've taught myself with the help of just reading how to do it now I'm in school but whenever I do any of those commands it doesn't work like the Dcustom and all those it's just not working¬†. Sent from Yahoo Mail on Android ; ; On Tue, Apr 27, 2021 at 10:13 AM, ***@***.***> wrote: . Hi Pedro,. Thank you for your reply. Apologies for my own late answer as well. I am trying to install now the SU2 6.2.0 Falcon. It is the one I particularly need for a program that calls this program for Aeroelastic analyses. I turned from Windows to Linux Manjaro as this program apparently only works with MSL on Windows.; My C++ compiler is not doing the job when I use the command ./configure for the parallel build. I have both cmake and gcc installed as compilers, but this is what happens:. [cid:ae2afe41-51cb-48da-a755-9fb054ea8537]. Which other C++ compilers can I use instead?. Thank you!. Best regards,. Avi; ________________________________; From: Pedro Gomes ***@***.***>; Sent: Tuesday, March 23, 2021 1:40 AM; To: su2code/SU2 ***@***.***>; Cc: Avish Suresh Bhambhani Wadhwani ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] Microsoft MPI not read, WIndows 10 (#1233). Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it. ‚Äî; You are receiving this because you authored the thread.; ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-827721160:795,config,configure,795,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-827721160,1,['config'],['configure']
Modifiability,Okay thank you Pedro (I meant the order in the code not in the config file). So I would just assign any k-omega axi source to numerics[iMGlevel][TURB_SOL][source_second_term]. See you tomorrow for the meeting,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-721182556:63,config,config,63,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-721182556,1,['config'],['config']
Modifiability,"Okay.; We have a little ownmade script here which sets some standard parameters like standard runtime, standard memory use mpi Version fpr the HPC.; As I can see(with my little knowledge about that script) it is doing the same like mpirun -n2 SU2_CFG config.cfg. And mostly I using parallel with mpi I get .vtks automaticly. It seems, that bigger files (~140mb mesh, 650mb flow.vtk) tends to not generating the automatic .vtk?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/268#issuecomment-215006869:251,config,config,251,https://su2code.github.io,https://github.com/su2code/SU2/issues/268#issuecomment-215006869,1,['config'],['config']
Modifiability,"On the subject of virtual functions I would like to put another idea forward.; After moving things around in #725 I noticed that we have tons of `inline virtual` methods.; The keyword `inline` has two meanings to the compiler:; - ""Dear merciful compiler please copy paste the body of this function and then do all your wonderful optimizations, if that pleases your excellency.""; - ""Dear forgiving compiler, you will find this method defined in multiple units, please don't be mad"" (i.e. ignore the one-definition-rule). `virtual` means determine what version of the method to call at runtime. This is not compatible with the first (and often the intended one) meaning of inline, therefore the compiler will in general not inline those methods.; They will only be inlined if they are being called on a pointer to the derived class that does not declare the method to be virtual anymore. CSolver knows what variables it creates and so in hot areas of the code it could do a static downcast to allow inlining (e.g. `static_cast<CEulerVariable*>(node[iNode])->DoStuff()`).; Where is this important? For example when computing gradients, where simple additions and subtractions are hidden behind virtual functions.; If you are worried about maintenance each solver can typedef its most safe downcast level or better yet (or just more modern), methods that could benefit from this can be templated for the type of downcast.; Those in favour say Yea those against say Nay.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-509273008:905,variab,variables,905,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-509273008,2,['variab'],['variables']
Modifiability,"One comment I have-- @pcarruscag mentioned that it's somewhat difficult to break apart the ""config"" [blob](https://sourcemaking.com/antipatterns/the-blob). I have a proposal that could work to break apart things. Some config options, like those related to grid movement or timestepping or nondimensionalization, are used throughout a lot of the code. It will be difficult to make headway there. But some config settings have a very localized impact in the code. To find examples, just look for common prefixes in the `config_template.cfg`. There's `DV_*`, `FFD_*`, `UQ_*`, `INC_*`, etc. We could break apart the config class into a group of classes. Each class would derive from the base config class and share its features. Any function that needs config settings could then pull in two config objects, one with global settings (like nondimensionalization) and one with problem-specific settings (like incompressible flow settings). That way, changing the problem-specific settings, such as the incompressible flow options, won't trigger a complete rebuild of the code. It would only trigger a rebuild of the code that uses the incompressible flow options. That's my idea. Aside from that idea, I agree with the changes as proposed by @economon.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-500955452:92,config,config,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-500955452,7,['config'],['config']
Modifiability,"One more thing: should I change the naming scheme for the model version of SST? As it is now, the naming scheme is V+model version but the NASA TMR site says to use the V only for the vorticity form of the production term. Should we remove the V then, or maybe set it as lower case? This will break all of the configs, no problem for me to go through them all and change it though.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2407067875:310,config,configs,310,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2407067875,1,['config'],['configs']
Modifiability,"Only the testcases `channel_2D`, `channel_3D` fail. Both use sliding mesh interfaces, but there are also other sliding mesh testcases that do not fail. The residuals are still very close and also the flow fields look similar. I thus adapted the stored residuals in 9d8f194. Let me know if you would like to investigate the changed residuals further.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1346#issuecomment-895007670:233,adapt,adapted,233,https://su2code.github.io,https://github.com/su2code/SU2/pull/1346#issuecomment-895007670,1,['adapt'],['adapted']
Modifiability,"Ooh, that sounds like exactly what I'm looking for. Do I set those as environment variables or in a different manner?. I'll have to check the hybrid again to see how it does. Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1307#issuecomment-867067131:82,variab,variables,82,https://su2code.github.io,https://github.com/su2code/SU2/issues/1307#issuecomment-867067131,1,['variab'],['variables']
Modifiability,"Our proposal does not relate to the SST's good behavior (iThe SST model is not sensitive to Omega freestream value: it is because of the addition of the cross-diffusion term, which was absent in the original Wilcox model). The current implicit treatment in the SU2 may generate a negative solution that is not physical. A low limit value is available in the code to avoid a negative solution. This means the solution is clipped to this value if the solution reaches a lower value. There is no single absolute low-limit value that is suitable, for example, issues with dimension vs. non-dimension form. Our proposal circumvents this problem. The current situation in the code is not robust. We suffer from many robustness issues, especially with the SST2003 model. However, using our proposal significantly enhanced the solver's robustness. The current situation is like a ""bug"" because it may interfere with the solution. We understand that our idea requires a lot of effort and that it would make the code unreproducible. Therefore, we would like to suggest the following: Give the user an option to control these low-limit values. The default values will be according to the hard-coded values. We also strongly recommend adding additional user low-limit values control according to our proposal. The user will be able to decide which option he prefers. Our end goal is to design the implicit treatment so that these low-limit controls will be almost redundant. Based on several publications I've made during the last 15-20 years, my code enjoys this feature.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2323#issuecomment-2231452852:806,enhance,enhanced,806,https://su2code.github.io,https://github.com/su2code/SU2/pull/2323#issuecomment-2231452852,1,['enhance'],['enhanced']
Modifiability,"Our proposed changes implicitly include 2 modifications to current code: ; The first is the modification of the lower limit such that it should be relative to a reference value. The rational for this is that a single given hard coded number cannot be correct for possible all flow regimes. Moreover, even running the same case in dimensional and non dimensional form, will lead to different behaviour of the lower limit. The proposed solution therefore is defining a limit relative to reference values, namely:; k_low_limit = C_k * K_infinity; w_low_limit = C_w * W_infinity. This change will inevitably cause changes to current behaviour (as can be seen in test case results), but we believe it is more correct. . The second, is giving the user control over C_k and C_w and the choice of the default value. As mentioned above, the behaviour of the proposed default value will inevitably be different than the existing one. Even if we choose default values that will lead to similar values to those existing for a certain case this would not be true for other cases. Therefore no default value can be given to reconstruct the current solver behaviour. ; The values suggested as default are not the most correct per se, but rather robust suggestions based on experience and are open to discussion. Optimal default values of different cases, say external and internal flows are expected to be different, this is why we felt it important to allow user control of the lower limit. . We emphasise that the solution used in SU2 of applying a lower limit to turbulence variables in order keep the solution positive is somewhat artificial, and future features we are working on should minimize the need for such a treatment, however, as long as this is the solution implemented, we believe that the proposed change is more correct, leading to more robust behaviour.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2323#issuecomment-2230214740:1562,variab,variables,1562,https://su2code.github.io,https://github.com/su2code/SU2/pull/2323#issuecomment-2230214740,1,['variab'],['variables']
Modifiability,"Overall some solid looking code @jayantmukho, thanks!; I have a few suggestions:; 1 - Some of the config variables have fairly broad names, ""permute"" for example, I think prefixing them with UQ would more clearly identify what they are meant for.; 2 - There are a lot of dynamic allocations of static size, if the current implementation is compatible with 2 and 3 dimensions I would allocate those variables statically, makes for cleaner and faster code (stack allocations are much faster and subsequent loops would likely be unrolled by the compiler).; 3 - It looks like some of the new methods in CNumerics are for generic ""Eigenvalue-stuff"" for re-usability I suggest moving those methods to a helper class, even if for now that class becomes just a collection of static methods. In the implementation of those methods the dimension of the inputs is being assumed, if you do move them please make them generic.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/570#issuecomment-427468893:98,config,config,98,https://su2code.github.io,https://github.com/su2code/SU2/pull/570#issuecomment-427468893,6,"['config', 'variab']","['config', 'variables']"
Modifiability,"PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; SU2_CFD(config_cfd); ; except:; sys.stdout = sav_stdout; sys.stderr = sav_stderr; raise; ; sys.stdout = sav_stdout; sys.stderr = sav_stderr; ; else:; required_options=['SOLUTION_FLOW_FILENAME']; if not all (opt in config for ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:4701,config,config,4701,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"Parallel preaccumulations must not share any variables. In particular, they must not have any common inputs and outputs. I suspect (judging from the code) that the preaccumulations treated in 781092a3533caf36589426e99293c2b20d332726 violate this pattern, and that this is the reason why excluding them makes several hybrid parallel AD tests pass. Other preaccumulations might be affected as well. The correctness of preaccumulations inside numerics objects, for example, depends on the values of pointers like `V_i`, `V_j`. Other preaccumulations might look wrong but are ok because common variables are prevented by color loops.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1294#issuecomment-871002042:45,variab,variables,45,https://su2code.github.io,https://github.com/su2code/SU2/pull/1294#issuecomment-871002042,2,['variab'],['variables']
Modifiability,"Part of the problem was that I was considering the TKE in the computation of the boundary conditions but not inside the domain since I was using the modified version of the SST model. With this, the vertical velocity at the inlet is in the range of 10^-12. The problem on the bottom symmetry still remains though. I am trying on the coarser mesh and I et FGMRES divergence after more than 1.3k iterations. I don't know if I should also change all the boundary conditions code to take the TKE from the solver rather than from the config. I guess that it should be done.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2353506266:529,config,config,529,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2353506266,1,['config'],['config']
Modifiability,"Part of the reason I never gave much attention to the current optimization scripts, and instead developed my own, is that I need different settings for primal and adjoint and the optimization scripts cannot handle that. I don't think we should have different config settings for primal and adjoint. I'm certain the adjoint solver considers the convergence criteria, you probably did something wrong in your setup (I'm guessing the fields you are monitoring do not exist for the adjoint, hence it has nothing to use as convergence field) but since you did not attach your config file, all I can tell you is to read the documentation https://su2code.github.io/docs_v7/Solver-Setup/. > ... I am downgrading ... Yes you are. Honestly I envy this kind of pragmatism, it is probably why SU2 has tens or hundreds of ""feature branches"" lagging behind master by several versions. I feel like ranting but I'll be pragmatic for once.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1024#issuecomment-645255976:259,config,config,259,https://su2code.github.io,https://github.com/su2code/SU2/issues/1024#issuecomment-645255976,2,['config'],['config']
Modifiability,"Passing arrays by pointer -> don't https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-use-ptr; Variables declared at the top of the function -> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce; Using member variables to ""pass data"" to other methods -> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Ri-explicit. ""What are important implementation aspects?"" You ask -> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#per7-design-to-enable-optimization",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1218#issuecomment-789893628:108,Variab,Variables,108,https://su2code.github.io,https://github.com/su2code/SU2/issues/1218#issuecomment-789893628,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"Pedro, ; I cherry-picked your your commit [c2018c8](https://github.com/su2code/SU2/pull/1595/commits/c2018c836791944383c13d32dcfec903d5657072) and tested it with my configuration. Looks good so far, I haven't see any issues / problems on my side. Thank you very much!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1595#issuecomment-1094677121:165,config,configuration,165,https://su2code.github.io,https://github.com/su2code/SU2/pull/1595#issuecomment-1094677121,1,['config'],['configuration']
Modifiability,"Pete, Tim,. I have had a long standing interest in getting this working and would be happy to help. The (partial) implementation that is there is already 3-4 years old, so it will have to be updated, but we can discuss some of the details of the implementation and how it can be done both more efficiently and for both compressible formulations and adaptive wall functions. We can start a thread separately (jjalonso@stanford.edu<mailto:jjalonso@stanford.edu>) and perhaps have a telecon to kick things off. My availability for this improves after the next 2 weeks. Best,. Juan. On Jun 7, 2017, at 1:19 PM, Tim Albring <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi Pete,. we appreciate your help on that. I just updated the branch feature_Wall_Functions<https://github.com/su2code/SU2/tree/feature_Wall_Functions> to be up-to-date with develop. The main routines dealing with the wall functions are in solver_direct_mean.cpp<https://github.com/su2code/SU2/blob/feature_Wall_Functions/SU2_CFD/src/solver_direct_mean.cpp#L16612> and solver_direct_turbulent.cpp<https://github.com/su2code/SU2/blob/feature_Wall_Functions/SU2_CFD/src/solver_direct_turbulent.cpp#L2569>. Maybe @economon<https://github.com/economon> can tell you what exactly is missing there. Tim. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/399#issuecomment-306912607>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxOvHCOSUFKDoizjyvrHbgyXgZ-vVks5sBwW8gaJpZM4NvG6w>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-306941656:349,adapt,adaptive,349,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-306941656,1,['adapt'],['adaptive']
Modifiability,"Please do run tutorial cases for 3D Euler and NS(Inviscid and Turbulent ONERAM6) first before running your own implementation. Tutorial pages are self-explanatory so I expect that you can easily grab which boundary markers to use in your implementation. ; As I said in previous comment, boundary conditions in config file and mesh file do match at least inviscid case.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/523#issuecomment-381747291:310,config,config,310,https://su2code.github.io,https://github.com/su2code/SU2/issues/523#issuecomment-381747291,1,['config'],['config']
Modifiability,"Please see the end of the SU2_PY/SU2/io/config.py file - this is where defaults for python are currently defined. If you see any additional ones that are needed for the python scripts to operate, or any that have the incorrect default values, please do update those. ; I would recommend against adding an exhaustive list of defaults, and only adding those that are actually used by the python scripts. The reason is that the default values are not automatically synced between the c++ and python codes, and so this would add unneeded overhead for developers and room for future errors.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-377072314:40,config,config,40,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-377072314,1,['config'],['config']
Modifiability,"Please use meson and ninja to build the code as documented here: https://su2code.github.io/docs_v7/Build-SU2-Linux-MacOS/. This is what I do:; ```; export BUILD=build; export CXXFLAGS=""-funroll-loops -march=native -mtune=native"". ./meson.py $BUILD -Dcustom-mpi=true -Dwith-omp=true -Denable-mixedprec=true -Denable-autodiff=true -Denable-tecio=false -Denable-mkl=true -Dmkl_root=$MKLROOT --prefix=$PWD/$BUILD --optimization=2 --warnlevel=2; ./ninja -C $BUILD install; ```; Depending on how your compilers are setup you may find convenient to modify this:; ```; if get_option('custom-mpi'); mpi_dep = []; ```; To:; ```; if get_option('custom-mpi'); mpi_dep = [declare_dependency(link_args: ['-lmpi'])]; ```; In the meson.py script, I'm sure there is a way to do it with environment variables but I never bothered trying. Regards,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1088#issuecomment-706397914:781,variab,variables,781,https://su2code.github.io,https://github.com/su2code/SU2/issues/1088#issuecomment-706397914,1,['variab'],['variables']
Modifiability,PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D Mesh,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17117,plugin,plugins,17117,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"Python's ""self"" which; // makes this solution reasonably idiomatic.; Base::Compute(wv, sol);. // Then do our specific job.; wv.area = 0.0;; for(int i=0; i<nDim; ++i); wv.area += pow(sol.areaVector[i],2);; wv.area = sqrt(wv.area);; }; };. // Same mechanics as above; template<typename Base>; class ComputeFlux : Base; {; protected:; enum : int {nDim = Base::nDim};. struct WorkVarsType : Base::WorkVarsType ; {; double flux; // ...add new member; };. template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // ...call base; Base::Compute(wv,sol);. // ...do aditional work; wv.flux = 0.0;; for(int i=0; i<nDim; ++i); wv.flux += sol.velocity[i]*sol.areaVector[i];; }; };. // This class is used to terminate the chain, it makes the link; // with the interface and it is used to specify any fixed sizes.; template<int NDIM>; class Terminator : private VirtualInterface; {; protected:; enum : int {nDim = NDIM};. struct WorkVarsType {};. template<typename... Ts>; void Compute(Ts&...) const {}; };. // Finally we use the building blocks to implement Compute.; // The blocks can be reordered depending on application to; // help the compiler fuse loops or minimize register spillage,; // the resulting WorkVarsType definition will be equivalent.; class ComposedClass: public; ComputeFlux< ComputeArea< Terminator<3> > >; {; public:; ResultType Compute(const SolutionContainer& sol) const;; };. ResultType ComposedClass::Compute(const SolutionContainer& sol) const; {; // Create the working variables on the stack.; ComputeFlux::WorkVarsType wv;. // Pass down the working variables and whatever other arguments.; // If the convention was followed, all building blocks will run.; // Recall that all Compute's were templates, they will be; // instantiated here and we can force them to be inlined.; ComputeFlux::Compute(wv, sol);. // Do some additional work if needed and return result.; return wv.flux / wv.area;; }; ```; [Care for some assembly?](https://gcc.godbolt.org/z/os-gNg)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:5120,variab,variables,5120,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,4,['variab'],['variables']
Modifiability,"R [rbp-208], ymm1; vmovapd YMMWORD PTR [rbp-400], ymm0; cmp rax, rbx; jne .L7; ```; which makes the vectorized code perform just as well as the scalar code, iterators could also be used for the other variables but that would start to hurt readability without improving the performance much. _Note: There is also a chance the compiler (gcc) is not doing this kind of optimization because of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer arithmetic and so we really need iterators to amortise that cost, there is also the drawback that scalar usage of such a container would be terrible. **For these reasons I think we should sacrifice ultimate performance and keep node data in AoS storage.**. The major impact on gradients and limiters is the way the code is written, to vectorize the computation we need to compute the gradient into a local variable and then ""transpose"" it when storing it, i.e.; ```c++; FltVec phiI[MAXNVAR], gradI[MAXNVAR][MAXNDIM];; ...; for(size_t iVar=0; iVar<nVar; ++iVar); {; auto flux = weight*(phiI[iVar]+phi.getVec(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); gradI[iVar][iDim] += a_ij[iDim]*flux;; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); g",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:13231,variab,variables,13231,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['variab'],['variables']
Modifiability,"RING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:9216,config,configure,9216,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,12,['config'],['configure']
Modifiability,"RY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; SU2_CFD(config_cfd); ; except:; sys.stdout = sav_stdout; sys.stderr = sav_stderr; raise; ; sys.stdout = sav_stdout; sys.stderr = sav_stderr; ; else:; required_options=['SOLUTION_FLOW_FILENAME']; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : RESTART_SOL is set to YES, but the solution is missing:\n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; current_mesh = config['MESH_FILENAME']; current_solution = config['SOLUTION_FLOW_FILENAME']; ; sys.stdout.write('Initial CFD solution is provided.\n'); ; #--- Check existence of initial mesh, solution; ; required_files = [current_mesh,current_solution]; ; if not all (os.path.exists(fil) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):; err += fil + '\n'; raise RuntimeError , err; ; #--- Start looping; ; # Get mesh dimension; dim = su2amg.get_su2_dim(current_mesh); if ( dim != 2 and dim != 3 ):; raise RuntimeError , ""Wrong dimension number\n""; ; #--- AMG parameters; ; config_amg = dict(); ; config_amg['hgrad'] = float(config['ADAP_HGRAD']); config_amg['hmax'] = float(config['ADAP_HMAX']); config_amg['hmin'] = float(config['ADAP_HMIN']); config_amg['mesh_in'] = 'current.meshb'; config_amg['mesh_out'] = 'curre",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:5709,config,config,5709,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,4,['config'],['config']
Modifiability,"Really nice work @pcarruscag :+1: ; It looks good to me. I agree with. > There is already a lot of nice work here in identifying the meaningful differences between different SA variants and reducing code duplication, so let's checkpoint this into develop before some other changes are made to turbulence models. The alternative way to specify corrections/variants in the config can be done in a different PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1413#issuecomment-1054045131:371,config,config,371,https://su2code.github.io,https://github.com/su2code/SU2/pull/1413#issuecomment-1054045131,1,['config'],['config']
Modifiability,"Regarding the name change, I would like to add that Paraview doesn't show the variable name correctly when using those subscripts.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/283#issuecomment-225389066:78,variab,variable,78,https://su2code.github.io,https://github.com/su2code/SU2/issues/283#issuecomment-225389066,1,['variab'],['variable']
Modifiability,"Right, that is the AUSM-family refactoring done with the hybrid Jacobians, Roe approximation is still available and it is the default.; So far:; - It was not practical to do finite differences of the mass flux and pressure by perturbing the conservatives, I had to do it on the primitives which then requires an extra Jacobian... So the approach is more expensive per iteration, which could be partially offset by using vector-mode forward-AD.; - However for some cases convergence is much better for the same CFL (wedge case with CFL=25) and in others (transonic airfoil, SST, low Re mesh) it allows much higher (4x) CFL to be used, which again results in lower time overall.; - The performance penalty from the extra layers does not seem to be big, but I have to measure that in a machine that is not doing other things at the same time.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-501745584:31,refactor,refactoring,31,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-501745584,2,"['layers', 'refactor']","['layers', 'refactoring']"
Modifiability,"ST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python3",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6645,config,config,6645,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. Build Configuration Summary:. Source code location: /home/antodech/SU2-4.1.0; Install location: /gshare/work/hpascalj/CodeSU2-master; Version: 4.1.0; C++ Compiler: g++; C Compiler: gcc; Preprocessor flags: ; Compiler flags: -g -O2; Linker flags: ; MPI support: no; Metis support: no; Parmetis support: no; TecIO support: no; CGNS support: yes; HDF5 support: no; SZIP support: no; ZLIB support: no; Mutation++ support: no; Jsoncpp support: no; LAPACK support: no; Datatype support:; double yes; complex no; codi_reverse no; codi_forward no. External includes: ; External libs: . Build SU2_CFD: yes; Build SU2_DOT: yes; Build SU2_MSH: yes; Build SU2_DEF: yes; Build SU2_SOL: yes; Build SU2_GEO: yes. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=""/gshare/work/hpascalj/CodeSU2-master/bin""; export SU2_HOME=""/home/antodech/SU2-4.1.0""; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=x86_64-unknown-linux-gnu; ac_cv_c_compiler_gnu=yes; ac_cv_cxx_compiler_gnu=yes; ac_cv_env_CCC_set=; ac_cv_env_CCC_value=; ac_cv_env_CC_set=; ac_cv_env_CC_value=; ac_cv_env_CFLAGS_set=; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_CXXFLAGS_set=; ac_cv_env_CXXFLAGS_value=; ac_cv_env_CXX_set=; ac_cv_env_CXX_value=; ac_cv_env_LDFLAGS_set=; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_file__gshare_soft_code_sa",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:19276,config,configuration,19276,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configuration']
Modifiability,"SU2/commit/ac8b3bf7636cc66ca7f47e15935942a6598e1a9f), the `SetRoe_Dissipation` function checked to see if the sensor values were valid regardless of the type of blending selected. Commit [ac8b3bf](https://github.com/su2code/SU2/commit/ac8b3bf7636cc66ca7f47e15935942a6598e1a9f) changed the behavior to only check the sensor values if they will be used. The unit test sets the convective blending to `NTS`, feeds invalid sensor values into `SetRoe_Dissipation` and checks the output. ```cpp; // Used to set the Roe-low-dissipation option; void WriteCfgFile(unsigned short nDim, const char* filename,; std::string blending) {; std::ofstream cfg_file;. cfg_file.open(filename, ios::out);; cfg_file << ""PHYSICAL_PROBLEM= NAVIER_STOKES"" << std::endl;; cfg_file << ""ROE_LOW_DISSIPATION= "" << blending << std::endl;. cfg_file.close();; }. BOOST_AUTO_TEST_CASE(BadSensorsAllowedForNTS) {. /*--- Setup ---*/. const unsigned short nDim = 3;. /*--- Set up the config class for the test ---*/; char cfg_filename[100] = ""convective_blending_test.cfg"";; WriteCfgFile(nDim, cfg_filename, ""NTS"");; CConfig* config = new CConfig(cfg_filename, SU2_CFD, 0, 1, 2, VERB_NONE);; std::remove(cfg_filename);. /*--- Inputs ---*/; const su2double dissipation_i = 0.4;; const su2double dissipation_j = 0.6;; const su2double sensor_i = NAN; // Intentionally unphysical:; const su2double sensor_j = NAN; // Intentionally unphysical:. /*--- Outputs ---*/; su2double dissipation;. /*--- Test ---*/. CNumerics numerics;; numerics.SetRoe_Dissipation(dissipation_i, dissipation_j,; sensor_i, sensor_j,; dissipation, config);. const su2double tolerance = std::numeric_limits<su2double>::epsilon();; BOOST_CHECK_CLOSE_FRACTION(dissipation, 0.5, tolerance);. /*--- Teardown ---*/; delete config;; }; ```. There's a couple problems I would fix if I had more time. Ideally, I would be writing the cfg file to an in-memory stream and not to a file. And realistically, I shouldn't need to use a config file at all for a simple test like this.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499999225:1409,config,config,1409,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499999225,8,['config'],['config']
Modifiability,"SU2] Feature deallocation (#174). Bringing this branch up to date with current develop branch. ; Various deallocation changes; Some regression tests fail but all run. (previously was not the case); You can view, comment on, or merge this pull request online at:; ¬†¬†https://github.com/su2code/SU2/pull/174; Commit Summary; - Updated GetEngine_Properties; - Fix to the last commit; - Small bug; - Merge branch 'develop' into feature_MPI; - merging; - SU2_SOL and SU2_CFD are working; - Preliminary, but complete, implementation of SU2_DEF; - More updates; - Working version; - Complete implementation (validate); - Working version of SU2_DEF; - Final push before moving to the develop branch; - New MPI (removing SU2_PRT); - Merged in Ben's ParMETIS integration and fixed some conflicts.; - Merge branch 'benkirk-parmetis_integration' into feature_MPI; - ParMETIS geometry routines have been copied over but are not activated yet.; - Small change to ParMETIS include.; - ParMETIS can now be activated for testing (PARMETIS=YES in config).; - Updated MG; - Updated EA subrotuine; - Small fix; - Fixing memory leak; - Fixing memory leaks; - Dev release v.3.2.6; - Increasing MAX_NUMBER_MARKER; - Working version with ParMETIS. Fixed bug in global index. Now clean up and testing...; - Cleaned version of ParMETIS routines with better console output during partitioning.; - Small bug in initial element division.; - Made arrays in ParMETIS call dynamic.; - Fixed compiler warnings and added MPI directives so that the pure serial code works with the ParMETIS routines.; - Bootstrap on zion.; - Added some typecasts. Still tracking down a memory problem...; - Critical bug fix for vtxdist array.; - Partial fix; - More MPI improvements.; - Fixing a bug in SU2_DEF; - Updated BC_ActDisk_Boundary (MPI); - Merge remote-tracking branch 'upstream/develop' into develop; - changing solidboundary setting to be heatflux OR euler etc instead of AND, also working on doxygen documentation; - Dynamic allocation for ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:1824,config,config,1824,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['config'],['config']
Modifiability,"S_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:818",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:15706,config,config,15706,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"Samet,. I can help you with the NREL case and the output. . We are in the middle of rewriting those routines, so it will be very easy to register and output new variables to the viz. files soon (another week or less). Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-257618678:161,variab,variables,161,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-257618678,1,['variab'],['variables']
Modifiability,"Samet,. the error you get for the caradonna tung case is probably because the definition of the numerical scheme for the turbulence model is missing in the config file. Just copy it from another case.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-257549568:156,config,config,156,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-257549568,1,['config'],['config']
Modifiability,"Seems like we lost that function recently, I'll try to fix it and put together a working example, then you can adapt it to your problem.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1079#issuecomment-2143984024:111,adapt,adapt,111,https://su2code.github.io,https://github.com/su2code/SU2/issues/1079#issuecomment-2143984024,1,['adapt'],['adapt']
Modifiability,"Seems like you're using older version of SU2 master branch. We didn't have several config options such as ""WRT_BINARY_RESTART"" in older version. That's the reason why your SU2_CFD executable throws error message regarding it.; Please clean your SU2 directory, pull fresh copy of master branch of SU2, compile it and then run it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/523#issuecomment-381752554:83,config,config,83,https://su2code.github.io,https://github.com/su2code/SU2/issues/523#issuecomment-381752554,1,['config'],['config']
Modifiability,"Seems like your figures are not attached. Please upload them again. Also, please double check whether your ""SU2_RUN"" environment variable is set correctly as Juan mentioned. If serial computation worked fine only with ""$ SU2_CFD inv_ONERAM6.cfg"" command, I guess you set it correctly. However, from your error message, python script says it can't find a path to ""SU2_RUN""",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/521#issuecomment-378119992:129,variab,variable,129,https://su2code.github.io,https://github.com/su2code/SU2/issues/521#issuecomment-378119992,1,['variab'],['variable']
Modifiability,"Seems this may be a result of SU2_DDC not recognizing the one of the configuration file parameters (perhaps NUMBER_PART?), and thus the mesh doesn't get decomposed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2#issuecomment-23189870:69,config,configuration,69,https://su2code.github.io,https://github.com/su2code/SU2/issues/2#issuecomment-23189870,1,['config'],['configuration']
Modifiability,"Simplest is to just copy the saved file again, with an iteration number appended. No keeping track of what the iteration number at the previous write was, no copying of the final saved file with manually appending the final iteration number, no lag of WRT_FREQ in the availability of the restart_xxx.dat file. It does mean that we do a copy instead of a rename. But I think this is the better (because the simplest) solution. I will extend it to the other file options.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1465#issuecomment-1005529868:433,extend,extend,433,https://su2code.github.io,https://github.com/su2code/SU2/pull/1465#issuecomment-1005529868,2,['extend'],['extend']
Modifiability,"Since most of the magic of turbulence models can be found in the source, you could adopt what we have done for the SA variants and make a new source term only in CNumerics for each new variant (or maybe have it inherit somehow from the existing one and add just an additional term without duplicating). That way, the bools can be left as SST everywhere and only one line is needed to instantiate the correct source term. The checks on SA and SST throughout are mostly because they have 1 and 2 equations, respectively, so all of their variants can still be lumped under checks for just SA and SST type, I think.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/765#issuecomment-523996743:211,inherit,inherit,211,https://su2code.github.io,https://github.com/su2code/SU2/pull/765#issuecomment-523996743,1,['inherit'],['inherit']
Modifiability,"So I tested the convergence on a couple of test cases, to see its behavior. I used the following three different preconditioner/linear solver combinations:. + LU SGS with FGMRES; + ILU with FGMRES; + ILU with BCGSTAB. I looked at three different test cases from the repo: the zero-pressure gradient flat-plate turbulent boundary layer, the NACA 0012 airfoil, and the RAE 2822. In each case, I ran without a restart file. For the flat plate and the NACA 0012, I used adaptive CFL and no multigrid. For the RAE 2822, I used constant CFL and multigrid. I looked at both the number of iterations of the linear solver (the inner iterations) and the overall convergence over time (the outer iterations). Here's some sample results and discussion:. For the flat-plate boundary layer, there was no noticeable difference between the develop branch and the fix:; ![flat_plate_ilu](https://user-images.githubusercontent.com/13340225/35281464-92d4da84-0018-11e8-9460-ae4672be6f44.png). For the NACA 0012, the linear solver converged in a similar number of iterations. Its hard to tell which outperformed the other due to different CFL numbers. The residual in turbulent kinetic energy did lag in the middle, but both cases converged in a similar number of outer iterations.; ![naca0012_ilu](https://user-images.githubusercontent.com/13340225/35281471-9aa05a40-0018-11e8-8abe-e31ddd058679.png). For the RAE 2822, the overall convergence was identical (same number of outer iterations). The linear solvers also converged in a similar number of iterations.; ![rae2822_ilu](https://user-images.githubusercontent.com/13340225/35281495-addf0d7c-0018-11e8-96c0-6599e3cfa5e5.png). ### Conclusion; There doesn't seem to be any large difference in the convergence with or without the fix.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/491#issuecomment-358401929:466,adapt,adaptive,466,https://su2code.github.io,https://github.com/su2code/SU2/pull/491#issuecomment-358401929,1,['adapt'],['adaptive']
Modifiability,"So I tested this on 4 mesh levels for a NACA0006 at 2.0 degrees AoA, at low (0.6) and high-ish (0.8) Mach number (Roe scheme).; These are the results for low Mach:; ![image](https://user-images.githubusercontent.com/38071223/61968547-3b08c680-afd0-11e9-8aae-9705a9441a00.png); Very small differences between recomputing a mass flux based on primitives (""Reconstructed"") or storing the flux computed during discretization of convection (""Consistent"").; However, the convergence rate for the latter approach is much worse:; ![image](https://user-images.githubusercontent.com/38071223/61968712-99ce4000-afd0-11e9-9c31-dafd7e26e3fb.png); Which makes sense because we are going from a Gauss-Seidel coupling of flow and turbulence to a half GS, half Jacobi (since the turbulence source terms were still computed with current velocity gradients).; After seeing this I only ran one mesh level (second to finest) at high Mach number and again differences were very small and convergence worse.; Some memory would indeed be saved in the discrete adjoint through the reduction of the number of pre-accumulation input variables, but only 30MB out of almost 9GB for a 2D case without MG. In summary the current approach seems to strike a good balance between accuracy, cost, and simplicity.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/721#issuecomment-515535554:693,coupling,coupling,693,https://su2code.github.io,https://github.com/su2code/SU2/issues/721#issuecomment-515535554,4,"['coupling', 'variab']","['coupling', 'variables']"
Modifiability,"So I've got a more general question: Why do we want the gradient norm to be ~1E-6? Isn't this gradient norm problem dependent? it most definitely scales with the square root of the number of design variables. I would suspect that the relative scales of the design variables are also a factor. Is 1E-6 a good rule? Or is it just a decent starting point, and values very different from 1E-6 are used in practice? Also, if this is ""a good rule,"" then shouldn't we just automatically rescale the problem after the first design iteration?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616774814:198,variab,variables,198,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616774814,2,['variab'],['variables']
Modifiability,"So instead of using arrays, since we are only choosing the smallest limiter value, it seems like we can just store a local variable in computing the Van Albada limiter. Does this look okay?. I have the feeling we want to generalize this for other limiters in the future, but this seems like the most efficien option for an implementation in CNEMOEulerSolver.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1428#issuecomment-972139855:123,variab,variable,123,https://su2code.github.io,https://github.com/su2code/SU2/pull/1428#issuecomment-972139855,1,['variab'],['variable']
Modifiability,"So now please check why the flux is calculated as ; ""conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config)"" instead of; ""conv_numerics->GetInviscidProjFlux(&V_infty[nDim+2], Velocity, &Pressure, &V_infty[nDim+3], Normal, Residual)""; Why should Jacobian_j be involved? Unless you say that both the above routines give the same end result I am not convinced that it is right.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/405#issuecomment-313630343:118,config,config,118,https://su2code.github.io,https://github.com/su2code/SU2/issues/405#issuecomment-313630343,1,['config'],['config']
Modifiability,"Some updates:. - Python wrapper functionalities have been moved into a dedicated python_wrapper_structure.cpp file for code clarity.; - The data structures for the customized values at boundaries have been removed from the CPoint class. Data structures are stored in the geometry class, they are initialized only when customization is set ON and only for involved vertices. There was no restriction to put the data structures in the solver class, except that when multi-grids needs to be updated (required for non uniform field), the geometry class needed an access to the solver class, which is not the case since everything that is in the Common structure seems to be independent of what it is in SU2_CFD, and I wanted to keep that. Those data structures should not be seen as true PDE-related variables, they should be seen as a generic support for boundary customization.; - CHT related labels have been removed and replaced by ""Python customizable"" in order to not introduce any confusion with the native CHT development. The basic purpose of this work is to enable existing boudary conditions to be customized from Python and not to develop a CHT interface. CHT is just an example of application (since only the HEAT_FLUX and ISOTHERMAL walls are customizable for now).; - Based on the previous point, no new specific boundary condition was introduced. For now, I keep the idea to just modify (one single line) the existing boundary conditions to take into account the customization. New dedicated boundary conditions (for example BC_HEAT_FLUX_CUSTOM or BC_ISOTHERMAL_CUSTOM) would be a 99% copy of the originals... Dedicated boundary conditions for native CHT development can still be defined independently (no condlfict). Cheers,. David",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/488#issuecomment-355928565:796,variab,variables,796,https://su2code.github.io,https://github.com/su2code/SU2/pull/488#issuecomment-355928565,1,['variab'],['variables']
Modifiability,"Sorry for my late reply and thanks Heather for opening this important discussion.; I fully agree with you and OBJECTIVE_FUNCTION and OPT_OBJECTIVE cause confusion. As far I see the problem, if we focus on a typical users point of view, I think that OPT_OBJECTIVE and OPT_CONSTRAINT must be in the config file and as close as possible. They are the key to define an optimization problem (one of the key features of SU2). On the other hand, as you suggested we need to add some flexibility. It would be interesting to to able to define a multi-objective like; OPT_OBJECTIVE= DRAG \* DRAG_WEIGHT; LIFT^2 \* LIFT^2_WEIGHT;. As Tim pointed out OBJECTIVE_FUNCTION is important because is what we use to play and develop the adjoint capability but, from the users point of view it is not as interesting as the OPT_OBJECTIVE. If everything works ok, OPT_OBJECTIVE should be enough for most of the SU2 users. How many typical users are interested in solving and adjoint problem for the sake of solving of an adjoint problem?. However OBJECTIVE_FUNCTION is not a good name, from the point of view of the continuous adjoint, I would feel comfortable if we change it to ADJ_BND_CONDITION. That probably doesn't work for the discrete adjoint, isn't it? Tim, What key word would work for the Discrete Adjoint? We need something that reflect the effect, in mathematical terms, of the objective function in the AD adjoint problem. Finally, before adding any capability we should ask ourself how general is going to be and if it going to be useful for the most part of the SU2 users community (in my opinion, external aerodynamics). If the new objective function is only useful for us, or a research project, then I think we need to create some kind of custom objective function, (e.g. CUSTOM_OBJFUNC at the same level than DRAG, LIFT, etc) that we can describe with other set of parameters. Thanks,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-187255862:297,config,config,297,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-187255862,1,['config'],['config']
Modifiability,"Sorry for the delayed response,. Yes, for some reason I still receive the same results using the SUPERSONIC_SHOCK option. Thank you for the additional resources on mesh adaptation,; Alex",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-443926887:169,adapt,adaptation,169,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-443926887,1,['adapt'],['adaptation']
Modifiability,"Sorry for the late reply, here are some personal opinions. (1) I have also test the turb flatplate and Onera M6 case (Fig1.Original; Fig2.Submit) in the tutorials. The convengence and results also shows just slightly difference. . (2) This PR is not suitable for the euler wall, for the wall is not always a straight plane and singular points do not statisfy the condition for the normal direction is hard to define. (3) Well, I have noticed the BC_Sym_Plane before, but it is very puzzling to me that only the closed point to the vertex on the sym wall is considered to add additional negative normal flux contribution. Maybe the mesh is unstructured and more than one point out of wall is linked to the vortex. Maybe the closed point is not normal to the wall while it always occurs on the 3D sym plane such as the ONERA M6 wing case. (4) This PR is to add a limitation of the velocity on the sym wall, just like what we do to the turb walls in the CTurbSSTSolver::CTurbSSTSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh). The fix is only available for the SYMMETRY wall and in the implicit iteration, just to avoid uncertainty and potential instability.; `; CTurbSSTSolver::CTurbSSTSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh); : CTurbSolver(geometry, config, true) {; ...... /*--- Initialize lower and upper limits---*/; lowerlimit[0] = 1.0e-10;; upperlimit[0] = 1.0e10;. lowerlimit[1] = 1.0e-4;; upperlimit[1] = 1.0e15;; `; ![untitled](https://github.com/su2code/SU2/assets/58663453/f5b5f543-3476-45d6-9477-94c7deeca9aa); ![untitled](https://github.com/su2code/SU2/assets/58663453/c6ecbdc5-0636-4880-a315-05c8636c27bb)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2174#issuecomment-1829816458:1012,config,config,1012,https://su2code.github.io,https://github.com/su2code/SU2/pull/2174#issuecomment-1829816458,3,['config'],['config']
Modifiability,"Sorry for the late response, and thanks for getting back to me! That definitely looks like what I'm looking for. I've taken a look through the code and I'm not entirely sure about what the syntax for including such a bc in the config file would be. Is there an example?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/690#issuecomment-498694974:227,config,config,227,https://su2code.github.io,https://github.com/su2code/SU2/issues/690#issuecomment-498694974,1,['config'],['config']
Modifiability,Sounds good to me. I have been prototyping the multizone driver in the last couple of weeks. It's still in the early stages but it's slowly taking shape. You can find it here:; https://github.com/su2code/SU2/tree/feature_reformat_config. I also outlined some of the changes (particularly in what respects to the config file) in the Dev-society forum: https://su2devsociety.org/forum/?view=thread&id=5 . We could keep the conversation there if you want. Happy to set up a meeting to explain a bit what I have been doing and receive some feedback (and helping hands would also be welcome!) from the different groups.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/528#issuecomment-392061901:312,config,config,312,https://su2code.github.io,https://github.com/su2code/SU2/pull/528#issuecomment-392061901,2,['config'],['config']
Modifiability,Sounds good. ; Do you mean that MARKER_MOVING will disappear entirely? I think that is a good idea - this is one of those options that confuse new users if they aren't reading the config file comments in detail.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-136878093:180,config,config,180,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-136878093,1,['config'],['config']
Modifiability,"Sounds good. I was a little concerned about carrying around unnecessary memory during fluid computations, which will be the case for FSI as well as time spectral and some other applications, but you have a good point about avoiding allocation/deallocation overhead, and since you're reducing the number of times the same variables are re-allocated without any deallocation, it'll be a performance improvement relative to the current code either way. Please replace the 'varname.~Classname' calls with 'delete varname', then I think it should be good to go (pending anyone else weighing in on this). [you probably already know this from previous pull requests, but just in case - you don't have to create a new pull request, just commit into your branch and it will update automatically]",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-148124339:321,variab,variables,321,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-148124339,1,['variab'],['variables']
Modifiability,"Strange indeed. It was a fresh cloning of the develop branch.; Look at the begining of preconfigure.py:. #!/usr/bin/env python. ## \file configure.py; # \brief An extended configuration script.; # \author T. Albring; # \version 7.0.2 ""Blackbird""; #; # SU2 Project Website: https://su2code.github.io; # ; # The SU2 Project is maintained by the SU2 Foundation ; # (http://su2foundation.org); #; # Copyright 2012-2020, SU2 Contributors (cf. AUTHORS.md); #; Clearly 7.02. So there is somewhere a mixup with the 6 version. But the problem that not; just the headers numbers are mixed up",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-598824144:137,config,configure,137,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-598824144,3,"['config', 'extend']","['configuration', 'configure', 'extended']"
Modifiability,"Sure we do (e.g. `CDiscAdjSolver::RegisterSolution` will behave incorrectly). So actually both ways are based on saving indices somewhere. However the routines that I added (with the `_intIndexBased` extension) do save them internally together with ""their"" corresponding variable (in the same variable class) which is important for the multizone stuff. > So now when we register the coordinates we do it index-based because the multizone_problem boolean is set. We don't want the `_intIndexBased` routines for the FSI cases. They work by re-recording new tapes for each set of variables (fluid solution/coordinates/displacement solution) with added specific routines within the solvers/iterators for cross dependencies (which goes along with saving indices externally, but in a preassigned order). > What are the implications for when we extract the adjoints? Do we need an index-based GetDerivative?. Yes there are counterparts in `RegisterSolution`, `SetAdjoint_Output` and `ExtractAdjoint_Solution`. But nothing more. We can go for the internal indices in `CVariable` exclusively once we have integrated the FSI capabilities to the multiphysics driver.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542202636:271,variab,variable,271,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542202636,3,['variab'],"['variable', 'variables']"
Modifiability,Sure. Your change is fully compatible for me.; I understand your motive for the new environment variable. Please go ahead.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/335#issuecomment-263695418:96,variab,variable,96,https://su2code.github.io,https://github.com/su2code/SU2/pull/335#issuecomment-263695418,1,['variab'],['variable']
Modifiability,"T_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <stdio.h>; | #ifdef HAVE_SYS_TYPES_H; | # include <sys/types.h>; | #endif; | #ifdef HAVE_SYS_STAT_H; | # include <sys/stat.h>; | #endif; | #ifdef STDC_HEADERS; | # include <stdlib.h>; | # include <stddef.h>; | #else; | # ifdef HAVE_STDLIB_H; | # include <stdlib.h>; | # endif; | #endif; | #ifdef HAVE_STRING_H; | # if !defined STDC_HEADERS && defined HAVE_MEMORY_H; | # include <memory.h>; | # endif; | # include <string.h>; | #endif; | #ifdef HAVE_STRINGS_H; | # include <strings.h>; | #endif; | #ifdef HAVE_INTTYPES_H; | # include <inttypes.h>; | #endif; | #ifdef HAVE_STDINT_H; | # include <stdint.h>; | #endif; | #ifdef HAVE_UNISTD_H; | # include <unistd.h>; | #endif; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking X11/Intrinsic.h presence; configure:5409: gcc -E conftest.c; conftest.c:28:27: error: X11/Intrinsic.h: No such file or directory; configure:5409: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | #define STDC_HEADERS 1; | #define HAVE_SYS_TYPES_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:14078,config,configure,14078,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"TestCases repo is used for large files that are used in regression tests.; Then we have the tutorials repo for tutorial files (mesh + configs) and we also exercise those in regressions.; If this is too large for either of the above it should go into V&V, I guess that is how it was used for the paper?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2239#issuecomment-2018876371:134,config,configs,134,https://su2code.github.io,https://github.com/su2code/SU2/pull/2239#issuecomment-2018876371,1,['config'],['configs']
Modifiability,"Thank you @TobiKattmann for your feedback. The idea behind this new regression test config file is as follows:; We should have a test case that triggers the negative part of the SA model. Depending on the flow conditions, geometry and CFD parameters it might be triggered or not. With the previous config file, it was not. ; I think there is already a regression test in SU2 that triggers the negative SA, the `turb_oneram6_nk`. However, I decided to stick to rae2822 airfoil as it is a simpler (faster) case. In order to force the negative part of the SA for the rae2822 in a reasonable amount of iterations for a regression test, I increased the angle of attack. I have removed the multigrid as it might not be stable, but I have not tested though. Anyway, with the current configuration, e.g., convective scheme, CFL number, etc, the solution is not stable and diverges after some iterations, around 15. In that sense, I reduced the number of iterations from 20 to 10. In my opinion, a diverging regression test is not a problem at all as it might not be used as a tutorial, only to verify the integrity of the commit. ""The solution should always diverge to the same results"". If the regression test should converge, let me know and I will update the config file :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1559#issuecomment-1067926363:84,config,config,84,https://su2code.github.io,https://github.com/su2code/SU2/pull/1559#issuecomment-1067926363,8,['config'],"['config', 'configuration']"
Modifiability,"Thank you @chamsolli ; However, it says that some of the options like coefficients and binary restart are not analogous to the config file of SU2.; ![screenshot from 2018-04-16 16-03-29](https://user-images.githubusercontent.com/31462793/38835288-c18a81e4-4190-11e8-8aae-d28eabbbc0d1.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/523#issuecomment-381751040:127,config,config,127,https://su2code.github.io,https://github.com/su2code/SU2/issues/523#issuecomment-381751040,1,['config'],['config']
Modifiability,"Thank you Clark,; I will come back as soon as I will be able to run the case to extend the script. Best regards",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1079#issuecomment-702016718:80,extend,extend,80,https://su2code.github.io,https://github.com/su2code/SU2/issues/1079#issuecomment-702016718,1,['extend'],['extend']
Modifiability,"Thank you all for the review and comments. I've added a test case with this pull request for a pitching airfoil. The config is in the main repository and the mesh is added in the TestCases repository with the same branch name. Can both pleased be merged in together? Also about the tutorial request, I'll have a go at writing one in a feature branch of the website repository.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/767#issuecomment-526666570:117,config,config,117,https://su2code.github.io,https://github.com/su2code/SU2/pull/767#issuecomment-526666570,1,['config'],['config']
Modifiability,Thank you for having a look @MicK7.; Allowing multizone cgns based on the MULTIZONE_MESH option sounds reasonable but I did not want to remove the error without testing. Do you (or @ChristianBauerEng) have a multizone cgns we can use to test this?; I don't think we should add more config options.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1566#issuecomment-1073214095:282,config,config,282,https://su2code.github.io,https://github.com/su2code/SU2/pull/1566#issuecomment-1073214095,1,['config'],['config']
Modifiability,"Thank you for re-testing Jayant.; The idea with the hard-coded ceiling (floor?) on linear solver tolerance was to handle examples where it is set to very low values which would not allow this mechanism to work properly... Hummm but I can see the case for using the linear solver tolerance to achieve a fixed number of iterations, and then using an ""acceptable reduction"" to drive the CFL. Alright good idea I'll make it a fifth, optional CFL-adapt parameter with default 0.001 and still take the max between it and the tolerance. Out of curiosity did you manage to check what kind of tolerance seems ""optimum"" for adapted meshes?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1036#issuecomment-760782020:442,adapt,adapt,442,https://su2code.github.io,https://github.com/su2code/SU2/pull/1036#issuecomment-760782020,2,['adapt'],"['adapt', 'adapted']"
Modifiability,"Thank you for sharing the Output details @pcarruscag. Now I can output the *Cur_Time* column with only changing of input script. . After reading the source code, I also found that the history field depends on the user settings, such as physics type, turbulence model, etc. If I manually assign the HISTORY_OUTPUT variable, will the default settings be wiped out? It seems that adding the ""CUR_TIME"" to the default history field for transient analysis is reasonable if not conflict with other settings. I will be proposing a PR, however, please feel free to comment or challenge. Thanks.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2138#issuecomment-1740363137:313,variab,variable,313,https://su2code.github.io,https://github.com/su2code/SU2/issues/2138#issuecomment-1740363137,1,['variab'],['variable']
Modifiability,"Thank you for the pull request. ; Pull requests must be both to and from the ""develop"" branch (or the relevant feature branch if applicable). In order to make a pull request, please check out the develop branch, make your changes, and submit the pull request into to develop branch. . While this might be useful in some situations, and particularly the record of this pull request can be an example to other users who want to use Docker with SU2, it looks like this is specific to a version of Ubuntu, and that you have hard-coded some lines to refer to locations on your own file system. We try to make it such that SU2 will be usable in most operating systems, with appropriate changes to the configuration steps. . Since it is setting up a development environment this would be more appropriate to SU2_IDE/, rather than Quickstart/ - which is intended as the main tutorial for new users, who are not necessarily developers and who may not have heard of Docker.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/169#issuecomment-96786749:695,config,configuration,695,https://su2code.github.io,https://github.com/su2code/SU2/pull/169#issuecomment-96786749,2,['config'],['configuration']
Modifiability,"Thank you for the review Catarina, based on your comments I will try to explain the new structure better. ### The interface; These numerics classes are still abstract and so the outside world only needs to known about their interface:; ```c++; class CNumericsSIMD {; public:; virtual void ComputeFlux(...) const = 0;; };; ```; Any class that wants to be a simd numerics needs to inherit from this base and in so doing is forced to implement `ComputeFlux` (because it is pure virtual). ### Static decorator pattern; Now, in this structure we don't have convective and viscous classes separate. Instead, we have convective schemes that can be ""decorated"" with viscous fluxes. For example:; ```c++; template<int nDim>; class CCompressibleViscousFlux : public CNumericsSIMD {; protected:; void viscousTerms(...) const {...}; };; ```; Here note that this class template is derived from CNumericsSIMD but it does not implement `ComputeFlux`, thus it cannot be instantiated by itself. The idea is that convective schemes can use these viscous fluxes as base class (thereby linking them to CNumericsSIMD) to access the `viscousTerms` method (when we don't want viscous terms we just use a dummy viscous class).; Note also the template parameter `nDim`, this is because we want to create specific versions of the numerical schemes for 2D and 3D (we ""want"" this because it allows static allocation and unrolling loops perfectly). Then convective classes also need to be class templates so that we can programatically change their base class:; ```c++; template<class Base>; class MyConvectiveScheme : public Base {; public:; void ComputeFlux(...) const {; // do my own thing; Base::viscousTerms(...);; // update the linear system with the result; }; };; ```; Now to create an instance of this class template we do for example:; ```c++; auto obj = new MyConvectiveScheme< CCompressibleViscousFlux<2> >(...);; ```; which would create an object for 2D problems with viscous terms. And so we need at least 4 instanti",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721:379,inherit,inherit,379,https://su2code.github.io,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721,1,['inherit'],['inherit']
Modifiability,"Thank you for the suggestion, the artificial compressibility should probably be added to config template - although I would also note that this option only operates when running an incompressible problem, which some users may not realize.; The config template is generated for releases, and some options are excluded for development purposes. Artificial compressibility is not in that category, however, and so it should be added to the config template. . All options, and default values, can be found in the source file: Common/src/config_structure.cpp. One alternate solution for getting more detail on options, which unfortunately is only partially complete, is to leverage doxygen:; https://github.com/su2code/SU2/issues/122. example output:; ![image](https://cloud.githubusercontent.com/assets/5167760/15504600/9beafe66-2174-11e6-836d-f20777f4f474.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/277#issuecomment-221262435:89,config,config,89,https://su2code.github.io,https://github.com/su2code/SU2/issues/277#issuecomment-221262435,3,['config'],['config']
Modifiability,"Thank you for the thorough review @rsanfer! I'll reply to your main questions and some of the smaller ones here to centralize things. > Just a request, if it's possible that you add one or two test cases so the implementation is safe onwards (and, of course, so I can play around with the new features a little bit ). The testcases are the same, no changes there other than the one optional option introduced above. When the hybrid stuff covers most of the code I would add an entire build configuration e.g. BaseMPIOMP and corresponding testcase suite. > * Should this just run ""out of the box"" with a working installation of OpenMP in any machine, or is there anything else _fancy_ needed?. I would leave it to the community to decide what the defaults should be, probably for a lot of new users that don't run on clusters just calling SU2_CFD and not having to worry about mpi would be nice (a lot of the issues on CFD online are mpi related). > * Is the previous behaviour exactly kept, or are there any modifications in the basic, non OpenMP version of code? (Not that I mind, just curious). Other than the algorithmic changes (but mathematically equivalent) introduced to limiters and gradients in #834, yes. > What's the advantage of having one numerics term per thread?. It is a requirement, we need to write data into numerics before using them, multiple threads cannot write to the same location (i.e. the internal structures of CNumerics) therefore one per thread is required. > ...Also, I think I missed the point where the numerics container is extended beyond MAX_TERMS. The allocation of space for one numerics per thread is done above in line 1995 of my 21 Dec 2019 comment: `...MAX_TERMS*omp_get_max_threads()...`.; The instantiation of one numerics per thread is then done by executing the rest of the preprocessing in parallel and instead of using `XYZ_TERM` using `XYZ_TERM+offset` where `offset = thread_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could r",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:490,config,configuration,490,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['config'],['configuration']
Modifiability,"Thank you for your advice. I will do that as soon. PENG YAN, PhD student. Department of Aerospace Science & Technology. Politecnico di Milano; ________________________________; From: Nijso ***@***.***>; Sent: Wednesday, October 5, 2022 21:47; To: su2code/SU2 ***@***.***>; Cc: Peng Yan ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] [WIP]Coupling of SU2 and CoolProp (PR #1782). Yes, all those automatically generated files should be removed, so everything in the folder .idea (including the folder), and the entire cmake-build-debug folder. If they come from coolprop, tell it to install into another directory outside of SU2. ‚Äî; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/pull/1782#issuecomment-1268887325>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ATJ4GKA5U3DU3MBG5LNUQC3WBXLMBANCNFSM6AAAAAAQ53HAJY>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1782#issuecomment-1268908256:353,Coupling,Coupling,353,https://su2code.github.io,https://github.com/su2code/SU2/pull/1782#issuecomment-1268908256,1,['Coupling'],['Coupling']
Modifiability,"Thank you for your answer. If you could share the configs and meshes that you are using I can try following the approach suggested by @pcarruscag and use the TKE from the turbulence solver instead of the freestream one. Plus, I have some doubts on the default value of the turbulent to laminar viscosity ratio which is equal to 10 in SU2, although on the NASA page suggests to be in the range of 10^-2 to 10^-5. However, I think that this is another issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-2245190147:50,config,configs,50,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-2245190147,1,['config'],['configs']
Modifiability,"Thank you for your comment. No need to create dummy points for periodic BC is really an ingenious design and when I run RANS/URANS cases, I get good results. But there are still some problems for me, the first is convergence when I run big 3D cases and the second is the periodic BC cannot cooperate with hybrid RANS/LES method. So I thought a dummy layer is sometimes necessary just as in Blazek's book(Computational Fluid Dynamics: Principles and Applications, Second Edition, Page 293). ; ![book](https://github.com/su2code/SU2/assets/58663453/cd5a29ba-4f75-40a0-8530-edfd1523d9b7). One dummy layer need to communicate solution, gradients or maybe Laplacian, sensors and so on. It's still complex so I choose two dummy layers to only communicate solution. As in the picture, the original use the send-recieve pair1 as periodic BCs and this feature need four pairs with a restriction that the outermost four layers should be structured grids. Three more repeated mesh sections are indeed added but it is acceptable in terms of robustness and reducing data communication.; ![pairs](https://github.com/su2code/SU2/assets/58663453/1d7c5005-b704-40a6-88dd-518e09082eea). The above diagram can be set with the following settings:; MARKER_PERIODIC= ( y0.48, y0.04, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.44, 0.0, y0, y0.44, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.44, 0.0 ); PERIODIC_DUMMY= YES. This functionality also requires a pre-processing program for the grid to add the appropriate boundary conditions to the .su2 file. I am currently doing this using a fortran code and trying to replicate it using python scripts. But the changes to the c++ code section have been verified with various RANS/URANS/DES cases and a result of NACA0012 swept wings is listed below.; ![0012](https://github.com/su2code/SU2/assets/58663453/552782e9-e5c3-4a0f-b809-af7fdc7aecfc)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2038#issuecomment-1556503119:722,layers,layers,722,https://su2code.github.io,https://github.com/su2code/SU2/pull/2038#issuecomment-1556503119,2,['layers'],['layers']
Modifiability,Thank you for your quick response. I'll open a PR to fix the comment.; Do you happen to know why the default value of ADJ_SHARP_LIMITER_COEFF is set to 3? It makes surface sensitivity zero for large areas and screws up shape optimization. It took me a while to find out that this variable is the cause. I think the default value should be something that works for most users.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1830#issuecomment-1328190193:280,variab,variable,280,https://su2code.github.io,https://github.com/su2code/SU2/issues/1830#issuecomment-1328190193,1,['variab'],['variable']
Modifiability,"Thank you for your response, @bigfooted. ; I can see the available options using the flag -d as you suggested. . Is there any way that I can activate the CUR_TIME in the history file using the config.cfg? Currently what I did is adding the line below to certain source files, then build and run. It works but has to change the source code. ` if (config->GetTime_Domain()) requestedHistoryFields.emplace_back(""CUR_TIME"");`. Thanks.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2138#issuecomment-1738826301:193,config,config,193,https://su2code.github.io,https://github.com/su2code/SU2/issues/2138#issuecomment-1738826301,2,['config'],['config']
Modifiability,"Thank you. I see, so you set separate markers, e.g. MARKER_EULER= ( WingTop, WingBottom ), and where the marker boundaries meet, the mesh points on that interface is unchanged; did I understand that correctly? I guess that while this will reduce the artefacts on the LE/TE it still results in a departure from the design shape at the portions away from the boundary edges. As you mentioned before, there might not be a way to solve this without mapping back to an iges or parametric file. I suppose another approach might be to work the other way around? Perhaps one can limit the max allowable adapted size to match the 'worst case' allowable surface mesh? I just realised that may be a contributing factor to why the points jumpy across the fuselage; `PYADAP_HMAX` may be set excessively large. If I set this limit to less than the average surface mesh cell size, will it attempt to refine everything over the limit instantly? Or will it only use the limit for 'new' cells that are generated during adaptation? Thanks for your thoughts.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-764836923:595,adapt,adapted,595,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-764836923,2,['adapt'],"['adaptation', 'adapted']"
Modifiability,"Thank you. It does seem to work for the GRAD_FLOW option; however, it still results in the same incorrect results as before for the SUPERSONIC_SHOCK option. Also, when I add ""-c 2"" as a command line argument to mesh_adaptation.py to speed up the process of running multiple adaptation cycles, the simulation will only do a single one then exit.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-437553068:274,adapt,adaptation,274,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-437553068,1,['adapt'],['adaptation']
Modifiability,Thanks ! So do we go for pysu2 as the Py module and _pysu2 as the extended C++ (.so lib) ?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/357#issuecomment-272708402:66,extend,extended,66,https://su2code.github.io,https://github.com/su2code/SU2/pull/357#issuecomment-272708402,1,['extend'],['extended']
Modifiability,Thanks @ScottImlay. Seems to work now. Just a quick question. You only adapted the volume mesh/solution routines. Is it also possible to use the new format for the surface files (i.e. in the routines SetTecplotBinary_SurfaceMesh/SetTecplotBinary_SurfaceSolution) ?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-425020607:71,adapt,adapted,71,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-425020607,1,['adapt'],['adapted']
Modifiability,"Thanks @TobiKattmann, nice catch! Can you please put a pull request with the required changes? That way I can also do some tests myself and we can move the discussion there. @economon As far as I know, there is no multizone-multiinstance case running as of now. I think @arubino worked on multizone harmonic-balance, but I don't think it has yet been adapted to the new instance index. Am I right?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/568#issuecomment-416935622:351,adapt,adapted,351,https://su2code.github.io,https://github.com/su2code/SU2/issues/568#issuecomment-416935622,1,['adapt'],['adapted']
Modifiability,Thanks @economon this makes a lot of sense. And if it goes ahead maybe the options DEFORM_LINEAR_SOLVER_ITER and DEFORM_LINEAR_ITER should also be fused?. This is has a smallish negative implication to FSI cases. There because the deformation is incremental it is acceptable to converge the solver to 1e-6 or only 1e-5. But in shape optimization (@cvencro and I are working on that) we would be limited by the lowest required tolerance. @rsanfer this is something to consider in the mesh deformation refactoring.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/623#issuecomment-443665804:500,refactor,refactoring,500,https://su2code.github.io,https://github.com/su2code/SU2/pull/623#issuecomment-443665804,1,['refactor'],['refactoring']
Modifiability,"Thanks @pcarruscag for making this PR a lot better. @bigfooted @danielmayer @mheimgartner ; To layout future steps as discussed after this merge: ; 1. Merge these changes into feature_flamelet (and then feature_multicomp). Therefore the `CScalar*` things that are currently present in these branches will be renamed to CLegacyScalar* to not overwrite files. This has the advantage that those branches are kept up-to-date with develop.; 2. Implement a rudimentary (passive) CSpeciesSolver (specifically does not contain multicomponent mixing from #1332 ) and merge that. Finding a good (validation) Testcase would be great here.; 3. Extend the CSpeciesSolver by #1332 mixing models. Either by cutting away all the flamelet specific parts or by porting the additions to a new PR.; 4. Make feature_flamelet switch to the new structure. This is an in-place change as both implementations are then present but just one will be kept. This will shrink the PR size of #1223 by quite a bit . Additionally the heat and radiation solver should be ported into this new structure, but that is independent work.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1330#issuecomment-925066101:632,Extend,Extend,632,https://su2code.github.io,https://github.com/su2code/SU2/pull/1330#issuecomment-925066101,1,['Extend'],['Extend']
Modifiability,"Thanks @pcarruscag for responding! I really appreciate you taking time to answer this. Well, I was just looking at the density residuals for convergence. That should be valid for both primal and adjoint. I have attached my config file for future reference. The same works for v6 though. Yes, downgrading hurts. But I had good reasons to do so because of the shape optimization scripts for turbomachinery are way more developed for v6 than v7. I wish I could have done that earlier. Plus the MPI issue as well #990. Now I am able to use 30 instead of 3 cores and that makes one hell of a difference. The good part about git is that I can go back to v6.1.0 tag and get not only the code and Testcases but the website at that version as well. That certainly helps.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1024#issuecomment-645495083:223,config,config,223,https://su2code.github.io,https://github.com/su2code/SU2/issues/1024#issuecomment-645495083,1,['config'],['config']
Modifiability,Thanks @pcarruscag for your comments. As always very valuable! I think I have addressed all of them. Some other things I have changed:. - The history files per zone are disabled by default when running a multizone problem; - The multizone history file is now named after the config file (i.e. case name).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/845#issuecomment-572996083:275,config,config,275,https://su2code.github.io,https://github.com/su2code/SU2/pull/845#issuecomment-572996083,1,['config'],['config']
Modifiability,"Thanks @sun5k, the merge conflicts were probably a bit challenging because some files were moved with the other work we were doing on turbulence.; I had a look at the code and it looks like you did a nice job of modernizing the transition implementation :+1: and the verification against Fluent also looks good.; Given that this is an improvement in all directions (better code, feature that works, same amount of code) I encourage you to make the final push so that we can integrate it into develop.; As you see the GitHub tests are failing because of compiler warnings (unused variables and so on, you should be able to see the logs) let me know if you need some help.; Then we need at least one regression test, for example one of the coarser grids in your V&V, and with that we should be able to finish this PR!. After that please consider adding your results to our V&V page https://su2code.github.io/vandv/home/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1751#issuecomment-1239202757:579,variab,variables,579,https://su2code.github.io,https://github.com/su2code/SU2/pull/1751#issuecomment-1239202757,1,['variab'],['variables']
Modifiability,"Thanks Brian,; my bad, I misinterpreted the carpets / logs structure. I successfully ran a test of a very simple case. In the results there are some small artifacts, but the shocks are resolution improved consistently after mesh adaption.; Thanks for the support. ![Comparison](https://user-images.githubusercontent.com/41752169/80644172-84a7a580-8a69-11ea-9f16-58e98c808b73.png); ![ComparisonMesh](https://user-images.githubusercontent.com/41752169/80644174-85403c00-8a69-11ea-819f-2ac00550a089.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-621450497:229,adapt,adaption,229,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-621450497,2,['adapt'],['adaption']
Modifiability,"Thanks Edwin, the vectorized loops in the code are probably very simple array copies, hence the low efficiency? I would put money on not a single vector instruction being generated for the important stuff. I was surprised by the 1.25 to 1.3 factor you are seeing, for the exact same case I measured 1.39 (to be more precise). Initially I thought it had something to do with running single core, thus leaving vast amounts of L3 for only that core to use, so on the same 24c platform I ran 2 processes (30MB of cache for each) (very uncivilised) and the factor went down to 1.37, so cache was not the reason.; So then I thought maybe the Intel compilers are very good at optimizing polymorphism away, but the development branch compiled with icc 17 runs at exactly the same speed as when compiled with gcc 5.4. Then I compiled feature_contiguous_cvariable with icc 17 and it runs 9% slower than the gcc binaries, and so with icc 17 the speedup for this case was 1.27 errrrr... Anyone got a buddy at Intel?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-523930905:680,polymorphi,polymorphism,680,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-523930905,2,['polymorphi'],['polymorphism']
Modifiability,"Thanks Heather,. Could you please take a look at the log_Adjoint.out file generated in the folder DESIGNS/DSN_001/ADJOINT_DRAG/ when you run the single objective-with-multiple-surfaces regression test (in the part whereSU2 specifies the Surface(s) where the force coefficients are evaluated). It seems that the shape optimization python script only copied the first surface to config_CFD.cfg. I found the ""if (n_obj>1):‚Äù solution‚Ä¶ but, you know better the multi objective implementation. Just let me know if there is another more elegant fix that we can implement. Thanks!; Francisco. > On Mar 25, 2018, at 1:55 PM, Heather Kline <notifications@github.com> wrote:; > ; > @hlkline commented on this pull request.; > ; > In SU2_PY/SU2/eval/design.py <https://github.com/su2code/SU2/pull/519#discussion_r176953697>:; > ; > > @@ -364,7 +364,7 @@ def obj_df(dvs,config,state=None):; > # For multiple objectives are evaluated one-by-one rather than combined; > # MARKER_MONITORING should be updated to only include the marker for i_obj; > # For single objectives, multiple markers can be used ; > - config['MARKER_MONITORING'] = marker_monitored[i_obj]; > + if (n_obj>1): config['MARKER_MONITORING'] = marker_monitored[i_obj]; > I think that the array of monitored markers is extended to accommodate this situation in config.py (~line 514), and there is a single objective-with-multiple-surfaces regression test; do you have a case you can send me where this wasn't working? Or if you see an issue with that test that I previously missed I wouldn't mind looking into it.; > ; > ‚Äî; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/519#pullrequestreview-106743204>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AccuRva3VNHDjv7H11VnmorjY5pCNlpkks5tiARDgaJpZM4S4O1W>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/519#issuecomment-376016690:857,config,config,857,https://su2code.github.io,https://github.com/su2code/SU2/pull/519#issuecomment-376016690,5,"['config', 'extend']","['config', 'extended']"
Modifiability,"Thanks Heather,. I completely agree, MARKER_DESIGNING. MARKER_MONITORING. MARKER_PLOTTING. DV_MARKER are confusing‚Ä¶ we have tried to fix this without too much luck. It really requires some deep changes on the python and C++ stuff. The idea is the following. > MARKER_PLOTTING: Should disappear, in the future, all the markers should be in the tecplot or paraview file (and the user will decide which one turn on of off using templet of paraview); > ; > MARKER_MONITORING, MARKER_DESIGNING: The main idea is to be able to compute to different integrals over the surfaces: one for simulation and the other for design. e.g. You maybe want to include all the solid surfaces and fan faces, and charging stations in MARKER_MONITORING to compute (Drag-Thrust) but in MArKER DESIGN you are only interested on the wing surface for design.; > ; > DV_MARKER. This is an unfortunately name. At the very beginning the mesh deformation capability was developed only for shape design (DV = Design Variables). We should generalize the names of the grid deformation parameters without using DV. Thanks!; Francisco. On Aug 18, 2015, at 4:31 AM, Heather Kline notifications@github.com wrote:. > Thanks Tom; > I agree that we should make things easy to understand. ; > My thinking was that most users will want to know what parts of the mesh they are moving, but don't necessarily need to know what's happening underneath - if they specify the entire mesh the code just reverts to the more efficient method. But (from the users perspective) it may be just as easy to have a separate specification for scaling the entire mesh.; > ; > In terms of moving it to SU2_MSH; I think it may make sense to include scale/rotate/translate in SU2_MSH, but I think it would be confusing to have two options that do the same thing. I would side with separate option names (this would also eliminate a loop over markers in this pull request); > ; > On this topic, I have sometimes found MARKER_DESIGNING and DV_MARKER to be confusing; on",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-133010923:982,Variab,Variables,982,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-133010923,1,['Variab'],['Variables']
Modifiability,"Thanks Pedro for hinting me at this coupling issue again, now I think I understand it! . **For the record**, here is what I talked about in today's developer meeting:; When I make the following changes in the `issue_simplified/multizone/multizone-i.cfg` :. 88c88; < CFL_NUMBER= 0.1; ---; > CFL_NUMBER= 1000.0; 162c162; < TIME_DISCRE_FLOW= EULER_EXPLICIT; ---; > TIME_DISCRE_FLOW= EULER_IMPLICIT; 177c177; < TIME_DISCRE_TURB= EULER_EXPLICIT; ---; > TIME_DISCRE_TURB= EULER_IMPLICIT. then the simplified multizone setup converges, albeit to a different solution:; ![simplified-multizone-explicit-cfl01-density](https://user-images.githubusercontent.com/72806890/139096529-5063dbe7-8ee8-4c53-a7c6-a2b6b3a031a1.png); than what the simplified singlezone setup (from above) converged to: ; ![simplified-singlezone-density](https://user-images.githubusercontent.com/72806890/139096586-7d096c5f-4d34-4ddb-94fa-0deab52df5e4.png). The same observation can be made analogously for `issue_complicated`:; The multizone setup with explicit Euler and CFL=0.1 (nearly) converges (actually the residual stalls at `avg[bgs][0]` approximately -13) to the following limit:; ![complicated-multizone-explicit-cfl01-density](https://user-images.githubusercontent.com/72806890/139096973-e9547f9f-521e-4920-aba5-2621fad79944.png); while the singlezone solution (with implicit Euler and CFL 1000) is (**EDIT**: was momentum plot, replaced by density plot); ![complicated-singlezone-density](https://user-images.githubusercontent.com/72806890/139109790-e5cae4be-041e-4c29-93a5-e086a26f72a4.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1414#issuecomment-953043430:36,coupling,coupling,36,https://su2code.github.io,https://github.com/su2code/SU2/issues/1414#issuecomment-953043430,2,['coupling'],['coupling']
Modifiability,Thanks Pedro for the description of all these!. I was using the default value for most of them. I tried increasing the DEFORM_LINEAR_SOLVER_ITER but that did not have any effect. Probably will try using DEFORM_COEFF and DEFORM_LIMIT to see if that has an effect. I have also attached the config file for future reference.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1026#issuecomment-645489716:288,config,config,288,https://su2code.github.io,https://github.com/su2code/SU2/issues/1026#issuecomment-645489716,1,['config'],['config']
Modifiability,"Thanks Suman,. My suggestion is the following‚Ä¶ we have really never performed a detailed test of the CUSP scheme. As far I remember it was a really quick implementation. And it looks to see that you know SU2 and you are ready to contribute ‚Ä¶ Would it be possible for you to create a pull request with the changes, including a test case? if it is a bug, your change will pay off immediately. Best,; Francisco. > On Jul 12, 2017, at 10:03 PM, SumanVajjala <notifications@github.com> wrote:; > ; > @hlkline <https://github.com/hlkline> Thank you for your reply. We have been using SU2 for over 2 years and only recently we started looking at the code to understand some of the issues we were facing. To clarify I did not report it as a bug. I do understand that the flow variables obtained by Riemann invariants (line 10433) are set as the primitive variables for the boundary point. But when it came to the flux calculation I saw Jacobian_j and that triggered my question. I know that each scheme has a ComputeResidual routine but for this specific case what routine is being used? Is it the one in numerics_template.cpp? And I still do not understand why Jacobian_j should play a role in the flux calculation! I will be glad if you can kindly comment on it.; > ; > Finally, can I now treat that this is a non-issue?; > ; > @fpalacios <https://github.com/fpalacios> @oleburghardt <https://github.com/oleburghardt> @hlkline <https://github.com/hlkline> By the way don't you think Nu_c in line no 729 in numerics_direct_mean.cpp should be Nu_c = (1.0-Beta)*LamdaNeg? This was the other probable bug I was referring to within SU2 found in CUSP implementation.; > ; > Regards; > Suman; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/issues/405#issuecomment-314971522>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AccuRkqESRvP7dcREH5t_PKPioRlkERhks5sNaUSgaJpZM4OKV38>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/405#issuecomment-315096146:768,variab,variables,768,https://su2code.github.io,https://github.com/su2code/SU2/issues/405#issuecomment-315096146,2,['variab'],['variables']
Modifiability,"Thanks Tom, actually most of the work was already done in September, lately I've been busy with other stuff and that's why it took so long before this pull request. Regarding the upcoming release of the sliding meshes, before the AIAA, we can surely think about including this one too. ; It still has some limitations, for instance it doesn't work with periodic boundaries, though Antonio and I are working on it in separate branches, but I've tested it for a bunch of different flow configurations and it seems to be quite robust.; Basically, after this pull request the code will be able to carry out computations using an arbitrary number of zones, both Euler/RANS, serial/parallel, using the nearest neighbour approach and the one from Rinaldi. By the way, it doesn't really matter to me if this feature is included in the upcoming release or in the one later, I just would like to have this on the develop so that I don't have to merge and fix conflicts any time the branch gets updated.; So some of the modification I made will be stable and I can move to the next step (the adaptive sliding meshes).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/389#issuecomment-301007972:484,config,configurations,484,https://su2code.github.io,https://github.com/su2code/SU2/pull/389#issuecomment-301007972,2,"['adapt', 'config']","['adaptive', 'configurations']"
Modifiability,"Thanks Tom. And, as mentioned before, let‚Äôs have a bit of a discussion as to which wall functions formulations would make most sense to implement. I am pretty sure that we can create a generic implementation that can then be used for standard wall functions, but also for adaptive wall functions (see Medic, G., Kalitzin, G., et al., ‚ÄúAdaptive Wall Functions with Applications‚Äù, 2006), and even compressible/incompressible formulations. The adaptive wall function trick is quite useful as it makes the wall function implementation more robust to the varying y+ of the first cell of the surface of the geometry and lessens the burden during the grid generation stage. Formulations for S-A and k-w/SST are available. If anyone else is interested in participating, please let us know. Best,. Juan. On Jun 8, 2017, at 5:11 PM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi all,. Yes, it would be wonderful to get this feature completed. I had started this a couple of years ago, but never quite got around to finishing (too many fun things to work on!). I was following this paper, which should be a straightforward implementation for us, as FUN3D has a very similar structure:. Jan-Renee Carlson, Veer Vatsa, and Jeffery A. White. ""Node-Centered Wall Function Models for the Unstructured FLow Code Fun3D"", 22nd AIAA Computational Fluid Dynamics Conference, AIAA AVIATION Forum, AIAA 2015-2758, https://doi.org/10.2514/6.2015-2758. The key changes can be found in the following locations:. * CNSSolver::Compute_Wall_Functions_Mean() routine in solver_direct_mean.cpp - computes and stores an updated wall shear stress based on the chosen wall model; * CTurbSASolver::Compute_Wall_Functions() routine in solver_direct_turbulent.cpp - computes the eddy visc/nu tilde needed near the wall based on the model; * CNumerics::GetViscousProjFlux() in numerics_structure.cpp - computes the viscous flux between two nodes and will make an adjustment near the wall when th",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-307262047:272,adapt,adaptive,272,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-307262047,3,"['Adapt', 'adapt']","['Adaptive', 'adaptive']"
Modifiability,"Thanks Tom; I agree that we should make things easy to understand. ; My thinking was that most users will want to know what parts of the mesh they are moving, but don't necessarily need to know what's happening underneath - if they specify the entire mesh the code just reverts to the more efficient method. But (from the users perspective) it may be just as easy to have a separate specification for scaling the entire mesh. . In terms of moving it to SU2_MSH; I think it may make sense to include scale/rotate/translate in SU2_MSH, but I think it would be confusing to have two options that do the same thing. I would side with separate option names (this would also eliminate a loop over markers in this pull request). On this topic, I have sometimes found MARKER_DESIGNING and DV_MARKER to be confusing; on their own they sound very similar, in the description MARKER_DESIGNING is where the objective function is evaluated - but in the code, it's not clear what MARKER_DESIGNING does - the surfaces specified by MARKER_MONITORING are what are actually used to evaluate the objective function value. . There may be other similar areas where config file options could be clarified or compressed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-132181536:1144,config,config,1144,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-132181536,2,['config'],['config']
Modifiability,"Thanks a lot @talbring !! Yes, with LDFLAGS it worked, although I believe it's not failsafe because the order of elements in the link line usually has an effect. BTW, I got another error later in the build, this time due to libpython3.8.a not being added to the link line (I don't know why --in fact Meson says it found python 3.8 when configuring SU2). I'm rebuilding again, this time adding -lpython3.8 to LDFLAGS. I'm closing the issue because I believe it's solved üëç",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/867#issuecomment-584199364:336,config,configuring,336,https://su2code.github.io,https://github.com/su2code/SU2/issues/867#issuecomment-584199364,1,['config'],['configuring']
Modifiability,"Thanks a lot @talbring !!. What would be the environment variable that Meson would honor for libraries? (LDFLAGS is for linker flags rather than libraries, and if the linker line puts the LDFLAGS before the object files, you'd get the libs before the objects, so a linker error). Maybe something like LIBS? However, looking at [the variables that the Meson docs say it supports](https://github.com/mesonbuild/meson/blob/8c1221b437b2930fa64d78517337293e8a0e079f/docs/markdown/Reference-tables.md#compiler-and-linker-flag-environment-variables), I don't see any LIBS-like variable...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/867#issuecomment-584151705:57,variab,variable,57,https://su2code.github.io,https://github.com/su2code/SU2/issues/867#issuecomment-584151705,4,['variab'],"['variable', 'variables']"
Modifiability,"Thanks a lot for your feedback, we have updated the files. ; For the time being, just remove MG_CFL_REDUCTION= 0.9 in your config file.; Best,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/44#issuecomment-54904983:123,config,config,123,https://su2code.github.io,https://github.com/su2code/SU2/issues/44#issuecomment-54904983,2,['config'],['config']
Modifiability,"Thanks a lot for your support, @pcarruscag. . I run the other test cases this morning and I noticed there is a very small difference in the sensitivities around the 10th significant figure (in the order of the updates you made on the discrete adjoint airfoil case). Given that the order of magnitude of this difference remains consistent even when extending the simulation, I updated the test values. I leave here the [reference to the previous state](https://github.com/su2code/SU2/commit/654ba3dfc207e25c31da9c09860224ad4044a610) for our records. . If there are no comments against it in the next day or so, I will be merging in this PR next, as it just puts back some functionality that was removed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-543067888:348,extend,extending,348,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-543067888,1,['extend'],['extending']
Modifiability,"Thanks a lot on the comments so far @pcarruscag . Helps quite a bit üëç ; I think I addressed all your comments by now (using AuxVarGrad, a bunch of openMP instructions, overhauling the FindUnique_RefNode func, making a struct for the streamwise periodic values and using that in Numerics and the solver, not using config as a solver var container, and some other things ); Feel encouraged to comment/request-changes on more things.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/773#issuecomment-788766954:313,config,config,313,https://su2code.github.io,https://github.com/su2code/SU2/pull/773#issuecomment-788766954,1,['config'],['config']
Modifiability,"Thanks a lot, @TobiKattmann, for this fix,. I was able to reproduce the error locally as well and the fix makes perfect sense to me. I've only added one small statement:; `config_container[iZone]->SetiInst(INST_0);`; to SU2_SOL in cases with single instance, to enforce that iInst = config->GetiInst() in CBaselineSolver::LoadRestart() receives the correct value. @economon as of now, I think there are no multizone-multiinstance cases available in develop. When that comes through, it would only require an extra loop on iInst and the correct setting of; `config_container[iZone]->SetiInst(iInst);`; in the very same fashion as it is done for harmonic balance (lines 357-380 in SU2_SOL.cpp). Then, inside the LoadRestart routine, the correct container position is read in line 3939 of solver_structure.cpp,; `unsigned short iInst = config->GetiInst();`; and used onwards. . I'll wait until the tests pass for this latest commit and then merge it in by Monday morning if there are no further comments.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/572#issuecomment-417633741:283,config,config,283,https://su2code.github.io,https://github.com/su2code/SU2/pull/572#issuecomment-417633741,2,['config'],['config']
Modifiability,"Thanks at all for being so responsive to this mishap. When I started contributing I learned that something like a 2-LGTM-rule was applying. But apparently it evolved to have someone merge a pull request if he or she can judge the content and feels comfortable with it, as the other approach ended up having a large list of unmerged pull requests **or** having two LGTM's of non-independent reviewers. @economon Maybe you can bring it up at the next meeting how we could address this little double bind?. So sorry again for the trouble (at least a revert of the very latest commit would not be too difficult). Still I'll wait if @pcarruscag and @talbring want to do now the way Tim suggested.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/667#issuecomment-480015080:158,evolve,evolved,158,https://su2code.github.io,https://github.com/su2code/SU2/pull/667#issuecomment-480015080,2,['evolve'],['evolved']
Modifiability,"Thanks for adding the description, Heather. I think this is a very nice contribution.. we‚Äôre working on the regressions and will pull this in once we have everything straightened out (and this branch passes). In the meantime, you got me thinking: the scale, rotate, translate options might be confusing now if a user doesn‚Äôt know whether to include the markers or not. Perhaps this is a chance for separating some of the ‚Äúdesign‚Äù options from ‚Äúmesh‚Äù options. One way I could see us do this is by moving the implementation I had just committed for the ‚Äúvolume‚Äù scale, rotate, and translate options over into the SU2_MSH executable, which might be a more logical home for it. However, this would require adding an extra set of config options for reading in a scale/rotate/translate options for SU2_MSH. The nice thing here is that we keep the intent separate, i.e., only design variables are listed with the other design variables while the mesh transformations are elsewhere. A different, possibly simpler way would be to just create separate names for these two types in the list of available options so that there is no ambiguity. Any thoughts?. On Aug 16, 2015, at 9:21 AM, Heather Kline <notifications@github.com<mailto:notifications@github.com>> wrote:. Some illustrative images/output in case my description was hard to understand:; [image]https://cloud.githubusercontent.com/assets/5167760/9294050/52a764b2-440f-11e5-8681-b68318da0ce7.png. SU2_DEF output when only ""airfoil"" marker included:. ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid. ----------------------- Volumetric grid deformation ---------------------; Performing the deformation of the volumetric grid. # FGMRES residual history. # Residual tolerance target = 4.14044e-11. # Initial residual norm = 15.8102. ```; 0 1; 50 2.17385e-06; 100 1.08998e-10; ```. # FGMRES final (true) residual:. # Iteration = 105: |res|/|res0| = 3.50764e-11. Non-linear iter.: 1/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-132065067:725,config,config,725,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-132065067,6,"['config', 'variab']","['config', 'variables']"
Modifiability,"Thanks for adding the small change to the config, David. Merging these changes in...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/218#issuecomment-166225189:42,config,config,42,https://su2code.github.io,https://github.com/su2code/SU2/pull/218#issuecomment-166225189,1,['config'],['config']
Modifiability,"Thanks for all the questions on the shape optimization. It helps us make improvements to the code to make it easier to use. . You are correct in that the adjoint gradients determine the direction that the optimizer moves the design variables. But this direction can (and usually does) change during the optimization process as it explores different parts of the design space. So the design variables won't always move in the same direction. Sometimes the optimizer won't take the best step in the direction of descent. In this case, the objective function can increase. The optimizer will then try again in the same direction but with a different (usually smaller) step size. If it does achieve a reduction in the objective function, it will usually run the adjoints again to get an updated gradient direction. The objective + adjoint iterations are called major iterations and are what is output by the SLSQP algorithm. This process is more complicated when there are constraints involved. . So in summary, no it is not necessary (or likely) that the objective function will always decrease through an optimization process",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/984#issuecomment-628714360:232,variab,variables,232,https://su2code.github.io,https://github.com/su2code/SU2/issues/984#issuecomment-628714360,2,['variab'],['variables']
Modifiability,"Thanks for cleaning up the config template. As far as I can tell, the Dirichlet and Neumann boundary conditions (around line 650) are not implemented in SU2 (they exist as placeholders). If this is true, keeping them in the config_template would be misleading. . Leaving this as a comment since I don't know if those markers are useful in places I haven't seen (like outside of SU2_CFD). Can someone confirm?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/686#issuecomment-494926280:27,config,config,27,https://su2code.github.io,https://github.com/su2code/SU2/pull/686#issuecomment-494926280,1,['config'],['config']
Modifiability,"Thanks for fixing these things and the attached pdf. The results look great ! . In case you have some parameters that you might want to have as an config option, feel free to add them or just let us know.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-257391503:147,config,config,147,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-257391503,1,['config'],['config']
Modifiability,"Thanks for getting everything cleaned up, @ScottImlay. I really would like to get this merged soon, as I think it is a great contribution. My main concern remains the size of the files that are now included due to the boost library. The externals/tecio directory has increased in size from 3.6 MB to 172 MB, and 166 MB of that is boost. Perhaps we can consider downloading this code on-the-fly during the configure process, or have a script access it as a submodule similar to CoDiPack via preconfigure.py. Open to ideas here.. any thoughts?. Lastly, if we are shipping boost source, we should add their license to the distribution by including this file in externals/tecio/boost/ : https://www.boost.org/LICENSE_1_0.txt",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-426809515:405,config,configure,405,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-426809515,1,['config'],['configure']
Modifiability,"Thanks for merging Tim, but you did not solve correctly the conflict on parallel_regression.py. We do not test the external FSI coupling for now, so it has to be removed ;). Everything is up to date now.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/357#issuecomment-272124052:128,coupling,coupling,128,https://su2code.github.io,https://github.com/su2code/SU2/pull/357#issuecomment-272124052,1,['coupling'],['coupling']
Modifiability,"Thanks for sharing the progress on the container in #753 . You may already be going in this direction, but another idea to consider is making CVariable a pure data structure (basically a c-style struct with your new containers) with no methods. This could be interesting for 2 reasons: 1) we remove a level of indirection without the Getters/Setters and operate directly on the data, and 2) this breaks the current cycle we are stuck in where we need to add a new virtual function to the base class every time one of the child CVariable classes adds new data that it must access with Get()/Set(). . Adding new data to the child classes for each solver becomes trivial if it is just a data structure. A pure data structure and an object with polymorphism will always be at odds - we should choose the best for each situation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-518900363:741,polymorphi,polymorphism,741,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-518900363,1,['polymorphi'],['polymorphism']
Modifiability,"Thanks for the clarification clarkpede. One of the things I had tried when I first ran into that warning after looking at the code was to create a coarse grid with fewer than 1000 elements (just in case the sensor value was extremely large for a single element for some reason, then it should‚Äôve at least marked that one for adaptation). However, it still output the same results and warning message. I‚Äôm not exactly sure how the adaptation index is calculated for the SUPERSONIC_SHOCK or GRAD_FLOW, but is it possible that these values could be negative, causing the sensor value to always be below the threshold value?. I haven‚Äôt been able to find any examples using the mesh adaptation, so I may be missing an additional parameter from the configuration file. Thanks for any additional help,; Alex",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-435625964:325,adapt,adaptation,325,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-435625964,4,"['adapt', 'config']","['adaptation', 'configuration']"
Modifiability,"Thanks for the clarification!. Best,; Francisco. > On Apr 22, 2017, at 5:01 PM, Heather Kline <notifications@github.com> wrote:; > ; > Thanks; > The discrete adjoint can also be used with combined objectives, and uses the same config specifications. It may not be clear from this pull request since this functionality was added in a previously - when multiple objectives (limited to objectives defined inside the CFD solver) are specified, they are added together (with specified weights) in the CFD solver into the 'COMBO' output to history. This variable is registered for the discrete adjoint solver.; > An example of this can be seen in the serial_regression_AD.py, test name 'discadj_multi_py'.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/385#issuecomment-296409557>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AEpklrJ5WQ8CoWJNAy_FVZ0bbYN000s2ks5rypTpgaJpZM4MgM_e>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/385#issuecomment-296409876:227,config,config,227,https://su2code.github.io,https://github.com/su2code/SU2/pull/385#issuecomment-296409876,4,"['config', 'variab']","['config', 'variable']"
Modifiability,"Thanks for the contribution! This is a much needed change. I wanted to perform a refactoring like this myself. The viscous (or turbulent) stress calculation is repeated many times in the code. Changing that calculation (e.g. adding QCR or UQ) currently requires changing many files. In my humble opinion, the stress tensor calculation should have its own class at the lowest level of the code, like the gas model (e.g. ideal gas) or the viscosity calculation (e.g. Sutherland's law). `CNumerics` classes need access to it, and `CNumerics` is meant to have minimal dependencies. But the stress isn't really ""numerics."" Its part of the underlying equations we're trying to solve. Changing the stress tensor isn't the same flavor as changing from JST to Roe. Because the stress is part of the underlying equations, it is sometimes needed in the `CSolver` classes. Previously, I've seen the stress tensor used in `CNSSolver` boundary conditions and axisymmetric source terms. That may still be true in the current version of the code. The best way to make sure that both `CSolver` and `CNumerics` have access to it is to make it an independent class. Unless, of course, we want to be manually setting the six tensor elements in `CNumerics`, like we do with primitive variables. I don't like that alternative.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-742531842:81,refactor,refactoring,81,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-742531842,2,"['refactor', 'variab']","['refactoring', 'variables']"
Modifiability,"Thanks for the explanation @suargi . I would personally advocate for that the testcases should converge to some reasonable solution people might use it as a starting point (copy the cfg and doing mild adaptions) for their own stuff. And the Testcases show off the capabilities to some degree, to do so, convergence is beneficial. But as we have a bunch of working 2D airfoils in regression already I recon that adding a clear explanation and warning to the cfg as suggested by Pedro is fine. Otherwise you might try to bisect the AoA ... maybe there is a value that triggers negative SA and does not diverge :thinking: . Knowingly adding a diverging test without a clear warning is not good imo :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1559#issuecomment-1067977083:201,adapt,adaptions,201,https://su2code.github.io,https://github.com/su2code/SU2/pull/1559#issuecomment-1067977083,2,['adapt'],['adaptions']
Modifiability,"Thanks for the feedback @pcarruscag. @jayantmukho and I discussed this when we implemented the objective function. The main motivation was that since our implementation of the separation sensor is computed using the skin friction coefficient, we only defined the variables Buffet_Sensor, Buffet_Metric, etc. for the NSSolver class. Since the NSSolver needs to be able to evaluate all the same objectives as the EulerSolver, but the buffet objective is exclusive to the NSSolver, I copy pasted the function and added the new objective. Let me know if you have any suggestions for a cleaner implementation. We were basically choosing between defining all the Buffet_* variables in EulerSolver which would just add unnecessary variables to the constantly growing list of variables, or copying EvaluateObj_Func to allow for NS-specific objectives.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/614#issuecomment-441300657:263,variab,variables,263,https://su2code.github.io,https://github.com/su2code/SU2/pull/614#issuecomment-441300657,8,['variab'],['variables']
Modifiability,"Thanks for the fix! One more small request... can you please push this to our new 'develop' branch instead? We are switching up our branching strategy to make for a better experience, and will be using the develop branch for staging and testing before pushing code releases to the master. Also, Sean had mentioned that you have done some nice isothermal validations. If you are interested, we would be happy to make a regression test based on one of your test cases (to ensure that these features remain well-tested in SU2). If you provide a config/mesh, we can make the regression test for you very quickly.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/71#issuecomment-56557046:542,config,config,542,https://su2code.github.io,https://github.com/su2code/SU2/pull/71#issuecomment-56557046,1,['config'],['config']
Modifiability,"Thanks for the fixes, Francisco. The continuous adjoint tests are now failing, but I am guessing that it is something simple with the changes to the config option. Can you please take a look when you have a moment?. Couldn't agree more about keeping an eye on the Python scripts. We'll chat about it this week at the developer meeting (we need regressions for the Python scripts). More on that to come.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/244#issuecomment-191571633:149,config,config,149,https://su2code.github.io,https://github.com/su2code/SU2/pull/244#issuecomment-191571633,2,['config'],['config']
Modifiability,"Thanks for the heads up - I just noticed you merged today! Does that mean; if I download the fresh-out-of-the oven master, these problems will go; away? Cheers!. On 6 Dec 2017 18:55, ""David Thomas"" <notifications@github.com> wrote:. > As the error message says, it cannot find ""Python.h"". This is again; > related to the Python wrapper compilation. If you really don't need it, I; > suggest you to just disable it when configuring your build (remove; > --enable-PY_WRAPPER). If you need the Python wrapper and if your Python is; > not located in a standard location on your supercomputer, you will have to; > manually modify the SU2_PY/pySU2/Makefile.am and put the right paths for; > the Python include and Python libs (I think similarly to what you did for; > mpi4py, see above)... Again, everything should be improved after #424; > <https://github.com/su2code/SU2/pull/424> is merged.; >; > ‚Äî; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/447#issuecomment-349590138>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AQD-Esbg6axZxZB3ZUnHir1iqvyU8CUSks5s9mSrgaJpZM4Pm0yA>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/447#issuecomment-349967348:419,config,configuring,419,https://su2code.github.io,https://github.com/su2code/SU2/issues/447#issuecomment-349967348,1,['config'],['configuring']
Modifiability,"Thanks for the hint, just uploaded a screenshot of the mesh adaption!; Now I'm trying to run a simple 3D case, but unfortunately the amg.out fails during the first try (in the adap/ini folder):; ```; ## 16739 TRIANGLE(S) DISCARDED ; fefloa_Python2Mesh : 3d mesh on input ; fefloa_Python2Mesh : msh->NbrVer 14368 ; fefloa_Python2Mesh : msh->NbrTet 58189 ; fefloa_Python2Mesh : leaving with 14368 ver. 16740 tri. 0 edg. ; -- Maximal memory ; Maximum number of Points 53800000 ; Maximun number of Bnd Points 10760000; Maximum number of Triangles 21520000 ; Maximum number of Tetrahedra 295900000 ; Allocated Memory 50.105 Gb ; Physical Memory 62.729 Gb; bounding box x: -100 200 y: -150 150 z: -150 150 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; ## WARNING: REMOVING DUPLICATED FACE 12357 12359 12358 ; 14368 Vertex ; 3 Boundary Vertices ; 58189 Tetrahedra ; 1 Triangles ; 0 Edges ; 1 Surface(s) ; % Output subdom.meshb Mesh ndimn=3, mpoin=14368, melem=58189, mface=1; Corners 0 Required 0 ; ## ERROR : TETRAHEDRON 2 BOUNDARY FACE 1 2; 9 IS MISSING ; ## ERROR : TETRAHEDRON 4 BOUNDARY FACE 3 7; 2324 IS MISSING ; ¬∑¬∑¬∑; ## ERROR: FEFLO.A: 16740 BOUNDARY FACES ARE MISSING ; CHECK YOUR MESH . ## FATAL ERROR: FEFLOA: INITIAL OR CURRENT MESH HAS AN IN",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-623572280:60,adapt,adaption,60,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-623572280,2,['adapt'],['adaption']
Modifiability,"Thanks for the note! Indeed, we are aware of this issue, and we are already testing a patch that fixes it. We should be pushing the fix any day to the master, and I‚Äôll note it here/close the thread when that happens. > On Apr 23, 2015, at 5:40 AM, arrow206 notifications@github.com wrote:; > ; > I am using SU2 version 3.2.8. I have tried all the steady-state Euler and Navier-Stokes test cases and they worked fine. However, none of the demos for Rotating (NACA and CAradonna) are working. Both are diverging. I have decreased the Courant number from 4 to 2 and increased the number of implicit iterations. There is still divergence. In the cfg file, I removed all the variables related to the dynamic mesh motion nad put a freestream of 0.8. SU2 did not diverge. Is there a specific setting to put in the cfg file in order to get convergence for the Rotating test cases; > ; > ‚Äî; > Reply to this email directly or view it on GitHub https://github.com/su2code/SU2/issues/167.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/167#issuecomment-95671956:670,variab,variables,670,https://su2code.github.io,https://github.com/su2code/SU2/issues/167#issuecomment-95671956,1,['variab'],['variables']
Modifiability,"Thanks for the post. I think the issue is that ParMETIS support is enabled by default when building with '--enable-mpi' and so that option is not necessary (and may throw and error). Additionally, if the user does not enable MPI, ParMETIS will be disabled. Same for METIS. . If this is causing issues, we can remove them entirely from the set of configure options in order to avoid confusion.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/567#issuecomment-416808134:346,config,configure,346,https://su2code.github.io,https://github.com/su2code/SU2/issues/567#issuecomment-416808134,1,['config'],['configure']
Modifiability,"Thanks for the question; The RESTART_SOLUTION option determines only whether the CFD solution will restart from a provided solution file, not whether the optimizer will restart. ; To restart the optimizer process, this must be specified to the python script:; shape_optimization.py -r project.pkl -f config.cfg -n N; The options of all the python scripts can be viewed with a command like:; shape_optimization.py -h. So, to run an optimization process restarted from a previous optimization, and to have each individual simulation restart from previously converged CFD results you will need to BOTH specify RESTART_SOLUTION and the -r python option. To restart the optimizer but have each CFD simulation start from scratch, use the -r option and specify RESTART_SOLUTION=NO. . Restarting from a specified design (rather than the most recent design) is not currently provided as an option, but if you are willing to dig into things manually it may be possible via editing the project.pkl and results.pkl files. . In the future, please view our forum at http://www.cfd-online.com/Forums/su2/, you may find questions about configuration options etc that have already been answered, and a wider community will be able to respond.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/290#issuecomment-231421177:300,config,config,300,https://su2code.github.io,https://github.com/su2code/SU2/issues/290#issuecomment-231421177,2,['config'],"['config', 'configuration']"
Modifiability,"Thanks for the quick fix, Tim. . Kudos to Ruben and Heather for all of the exciting contributions packed in this pull request: this is the culmination of months of hard work on their sides, and the collaboration has been very fruitful (just count the commits!). The tests are passing now, but I have one small request before we merge everything. If you check out the details of the build in Travis CI, there are many warnings. Can you please clean these up? They are mostly unused variables and the like. Otherwise, things are looking pretty good to me...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/234#issuecomment-178807682:481,variab,variables,481,https://su2code.github.io,https://github.com/su2code/SU2/pull/234#issuecomment-178807682,1,['variab'],['variables']
Modifiability,"Thanks for the reply, I'll use feature_adap. Also very appreciated the required and optional command list.; As far as the run is concerned, it exits during the first mesh adaption (no error on the console though). The amg.out is quite long and there are a lot of info. Let me briefly summarize the case I'm testing:; - Supersonic inviscid 2D axialsymmetric cylinder.; - mesh adaption Mach based.; - no shape optimization.; - mesh adaption (PYADAP_FLOW_ITER= (2999, 4999, 6999)); - coarse mesh (PYADAP_COMPLEXITY= (20000, 60000, 120000)); - ITER = 10000. I would expect then the solver to start, reach iteration number 2999, adapt the flow mesh, then run until 4999, adapt, 6999 adapt, reach 10000 iterations.; In the :; `adapt/ini/log.out` ; as far as I can tell it reaches 10000 iterations, which is quite unexpected, maybe my problem arise due to mismatching options in the *.cfg file, is there any applicable *.cfg file to start from?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619502763:171,adapt,adaption,171,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619502763,7,['adapt'],"['adapt', 'adaption']"
Modifiability,"Thanks for the reviews guys. At the moment the optimization framework does not support the topology variables, there is a script in SU2_PY for this feature that runs a testcase with hardcoded parameters...; It is not an easy thing to run a tutorial for :/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/752#issuecomment-524374294:100,variab,variables,100,https://su2code.github.io,https://github.com/su2code/SU2/pull/752#issuecomment-524374294,1,['variab'],['variables']
Modifiability,"Thanks for the suggestion. ; That looks like a great alternative, however it's not compatible with the reason that I ended up making the change - I'm working in an environment that uses ibrun rather than srun or mpirun, and so I needed to control the mpi launcher command as well as adding additional flags. We've also had input at other times from people who wanted to control whether mpirun or mpiexec was used, which is currently defaulted to mpirun. ; I think that this change should be compatible with your bypass - you can either keep using your custom SU2_RUN variable, or set:; SU2_MPI_COMMAND = ""mpirun -machinefile=[machinefile] -env I_MPI_DEVICE rdma"" (replacing mpirun with whichever command works on your system).; What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/335#issuecomment-263686438:567,variab,variable,567,https://su2code.github.io,https://github.com/su2code/SU2/pull/335#issuecomment-263686438,1,['variab'],['variable']
Modifiability,"Thanks for the tips so far! By any chance do you know which part of the configuration/path search that results in the line that says:; ```; Run-time dependency python3 found: YES 3.6; ```. I can't figure out why it picks up my environment 3.7 (which has the mpi4py installed) correctly, but then somehow pulls in 3.6! Thanks very much!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-752694678:72,config,configuration,72,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-752694678,1,['config'],['configuration']
Modifiability,"Thanks for this PR; I think it is critical since our main working clusters are disconnected from the web. ; Meson/ninja work like a charm but only on my web-connected laptop.; I believe that this is not a singular case. ; However, the PR that you have mentioned was already merged into develop branch, but from a fresh clone of develop I had 2 problems (at least):; 1. the configure script was missing (I have copied it from a previous version); 2. The make failed due to missing reference to CHeatSolverFVP.cpp which actually; doesn't exist. So some work is still needed here. I shall try to see also what I can find out",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-598386726:373,config,configure,373,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-598386726,1,['config'],['configure']
Modifiability,"Thanks for this, Giulio, it looks like a nice implementation. And thank you for taking the time to clean up the original HLLC method a bit. It looks like you are basing the Jacobian terms on the Roe implementation (like we do in the ideal gas situation). Out of curiosity, will you be interested in having the Jacobians for the HLLC method directly?. Also, I noticed that there are some commented cout statements in the config post-processing (in the ideal gas condition check). Could you please remove those when you have a minute?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/209#issuecomment-152403831:420,config,config,420,https://su2code.github.io,https://github.com/su2code/SU2/pull/209#issuecomment-152403831,1,['config'],['config']
Modifiability,"Thanks for your comment, Ruben, ; this pull request was indeed also intended to open a discussion among developers regarding the proper nomenclature for interface markers and variables. This is just a preliminary step towards sliding meshes so this capabilities will remain hidden for a while since it is still under development. ; We'll have plenty of time to discuss how the Marker_fsi_interface tag should change.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/322#issuecomment-256055685:175,variab,variables,175,https://su2code.github.io,https://github.com/su2code/SU2/pull/322#issuecomment-256055685,1,['variab'],['variables']
Modifiability,"Thanks for your comments! Except for mixing plane and frozen rotor, sliding plane is also pretty common in turbomachinery simulation, it is indeed implemented in some, if not all, in-house codes. ; MRF is quite useful in turbomachinery simulation, expecially when we deal with transient simulation. Actually it is really rare to move the rotor mesh like in reality. One reason is that MRF is more efficient and accurate. Otherwise, you introduce new disturbance into the transient flow field every physical time step, which is not good. Because when you rotate the mesh, the velocity direction of each grid point inherited from last time step is not rotated. To make it more clear, you will have a flow going towards casing instead of parallel to, at the start of next physical time step. So you need more pseudo time steps to get a proper velocity variable. As a result, you get a zig-zag shape in the residual history.; I'm not actually moving the interface. The rotor mesh is not rotated, so as the interface at rotor zone. I'm just virtually rotating the rotor interface to find the new matching points between rotor and stator for each physical time step, so that the variable could be passed across the interface. In other words, only the passing variables are actually rotated. If I understand it correctly, there is no additional moving mesh restriction introduced here.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2173#issuecomment-1953783506:613,inherit,inherited,613,https://su2code.github.io,https://github.com/su2code/SU2/pull/2173#issuecomment-1953783506,8,"['inherit', 'variab']","['inherited', 'variable', 'variables']"
Modifiability,"Thanks for your fast answers. We are definitely going to use SU2 here and I wanted to be sure that it is working correctly. We will look to use its inverse design capability too (provide Cp target) . I have tried the test case on the NACA 0012 but it did not work.; From your CFD forum, it seems it could be related to the scipy library used. I will look more to be sure if I am doing things correctly before making any note. Francois. From: Thomas D. Economon [mailto:notifications@github.com]; Sent: Thursday, April 23, 2015 2:01 PM; To: su2code/SU2; Cc: Fortin, Francois; Subject: Re: [SU2] arrrow206 (#167). Thanks for the note! Indeed, we are aware of this issue, and we are already testing a patch that fixes it. We should be pushing the fix any day to the master, and I‚Äôll note it here/close the thread when that happens. > On Apr 23, 2015, at 5:40 AM, arrow206 <notifications@github.com<mailto:notifications@github.com>> wrote:; > ; > I am using SU2 version 3.2.8. I have tried all the steady-state Euler and Navier-Stokes test cases and they worked fine. However, none of the demos for Rotating (NACA and CAradonna) are working. Both are diverging. I have decreased the Courant number from 4 to 2 and increased the number of implicit iterations. There is still divergence. In the cfg file, I removed all the variables related to the dynamic mesh motion nad put a freestream of 0.8. SU2 did not diverge. Is there a specific setting to put in the cfg file in order to get convergence for the Rotating test cases; > ; > ‚Äî; > Reply to this email directly or view it on GitHub https://github.com/su2code/SU2/issues/167. ‚Äî; Reply to this email directly or view it on GitHubhttps://github.com/su2code/SU2/issues/167#issuecomment-95671956.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/167#issuecomment-95679198:1317,variab,variables,1317,https://su2code.github.io,https://github.com/su2code/SU2/issues/167#issuecomment-95679198,1,['variab'],['variables']
Modifiability,"Thanks for your feedback! I agree, `OMP_NUM_THREADS` is better than having the number of threads in the constructor. I adapted `disc_adj_flow` and `disc_adj_fea` for MPI and added both to parallel AD and hybrid AD tests.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1966#issuecomment-1472198978:119,adapt,adapted,119,https://su2code.github.io,https://github.com/su2code/SU2/pull/1966#issuecomment-1472198978,2,['adapt'],['adapted']
Modifiability,"Thanks for your hints. Now I understand that:; a) In `CPhysicalGeometry::LoadSurfaceElements`, the process finds those global markers that have at least one element adjacent to the subdomain of the process, and assigns local IDs. The function is called in the constructor of `CPhysicalGeometry`.; b) The transfer of quantities from one MPI process to another is done with additional markers of type `SEND_RECEIVE`. They are created e.g. in `CPhysicalGeometry::SetSendReceive` => after the constructor has been called. I also saw that the problem of mapping local (non-`SEND_RECEIVE`) markers to some global identifiers can be (and is) solved by the `string` `config->GetMarker_All_TagBound(val_marker)`. And probably there is no point in assigning a global ID to each pair of communicating `SEND_RECEIVE` markers.; ; So there is no need for the local<->global mapping that I intended to implement. Instead I will just remove the two members of `CPhysicalGeometry` and what depends on it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762234155:659,config,config,659,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762234155,1,['config'],['config']
Modifiability,"Thanks for your input, I think you make a good point. . The way I was thinking about it is that OBJECTIVE_FUNCTION would now serve the same purpose and have the same behavior across multiple methods - right now (in the current develop and master branch), OBJECTIVE_FUNCTION is used either when running SU2_CFD with the continuous or discrete adjoint method, and when running continuous_adjoint.py, while OPT_OBJECTIVE is used with shape_optimization.py.; Where this gets confusing is that shape_optimization.py automatically flips signs of certain objectives without ever informing the user that this is the case - right now the only way to find out that the sign is flipped is either to carefully read through the source code or run a case and figure it out from the results. ; This will get more confusing when adding in multiple objectives - I would like to at least move the sign change into the config file rather than hidden behind the scenes; however that does get dangerous as it will quietly change the optimization behavior for people who aren't aware of that modification.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-185479306:900,config,config,900,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-185479306,1,['config'],['config']
Modifiability,Thanks for your remarks. I already named the routines AD/FD to prepare for that. With an appropriate config option this also works then for the cont. adjoint. I'll try that first before merging.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/239#issuecomment-183855554:101,config,config,101,https://su2code.github.io,https://github.com/su2code/SU2/pull/239#issuecomment-183855554,1,['config'],['config']
Modifiability,"Thanks! I'll try and, if it works, then will change all config files to AOA",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/323#issuecomment-255648959:56,config,config,56,https://su2code.github.io,https://github.com/su2code/SU2/issues/323#issuecomment-255648959,1,['config'],['config']
Modifiability,"Thanks! Please feel free to add anything you consider to my PR. And‚Ä¶ do not worry too much (or at all)... we are doing this for free and for fun! As you know, after a major release we always find this kind of small bugs. The big picture is that thanks to you we all enjoy an awesome multipoint optimization capability! Thanks!. Best,; Francisco. > On Mar 25, 2018, at 6:04 PM, Heather Kline <notifications@github.com> wrote:; > ; > @hlkline commented on this pull request.; > ; > In SU2_PY/SU2/eval/design.py <https://github.com/su2code/SU2/pull/519#discussion_r176962282>:; > ; > > @@ -364,7 +364,7 @@ def obj_df(dvs,config,state=None):; > # For multiple objectives are evaluated one-by-one rather than combined; > # MARKER_MONITORING should be updated to only include the marker for i_obj; > # For single objectives, multiple markers can be used ; > - config['MARKER_MONITORING'] = marker_monitored[i_obj]; > + if (n_obj>1): config['MARKER_MONITORING'] = marker_monitored[i_obj]; > @fpalacios <https://github.com/fpalacios> yes, I commented a bit too quickly; I do see the behavior that you mention. I think the line previously mentioned helps with getting the value of the objective but not the gradient.; > While I was testing this on my end I also noticed that there is an issue if you list the same objective multiple times (for example, if you wanted to weight the drag contribution from one surface more than another), where since it has the same key the previous dict entry is overwritten. Do you mind if I add an error catching that to your PR?; > ; > I am taking a look back through it but so far I think your solution will be good - and better to fix the performance in master now and worry about elegant improvements in the develop branch.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/519#discussion_r176962282>, or mute the thread <https://github.com/notifications/unsubscribe-auth",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/519#issuecomment-376023020:618,config,config,618,https://su2code.github.io,https://github.com/su2code/SU2/pull/519#issuecomment-376023020,3,['config'],['config']
Modifiability,"Thanks!; If there's a current branch already being used for fixing minor issues, I wouldn't mind throwing in a couple of fixes to address compiler warnings that have started accumulating (mostly unused or uninitialized variables) into whichever branch that is rather than starting a new branch just for compiler warnings.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/341#issuecomment-264956099:219,variab,variables,219,https://su2code.github.io,https://github.com/su2code/SU2/issues/341#issuecomment-264956099,1,['variab'],['variables']
Modifiability,"Thanks, @clarkpede, merging now. We can keep the extended convo going with issue #487.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/492#issuecomment-356504525:49,extend,extended,49,https://su2code.github.io,https://github.com/su2code/SU2/pull/492#issuecomment-356504525,1,['extend'],['extended']
Modifiability,"Thanks, Edwin. I had originally toyed around with this too, but I thought using the system-specific versions would be most portable at first. However, for something this simple, I agree that we should just do it ourselves. I have reused your implementation with some minor modifications. Could you please just confirm that the code posted above is yours, you are ok with me adapting it, and that I can name you as an author at the top of the file (I have added you there)?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/562#issuecomment-414092502:123,portab,portable,123,https://su2code.github.io,https://github.com/su2code/SU2/pull/562#issuecomment-414092502,4,"['adapt', 'portab']","['adapting', 'portable']"
Modifiability,"Thanks, I‚Äôll take a look at that before the weekend,. Best,; Francisco. > On Mar 2, 2016, at 8:03 PM, Thomas D. Economon notifications@github.com wrote:; > ; > Thanks for the fixes, Francisco. The continuous adjoint tests are now failing, but I am guessing that it is something simple with the changes to the config option. Can you please take a look when you have a moment?; > ; > Couldn't agree more about keeping an eye on the Python scripts. We'll chat about it this week at the developer meeting (we need regressions for the Python scripts). More on that to come.; > ; > ‚Äî; > Reply to this email directly or view it on GitHub https://github.com/su2code/SU2/pull/244#issuecomment-191571633.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/244#issuecomment-191590831:309,config,config,309,https://su2code.github.io,https://github.com/su2code/SU2/pull/244#issuecomment-191590831,2,['config'],['config']
Modifiability,"Thanks, Tim. Adding flexibility to the FFD is a great contribution. I was just going through the changes and I have a couple of questions:; 1. I noticed that you have added AD as an option for computing the geometric sensitivity component (change in the surface location due to a delta change in the design variable) that multiplies the adjoint sensitivity. Is there a way to make this usable for the continuous adjoint too rather than using finite differencing? This assumes that the user has built the AD version, even though they use the continuous adjoint.; 2. On a related note (I think), is the finite differencing that is currently used for computing the geometric sensitivity the only roadblock to arbitrary FFD movements for the continuous adjoint?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/239#issuecomment-183462794:307,variab,variable,307,https://su2code.github.io,https://github.com/su2code/SU2/pull/239#issuecomment-183462794,2,['variab'],['variable']
Modifiability,"Thanks, that was very helpful. . I have another question related to this., Would you suggest keeping all the control points as design variables or should the number of design variables be very selective to ensure that correct optimization direction is achieved? I have 216 control points on my FFD box, I can reduce them if I put in some extra effort in indexing them. Is it worth it?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/984#issuecomment-628725910:134,variab,variables,134,https://su2code.github.io,https://github.com/su2code/SU2/issues/984#issuecomment-628725910,2,['variab'],['variables']
Modifiability,"Thanks; The discrete adjoint can also be used with combined objectives, and uses the same config specifications. It may not be clear from this pull request since this functionality was added in a previously - when multiple objectives (limited to objectives defined inside the CFD solver) are specified, they are added together (with specified weights) in the CFD solver into the 'COMBO' output to history. This variable is registered for the discrete adjoint solver. ; An example of this can be seen in the serial_regression_AD.py, test name 'discadj_multi_py'.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/385#issuecomment-296409557:90,config,config,90,https://su2code.github.io,https://github.com/su2code/SU2/pull/385#issuecomment-296409557,4,"['config', 'variab']","['config', 'variable']"
Modifiability,"That does not look like an MPI problem (yup automake + preconfigure.py is the legacy system). The probable problem there is that your OpenBLAS was not build with support for LAPACK functions (the undefined references in the error messages from the linker). If you are building OpenBLAS from source there is an option to provide LAPACK support (if I recall correctly, this is the default so I'm guessing you are using what the operating system provides).; The best solution is to get OpenBLAS with LAPACK support, alternatively:; - Install LAPACK for your operating system and below line 155 of meson.build add ```su2_deps += dependency('lapack')``` (this will use pkg config).; - Delete line 153 of meson.build, i.e. keep BLAS but disable LAPACK, this can either make what you are doing much slower, or have no difference at all...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721373702:668,config,config,668,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721373702,1,['config'],['config']
Modifiability,"That is a bit of a necessary evil, I would leave a warning in the config explaining exactly what you just did.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1559#issuecomment-1067934368:66,config,config,66,https://su2code.github.io,https://github.com/su2code/SU2/pull/1559#issuecomment-1067934368,1,['config'],['config']
Modifiability,"That's a good point. Maybe this functionality would be better as an optional config flag rather than the default behavior.; Alternatively, there could be a post-processing script to concatenate history files given a set of files and information about what the restart-writing frequency was.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/99#issuecomment-103252237:77,config,config,77,https://su2code.github.io,https://github.com/su2code/SU2/issues/99#issuecomment-103252237,1,['config'],['config']
Modifiability,"The ""Why ignore turb_ke?"" comment originated in the refactoring effort of #1127 .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1551#issuecomment-1054499366:52,refactor,refactoring,52,https://su2code.github.io,https://github.com/su2code/SU2/issues/1551#issuecomment-1054499366,1,['refactor'],['refactoring']
Modifiability,"The FluidDriver name was choose cause it is now used to run multi-zone simulation involving fluid zones only. There are no limitations to sliding meshes though however that's one way of coupling zones. Now, mixing plane simulations uses the fluidDriver too so I think we should stick with something general related to fluids.; Perhaps someone else has any idea of what the name should be?. Salvo,; actually it would be nice to move the mixing plane structure within the interpolator class in the future, maybe we can have a talk about that.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/322#issuecomment-255677842:186,coupling,coupling,186,https://su2code.github.io,https://github.com/su2code/SU2/pull/322#issuecomment-255677842,1,['coupling'],['coupling']
Modifiability,"The Travis config should probably be updated to use Miniconda, running tests with both a Python 2 and Python 3 environment. Could take some influence from https://github.com/mwaskom/seaborn/blob/master/.travis.yml",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/424#issuecomment-321431468:11,config,config,11,https://su2code.github.io,https://github.com/su2code/SU2/pull/424#issuecomment-321431468,1,['config'],['config']
Modifiability,"The _amgio extension should be built by default. I haven't had any issues on any of the machines I've built on, so I appreciate the feedback. Just curious, are you running with python >=3.7? The shebang in all the SU2 python scripts; ```; #!/usr/bin/env python; ```; uses whatever python is set to in your environment variables, but pyamg/_amgio will only build/run with python >=3.7. Could you also check if the _amgio extension was installed in your site-packages (probably located in ~/.local/lib/python3.x/site-packages)?. If it didn't build/install, you could go into extensions/AMGIO/su2io and run; ```; python3 setup.py build_ext && python3 setup.py install; ```; If it did build/install, try the command; ```; python3 $SU2_RUN/mesh_adaptation_amg.py -f invCyl.cfg -n 6; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619334494:318,variab,variables,318,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619334494,2,['variab'],['variables']
Modifiability,"The added lines are a combination of the explicit Euler in CHeatSolver and the implicit Euler in CScalarSolver. Do you consider this approach to be correct?. For the testcase `SU2/TestCases/rans/naca0012/turb_NACA0012_sst.cfg`, explicit Euler for both flow and turbulence equations and CFL=0.1 converges from the restart solution. Some more details:; - `CHeatSolver` does something with `CVariable::Res_TruncError`, which is related to multigrid. Maybe additional adaptations are necessary here.; - `PrepareExplicitIteration` was copied from `PrepareImplicitIteration`, except for the computation of the matrix of the linear system. We can remove duplicate code here.; - `CompleteImplicitIteration` could be renamed as ""add `LinSysSol` to solution""; .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1435#issuecomment-966491089:464,adapt,adaptations,464,https://su2code.github.io,https://github.com/su2code/SU2/pull/1435#issuecomment-966491089,1,['adapt'],['adaptations']
Modifiability,"The answer to that is very simple. Look in the data set that is present in the szplt file. The z-coordinate is not in there anymore and consequently Tecplot takes the next variable, the density in this case, as the z-coordinate. Consequently you git a picture like you showed. The same is true for the field solution. Also there the z-coordinate is not present in the szplt file and hence you get a rather funny picture when you attempt to visualize this in 3D. But 2D visualization works just fine. In contrast the z-coordinate is stored in the vtu files, because the standard requires that. Hence you can still visualize this in 3D. Could you try a truly 3D test case to see if that visualizes fine? If so, please let us know such that we can close this issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1182#issuecomment-771407798:172,variab,variable,172,https://su2code.github.io,https://github.com/su2code/SU2/issues/1182#issuecomment-771407798,2,['variab'],['variable']
Modifiability,"The behavior can be seen in the backward facing step case, as shown in a snapshot below. As currently set up, `Roe_Dissipation` is equal to `f_d` from the original DDES paper. So `Roe_Dissipation` should:. + Go to 0 in attached boundary layers; + Go to 1 in regions with resolved turbulent fluctuations. Here's a comparison of the `Roe_Dissipation` before and after this PR:. ![viscosity_comparison](https://user-images.githubusercontent.com/13340225/45117324-e5f36600-b11a-11e8-8194-fac45dff0edf.png). Here's the same case, but zoomed in at the step:. ![viscosity_comparison_zoom](https://user-images.githubusercontent.com/13340225/45117474-5ac6a000-b11b-11e8-94ab-5bd203aa5845.png). With this PR, the model does indeed go to 0 near the walls and go to 1 in the highly unsteady (""LES"") region after the step.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/575#issuecomment-418860081:237,layers,layers,237,https://su2code.github.io,https://github.com/su2code/SU2/pull/575#issuecomment-418860081,1,['layers'],['layers']
Modifiability,"The canonical configuration file, 'config_template.cfg', is located in the source directory. It lists all of the commands and usually, at least for the configuration parameters I've been interested in, allowable values. Another good resource is the online discussion forum:. http://www.cfd-online.com/Forums/su2/. There is also the Github wiki for this project in the menu to the right >>>>>>. There is the source code. It was hard to write, so it might be hard to read, but the information is there. Finally, as an open source project, this is an area where you could contribute for fame & fortune. You could collect the information from the various sources into a coherent document.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/183#issuecomment-111755690:14,config,configuration,14,https://su2code.github.io,https://github.com/su2code/SU2/issues/183#issuecomment-111755690,2,['config'],['configuration']
Modifiability,"The changes to SU2 are mostly minor. There are some adaptions regarding external functions, due to interface changes from CoDiPack 1 to CoDiPack 2. The `callPrimalFuncWithADType` is necessary for correct output handling. Passing the external function to it is the intended usage, therefore the encapsulation of the respective code block in a lambda expression. `callPrimalFuncWithADType` also takes care of the tape activity, which was previously spelled out in SU2.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1903#issuecomment-1451814899:52,adapt,adaptions,52,https://su2code.github.io,https://github.com/su2code/SU2/pull/1903#issuecomment-1451814899,1,['adapt'],['adaptions']
Modifiability,"The config and mesh files can be downloaded from https://seafile.rlp.net/d/bb0fbb16eb414263b642/ and more information on them is provided [above](https://github.com/su2code/SU2/issues/1414#issue-1036103020). . I ran the four cases in the current develop branch at 58cf2d4a3829e5a60c35eda2a788b1107338e850, configuring the build with `--buildtype=debug`. . **`SU2_CFD singlezone.cfg` in `issue_simplified/singlezone`** gives; ```; +------------------------------------------------------------------------------------------+; | Inner_Iter| rms[Rho]| rms[k]| rms[w]| CL| CD| LinSolRes|; +------------------------------------------------------------------------------------------+; | 0| -3.131336| -3.358218| 2.356417| 0.021774| 45.825257| -2.955766|; ...; | 12377| -11.999782| -15.033189| -10.208063| 0.003434| 0.989679| -4.378694|; | 12378| -12.000141| -15.033858| -10.208411| 0.003434| 0.989679| -4.378353|. ----------------------------- Solver Exit -------------------------------; All convergence criteria satisfied.; ```. **`SU2_CFD multizone.cfg` in `issue_simplified/multizone`** gives; ```; +--------------------------------------+; | Multizone Summary |; +--------------------------------------+; | Outer_Iter| avg[bgs][0]| avg[bgs][1]|; +--------------------------------------+; | 0| -0.259741| -0.741089|; | 1| -1.224321| -2.240439|. ...; | 841| -0.356891| 0.285076|; | 842| -0.124937| 0.178422|. Error in ""void CSolver::SetResidual_RMS(const CGeometry*, const CConfig*)"":; -------------------------------------------------------------------------; SU2 has diverged (NaN detected).; ------------------------------ Error Exit -------------------------------; ```. **`mpirun SU2_CFD mz-0.cfg` in `issue_complicated/singlezone`** with 24 MPI ranks (because it needs so many iterations) gives; ```; +----------------------------------------------------------------+; | Inner_Iter| Time(sec)| rms[Rho]| CL| CD|; +----------------------------------------------------------------+; | 0| 4.5727e-02| -",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1414#issuecomment-1432681206:4,config,config,4,https://su2code.github.io,https://github.com/su2code/SU2/issues/1414#issuecomment-1432681206,2,['config'],"['config', 'configuring']"
Modifiability,"The config file is a start, but for a thorough investigation a full test case, i.e. including a grid, is preferable.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/533#issuecomment-388726367:4,config,config,4,https://su2code.github.io,https://github.com/su2code/SU2/issues/533#issuecomment-388726367,1,['config'],['config']
Modifiability,"The configure looks good to me now. Did you do the test for the viscous ONERA M6? It would be good to know what the speed up is here. Anyway, if you can merge with the latest develop version, it can be merged in as far as I am concerned.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/543#issuecomment-416828129:4,config,configure,4,https://su2code.github.io,https://github.com/su2code/SU2/pull/543#issuecomment-416828129,1,['config'],['configure']
Modifiability,"The corners warning is fine. I added the ability to specify corner points for sharp features that the user wants to maintain. For example, in an airfoil test case I want to make sure the sharp trailing edge at node 512 is maintained, so I can manually add; ```; NCORNERS= 1; 1 512; ```; to the end of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:758,adapt,adaptation,758,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,3,['adapt'],['adaptation']
Modifiability,"The current SU2 implementation checks if the array of variables contains the velocity and gives the index to the gradient calculator. You can give the gradient calculator the starting index and ending index as well.. So suppose you have an array of M variables, you could split it into 2 arrays, each containing a velocity vector, so array [0,..,N] and array [N+1,..,M], and you call greengauss twice.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2285#issuecomment-2130316902:54,variab,variables,54,https://su2code.github.io,https://github.com/su2code/SU2/issues/2285#issuecomment-2130316902,2,['variab'],['variables']
Modifiability,"The current version of the HLLC solver (the one in the develop branch) computes the jacobians terms using Roe approach. The implementation I'm testing uses instead the direct formulation. This of course changes a lot the behaviour of the implicit scheme which now seems to be less robust, at least for this test case.; Today I made some tests and what I propose is to modify the config file in order to run a non-dimensional simulation with a CFL = 1.0. Would that be possible?; Tomorrow I will look again for bugs in my branch. Just another small question: I saw that in the for cycle at line 3674 of solver direct mean (of develop branch), in the part regarding the low mach number correction, vel_i_corr and vel_j_corr are declared as 3 element arrays. The code cycle over [iDim+1] for those arrays. Could this bring to a vector overflow in the 3D case?. Cheers,; Giulio",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/232#issuecomment-182496475:379,config,config,379,https://su2code.github.io,https://github.com/su2code/SU2/pull/232#issuecomment-182496475,1,['config'],['config']
Modifiability,"The developer who worked on it was @frx-wintermute in #1951 ; A lot of those packages are header-only, not compiled libraries, if you use different versions than the ones we use in our regression tests you have no guarantees that the code will work properly, and it seems you are mostly interested in stability.; If you want to make changes to the meson.build script to look for local versions of libraries like cgns, parmetis, etc. see e.g. https://github.com/su2code/SU2/discussions/2064; We also have examples like this:; ```; pastix_dep = dependency('pastix', required: false). if not pastix_dep.found(); pastix_root = get_option('pastix_root')+'/install'; scotch_root = get_option('scotch_root')+'/lib'; pastix_dep = declare_dependency(include_directories: pastix_root,; link_args: [ '-L../'+pastix_root, '-L../'+scotch_root,; '-lpastix', '-lscotch', '-lptscotch', '-lptscotcherr',; '-lm', '-lrt', '-lpthread']); endif; su2_deps += pastix_dep; ```; where we try to use pkg-config and fall back to specifying paths. I recommend using pkg-config whenever possible.; If either you or @frx-wintermute are interested in complementing the feature by adding an option to prefer system libraries (via pkg-config, no paths because 99.9% of users will not know what to do) instead of the versions shipped with SU2, please go ahead and open a PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1646018871:978,config,config,978,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1646018871,3,['config'],['config']
Modifiability,"The dimensional inconsistency comes from the multiplicity of the normal velocity eigenvalue and the manipulation Hirsch does with the corresponding eigenvectors in order to obtain a formulation that is valid for any normal vector. When you use the P matrix to form the characteristic variables, the dimensional inconsistency disappears again, as it should. Never looked at it this way. Thanks for clearing this up Francisco.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/423#issuecomment-322124810:284,variab,variables,284,https://su2code.github.io,https://github.com/su2code/SU2/issues/423#issuecomment-322124810,2,['variab'],['variables']
Modifiability,"The discrete adjoint may still run with the chosen objective, since that is entirely defined within the C++, but some additional steps may be needed to run your objective with the Python framework. First, I recommend that you verify in your primal solve that you can compute one of your chosen objectives such as ENTROPY_GENERATION, and that it appears in the history file, since this is a prerequisite for running shape optimization with the Python framework. You should be able to follow details of the old ENTROPY_GENERATION objective if you look in the COutputLegacy::SpecialOutput_Turbo() routine in the legacy output. Note that you may need to do some work to connect this for your particular problem, since as mentioned, the turbomachinery related features are currently being brought into line with the most recent version of the software, and the routine may not be called by default. Once you have your desired objectives being computed and printed to the history file, give the updateHistoryMap.py script a look so that you can update the fields that the python framework can handle. As for custom objectives, there is a variable within the fluid solvers named Total_Custom_ObjFunc that will be differentiated for you if you use it compute a custom expression within the solver class (you can do this in multiple places within the solver class, but make sure it is called). Same suggestions apply for making sure that you can compute the custom objective, it appears in the history file, and that the python script is updated to read that particular field during optimization.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/889#issuecomment-609959747:1132,variab,variable,1132,https://su2code.github.io,https://github.com/su2code/SU2/issues/889#issuecomment-609959747,1,['variab'],['variable']
Modifiability,"The discrete adjoint solvers (all of them, with deforming or static grids) compute sensitivities with respect to displacing individual nodes, the only projection done on the surface sensitivities is onto the surface normal (my previous reply was incomplete).; But this is just for post processing, this manipulation still does not consider that moving a surface node (e.g. through an FFD variable) also moves internal nodes, due to the _design mesh deformation_ (as opposed to FSI deformation for example). The volume sensitivity projection of SU2_DOT_AD is the differentiation of SU2_DEF. For deforming grid cases this step is still required, the best way I can put it in words is that the results still depend on the initial / reference coordinates of the grid, if you move any point of the initial grid you change the results, as you change not only the deformed final position of the point, but also the way the mesh itself responds to the physical (e.g. FSI) surface displacements that it is subject to.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1017#issuecomment-640078507:388,variab,variable,388,https://su2code.github.io,https://github.com/su2code/SU2/issues/1017#issuecomment-640078507,1,['variab'],['variable']
Modifiability,"The doxygen at that link is very out of date, we no longer update it. ; I meant the doxygen at https://github.com/su2code/Documentation/tree/master/Doxygen; The file there will allow you to get the doxygen documentation for whichever version of the code you have on your computer, as it uses comments within the code to generate the documentation. The output where I clipped the above example is in >Modules > Description of the Configuration Options. . In reading the .cpp you have to do some searching, as the options are stored in a map in another file (option_structure.hpp). But in terms of those maps, yes, they do have all the options.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/277#issuecomment-221539456:429,Config,Configuration,429,https://su2code.github.io,https://github.com/su2code/SU2/issues/277#issuecomment-221539456,1,['Config'],['Configuration']
Modifiability,The dummy layer is what we used before version 7 and moved away from it for simplicity.; Two layers doesn't sound possible for unstructured meshes.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2038#issuecomment-1557818415:93,layers,layers,93,https://su2code.github.io,https://github.com/su2code/SU2/pull/2038#issuecomment-1557818415,2,['layers'],['layers']
Modifiability,"The fix is not as simple, using the strategy from #1631 makes it worse.; Intersection with symmetry/euler look ok, so the best is to extend the domain...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1639#issuecomment-1132302976:133,extend,extend,133,https://su2code.github.io,https://github.com/su2code/SU2/issues/1639#issuecomment-1132302976,2,['extend'],['extend']
Modifiability,The important group to keep together is the solution the rest doesn't really matter.; We should change the restart functions to look for variable names instead of relying on the assumed position.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1985#issuecomment-1484008699:137,variab,variable,137,https://su2code.github.io,https://github.com/su2code/SU2/pull/1985#issuecomment-1484008699,1,['variab'],['variable']
Modifiability,"The jones_turbocharger_restart case was set to use adaptive CFL coupled with CFL turbulence Reduction thus changes in the results are expected , I ran the case a few thousand steps and the case seems to converge. Therefore I am allowing myself to change test results leaving the configuration setting as is.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2295#issuecomment-2185970973:51,adapt,adaptive,51,https://su2code.github.io,https://github.com/su2code/SU2/pull/2295#issuecomment-2185970973,2,"['adapt', 'config']","['adaptive', 'configuration']"
Modifiability,"The motivation of having it as the default was to make the code as user-friendly as possible (fewer knobs exposed in the config), but options are good of course. I would propose then that we add an option for the reconstruction gradient, something like:; ```; NUM_METHOD_GRAD_RECON= LEAST_SQUARES; ```; to let users decide if they want a separate option for the reconstruction gradients. If it does not appear, then the default is to use the same method as defined by NUM_METHOD_GRAD without a second gradient computation (basically what we have now). The nice thing about that is we can even try out other combos such as WLS+GG for the two different gradients. I will throw an error if users try to use LSQ for the viscous/source gradients, to avoid accuracy issues. What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-533259202:121,config,config,121,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-533259202,2,['config'],['config']
Modifiability,"The native mesh adaption was deprecated. The amg interface is in development, you can re-open some of the issues where it is mentioned to ask new questions (that way all ""documentation"" stays in one place).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1143#issuecomment-751685783:16,adapt,adaption,16,https://su2code.github.io,https://github.com/su2code/SU2/issues/1143#issuecomment-751685783,1,['adapt'],['adaption']
Modifiability,The openblas_config line looks exactly like mine...; Are there any lapack-???.pc files in your system?; If you run `pkg-config openblas --version` is the output 0.3.8 ?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631996848:120,config,config,120,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631996848,1,['config'],['config']
Modifiability,"The preconfigure in the root of the repo, use the develop branch.; Does your system use pkg config for modules?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1645646835:92,config,config,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1645646835,1,['config'],['config']
Modifiability,The problem is that the path where automake looks for mpi4py is hardcoded at the moment. This will also eventually be changed soon. . A workaround is to add the path manually in `SU2_PY/pySU2/Makefile.am` to the `MPI4PY_INCLUDE` variable. Then run `automake` in the main folder and then the preconfigure script again.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/447#issuecomment-333100920:229,variab,variable,229,https://su2code.github.io,https://github.com/su2code/SU2/issues/447#issuecomment-333100920,1,['variab'],['variable']
Modifiability,"The problem that caused Travis to fail is related to a broader issue:; There are several configuration parameters that have a default value (like REYNOLDS_LENGTH =1.0 by default). This means that it is legitimate not to include these parameters in the cfg file.; However, the Python environment is oblivious to these defaults values: if a parameter is missing in the cfg file, then it is not a member of the Python list config. I think it is more consistent to set the default values also in the Python environment. I shall be happy to create such a pull request. However, before I do that I'd like to check if this has not been set intentionally, for a logic that escapes me. ; I shall appreciate a comment about that.; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-376941826:89,config,configuration,89,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-376941826,2,['config'],"['config', 'configuration']"
Modifiability,"The routine you are looking for is probably this one:. `void CPhysicalGeometry::SetGridVelocity(CConfig *config, unsigned long iter)` geometry_structure.cpp:14760 (cannot paste a link, the file is too big)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/766#issuecomment-524363232:105,config,config,105,https://su2code.github.io,https://github.com/su2code/SU2/pull/766#issuecomment-524363232,1,['config'],['config']
Modifiability,"The solver with the closest functionality to what you are trying to do is the elasticity solver, it may be worth having a look there. But in a nutshell there the variables we want to differentiate are held by (members of) the discrete adjoint solver, they are reset before being registered as inputs to clear the derivative information, and it is important that they are left alone during the recording phase.; You will see that the adjoint iteration class for this solver then needs to update the numerics classes (in SetDependencies), at least for the source term the SA coefficients are set in the constructor of the corresponding numerics so maybe this step is missing?; The key point is that whenever a coefficient is used you need to be able to trace its value back to the original variable you registered.; Also the derivatives should be extracted in the same order they were registered, and you cannot access them multiple times by calling ""GetDerivative"" on them repeatedly (not 100% sure if this restriction still exists after the update of CoDi).; If none of this makes sense point me to branch you are working on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-491910935:162,variab,variables,162,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-491910935,4,['variab'],"['variable', 'variables']"
Modifiability,"The source term is being computed, but it is zero because the momentum is; zero.; If run a few iterations with MACH > 0 and then restart the simulation; putting it back to 0 are the results ok?. javsu <notifications@github.com> escreveu no dia sexta, 22/05/2020 √†(s); 14:01:. > I tried to give a non-zero Mach Number in config file and it succeed. I; > obtained a rotary solution. However, giving a non-zero Mach Number would; > mean it is not hover anymore. Is there anyway to initialize this problem; > without given any forward speed ?; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/997#issuecomment-632678700>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN3CDDHXXHNYCNHJLDLRSZZSLANCNFSM4NHBR7DQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/997#issuecomment-632683533:320,config,config,320,https://su2code.github.io,https://github.com/su2code/SU2/issues/997#issuecomment-632683533,1,['config'],['config']
Modifiability,The standard way should use pkg-config. I see that pastix and BLAS both provide the required files. Should be quite easy actually to add them.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/771#issuecomment-525694678:32,config,config,32,https://su2code.github.io,https://github.com/su2code/SU2/pull/771#issuecomment-525694678,1,['config'],['config']
Modifiability,"The vtm file and the folder where the data is stored are now called like the config file (called ""case name""). Futhermore the files inside of the folder are organized like the data. That means after a successful run, the working directory looks like that (omitting history files):; ```; ‚îú‚îÄ‚îÄ cht_2d_3cylinders; ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ zone_0; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cylinder_outer1.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cylinder_outer2.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cylinder_outer3.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ farfield.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Internal.vtu; ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ zone_1; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core1.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cylinder_inner1.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Internal.vtu; ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ zone_2; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core2.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cylinder_inner2.vtu; ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Internal.vtu; ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ zone_3; ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core3.vtu; ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cylinder_inner3.vtu; ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Internal.vtu; ‚îú‚îÄ‚îÄ cht_2d_3cylinders.cfg; ‚îú‚îÄ‚îÄ cht_2d_3cylinders.vtm; ‚îú‚îÄ‚îÄ solid_cylinder1.cfg; ‚îú‚îÄ‚îÄ solid_cylinder2.cfg; ‚îî‚îÄ‚îÄ solid_cylinder3.cfg. ```. And the structure in Paraview:. ![cht_example](https://user-images.githubusercontent.com/4933860/71916713-d6f14d80-317e-11ea-9b78-8592d633a067.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/845#issuecomment-571701938:77,config,config,77,https://su2code.github.io,https://github.com/su2code/SU2/pull/845#issuecomment-571701938,1,['config'],['config']
Modifiability,"There are certainly parameters in the config, and if you had posted yours I could give advice without having to write a bloody essay on all of them. DEFORM_STIFFNESS_TYPE= WALL_DISTANCE // always; DEFORM_COEFF= ""nu"" // the Poisson ratio, default 1E6, you can also try a small value 0.2-0.3; DEFORM_LIMIT= ""R"" // clamps domain points with wall distance greater than ""R"", this improves the condition of the stiffness matrix, which makes it easier for the linear solver to converge.; DEFORM_CONSOLE_OUTPUT= YES // so you can see if the linear solver converges; DEFORM_NONLINEAR_ITER= 1 // always; DEFORM_LINEAR_SOLVER = FGMRES // or CONJUGATE_GRADIENT if memory becomes a problem, i.e. if GMRES does not converge in 100-200 iterations.; DEFORM_LINEAR_SOLVER_PREC = ILU // always, always, never anything else.; DEFORM_LINEAR_SOLVER_ERROR= 1e-9 // at least, I usually set it to 1e-10; DEFORM_LINEAR_SOLVER_ITER= 200 // or a much larger number when using CG since its memory usage does not depend on number of iterations",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1026#issuecomment-645265175:38,config,config,38,https://su2code.github.io,https://github.com/su2code/SU2/issues/1026#issuecomment-645265175,1,['config'],['config']
Modifiability,There are other boundary-variable combinations where the gradients are known and can be enforced.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2285#issuecomment-2450118831:25,variab,variable,25,https://su2code.github.io,https://github.com/su2code/SU2/issues/2285#issuecomment-2450118831,1,['variab'],['variable']
Modifiability,"There are some tricks possible to add the `<<` operator. Not all the code base needs refactoring. We can have both styles for the future as `()` syntax is very powerful thanks to fmtlib. . ```cpp; cout << ""Values at node<< nodeId << "" are "" << val[0] << "" "" << val[1] << "" "" << val[3] << endl;; ```. can be transformed directly to . ```cpp; LOG(""Values at node {} are {}"",nodeId,val);; ```. Equivalently . ```cpp; LOG << fmt::format(""Values at node {} are {}"",nodeId,val); ; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1991#issuecomment-1488340098:85,refactor,refactoring,85,https://su2code.github.io,https://github.com/su2code/SU2/issues/1991#issuecomment-1488340098,1,['refactor'],['refactoring']
Modifiability,"There are two sources for those, `atomicAdd` which is used in dot products with CSysVectors (so it affects the linear solvers). And in the NK solver to compute the norm of the solution.; The other less obvious source is SU2_OMP_CRITICAL, critical sections do not have a guaranteed ordering. We use these to compute the RMS residuals, and those influence the CFL adaptation.; AFAIK the only way around this is to store the result of each thread into a vector visible by all threads, and then have a single thread compute the total.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2340842669:362,adapt,adaptation,362,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2340842669,1,['adapt'],['adaptation']
Modifiability,"There is already a lot of nice work here in identifying the meaningful differences between different SA variants and reducing code duplication, so let's checkpoint this into develop before some other changes are made to turbulence models.; The alternative way to specify corrections/variants in the config can be done in a different PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1413#issuecomment-1053528343:299,config,config,299,https://su2code.github.io,https://github.com/su2code/SU2/pull/1413#issuecomment-1053528343,1,['config'],['config']
Modifiability,"There is currently an option to control the name of the restart and solution files in config files (see below). That seems to be what you are describing, but did you mean that you want the intermediate restart files (the ones that are written every WRT_SOL_FREQ iterations) to have a third, distinct name? Or something else?. % Restart flow input file; SOLUTION_FLOW_FILENAME= solution_flow.dat; % Output file restart flow; RESTART_FLOW_FILENAME= restart_flow.dat",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/17#issuecomment-29596043:86,config,config,86,https://su2code.github.io,https://github.com/su2code/SU2/issues/17#issuecomment-29596043,1,['config'],['config']
Modifiability,"There is no conflict because both here and there the files were moved, to SU2_FSI and FSI_tools respectively.; What there is now is a massive amount of duplication, if you and Nicola want to try and fix that, it would be the ideal outcome for SU2. I made the final changes Tom and I had requested on this PR because it did not seem like this was going anywhere... But if you are still working on it, well do what you think is best, I don't have time to figure out how to get rid of the duplication. ""develop"" needs to work as a staging area, if you have a chunk of work that can be merged, without breaking compilation, testcases, or interfering too much with the work of other folks, then it should be merged ASAP to avoid this kind of situation.; For example refactoring this ""FSIInterface.py"" file into direct and adjoint should have possibly been a PR by itself to set the stage for the rest. Anyway, regarding the initial proposed changes this looks good to me.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/902#issuecomment-743422907:761,refactor,refactoring,761,https://su2code.github.io,https://github.com/su2code/SU2/pull/902#issuecomment-743422907,1,['refactor'],['refactoring']
Modifiability,"There is one case that has different residuals, the Jones turbocharger case. The other case is a know problem that is fixed in another PR. ; So you should check if this case uses adaptive CFL and CFL_REDUCTION_TURB, because that is when the residuals could be different. Please also check if it still converges, because it looks like it 's not. So maybe it needs another CFL number?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2295#issuecomment-2181198847:179,adapt,adaptive,179,https://su2code.github.io,https://github.com/su2code/SU2/pull/2295#issuecomment-2181198847,1,['adapt'],['adaptive']
Modifiability,"There is one thing that is not mentioned yet, which is rather important. I assume we are talking RANS here. In that case it does not make sense to ramp up the CFL number to values higher than 50 or so with the current segregated setup of mean flow, turbulence and possibly transition solvers (not even talking about multidisciplinary problems). The segregated character makes it extremely flexible for adding additional models, but it does not work for a full blown Newton solver. In that case you have to switch to a strong coupling between the mean flow and the turbulence solver, which will require a significant change in the data-structures. Also, computing the exact Jacobians for a second order scheme is not trivial and as Tom mentioned, it may be needed to use AD tools for that, which makes it quite costly. Furthermore the memory usage for storing the exact Jacobians is very big. An alternative would be to use a matrix free approach, i.e. use a Frechet derivative for the matrix vector products in the Krylov solver (although you still need a good preconditioner). When a coupled with a turbulence model (especially k-omega type models), this will be extremely sensitive to the epsilon parameter you have to choose. There are ways around this, e.g. using dual numbers and possibly with CoDiPack, but these will increase your computational cost by at least a factor of 4. I think it is definitely worth trying, but seen all the pitfalls you may run into, you may want to test things out first with a test solver before implementing it in SU2 itself. My two cents,. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460908007:389,flexible,flexible,389,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460908007,2,"['coupling', 'flexible']","['coupling', 'flexible']"
Modifiability,"There is only one efficient way to move data between memory and registers, via `load` and `store` instructions (they do come in multiple flavors). That is, pointing to a memory location and reading or writing N elements of contiguous data.; It is not the only way, it is also possible to `gather` and `scatter` data. That is populating the register from non-contiguous locations and vice versa. This is about one order of magnitude slower, to the point where if the computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead re",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:2204,variab,variables,2204,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['variab'],['variables']
Modifiability,"There was a lot of talk about refactoring the shape optimization framework to be able to work completely in memory.; I think the idea was not to have more drivers but simply to have more granularity such that you could manipulate the geometry from python (without writing it to files).; We also wanted introspection, i.e. you could probe SU2 via python for what variables and functions are available.; We also talked about having the projection step (DOT) included in CFD_AD so that you only need to worry about surface sensitivities, note that DEF is already part of CFD for forward mode AD.; (talking does not go very far). If you want to lead this work, we can help you understand the inner workings. We meet every Wednesday at 4pm CET https://meet.jit.si/SU2_DevMeeting to discuss this type of issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1262#issuecomment-818786416:30,refactor,refactoring,30,https://su2code.github.io,https://github.com/su2code/SU2/issues/1262#issuecomment-818786416,4,"['refactor', 'variab']","['refactoring', 'variables']"
Modifiability,"There was actually another error before The Meson build system-output. > warning: A compatible version of re2c (>= 0.11.3) was not found; changes to src/*.in.cc will not affect your build.; wrote build.ninja.; bootstrap complete. rebuilding...; [1/29] CXX build/browse.oninja: fatal: posix_spawn: Resource temporarily unavailable; Traceback (most recent call last):; File ""configure.py"", line 709, in <module>; subprocess.check_call(rebuild_args); File ""/home/FDa/FDa045/anaconda3/lib/python3.7/subprocess.py"", line 363, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['./ninja']' returned non-zero exit status 1.; /bin/sh: fork: retry: No child processes",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1420#issuecomment-958677226:373,config,configure,373,https://su2code.github.io,https://github.com/su2code/SU2/issues/1420#issuecomment-958677226,1,['config'],['configure']
Modifiability,"These are all fantastic questions. I have exclusively used SLSQP for any optimizations that I have run. So, I can only speak to that optimization algorithm. . > Why do we want the gradient norm to be ~1E-6?. Not sure why this is. I agree with what @economon said. These tuning parameters are to coax out an ideal step size for the optimizer. As you can imagine, the ideal step size is wildly varying depending on the optimization objectives/constraints, scales of the geometry, and types/numbers of design variables that are being used. You have to play this game of scaling the objectives and constraints in different ways to coax out the ideal first step. In my limited testing, the value of 1E-6 for the gradient norm seems to work well for 3D RANS aerodynamic shape optimizations of an aircraft wing when using FFD control points to change the shape of the wing. This is a specific use case that was the subject of a lot of the underlying research that resulted in the shape optimization framework. Which is likely why I have had good results using this rule of thumb. . > Is 1E-6 a good rule? Or is it just a decent starting point, and values very different from 1E-6 are used in practice? Also, if this is ""a good rule,"" then shouldn't we just automatically rescale the problem after the first design iteration?. Scaling in an optimization problem can be pretty frustrating and time consuming. Anecdotally, I have been using @economon 's suggestions of leaving everything else as default (value of 1) and only playing with the objective and constraint scalings to get a good first step size. As mentioned before, this step size is of different values for different problems, which is why it is difficult to come up with universal scalings that would work for most problems. But I am hoping to address some of these scaling issues in #923 . . I haven't really found much good literature on this problem, but I might be looking in the wrong places. Recommendations are welcome. . A big boon is hav",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616810829:506,variab,variables,506,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616810829,1,['variab'],['variables']
Modifiability,They are SU2 config options. I think they are explained in the config_template in more detail (98% sure).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1307#issuecomment-867121983:13,config,config,13,https://su2code.github.io,https://github.com/su2code/SU2/issues/1307#issuecomment-867121983,1,['config'],['config']
Modifiability,"Things done:; - Create CScalarSolver/Variable classes that now sits between CSolver/Variable and CTurbSolver/Variable; - Move variables/methods to CScalar-land for which one can reasonably assume that they will be useful for future children of the CScalar-family; - That implies, that the rest remains in Turbulence land mostly(!) untouched; - Mostly, because I renamed (Set)TurbVar[-,Gradient] variables/methods in CNumerics which result in changing that all over turb_diff/conv/sources. They hear by the name (Set)ScalarVar* now; And that's it for now. I added some personal comments in the code here and there that will be removed. Next up (coming to a PR near you soon):; - add CSpeciesSolver/Variable with appropriate Upwind/Viscous_Residual and Boundary conditions; - The first step will be a truly Passive Species transport but then ...; - ...introduce the mixture properties of @mheimgartner from #1332 i.e. make the transport equation 'active'. This comes along with some more necessary changes to CConfig. I am not sure yet what is the best order of tackling that. We'll see...; - @mheimgartner work concentrates on 1 additional transport equation. The idea is of course to make it as general as possible but it might be wiser to just go with 1 for the beginning.; - For that setup (2 components mixing) we'll want to get validated gradients going; - The more general way will be needed to merge with @danielmayer #1223 but that would be the step after the above mentioned. @bigfooted that i what I currently have in mind but feel free to chime in here.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1330#issuecomment-905608752:37,Variab,Variable,37,https://su2code.github.io,https://github.com/su2code/SU2/pull/1330#issuecomment-905608752,6,"['Variab', 'variab']","['Variable', 'variables']"
Modifiability,"This PR is ready from my point of view. All periodic / turbomachinery meshes and regressions have been updated (thanks @salvovitale), and I can confirm they converge with the new periodic implementation. Only a few other regression tests needed to be updated due to the refactoring of the MPI, but they were very minor. If the tests pass, then I recommend we merge very soon. Any final comments or reviews are most welcome.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/652#issuecomment-484730590:270,refactor,refactoring,270,https://su2code.github.io,https://github.com/su2code/SU2/pull/652#issuecomment-484730590,1,['refactor'],['refactoring']
Modifiability,"This bug pops up because the periodic mesh reconstruction (in `SU2_MSH`) doesn't always create a valid mesh in 3D. Some points disappear, and some points are duplicated. When `SU2_CFD` (specifically, `CPhysicalGeometry`) tries to get the number of points in the domain, it calculates the wrong number because some of those points are duplicated. That leads to segfaults, because the output routine thinks the extra (missing) points belong to another processor. I've got a little toy problem with a simple periodic cube. It's easy to see on the simple 4x4x4 (+ periodic) problem that 3 nodes disappear, and 3 nodes are duplicated. I've never observed this problem in any of the 2D test cases I ran. As to why `SU2_MSH` is missing some points and duplicating others, I'm not sure. I tried running Valgrind to check for uninitialized variables or illegal memory access, but nothing there. I'll have to look more into the problem. The `su2_periodic.f90` script mentioned in #416 seems to be a workaround. I don't run into any problems when I use that script.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/431#issuecomment-337056131:831,variab,variables,831,https://su2code.github.io,https://github.com/su2code/SU2/issues/431#issuecomment-337056131,2,['variab'],['variables']
Modifiability,"This change looks ok to me, but in general preconfigure.py should be able to just pass unknown arguments to the configure script so that no change is required there. Have you tried that ?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/298#issuecomment-240339485:112,config,configure,112,https://su2code.github.io,https://github.com/su2code/SU2/pull/298#issuecomment-240339485,1,['config'],['configure']
Modifiability,This has been implemented with the new CFL adaptation.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/92#issuecomment-101393482:43,adapt,adaptation,43,https://su2code.github.io,https://github.com/su2code/SU2/issues/92#issuecomment-101393482,1,['adapt'],['adaptation']
Modifiability,"This indicates that the code has not been successfully compiled for parallel. ; I recommend checking the configuration and recompiling. ; For a faster response and information on how others have troubleshot configuration problems, please see our forum at http://www.cfd-online.com/Forums/su2/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2#issuecomment-70964324:105,config,configuration,105,https://su2code.github.io,https://github.com/su2code/SU2/issues/2#issuecomment-70964324,2,['config'],['configuration']
Modifiability,This is a big change that will affect all the config files... could you please add a meaningful error message if somebody uses the old options? Thanks!,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/451#issuecomment-336345293:46,config,config,46,https://su2code.github.io,https://github.com/su2code/SU2/pull/451#issuecomment-336345293,1,['config'],['config']
Modifiability,"This is a good point, as you know we've tried to move to the ""m"" versions of SST (#1483) (dropping k from viscous terms) but I don't think we have looked too deeply into the convective terms.; However, the Roe speed of sound is only used by dissipation terms, the consistent part of the flux is based on primitive variables, and those account for tke, so I suspect there is some other inconsistency at play when defining farfield conditions or the farfield boundary itself.; Also note that you are probably using very high values of free stream turbulence intensity and viscosity ratio, the defaults are (5% and 10x). I did not see this type of problem in https://su2code.github.io/vandv/swbli/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-1361254042:314,variab,variables,314,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-1361254042,1,['variab'],['variables']
Modifiability,"This is a nice-to-have but there are 2600 uses of cout << in SU2, are you sure you want to refactor all of them?; If you pick something with operator << it will be easier.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1991#issuecomment-1488252091:91,refactor,refactor,91,https://su2code.github.io,https://github.com/su2code/SU2/issues/1991#issuecomment-1488252091,1,['refactor'],['refactor']
Modifiability,"This is confusing me a bit. Before I set it up: Do you want me to use the original config (without the _adj), remove the comments and the model and then run SU2_CFD_AD in the regression test?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1571#issuecomment-1076187970:83,config,config,83,https://su2code.github.io,https://github.com/su2code/SU2/pull/1571#issuecomment-1076187970,1,['config'],['config']
Modifiability,"This is how the scale factor is computed `su2double Scale = config->GetDV_Value(0)*config->GetOpt_RelaxFactor();`; OPT_RELAX_FACTOR is 1000 in your config, and so it cancels the scale you want to apply. Please try this again and reopen the issue if the problem persists.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1023#issuecomment-645306463:60,config,config,60,https://su2code.github.io,https://github.com/su2code/SU2/issues/1023#issuecomment-645306463,3,['config'],['config']
Modifiability,"This is indeed important. Having some reference quality metric, while creating mesh (acceptable limits, specific to the solvers, which evolves with usage).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/778#issuecomment-525845039:135,evolve,evolves,135,https://su2code.github.io,https://github.com/su2code/SU2/pull/778#issuecomment-525845039,1,['evolve'],['evolves']
Modifiability,"This is not the preferred way to contribute to open source, especially considering that the refactoring PR already had comments.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1750#issuecomment-1237029298:92,refactor,refactoring,92,https://su2code.github.io,https://github.com/su2code/SU2/pull/1750#issuecomment-1237029298,1,['refactor'],['refactoring']
Modifiability,"This is obviously very good work and should make it much simpler to add new outputs etc. My main concern when first reviewing was performance (something no one seems to care about) but from the limited testing I did while merging this and CVariable there seems to be no big impact, I did not time anything though, if you have numbers to share please do.; Nevertheless if you can get away with using unordered_map instead of map it would be better. Possibly part of the reason everyone puts of reviewing this is that it is a major refactoring and yet there are no accompanying notes about the architecture the implementation choices etc. I absolutely guarantee you that is not how professional software is developed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-534651933:530,refactor,refactoring,530,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-534651933,2,['refactor'],['refactoring']
Modifiability,"This is simply the way how the cmd.exe shell works on Windows - file and folder names containing spaces or special characters must be quoted into `""` to be handled correctly.; The title says it all - *to make them [executables] run*. The patch prepends one `""` and appends one `""` to the command name. This could be refactored further to reduce repetition much more by putting the different executable file names into a map and have a single place to combine quote + executable + quote.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/332#issuecomment-321264218:316,refactor,refactored,316,https://su2code.github.io,https://github.com/su2code/SU2/pull/332#issuecomment-321264218,2,['refactor'],['refactored']
Modifiability,"This issue has already been dealt with in the forum, ; https://www.cfd-online.com/Forums/su2/203777-unable-find-configure-file.html",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/549#issuecomment-402973171:112,config,configure-file,112,https://su2code.github.io,https://github.com/su2code/SU2/issues/549#issuecomment-402973171,1,['config'],['configure-file']
Modifiability,This issue has been closed because the CFL adaptation format has changed.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/8#issuecomment-101391478:43,adapt,adaptation,43,https://su2code.github.io,https://github.com/su2code/SU2/issues/8#issuecomment-101391478,1,['adapt'],['adaptation']
Modifiability,"This issue is relevant to many environments.; For a long time I made a bypass using the environment variable SU2_RUN.; Setting in before a parallel run in a bash command:; export SU2_RUN=‚Äù-machinefile=[machinefile] -env I_MPI_DEVICE rdma [SU2 location]/SU2/bin‚Äú; Then ; parallel_computation.py -n [N] ; It only requires a small modification in ; [Home-source]/SU2/SU2_PY/SU2/run/interface.py ; Replace ; base_Command = os.path.join(SU2_RUN,'%s'); with; base_Command = SU2_RUN+""%s""; Then it works smoothly. ; Would you like to consider this as an alternative ?; Best,; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/335#issuecomment-263671223:100,variab,variable,100,https://su2code.github.io,https://github.com/su2code/SU2/pull/335#issuecomment-263671223,1,['variab'],['variable']
Modifiability,"This may be relevant, and it may not be. Is there a reason that the molecular and turbulent diffusion of turbulent kinetic energy is not included in the total energy terms? I'm talking about terms like:. ![molecular and turbulent diffusion of tke](https://latex.codecogs.com/gif.latex?\left(&space;\mu&space;&plus;&space;\frac{\mu_t}{\sigma_k}\right)\frac{\partial&space;k}{\partial&space;x_j}). This term is listed both in Wilcox's ""Turbulence Modeling for CFD"" book and the [NASA TMR website](https://turbmodels.larc.nasa.gov/implementrans.html). NASA's page basically just copies what Wilcox states, and then says ""This expression in the energy equation is also sometimes neglected."". Rumsey clarified his position in a [2009 report](https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20090015399.pdf), saying that ""when considering high Mach number compressible boundary layer flows using k-omega models, the conservation of total energy should be configured to include the contribution of the turbulent kinetic energy k... It is sometimes common practice to ignore these effects, which is certainly justified when k is signficantly smaller than the square of the mean velocity."" . But he also states: ""Note that in CFL3D, the turbulence models are decoupled from the mean flow equations, k is *not* included in the definition of the total energy, and the diffusion of k does not appear in the mean flow energy equation for its models tested here."" He also omitted the 2/3 \rho k term in both the production and the turbulent stress tensor, and found that it made little difference even for M=10 wall-bounded flows. SU2's version of SST is in a weird spot right now, where it's using the turbulent kinetic energy in some places but not others. It's using it here:. + Total energy definition; + Production of turbulent kinetic energy; + RANS evolution equations; + Eddy viscosity definition. But not here:. + Molecular and turbulent diffusion of turbulent kinetic energy in the total energy cons",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/797#issuecomment-548886007:955,config,configured,955,https://su2code.github.io,https://github.com/su2code/SU2/issues/797#issuecomment-548886007,2,['config'],['configured']
Modifiability,"This one is all set after a little more cleanup. I left some low-level changes to the EoS models for later. @CatarinaGarbacz @MarcoFossati : we can use a simple directory name, as you suggest. Let's just go with fluid/ since we also treat liquids with the incompressible solver. Bonus: adds a rotating frame calculation test and some extra error checks on CFL adapt params that should help avoid unreported problems with old configs.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1010#issuecomment-640170715:360,adapt,adapt,360,https://su2code.github.io,https://github.com/su2code/SU2/pull/1010#issuecomment-640170715,4,"['adapt', 'config']","['adapt', 'configs']"
Modifiability,"This one is related to the integer overflow problem for very large meshes when writing paraview XML files. In the function CParaviewXMLFileWriter::WriteDataArray the variable totalByteSize is defined as an integer. When writing lots of data, especially the connectivity data, this variable overflows, as @GomerOfDoom experienced. Is it possible to define this byte size to be of type Int64 in paraview instead of Int32?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-625322105:166,variab,variable,166,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-625322105,2,['variab'],['variable']
Modifiability,"This problem appears to be solved, tested with current develop branch (hacked configs below).; [configs.zip](https://github.com/su2code/SU2/files/3724204/config.zip)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/713#issuecomment-541622770:78,config,configs,78,https://su2code.github.io,https://github.com/su2code/SU2/issues/713#issuecomment-541622770,3,['config'],"['config', 'configs']"
Modifiability,This pull request **introduces 2 alerts** and **fixes 19** when merging 0cf08d4d50535f6c145d0a974f0e5cc9521a9b1a into c2c78e2bc56160c2724fb34102c1fd2c2542c2a1 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-bc742e5740e7fde7e8efae25d0be0ca4e1117e11). **new alerts:**. * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 13 for Variable defined multiple times; * 6 for Unused import,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1357#issuecomment-903274510:308,variab,variable,308,https://su2code.github.io,https://github.com/su2code/SU2/pull/1357#issuecomment-903274510,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 2 alerts** and **fixes 19** when merging 4ecf3eab71954a9e30a0da5242bc90e2c0eab82f into c2c78e2bc56160c2724fb34102c1fd2c2542c2a1 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-b65cf99f0149c4b378622df6b284bab9578714f9). **new alerts:**. * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 13 for Variable defined multiple times; * 6 for Unused import,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1357#issuecomment-903529424:308,variab,variable,308,https://su2code.github.io,https://github.com/su2code/SU2/pull/1357#issuecomment-903529424,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 2 alerts** and **fixes 19** when merging a28a4d810429bbb289104f27e1b2f0fc46ce11a0 into a1a88d1f8494c5dc0a9cda407b26806e7a3a8d72 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-6f51530a24240894df3db8346a8c6a07062dfcd2). **new alerts:**. * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 13 for Variable defined multiple times; * 6 for Unused import,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1402#issuecomment-940882471:308,variab,variable,308,https://su2code.github.io,https://github.com/su2code/SU2/pull/1402#issuecomment-940882471,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 2 alerts** and **fixes 29** when merging 1577def85c64c7165c45f3b39ed30d0d1d426af2 into a1a88d1f8494c5dc0a9cda407b26806e7a3a8d72 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-384f1d4abd4d5c3f707768fe6f28b54ea7574463). **new alerts:**. * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 13 for Variable defined multiple times; * 10 for Comparison of narrow type with wide type in loop condition; * 6 for Unused import,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1396#issuecomment-937384173:308,variab,variable,308,https://su2code.github.io,https://github.com/su2code/SU2/pull/1396#issuecomment-937384173,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 2 alerts** and **fixes 29** when merging b718c1f697b28ceb9c6b3636869b923767f6fde7 into a1a88d1f8494c5dc0a9cda407b26806e7a3a8d72 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-09da455b036edabab1f34277beeb4185ef2ad75c). **new alerts:**. * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 13 for Variable defined multiple times; * 10 for Comparison of narrow type with wide type in loop condition; * 6 for Unused import,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1416#issuecomment-954872759:308,variab,variable,308,https://su2code.github.io,https://github.com/su2code/SU2/pull/1416#issuecomment-954872759,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 293 alerts** when merging 2e74c55142511f325455bc139bba0ee4acf09c70 into e528e80decab717bd780a3ecedb8cdb432865993 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-66e7b8c38e60d91d57ccb025f36f2effd8902f4b). **new alerts:**. * 131 for FIXME comment; * 43 for Comparison result is always the same; * 38 for Multiplication result converted to larger type; * 34 for Constant return type on member; * 24 for Inconsistent definition of copy constructor and assignment \(&#39;Rule of Two&#39;\); * 10 for Empty branch of conditional; * 4 for Declaration hides parameter; * 2 for Expression has no effect; * 2 for Catching by value; * 1 for Overloaded assignment does not return &#39;this&#39;; * 1 for Virtual call from constructor or destructor; * 1 for Unclear comparison precedence; * 1 for Local variable hides global variable; * 1 for Short global name,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1782#issuecomment-1286021191:841,variab,variable,841,https://su2code.github.io,https://github.com/su2code/SU2/pull/1782#issuecomment-1286021191,2,['variab'],['variable']
Modifiability,This pull request **introduces 293 alerts** when merging 82614e7ed24a4eccce699de9e11a699ec4887bb4 into 4f3e0af2da355e862caae2a447bd1511471ea32a - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-3e39f1debd30828b2dc6092d06a1f82d2d0bb548). **new alerts:**. * 131 for FIXME comment; * 43 for Comparison result is always the same; * 38 for Multiplication result converted to larger type; * 34 for Constant return type on member; * 24 for Inconsistent definition of copy constructor and assignment \(&#39;Rule of Two&#39;\); * 10 for Empty branch of conditional; * 4 for Declaration hides parameter; * 2 for Expression has no effect; * 2 for Catching by value; * 1 for Overloaded assignment does not return &#39;this&#39;; * 1 for Virtual call from constructor or destructor; * 1 for Unclear comparison precedence; * 1 for Local variable hides global variable; * 1 for Short global name,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1782#issuecomment-1272340241:841,variab,variable,841,https://su2code.github.io,https://github.com/su2code/SU2/pull/1782#issuecomment-1272340241,2,['variab'],['variable']
Modifiability,This pull request **introduces 293 alerts** when merging a6ce86a453490cd0844a1fc01a148c156fe70d42 into 4f3e0af2da355e862caae2a447bd1511471ea32a - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-e8d9506dfb52f522a663da1099315a32263d82f7). **new alerts:**. * 131 for FIXME comment; * 43 for Comparison result is always the same; * 38 for Multiplication result converted to larger type; * 34 for Constant return type on member; * 24 for Inconsistent definition of copy constructor and assignment \(&#39;Rule of Two&#39;\); * 10 for Empty branch of conditional; * 4 for Declaration hides parameter; * 2 for Expression has no effect; * 2 for Catching by value; * 1 for Overloaded assignment does not return &#39;this&#39;; * 1 for Virtual call from constructor or destructor; * 1 for Unclear comparison precedence; * 1 for Local variable hides global variable; * 1 for Short global name,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1782#issuecomment-1268978482:841,variab,variable,841,https://su2code.github.io,https://github.com/su2code/SU2/pull/1782#issuecomment-1268978482,2,['variab'],['variable']
Modifiability,This pull request **introduces 8 alerts** and **fixes 58** when merging aec088cd7ff510f67327d17e3b6fb657616870f1 into 3cb709cfd29d6d75dfe53972b5aaa7a08294b9b5 - [view on LGTM.com](https://lgtm.com/projects/g/su2code/SU2/rev/pr-33e58c38b81a8d4c274e2d9b050128676a0937cb). **new alerts:**. * 5 for Unused import; * 1 for Variable defined multiple times; * 1 for Result of integer division may be truncated; * 1 for Unnecessary delete statement in function. **fixed alerts:**. * 47 for Comparison of narrow type with wide type in loop condition; * 6 for Unused local variable; * 4 for Multiplication result converted to larger type; * 1 for Comparison result is always the same,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1216#issuecomment-789073723:318,Variab,Variable,318,https://su2code.github.io,https://github.com/su2code/SU2/pull/1216#issuecomment-789073723,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This was fixed with the new config parsing script.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/14#issuecomment-44468230:28,config,config,28,https://su2code.github.io,https://github.com/su2code/SU2/issues/14#issuecomment-44468230,1,['config'],['config']
Modifiability,"This works awesome. Except one thing.; I'm trying to build SU2 using Meson inside a Singularity container. However, the configuring of ninja doesn't work there. ; It looks for `python` but if not installed, this is not there, only python3 command is there. It works on my desktop because I have python2 installed there. However, from the documentation it seems I only need python3, in reality it uses both. Last part of the output of the Singularity build:; [meson_output.txt](https://github.com/su2code/SU2/files/3502142/meson_output.txt)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/745#issuecomment-521301556:120,config,configuring,120,https://su2code.github.io,https://github.com/su2code/SU2/pull/745#issuecomment-521301556,1,['config'],['configuring']
Modifiability,"Those two cases are not part of the regression suite, and so they were probably not updated as some of the options were renamed.; You can have a look at the other turbomachinery examples (at least two of them are part of the regressions) it should be simple to adapt those options.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1086#issuecomment-706417999:261,adapt,adapt,261,https://su2code.github.io,https://github.com/su2code/SU2/issues/1086#issuecomment-706417999,2,['adapt'],['adapt']
Modifiability,"Tim,. I can share some initial impressions. I‚Äôm trying to build the Mesa 3D graphics library, which recently switched to Meson and Ninja. They are pretty impressive. It looks like Meson uses both pkg-config and (more recently) CMake under the hood. For specific packages that don‚Äôt play nicely with pkg-config, it will look for other similar utilities, such as llvm-config for the LLVM library. I have a beef mostly with documentation, but that‚Äôs hardly unusual in the open source world, and maybe not so relevant to SU2, which doesn‚Äôt have the multitude of external dependencies that many open source projects do. I think the struggles I have had relate mostly to the non-transparent way that Meson interacts with the underlying utilities (pkg-config, CMake, llvm-config,‚Ä¶). For example, I had to fumble around to get Meson to find llvm-config in a non-standard location (adding that location to $PATH turned out to be the answer), as well as to get pkg-config to find its required pkgconfig directories in non-standard locations (adding them to $PKG_CONFIG_PATH was the answer there). I also had to build/install Python 3 (required by Meson), and found that the Python 3.7 has problems with OpenSSL (module _ssl), on which Meson depends, so I went back to Python 3.6. I imagine any pre-built Python 3.7 would be fine, though a related bug appears to still be open (https://bugs.python.org/issue34028). On Windows, Meson will output Visual Studio projects, which would make any Windows developer happy, but your source still has to be cross-platform friendly‚Äînot a problem for TecIO, but I don‚Äôt know if that‚Äôs true elsewhere in SU2. FWIW,. Dave. From: Tim Albring [mailto:notifications@github.com]; Sent: Wednesday, May 22, 2019 7:31 AM; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Subscribed <subscribed@noreply.github.com>; Subject: Re: [su2code/SU2] Meson build system (#685). To see a major advantage, just compare the meson.build and the configure.ac file ... ‚Äî; You are receiving this becaus",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/685#issuecomment-494848848:200,config,config,200,https://su2code.github.io,https://github.com/su2code/SU2/issues/685#issuecomment-494848848,7,['config'],['config']
Modifiability,"To be clear: I like the solver/, variable/, output/, etc. layout a lot, and I am simply suggesting that we move entirely to that layout (with cpp and hpp merged together in each of those folders) and merging the code in Common, SU2_CFD, and other modules into that structure too (in their own folders still, like geometry/ for example). To keep it organized you can simply make each of those directories a library in meson which all later get linked into the various binaries. The mains could live in the top level src/ directory if we keep it or a separate directory (open for me). Something like. ```; SU2/; src/; solver/; meson.build; solver_\*.cpp; solver_\*.hpp; variable/; meson.build; variable_\*.cpp; variable_\*.hpp; ...; ```. with or without the src/ directory in the root (could go either way). Might want to keep it or even name it cpp/ to differentiate from the python framework(s).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-630918578:33,variab,variable,33,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-630918578,4,['variab'],['variable']
Modifiability,"To confirm, there seems to be a similar problem in 2D. I did the following test for the test case ""steady_inverse_design"". Ran test case with given mesh and config file.; This gave CP_diff=0.178; Copied ""surface_flow.dat"" -> ""TargetCp.dat"" (they seem to share the same format); Re-ran the test case; This gave identical results apart from the Cp_diff=0.009; Again this should definitely equal zero. I have looked through the source code and found the line that I think equates this value:. PressDiff += Area \* (CpTarget - Cp) \* (CpTarget - Cp); (from SU2_CFD/src/output_structure.cpp line 7529). There seems to be some other problem affecting this though as (CpTarget - Cp) should be zero.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/321#issuecomment-254857757:157,config,config,157,https://su2code.github.io,https://github.com/su2code/SU2/issues/321#issuecomment-254857757,1,['config'],['config']
Modifiability,"To do it with your AxiAuxVar i would suggest this: . ```; residual[0] -= 0.0;; residual[1] -= Volume*(yinv*total_viscosity_i*(PrimVar_Grad_i[1][1]+PrimVar_Grad_i[2][0]) ; - TWO3*AxiAuxVar_Grad_i[0][0]);; residual[2] -= Volume*(yinv*total_viscosity_i*2*(PrimVar_Grad_i[2][1]-v*yinv); - TWO3*AxiAuxVar_Grad_i[0][1]);; residual[3] -= Volume*(yinv*(total_viscosity_i*(u*(PrimVar_Grad_i[2][0]+PrimVar_Grad_i[1][1]); + v*(FOUR3*PrimVar_Grad_i[1][1]+TWO3*PrimVar_Grad_i[1][0]); - TWO3*v*v*yinv); - total_conductivity_i*PrimVar_Grad_i[0][1]); - TWO3*(AxiAuxVar_Grad_i[1][1]+AxiAuxVar_Grad_i[2][1]));; ```. Could you put that into your branch and then push to this branch? I double checked the signs.. should be fine. If I commited it here I now would break the compilation because these things are not defined in this branch. And for the setters maybe combine the `if` guards so it's cleaner; ```; /*--- Set primitive variables for viscous terms and/or generalised source ---*/; if (!ideal_gas || viscous) numerics->SetPrimitive(nodes->GetPrimitive(iPoint), nodes->GetPrimitive(iPoint));. /*--- Set secondary variables for generalised source ---*/; if (!ideal_gas) numerics->SetSecondary(nodes->GetSecondary(iPoint), nodes->GetSecondary(iPoint));. if (viscous) {; ; /*--- Set gradient of primitive variables ---*/; numerics->SetPrimVarGradient(nodes->GetGradient_Primitive(iPoint), nodes->GetGradient_Primitive(iPoint));; ; /*--- Set gradient of auxillary variables ---*/; numerics->SetAxiAuxVarGrad(nodes->GetAxiAuxVarGradient(iPoint), nullptr);; }; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-728114454:910,variab,variables,910,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-728114454,4,['variab'],['variables']
Modifiability,"To everyone searching for the code in latest develop (there also @bigfooted's paper is given maybe, also it might be another from Eduardo Molina?) I posted it below.; It seems you are using an older version of the code so please compare it with the latest which is posted below. (I am too lazy to check myself, and I am also not knowledgeable in this stuff). (@ShiheJia when posting code please dont include every line number, keep the formatting and post the code wrapped in `'''c++ <code> '''` with `'` being the forward pointing tick); ```c++; case SA_EDDES: {; /*--- An Enhanced Version of DES with Rapid Transition from RANS to LES in Separated Flows.; Shur et al.; Flow Turbulence Combust - 2015; ---*/. su2double vortexTiltingMeasure = nodes->GetVortex_Tilting(iPoint);. const su2double omega = GeometryToolbox::Norm(3, vorticity);. su2double ratioOmega[MAXNDIM] = {};. for (auto iDim = 0; iDim < 3; iDim++){; ratioOmega[iDim] = vorticity[iDim]/omega;; }. const su2double deltaDDES = geometry->nodes->GetMaxLength(iPoint);. su2double ln_max = 0.0;; for (const auto jPoint : geometry->nodes->GetPoints(iPoint)) {; const auto coord_j = geometry->nodes->GetCoord(jPoint);; su2double delta[MAXNDIM] = {};; for (auto iDim = 0u; iDim < nDim; iDim++){; delta[iDim] = fabs(coord_j[iDim] - coord_i[iDim]);; }; su2double ln[3];; ln[0] = delta[1]*ratioOmega[2] - delta[2]*ratioOmega[1];; ln[1] = delta[2]*ratioOmega[0] - delta[0]*ratioOmega[2];; ln[2] = delta[0]*ratioOmega[1] - delta[1]*ratioOmega[0];; const su2double aux_ln = sqrt(ln[0]*ln[0] + ln[1]*ln[1] + ln[2]*ln[2]);; ln_max = max(ln_max, aux_ln);; vortexTiltingMeasure += nodes->GetVortex_Tilting(jPoint);; }; vortexTiltingMeasure /= (nNeigh + 1);. const su2double f_kh = max(f_min,; min(f_max,; f_min + ((f_max - f_min)/(a2 - a1)) * (vortexTiltingMeasure - a1)));. const su2double r_d = (kinematicViscosityTurb+kinematicViscosity)/(uijuij*k2*pow(wallDistance, 2.0));; const su2double f_d = 1.0-tanh(pow(8.0*r_d,3.0));. su2double maxDelta = (ln_",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1462#issuecomment-985689737:574,Enhance,Enhanced,574,https://su2code.github.io,https://github.com/su2code/SU2/issues/1462#issuecomment-985689737,1,['Enhance'],['Enhanced']
Modifiability,"To see a major advantage, just compare the `meson.build` and the `configure.ac` file ...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/685#issuecomment-494828151:66,config,configure,66,https://su2code.github.io,https://github.com/su2code/SU2/issues/685#issuecomment-494828151,1,['config'],['configure']
Modifiability,"Todo list:; - [x] Make sure the code can handle arbitrary many species equtions. Especially the output has to be adapted. Note the MAXNVAR of the ScalarSolver has to adapted to that need as well. Make a suitable Testcase for that.; - [x] Implement weak inlet and outlet BC. The weak approach is used in the turb and mean flow and is most likely conservative opposed to the strong one. Here a simple switch will be put in place to compare both versions.; - [x] Consolidate nVar, nSpecies, ... variable to only use 1 consistently (The choice was `nSpecies` which was already introduced for NEMO and it just makes sense to use the same container); - [x] Make the numerous reviewers happy; - [x] Check inlet profiles for Species solver (have a testcase for that) See #1427 ; - [x] Create Objective functions of Surface avg quantities (Area and Massflow? prob. And a variance-style output to capture mixing); - [x] Avoid redundant operations (pre/post processings) during solver restarts. 156d0c5. What will be done in follow-up PR's:; - Viscous contributions for BC_inlet and outlet which are currently not used (also then for Turb-solver) https://github.com/su2code/SU2/pull/1388#discussion_r752384956; - Axissymmetric source term addtion and testing; - multi-component mixing from #1332 ; - gradient validation between DA and FD",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1388#issuecomment-935901996:113,adapt,adapted,113,https://su2code.github.io,https://github.com/su2code/SU2/pull/1388#issuecomment-935901996,6,"['adapt', 'variab']","['adapted', 'variable']"
Modifiability,"Tom, I noticed that in under SU2_PY you have a parse_config.py that takes the cpp and hpp files and parses the data and returns it to the python UI. What is the data structure for this, is this like a data dictionary, key, value pair? can you give me the data structure for this so that I can reuse this in the web app. . Also may be provide me sample datastructure so that I can test it out in the weblayer. Having this in a weblayer is good idea, we can deploy this weblayer so that anyone accessing the web app can use this to create this configuration and use it as a starter.. I can implement a bottle application in python and deploy it in heroku and it can be used across. Thanks for your help. Krishna",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/172#issuecomment-126140571:542,config,configuration,542,https://su2code.github.io,https://github.com/su2code/SU2/pull/172#issuecomment-126140571,1,['config'],['configuration']
Modifiability,"Tom, I would love to address both of these. Give me some time. I feel even in the current form, it is good. Do you have plans to merge this into master, so that people can use this to setup dev environment quickly. They can also create a basic config file quickly. . I will consider both of your ideas to make user experience better. Thanks for your support. ; Krishna",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/172#issuecomment-126133647:244,config,config,244,https://su2code.github.io,https://github.com/su2code/SU2/pull/172#issuecomment-126133647,2,['config'],['config']
Modifiability,"Tom, thank you for improving this one.; This sounds cool, I was really looking for an easy way to customize the output to plot, for instance, the entropy field or the mass flow for turbomachinery applications. ; Is this meant to remain hard-coded or are you planning to introduce new options to specify the output from the config file?. I see reg tests failing due to travis time out (I believe we have 50 minutes for each python script). I also experienced that issue before and I had to turn down a couple of check I wanted to add for sliding meshes. We need to think about reorganising reg test to reduce or shorten them without loosing control on code features.; Otherwise we could consider switching to travis.com but I believe we'll have to pay for that. looks good to me by the way. . Ciao!; Giulio",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/328#issuecomment-259085483:323,config,config,323,https://su2code.github.io,https://github.com/su2code/SU2/pull/328#issuecomment-259085483,1,['config'],['config']
Modifiability,"Tom,. I have completed the basic html 5/ javascript based configuration generator. Please go thru the readme.md of SU2_IDE/Configuration-gen folder in develop branch and follow the instructions. Let me know if I am going the right direction. Thanks; Krishna",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/172#issuecomment-127882798:58,config,configuration,58,https://su2code.github.io,https://github.com/su2code/SU2/pull/172#issuecomment-127882798,2,"['Config', 'config']","['Configuration-gen', 'configuration']"
Modifiability,"Tom,. The endian test I got from http://cs-fundamentals.com/tech-interview/c/c-program-to-check-little-and-big-endian-architecture.php. The byte swapping function is mine and I am OK with you adapting it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/562#issuecomment-414104646:192,adapt,adapting,192,https://su2code.github.io,https://github.com/su2code/SU2/pull/562#issuecomment-414104646,1,['adapt'],['adapting']
Modifiability,Tools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - ,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14284,plugin,plugins,14284,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,Tools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17036,plugin,plugins,17036,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,Tools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseS,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:18269,plugin,plugins,18269,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,Tools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.inl (0) ; - I SU2_CFD/include/numerics_machine_learning_turbulent.hpp (0) ; - I SU2_CFD/include/numerics_structure.hpp (0) ; - I SU2_CFD/include/numerics_structure.inl (0) ; - I SU2_CFD/include/output_structure.hpp (0) ; - I SU2_CFD/include/solver_structure.hpp (0) ; - I SU2_CFD/include/solver_structure.inl (0) ; - I SU2_CFD/include/transport_model.hpp (0) ; - I SU2_CFD/include/transport_model.inl (0) ; - I ,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20530,plugin,plugins,20530,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,Two PRs is fine for me.. good strategy I also use: much easier to complete a big refactoring if you know the residuals shouldn't change on the regressions (I am doing this with the MPI comms now). Do you have the bandwidth to put in another PR after this? We appreciate it,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/626#issuecomment-458193864:81,refactor,refactoring,81,https://su2code.github.io,https://github.com/su2code/SU2/pull/626#issuecomment-458193864,1,['refactor'],['refactoring']
Modifiability,U2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14846,plugin,plugins,14846,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,U2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtim,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17610,plugin,plugins,17610,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,U2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17851,plugin,plugins,17851,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"UCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.R",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:3796,adapt,adaptation,3796,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['adapt'],['adaptation']
Modifiability,Update to my comment above ~~But Nemo does not implement its own BC_Sym_Plane and uses the standard FVM implementation~~ ...turns out Nemo uses its own implementation. So Please re-use / adapt the one in CFVMSolver,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1625#issuecomment-1117417733:187,adapt,adapt,187,https://su2code.github.io,https://github.com/su2code/SU2/issues/1625#issuecomment-1117417733,1,['adapt'],['adapt']
Modifiability,"Updated all the regression test values. Ran all of them to convergence and the difference in the integrated quantities (lift, drag, sens_press, entropy generation etc) were < 1%. . While running the regression tests, I saw that some of them weren't up to date with the best practices from the recent PRs. I know they are for Regressions and not necessarily as example configs, but I think it'd be good to have the configs reflect best practices so that people can look to them for reference. . If people are on board with that, I can update some of the rans configs to include things like ILU, adaptive CFL, the new convergence monitoring systems etc. I will make sure that the tests still cover all the relevant config options. I will also make sure that if you were to run the test individually, it would run to convergence.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/905#issuecomment-600991354:368,config,configs,368,https://su2code.github.io,https://github.com/su2code/SU2/pull/905#issuecomment-600991354,5,"['adapt', 'config']","['adaptive', 'config', 'configs']"
Modifiability,"Upon implementing these changes, the compilation of the code failed due to multiple variables receiving conflicting declarations. After using just the variables @pcarruscag made and re-compiling, I receive multiple errors regarding the assignment of read-only variables, so I had to remove the ""const"" before a few lines to allow for compilation. Is this alright?. Also, any ideas about why SPECIFIED_SUPERSONIC_INLET_PROFILE is not being accepted as an option even though it's defined in CConfig.cpp?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1652#issuecomment-1152528910:84,variab,variables,84,https://su2code.github.io,https://github.com/su2code/SU2/pull/1652#issuecomment-1152528910,3,['variab'],['variables']
Modifiability,Use the develop branch of the code and the config file I uploaded before. Heatflux is being outputted.; Please understand that we do not have resources to fix bugs in previous versions of the code.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/805#issuecomment-546279885:43,config,config,43,https://su2code.github.io,https://github.com/su2code/SU2/issues/805#issuecomment-546279885,1,['config'],['config']
Modifiability,"Using Cygwin's OpenMPI you can compile SU2 using the following command:. $SU2_HOME/configure --prefix=$SU2_EXEC --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx --enable-metis --with-metis-cppflags=""-D_FILE_OFFSET_BITS=64 -DNDEBUG -DNDEBUG2 -DHAVE_GETLINE -DMETIS_USE_LONGINDEX=1"" --enable-parmetis --with-parmetis-cppflags=""-DMETIS_USE_LONGINDEX=1"" --enable-cgns. Ok, you will not have the same performance as a linux distribution but you will be able to run SU2. I hope it can help. Best,; Eduardo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/521#issuecomment-378291150:83,config,configure,83,https://su2code.github.io,https://github.com/su2code/SU2/issues/521#issuecomment-378291150,1,['config'],['configure']
Modifiability,"Vec(data_,offsets_); }. STRONGINLINE FltVec operator++(int) {; auto ret = (*this)(); offsets_ += Incr; return ret;; }; };; ```; so silly in fact, it only moves forward, we use it in our loop like so; ```c++; ...; auto gradI = grad.getColIterator(iPoint);; auto gradJ = grad.getColIterator(jPoint);. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += (gradI++)*d_ij[iDim];; phiR -= (gradJ++)*d_ij[iDim];; }; ...; ```; to get better assembly; ```asm; .L7:; vmovapd ymm3, ymm13; vmovapd ymm2, YMMWORD PTR [rbp-400]; add rax, 32; vgatherqpd ymm0, QWORD PTR [rcx+ymm1*8], ymm3; vpaddq ymm1, ymm1, ymm11; vmovapd YMMWORD PTR [rbp-272], ymm0; vmovapd YMMWORD PTR [rbp-240], ymm0; vfmadd132pd ymm0, ymm2, YMMWORD PTR [rax-32]; vmovdqa YMMWORD PTR [rbp-208], ymm1; vmovapd YMMWORD PTR [rbp-400], ymm0; cmp rax, rbx; jne .L7; ```; which makes the vectorized code perform just as well as the scalar code, iterators could also be used for the other variables but that would start to hurt readability without improving the performance much. _Note: There is also a chance the compiler (gcc) is not doing this kind of optimization because of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer a",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:12416,variab,variables,12416,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['variab'],['variables']
Modifiability,"Very nice job, Tim. I can report that it works fine for me on Mac and a linux cluster. One suggestion to make our transition easier: if you agree, can you please add a 'bootstrap_meson' file in the root that will set up the build system like our current 'bootstrap' script? I am thinking just something like:; ```; git submodule update --init --recursive; cd externals/ninja; ./configure.py --bootstrap; cd ..; export PATH=$PWD/externals/ninja:$PWD/externals/meson:$PATH; ```; since I found that I usually need to get meson and ninja on my systems. This should also be familiar to folks given our current workflow.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/745#issuecomment-516687563:378,config,configure,378,https://su2code.github.io,https://github.com/su2code/SU2/pull/745#issuecomment-516687563,1,['config'],['configure']
Modifiability,"Wally,; Could please share the config file and point to the grid that you used?; Eduardo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/651#issuecomment-464361840:31,config,config,31,https://su2code.github.io,https://github.com/su2code/SU2/issues/651#issuecomment-464361840,1,['config'],['config']
Modifiability,"Was playing around with the turbomachinery cases with the new multi-zone config. I like the new changes, makes it much clearer!. Just a remark, don't know if this is on purpose, but for the configuration parameter TURBOMACHINERY_KIND, you still need to supply them in the general configuration file for both zones (so in case of a two zone problem: TURBOMACHINERY_KIND = CENTRIFUGAL CENTRIFUGAL). Wouldnt it make more sense to have this per zone specified in the respective configuration file?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/715#issuecomment-514208185:73,config,config,73,https://su2code.github.io,https://github.com/su2code/SU2/pull/715#issuecomment-514208185,8,['config'],"['config', 'configuration']"
Modifiability,"We are compiling those combinations we may well make them available, best I; can due is issue warnings. On Mon, 23 May 2022, 14:43 Nijso, ***@***.***> wrote:. > ***@***.**** commented on this pull request.; > ------------------------------; >; > In Common/include/option_structure.hpp; > <https://github.com/su2code/SU2/pull/1646#discussion_r879473183>:; >; > > + * \param[in] SA_Options - Selected SA option from config.; >; > + * \param[in] nSA_Options - Number of options selected.; >; > + * \param[in] rank - MPI rank.; >; > + * \return Struct with SA options.; >; > + */; >; > +inline SA_ParsedOptions ParseSAOptions(const SA_OPTIONS *SA_Options, unsigned short nSA_Options, int rank) {; >; > + SA_ParsedOptions SAParsedOptions;; >; > +; >; > + auto IsPresent = [&](SA_OPTIONS option) {; >; > + const auto sa_options_end = SA_Options + nSA_Options;; >; > + return std::find(SA_Options, sa_options_end, option) != sa_options_end;; >; > + };; >; > +; >; > + const bool found_neg = IsPresent(SA_OPTIONS::NEG);; >; > + const bool found_edw = IsPresent(SA_OPTIONS::EDW);; >; > + const bool found_bsl = !found_neg && !found_edw;; >; >; > ‚¨áÔ∏è Suggested change; >; > - const bool found_bsl = !found_neg && !found_edw;; >; > + const bool found_bsl = !found_neg && !found_edw;; >; > + const bool found_ft2 = IsPresent(SA_OPTIONS::FT2);; >; > +; >; > + if (found_neg && !found_ft2) {; >; > + SU2_MPI::Error(""Negative and NOFT2 were both selected but are incompatible. Please choose only one."", CURRENT_FUNCTION);; >; > + }; >; >; > ‚Äî; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/1646#pullrequestreview-981793059>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN33ZH2GAQODQZ7M2BLVLODOVANCNFSM5WSMMMUA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1646#issuecomment-1134822257:414,config,config,414,https://su2code.github.io,https://github.com/su2code/SU2/pull/1646#issuecomment-1134822257,1,['config'],['config']
Modifiability,We can already output all LUT and MLP variables using ; ```; LOOKUP_NAMES= Beta_ProgVar; VOLUME_OUTPUT= LOOKUP; ```,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2303#issuecomment-2169371185:38,variab,variables,38,https://su2code.github.io,https://github.com/su2code/SU2/pull/2303#issuecomment-2169371185,1,['variab'],['variables']
Modifiability,"We can compute the HBoperator alternatively without using the complex; variables too for now by replacing the routine if fixing this issue is; complex so that we have a working version of HB. Complex numbers and; vectors are used for elegance but I agree with Francisco that getting the; code compiled without any issues is more important. We can keep it; commented for now and I'll push the updated subroutine soon for a working; version of HB and make sure that it is compiled without errors on Mac. Thanks,; Sravya. On Sat, Nov 12, 2016 at 7:24 AM, Tim Albring notifications@github.com; wrote:. > From what I see there is no easy way to resolve this. The problem is that; > the multiplication operator of the complex type in LLVM uses copysign which; > is a function that only excepts double and int... so that means it is not; > possible to instantiate complex with anything else than these types ...; > from my point of view it is not a very smart design decision. We should; > maybe enable the code section depending on the compiler. A possible; > solution would be to implement our own operators, which we would directly; > in codi then.; > ; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/su2code/SU2/issues/319#issuecomment-260128156, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AHenIObXD9Yd0margHrl2xNq7641i7uWks5q9doigaJpZM4KYAX3; > .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/319#issuecomment-260167765:71,variab,variables,71,https://su2code.github.io,https://github.com/su2code/SU2/issues/319#issuecomment-260167765,1,['variab'],['variables']
Modifiability,"We have created a new structure for the documentation for version 7:; https://su2code.github.io/docs_v7/ . We need some help from all of you. Please go through the files, check for typos, deprecated config options, add comments, and so on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/775#issuecomment-547996411:199,config,config,199,https://su2code.github.io,https://github.com/su2code/SU2/issues/775#issuecomment-547996411,1,['config'],['config']
Modifiability,We have moved to an adaptive CFL functionality in the place of our old CFL ramp feature (see the config_template.cfg file for more details on its usage).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/124#issuecomment-102149500:20,adapt,adaptive,20,https://su2code.github.io,https://github.com/su2code/SU2/issues/124#issuecomment-102149500,1,['adapt'],['adaptive']
Modifiability,"We were discussing the failing discrete adjoint test case in this PR earlier today in the dev call (which seems a little odd). It may be worth disabling the CFL adaption features altogether in Config::SetPostprocesing() when running the discrete adjoint, since it does not make much sense given that we record just a single primal iteration. We should also then check that the CFL number used in that iteration makes sense (initial value vs final value in the primal.. prob makes sense to use initial to be conservative).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1036#issuecomment-673026393:161,adapt,adaption,161,https://su2code.github.io,https://github.com/su2code/SU2/pull/1036#issuecomment-673026393,2,"['Config', 'adapt']","['Config', 'adaption']"
Modifiability,"We will merge this PR next in order to have enough time for testing and for you to solve conflicts (if you need any help to solve those, please contact me). Even if this PR is merged, please continue to give feedback on the usability. We will still continue to work on that. Refer to the user documentation in order to learn how to adapt your config files. Let me know if you have any questions.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-534522241:332,adapt,adapt,332,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-534522241,4,"['adapt', 'config']","['adapt', 'config']"
Modifiability,"Well thats not really an issue. Its just a conceptual thing. Usually what you want to do with an container is to run something from the outside like; ```; ./container_binary <arguments>; ```; or to be more specific, like I did with the singularity container; ```; ./su2.sif SU2_CFD configfile; ```; This way you can also run the python scripts; ```; ./su2.sif parallel_computation.py -f configfile; ```; This works well in serial, however, if you want to run it in parallel you probably should use mpirun from the host system (actually I have no idea what happens if you run mpirun inside of the container, but I am pretty sure that it won't work properly on a cluster). But: at the moment the python scripts do exactly that at the moment, they call the binaries using mpirun in the container.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/747#issuecomment-516786129:282,config,configfile,282,https://su2code.github.io,https://github.com/su2code/SU2/issues/747#issuecomment-516786129,2,['config'],['configfile']
Modifiability,"What about clusters?. On Wed, 28 Aug 2019, 12:02 Tim Albring, <notifications@github.com> wrote:. > The standard way should use pkg-config. I see that pastix and BLAS both; > provide the required files. Should be quite easy actually to add them.; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/771?email_source=notifications&email_token=AJCOXN4ND46DXNDEFQ4OSW3QGZLLRA5CNFSM4IPIUEI2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5KXNVQ#issuecomment-525694678>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AJCOXN67TTZLU5O6XIAYUHDQGZLLRANCNFSM4IPIUEIQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/771#issuecomment-525701307:131,config,config,131,https://su2code.github.io,https://github.com/su2code/SU2/pull/771#issuecomment-525701307,1,['config'],['config']
Modifiability,"What advantages does meson provide over Cmake? I have experience with CMake, but not with meson. @talbring I'm not sure what you mean by ""the syntax is also not very comfortable and it has too many features which we actually don't need."". I recently did a survey of the some of the most popular open-source C++ libraries, both inside and outside and outside of scientific computing. The most popular build system was CMake (60% of the 15 open source libraries). If ""everyone else"" is using CMake, then why should we use meson? I'm not trying to be adversarial. I'm curious about why meson is better. Is the syntax simpler? Is meson more flexible? Is it more robust during changes? Is it faster?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/685#issuecomment-498827230:637,flexible,flexible,637,https://su2code.github.io,https://github.com/su2code/SU2/issues/685#issuecomment-498827230,2,['flexible'],['flexible']
Modifiability,"What do you mean by logically related? [Compressible / Incompressible / Turbulent] solver+variable+numerics+output ?; I think having the top level of folders following the class hierarchy is helpful to someone who is trying to follow the code execution for the first time.; Maybe we can have some subdirs for specific physics in /solvers /variables and /output (similar to what I did with /numerics to keep a compromise between the old file structure and the new)?; I would not mind merging Common and SU2_CFD now that there are descriptive sub-directories for geometry, solvers, etc. I'm not sure if linking everything into just one library is a good idea though (e.g. is it going to make the binaries much larger?).; We should perhaps then move the applications to a separate folder ""SU2_APPS"" where we would put CFD, DEF, DOT etc.; I don't mind having hpp's and cpp's together as we have a fair bit of implementation also in header files, I guess most IDE's have filters to separate them if folks prefer to see them that way.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-630724704:90,variab,variable,90,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-630724704,2,['variab'],"['variable', 'variables']"
Modifiability,"When I enter the ""shape_optimization.py -f unsteady_naca0012_opt.cfg"" in the commend the error is:; ```; Traceback (most recent call last):; File ""C:\Users\74351\Desktop\SU2\SU2\bin\test2\shape_optimization.py"", line 116, in <module>; main(); File ""C:\Users\74351\Desktop\SU2\SU2\bin\test2\shape_optimization.py"", line 34, in main; shape_optimization( options.filename ,; File ""C:\Users\74351\Desktop\SU2\SU2\bin\test2\shape_optimization.py"", line 51, in shape_optimization; config = SU2.io.Config(filename); File ""C:\Users\74351\Desktop\SU2\SU2\bin\SU2\io\config.py"", line 88, in __init__; super(Config,self).__init__(*args,**kwarg); File ""C:\Users\74351\Desktop\SU2\SU2\bin\SU2\util\ordered_bunch.py"", line 83, in __init__; super(OrderedBunch,self).__init__(*args,**kwarg); File ""C:\Users\74351\Desktop\SU2\SU2\bin\SU2\util\ordered_dict.py"", line 48, in __init__; self.__update(*args, **kwds); File ""C:\Users\74351\Desktop\SU2\SU2\bin\SU2\util\ordered_dict.py"", line 174, in update; for key, value in other:; TypeError: 'NoneType' object is not iterable; ```; When I enter the ""parallel_computation.py -f turb_naca0012.cfg -n NP in the commend the error is:; ```; Traceback (most recent call last):; File ""C:\Users\74351\Desktop\SU2\SU2\bin\parallel_computation.py"", line 110, in <module>; main(); File ""C:\Users\74351\Desktop\SU2\SU2\bin\parallel_computation.py"", line 53, in main; raise Exception(""No config file provided. Use -f flag""); Exception: No config file provided. Use -f flag; ```; Any solvers related to "".py"" cannot be executed, but I can run any cases with SU2_CFD. So I wonder if this situation is a problem with the Python Wrapper? . I will be very appreciated if I could get some feedback on this issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1567#issuecomment-1074910200:475,config,config,475,https://su2code.github.io,https://github.com/su2code/SU2/issues/1567#issuecomment-1074910200,10,"['Config', 'config']","['Config', 'config']"
Modifiability,"While I believe the velocity transfer is the way to go for adjoints and accuracy especially in incompressible flow, it should be possible to cater to both needs by basing the flow solver flow traction malarkey on Marker deform mesh, instead of marker fluid load.; Which would possibly make the setup easier as well.; If we want the flexibility to have fluid load markers independent of mesh deformation deformation, we may need a ""yet another config knob"".; One aspect to consider is that the displacement coming from python might be a forced motion, and so the consistency argument no longer matters.; Perhaps what we need, is a way to tell for which boundaries the velocity is known or not.; If the velocity is not known, it could be computed by finite differences at the interface and made part of the velocity-elasticity problem.; This would allow the forced motions to work together with FSI.; If the velocity is not known for any boundary, it is orders of magnitude quicker to compute it by finite differences. Sorry for the soliloquy, but I think all y'all get what I'm sayin'",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778391020:443,config,config,443,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778391020,1,['config'],['config']
Modifiability,"While `unsigned short* CPhysicalGeometry::Local_to_Global_Marker` and `Global_to_Local_Marker` are currently not in use, I think that they should be filled with sensible content rather than being removed. The data seems to be already available in `CPhysicalGeometry::LoadSurfaceElements` with the local variables; - `vector<unsigned long> Marker_Local` and ; - `unordered_map<unsigned long, unsigned long> Marker_Global_to_Local`. I'd like to implement this change. Before that, let's discuss the following questions: Do you think that marker IDs (often called `iMarker`) should be `unsigned short` or `unsigned long` (this is inconsistent across the code)? Should the above data structures be arrays (with some special code for ""this global index does not correspond to a local index"") or maps/lists? I'd prefer the latter, respectively.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762047231:303,variab,variables,303,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762047231,1,['variab'],['variables']
Modifiability,Will it be a good idea to provide the optional control of these under-relaxation parameters to the users in configuration (.cfg) file? (ANSYS-Fluent does have such controls). It may be useful sometimes.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-543913900:108,config,configuration,108,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-543913900,1,['config'],['configuration']
Modifiability,"With the address sanitizer it gets stuck writing the binary restart file. When I terminate, I get:; ^CTraceback (most recent call last):; File ""/usr/local/bin/parallel_computation.py"", line 110, in <module>; main(); File ""/usr/local/bin/parallel_computation.py"", line 57, in main; options.compute ); File ""/usr/local/bin/parallel_computation.py"", line 88, in parallel_computation; info = SU2.run.CFD(config); File ""/usr/local/bin/SU2/run/interface.py"", line 112, in CFD; run_command( the_Command ); File ""/usr/local/bin/SU2/run/interface.py"", line 280, in run_command; return_code = proc.wait(); File ""/usr/lib64/python2.7/subprocess.py"", line 1099, in wait; pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0); File ""/usr/lib64/python2.7/subprocess.py"", line 125, in _eintr_retry_call; return func(*args). I thought SU2 exclusively used python3? It registers as compiled with python3 (Program python3 found: YES (/bin/python3)).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-623683360:400,config,config,400,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-623683360,1,['config'],['config']
Modifiability,"Wonderful contribution. Thanks for doing all that. Streamlining the dev process is very helpful and cmake is definitely becoming a standard. Best,. Juan. On Nov 10, 2019, at 11:24 AM, Daumantas Kavolis <notifications@github.com> wrote:. Ôªø; Proposed Changes. Added CMake build support for SU2. With this, many popular IDEs will be able to use SU2 as a project with minimal setup. CMake also enables to add dependencies more easily since most libraries have CMake support. vcpkg is great for the libraries available there. SU2 CMake has the same build options as autotools but uses CMake to find system libraries and compilers (MKL, Mutationpp, MPI and Python currently). No longer need to specify paths to compilers/libraries if they are in standard locations. In addition, compile flags can be modified from CMake. There is no need to use preconfigure.py anymore since downloading/unpacking is handled by CMake and is system-agnostic. At the moment, all library targets are static but that could be easily changed to be configurable from CMake. The installation directory is ${CMAKE_PREFIX_PATH}/bin. Similarly to autotools, some build options are disabled if built with Codi forward/reverse datatypes or without MPI. Note that SWIG fails to compile pySU2ad with Nothing known about namespace 'medi' in Common/include/mpi_structure.hpp:57 without -includeall SWIG option but then it takes forever to generate the wrapper (more than 15 minutes on my machine, stopped early). I suggest removing using namespace declarations and either importing used symbols explicitly with using or prepending namespace name, clang-tidy warns against them by default and it makes the code clearer. SU2 CMake options are:. * Build modules:; * SU2_BUILD_CFD: ON|OFF; * SU2_BUILD_DEF: ON|OFF, disabled when building with Codi; * SU2_BUILD_DOT: ON|OFF, disabled when building with Codi forward; * SU2_BUILD_GEO: ON|OFF, disabled when building with Codi; * SU2_BUILD_MSH: ON|OFF, disabled when building with Codi; * SU2_BUIL",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:1020,config,configurable,1020,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,2,['config'],['configurable']
Modifiability,Would it be possible to make available the Gmsh mesh and the config file?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/533#issuecomment-388532268:61,config,config,61,https://su2code.github.io,https://github.com/su2code/SU2/issues/533#issuecomment-388532268,1,['config'],['config']
Modifiability,"YES! I am excited to try this out. I can probably test it on some of the other TMR cases (airfoils, flatplates). Will post the results when I get those done. . Side note, there was one issue that @bmunguia and I encountered when performing optimizations with adaptive CFL. Say the DIRECT simulation is run with adaptive CFL and is well converged (6 to 8 orders of residual reduction). When the discrete adjoint performs the one direct iteration to store the computational graph, it uses the initial CFL value, not the CFL that the adaptive CFL routine ended at. This results in the residuals being very high for that one iteration, which then affects the convergence of the discrete adjoint. . I will try to run an adjoint on one of these cases as well to see if the problem persists. Perhaps could be overcome with a simple additional field for CFL in the restart meta-data",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-531520526:259,adapt,adaptive,259,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-531520526,6,['adapt'],['adaptive']
Modifiability,"Yeah the config is a bit confusing. The initial CFD run (in adap/ini) uses the value specified in ITER (unless RESTART_SOL= YES, then it runs one iteration just to get force coefficients). . After that, it runs a series of adaptations based on the settings in PYADAP_SUBITE, PYADAP_FLOW_ITER, and PYADAP_COMPLEXITY. . 1. AMG interpolates the solution; 2. A simulation is run for PYADAP_FLOW_ITER[0] iterations (2999 in your case); 3. An adaptation is performed with a target size of PYADAP_COMPLEXITY[0] (20000 in your case). This is done PYADAP_SUBITE[0] times. Then it moves on to the next mesh level. I admit that I haven't really debugged the feature-based (e.g. Mach-based) adaptation much. I found a couple bugs in the python scripts and just updated them, so could you pull again and rerun ninja?. The AMG output is pretty long, but since it's developed at Inria, I don't have any control over that. I guess as long as none of the lines are error statements (usually complaining about invalid projections or negative eigenvalues of the metric from my experience) it should be fine. The only actual information I get from amg.log is usually in the last line; ```; NbSensor 30518 msh->npobk 30518 NbrTyp 19 msh->npoin 52477; ```; which just tells you how many points are in the old vs. new mesh, but you could just look at the .su2 files for that. Another important note is that the python version of AMG currently only supports triangle and tetrahedral volume elements.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619584815:9,config,config,9,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619584815,4,"['adapt', 'config']","['adaptation', 'adaptations', 'config']"
Modifiability,"Yeah, I also tried the Roe case which actually gives more strange numbers (1.7 Pa), but by the way these are only tutorials. regarding the Reynolds number, that's correct, lowering density will also lower the Reynolds number. But reducing the Mach number (and thus free-stream speed) is also a way. The thing is that the HLLC solver I'm testing works pretty well for the supersonic wedge (an also for others) but suffers a lot this test case (computation explodes at first iteration). ; Can we think about changing the config file a little bit (perhaps changing the fluid)? Is there a particular reason why the HLLC solver is needed here?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/232#issuecomment-181892267:519,config,config,519,https://su2code.github.io,https://github.com/su2code/SU2/pull/232#issuecomment-181892267,1,['config'],['config']
Modifiability,"Yeah, so there was a comment left here from someone saying a root-finding method was needed to compute rhocvve in this case. Closer look, it isn't since you assume you already have vib temp and can compute Eve. I used the setTDStatePTTv which seems to give all values needed to initialize. There are likely some bugs there but I can work through that. . A few follow on Qs:; - Why at line 2238 there is a call to conv_numerics to set values based on node_infty. Should that not be based on node_inlet? I think we should be passing dPdU, etc., for the inlet state we just computed. What's the best way to do that if so?; - What is the best way here to reference fluid model? Is what I have right, or am I missing something?; - Since mass fraction is a necessary input for the supersonic_inlet, will we need a different config option for nemo vs the standard air solver?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1370206942:818,config,config,818,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1370206942,1,['config'],['config']
Modifiability,"Yeah, sorry, bad wording from my side. The standard version of SU2 used the value of CDkw as value of the cross-diffusion term in the residual computations. Thus, I think I should revert to that formulation. Regarding the CDkw, it's implementation in SU2 was made such that the exponent of the epsilon term was equal to minus the production limiter constant of the model. Thus 20 for SST1994 and 10 for SST2003. Is it just a coincidence in the model formulation? In the original paper there is no mention of it being the same variable. This can lead to different results if someone changes the production limiter constant.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2284462041:526,variab,variable,526,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2284462041,1,['variab'],['variable']
Modifiability,"Yeah... It sounded more like an hardware limitation than a software implementation (mpi) issue. About the hybrid solver, you are running into load balancing issues (there are more threads than work packets, i.e. edge groups) it will be better for larger meshes, and maybe an 8x8 division works better than 4x16.; As you are using JST you can also try running at higher CFL to shift work to the linear solver which has no load balancing issues regardless of the group size parameter (the adaptive CFL mode may be necessary to get through the initial transient). Let us know if the new hardware solves the problem.; I will let you know via this issue when we have a release where the hybrid implementation might scale better on unstructured grids.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593573398:487,adapt,adaptive,487,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593573398,1,['adapt'],['adaptive']
Modifiability,"Yep, things seem to be passing just fine now, and it looks like things are coming along nicely for the turbomachinery features. Before we merge this in... I am a little concerned with the number of additions to solver_direct_mean.cpp related to the different switch statements and subroutines needed for the Riemann and non-reflecting BCs. Is there anything we can do to simplify things?. In addition, could you please clean up the spacing/style in those methods to match up with the other BCs (more comments are needed, indentation, variable declarations, etc.)? It would also be great to have a little more detail on how to use the new BCs in the descriptions in config_template.cfg. Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/207#issuecomment-152406337:534,variab,variable,534,https://su2code.github.io,https://github.com/su2code/SU2/pull/207#issuecomment-152406337,2,['variab'],['variable']
Modifiability,Yes I get that now and I am doing it exactly like that. For this one I thought I leave it. I tried to do a rebase of my develop to remove older commits from this PR but then git was telling me it was not able to include all the following commits including merges etc so I aborted. . From now on for any fix I would branch every time anew from my develop (which is a copy of su2code +this PR). I also do the same for my own development and then merge any fix branches I need into that. If later you don't merge those fixes because that part of the code is revamped anyway I will bin that branch and redo it on top of your new structure as that would probably be better anyway and just in case I ever want to propose those own developments to su2code. I will watch and adapt. Hope that's fine for now but let me me if you want me to redo or rebase anything for this PR,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/927#issuecomment-612613571:767,adapt,adapt,767,https://su2code.github.io,https://github.com/su2code/SU2/pull/927#issuecomment-612613571,1,['adapt'],['adapt']
Modifiability,Yes I know about the ONERAM examples. But the mesh files and config files do not match as their boundary conditions are different. Could you share your config file and meshed file to me regarding ONERAM ? ; Thank you.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/523#issuecomment-381731261:61,config,config,61,https://su2code.github.io,https://github.com/su2code/SU2/issues/523#issuecomment-381731261,2,['config'],['config']
Modifiability,"Yes I use [`testing_symmetry_plane`](https://github.com/su2code/su2/tree/testing_symmetry_plane) which is up to date with develop otherwise. I used boolean config options to switch between things as follows:; ```; % Surf; YES=oldEuler; NO=NewEuler; VISUALIZE_SURFACE_DEF= YES. % YES=use toms fix; NO=do not use toms fix; (only active if NewEuler wall is used, i.e.VISUALIZE_SURFACE_DEF=NO); DEFORM_CONSOLE_OUTPUT=NO. % the following two are only really active for the NewEuler as there the numerics class is explicitly used; % YES=JST; NO=see VOLUME_DEF; MUSCL_ADJFLOW= NO; % Vol; YES=UpwRoe(default in develop then and now); NO=JST_BC; VISUALIZE_VOLUME_DEF= YES; ```; The most interesting comparison in my opinion is oldEuler (other options shouldnt matter) vs newEuler+JST_BC (with and without Toms fix) as these two should do pretty much the same thing. And now we know now pretty much that Toms fix actually ensures that :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-634591483:156,config,config,156,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-634591483,1,['config'],['config']
Modifiability,"Yes but it is being called on which solver? Don't forget there is one instance of DiscAdjSolver for the bulk flow and another for the turbulence, you are currently trying to get the value from solver_container[iZone][iInst][MESH_0][ADJTURB_SOL] so make sure RegisterVariables is called for this solver, you may be calling it for ADJFLOW_SOL instead, and that will still give you the right value of cb1 because it comes directly from the config. Edit: I would not mess around with pointers here... You can determine which solver object is being used at a given time by printing nVar to screen (which is 1 for SA and 4/5 for RANS).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-498429475:437,config,config,437,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-498429475,1,['config'],['config']
Modifiability,"Yes but it would be kind of you to check if a feature of a future release is going in the direction of what you need.; Compiled libraries would be easy to handle via pkg config.; But your choices of words sound a bit unfriendly so I honestly don't care, we can also close the issue until the next release.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1645668805:170,config,config,170,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1645668805,1,['config'],['config']
Modifiability,"Yes for MARKER_ROUGH, or MARKER_ROUGH_WALL to be clearer.; Or just WALL_ROUGHNESS as you have right now, since it would not really a marker, just the properties of markers (and I've seen some people on CFD online confused with similar naming e.g. MARKER_SHROUD). Regarding the MPI stuff, I had the following idea over lunch:; In CPhysicalGeometry::SetWallDistance we compute the closest distance, and in so doing we also get the mpi rank and markerID associated with the closest vertex.; So, before computing the wall distances you communicate the local marker ids and wall roughness's (via Allgather as you are doing now), with this info you can build a `unordered_map<pair<int,int>, su2double>` to map pairs of <rank,markerID> to the values of roughness.; Now when you loop over the points to compute the distances you can retrieve the roughness from this map instead of from config.; It's almost exactly the same as you have, but avoids using the config as a messenger between routines, and using a stl map should also make the code simpler. In the boundary conditions you can still get the marker roughness via the marker tag as you are doing now, and I guess the wall type (smooth / rough) can be inferred from having 0 (default) roughness (?); With the string+double list specification you also avoid having to specify 0 roughness and SMOOTH wall type for markers where you don't want to use this feature.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-630861158:878,config,config,878,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-630861158,4,['config'],['config']
Modifiability,"Yes in the config, it's OUTPUT_FILES= RESTART_ASCII sorry",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2103#issuecomment-1679196656:11,config,config,11,https://su2code.github.io,https://github.com/su2code/SU2/issues/2103#issuecomment-1679196656,1,['config'],['config']
Modifiability,"Yes it is inconsistent that's why it would need validation, the worst-case scenario is when your design variable is the thing the primal solver is manipulating to implement the fixed mode.; For example I'm pitching the wing (geometric AOA let's call it) the adjoint gives me a value for dCL / dalpha, but in practice this value is 0 because the primal solver does not allow the CL to change.; But doing the above would be dumb right, the validation question is what happens to the derivatives of other outputs? Is dCD / dalpha correct? I imagine this depends on the relation between CD and CL in this case.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1030108842:104,variab,variable,104,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1030108842,1,['variab'],['variable']
Modifiability,"Yes there is a `lapack.pc` file in each of those folders.; ```; slimshady@arch-linux-hp-probook-g3-450: ~$ cat /usr/lib/pkgconfig/lapack.pc ; libdir=/usr/lib; includedir=/usr/include. Name: LAPACK; Description: FORTRAN reference implementation of LAPACK Linear Algebra PACKage; Version: 3.9.0; URL: http://www.netlib.org/lapack/; Libs: -L${libdir} -llapack; Requires.private: blas; ```; The output of `pkg-config openblas --version` is 0.3.8, but it shows a message as well:; ```; slimshady@arch-linux-hp-probook-g3-450: ~$ pkg-config openblas --version; pkg-config: --version specified with other options or module names, assuming --modversion.; 0.3.8; ```; I also installed using the same meson arguments on an Ubuntu system (Python v3.7.5, mpich v3.3.2) which did not need the `$PKG_CONFIG_PATH` variable to be set. So all this is a little confusing for me.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632009282:406,config,config,406,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632009282,4,"['config', 'variab']","['config', 'variable']"
Modifiability,Yes you need to have it in the fluid config file that produces the files you will use to restart. The files you have without grid velocities will not work... but the new ones will.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1287#issuecomment-843271165:37,config,config,37,https://su2code.github.io,https://github.com/su2code/SU2/issues/1287#issuecomment-843271165,1,['config'],['config']
Modifiability,"Yes, I agree that if this factor 100 should remain in the code, than it is the configuration file of the tutorial that should be modified with a lower turbulence intensity Tu to get the proper results. Thank you!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1719#issuecomment-1191863697:79,config,configuration,79,https://su2code.github.io,https://github.com/su2code/SU2/issues/1719#issuecomment-1191863697,1,['config'],['configuration']
Modifiability,"Yes, I have activated the option for the force breakdown in my configuration file and currently running it. I'll update you with the findings I get.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1175#issuecomment-765907601:63,config,configuration,63,https://su2code.github.io,https://github.com/su2code/SU2/issues/1175#issuecomment-765907601,1,['config'],['configuration']
Modifiability,"Yes, I plan to invest some time here and there to finish this, but, not everything here falls under my expertise. I am currently making CPBIncEulerVariable to inherit CFlowVariable (instead of CVariable). This should already remove some duplication.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2210#issuecomment-1945788025:159,inherit,inherit,159,https://su2code.github.io,https://github.com/su2code/SU2/pull/2210#issuecomment-1945788025,1,['inherit'],['inherit']
Modifiability,"Yes, I set separate markers. I don't think that mesh nodes aren't unchanged, but the edge topology is respected. You are right also when you refer to departure from the design shape (mostly driven by excessively big TRIAS on the surface; I suspect all the surface nodes still lay on the original, initialization surface mesh); there is still departure.; I tried to reduce the `PYADAP_HMAX` but as it affects all the mesh (including volume elements), in order to reach the desired refinement on the surface, the number of cells easily explodes. > If I set this limit to less than the average surface mesh cell size, will it attempt to refine everything over the limit instantly? Or will it only use the limit for 'new' cells that are generated during adaptation? Thanks for your thoughts. I believe it will affect all the mesh, but yet again, it may be also influenced by the numbers of `PYADAP_SUBITE` specified in the config file. It would be great to have different parameters for volume mesh dimensions and surface mesh dimensions.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-764931621:750,adapt,adaptation,750,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-764931621,2,"['adapt', 'config']","['adaptation', 'config']"
Modifiability,Yes. Thank you all. I installed libopenmpi-dev and openmpi-common. I don't know which one is the key but I can see SU2_RUN and SU2_HOME environment variables displayed at the conclusion of configure.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513853762:148,variab,variables,148,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513853762,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"You are completely right... the description for OBJECTIVE_FUNCTION. % Objective function in optimization problem (DRAG, LIFT, SIDEFORCE, MOMENT_X,; % MOMENT_Y, MOMENT_Z, EFFICIENCY,; % EQUIVALENT_AREA, NEARFIELD_PRESSURE,; % FORCE_X, FORCE_Y, FORCE_Z, THRUST,; % TORQUE, TOTAL_HEATFLUX,; % MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,; % INVERSE_DESIGN_HEATFLUX, AVG_TOTAL_PRESSURE, ; % MASS_FLOW_RATE, ELLIPTIC_SPANLOAD, MAX_SECTIONAL_CL); OBJECTIVE_FUNCTION= DRAG. Is not accurate and introduces some level of confusion. . From the ‚Äúaverage"" user point of view my experience is that they only use OPT_OBJECTIVE and thy don‚Äôt know that OBJECTIVE_FUNCTION exists. Could you please change ""Objective function in optimization problem‚Äù by something more accurate? In fact, we should maybe think on changing the keyword OBJECTIVE_FUNCTION itself. Best,; Francisco. > On Apr 22, 2017, at 5:19 PM, Heather Kline <notifications@github.com> wrote:; > ; > @fpalacios <https://github.com/fpalacios>, @economon <https://github.com/economon> - There's a comment in the config files that says that 'OBJECTIVE_FUNCTION' sets the objective function for the optimizer - however it seems that this option is only used with controlling the adjoint solver and output, and whatever the user specifies there will be overwritten by the optimizer. I put an alternative comment in the config_templates here; I can either revert that back or change the comment in all the config files (I have a script).; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/385#issuecomment-296410309>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AEpklinNXzQxD1nXZbsTUqsE6aPW6zEMks5rypkJgaJpZM4MgM_e>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/385#issuecomment-296417940:1055,config,config,1055,https://su2code.github.io,https://github.com/su2code/SU2/pull/385#issuecomment-296417940,2,['config'],['config']
Modifiability,"You can override the command that is used to launch parallel jobs by setting the environment variable `SU2_MPI_COMMAND`. For example on our cluster I had to force it to use the usual mpi command with `export SU2_MPI_COMMAND=""mpirun -n %i %s""`, otherwise it tried to use `srun` which didn't work with our setup.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/469#issuecomment-345215874:93,variab,variable,93,https://su2code.github.io,https://github.com/su2code/SU2/issues/469#issuecomment-345215874,1,['variab'],['variable']
Modifiability,"You can replace the computation in python_wrapper_structure.cpp, the benefit of having a central definition outweighs the velocity divergence thing.; Also the way that method is used expects a reasonably converged solution, so it should not make a big difference.; Moreover that assumption for incompressible flow is not correct for variable density flows, so yes please replace it if you can.; I guess the TWO3 had a purpose in the end xD",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-743119468:333,variab,variable,333,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-743119468,1,['variab'],['variable']
Modifiability,"You can restart after a small (or large) geometric change so long as the mesh topology is the same (the minimum requirement is probably that the number of points in the file be the same).; This is what happens when you use SU2_DEF to parameterize / deform the mesh. Yes one does need to be careful with the interpolation methods used for this, e.g. use the connectivity information of both meshes when looking for nearest neighbors to keep the runtime O(N).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/852#issuecomment-578516517:234,parameteriz,parameterize,234,https://su2code.github.io,https://github.com/su2code/SU2/issues/852#issuecomment-578516517,1,['parameteriz'],['parameterize']
Modifiability,You can show all available options for screen/history output by running `SU2_CFD -d config.cfg`,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2138#issuecomment-1738548219:84,config,config,84,https://su2code.github.io,https://github.com/su2code/SU2/issues/2138#issuecomment-1738548219,1,['config'],['config']
Modifiability,"You can use the --prefix option (most ""build from source"" software works; like that).; Do you know of a portable way to determine the user name?. On Mon, 11 May 2020, 21:04 Max Le, <notifications@github.com> wrote:. >; > -; >; > When installing SU2 from fresh or recompiling to update changes, the; > installation process always requires root permission to finish. The reason; > is that the binaries are installed in /usr/local/bin, which needs root; > access. The installation went well, it is just that I don't feel like; > entering root password everytime.; > -; >; > A way to go around this would be to have the binaries installed in the; > bin folder in the home folder, so on Linux that would be /home/user/bin.; > Even better, we can have it creates a separate SU2bin folder, where only; > the binaries from SU2 will be stored. Of course, doing this would change; > the environmental variables as well.; > -; >; > What do you all think? Is this too much hassle?; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/979>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN3VS6AOUOBHLOHSCULRRBK6DANCNFSM4M6GX6DA>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/979#issuecomment-626952122:104,portab,portable,104,https://su2code.github.io,https://github.com/su2code/SU2/issues/979#issuecomment-626952122,2,"['portab', 'variab']","['portable', 'variables']"
Modifiability,"You have to add that particular branch to the .travis.yml file.; See https://travis-ci.org/su2code/SU2/requests (Branch ""feature_STLwriter"" not included per configuration.)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/748#issuecomment-526150574:157,config,configuration,157,https://su2code.github.io,https://github.com/su2code/SU2/issues/748#issuecomment-526150574,1,['config'],['configuration']
Modifiability,You only see changes on residuals that are -20 so I think you are ok.; Taking those variables from members to local variables may allow the compiler to re-order some stuff for optimization.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1923#issuecomment-1432346004:84,variab,variables,84,https://su2code.github.io,https://github.com/su2code/SU2/pull/1923#issuecomment-1432346004,2,['variab'],['variables']
Modifiability,You should be able to use CConfig::SetFinestMesh in CDriver::Geometrical_Preprocessing_FVM to initialize this to the coarsest grid that was produced. The threshold to stop agglomeration should stay. But you can expose it as a config option if you want.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1362#issuecomment-907033127:226,config,config,226,https://su2code.github.io,https://github.com/su2code/SU2/pull/1362#issuecomment-907033127,1,['config'],['config']
Modifiability,You'll have to take out the tecplot output from the config https://github.com/su2code/SU2/actions/runs/5006027201/jobs/8971286794,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1954#issuecomment-1551976585:52,config,config,52,https://su2code.github.io,https://github.com/su2code/SU2/pull/1954#issuecomment-1551976585,1,['config'],['config']
Modifiability,"You're right about that bug with vel_i_corr. Thanks for finding it, I'll submit a correction. Yes, it's possible to modify the config file so that your implementation works. But is this simply masking the problem of reduced stability? Do you expect the direct formulation to be less stable? And do the benefits of the direct formulation make the loss of stability worthwhile? If so, then I think you should change the config file. I hope this answers your question, I'm not sure if I understood it correctly. Regards,; Daniel",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/232#issuecomment-182655391:127,config,config,127,https://su2code.github.io,https://github.com/su2code/SU2/pull/232#issuecomment-182655391,4,['config'],['config']
Modifiability,"You've reminded me that there is an old python script (parse_config.py) which parses the c++ config structure code - I couldn't get it to run right away, but maybe you can update that script to generate your list automatically from the c++ code, and so not require much change (and also not require you to manually write out all the defaults). . Personally I think that we should keep the default definitions in the C++ as it is now, as this keeps the executables self-contained among other things. ; By the way, I think you meant SetConfig_Options().",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-377420170:93,config,config,93,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-377420170,1,['config'],['config']
Modifiability,"Yup, it is being called as far as I can tell. I've also put a print statement inside the registervariables method inside solver right after cb1_adj is registered with AD, and sure enough the screen outputs my statement along with the correct value of cb1_adj as read in from the config class.; Seems that only when we are inside the Iteration class and calling the solver method to return cb1_adj from solver it returns it as 0. Could it be an issue with the scope of cb1_adj? (I also tried making it a public variable inside the class but didn't make a difference).; Or perhaps instead of trying to get the _value_ of cb1_adj from solver, I need to get a pointer pointing to the memory address of cb1_adj, and pass _that_ onto numerics?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-498417564:279,config,config,279,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-498417564,2,"['config', 'variab']","['config', 'variable']"
Modifiability,"ZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, econ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16090,config,config,16090,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"ZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; --------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:15955,config,config,15955,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"[...]; > If either you or @frx-wintermute are interested in complementing the feature by adding an option to prefer system libraries (via pkg-config, no paths because 99.9% of users will not know what to do) instead of the versions shipped with SU2, please go ahead and open a PR. Hello @pcarruscag!. To be honest, my daydream is: I would love to see SU2 shipping nothing in 'externals/' (or just empty subdirectories such as 'externals/meson/' ); then those external dependencies are by default downloaded from external repositories or tar archives. This defaul behavior would be obtained by configuring with the './meson.py' script and then by building with './ninja'. But, if a user wants to build SU2 from source and prefers to use system-wide Meson and Ninja and system-wide versions of the external dependencies, it would be possible to avoid downloading these external dependencies. By running './preconfigure.py' with appropriate options, it would be possible to decide which external dependencies to **not** download. At that point, system-wide Meson and Ninja could be used to build SU2 from source. And the 'meson.build' file would do the following:. * for each required or enabled (at configure time) dependency **\<foo\>**, it would check whether it is found in 'externals/**\<foo\>**/'; if not, it would check whether it can be found as a system-wide installation (perhaps via pkgconfig); if not, it would exit with error; * for each dependency which is not required nor enabled at configure time, it would avoid using it at all. I think this daydream is achievable, and I hope that other people consider it as a useful goal.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1646970778:142,config,config,142,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1646970778,4,['config'],"['config', 'configure', 'configuring']"
Modifiability,"[WIP]; SU2-specific best practices (carried over from #1487). - Get rid of magic numbers in the code: enums (ongoing work) #1457 (and many others); - Get rid of magic numbers for variable indices: nDim+1, nDim+2, etc. #1392",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1218#issuecomment-1013365053:179,variab,variable,179,https://su2code.github.io,https://github.com/su2code/SU2/issues/1218#issuecomment-1013365053,1,['variab'],['variable']
Modifiability,"[flat plate test.zip](https://github.com/user-attachments/files/16321830/flat.plate.test.zip); @pcarruscag Hi Pedro, thanks for the help. I used your modified one to do a plat plate test, which could work without inlet profile, however, when I input the inlet profile with uniform value(should be same as no-input), it still diverged immediately. I was looking through the function 'LoadInletProfile' in CSolver.cpp these days, maybe there should be some changes around? Because there is a determination of inlet type, which SUPERSONIC_BC doesn't belong to, I am not that sure if it effects. I attached all the testing files, including mesh, config, profile dat, etc. Please take a look and let's debug on this.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241240909:642,config,config,642,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241240909,1,['config'],['config']
Modifiability,"[iVar] = vmax(phiMax[iVar], phi.getVec(jPoint,iVar));; phiMin[iVar] = vmin(phiMin[iVar], phi.getVec(jPoint,iVar));; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec lim = vmin(FltVec(2.0), vmin(; (phiMax[iVar]-phi.getVec(iPoint,iVar))/prjMax[iVar],; (phiMin[iVar]-phi.getVec(iPoint,iVar))/prjMin[iVar]));. limiter.setVec(iPoint,iVar, lim*(lim+2.0)/(lim*lim+lim+2.0));; }; }; }; ```; In terms of algorithm, for each point we find the min and max neighbor values and the min (negative) and max (positive) projections, those are then combined in a final `min(2, max/max, min/min)` to which the limiter function is applied (this would also be applicable to Venkatakrishnan-[Wang] limiters).; This is equivalent to the edge-loop, if statements are not required as due to cells being closed, if the positive projection is not zero, the negative one will also not be zero, therefore it is correct to always evaluate both ratios.; This algorithm only needs min and max neighbors as small local variables instead of large global ones due to the way those values are determined. This is where the memory from the extra adjacency information is recovered. Like @economon said, fusing the gradient kernel with the limiter kernel is trivial with these point loops, and I do not think it affects readability much since one can clearly tell ""what is what"" (I will not put it here but it really is a matter of copy paste), including the boundaries could be a bit more challenging, but I will give performance number nevertheless. **Performance summary**. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.25 | 2.0 |; | **Speed 4 cores** | 2.45 | 2.7 | 4.5 | 7.0 |. The basic point version does not lose to edge based because, contrary to gradients, it does not require duplication of computations while benefiting from sequential access to gradients.; Again the point-based implementation does really well in parallel",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:9687,variab,variables,9687,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['variab'],['variables']
Modifiability,"[kw2.zip](https://github.com/user-attachments/files/16349664/kw2.zip). Here is SWBLI config and mesh file I used. The original freestream turbulence intensity is a 5.0e-4, I was changed arbitrary to 5.0e-2 for test. Also you can easily observe any high Mach number simulation with high TKE.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-2245328618:85,config,config,85,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-2245328618,1,['config'],['config']
Modifiability,"_HEADERS 1; | #define HAVE_SYS_TYPES_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: execut",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:15650,config,config,15650,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"_reg_classes/SU2_CFD/src/solvers/CSolverFactory.cpp#L226) to ""SOMETHINGELSE"", you get:; ```; -------------------- Solver Preprocessing ( Zone 0 ) --------------------; <---------- Solver SOMETHINGELSE was not found.; <---------- Available Solvers: ; EULER ; ``` ; and the program exists.; 5. However, after returning the created solver out of **CSolverFactory::CreateSubSolver()** some strange things happen:; ```; -------------------- Solver Preprocessing ( Zone 0 ) --------------------; <----------- Making CEulerSolver ...; ...... Some other output; Initialize Jacobian structure (Euler). MG level: 0.; <----------- Preprocessing Created solver ...; <----------- Making CEulerSolver ...; Initialize Jacobian structure (Euler). MG level: 1.; <----------- Preprocessing Created solver ...; <----------- Making CEulerSolver ...; Initialize Jacobian structure (Euler). MG level: 1.; <----------- Preprocessing Created solver ...; <----------- Making CEulerSolver ...; Initialize Jacobian structure (Euler). MG level: 1.; <----------- Preprocessing Created solver ...; <----------- Making CEulerSolver ...; .... And then; Elwardi-PC:04092] *** Process received signal ***; [Elwardi-PC:04092] Signal: Segmentation fault (11); [Elwardi-PC:04092] Signal code: Address not mapped (1); [Elwardi-PC:04092] Failing at address: (nil); [Elwardi-PC:04092] [ 0] /lib/x86_64-linux-gnu/libc.so.6(+0x3efd0)[0x7f6f2de1dfd0]; [Elwardi-PC:04092] *** End of error message ***; Segmentation fault; ```; So there is probably something else I didn't pay attention to. ## Immediate improvements. Forcing the dev to create his own ""is_registered"" static variable and initializing it himself can be eliminated by by putting the variable in a templated class (notice that the variable initialization only depends on the type it belongs to and the factory class) which the solver can inherit from. ## My question. Any idea on what is causing the seg fault. I'm pretty sure it's because I'm returning a nullptr somewhere though.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-669146957:3017,variab,variable,3017,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-669146957,4,"['inherit', 'variab']","['inherit', 'variable']"
Modifiability,`./configure --enable-mpi --with-cc=/cluster/intel/2019/compilers_and_libraries_2019.5.281/linux/mpi/intel64/bin/mpicc --prefix=/cluster/software/su2/bin/; `; does not help,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1089#issuecomment-706119208:3,config,configure,3,https://su2code.github.io,https://github.com/su2code/SU2/issues/1089#issuecomment-706119208,1,['config'],['configure']
Modifiability,"`COORDINATES` and `SOLUTION` groups are always added even if they are not present in the config file. So that should not happen anymore. If it does, let me know :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/9#issuecomment-548017340:89,config,config,89,https://su2code.github.io,https://github.com/su2code/SU2/issues/9#issuecomment-548017340,1,['config'],['config']
Modifiability,"```diff; $ git --no-pager diff --cached ; diff --git a/meson.build b/meson.build; index ca86992ea..b68a03c52 100644; --- a/meson.build; +++ b/meson.build; @@ -1,15 +1,12 @@; project('SU2', 'c', 'cpp',; version: '7.5.1 ""Blackbird""',; + meson_version: '0.61.1',; license: 'LGPL2',; default_options: ['buildtype=release',; 'warning_level=0',; 'c_std=c99',; 'cpp_std=c++11']); ; -if meson.version() != '0.61.1'; - error('SU2 must be configured with the extended Meson script (./meson.py) in the SU2 root directory.'); -endif; -; pymod = import('python'); python = pymod.find_installation(); ; ```. I used this patch, and then ran the following:. ```; $ meson setup builddir --wipe; The Meson build system; Version: 1.0.1; Source dir: /tmp/SU2; Build dir: /tmp/SU2/builddir; Build type: native build. meson.build:1:0: ERROR: Meson version is 1.0.1 but project requires 0.61.1; ```. Using the >= comparison, it configures fine, and downloads a git submodule for mutationpp/coolprop on demand. From a hasty look around, it seems like the other git submodules are used as externals/ directories, not meson subprojects. Another project I know uses e.g. ```; if not fs.exists('submoduledir/README.md'); error('Missing the `submoduledir` submodule! Run `git submodule update --init` to fix this.'); endif; ```. for each submodule before it gets processed by meson. This is less automatic than wrapping it in meson.py, but does provide pretty clear directions... the sticking point is if people download tarballs. You currently point people to github's autogenerated archives, which is NOT sufficient as it doesn't have submodules included. I would actually suggest using `meson dist --include-subprojects --no-tests` to produce your own tarballs and attach them as additional releases artifacts. Meson *does* include submodules (whether or not they are subprojects) automatically to the tarball it creates.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1945#issuecomment-1451057434:429,config,configured,429,https://su2code.github.io,https://github.com/su2code/SU2/issues/1945#issuecomment-1451057434,6,"['config', 'extend']","['configured', 'configures', 'extended']"
Modifiability,"able). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familiar with canonical CFD flows that are used in these cases. But it; > would be great to have other cases, such as Turbo-machinary or FSI cases,; > that show the full breadth of SU2's abilities. This is by no means an; > exhaustive list:; >; > 1. Zero Gradient Flat Plate; > 2. 2D and 3D Bump in Channel; > 3. Asymmetric Diffuser; > 4. Backward facing step; > 5. Unsteady Square cylinder; > 6. NACA0012; > 7. NACA4412 Trailing Edge Seperation; > 8. Joukowski Airfoil; > 9. 30P30N High Lift airfoil; > 10. ONERAM6 Wing; > 11. NASA CRM; > 12. Subsonic and Supersonic Jets; >; > It would be ideal for these test cases to have either high-fidelity data; > (wind tunnel tests, or LES/DNS data), and/or published results of other; > solvers so that comparisons can be made.; >; > I also want to point out the difference between this and the TestCases; > repository. The TestCases repo is used in regression tests to ensure that; > parts of the code don't break when changes are made. This is more a test of; > SU2's fidelity. It would feature large grids and configuration files that; > can be run to convergence.; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/581>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/APKNm0MgSdkhQbG8dvGsdxlxIf9pa1xsks5ucppYgaJpZM4Ww0V4>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:3050,config,configuration,3050,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,1,['config'],['configuration']
Modifiability,able-mpi --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test ; -------------------------------------------------------------------------; | ___ _ _ ___ | ; | / __| | | |_ ) Release 6.2.0 'Falcon' | ; | \__ \ |_| |/ / | ; | |___/\___//___| Pre-configuration Script | ; | | ; -........ (I removed the header print here) ... Checking the status of submodules; =====================================================================; Initialize submodule externals/codi using git ... ; Submodule 'externals/codi' (https://github.com/scicompkl/CoDiPack) registered for path 'externals/codi'; Cloning into '/home/eran/applications/SU2/git_noMeson/SU2/externals/codi'...; Submodule path 'externals/codi': checked out '501dcf0305df147481630f20ce37c2e624fb351f'; Found correct version of CoDiPack in externals/codi.; Initialize submodule externals/medi using git ... ; Submodule 'externals/medi' (https://github.com/SciCompKL/MeDiPack) registered for path 'externals/medi'; Cloning into '/home/eran/applications/SU2/git_noMeson/SU2/externals/medi'...; Submodule path 'externals/medi': checked out 'edde14f9ac4026b72b1e130f61c0a78e8652afa5'; Found correct version of MeDiPack in externals/medi. Preparing build environment; =====================================================================; Command: ./bootstrap; Logfile written to bootstrap.log. Running configure in folder SU2_AD using CODI; =====================================================================; Command: ../configure --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test --enable-mpi --enable-codi-reverse. There was an error while running command '../configure --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test --enable-mpi --enable-codi-reverse'.; === Error Log ===; /bin/sh: 1: ../configure: not found. ---------------------------------------------; When I copied configure.py from older installations it kept running but then aborted on; missing modules,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-598686170:1607,config,configure,1607,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-598686170,5,['config'],['configure']
Modifiability,"ables (#738). Dear developers,; I am trying to install SU2 in docker ubuntu 18.04 container so that I can easily share with partner. But I failed to compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, please?; config.log<https://github.com/su2code/SU2/files/3418183/config.log>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/738?email_source=notifications&email_token=AADV2HBFP42OXAJCIZGTH2DQAXH4ZA5CNFSM4IFZ52EKYY3PNVWWK3TUL52HS4DFUVEXG4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:1330,config,configure,1330,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,1,['config'],['configure']
Modifiability,"acting boost ...; Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Run-time dependency openblas found: YES 0.3.10; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_HOME/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.6 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: true; PaStiX: false; Mixed Float: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=/home/slimshady/UserPackages/SU2_INSTALL/bin; export SU2_HOME=/home/slimshady/UserPackages/SU2_HOME; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. Use './ninja -C build install' to compile and install SU2. Build targets in project: 21. Found ninja-1.10.0.git at /home/slimshady/UserPackages/SU2_HOME/ninja; ```; The ninja command fails like so:; ```; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./ninja -C build install ; ninja: Entering directory `build'; [583/894] Linking target SU2_CFD/src/SU2_CFD; FAILED: SU2_CFD/src/SU2_CFD ; /usr/bin/g++ -o SU2_CFD/src/SU2_CFD SU2_CFD/src/SU2_CFD.p/SU2_CFD.cpp.o -Wl,--as-needed -Wl,--no-undefined -Wl,-O1 -Wl,--start-group SU2_CFD/src/libSU2core.a externals/cgns/libcgns.a externals/metis/libmetis.a externals/parmetis/libparmetis.a externals/tecio/teciompisrc/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137:3317,variab,variables,3317,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137,1,['variab'],['variables']
Modifiability,"actually... the line; print 'IOError , 'Could not find config file: %s' % filename; should read; print 'IOError: Could not find config file: %s' % filename",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/141#issuecomment-67575875:55,config,config,55,https://su2code.github.io,https://github.com/su2code/SU2/issues/141#issuecomment-67575875,2,['config'],['config']
Modifiability,"ails. |; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. Build Configuration Summary:. Source code location: /home/antodech/SU2-4.1.0; Install location: /gshare/work/hpascalj/CodeSU2-master; Version: 4.1.0; C++ Compiler: g++; C Compiler: gcc; Preprocessor flags: ; Compiler flags: -g -O2; Linker flags: ; MPI support: no; Metis support: no; Parmetis support: no; TecIO support: no; CGNS support: yes; HDF5 support: no; SZIP support: no; ZLIB support: no; Mutation++ support: no; Jsoncpp support: no; LAPACK support: no; Datatype support:; double yes; complex no; codi_reverse no; codi_forward no. External includes: ; External libs: . Build SU2_CFD: yes; Build SU2_DOT: yes; Build SU2_MSH: yes; Build SU2_DEF: yes; Build SU2_SOL: yes; Build SU2_GEO: yes. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=""/gshare/work/hpascalj/CodeSU2-master/bin""; export SU2_HOME=""/home/antodech/SU2-4.1.0""; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=x86_64-unknown-linux-gnu; ac_cv_c_compiler_gnu=yes; ac_cv_cxx_compiler_gnu=yes; ac_cv_env_CCC_set=; ac_cv_env_CCC_value=; ac_cv_env_CC_set=; ac_cv_env_CC_value=; ac_cv_env_CFLAGS_set=; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_CXXFLAGS_set=; ac_cv_env_CXXFLAGS_value=; ac_cv_env_CXX_set=; ac_cv_env_CXX_value=; ac_cv_env_LDFLAGS_set=; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:19168,variab,variables,19168,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['variab'],['variables']
Modifiability,"ains the global index information; and values that are used in surface-based mesh deformation (and maybe other; tools, but that's the one I know of - I could see that format being useful; for prescribed surface properties as well). So one challenge that would be; faced with this change is how to make sure that both files are still; output. I would argue for switching to no suffixes where possible - less work for; new users, a little more work for us - one way we could get the best of; both worlds is by having the filenames written in the config without; suffix, but when loaded into su2 (and the python version of loading the; config file) store the variable with the appropriate suffix. That way if it; changes in the future it only has to be updated in one place, and all the; old config files would still work after a code change that alterred the; suffix.; -Heather. On Wed, Jul 30, 2014 at 11:05 AM, Brendan Tracey notifications@github.com; wrote:. > SU2 right now is inconsistent with how it does file names in the config; > file. For example, the restart file needs to be specified with a "".dat""; > suffix, but in the case of the surface files, the "".csv"" is added; > automatically. SU2 should be consistent across all filenames. Preferably,; > this will be fixed by having the user specify all suffixes. This is a tiny; > amount of additional work for the user, but it makes writing scripts that; > use the config file much easier. When the suffix is in the config file,; > it's easy to have python say ""open this file"". If the config file just has; > the base name of the file (no extension) then the knowledge of what suffix; > SU2 uses must be hard-coded into the follow-on script (which can then break; > later if SU2 changes).; > ; > ‚Äî; > Reply to this email directly or view it on GitHub; > https://github.com/su2code/SU2/issues/41. ## . Heather Kline; PhD Candidate, NASA Space Technology Research Fellow; Aeronautics & Astronautics; Stanford University; kline.hl@gmail.com, hlkli",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/41#issuecomment-50703399:1212,config,config,1212,https://su2code.github.io,https://github.com/su2code/SU2/issues/41#issuecomment-50703399,1,['config'],['config']
Modifiability,"ally delete the connectivity table from the ASCII Tecplot as you can use numpy genfromtxt.(https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html). Another option is to use the following restart_flow binary reader/writer that I wrote in Python. # ----------; def read_restart_bin(filename):. 	# Not efficient way; 	infile = open(filename, 'rb'); 	data = infile.read(); 	infile.close(). 	print ""Size of the file: "", len(data). # The first is a magic number that we can use to check for binary files (it is the hex; # representation for ""SU2"").; 	if (struct.unpack('i',data[:4])[0] != 535532):; 		print ""Magic number 535532 not found in the solution file %s"" %filename; 		sys.exit(); 		#try:; 		#	data_file = read_restart_ascii(filename); 		#	return data_file; 		#except:; 			# Exit; 		#	sys.exit(). 	# The second two values are number of variables and number of points (DoFs). ; 	nvar = struct.unpack('i',data[4:8])[0]; 	ndof = struct.unpack('i',data[8:12])[0]. 	# Read the variable names of the file. Note that we are adopting a; # fixed length of 33 for the string length to match with CGNS.; 	variables_names = []; 	for i in range(nvar):; 		aux = (struct.unpack('33s',data[20+(i)*33:20+(i+1)*33])[0]); 		for j in range(len(aux)):; 			if aux[j] == ""\x00"":; 				break; 		variables_names.append(aux[:j]). 	# Read data in one shoot; 	start = 20 + nvar*33; 	end = start+nvar*ndof*8; 	array = np.asfarray(struct.unpack('%dd'%(nvar*ndof),data[start:end])); 	array = array.reshape(ndof,nvar). 	# The last two values are for metadata: one int for ExtIter and 8 su2doubles.; 	# Metadata: 1 int for ExtIter and 8 doubles; 	#ncount = len(data) - nvar*ndof*8 - 4 - 64; 	ExtIter = struct.unpack('i',data[end:end+4])[0]; 	metadata = struct.unpack('8d',data[end+4:end+4+8*8]). 	# Create dictionary; 	data_file = {'names':variables_names,'data':array, 'ExtIter':ExtIter, 'MetaData':metadata}; 	return data_file. def read_restart_ascii(filename):; 	""""""; 	; 	""""""; 	infile = open(filename, 'r'); 	h",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-528461173:1053,variab,variable,1053,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-528461173,1,['variab'],['variable']
Modifiability,"alternatively you can use a hostfile. Below is an example that is used to statically link SU2 and include a statically linked MPICH library. . You can set the hostfile with `--hostfile=<path_to_hostfile>` in the meson call. `-Dcustom-mpi=true` must be also set in that case. I never ran into problems with the order and I think that `LDFLAGS` and the hostfile approach are equivalent in your case, but anyway, its worth a try. ```; [binaries]; c = 'x86_64-linux-gnu-gcc'; cpp = 'x86_64-linux-gnu-g++'; ar = 'x86_64-linux-gnu-ar'; strip = 'x86_64-linux-gnu-strip'; pkgconfig = 'x86_64-linux-gnu-pkg-config'. [host_machine]; system ='linux'; cpu_family = 'x86_64'; cpu = 'x86_64'; endian = 'little'. [properties]; cpp_link_args = ['-static', '-static-libstdc++', '-static-libgcc', '-L/mpich-x86_64-linux-gnu/lib', '-lmpi', '-lxml2', '-lbacktrace', '-lz', '-lpthread', '-lrt']; c_link_args = ['-static', '-static-libstdc++', '-static-libgcc', '-L/mpich-x86_64-linux-gnu/lib', '-lmpi', '-lxml2', '-lbacktrace', '-lz', '-lpthread', '-lrt']; cpp_args = ['-Wno-inconsistent-missing-override', '-I/mpich-x86_64-linux-gnu/include']; c_args = ['-I/mpich-x86_64-linux-gnu/include']; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/867#issuecomment-584169812:598,config,config,598,https://su2code.github.io,https://github.com/su2code/SU2/issues/867#issuecomment-584169812,1,['config'],['config']
Modifiability,"amg_python : ; ; #--- Load su2 mesh ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- If not using the amg python interface, convert the mesh and make system call; ; su2amg.write_mesh(""current.meshb"", ""current.solb"", mesh); ; if not os.path.exists(""current.solb""):; raise RuntimeError , ""\n##ERROR : Can't find solution.\n""; if not os.path.exists(""current.meshb""):; raise RuntimeError , ""\n##ERROR : Can't find mesh.\n""; ; #--- Get sensor; ; sensor = su2amg.create_sensor(mesh, adap_sensor); su2amg.write_solution(""current_sensor.solb"", sensor); ; if not os.path.exists(""current_sensor.solb""):; raise RuntimeError , ""\n##ERROR : Can't find adap sensor.\n""; ; #--- Run amg; ; sys.stdout.write(""Running amg. Log : %s\n"" % config_amg['amg_log']); ; if os.path.exists(""current.itp.solb""):; os.remove(""current.itp.solb""); ; try :; su2amg.amg_call(config_amg); except:; raise RuntimeError , ""\n##ERROR : Call to AMG failed.\n""; ; if not os.path.exists(config_amg['mesh_out']):; raise RuntimeError , ""\n##ERROR : Mesh adaptation failed.\n""; ; if not os.path.exists(""current.itp.solb""):; raise RuntimeError , ""\n##ERROR AMG: Solution interpolation failed.\n"" ; ; #--- Convert output from Inria mesh format to su2; # Deal with markers; ; save_markers = mesh['markers']; del mesh; ; # Read Inria mesh; mesh = su2amg.read_mesh(config_amg['mesh_out'], ""current.itp.solb""); mesh['markers'] = save_markers; ; current_mesh = ""ite%d.su2"" % global_iter; current_solution = ""ite%d.dat"" % global_iter ; ; su2amg.write_mesh(current_mesh, current_solution, mesh); ; if not os.path.exists(current_mesh) or not os.path.exists(current_solution) :; raise RuntimeError , ""\n##ERROR : Conversion to SU2 failed.\n"". else : # Use pyAmg interface; ; ; #--- Load su2 mesh ; ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- Create sensor used to drive the adaptation; ; sensor_wrap = su2amg.create_sensor(mesh, adap_sensor); ; mesh['sensor'] = sensor_wrap['solution']; ; sys.stdout.write(' %s Genera",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:9384,adapt,adaptation,9384,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['adapt'],['adaptation']
Modifiability,"ance.; The git add, git commit and git push commands worked as expected.; The only problem I had was when I tried to upload the mesh file to https://github.com/su2code/TestCases/tree/develop/disc_adj_euler: <https://github.com/su2code/TestCases/tree/develop/disc_adj_euler:> I wanted to upload a folder ‚Äúarina2k‚Äù, whose contents is the mesh file (.su2). I could not just upload the folder name: the system appears to be waiting for an actual file name. When I choose the file name inside that folder , it appears that the system would upload the file within the repository, but 'discarding‚Äô its folder name, so I would have an ‚Äòorphaned‚Äô file there. I tried also to create a file (which would be my folder name), but again, I am prompted with an editor in order to write an actual file, using directly the browser. I believe that there is a simple way to upload a sub-directory/filename, but i could not realize it. With kind regards,. Jairo. > On Dec 14, 2018, at 01:26, Thomas D. Economon <notifications@github.com> wrote:; > ; > @jaspe55 <https://github.com/jaspe55> : I see that you have added the residual check for the python regression script, but I do not see the config file, target file, or mesh. The config file and target file should be placed in SU2/TestCases/disc_adj_euler/arina2k/ (according to your path in the regression script), and the mesh placed in the TestCases/disc_adj_euler/arina2k/ directory in the TestCases repository here (develop): https://github.com/su2code/TestCases/tree/develop <https://github.com/su2code/TestCases/tree/develop>. Don't forget to 'git add' the files to make sure they are included on push. We can help diagnose any segfaults with the files.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/600#issuecomment-447209397>, or mute the thread <https://github.com/notifications/unsubscribe-auth/Ac180hTDpbM_TXuwfdIJnHpDEpp295gqks5u4yh5gaJpZM4X34F2>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/600#issuecomment-447475363:1221,config,config,1221,https://su2code.github.io,https://github.com/su2code/SU2/pull/600#issuecomment-447475363,4,['config'],['config']
Modifiability,"are mentioning is the same. I simply united the TIP, LOWER_SIDE and UPPER_SIDE under the marker tag WING. > The initial transient through the domain based on the initial values is unphysical to some extend and if e.g. 'steady state' results are the same for both code versions .... the problem is not that big. Although it differs quite a bit in the temporal evolution tbh; In the results (also in the mail) it looks a bit like it approaches a steady state for Cl and CD. So maybe 1000 timesteps will tell us a bit more ü§î. I guess they converge eventually to the same values. I tried to compare the same case but steady (I attach the summary). Results in this case are fairly similar and (in my opinion) raise no warnings.; [Summary_steady_6_0_1.txt](https://github.com/su2code/SU2/files/3906039/Summary_steady_6_0_1.txt); [Summary_steady_6_2_0.txt](https://github.com/su2code/SU2/files/3906010/Summary_steady_6_2_0.txt). Regarding the unsteady case, I'm aware that this test may have little physics behind (especially if comparing the first timesteps) but I wanted to investigate the reason :). Results are too different and I think these might be one of the reasons behind some discrepancies I'm encountering in my FSI framework. ; My framework for FSI features a restart from a steady solution at t=0 and an unsteady simulation with imposed boundary of the wing marker. The discrepancies in that case are huge and are clearly wrong. I went back to the root and found this weird behaviour comparing the two versions so I thought this might be one cause. > Another thing: There is no tag 6.0.2 üòï ... 6.0.1 and then 6.1.0.. Yep you are right, the version is definitely 6.0.1 as it can be seen from the Summaries: **I'm updating the issue.**. > And both versions are/were on the develop branches -> what exactly do you refer to here: config-files, code, mesh. Didn't quite understand you here. Let me know if you need any other info regarding the topic. Looking forward to hear from you!. Best,; Rocco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-559850074:2163,config,config-files,2163,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-559850074,2,['config'],['config-files']
Modifiability,"ared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3999: $? = 0; configure:3988: gcc -V >&5; gcc: '-V' option must have argument; configure:3999: $? = 1; configure:3988: gcc -qversion >&5; gcc: unrecognized option '-qversion'; gcc: no input files; configure:3999: $? = 1; configure:4003: checking whether we are using the GNU C compiler; configure:4022: gcc -c conftest.c >&5; configure:4022: $? = 0; configure:4031: result: yes; configure:4040: checking whether gcc accepts -g; configure:4060: gcc -c -g conftest.c >&5; configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conftest.c -o conftest2.o >&5; configure:4380: $? = 0; configure:4386: gcc -c conftest.c -o conftest2.o >&5; configure:4390: $? = 0; configure:4401: cc -c conftest.c >&5; configure:4405: $? = 0; configure:4413: cc -c conftest.c -o conftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run th",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:6905,config,configure,6905,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"aviour can be seen. The solutions were converged by about 8 orders of magnitude at each time step for both cases. I reran the current develop code with symmetry boundary condition forcing all the way to residual stalling as suggested for a few hundred time steps but I think the case was pretty well converged already and there is no difference with increased convergence. ![image](https://user-images.githubusercontent.com/33747655/70387595-e5412380-199e-11ea-96d2-f7ee447a8131.png); ![image](https://user-images.githubusercontent.com/33747655/70387599-effbb880-199e-11ea-81f4-5fd37ae9ebd8.png). Although it is good that the converged behaviour is similar for both boundary conditions, the difference in transient behaviour will have a large effect for coupled unsteady problems. . About the dynamic grid, the reason I spotted this was because the gradient verification against rigid motion with symmetry plane boundary condition was good but not as good as the gradient verification with Euler wall boundary condition (as well as having slightly different inherent sensitivity magnitudes between the two boundary conditions caused by the difference in transient behaviour). Therefore, this is perhaps missing something as I would have expected to see the same level of agreement in the sensitivities for the symmetry plane boundary condition as is seen for the Euler wall. I‚Äôve added the results using both boundary conditions for a pitching airfoil case using efficiency as the objective function and FFD control points as the design variables. The differences are seen at the trailing edge (points 10, 11, 21, 22). ![image](https://user-images.githubusercontent.com/33747655/70387604-043fb580-199f-11ea-9c5e-08f5feb2d14e.png); ![image](https://user-images.githubusercontent.com/33747655/70387609-0a359680-199f-11ea-91b5-84931b1d7ec0.png). Should the Euler wall boundary condition be replaced by the symmetry plane condition or could we have both as options to choose from?. Best wishes,; Charanya",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-562931249:1913,variab,variables,1913,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-562931249,1,['variab'],['variables']
Modifiability,"ble-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: check",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:4215,config,configure,4215,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"book-g3-450: SU2_HOME$ ./meson.py configure build -Denable-openblas=true -Denable-autodiff=true -Denable-directdiff=true -Dcustom-mpi=true -Dwith-mpi=enabled -Denable-pywrapper=true --prefix=/home/slimshady/UserPackages/SU2_INSTALL; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./meson.py setup --wipe build; The Meson build system; Version: 0.54.999; Source dir: /home/slimshady/UserPackages/SU2_HOME; Build dir: /home/slimshady/UserPackages/SU2_HOME/build; Build type: native build; Project name: SU2; Project version: 7.0.4 ""Blackbird""; C compiler for the host machine: cc (gcc 9.2.1 ""cc (Arch Linux 9.2.1+20200130-2) 9.2.1 20200130""); C linker for the host machine: cc ld.bfd 2.34; C++ compiler for the host machine: c++ (gcc 9.2.1 ""c++ (Arch Linux 9.2.1+20200130-2) 9.2.1 20200130""); C++ linker for the host machine: c++ ld.bfd 2.34; Host machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/usr/bin/python3); Message: Boost sources found.; Found pkg-config: /usr/bin/pkg-config (1.6.3); Run-time dependency openblas found: YES 0.3.8; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_HOME/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.4 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: true; PaStiX: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this config",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-634298776:1433,config,config,1433,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-634298776,2,['config'],['config']
Modifiability,"bsonic engine intake option; - Small output change; - Added output_su2.cpp; - Updated Engine BC; - Working on Engine BCs; - Added Supersonic Outlet BC; - Minor change; - Merge remote-tracking branch 'upstream/develop' into develop; - adjoints, solid boundary, doxygen in config; - continued fixing; - re-added adjoint bc mods; - re-adding avg outlet pressure (static pressure adjoint); - re-adding avg outlet pressure (static pressure adjoint); - Merge branch 'temp' of https://github.com/hlkline/SU2 into temp; - continued fixing; - average total pressure and fixes to avg outlet pressure; - adding stagnation pressure output to SU2_DOT; - Merge pull request #146 from hlkline/temp; - Updated Entropy fix (now it is active).; - Another change in BC_Engine_Exhaust; - Updated CGNS in parallel; - Added runtime file; - Small typo; - Adjustment of the Entropy fix coefficient; - Bug in SU2_GEO; - Debug version with print statements.; - Updated release 3.2.7.1; - Small change; - Updated config file; - Code update; - MPI Status and Request fix.; - Another MPI Status/Request fix.; - Actuator disk update.; - Small update; - Initial implementation of pyramids and prisms for Tecplot binary.; - Small fix for Tecplot binaries. Closes #56. Closes #57.; - Removed extra allocation related to markers during partitioning.; - Non-working version; - Small update; - Updated memory deallocation.; - Merge branch 'feature_MarkerMax' into develop; - Time and date in the header.; - Small fix to the latest commit.; - Simplification of entropy correction; - Critical stability improvement.; - Minor release 3.2.7.2; - Fixing issues to run with the latest intel compiler; - Fix for Tecplot binary solutions for unsteady flows. Fixes #150.; - Now SU2 should work with the latest version of the Intel compiler.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Working on the O3 stuff; - Small change.; - Add another check to improve stability.; - Collection of improvements.; - Updated ac",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:4106,config,config,4106,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['config'],['config']
Modifiability,"calj/CodeSU2-master; Version: 4.1.0; C++ Compiler: g++; C Compiler: gcc; Preprocessor flags: ; Compiler flags: -g -O2; Linker flags: ; MPI support: no; Metis support: no; Parmetis support: no; TecIO support: no; CGNS support: yes; HDF5 support: no; SZIP support: no; ZLIB support: no; Mutation++ support: no; Jsoncpp support: no; LAPACK support: no; Datatype support:; double yes; complex no; codi_reverse no; codi_forward no. External includes: ; External libs: . Build SU2_CFD: yes; Build SU2_DOT: yes; Build SU2_MSH: yes; Build SU2_DEF: yes; Build SU2_SOL: yes; Build SU2_GEO: yes. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=""/gshare/work/hpascalj/CodeSU2-master/bin""; export SU2_HOME=""/home/antodech/SU2-4.1.0""; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=x86_64-unknown-linux-gnu; ac_cv_c_compiler_gnu=yes; ac_cv_cxx_compiler_gnu=yes; ac_cv_env_CCC_set=; ac_cv_env_CCC_value=; ac_cv_env_CC_set=; ac_cv_env_CC_value=; ac_cv_env_CFLAGS_set=; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_CXXFLAGS_set=; ac_cv_env_CXXFLAGS_value=; ac_cv_env_CXX_set=; ac_cv_env_CXX_value=; ac_cv_env_LDFLAGS_set=; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_file__gshare_soft_code_saturne_4_0_0_prod_cgnslib_3_2_1_include_cgnslib_h=yes; ac_cv_file__gshare_soft_code_saturne_4_0_0_prod_cgnslib_3_2_1_lib_libcgns_a=yes; ac_cv_header_X11_Intrinsic_h=no; ac_cv_header_inttypes_h=yes; ac_cv_header_memory_h=yes; ac_cv_header_std",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:19534,variab,variables,19534,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['variab'],['variables']
Modifiability,"cc: unrecognized option '-qversion'; gcc: no input files; configure:3999: $? = 1; configure:4003: checking whether we are using the GNU C compiler; configure:4022: gcc -c conftest.c >&5; configure:4022: $? = 0; configure:4031: result: yes; configure:4040: checking whether gcc accepts -g; configure:4060: gcc -c -g conftest.c >&5; configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conftest.c -o conftest2.o >&5; configure:4380: $? = 0; configure:4386: gcc -c conftest.c -o conftest2.o >&5; configure:4390: $? = 0; configure:4401: cc -c conftest.c >&5; configure:4405: $? = 0; configure:4413: cc -c conftest.c -o conftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4619: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; confte",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:7694,config,configure,7694,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"ce some structural changes are made which could potentially effect things outside the regression tests, and I want to make it easier for code review.; > ; > In this pull request, the ability to run multiple objectives is added to the python tools and to the config options. Within the CFD and adjoint solvers, the only major change is in the data structure containing the objectives - it now can hold a list of objectives, but when the adjoint solver is run only one objective is included. Later pull requests are planned to include the ability to run a single adjoint solution for a sum of objectives defined on different markers.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/237 https://github.com/su2code/SU2/pull/237; > Commit Summary; > ; > config options updated to be compatible with multiple objectives - mdo not yet implemented; > python tools; > python adjusted for multiple objectives: will always run 1st objective only with continuous adjoint, but will run separate continuous adjoint evaluations within optimization; > continuous adjoint evaluates the requested objectives; > fixing some errors; > File Changes; > ; > M Common/include/config_structure.hpp https://github.com/su2code/SU2/pull/237/files#diff-0 (20); > M Common/include/config_structure.inl https://github.com/su2code/SU2/pull/237/files#diff-1 (6); > M Common/src/config_structure.cpp https://github.com/su2code/SU2/pull/237/files#diff-2 (90); > M SU2_PY/SU2/eval/design.py https://github.com/su2code/SU2/pull/237/files#diff-3 (8); > M SU2_PY/SU2/eval/functions.py https://github.com/su2code/SU2/pull/237/files#diff-4 (14); > M SU2_PY/SU2/eval/gradients.py https://github.com/su2code/SU2/pull/237/files#diff-5 (4); > M SU2_PY/SU2/io/config.py https://github.com/su2code/SU2/pull/237/files#diff-6 (21); > M SU2_PY/SU2/io/tools.py https://github.com/su2code/SU2/pull/237/files#diff-7 (21); > M SU2_PY/SU2/opt/project.py https://github.com/su2code/SU2/pull",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/237#issuecomment-182175757:1304,config,config,1304,https://su2code.github.io,https://github.com/su2code/SU2/pull/237#issuecomment-182175757,1,['config'],['config']
Modifiability,ceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsS,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:15561,plugin,plugins,15561,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ce_adjoint files and in contrary as what Ole expected; the compressible gives a more wavy result. However the deviation of the sens_adjoint of incompressible is huge compare to the compressible case. ![image](https://user-images.githubusercontent.com/21182966/28306613-4425789c-6ba0-11e7-8337-41a99e15ebd2.png). So if I am understanding correctly, in order to determine the sensitivity an initial deviation of the control points has to be set to determine the (dx/dC)-term. In which 'x' indicates discrete points and 'C' control points. . ![image](https://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cvec%7BC%7D%7D%20%3D%20%5Cfrac%7B%5Cpartial%20%5Cvec%7Bx%7D%7D%7B%5Cpartial%20%5Cvec%7BC%7D%7D%5Ccdot%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cvec%7Bx%7D%7D). Tim do you mean with the current step size the step of dC ? Because the step of the discrete point is set on 0.001 (of_grad_cd.vtk). If you mean the control point step, then there should be a parameterization step in between as well in order to know the influence of dC to dx. This should give a difference in sensitivity results, however the sensitivities of the case of scale = 0.01 and of the case scale =1 are exactly the same (for the compressible and incompressible case). The values below are gradients of the file of_grad_cd.vtk from the compressible case. ![image](https://user-images.githubusercontent.com/21182966/28307680-f01c9240-6ba3-11e7-8ada-4ddf9e4ae0a9.png). The final thing which I still have to check is the residuals of the direct and adjoint solution. As can be seen there is a difference in convergence and result, which I think is due to the difference in regime. The convergence of the direct solution is: ; ![image](https://user-images.githubusercontent.com/21182966/28309520-e967cbc6-6ba9-11e7-9233-9c9f69db126b.png). The convergence of the adjoint solution is:; ![image](https://user-images.githubusercontent.com/21182966/28308831-b937bf76-6ba7-11e7-9108-e8a2ab959b74.png). Th",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316018103:1592,parameteriz,parameterization,1592,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316018103,2,['parameteriz'],['parameterization']
Modifiability,"chine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Program",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6092,config,config-lite-,6092,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,"compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, please?; config.log<https://github.com/su2code/SU2/files/3418183/config.log>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/738?email_source=notifications&email_token=AADV2HBFP42OXAJCIZGTH2DQAXH4ZA5CNFSM4IFZ52EKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HAVNCNA>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AADV2HFS5T4HH2MWIC4JR4TQAXH4ZANCNFSM4IFZ52EA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:1947,config,config,1947,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,3,['config'],['config']
Modifiability,"composed via an inheritance chain, to do this; // we allow each building block to inherit from any class. These classes should; // be function objects that have no member variables, all data used in the; // resulting Compute method will be on the stack.; template<typename Base>; class ComputeArea : Base; {; protected:; // Different template instantiations will be made for; // 2D/3D to allow perfect loop unrolling.; enum : int {nDim = Base::nDim};. // To share variables between building blocks we will pass; // down a struct which is also composed by inheritance; struct WorkVarsType : Base::WorkVarsType; {; double area; // add ""area"" to the variables of Base; };; ; // The final implementation of Compute will be a call down the chain.; // The final constructed WorkVarsType is not known at this stage,; // hence we also template the method.; template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // Boilerplate, call base first. This is akin to the decorator design pattern; // without polymorphism. The working variables resemble Python's ""self"" which; // makes this solution reasonably idiomatic.; Base::Compute(wv, sol);. // Then do our specific job.; wv.area = 0.0;; for(int i=0; i<nDim; ++i); wv.area += pow(sol.areaVector[i],2);; wv.area = sqrt(wv.area);; }; };. // Same mechanics as above; template<typename Base>; class ComputeFlux : Base; {; protected:; enum : int {nDim = Base::nDim};. struct WorkVarsType : Base::WorkVarsType ; {; double flux; // ...add new member; };. template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // ...call base; Base::Compute(wv,sol);. // ...do aditional work; wv.flux = 0.0;; for(int i=0; i<nDim; ++i); wv.flux += sol.velocity[i]*sol.areaVector[i];; }; };. // This class is used to terminate the chain, it makes the link; // with the interface and it is used to specify any fixed sizes.; template<int NDIM>; class Terminator : private VirtualInterface; {; protected:; enum : int {nDim = NDIM};",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:3564,polymorphi,polymorphism,3564,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['polymorphi'],['polymorphism']
Modifiability,"computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:2550,variab,variables,2550,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['variab'],['variables']
Modifiability,"configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conftest.c -o conftest2.o >&5; configure:4380: $? = 0; configure:4386: gcc -c conftest.c -o conftest2.o >&5; configure:4390: $? = 0; configure:4401: cc -c conftest.c >&5; configure:4405: $? = 0; configure:4413: cc -c conftest.c -o conftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4619: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:8023,config,configure,8023,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; ,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:10175,config,configure,10175,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,6,['config'],['configure']
Modifiability,configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:11020,config,configure,11020,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's group at Stanford University. |; | - Prof. Piero Colonna's group at Delft University of Technology. |; | - Prof. Nicolas R. Gauger's group at Kaisersl",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16382,config,config,16382,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"container so that I can easily share with partner. But I failed to compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, please?; config.log<https://github.com/su2code/SU2/files/3418183/config.log>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/738?email_source=notifications&email_token=AADV2HBFP42OXAJCIZGTH2DQAXH4ZA5CNFSM4IFZ52EKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HAVNCNA>, or mute the thread<https://github.com/notificatio",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:1428,config,config,1428,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,1,['config'],['config']
Modifiability,"d the question with adding some code to ```CSurfaceMovement.cpp```.; The following is my specific added code:; ```; ...; 557: else if ((config->GetDesign_Variable(0) == ROTATION) || (config->GetDesign_Variable(0) == TRANSLATION) ||; 558: (config->GetDesign_Variable(0) == SCALE) || (config->GetDesign_Variable(0) == HICKS_HENNE) ||; 559: (config->GetDesign_Variable(0) == SURFACE_BUMP) || (config->GetDesign_Variable(0) == ANGLE_OF_ATTACK) ||; 560: (config->GetDesign_Variable(0) == CST)) {; 561: /*--- Apply rotation, displacement and stretching design variables (this; 562: should be done before the bump function design variables) ---*/; 563: ; 564: for (iDV = 0; iDV < config->GetnDV(); iDV++) {; 565: switch (config->GetDesign_Variable(iDV)) {; 566: case SCALE:; 567: SetScale(geometry, config, iDV, false);; 568: break;; 569: case TRANSLATION:; 570: SetTranslation(geometry, config, iDV, false);; 571: break;; 572: case ROTATION:; 573: SetRotation(geometry, config, iDV, false);; 574: break;; 575: }; 576: }; 577: ; 578: /*--- Apply the design variables to the control point position ---*/; 579: ; 580: for (iDV = 0; iDV < config->GetnDV(); iDV++) {; 581: switch (config->GetDesign_Variable(iDV)) {; 582: case HICKS_HENNE:; 583: SetHicksHenne(geometry, config, iDV, false);; 584: break;; 585: }; 586: }; 587: ; 588: /*--- Apply the design variables to the control point position ---*/; 589: ; 590: for (iDV = 0; iDV < config->GetnDV(); iDV++) {; 591: switch (config->GetDesign_Variable(iDV)) {; 592: case CST:; 593: SetCST(geometry, config, iDV, false);; 594: break;; 595: }; 596: }; ...; ```. I add ; ```; (config->GetDesign_Variable(0) == CST)) ; ``` ; in line 560 and add ; ```; for (iDV = 0; iDV < config->GetnDV(); iDV++) {; switch (config->GetDesign_Variable(iDV)) {; case CST:; SetCST(geometry, config, iDV, false);; break;; }; }; ```; in line 590~596. Then I recompiled it and run ```SU2_DEF naca0012.cfg``` , it worked as expected. But I'm not sure if the added code has a hidden hole.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2123#issuecomment-1703314305:1642,config,config,1642,https://su2code.github.io,https://github.com/su2code/SU2/issues/2123#issuecomment-1703314305,4,['config'],['config']
Modifiability,d/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.inl (0) ; - I SU2_CFD/include/numerics_machine_learning_turbulent.hpp (0) ; - I SU2_CFD/include/numerics_,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20214,plugin,plugins,20214,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"date with develop. Check out [feature_adap](https://github.com/su2code/SU2/tree/feature_adap). It uses goal-oriented (adjoint-based) adaptation instead of feature-based (just based on Mach or pressure) that Vic's fork used. Some things to note:; 1. It's currently only tested on Euler (it uses a Hessian of the Euler fluxes so it might work for NS/RANS, but probably not) (@WallyMaier and I also extended it to TNE2 in [feature_amgtne2](https://github.com/su2code/SU2/tree/feature_amgtne2) but the source terms are giving us trouble on adapted meshes); 2. It requires AD support since it uses the discrete adjoint to weigh the Euler flux Hessians; 3. I did all my testing with the AMG executable since pyAMG doesn't have all the features I currently need, but I just updated the branch to use pyAMG. I just tested the new interface with an airfoil and it seems to be working, but there might still be some bugs. You'll want to run mesh_adaptation_amg.py with the following options:; **ADAP_SIZES:** list of mesh complexities for each adaptive level. This is correlated to mesh size, but picking good values requires some playing around; **ADAP_SUBITE:** number of adaptations performed at each adaptive level. If set to (2,3) for example, it will run 2 adaptive iterations to try to reach ADAP_SIZES[0], and 3 iterations to try to reach ADAP_SIZES[1]; **ADAP_EXT_ITER:** number of iterations used by SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_RESIDUAL_REDUCTION:** order of magnitude residual reduction for SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_SENSOR:** currently only works for GOAL; **ADAP_HMAX:** maximum cell size (m); **ADAP_HMIN:** minimum cell size (m); **ADAP_HGRAD:** gradation coefficient (>1) used by AMG during mesh smoothing. A larger value corresponds to larger allowed gradient in mesh size. E.g. for the RAE2822 I used:; ADAP_SIZES= (12800, 19200, 25600); ADAP_SUBITE= (2, 2, 2); ADAP_EXT_ITER= (9999, 9999, 9999); ADAP_RESIDUAL_REDUCTION= (6, 6, 6); ADA",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504675574:1169,adapt,adaptive,1169,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504675574,1,['adapt'],['adaptive']
Modifiability,"days of debugging and I a don't get it. I have traced the problem down quite a bit and know which code lines I have to comment to make the problem go away ... but it doesnt make sense: I am not allowed (I can, but then I have non-equal diffs) to write anything (but zero!) in certain blocks of the local variable `profileData` in `CMarkerProfileReader`. That is only the case for more than 1 species equation! I also overwrote the `Inlet_Species_Var` using the `SetUnformInlet` which just takes the cfg-Marker values. . It seems to be some memory-problem and valgrind trys to speak to me but can only point me to the constructor of the Avg_GradSpecies for the volume in CDriver and tells me about a `Conditional jump or move depends on uninitialised value(s)` in `CSysSolve.cpp:131`; ```c++; if ((nrm <= 0.0) || (nrm != nrm)) {; ```; and is supposed to originate from `CDriver.cpp:1366` via a `Uninitialised value was created by a heap allocation`; ```c++; numerics[iMGlevel][SPECIES_SOL][visc_term] = new CAvgGrad_Species<Indices>(nDim, nVar_Species, true, config);; ```; ```c++; 338 --139924-- REDIR: 0x53dc330 (libstdc++.so.6:operator new[](unsigned long)) redirected to 0x4c2a801 (operator new[](unsigned long)); 339 --139924-- REDIR: 0x53da3e0 (libstdc++.so.6:operator delete[](void*)) redirected to 0x4c2b596 (operator delete[](void*)); 340 --139924-- REDIR: 0x53dc2e0 (libstdc++.so.6:operator new(unsigned long, std::nothrow_t const&)) redirected to 0x4c2a3af (operator new(unsigned long, std::nothrow_t const&)); 341 --139924-- REDIR: 0x53da3d0 (libstdc++.so.6:operator delete(void*, std::nothrow_t const&)) redirected to 0x4c2b2a8 (operator delete(void*, std::nothrow_t const&)); 342 ==139924== Conditional jump or move depends on uninitialised value(s); 343 ==139924== at 0xE2D19C: CSysSolve<double>::ModGramSchmidt(int, C2DContainer<unsigned long, double, (StorageType)0, 64ul, 0ul, 0ul>&, std::vector<CSysVector<double>, std::allocator<CSysVector<double> > >&) const (CSysSolve.cpp:131); 3",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1388#issuecomment-968058603:1913,config,config,1913,https://su2code.github.io,https://github.com/su2code/SU2/pull/1388#issuecomment-968058603,1,['config'],['config']
Modifiability,de/SU2/pull/814/files#diff-3> (13); * A SU2_DOT/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-4> (25); * A SU2_GEO/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-5> (9); * A SU2_MSH/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-6> (8); * A SU2_PY/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-7> (24); * A SU2_PY/pySU2/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-8> (62); * A SU2_SOL/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-9> (12); * A cmake-format.yaml<https://github.com/su2code/SU2/pull/814/files#diff-10> (40); * A cmake/CheckLinkerFlag.cmake<https://github.com/su2code/SU2/pull/814/files#diff-11> (70); * A cmake/ConfigureCGNS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-12> (11); * A cmake/ConfigureCLI11.cmake<https://github.com/su2code/SU2/pull/814/files#diff-13> (2); * A cmake/ConfigureCodi.cmake<https://github.com/su2code/SU2/pull/814/files#diff-14> (87); * A cmake/ConfigureExternals.cmake<https://github.com/su2code/SU2/pull/814/files#diff-15> (26); * A cmake/ConfigureMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-16> (16); * A cmake/ConfigureMPI.cmake<https://github.com/su2code/SU2/pull/814/files#diff-17> (12); * A cmake/ConfigureMetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-18> (12); * A cmake/ConfigureMutationpp.cmake<https://github.com/su2code/SU2/pull/814/files#diff-19> (12); * A cmake/ConfigureParmetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-20> (15); * A cmake/ConfigureTecio.cmake<https://github.com/su2code/SU2/pull/814/files#diff-21> (18); * A cmake/ConfigureThreads.cmake<https://github.com/su2code/SU2/pull/814/files#diff-22> (12); * A cmake/FindMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-23> (318); * A cmake/FindMPI4PY.cmake<https://github.com/su2code/SU2/pull/814/files#diff-24> (50); * A cmake/LibraryUtils.cmake<https://github.com/su2code/SU2/pull/814/fil,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:5605,Config,ConfigureExternals,5605,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,1,['Config'],['ConfigureExternals']
Modifiability,"defs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -----------------------------------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16147,config,config,16147,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,differentiation.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/fsi_computation.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2_CFD.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/eval/design.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/eval; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/eval/functions.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/eval; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/eval/gradients.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/eval; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/eval/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/eval; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/config.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/config_options.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/data.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/filelock.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/redirect.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/state.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/tools.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/historyM,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632032044:4401,config,config,4401,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632032044,1,['config'],['config']
Modifiability,"e more granularity such that you could manipulate the geometry from python (without writing it to files).; > We also wanted introspection, i.e. you could probe SU2 via python for what variables and functions are available.; > We also talked about having the projection step (DOT) included in CFD_AD so that you only need to worry about surface sensitivities, note that DEF is already part of CFD for forward mode AD.; > (talking does not go very far); > ; > If you want to lead this work, we can help you understand the inner workings. We meet every Wednesday at 4pm CET https://meet.jit.si/SU2_DevMeeting to discuss this type of issue. Thank you for the quick reply. The discussions you mention sound very promising, I would be glad to join tomorrow afternoon and learn more, so that I might contribute. One quick remark: I am aware that it is indeed possible to deform the mesh within `SU2_CFD`, I use this extensively for static aero-elastic analysis. However, I have not been able to have the deformed mesh be written to file at output (in SU2 or CGNS format). This is fine for aero-elastic updates (movement of the surface due to _structural displacements_), where it is sufficient to see the deformed mesh in the post-processing files. It becomes impractical though, for design updates (movement of the surface to due to _design displacements_, i.e. representing changes in the design variables) where the new mesh is a useful intermediate result. Even if this is just an issue in my configuration file, I think that a stand-alone driver or equivalent of `SU2_DEF` would remain useful. For each new set of updated design variables during shape optimisation, a single mesh deformation is sufficient to provide the new, updated jig geometry which all of the aerodynamic or aero-elastic analyses (one for each operating point) have in common. There would be no need to initialise the entire `SU2_CFD` machinery for this step, or to apply the design update separately for each of the SU2 instances.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1262#issuecomment-818839696:1575,variab,variables,1575,https://su2code.github.io,https://github.com/su2code/SU2/issues/1262#issuecomment-818839696,6,"['config', 'variab']","['configuration', 'variables']"
Modifiability,e.; - Add another check to improve stability.; - Collection of improvements.; - Updated actuator disk; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Preliminary implementation of the Neg SA; - Minor updates; - Preliminary implementation of the Negative SA; - Bug fixing; - Fixed memory issued for very large meshes with ParMETIS.; - Clear evaluation of Vorticity and StrainMag; - Viscous limiter; - Updated RELAXATION_FACTOR; - RANS MG; - Partial fix to no MPI output; - Updated I/O; - Updated Adapt CFL; - Updated Adaptive CFL number; - Release 3.2.8; - Updated SetCFL_Number; - Small update; - Small change; - Small adjustments; - Minor changes; - Updated release 3.2.8; - MPI disabled by default in build. Added --enable-mpi flag to configure.; - Merged the ParMETIS implementation. Updated the build files.; - bootstrap; - Started parallel CGNS reader.; - Memory fix.; - Minor change; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Updated binaries; - Small change to configure.ac. Bootstrap.; - Small change; - Cleaning the code; - Updated grid deformation subroutine; - Fixing the mesh deformation; - Updated SU2_MSH; - Bug fixing; - Initial implementation of parallel CGNS reader. Works on 1 rank.; - Merged in recent changes to geometry_structure.cpp.; - Periodic BC working in serial; - Update option_structure.hpp; - Merge pull request #154 from su2code/fixCOptionEnumList; - Bug fixing (periodic bc); - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Another important updated to BC in parallel; - More implementation and clean up of the parallel CGNS reader.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - CGNS reader bug fix.; - Updated adj. NS solver with primitive variables and farfield bc including viscous contribution.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Small change; - Back to the previous version; - Fixed some loop variables.;,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:6059,config,configure,6059,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['config'],['configure']
Modifiability,e.m (60) ; - D MeshTools/Matlab/plotMarkers.m (64) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux_x86_64 (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.macosx (112) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win (14) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win32 (33) ; - D MeshTools/PointwiseSU2plugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugi,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:13852,plugin,plugins,13852,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,e/CheckLinkerFlag.cmake<https://github.com/su2code/SU2/pull/814/files#diff-11> (70); * A cmake/ConfigureCGNS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-12> (11); * A cmake/ConfigureCLI11.cmake<https://github.com/su2code/SU2/pull/814/files#diff-13> (2); * A cmake/ConfigureCodi.cmake<https://github.com/su2code/SU2/pull/814/files#diff-14> (87); * A cmake/ConfigureExternals.cmake<https://github.com/su2code/SU2/pull/814/files#diff-15> (26); * A cmake/ConfigureMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-16> (16); * A cmake/ConfigureMPI.cmake<https://github.com/su2code/SU2/pull/814/files#diff-17> (12); * A cmake/ConfigureMetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-18> (12); * A cmake/ConfigureMutationpp.cmake<https://github.com/su2code/SU2/pull/814/files#diff-19> (12); * A cmake/ConfigureParmetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-20> (15); * A cmake/ConfigureTecio.cmake<https://github.com/su2code/SU2/pull/814/files#diff-21> (18); * A cmake/ConfigureThreads.cmake<https://github.com/su2code/SU2/pull/814/files#diff-22> (12); * A cmake/FindMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-23> (318); * A cmake/FindMPI4PY.cmake<https://github.com/su2code/SU2/pull/814/files#diff-24> (50); * A cmake/LibraryUtils.cmake<https://github.com/su2code/SU2/pull/814/files#diff-25> (239); * A cmake/TLS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-26> (28); * A cmake/check_thread_storage.c<https://github.com/su2code/SU2/pull/814/files#diff-27> (5); * A cmake/functions.cmake<https://github.com/su2code/SU2/pull/814/files#diff-28> (416); * A externals/cgns/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-29> (26); * A externals/metis/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-30> (108); * A externals/parmetis/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-31> (70); * A externals/tecio/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/file,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:6257,Config,ConfigureThreads,6257,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,1,['Config'],['ConfigureThreads']
Modifiability,"e:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $? = 0; configure:5140: ./conftest; configure:5140: $? = 0; configure:5154: result: 8; configure:5168: checking size of void *; configure:5173: gcc -o conftest -g -O2 conftest.c >&5; configure:5173: $? = 0; configure:5173: ./conftest; configure:5173: $? = 0; configure:5187: result: 8; configure:5409: checking X11/Intrinsic.h usability; configure:5409: gcc -c -g -O2 conftest.c >&5; conftest.c:61:27: error: X11/Intrinsic.h: No such file or directory; configure:5409: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-d",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:11674,config,configure,11674,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,eSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/s,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17289,plugin,plugins,17289,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"e_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's group at Stanford University. |; | - Prof. Piero Colonna's group at Delft University of Technology. ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16332,config,config,16332,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"ead_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could revisit the ownership relations of the numerics classes, i.e. allocate them as members of their respective solvers, which if we do, we can think of having a purpose built container that automates the per-thread creation and access. > Why are they redefined each time inside the loop?; > Is this for efficiency reasons?. Referring to variables being declared inside loops. One stylist reason is that declaring everything at the top of a function is the C way of doing things, the C++ people whose books/blogs I've read and talks I've watched, recommend keeping namespaces (the inside of the loop being one) as clean as possible.; The only reason not to do this is if you explicitly want re-use, in the case of trivial types this does not improve efficiency, and in the context of OpenMP code it can create issues. Just like we need one numerics per thread, if we declare variables outside a parallel loop the default OpenMP behaviour is to consider them shared, and concurrent writes to shared locations = gdb and many bad words xD.; **EDIT:** I should mention here that if the parallel region is started before the variable declarations they become local and all is well, with the exception of class members, those will be shared most of the time (this is where const correctness can give some peace of mind). > Also, just an additional (hopefully constructive) comment: I find all of these developments great, and I honestly think that you are doing an amazing job on performance and overall code improvement. However, as a non-C++-master myself, I'm just a little concerned of whether some advanced programming may become an entrance barrier to new additions to the community. As I wrote in the preamble of #789:; ""But please participate even if you never heard of these topics, your opinion about readability and ""developability"" of the code is important! I think the code-style should be accessible to people starting ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:2870,variab,variables,2870,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['variab'],['variables']
Modifiability,"eature_adapt branch`. 2. downloaded the Adaptive 2D NACA 0012 example (https://pyamg.saclay.inria.fr/pyamgexamples.html#2dnaca): `adap_NACA0012.cfg`, `mesh_NACA0012_inv.su2`, `NACA0012_ini.dat`. 3. added the following lines to the config:; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```. 4. run the following command: `$ python3 SU2_RUN/mesh_adaptation_amg.py -f adap_ONERAM6.cfg -n 8`. The response I have obtained is the following:; ```; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (30000, 60000, 120000); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : MACH; PYADAP_HMAX : 500.0; PYADAP_HMIN : 1e-9; PYADAP_HGRAD : 1.8; PYADAP_FLOW_ITER : (2999, 4999, 6999); PYADAP_ADJ_ITER : (2999, 4999, 6999); PYADAP_CFL : (10.0, 15.0, 20.0); PYADAP_RDG : NO. The ./adap folder was deleted. Generating GMF background surface mesh.; ## WARNING: MISSING SU2 MESH FILE KEYWORD: NCORNERS=.; Initial CFD solution is provided.; ```. As expected, a `./ADAP` folder was created, containing these docs: `amg_back_meshb`, `config_CFD.cfd`, `log.err`, `log.out` (sizes 0 byte), `mesh_NACA0012_inv.su2` (link to the mesh), `NACA0012_ini.dat` (link to the file.dat). Did I perform the procedure correctly? Or did I miss something?; If it is correct and complete, which file contains the adaptive mesh? How can I use it since there is no new .su2 file? . Thank you for the big help",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-737134105:1239,Adapt,Adaptation,1239,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-737134105,5,"['Adapt', 'adapt']","['Adaptation', 'adaptation', 'adaptive']"
Modifiability,"ed) adaptation instead of feature-based (just based on Mach or pressure) that Vic's fork used. Some things to note:; 1. It's currently only tested on Euler (it uses a Hessian of the Euler fluxes so it might work for NS/RANS, but probably not) (@WallyMaier and I also extended it to TNE2 in [feature_amgtne2](https://github.com/su2code/SU2/tree/feature_amgtne2) but the source terms are giving us trouble on adapted meshes); 2. It requires AD support since it uses the discrete adjoint to weigh the Euler flux Hessians; 3. I did all my testing with the AMG executable since pyAMG doesn't have all the features I currently need, but I just updated the branch to use pyAMG. I just tested the new interface with an airfoil and it seems to be working, but there might still be some bugs. You'll want to run mesh_adaptation_amg.py with the following options:; **ADAP_SIZES:** list of mesh complexities for each adaptive level. This is correlated to mesh size, but picking good values requires some playing around; **ADAP_SUBITE:** number of adaptations performed at each adaptive level. If set to (2,3) for example, it will run 2 adaptive iterations to try to reach ADAP_SIZES[0], and 3 iterations to try to reach ADAP_SIZES[1]; **ADAP_EXT_ITER:** number of iterations used by SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_RESIDUAL_REDUCTION:** order of magnitude residual reduction for SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_SENSOR:** currently only works for GOAL; **ADAP_HMAX:** maximum cell size (m); **ADAP_HMIN:** minimum cell size (m); **ADAP_HGRAD:** gradation coefficient (>1) used by AMG during mesh smoothing. A larger value corresponds to larger allowed gradient in mesh size. E.g. for the RAE2822 I used:; ADAP_SIZES= (12800, 19200, 25600); ADAP_SUBITE= (2, 2, 2); ADAP_EXT_ITER= (9999, 9999, 9999); ADAP_RESIDUAL_REDUCTION= (6, 6, 6); ADAP_SENSOR= GOAL; ADAP_HMAX= 10.0; ADAP_HMIN= 1e-8; ADAP_HGRAD= 1.5. ![mesh](https://user-images.githubusercontent.com/19416354/599",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504675574:1299,adapt,adaptations,1299,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504675574,2,['adapt'],"['adaptations', 'adaptive']"
Modifiability,"ed.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false; ; Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN; ; Based on the input to this configuration, add these lines to your .bashrc file:; ; export SU2_RUN=D:\Programme\SU2-7.1.1\bin/bin; export SU2_HOME=D:\Programme\SU2-7.1.1; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN; ; Use './ninja -C D:\Programme\SU2-7.1.1\build install' to compile and install SU2; ; Build targets in project: 20; ; Found ninja.exe-1.9.0 at D:\Programme\SU2-7.1.1\ninja.exe; Running compile:; Working directory: C:\Users\MANUEL~1\AppData\Local\Temp\tmpctmi2f32; Command line: c++ C:\Users\MANUEL~1\AppData\Local\Temp\tmpctmi2f32\testfile.cpp -o C:\Users\MANUEL~1\AppData\Local\Temp\tmpctmi2f32\output.obj -pipe -c -std=c++11 ; ; Code:; int i = static_cast<int>(0);; Compiler stdout:; ; Compiler stderr:; ; Compiler accepts -std=c++11: YES; ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:8610,Config,Configuration,8610,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,3,"['Config', 'config', 'variab']","['Configuration', 'configuration', 'variables']"
Modifiability,"egin to run much larger models. Otherwise the preprocessing time for the searches can become excessive and dominant. If someone wanted to try using PCL for this, that would be quite interesting. Given the open source license, as Tom mentions, there should not be a problem interfacing with SU2. Now, an issue we faced in the ASC / PSAAP programs is that for extremely large calculations, the surface mesh (to be searched for minimum distance calculations) may actually not fit in a single processor. For that purpose we built parallel ADTs in the past (unfortunately in FORTRAN90) which replicate a small portion of the upper structure of the tree in all processors (without consuming a lot of memory) and then decomposed the tree into the various processors participating in the searches. While the parallel speedups / efficiencies were not earth-shattering, we did manage to overcome the memory bottlenecks. Does anyone know if PCL can also handle trees that are decomposed in parallel? Would PCL work with its own MPI communicator and automate the communication needed for the searches?. Cheers,. Juan. On Jun 5, 2016, at 4:06 AM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. Indeed, at the moment, we are relying on brute force searches. We have discussed using tree searches internally (and potentially have some reusable code available for this), but nothing has been implemented. It looks like pointcloud is released under a BSD license, which is very permissive. Do you have an implementation in SU2 already with this code embedded? It is also fairly straightforward for us to add hooks in the configure process to installed libraries on your system. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHubhttps://github.com/su2code/SU2/issues/282#issuecomment-223807001, or mute the threadhttps://github.com/notifications/unsubscribe/ADpSxPh8ni-GpSN-zKjD9Nyi47sf5sqZks5qIq2jgaJpZM4ItVbi.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-223861540:1874,config,configure,1874,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-223861540,1,['config'],['configure']
Modifiability,"ense to have an updated value for the limiter. However this is not 100% accurate because we are using old gradients to compute the new limiter. Anyway, the spirit is to have a limiter computed using the latest flow variables value and we should probably check that the gradients have been also updated before computing limiters again for the turbulence equation. What I don't really like is Upwind_Residual. ` bool limiter = (config->GetSpatialOrder() == SECOND_ORDER_LIMITER);; `. in this case we are using only the info about limiters or not in the turbulence model... so if, for example, we are using JST for the mean flow equations then the limiter for the flow equations have never been computed and. ```; if (limiter) {; FlowPrimVar_i[iVar] = V_i[iVar] + Limiter_i[iVar]*Project_Grad_i;; FlowPrimVar_j[iVar] = V_j[iVar] + Limiter_j[iVar]*Project_Grad_j;; }. ``` . Is incorrect because Limiter_i has never been computed (if we are lucky maybe we are using a zero value by default... but we need to check). In other words, I think this require a deeper look. @jschuele, could you please think on this and submit a new pull request (I'll close this one). If you don't have time, please let me know and we really appreciate if you could add this situation as an Issue. We'll try to fix this problem as soon as possible. By the way the initial confusion was that the SpatialOrder in . ` config->GetSpatialOrder(); `; is updated in ; ```; void CConfig::SetGlobalParam(unsigned short val_solver,; unsigned short val_system,; unsigned long val_extiter) {; ```. so it will change during runtime and as we are solving the turbulence model . `config->GetSpatialOrder()` is the same as `config->GetSpatialOrder_Turb()`. in ; `void CTurbSASolver::Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output) {`. @jschuele and @paulhzhang thanks a lot for working with us on SU2!; Best,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/403#issuecomment-320490588:2025,config,config,2025,https://su2code.github.io,https://github.com/su2code/SU2/pull/403#issuecomment-320490588,4,['config'],['config']
Modifiability,epend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; ,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14357,plugin,plugins,14357,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,eport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/s,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16773,plugin,plugins,16773,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"er = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; SU2_CFD(config_cfd); ; except:; sys.stdout = sav_stdout; sys.stderr ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:4572,config,config,4572,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"er the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear preconditioners. For now the objective is ""just"" not to loose performance while gaining flexibility.; - The performance of MPI+threads with 1 thread per rank will be worse than just MPI (no free lunches). With this [small case](https://github.com/su2code/SU2/files/3933059/small_case.zip) using 8 cores off a machine with two 2650v4 CPU, Intel MPI 2018 + GCC 8.2, the hybrid (2 ranks of 4 threads) approach is about 5% faster thank the MPI-only (8 ranks), I expect larger cases to have identical performance. ### How To; - Compile: Add -fopenmp to the compiler and linker arguments.; - Run: Set number of threads with env variable `OMP_NUM_THREADS` (eventually I will make that a command line parameter), for best performance set `OMP_WAIT_POLICY=ACTIVE` and beware of thread binding settings, use `mpirun --bind-to socket` or `mpirun --bind-to numa` never `core`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:3593,variab,variable,3593,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['variab'],['variable']
Modifiability,"erator= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] = rhs.vals_[k];; return *this;; }. STRONGINLINE Array& operator+= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] += rhs.vals_[k];; return *this;; }; STRONGINLINE Array operator+ (const Array& rhs) const { return Array(*this)+=rhs; }; ; /*; * Many other operators go here.; */; };. // Common math function overloads; template<class T>; STRONGINLINE T vmax(const T& a, const T& b); {; T res;; #pragma omp simd; for(size_t k=0; k<T::Size; ++k); res[k] = (a[k]>b[k])? a[k] : b[k];; return res;; }. #undef FOREACH; ```; There are other (better) ways to do this, for example using [x86 intrinsics](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=2273,2273,2436,2943,2436,2943,610,1788,2942) (in header `<x86intrin.h>`), register types instead of arrays, and a boat load of template meta-programming (I'm guessing) there are professional libraries for this.; This quickly-hacked-together code is compatible with custom types, portable, and seems to do the trick. To pull this off we do not need to have `Vector` or `Matrix` of this class, the underlying type for those data structures is still `double`, only the `getVec` type methods need to convert on the fly to the SIMD type, for example:; ```C++; // use the ""pointer ctor"" to return an array starting at ""row0""; Array<double,4> Matrix<double>::getVec(size_t row0, size_t col) const {; return Array<double,4>(&data_[row0+col*rows_]);; }. // use the ""gather ctor"" to return an array with the indices in ""rows""; template<class U>; Array<double,4> Matrix<double>::getVec(const U& rows, size_t col) const {; return Array<double,4>(&data_[col*rows_], rows);; }; ```; After inlining those copies get optimized away.; Although the stored type, and ""scalar interface"" of the containers do not need to change, the storage order of the data does. Notice that in the above data is stored by columns instead of rows (something that @vdweide mentioned in #716) this has",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:9050,portab,portable,9050,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['portab'],['portable']
Modifiability,"erency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** reduces temporal locality, edges are sorted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in general use more memory due to the intermediate variables and extra adjacency information needed. If the entire algorithm is transformed performance may suffer as some computations may have to be repeated.; However, some reductions are possible without intermediate variables, for example when assembling the system matrix for implicit schemes only the diagonal entries can result in race conditions, now it just so happens that each diagonal entry is equal to the negated corresponding column sum.; - **Atomics** are terrible for the performance of code that writes frequently to memory (i.e. bandwidth-bound code), they do not increase the memory footprint and so make sense for compute-bound code.; Bugs due to a missing atomic can be very hard to debug (but any race condition is). Coloring is what one sees most in the literature, and yet I lean towards gather-to-scatter. Fewer things can go wrong with it as it is easy to understand, one gets the maximum amount of parallelism. I will now take two familiar routines, computin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:5878,variab,variables,5878,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['variab'],['variables']
Modifiability,"erical scheme or the other options are changed. Which configuration file would you want?; > > By any chance, are you implementing or developing a transition model? Can you tell me what model you are willing to use if it's a model implementation? My next goal is to implement the AFT model or the k-w-gamma model, but I'm trying to implement a k-w-gamma model because it seems like the AFT model is being implemented by the other developer.; > ; > If you could send me the config files for the T3A, T3A- and NLF test cases it would be awesome!; > ; > I have implemented the same model as yours, the LM model, in parallel to you 'cause I needed it for some simulations. I also tried implementing the same version but related to the SA turbulence model, however it still is bothering me that I cannot seem to get good results on it.; > ; > If you want, I also tried the prolate spheroid test-case with good results. If you need I can give the configs and the meshes. The only thing about this test-case is that it is more related to the cross-flow transition, thus it needs to be implemented, which I think I'll do in these days.; > ; > I think that the k-w-gamma model is the way to go right after the implementation of the LM model since it has lots of equations in common. Do you think that you need another class for it or you will write on the same classes that you have already built (like the CTransLMSolver)?. The test case(T3A, T3A-, and NLF-0416) configuration files were uploaded to my git repository. Here is the [link](https://github.com/sun5k/SU2/tree/develop/TestCases/transition ). Suggestions for the prolate spheroid test-case is appreciated. However, my transition model is the LM-2009, and I have no plans for the 2015-LM model. Therefore, the cross-flow transition is left for future developers. I think the CTransGammaSolver, CTransGSolver, or the other name of classes will be added for the k-w-gamma transition model. It's a vague idea, I haven't really thought about detail yet.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1201919830:1784,config,configuration,1784,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1201919830,1,['config'],['configuration']
Modifiability,"erit from any class. These classes should; // be function objects that have no member variables, all data used in the; // resulting Compute method will be on the stack.; template<typename Base>; class ComputeArea : Base; {; protected:; // Different template instantiations will be made for; // 2D/3D to allow perfect loop unrolling.; enum : int {nDim = Base::nDim};. // To share variables between building blocks we will pass; // down a struct which is also composed by inheritance; struct WorkVarsType : Base::WorkVarsType; {; double area; // add ""area"" to the variables of Base; };; ; // The final implementation of Compute will be a call down the chain.; // The final constructed WorkVarsType is not known at this stage,; // hence we also template the method.; template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // Boilerplate, call base first. This is akin to the decorator design pattern; // without polymorphism. The working variables resemble Python's ""self"" which; // makes this solution reasonably idiomatic.; Base::Compute(wv, sol);. // Then do our specific job.; wv.area = 0.0;; for(int i=0; i<nDim; ++i); wv.area += pow(sol.areaVector[i],2);; wv.area = sqrt(wv.area);; }; };. // Same mechanics as above; template<typename Base>; class ComputeFlux : Base; {; protected:; enum : int {nDim = Base::nDim};. struct WorkVarsType : Base::WorkVarsType ; {; double flux; // ...add new member; };. template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // ...call base; Base::Compute(wv,sol);. // ...do aditional work; wv.flux = 0.0;; for(int i=0; i<nDim; ++i); wv.flux += sol.velocity[i]*sol.areaVector[i];; }; };. // This class is used to terminate the chain, it makes the link; // with the interface and it is used to specify any fixed sizes.; template<int NDIM>; class Terminator : private VirtualInterface; {; protected:; enum : int {nDim = NDIM};. struct WorkVarsType {};. template<typename... Ts>; void Compute(Ts&...) const {}; }",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:3590,variab,variables,3590,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['variab'],['variables']
Modifiability,"es are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's group at Stanford University. |; | - Prof. Piero Colonna's group at Delft University of Technology. |; | - Prof. Nicolas R. Gauger's group at Kaiserslautern U. of Technology. |; | - Prof. Alberto Guardone's group at Polytechnic University of Milan. |; | - Prof. Rafael Palacios' group at Imperial College London. |; ----------------------------------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16582,config,config,16582,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"esh adaptation failed.\n""; ; if not os.path.exists(""current.itp.solb""):; raise RuntimeError , ""\n##ERROR AMG: Solution interpolation failed.\n"" ; ; #--- Convert output from Inria mesh format to su2; # Deal with markers; ; save_markers = mesh['markers']; del mesh; ; # Read Inria mesh; mesh = su2amg.read_mesh(config_amg['mesh_out'], ""current.itp.solb""); mesh['markers'] = save_markers; ; current_mesh = ""ite%d.su2"" % global_iter; current_solution = ""ite%d.dat"" % global_iter ; ; su2amg.write_mesh(current_mesh, current_solution, mesh); ; if not os.path.exists(current_mesh) or not os.path.exists(current_solution) :; raise RuntimeError , ""\n##ERROR : Conversion to SU2 failed.\n"". else : # Use pyAmg interface; ; ; #--- Load su2 mesh ; ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- Create sensor used to drive the adaptation; ; sensor_wrap = su2amg.create_sensor(mesh, adap_sensor); ; mesh['sensor'] = sensor_wrap['solution']; ; sys.stdout.write(' %s Generating adapted mesh using AMG\n' % pad_cpt); ; mesh_new = su2amg.amg_call_python(mesh, config_amg); ; #--- print mesh size; ; sys.stdout.write(' %s AMG done: %s\n' % (pad_nul, su2amg.return_mesh_size(mesh_new))); ; mesh_new['markers'] = mesh['markers']; mesh_new['dimension'] = mesh['dimension']; ; current_mesh = ""ite%d.su2"" % global_iter; current_solution = ""ite%d.dat"" % global_iter; ; su2amg.write_mesh(current_mesh, current_solution, mesh_new); ; #--- Run su2; ; log = 'ite%d.SU2'%global_iter; stdout_hdl = open('%sstdout'%log,'w') # new targets; stderr_hdl = open('%sstderr'%log,'w'); ; success = False; val_out = [False]; ; sys.stdout.write(' %s Running CFD\n' % pad_nul); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_solution_ini = ""ite%d_ini.dat"" % global_iter; os.rename(current_solution, current_solution_ini); ; config_cfd.MESH_FILENAME = current_mesh; config_cfd.CONV_FILENAME = ""ite%d_history"" % global_iter",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:10362,adapt,adapted,10362,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['adapt'],['adapted']
Modifiability,eshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugi,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16127,plugin,plugins,16127,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"eson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\p",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5547,config,config,5547,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,4,['config'],['config']
Modifiability,"esult: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $? = 0; configure:5140: ./conftest; configure:5140: $? = 0; configure:5154: result: 8; configure:5168: checking size of void *; configure:5173: gcc -o conftest -g -O2 conftest.c >&5; configure:5173: $? = 0; configure:5173: ./conftest; configure:5173: $? = 0; configure:5187: result: 8; configure:5409: checking X11/Intrinsic.h usability; configure:5409: gcc -c -g -O2 conftest.c >&5; conftest.c:61:27: error: X11/Intrinsic.h: No such file or directory; configure:5409: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | #define STDC_HEADERS 1; | #define HAVE_SYS_TYPES_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:12270,config,configure,12270,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,6,['config'],['configure']
Modifiability,"except:; sys.stderr.write(""## ERROR : Unable to import pyamg module.\n""); sys.exit(1). def amg ( config , kind='' ):; ; sys.stdout.write(""SU2-AMG Anisotropic Mesh Adaptation\n""); ; #--- TODO: Check pyamg version compatibility; ; #--- Check config options related to mesh adaptation; ; adap_options = ['ADAP_SIZES', 'ADAP_SUBITE', 'ADAP_SENSOR', \; 'ADAP_BACK', 'ADAP_HMAX', 'ADAP_HMIN', 'ADAP_HGRAD', 'ADAP_RESIDUAL_REDUCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:3428,config,config,3428,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"f the result is `[0]`, ie ""False"", you have to build python with the option `--enable-shared`. ; Now, I don't know how to do accomplish that with conda, but with [pyenv](https://github.com/pyenv/pyenv) it involves installing the desired python version with `CONFIGURE_OPTS=--enable-shared pyenv install <version>`. To recap, a ""workflow for newbies"" which appears to be working for me is. 1. install pyenv either from [source](https://github.com/pyenv/pyenv#installation) or from your distibution repositories, if available. IMPORTANT: make sure the environment variables are correctly set and `pyenv init` is added to your shell, as per the installation instructions.; 2. install the desired python version (for example 3.7.8), enabling shared libraries: ; `CONFIGURE_OPTS=--enable-shared pyenv install 3.7.8`; 3. clone/download the [feature_adap](https://github.com/su2code/SU2/tree/feature_adap) branch of SU2;; 4. in the SU2 folder, configure meson ; `./meson.py build` ; and make sure to update the environment variables in your `.bashrc` as indicated by meson's output.; 5. use ninja to build and install SU2 ; `./ninja -C build install`;; if you run into a permission error, specify an installation directory passing the `--prefix` option to meson, as explained [here](https://www.cfd-online.com/Forums/su2-installation/227676-su-installation-failed-due-insufficient-permissions.html). These passages, at least for me, result in a running SU2 with mesh adaptation, although I have made no tests on running actual simulations. That being said, the involvement of pyenv is due to the fact that the provided python wheel for pyamg is for python 3.7 only. If I understand correctly, the library itself is proprietary, sadly, so I assume @bmunguia has access either to the source files or to someone who can package them. Depending on the actual compatibility of the code, it would be nice if the wheel was updated to the latest python version, or at least the dependency on 3.7.* was removed. . @c",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-751823130:1712,variab,variables,1712,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-751823130,1,['variab'],['variables']
Modifiability,"f501dc168cd7ef4a4d1f81140a0959a9d4382128 fixes divergence of the `disc_adj_fsi` case among the parallel regression tests that occurred when using the CoDiPack type `RealReverseIndex` instead of `RealReverse`. Since the bug is not obvious from the commit and there might be a better way to fix this, let me put this up for discussion. In `CDiscAdjMultizoneDriver::SetRecording`, the tape is recorded part by part. The part of the code that is at fault involves three of them.; - `DEPENDENCIES -> OBJECTIVE_FUNCTION`: an index is last used on a right hand side; - `OBJECTIVE_FUNCTION -> TRANSFER`: the index is available for reuse and used on the left hand side; - `recording for a zone`: the index is used on a right hand side. In `CDiscAdjMultizoneDriver.cpp::ComputeAdjoints`, however, the `TRANSFER -> OBJECTIVE_FUNCTION` part of the evaluation is skipped in some cases. After the `recording for a zone` evaluation accumulated adjoints for the said index, the adjoint reset that would be performed in the skipped tape part is missing. Instead, the tape evaluation `DEPENDENCIES -> OBJECTIVE_FUNCTION` receives the adjoints for this index, which is wrong because the index is associated with a different primal variable in this part of the tape. Have there been issues regarding dependencies between tape parts previously? Are there mechanisms established that address such issues?. If someone wants to give it a try, I added a build option for the tape type in 183c3ca7a3235c8293cf2242c66c82d35a3922c7. You can switch to the index tape by calling meson with `-Dcodi-tape=JacobianIndex`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1294#issuecomment-859603733:1212,variab,variable,1212,https://su2code.github.io,https://github.com/su2code/SU2/pull/1294#issuecomment-859603733,1,['variab'],['variable']
Modifiability,ff-7> (24); * A SU2_PY/pySU2/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-8> (62); * A SU2_SOL/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-9> (12); * A cmake-format.yaml<https://github.com/su2code/SU2/pull/814/files#diff-10> (40); * A cmake/CheckLinkerFlag.cmake<https://github.com/su2code/SU2/pull/814/files#diff-11> (70); * A cmake/ConfigureCGNS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-12> (11); * A cmake/ConfigureCLI11.cmake<https://github.com/su2code/SU2/pull/814/files#diff-13> (2); * A cmake/ConfigureCodi.cmake<https://github.com/su2code/SU2/pull/814/files#diff-14> (87); * A cmake/ConfigureExternals.cmake<https://github.com/su2code/SU2/pull/814/files#diff-15> (26); * A cmake/ConfigureMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-16> (16); * A cmake/ConfigureMPI.cmake<https://github.com/su2code/SU2/pull/814/files#diff-17> (12); * A cmake/ConfigureMetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-18> (12); * A cmake/ConfigureMutationpp.cmake<https://github.com/su2code/SU2/pull/814/files#diff-19> (12); * A cmake/ConfigureParmetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-20> (15); * A cmake/ConfigureTecio.cmake<https://github.com/su2code/SU2/pull/814/files#diff-21> (18); * A cmake/ConfigureThreads.cmake<https://github.com/su2code/SU2/pull/814/files#diff-22> (12); * A cmake/FindMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-23> (318); * A cmake/FindMPI4PY.cmake<https://github.com/su2code/SU2/pull/814/files#diff-24> (50); * A cmake/LibraryUtils.cmake<https://github.com/su2code/SU2/pull/814/files#diff-25> (239); * A cmake/TLS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-26> (28); * A cmake/check_thread_storage.c<https://github.com/su2code/SU2/pull/814/files#diff-27> (5); * A cmake/functions.cmake<https://github.com/su2code/SU2/pull/814/files#diff-28> (416); * A externals/cgns/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-29,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:5973,Config,ConfigureMutationpp,5973,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,1,['Config'],['ConfigureMutationpp']
Modifiability,"fig'; Run-time dependency openblas found: YES 0.3.10; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_HOME/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.6 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: true; PaStiX: false; Mixed Float: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=/home/slimshady/UserPackages/SU2_INSTALL/bin; export SU2_HOME=/home/slimshady/UserPackages/SU2_HOME; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. Use './ninja -C build install' to compile and install SU2. Build targets in project: 21. Found ninja-1.10.0.git at /home/slimshady/UserPackages/SU2_HOME/ninja; ```; The ninja command fails like so:; ```; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./ninja -C build install ; ninja: Entering directory `build'; [583/894] Linking target SU2_CFD/src/SU2_CFD; FAILED: SU2_CFD/src/SU2_CFD ; /usr/bin/g++ -o SU2_CFD/src/SU2_CFD SU2_CFD/src/SU2_CFD.p/SU2_CFD.cpp.o -Wl,--as-needed -Wl,--no-undefined -Wl,-O1 -Wl,--start-group SU2_CFD/src/libSU2core.a externals/cgns/libcgns.a externals/metis/libmetis.a externals/parmetis/libparmetis.a externals/tecio/teciompisrc/libteciompi.a Common/src/libSU2Common.a -Wl,-rpath -Wl,/usr/local/mpich-3.3.2/lib /usr/local/mpich-3.3.2/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137:3425,config,configuration,3425,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137,1,['config'],['configuration']
Modifiability,figure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:10267,config,configure,10267,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,"fine PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | #define STDC_HEADERS 1; | #define HAVE_SYS_TYPES_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creat",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:15364,config,configure,15364,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"fine. I added the ability to specify corner points for sharp features that the user wants to maintain. For example, in an airfoil test case I want to make sure the sharp trailing edge at node 512 is maintained, so I can manually add; ```; NCORNERS= 1; 1 512; ```; to the end of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_40960_split.meshb; % In",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:1005,adapt,adaptation,1005,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,1,['adapt'],['adaptation']
Modifiability,"firmed by opening a python terminal and running `import mpi4py`. #### The easiest workaround. Switch to a [virtualenv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). This will ensure that all of your python packages are stored in single location. #### Alternate workaround. In this method, you change the hardcoded includes to match mpi4py's package location. First I figure out where my mpi4py is installed. I start a terminal session of python using the python environment I want to use (in this case, it's python 3.6), and then run:; ```; from mpi4py import MPI; MPI; ```. Since I have mpi4py installed on your system and it's on my python path, I see something like:; ```; <module 'mpi4py.MPI' from '/home/clarkpede/.local/lib/python3.6/site-packages/mpi4py/MPI.cpython-34m.so'>; ```. The `/home/clarkpede/.local/lib/python3.6/` directory is where my mpi4py package is installed. But the swig compile command includes `/home/clarkpede/.local/lib/python2.7/`. That's not the right directory! So first I find the hardcoded paths of the makefile by running (on a bash terminal):; ```; grep -rn python2\.7 SU2_PY/ ; ```; On my system, this prints out four lines. I don't care about the `Makefile.in` files, because those are generated automatically and will be overwritten every time I run ""configure"" or ""preconfigure.py."" The `NUMPY_INCLUDE` line is also commented out, so I ignore that too. That leaves me with one line, line 51 of `SU2_PY/pySU2/Makefile.am`:. ```; SU2_PY/pySU2/Makefile.am:51:MPI4PY_INCLUDE = ${HOME}/.local/lib/python2.7/site-packages/mpi4py/include \; ```. I now modify line 51 of Makefile.am to read:. ```; MPI4PY_INCLUDE = ${HOME}/.local/lib/python3.6/site-packages/mpi4py/include \; ```. Then run configure or preconfigure.py again, and then run make again. You should be good to go!. #### tl;dr. If you're having this error, modify the `MPI4PY_INCLUDE` line of `SU2_PY/pySU2/Makefile.am` to include the location of your mpi4py package.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/722#issuecomment-515693590:2286,config,configure,2286,https://su2code.github.io,https://github.com/su2code/SU2/issues/722#issuecomment-515693590,4,['config'],['configure']
Modifiability,"ftest.c >&5; configure:4022: $? = 0; configure:4031: result: yes; configure:4040: checking whether gcc accepts -g; configure:4060: gcc -c -g conftest.c >&5; configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conftest.c -o conftest2.o >&5; configure:4380: $? = 0; configure:4386: gcc -c conftest.c -o conftest2.o >&5; configure:4390: $? = 0; configure:4401: cc -c conftest.c >&5; configure:4405: $? = 0; configure:4413: cc -c conftest.c -o conftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4619: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #d",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:7771,config,configure,7771,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,14,['config'],['configure']
Modifiability,"fyi, the surface files output both a .csv and a .dat version, one of which; can be opened by tecplot (.dat) with everything you usually want for; visualization, while the other one contains the global index information; and values that are used in surface-based mesh deformation (and maybe other; tools, but that's the one I know of - I could see that format being useful; for prescribed surface properties as well). So one challenge that would be; faced with this change is how to make sure that both files are still; output. I would argue for switching to no suffixes where possible - less work for; new users, a little more work for us - one way we could get the best of; both worlds is by having the filenames written in the config without; suffix, but when loaded into su2 (and the python version of loading the; config file) store the variable with the appropriate suffix. That way if it; changes in the future it only has to be updated in one place, and all the; old config files would still work after a code change that alterred the; suffix.; -Heather. On Wed, Jul 30, 2014 at 11:05 AM, Brendan Tracey notifications@github.com; wrote:. > SU2 right now is inconsistent with how it does file names in the config; > file. For example, the restart file needs to be specified with a "".dat""; > suffix, but in the case of the surface files, the "".csv"" is added; > automatically. SU2 should be consistent across all filenames. Preferably,; > this will be fixed by having the user specify all suffixes. This is a tiny; > amount of additional work for the user, but it makes writing scripts that; > use the config file much easier. When the suffix is in the config file,; > it's easy to have python say ""open this file"". If the config file just has; > the base name of the file (no extension) then the knowledge of what suffix; > SU2 uses must be hard-coded into the follow-on script (which can then break; > later if SU2 changes).; > ; > ‚Äî; > Reply to this email directly or view it on GitHub; > https",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/41#issuecomment-50703399:729,config,config,729,https://su2code.github.io,https://github.com/su2code/SU2/issues/41#issuecomment-50703399,4,"['config', 'variab']","['config', 'variable']"
Modifiability,"g-config: /home/user/anaconda3/bin/pkg-config (0.29.2); /work/A/openmpi/3.0.0_intel2018u2/bin/mpicc found: YES (/work/A/openmpi/3.0.0_intel2018u2/bin/mpicc) 3.0.0; Run-time dependency MPI for c found: YES 3.0.0; /work/A/openmpi/3.0.0_intel2018u2/bin/mpicxx found: YES (/work/A/openmpi/3.0.0_intel2018u2/bin/mpicxx) 3.0.0; Run-time dependency MPI for cpp found: YES 3.0.0; Message: Boost sources found.; Program swig found: YES (/home/user/anaconda3/bin/swig); Message: Using mpi4py from /home/user/anaconda3/lib/python3.7/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/user/programs/su2/SU2_src/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.8 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): false; AD (forward): false; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false; ; Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN; ; Based on the input to this configuration, add these lines to your .bashrc file:; ; export SU2_RUN=/home/user/programs/su2/SU2-7.0.8/bin; export SU2_HOME=/home/user/programs/su2/SU2_src; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN; ; Use './ninja -C build install' to compile and install SU2; ; Build targets in project: 12; ; Found ninja-1.10.0.git at /home/user/programs/su2/SU2_src/ninja; Using 'STRIP' from environment with value: '/home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-strip'; Using 'STRIP' from environment with value: '/home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-strip'; ```. Am I specifying it incorrectly?; Thanks.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1134#issuecomment-744491311:4789,Config,Configuration,4789,https://su2code.github.io,https://github.com/su2code/SU2/issues/1134#issuecomment-744491311,3,"['Config', 'config', 'variab']","['Configuration', 'configuration', 'variables']"
Modifiability,"g_amg['metric_in'] = ''; config_amg['sol_in'] = 'current_sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d - Mesh size coefficient %.1lf\n"" % (iSiz+1, len(mesh_sizes), mesh_size)); ; for iSub in range(nSub):; ; config_amg['size'] = mesh_size; config_amg['amg_log'] = 'ite%d.amg.stdout' % (global_iter); ; # Prints; pad_cpt = (""(%d/%d)"" % (iSub+1, nSub)).ljust(9); pad_nul = """".ljust(9); ; if not amg_python : ; ; #--- Load su2 mesh ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- If not using the amg python interface, convert the mesh and make system call; ; su2amg.write_mesh(""current.meshb"", ""current.solb"", mesh); ; if not os.path.exists(""current.solb""):; raise RuntimeError , ""\n##ERROR : Can't find solution.\n""; if not os.path.exists(""current.meshb""):; raise RuntimeError , ""\n##ERROR : Can't find mesh.\n""; ; #--- Get sensor; ; sensor = su2amg.create_sens",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7822,config,config,7822,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"ge: Boost sources found.; Run-time dependency openblas found: YES 0.3.8; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Run-time dependency python3 found: YES 3.8; Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_NEW/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.4 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: true; PaStiX: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=/home/slimshady/UserPackages/SU2_INSTALL_NEW/bin; export SU2_HOME=/home/slimshady/UserPackages/SU2_NEW; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. Use './ninja -C build install' to compile and install SU2. Build targets in project: 21. Found ninja-1.10.0 at /usr/bin/ninja; ```. ```; slimshady@arch-linux-hp-probook-g3-450: SU2_NEW$ ninja -j4 -C build install; ninja: Entering directory `build'; [569/870] Linking target SU2_CFD/src/SU2_CFD.; FAILED: SU2_CFD/src/SU2_CFD ; c++ -o SU2_CFD/src/SU2_CFD 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/SU2_CFD.cpp.o' -Wl,--as-needed -Wl,--no-undefined -Wl,-O1 -Wl,--start-group SU2_CFD/src/libSU2core.a externals/cgns/libcgns.a externals/metis/libmetis.a externals/parmetis/libparmetis.a externals/tecio/teciompisrc/libteciompi.a Common/src/libSU2Common.a -Wl,-rpath -Wl,/usr/lib/openmpi -Wl,--enable-new-dtags /usr/lib/openmpi/libmpi.so -Wl,-rpath -Wl,/usr/lib/openmpi -Wl,--enab",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631986633:2521,config,configuration,2521,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631986633,1,['config'],['configuration']
Modifiability,gen/Doxyfile (2368) ; - M INSTALL (2) ; - D Logo/logo_su2.jpg (0) ; - D Logo/su2_eagle.png (0) ; - M Makefile.am (32) ; - M Makefile.in (53) ; - D MeshTools/Matlab/MergeSU2.m (77) ; - D MeshTools/Matlab/ReadSU2.m (160) ; - D MeshTools/Matlab/WriteSU2.m (91) ; - D MeshTools/Matlab/angle2dcm.m (28) ; - D MeshTools/Matlab/example_MergeMeshes.m (38) ; - D MeshTools/Matlab/getElemTypeInfo.m (52) ; - D MeshTools/Matlab/mesh_bipara_1.su2 (38465) ; - D MeshTools/Matlab/mesh_bipara_2.su2 (3248) ; - D MeshTools/Matlab/plotElem.m (45) ; - D MeshTools/Matlab/plotFace.m (60) ; - D MeshTools/Matlab/plotMarkers.m (64) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux_x86_64 (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.macosx (112) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win (14) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win32 (33) ; - D MeshTools/PointwiseSU2plugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:13297,Plugin,PluginSDK,13297,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,1,['Plugin'],['PluginSDK']
Modifiability,gin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGrid,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17771,plugin,plugins,17771,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ging global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\U",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6427,config,config,6427,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['config'],"['config', 'config-lite-']"
Modifiability,gins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/sr,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:18134,plugin,plugins,18134,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"github.com/su2code/SU2/commit/ac8b3bf7636cc66ca7f47e15935942a6598e1a9f), the `SetRoe_Dissipation` function checked to see if the sensor values were valid regardless of the type of blending selected. Commit [ac8b3bf](https://github.com/su2code/SU2/commit/ac8b3bf7636cc66ca7f47e15935942a6598e1a9f) changed the behavior to only check the sensor values if they will be used. The unit test sets the convective blending to `NTS`, feeds invalid sensor values into `SetRoe_Dissipation` and checks the output. ```cpp; // Used to set the Roe-low-dissipation option; void WriteCfgFile(unsigned short nDim, const char* filename,; std::string blending) {; std::ofstream cfg_file;. cfg_file.open(filename, ios::out);; cfg_file << ""PHYSICAL_PROBLEM= NAVIER_STOKES"" << std::endl;; cfg_file << ""ROE_LOW_DISSIPATION= "" << blending << std::endl;. cfg_file.close();; }. BOOST_AUTO_TEST_CASE(BadSensorsAllowedForNTS) {. /*--- Setup ---*/. const unsigned short nDim = 3;. /*--- Set up the config class for the test ---*/; char cfg_filename[100] = ""convective_blending_test.cfg"";; WriteCfgFile(nDim, cfg_filename, ""NTS"");; CConfig* config = new CConfig(cfg_filename, SU2_CFD, 0, 1, 2, VERB_NONE);; std::remove(cfg_filename);. /*--- Inputs ---*/; const su2double dissipation_i = 0.4;; const su2double dissipation_j = 0.6;; const su2double sensor_i = NAN; // Intentionally unphysical:; const su2double sensor_j = NAN; // Intentionally unphysical:. /*--- Outputs ---*/; su2double dissipation;. /*--- Test ---*/. CNumerics numerics;; numerics.SetRoe_Dissipation(dissipation_i, dissipation_j,; sensor_i, sensor_j,; dissipation, config);. const su2double tolerance = std::numeric_limits<su2double>::epsilon();; BOOST_CHECK_CLOSE_FRACTION(dissipation, 0.5, tolerance);. /*--- Teardown ---*/; delete config;; }; ```. There's a couple problems I would fix if I had more time. Ideally, I would be writing the cfg file to an in-memory stream and not to a file. And realistically, I shouldn't need to use a config file at all for a sim",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499999225:1267,config,config,1267,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499999225,2,['config'],['config']
Modifiability,"gnized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --ena",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:4984,config,configure,4984,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"gure:3332: g++ -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; conf",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:3889,config,configure,3889,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,14,['config'],['configure']
Modifiability,"gure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:9618,config,configure,9618,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,6,['config'],['configure']
Modifiability,gure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $? = 0; configure:5140: ./conftest; configure:5140: $? = 0; configure:5154: result: 8; configure:5168: checking size of void *; configure:5173: gcc -o conftest -g -O2 conftest.c >&5; configure:5173:,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:11216,config,configure,11216,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"h Adaptation\n""); ; #--- TODO: Check pyamg version compatibility; ; #--- Check config options related to mesh adaptation; ; adap_options = ['ADAP_SIZES', 'ADAP_SUBITE', 'ADAP_SENSOR', \; 'ADAP_BACK', 'ADAP_HMAX', 'ADAP_HMIN', 'ADAP_HGRAD', 'ADAP_RESIDUAL_REDUCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FI",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:3588,config,config,3588,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"h size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; SU2_CFD(config_cfd); ; except:; sys.stdout =",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:4540,config,config,4540,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"h>. // An example type to use instead of the container that stores solution data for all vertices.; struct SolutionContainer; {; std::array<double,3> velocity;; std::array<double,3> areaVector;; };. using ResultType = double;. // We want classes with this interface.; class VirtualInterface; {; public:; virtual ResultType Compute(const SolutionContainer&) const = 0;; };. // The Compute method is to be composed via an inheritance chain, to do this; // we allow each building block to inherit from any class. These classes should; // be function objects that have no member variables, all data used in the; // resulting Compute method will be on the stack.; template<typename Base>; class ComputeArea : Base; {; protected:; // Different template instantiations will be made for; // 2D/3D to allow perfect loop unrolling.; enum : int {nDim = Base::nDim};. // To share variables between building blocks we will pass; // down a struct which is also composed by inheritance; struct WorkVarsType : Base::WorkVarsType; {; double area; // add ""area"" to the variables of Base; };; ; // The final implementation of Compute will be a call down the chain.; // The final constructed WorkVarsType is not known at this stage,; // hence we also template the method.; template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // Boilerplate, call base first. This is akin to the decorator design pattern; // without polymorphism. The working variables resemble Python's ""self"" which; // makes this solution reasonably idiomatic.; Base::Compute(wv, sol);. // Then do our specific job.; wv.area = 0.0;; for(int i=0; i<nDim; ++i); wv.area += pow(sol.areaVector[i],2);; wv.area = sqrt(wv.area);; }; };. // Same mechanics as above; template<typename Base>; class ComputeFlux : Base; {; protected:; enum : int {nDim = Base::nDim};. struct WorkVarsType : Base::WorkVarsType ; {; double flux; // ...add new member; };. template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) cons",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:3005,variab,variables,3005,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,6,"['inherit', 'variab']","['inheritance', 'variables']"
Modifiability,hTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugi,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16537,plugin,plugins,16537,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,header_stdc=yes; ac_cv_header_stdint_h=yes; ac_cv_header_stdlib_h=yes; ac_cv_header_string_h=yes; ac_cv_header_strings_h=yes; ac_cv_header_sys_stat_h=yes; ac_cv_header_sys_types_h=yes; ac_cv_header_unistd_h=yes; ac_cv_host=x86_64-unknown-linux-gnu; ac_cv_objext=o; ac_cv_path_EGREP='/bin/grep -E'; ac_cv_path_GREP=/bin/grep; ac_cv_path_install='/usr/bin/install -c'; ac_cv_path_mkdir=/bin/mkdir; ac_cv_prog_AWK=gawk; ac_cv_prog_CPP='gcc -E'; ac_cv_prog_ac_ct_CC=gcc; ac_cv_prog_ac_ct_CXX=g++; ac_cv_prog_ac_ct_RANLIB=ranlib; ac_cv_prog_cc_c89=; ac_cv_prog_cc_g=yes; ac_cv_prog_cc_gcc_c_o=yes; ac_cv_prog_cxx_g=yes; ac_cv_prog_make_make_set=yes; ac_cv_sizeof_double=8; ac_cv_sizeof_float=4; ac_cv_sizeof_int=4; ac_cv_sizeof_long_int=8; ac_cv_sizeof_short_int=2; ac_cv_sizeof_unsigned_int=4; ac_cv_sizeof_void_p=8; ac_cv_target=x86_64-unknown-linux-gnu; am_cv_CC_dependencies_compiler_type=gcc3; am_cv_CXX_dependencies_compiler_type=gcc3; am_cv_make_support_nested_variables=yes. ## ----------------- ##; ## Output variables. ##; ## ----------------- ##. ACLOCAL='${SHELL} /home/antodech/SU2-4.1.0/missing --run aclocal-1.12'; AMDEPBACKSLASH='\'; AMDEP_FALSE='#'; AMDEP_TRUE=''; AMTAR='$${TAR-tar}'; AM_BACKSLASH='\'; AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'; AM_DEFAULT_VERBOSITY='0'; AM_V='$(V)'; AUTOCONF='${SHELL} /home/antodech/SU2-4.1.0/missing --run autoconf'; AUTOHEADER='${SHELL} /home/antodech/SU2-4.1.0/missing --run autoheader'; AUTOMAKE='${SHELL} /home/antodech/SU2-4.1.0/missing --run automake-1.12'; AWK='gawk'; BUILD_CFD_FALSE='#'; BUILD_CFD_TRUE=''; BUILD_CGNS_FALSE='#'; BUILD_CGNS_TRUE=''; BUILD_DEF_FALSE='#'; BUILD_DEF_TRUE=''; BUILD_DIRECTDIFF_FALSE=''; BUILD_DIRECTDIFF_TRUE='#'; BUILD_DOT_FALSE='#'; BUILD_DOT_TRUE=''; BUILD_GEO_FALSE='#'; BUILD_GEO_TRUE=''; BUILD_HDF5_FALSE=''; BUILD_HDF5_TRUE='#'; BUILD_JSONCPP_FALSE=''; BUILD_JSONCPP_TRUE='#'; BUILD_LAPACK_FALSE=''; BUILD_LAPACK_TRUE='#'; BUILD_METIS_FALSE=''; BUILD_METIS_TRUE='#'; BUILD_MSH_FALSE='#'; BUILD_MSH_TRUE=''; B,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:21525,variab,variables,21525,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['variab'],['variables']
Modifiability,"hine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running comma",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6002,config,config,6002,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"hmm there weren't when I submitted it but I'll see what's up, I'm assuming either; some more recent commits to develop or that last commit that removed a couple of unused variables. On Tue, Oct 27, 2015 at 1:36 PM, Thomas D. Economon <; notifications@github.com> wrote:. > @hlkline https://github.com/hlkline, looks like there are conflicts in; > the pull request... When you have a moment, could you please check it out; > so that we can get this merged in soon?; > ; > ‚Äî; > Reply to this email directly or view it on GitHub; > https://github.com/su2code/SU2/pull/204#issuecomment-151636306. ## . Heather Kline; PhD Candidate, NASA Space Technology Research Fellow; Aeronautics & Astronautics; Stanford University; kline.hl@gmail.com, hlkline@stanford.edu",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/204#issuecomment-151637159:171,variab,variables,171,https://su2code.github.io,https://github.com/su2code/SU2/pull/204#issuecomment-151637159,1,['variab'],['variables']
Modifiability,"hort array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 = T0.widePermuteLo(T2); C1 = T1.widePermuteLo(T3);; C2 = T0.widePermuteHi(T2); C3 = T1.widePermuteHi(T3);. (Array4d(&bjj[0][k])-C0).store(&bjj[0][k]);; (Array4d(&bjj[1][k])-C1).store(&bjj[1][k]);; (Array4d(&bjj[2][k])-C2).store(&bjj[2][k]);; (Array4d(&bjj[3][k])-C3).store(&bjj[3][k]);. C0.store(&bij[0][k]); C1.store(&bij[1][k]);; C2.store(&bij[2][k]); C3.store(&bij[3][k]);; ```; I am showing this because it represents a readability worst case in terms of manipulating SIMD types, we might end up with one or two of these to get the best performance possible but they will always be encapsulated and deep in kernel-type areas of SU2 that are almost never touched. ## Conclusions; - Over 45% faster CSysMatrix updates by mapping off-diagonal blocks to edges and diagonal blocks to points.; - Colouring is the best strategy for hybrid parallelism of compute-heavy edge loops and matrix updates as it interleaves compute and memory operations.; - AoS storage should be kept to avoid significant loss of performance in compute-light edge loops due to poor locality of SoA storage.; - Major implication of AoS is on point loops where some data needs to be fetched (transposed) into local variables for effective vectorization.; - An intermediate storage scheme, AoSoA, can provide both good locality and vectorization of point loops, however it requires that data be accessed via special iterators and scalar code based on it would have poor performance. Next I will try to estimate how much we can gain for a ""realistic"" numerics class.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:17193,variab,variables,17193,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['variab'],['variables']
Modifiability,https://github.com/su2code/SU2 into develop; - Updated binaries; - Small change to configure.ac. Bootstrap.; - Small change; - Cleaning the code; - Updated grid deformation subroutine; - Fixing the mesh deformation; - Updated SU2_MSH; - Bug fixing; - Initial implementation of parallel CGNS reader. Works on 1 rank.; - Merged in recent changes to geometry_structure.cpp.; - Periodic BC working in serial; - Update option_structure.hpp; - Merge pull request #154 from su2code/fixCOptionEnumList; - Bug fixing (periodic bc); - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Another important updated to BC in parallel; - More implementation and clean up of the parallel CGNS reader.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - CGNS reader bug fix.; - Updated adj. NS solver with primitive variables and farfield bc including viscous contribution.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Small change; - Back to the previous version; - Fixed some loop variables.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Bug fixes for CGNS.; - New slope limiter based on the wall distance; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Bug fixing; - Non-dimensional adjoint bc; - CGNS bug.; - Mixed-element support in new CGNS reader.; - Memory fix for mixed-element CGNS in parallel.; - Activated the parallel CGNS reader.; - New FFD input; - Adjacency building for Parmetis improve to account for VTK structure; - added if viscous steps to some adjeuler bcs; - Minor changes; - Back to previous version of ParMetis; - Small change; - Final update.; - Minor bug fixed.; - Updated SU2_DEF (cgns); - CGNS global element ID bug fix.; - Heat flux bug fix.; - Small fix.; - Merge branch 'master' into develop; - changed history output to match # of residuals printed in header and body; - further correction to history output; - history file fix; - fixed history out,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:7019,variab,variables,7019,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['variab'],['variables']
Modifiability,"hub.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | #define STDC_HEADERS 1; | #define HAVE_SYS_TYPES_H 1; | #define HAVE_SYS_STAT_H 1; | #define HAVE_STDLIB_H 1; | #define HAVE_STRING_H 1; | #define HAVE_MEMORY_H 1; | #define HAVE_STRINGS_H 1; | #define HAVE_INTTYPES_H 1; | #define HAVE_STDINT_H 1; | #define HAVE_UNISTD_H 1; | #define SIZEOF_SHORT_INT 2; | #define SIZEOF_INT 4; | #define SIZEOF_UNSIGNED_INT 4; | #define SIZEOF_LONG_INT 8; | #define SIZEOF_FLOAT 4; | #define SIZEOF_DOUBLE 8; | #define SIZEOF_VOID_P 8; | /* end confdefs.h. */; | #include <X11/Intrinsic.h>; configure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/o",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:15492,config,configure,15492,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,10,['config'],['configure']
Modifiability,"iVar); {; lim_i[iVar] = (lim_i[iVar]-phi(iPoint,iVar))/proj_i[iVar];; limiter(iPoint,iVar) = min(limiter(iPoint,iVar), lim_i[iVar]);. lim_j[iVar] = (lim_j[iVar]-phi(jPoint,iVar))/proj_j[iVar];; limiter(jPoint,iVar) = min(limiter(jPoint,iVar), lim_j[iVar]);; }; }. #pragma omp parallel for schedule(dynamic,TARGET_CHUNK_SIZE); for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; double lim = limiter(iPoint,iVar);; limiter(iPoint,iVar) = lim*(lim+2)/(lim*lim+lim+2);; }; }; }; ```; Again to keep things short here is the parallel and SIMD point-loop version (like for gradients it is very similar to the scalar and sequential version).; ```C++; void computeLimiters(size_t nPoint,; size_t nVar,; size_t nDim,; const Adjacency<4>& adj,; const Matrix& coords,; const Matrix& phi,; const VectorOfMatrix& grad,; Matrix& limiter); {; const size_t SIMDLEN = 4;; using FltVec = Array<double,SIMDLEN>;. // working variables; FltVec phiMax[MAXNVAR], phiMin[MAXNVAR], prjMax[MAXNVAR], prjMin[MAXNVAR];. const double eps = numeric_limits<double>::epsilon();. #pragma omp parallel for schedule(dynamic,128) private(phiMax,phiMin,prjMax,prjMin); for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); {; for(size_t iVar=0; iVar<nVar; ++iVar); {; phiMin[iVar] = phiMax[iVar] = phi.getVec(iPoint,iVar);; prjMax[iVar] = eps;; prjMin[iVar] = -eps;; }. for(size_t iNeigh=0; iNeigh<adj.nNeighbor(iPoint); ++iNeigh); {; auto jPoint = adj.jPoint_vec(iPoint,iNeigh);. FltVec d_ij[3] = {FltVec(0.0), FltVec(0.0), FltVec(0.0)};. for(size_t iDim=0; iDim<nDim; ++iDim); d_ij[iDim] = (coords.getVec(jPoint,iDim)-; coords.getVec(iPoint,iDim))*0.5;. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec prj = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); prj += d_ij[iDim]*grad.getVec(iPoint,iVar,iDim);. prjMax[iVar] = vmax(prjMax[iVar], prj);; prjMin[iVar] = vmin(prjMin[iVar], prj);. phiMax[iVar] = vmax(phiMax[iVar], phi.getVec(jPoint,iVar));; phiMin[iVar] = vmin(phiMin[iVa",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:7743,variab,variables,7743,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['variab'],['variables']
Modifiability,"ib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's group at Stanford University. |; | - Prof. Piero Colonna's group at Delft University of Technology. |; | - Prof. Nicolas R. Gauger's group at Kaiserslautern U. of Technology. |; | - Prof. Alberto Guardone's group at Polytechnic University of Milan. |",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16482,config,config,16482,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"ic analyses. I turned from Windows to Linux Manjaro as this program apparently only works with MSL on Windows.; My C++ compiler is not doing the job when I use the command ./configure for the parallel build. I have both cmake and gcc installed as compilers, but this is what happens:. [cid:ae2afe41-51cb-48da-a755-9fb054ea8537]. Which other C++ compilers can I use instead?. Thank you!. Best regards,. Avi; ________________________________; From: Pedro Gomes ***@***.***>; Sent: Tuesday, March 23, 2021 1:40 AM; To: su2code/SU2 ***@***.***>; Cc: Avish Suresh Bhambhani Wadhwani ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] Microsoft MPI not read, WIndows 10 (#1233). Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it. ‚Äî; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsu2code%2FSU2%2Fissues%2F1233%23issuecomment-804498319&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150583134%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2BpP5qwT1upuD56kAXXvmDMqq%2B5lTmsMaJ6%2Fgx7gHoyM%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2F",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-827688202:1185,config,config,1185,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-827688202,4,"['config', 'variab']","['config', 'variable']"
Modifiability,"implified / optimized by adopting a dense matrix format, for example:; - This snipped from the viscous numerics refactoring`for (iDim = 0; iDim < nDim; iDim++) {; TauElem[iDim] = 0.0;; for (jDim = 0; jDim < nDim; jDim++); TauElem[iDim] += tau[iDim][jDim]*UnitNormal[jDim];; }` would simply become `TauElem=tau*UnitNormal`; - Cumbersome allocations like `tau_jacobian_i = new su2double* [nDim];; for (iDim = 0; iDim < nDim; iDim++) {; tau_jacobian_i[iDim] = new su2double [nVar];; }` become `Matrix tau_jacobian_i(nDim,nVar);` and the cleanup is dealt with by the destructor of the object automatically. Now to answer some questions.; @juanjosealonso @erangit LAPACK and BLAS are indeed the standard, so much so that most (all?) newer libraries will call their routines behind the scenes.; However they considerably simplify the user interface by encapsulating the aforementioned construction/destruction and by exposing natural ways of manipulating the matrices, e.g. access entire rows, columns, blocks, etc.; Another issue with using BLAS routines is that we then need to provide a portable version that can be differentiated with CoDi or to implement the exact differentiation (similar to what is done in the ""solve_b"" routines). @vdweide that is not an issue with Eigen because everything is templated and therefore compatible with any type or class that overloads the appropriate arithmetic operators.; I have used it for over 2 years and I can attest to its compatibility with AD tools (I've tried 3), and speed when linked with a BLAS library, their native implementations are also very good, peeking inside their code... you can tell they know what they are doing. P.S. I feel this post needs a disclaimer, I am not affiliated in any way to Eigen, my motivation is not to promote their work (but I obviously think they deserve it). I genuinely think adopting an algebra library (that is compatible with AD) would greatly simplify our work and further drop the entry barrier to new developers.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459653772:2229,portab,portable,2229,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459653772,2,['portab'],['portable']
Modifiability,"in essence both are performing similar duties, but people should express their opinions. With that said, how about a boolean such as USE_WALL_FUNCTIONS / USE_WALL_MODEL (YES or NO) with an optional argument WALL_FUNCTION_TYPE / WALL_MODEL_TYPE that can taken one of many pre-specified values that can be added as these options are developed and tested? Certainly options like STANDARD_WALL_FUNCTION, ADAPTIVE_WALL_FUNCTION, SCALABLE_WALL_FUNCTION, compressible and incompressible versions, and even EQUILIBRIUM_WALL_MODEL and NONEQUILIBRIUM_WALL_MODEL are things that are likely to be in the code in the near future. Thoughts?. Juan. On Sep 5, 2017, at 2:27 PM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. @petebachant<https://github.com/petebachant>: the paper that I linked earlier on this thread had some fairly simple examples similar to the one you propose.. different flat plates and so on with varying y^+. You can likely reuse the grid(s) in the TestCases repo. @vdweide<https://github.com/vdweide>: it was very simple in this first implementation. It checks for a single boolean for whether or not to apply wall functions (WALL_FUNCTIONS= YES or NO, https://github.com/su2code/SU2/blob/43b8a4015c4b09b01d78e4243d32011c663c2b70/SU2_CFD/src/solver_direct_mean.cpp#L15339), and then assumes they should be applied to all no-slip walls (heat flux or isothermal, https://github.com/su2code/SU2/blob/43b8a4015c4b09b01d78e4243d32011c663c2b70/SU2_CFD/src/solver_direct_mean.cpp#L16653). This could of course be made more specific for individual markers using a config structure like MARKER_MONITORING to list them, or by making a dedicated BC type for it potentially. ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/399#issuecomment-327308587>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxJUhyEBSuSzHV1a7BZM_Frxbtb5sks5sfbzUgaJpZM4NvG6w>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-327313634:1950,config,config,1950,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-327313634,2,['config'],['config']
Modifiability,in your type config file do:; ```; #ifdef MLP_CUSTOM_TYPE; using mlpdouble = MLP_CUSTOM_TYPE;; #else; using mlpdouble = double;; #endif; ```; in SU2 before the first MLP include do:; ```; #define MLP_CUSTOM_TYPE su2double; #include ...; ```,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1757#issuecomment-1498987561:13,config,config,13,https://su2code.github.io,https://github.com/su2code/SU2/pull/1757#issuecomment-1498987561,1,['config'],['config']
Modifiability,in/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19960,plugin,plugins,19960,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"index information; and values that are used in surface-based mesh deformation (and maybe other; tools, but that's the one I know of - I could see that format being useful; for prescribed surface properties as well). So one challenge that would be; faced with this change is how to make sure that both files are still; output. I would argue for switching to no suffixes where possible - less work for; new users, a little more work for us - one way we could get the best of; both worlds is by having the filenames written in the config without; suffix, but when loaded into su2 (and the python version of loading the; config file) store the variable with the appropriate suffix. That way if it; changes in the future it only has to be updated in one place, and all the; old config files would still work after a code change that alterred the; suffix.; -Heather. On Wed, Jul 30, 2014 at 11:05 AM, Brendan Tracey notifications@github.com; wrote:. > SU2 right now is inconsistent with how it does file names in the config; > file. For example, the restart file needs to be specified with a "".dat""; > suffix, but in the case of the surface files, the "".csv"" is added; > automatically. SU2 should be consistent across all filenames. Preferably,; > this will be fixed by having the user specify all suffixes. This is a tiny; > amount of additional work for the user, but it makes writing scripts that; > use the config file much easier. When the suffix is in the config file,; > it's easy to have python say ""open this file"". If the config file just has; > the base name of the file (no extension) then the knowledge of what suffix; > SU2 uses must be hard-coded into the follow-on script (which can then break; > later if SU2 changes).; > ; > ‚Äî; > Reply to this email directly or view it on GitHub; > https://github.com/su2code/SU2/issues/41. ## . Heather Kline; PhD Candidate, NASA Space Technology Research Fellow; Aeronautics & Astronautics; Stanford University; kline.hl@gmail.com, hlkline@stanford.edu",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/41#issuecomment-50703399:1606,config,config,1606,https://su2code.github.io,https://github.com/su2code/SU2/issues/41#issuecomment-50703399,3,['config'],['config']
Modifiability,"ing MAX_NUMBER_MARKER; - Working version with ParMETIS. Fixed bug in global index. Now clean up and testing...; - Cleaned version of ParMETIS routines with better console output during partitioning.; - Small bug in initial element division.; - Made arrays in ParMETIS call dynamic.; - Fixed compiler warnings and added MPI directives so that the pure serial code works with the ParMETIS routines.; - Bootstrap on zion.; - Added some typecasts. Still tracking down a memory problem...; - Critical bug fix for vtxdist array.; - Partial fix; - More MPI improvements.; - Fixing a bug in SU2_DEF; - Updated BC_ActDisk_Boundary (MPI); - Merge remote-tracking branch 'upstream/develop' into develop; - changing solidboundary setting to be heatflux OR euler etc instead of AND, also working on doxygen documentation; - Dynamic allocation for some marker-related arrays.; - visualize part taken out to match upstream/dev; - Collection of improvements; - Release 3.2.7; - Fixing LOW_MEMORY_OUTPUT; - Updated LOW_MEMORY_OUTPUT option; - Updated configure.ac; - After autoconf; - Updated MPI; - Updated BC_Engine_Exhaust and BC_Engine_Bleed; - Small change; - Fixing subsonic engine intake option; - Small output change; - Added output_su2.cpp; - Updated Engine BC; - Working on Engine BCs; - Added Supersonic Outlet BC; - Minor change; - Merge remote-tracking branch 'upstream/develop' into develop; - adjoints, solid boundary, doxygen in config; - continued fixing; - re-added adjoint bc mods; - re-adding avg outlet pressure (static pressure adjoint); - re-adding avg outlet pressure (static pressure adjoint); - Merge branch 'temp' of https://github.com/hlkline/SU2 into temp; - continued fixing; - average total pressure and fixes to avg outlet pressure; - adding stagnation pressure output to SU2_DOT; - Merge pull request #146 from hlkline/temp; - Updated Entropy fix (now it is active).; - Another change in BC_Engine_Exhaust; - Updated CGNS in parallel; - Added runtime file; - Small typo; - Adjustment o",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:2997,config,configure,2997,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['config'],['configure']
Modifiability,"ing command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false; ; Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:7993,config,config,7993,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"ing for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's group at Stanford University. |; | - Prof. Piero Colonna's group at Delft University of Technology. |; | - Prof. Nicolas R. Gauger's group at Kaiserslautern U. of Technology. |; | - Prof. Alberto Guar",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16432,config,config,16432,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"ing for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-mu",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:5130,config,configure,5130,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,18,['config'],['configure']
Modifiability,"ing for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's gr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16233,config,config,16233,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"ing test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5756,config,config,5756,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['config'],"['config', 'config-lite-']"
Modifiability,"ing the installation (the exact same steps that @chesiv presented), I encountered a problem when running the mesh_adaptation_amg.py script. The command used was:. ```; python3 $SU2_RUN/mesh_adaptation_amg.py -f adapt_Mesh.cfg -n 4; ```; The script initiates the mesh adaptation process as expected, with the following output:. ```; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (30000, 60000, 120000); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : GOAL; PYADAP_HMAX : 500.0; PYADAP_HMIN : 1e-9; PYADAP_HGRAD : 1.8. ./adap exists. Removing old mesh adaptation in 10s.; The ./adap folder was deleted. Generating GMF background surface mesh.; Initial CFD solution is provided.; ```; However, no _adap\ite0_ folder gets created. ; The log.err file in the _adap/ini_ directory provides this traceback:. ```; Traceback (most recent call last):; File "".../mesh_adaptation_amg.py"", line 111, in <module>; ...; RuntimeError: ...; Error in TokenizeString(): two or more options before an ""="" sign in the configuration file.; terminate called after throwing an instance of 'int'; ...; *** Process received signal ***; Signal: Aborted (6); Signal code: (-6); ...; ```. The critical part of this error seems to be the Error in TokenizeString() message, suggesting an issue with parsing the configuration file. This error typically indicates a syntax problem, such as having multiple options on a single line without proper separation by an equal sign (=). However, upon reviewing _adap/ini/config_CFD.cfg_, was unable to find any lines that clearly violated this syntax rule. Could this error be indicative of a more subtle issue within the configuration file, or might it be related to specific aspects of the feature_adap branch? Any insights, suggestions, or guidance on how to troubleshoot this error would be greatly appreciated. If anyone has a working adapt_mesh.cfg file for a similar setup or for the feature_adap branch, I would be very interested in seeing it. Underst",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-1847333809:1237,config,configuration,1237,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-1847333809,2,['config'],['configuration']
Modifiability,"ing them, multiple threads cannot write to the same location (i.e. the internal structures of CNumerics) therefore one per thread is required. > ...Also, I think I missed the point where the numerics container is extended beyond MAX_TERMS. The allocation of space for one numerics per thread is done above in line 1995 of my 21 Dec 2019 comment: `...MAX_TERMS*omp_get_max_threads()...`.; The instantiation of one numerics per thread is then done by executing the rest of the preprocessing in parallel and instead of using `XYZ_TERM` using `XYZ_TERM+offset` where `offset = thread_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could revisit the ownership relations of the numerics classes, i.e. allocate them as members of their respective solvers, which if we do, we can think of having a purpose built container that automates the per-thread creation and access. > Why are they redefined each time inside the loop?; > Is this for efficiency reasons?. Referring to variables being declared inside loops. One stylist reason is that declaring everything at the top of a function is the C way of doing things, the C++ people whose books/blogs I've read and talks I've watched, recommend keeping namespaces (the inside of the loop being one) as clean as possible.; The only reason not to do this is if you explicitly want re-use, in the case of trivial types this does not improve efficiency, and in the context of OpenMP code it can create issues. Just like we need one numerics per thread, if we declare variables outside a parallel loop the default OpenMP behaviour is to consider them shared, and concurrent writes to shared locations = gdb and many bad words xD.; **EDIT:** I should mention here that if the parallel region is started before the variable declarations they become local and all is well, with the exception of class members, those will be shared most of the time (this is where const correctness can give some peace of mind). > Also, just an additional (hopeful",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:2333,variab,variables,2333,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['variab'],['variables']
Modifiability,ins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16857,plugin,plugins,16857,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"install SU2 in docker ubuntu 18.04 container so that I can easily share with partner. But I failed to compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, please?; config.log<https://github.com/su2code/SU2/files/3418183/config.log>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/738?email_source=notifications&email_token=AADV2HBFP42OXAJCIZGTH2DQAXH4ZA5CNFSM4IFZ52EKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HAVNCNA>, or mute the t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:1365,config,configure,1365,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,1,['config'],['configure']
Modifiability,intwiseSU2plugin/FLAGS.macosx (112) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win (14) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win32 (33) ; - D MeshTools/PointwiseSU2plugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14031,plugin,plugins,14031,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,intwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/sr,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16292,plugin,plugins,16292,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ion, the polymorphic overhead will be reduced to a single call (ComputeResidual), all auxiliary functions (like the ones that live in CNumerics) will be forcefully inlined, no useless copies of data (no more numerics->SetBlaBla).; - Compile time nDim/nVar, which will: a) avoid heap allocations; b) allow effective loop-unrolling (also during the writes to CSysMatrix).; - Allow low-overhead composition, e.g. have one CRoe for Euler and one CRoeVisc for NS to fuse convective and viscous residuals (without copy pasting code).; - A lot more readable, those cryptic V_i[iDim+1] need to go (somehow...). To achieve all this, the ""CNewNumerics"" will work as a template (obvs) decorator/visitor.; A visitor in the sense that the solver calls the numerics and gives it (read-only) access to all its data, the object pulls whatever it needs directly and there is no need for numerics->SetBlaBla.; A template decorator in the sense that the class can be augmented simply by inheriting from another, along the lines of `class CRoeVisc : public CRoe, public CVisc` (to allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not port all methods in one go xD). The template machinery to support this is actually not too crazy:; ```c++; #include <array>; #include <cmath>. // An example type to use instead of the container that stores solution data for all vertices.; struct SolutionContainer; {; std::array<double,3> velocity;; std::array<double,3> areaVector;; };. using ResultType = double;. // We want classes with this interface.; class VirtualInterface; {; public:; virtual ResultType Compute(const SolutionContainer&) const = 0;; };. // The Co",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:1486,inherit,inheriting,1486,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['inherit'],['inheriting']
Modifiability,"ions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:4367,config,configure,4367,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"ions):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:4053,config,config,4053,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"is because we want to create specific versions of the numerical schemes for 2D and 3D (we ""want"" this because it allows static allocation and unrolling loops perfectly). Then convective classes also need to be class templates so that we can programatically change their base class:; ```c++; template<class Base>; class MyConvectiveScheme : public Base {; public:; void ComputeFlux(...) const {; // do my own thing; Base::viscousTerms(...);; // update the linear system with the result; }; };; ```; Now to create an instance of this class template we do for example:; ```c++; auto obj = new MyConvectiveScheme< CCompressibleViscousFlux<2> >(...);; ```; which would create an object for 2D problems with viscous terms. And so we need at least 4 instantiations of these class templates, 2D/3D with or without viscous terms, and this is done in the factory method implemented in CNumericsSIMD.cpp, which is the only cpp in this entire implementation. ### Static polymorphism; Another concept used in this implementation for efficiency is static polymorphism.; For example in the non vectorized numerics we have a family of Roe schemes since a lot of code is shared, and the only difference is how the dissipation terms are computed. There this is done with virtual functions, here we want none of that.; Virtual functions allow a parent class to dynamically call methods of its children, we want to do this statically and so we need to let the parent class know who is deriving from it.; ```c++; template<class Derived>; class Parent {; public:; void parentMethod() {; // ""I know I am also a Derived and so I can cast myself.""; auto derived = static_cast<Derived*>(this);; // ""now I can use a method of derived""; derived->childMethod();; }; };. // A derived class needs to inform the parent about itself; class Child : public Parent<Child> {; public:; void childMethod() {...}; };; ```. Why is this better? Note that 2 of these derived classes don't actually have the same parent, i.e. one inherits from ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721:2208,polymorphi,polymorphism,2208,https://su2code.github.io,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721,2,['polymorphi'],['polymorphism']
Modifiability,iseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plu,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:18200,plugin,plugins,18200,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,4,['plugin'],"['pluginRegistry', 'plugins']"
Modifiability,it doesn't matter where it is placed. But it must be run inside the folder where the config file is and the environment variable SU2_RUN must be set correctly.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/279#issuecomment-222656300:85,config,config,85,https://su2code.github.io,https://github.com/su2code/SU2/issues/279#issuecomment-222656300,2,"['config', 'variab']","['config', 'variable']"
Modifiability,"it uses a Hessian of the Euler fluxes so it might work for NS/RANS, but probably not) (@WallyMaier and I also extended it to TNE2 in [feature_amgtne2](https://github.com/su2code/SU2/tree/feature_amgtne2) but the source terms are giving us trouble on adapted meshes); 2. It requires AD support since it uses the discrete adjoint to weigh the Euler flux Hessians; 3. I did all my testing with the AMG executable since pyAMG doesn't have all the features I currently need, but I just updated the branch to use pyAMG. I just tested the new interface with an airfoil and it seems to be working, but there might still be some bugs. You'll want to run mesh_adaptation_amg.py with the following options:; **ADAP_SIZES:** list of mesh complexities for each adaptive level. This is correlated to mesh size, but picking good values requires some playing around; **ADAP_SUBITE:** number of adaptations performed at each adaptive level. If set to (2,3) for example, it will run 2 adaptive iterations to try to reach ADAP_SIZES[0], and 3 iterations to try to reach ADAP_SIZES[1]; **ADAP_EXT_ITER:** number of iterations used by SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_RESIDUAL_REDUCTION:** order of magnitude residual reduction for SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_SENSOR:** currently only works for GOAL; **ADAP_HMAX:** maximum cell size (m); **ADAP_HMIN:** minimum cell size (m); **ADAP_HGRAD:** gradation coefficient (>1) used by AMG during mesh smoothing. A larger value corresponds to larger allowed gradient in mesh size. E.g. for the RAE2822 I used:; ADAP_SIZES= (12800, 19200, 25600); ADAP_SUBITE= (2, 2, 2); ADAP_EXT_ITER= (9999, 9999, 9999); ADAP_RESIDUAL_REDUCTION= (6, 6, 6); ADAP_SENSOR= GOAL; ADAP_HMAX= 10.0; ADAP_HMIN= 1e-8; ADAP_HGRAD= 1.5. ![mesh](https://user-images.githubusercontent.com/19416354/59965706-940fa700-94c6-11e9-811c-4379694f0f7b.png); ![sol](https://user-images.githubusercontent.com/19416354/59965707-940fa700-94c6-11e9-9e1a-e0ae6854d412.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504675574:1388,adapt,adaptive,1388,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504675574,3,['adapt'],['adaptive']
Modifiability,"iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:4465,config,config,4465,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"ith-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:4469,config,configure,4469,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"itycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5841,config,config,5841,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"ive loop-unrolling (also during the writes to CSysMatrix).; - Allow low-overhead composition, e.g. have one CRoe for Euler and one CRoeVisc for NS to fuse convective and viscous residuals (without copy pasting code).; - A lot more readable, those cryptic V_i[iDim+1] need to go (somehow...). To achieve all this, the ""CNewNumerics"" will work as a template (obvs) decorator/visitor.; A visitor in the sense that the solver calls the numerics and gives it (read-only) access to all its data, the object pulls whatever it needs directly and there is no need for numerics->SetBlaBla.; A template decorator in the sense that the class can be augmented simply by inheriting from another, along the lines of `class CRoeVisc : public CRoe, public CVisc` (to allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not port all methods in one go xD). The template machinery to support this is actually not too crazy:; ```c++; #include <array>; #include <cmath>. // An example type to use instead of the container that stores solution data for all vertices.; struct SolutionContainer; {; std::array<double,3> velocity;; std::array<double,3> areaVector;; };. using ResultType = double;. // We want classes with this interface.; class VirtualInterface; {; public:; virtual ResultType Compute(const SolutionContainer&) const = 0;; };. // The Compute method is to be composed via an inheritance chain, to do this; // we allow each building block to inherit from any class. These classes should; // be function objects that have no member variables, all data used in the; // resulting Compute method will be on the stack.; template<typename Base>; class Com",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:1871,polymorphi,polymorphic,1871,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['polymorphi'],['polymorphic']
Modifiability,"ix=/home/vksuman/SU2_7_0_3_gcc5_5_0_mpich3_2_1; ninja executable not found. Building ...; bootstrapping ninja...; warning: A compatible version of re2c (>= 0.11.3) was not found; changes to src/*.in.cc will not affect your build.; wrote build.ninja.; bootstrap complete. rebuilding...; [29/29] LINK ninja; The Meson build system; Version: 0.52.999; Source dir: /home/vksuman/SU2-7.0.3; Build dir: /home/vksuman/SU2-7.0.3/build; Build type: native build; Project name: SU2; Project version: 7.0.3 ""Blackbird""; C compiler for the host machine: gcc (gcc 5.5.0 ""gcc (GCC) 5.5.0""); C linker for the host machine: GNU ld.bfd 2.20.51.0.2-5; C++ compiler for the host machine: g++ (gcc 5.5.0 ""g++ (GCC) 5.5.0""); C++ linker for the host machine: GNU ld.bfd 2.20.51.0.2-5; Host machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/app/python-3.6.3/bin/python3.6); Dependency mpi skipped: feature with-mpi disabled; Dependency mpi skipped: feature with-mpi disabled; Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.3 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: false; CGNS: false; AD (reverse): true; AD (forward): true; Python Wrapper: false; Intel-MKL: false; OpenBlas: false; PaStiX: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=/home/vksuman/SU2_7_0_3_gcc5_5_0_mpich3_2_1/bin; export SU2_HOME=/home/vksuman/SU2-7.0.3; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. Use './ninja -C build install' to compile and install SU2. Build targets in project: 12; Found ninja-1.9.0.git at /home/vksuman/SU2-7.0.3/ninja",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620552610:2542,Config,Configuration,2542,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620552610,3,"['Config', 'config', 'variab']","['Configuration', 'configuration', 'variables']"
Modifiability,"k pyamg version compatibility; ; #--- Check config options related to mesh adaptation; ; adap_options = ['ADAP_SIZES', 'ADAP_SUBITE', 'ADAP_SENSOR', \; 'ADAP_BACK', 'ADAP_HMAX', 'ADAP_HMIN', 'ADAP_HGRAD', 'ADAP_RESIDUAL_REDUCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solu",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:3638,config,config,3638,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"kg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mp",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6585,config,config-lite-,6585,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,"l Strategy; The strategy now is to start a parallel section in CSysSolve::Solve that covers building the preconditioner and solving the linear system.; Linear algebra routines called within this section have _worksharing_ constructs instead of _parallel_ ones, i.e. the work is distributed by however many threads arrive to that routine. This also makes the routines safe to call in serial.; The only ""dangerous"" things to do in parallel are to: manage memory for a shared object (multiple threads call `new` but there is only one shared pointer on which to call `delete`); writing to the same memory locations concurrently.; I tried to make the first issue debugable by asserting that the initialization routines of CSysMatrix and CSysVector are only called by the master thread.; For the second issue I made the associated classes as const-correct as possible, that should at least make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:1471,variab,variables,1471,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['variab'],['variables']
Modifiability,"l) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):; err += fil + '\n'; raise RuntimeError , err; ; #--- Start looping; ; # Get mesh dimension; dim = su2amg.get_su2_dim(current_mesh); if ( dim != 2 and dim != 3 ):; raise RuntimeError , ""Wrong dimension number\n""; ; #--- AMG parameters; ; config_amg = dict(); ; config_amg['hgrad'] = float(config['ADAP_HGRAD']); config_amg['hmax'] = float(config['ADAP_HMAX']); config_amg['hmin'] = float(config['ADAP_HMIN']); config_amg['mesh_in'] = 'current.meshb'; config_amg['mesh_out'] = 'current.new.meshb'; config_amg['metric_in'] = ''; config_amg['sol_in'] = 'current_sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d - Mesh size coefficient %.1lf\n"" % (iSiz+1, len(mesh_sizes), mesh_size)); ; for iSub in range(nSub):; ; config_amg['size'] = mesh_size; config_amg",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7183,config,config,7183,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"le 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Pr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6971,config,config-tool,6971,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-tool']
Modifiability,"le to control the step size for the finite differences. The option for step size was only in finite_differences.py. The step size is scaled with the reference length because from the practical point of view, I have found that the size of the aircraft, wing, airfoil, is important to determine a meaningful step size. e.g. should we use the same step for an aircraft with a MAC of ~150in than for an airfoil with a chord of 1in. Remember that most of the times we are using FD when the adjoint is not converging‚Ä¶ so we have bad convergence of the direct problem (including some level of unsteadiness that we want to filter with the selection of the step size). In other words, with the right choice of the FD step size you can obtain, at least, an useful gradient‚Ä¶ and that number is somehow linked to the size of the aircraft, wing, or airfoil. The best solution would be to add the step size to the finite_differences.py and also to the shape_optimization.py (creating a new option in the config file)‚Ä¶ not a top priority, but I‚Äôll do it soon. Best,; Francisco. > On Mar 1, 2017, at 3:25 PM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:; >; > Bumping this issue. This has come up several times now for different people/projects. Is there a reason to keep it based on the reference moment length, or can we revert to specifying this through the command line options?; >; > ‚Äî; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/issues/367#issuecomment-283505108>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AEpkllp8PXmLDDQLJNq-2yRLBoDAfXE-ks5rhf5pgaJpZM4Lq5F->.; >. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/367#issuecomment-284288637>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxAsCyC2rWixx_FUvNF0Mc44BDm",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/367#issuecomment-284300083:1714,config,config,1714,https://su2code.github.io,https://github.com/su2code/SU2/issues/367#issuecomment-284300083,1,['config'],['config']
Modifiability,ll/814/files#diff-5> (9); * A SU2_MSH/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-6> (8); * A SU2_PY/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-7> (24); * A SU2_PY/pySU2/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-8> (62); * A SU2_SOL/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-9> (12); * A cmake-format.yaml<https://github.com/su2code/SU2/pull/814/files#diff-10> (40); * A cmake/CheckLinkerFlag.cmake<https://github.com/su2code/SU2/pull/814/files#diff-11> (70); * A cmake/ConfigureCGNS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-12> (11); * A cmake/ConfigureCLI11.cmake<https://github.com/su2code/SU2/pull/814/files#diff-13> (2); * A cmake/ConfigureCodi.cmake<https://github.com/su2code/SU2/pull/814/files#diff-14> (87); * A cmake/ConfigureExternals.cmake<https://github.com/su2code/SU2/pull/814/files#diff-15> (26); * A cmake/ConfigureMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-16> (16); * A cmake/ConfigureMPI.cmake<https://github.com/su2code/SU2/pull/814/files#diff-17> (12); * A cmake/ConfigureMetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-18> (12); * A cmake/ConfigureMutationpp.cmake<https://github.com/su2code/SU2/pull/814/files#diff-19> (12); * A cmake/ConfigureParmetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-20> (15); * A cmake/ConfigureTecio.cmake<https://github.com/su2code/SU2/pull/814/files#diff-21> (18); * A cmake/ConfigureThreads.cmake<https://github.com/su2code/SU2/pull/814/files#diff-22> (12); * A cmake/FindMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-23> (318); * A cmake/FindMPI4PY.cmake<https://github.com/su2code/SU2/pull/814/files#diff-24> (50); * A cmake/LibraryUtils.cmake<https://github.com/su2code/SU2/pull/814/files#diff-25> (239); * A cmake/TLS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-26> (28); * A cmake/check_thread_storage.c<https://github.com/su2code/SU2/pull/814/files#diff,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:5791,Config,ConfigureMPI,5791,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,1,['Config'],['ConfigureMPI']
Modifiability,location.; - Merge branch 'feature_MarkerMax' into develop; - Time and date in the header.; - Small fix to the latest commit.; - Simplification of entropy correction; - Critical stability improvement.; - Minor release 3.2.7.2; - Fixing issues to run with the latest intel compiler; - Fix for Tecplot binary solutions for unsteady flows. Fixes #150.; - Now SU2 should work with the latest version of the Intel compiler.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Working on the O3 stuff; - Small change.; - Add another check to improve stability.; - Collection of improvements.; - Updated actuator disk; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Preliminary implementation of the Neg SA; - Minor updates; - Preliminary implementation of the Negative SA; - Bug fixing; - Fixed memory issued for very large meshes with ParMETIS.; - Clear evaluation of Vorticity and StrainMag; - Viscous limiter; - Updated RELAXATION_FACTOR; - RANS MG; - Partial fix to no MPI output; - Updated I/O; - Updated Adapt CFL; - Updated Adaptive CFL number; - Release 3.2.8; - Updated SetCFL_Number; - Small update; - Small change; - Small adjustments; - Minor changes; - Updated release 3.2.8; - MPI disabled by default in build. Added --enable-mpi flag to configure.; - Merged the ParMETIS implementation. Updated the build files.; - bootstrap; - Started parallel CGNS reader.; - Memory fix.; - Minor change; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Updated binaries; - Small change to configure.ac. Bootstrap.; - Small change; - Cleaning the code; - Updated grid deformation subroutine; - Fixing the mesh deformation; - Updated SU2_MSH; - Bug fixing; - Initial implementation of parallel CGNS reader. Works on 1 rank.; - Merged in recent changes to geometry_structure.cpp.; - Periodic BC working in serial; - Update option_structure.hpp; - Merge pull request #154 from su2code/fixCOptionEnumList; - Bug fixing (periodic bc);,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:5553,Adapt,Adapt,5553,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['Adapt'],"['Adapt', 'Adaptive']"
Modifiability,"loog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:4678,config,configure,4678,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"look, I used a conservative number based on:; For the Roe scheme 4 matrices are generated (Jacobian i, Jacobian j, P tensor, P^-1 tensor), each coefficient of those matrices requires a reasonable number of floating point ops, and two of those matrices are indeed multiplied by each other.; So lets say 5 matrix-matrix multiplications are representative, this should be a conservative estimate as I am not considering the eventual fusion of convective and diffusive discretizations. **The vectorized code is 1.5 times faster.**; This is a fair 1.5 as the code is running on 4 fast cores (parallel via colouring for the reasons I explained previously) and 2 memory channels (scalar code can eventually saturate the memory bandwidth too, but it would take an unreasonable ratio of cores to channels to do so).; Furthermore the scalar code I am considering is writing to CSysMatrix with all the mapping and vectorized writes I mentioned before, before you get all compound interest and take this 1.5 with the 1.47 from CSysMatrix, the speedup relative to code without mapping and vector writes is 1.85.; I restate that this does not require changes to the data layout, again for reasons previously mentioned. ## SpMv - Sparse matrix-vector multiplication; With all these speedups the linear solvers will start taking well over 50% of the time, and so it is desirable to make some improvements there too.; Sadly SpMv is as bandwidth bound as it gets, 1 FMA per 8 bytes, nonetheless I implemented some number-of-variable-specific kernels (for nVar=4 and nVar=5) and I can get about **1.12** speedup (same realistic core to channel conditions). I am not going to dump that code here because it is not too nice to look at (it uses intrinsics) but again that would be something hidden away in CSysMatrix that most people would not need to look at, and there would be a safe generic fall-back for arbitrary number of variables. I think I will do the estimated global speedup together with the summary/proposal.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539177957:3924,variab,variable-specific,3924,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539177957,4,['variab'],"['variable-specific', 'variables']"
Modifiability,"ls a unique role. Unit testing increases time spent in development, but decreases the amount of time spent in bug-fixing and maintaining. For more information, see this relevant Stack Exchange question.<https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>. What do I propose?. My research group at UT Austing has implemented a unit testing framework on our branch, which we're happy with. Some choices were arbitrary, and some choices were made based on our development environment. Those choices may be different for other groups. Here's what we have done:. The unit testing framework is compiled and run using autotools. For more information on autotool's setup, see their documentation<https://www.gnu.org/software/automake/manual/html_node/Tests.html>. Since autotools is the build system for SU2, this involves minimal changes. Using automake, the build process for building unit tests becomes:. '''; ./bootstrap; ./configure; make; make check; '''. We use Boost's unit testing framework<https://www.boost.org/doc/libs/1_70_0/libs/test/doc/html/index.html>. This provides a convenient set of macros for instatiating tests, grouping tests into suites, and running checks. This choice was based on what is available in our development setup. We have integrated our unit tests into our Travis CI regression testing. Every time we push commits or submit a pull request, the unit tests are run and checked. What is my vision for unit testing in SU2?. I am not proposing that we start trying to get 100% code coverage with pre-existing code. That would not provide a good return on investment. Instead, I see people adding unit tests as they write new code and as they find bugs. For each new behavior added to SU2, tests are first added to document the related existing behavior. These tests serve to check that the existing behavior isn't damaged by the new code. Then new tests are added to prove that the new behavior is working corre",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:3056,config,configure,3056,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,2,['config'],['configure']
Modifiability,ls/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/Upgr,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14687,plugin,plugins,14687,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,ls/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugin,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16458,plugin,plugins,16458,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,lugin/FLAGS.linux (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux_x86_64 (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.macosx (112) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win (14) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win32 (33) ; - D MeshTools/PointwiseSU2plugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:13932,plugin,plugins,13932,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,lugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridM,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17692,plugin,plugins,17692,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,lugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2pl,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:15843,plugin,plugins,15843,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"mily: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Loc",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6059,config,config-lite-,6059,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,"mpile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5703,config,config-lite-,5703,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,n (14) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win32 (33) ; - D MeshTools/PointwiseSU2plugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUn,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14112,plugin,plugins,14112,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"n on the library we choose, but he seems to be in favor of [PETSc](https://www.mcs.anl.gov/petsc/) from ANL, which has a 2-clause BSD license and is used by ADflow (formerly SUmb), among other solvers. Eduardo could probably provide more details.; > ; > Another one that's come up in our discussions is [HYPRE](https://computation.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods) from LLNL which has a GNU LGPL. >@juanjosealonso ; >(...) While PETSc is a wonderful library (and parallel), I would hesitate to use it as the solution for the problem that we are trying to solve: it is not the easiest thing to compile and it is most definitely not lightweight. If one also wanted to replace Krylov-space solvers and preconditioners in SU2 the PETSc might make more sense‚Ä¶.but it still forces the developer to conform to their view of the world (including matrix setup and decomposition). (...). >@erangit; >I also support external libraries usage (no need to repeat the many advantages as it is well described above) but I think we should be very wary of portability issues. For instance in SUMB, PETSc was used for the Krylov solvers and more. While indeed it worked well and in parallel mode, each new implementation was a nightmare. LAPACK/BLAS package, on the other hand, provides a much easier implementation experience. Certainly, this is not the only consideration but it should be taken into account. Currently, resulting from the significant contributions of the members of this developers group, SU2 implementation works like a charm. I think we should strive to conserve this feature, especially if we aim at attracting more users and developers into the community. (...). >@vdweide; >(...) @bmunguia and @EduardoMolina, what type of application did you have in mind for PETSc? The only thing I can think of is a full Newton solver. And no matter how much I like PETSc, @juanjosealonso and @erangit have a point here. Looks like I start to belong to the group of old conser",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460853218:1231,portab,portability,1231,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460853218,2,['portab'],['portability']
Modifiability,"n the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: Y",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5316,config,config,5316,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"n; ; required_files = [current_mesh,current_solution]; ; if not all (os.path.exists(fil) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):; err += fil + '\n'; raise RuntimeError , err; ; #--- Start looping; ; # Get mesh dimension; dim = su2amg.get_su2_dim(current_mesh); if ( dim != 2 and dim != 3 ):; raise RuntimeError , ""Wrong dimension number\n""; ; #--- AMG parameters; ; config_amg = dict(); ; config_amg['hgrad'] = float(config['ADAP_HGRAD']); config_amg['hmax'] = float(config['ADAP_HMAX']); config_amg['hmin'] = float(config['ADAP_HMIN']); config_amg['mesh_in'] = 'current.meshb'; config_amg['mesh_out'] = 'current.new.meshb'; config_amg['metric_in'] = ''; config_amg['sol_in'] = 'current_sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d - Mesh size coefficient %.1lf\n"" % (iSiz+1, len(mesh_sizes), ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7131,config,config,7131,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"n_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false; ; Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN; ; Based on the input to this configuration, add thes",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:8110,config,config,8110,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"nd of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_40960_split.meshb; % Invert the background mesh orientation; % Sometimes required for 3D meshes, since AMG doesn't perform; % a check that the orientation of the background and foreground; % meshes match; PYADAP_INV_BACK= NO; % Don't use ridge detection if corners specified; PYADAP_RDG= NO; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:1316,adapt,adaptations,1316,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,2,['adapt'],"['adaptation', 'adaptations']"
Modifiability,"ned on different markers.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/237 https://github.com/su2code/SU2/pull/237; > Commit Summary; > ; > config options updated to be compatible with multiple objectives - mdo not yet implemented; > python tools; > python adjusted for multiple objectives: will always run 1st objective only with continuous adjoint, but will run separate continuous adjoint evaluations within optimization; > continuous adjoint evaluates the requested objectives; > fixing some errors; > File Changes; > ; > M Common/include/config_structure.hpp https://github.com/su2code/SU2/pull/237/files#diff-0 (20); > M Common/include/config_structure.inl https://github.com/su2code/SU2/pull/237/files#diff-1 (6); > M Common/src/config_structure.cpp https://github.com/su2code/SU2/pull/237/files#diff-2 (90); > M SU2_PY/SU2/eval/design.py https://github.com/su2code/SU2/pull/237/files#diff-3 (8); > M SU2_PY/SU2/eval/functions.py https://github.com/su2code/SU2/pull/237/files#diff-4 (14); > M SU2_PY/SU2/eval/gradients.py https://github.com/su2code/SU2/pull/237/files#diff-5 (4); > M SU2_PY/SU2/io/config.py https://github.com/su2code/SU2/pull/237/files#diff-6 (21); > M SU2_PY/SU2/io/tools.py https://github.com/su2code/SU2/pull/237/files#diff-7 (21); > M SU2_PY/SU2/opt/project.py https://github.com/su2code/SU2/pull/237/files#diff-8 (2); > M SU2_PY/SU2/opt/scipy_tools.py https://github.com/su2code/SU2/pull/237/files#diff-9 (24); > M SU2_PY/SU2/run/projection.py https://github.com/su2code/SU2/pull/237/files#diff-10 (4); > M SU2_PY/continuous_adjoint.py https://github.com/su2code/SU2/pull/237/files#diff-11 (22); > Patch Links:; > ; > https://github.com/su2code/SU2/pull/237.patch https://github.com/su2code/SU2/pull/237.patch; > https://github.com/su2code/SU2/pull/237.diff https://github.com/su2code/SU2/pull/237.diff; > ‚Äî; > Reply to this email directly or view it on GitHub https://github.com/su2code/SU2/pull/237.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/237#issuecomment-182175757:2269,config,config,2269,https://su2code.github.io,https://github.com/su2code/SU2/pull/237#issuecomment-182175757,1,['config'],['config']
Modifiability,"new targets; stderr_hdl = open('%sstderr'%log,'w'); ; success = False; val_out = [False]; ; sys.stdout.write(' %s Running CFD\n' % pad_nul); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_solution_ini = ""ite%d_ini.dat"" % global_iter; os.rename(current_solution, current_solution_ini); ; config_cfd.MESH_FILENAME = current_mesh; config_cfd.CONV_FILENAME = ""ite%d_history"" % global_iter; config_cfd.SOLUTION_FLOW_FILENAME = current_solution_ini; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; config_cfd.RESIDUAL_REDUCTION = float(adap_res[iSiz]); config_cfd.EXT_ITER = int(adap_ext_iter[iSiz]); ; config_cfd.WRT_BINARY_RESTART = ""NO""; config_cfd.READ_BINARY_RESTART = ""NO""; ; SU2_CFD(config_cfd); ; if not os.path.exists(current_solution) :; raise RuntimeError , ""\n##ERROR : SU2_CFD Failed.\n""; ; ; except:; sys.stdout = sav_stdout; sys.stderr = sav_stderr; raise; ; sys.stdout = sav_stdout; sys.stderr = sav_stderr; ; ; #--- Print convergence history; ; plot_format = config_cfd['OUTPUT_FORMAT']; plot_extension = su2io.get_extension(plot_format); history_filename = config_cfd['CONV_FILENAME'] + plot_extension; ; history = su2io.read_history(history_filename); ; res_flow = history['Res_Flow[0]']; res_cvg = max(res_flow)-min(res_flow); ; del history; ; sys.stdout.write(' %s CFD done. Residual convergence %.2lf orders of magnitude\n' % (pad_nul, res_cvg)); ; ; to_remove = [""current.itp.solb"", config_amg['mesh_in'], config_amg['mesh_out'], config_amg['sol_in'],config_amg['itp_sol_in']]; for fil in to_remove:; if os.path.exists(fil) : os.remove(fil); ; global_iter += 1; ; os.rename(current_solution,os.path.join(cwd,config.RESTART_FLOW_FILENAME)); os.rename(current_mesh,os.path.join(cwd,config.MESH_OUT_FILENAME)); ; sys.stdout.write(""\nMesh adaptation successfully ended. Results files:\n""); sys.stdout.write(""%s\n%s\n\n"" % (config.MESH_OUT_FILENAME,config.RESTART_FLOW_FILENAME))",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:12628,config,config,12628,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,5,"['adapt', 'config']","['adaptation', 'config']"
Modifiability,nftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $? = 0; configure:5140: ./conftest; configure:5140: $? = 0; configure:5154: result: 8; configure:5168: checking size of void *; configure:5173: gcc -o conftest -g -O2 conftest.c >&5; configure:5173: $? = 0; configure:5173: ./conftest; configure:5173: $? = 0; configure:5187: result: 8; configure:5409: checking X11/Intrinsic.h usability; configure:5409: gcc -c -g -O2 conftest.c >&5; conftest.c:61:27: e,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:11421,config,configure,11421,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"nftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4619: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:8653,config,configure,8653,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"ng type for those data structures is still `double`, only the `getVec` type methods need to convert on the fly to the SIMD type, for example:; ```C++; // use the ""pointer ctor"" to return an array starting at ""row0""; Array<double,4> Matrix<double>::getVec(size_t row0, size_t col) const {; return Array<double,4>(&data_[row0+col*rows_]);; }. // use the ""gather ctor"" to return an array with the indices in ""rows""; template<class U>; Array<double,4> Matrix<double>::getVec(const U& rows, size_t col) const {; return Array<double,4>(&data_[col*rows_], rows);; }; ```; After inlining those copies get optimized away.; Although the stored type, and ""scalar interface"" of the containers do not need to change, the storage order of the data does. Notice that in the above data is stored by columns instead of rows (something that @vdweide mentioned in #716) this has greater implications for gradients as instead of the familiar ""vector of matrices"" we would need a ""matrix of vectors"", i.e. the derivative of variable i w.r.t. coordinate j stored as a vector for all points. The `Adjacency` also needs to be stored in a funny way. For the scalar version of the code it was stored as a CSR sparse matrix (one array of indices into the arrays of data for each point, the rows).; For the vectorized version we want to load (small) arrays of jPoint's, arrays of iEdge's, and arrays of directions, and as we know either those are contiguous or we take a huge performance hit.; If all points had the same number of neighbors we could store the adjacency in LIL (list of lists) format, essentially a column-major matrix, but that is not true for hybrid meshes and so we would possibly waste a lot of memory.; The solution is to use a Block-CSR format (like in CSysMatrix) where the blocks are the vectors we want and instead of one row per point we have one row per SIMD group. But even within a SIMD-sized group points can have different number of neighbors...; The solution for that is padding, within each grou",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:10178,variab,variable,10178,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['variab'],['variable']
Modifiability,"nitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modv",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5669,config,config-lite-,5669,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,"nly in finite_differences.py.; >; > The step size is scaled with the reference length because from the; > practical point of view, I have found that the size of the aircraft, wing,; > airfoil, is important to determine a meaningful step size. e.g. should we; > use the same step for an aircraft with a MAC of ~150in than for an airfoil; > with a chord of 1in.; >; > Remember that most of the times we are using FD when the adjoint is not; > converging‚Ä¶ so we have bad convergence of the direct problem (including; > some level of unsteadiness that we want to filter with the selection of the; > step size). In other words, with the right choice of the FD step size you; > can obtain, at least, an useful gradient‚Ä¶ and that number is somehow linked; > to the size of the aircraft, wing, or airfoil.; >; > The best solution would be to add the step size to the; > finite_differences.py and also to the shape_optimization.py (creating a new; > option in the config file)‚Ä¶ not a top priority, but I‚Äôll do it soon; >; > Best,; > Francisco; >; >; > > On Mar 1, 2017, at 3:25 PM, Thomas D. Economon <notifications@github.com; > <mailto:notifications@github.com>> wrote:; > >; > > Bumping this issue. This has come up several times now for different; > people/projects. Is there a reason to keep it based on the reference moment; > length, or can we revert to specifying this through the command line; > options?; > >; > > ‚Äî; > > You are receiving this because you were assigned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/su2code/SU2/issues/367#issuecomment-283505108>, or; > mute the thread <https://github.com/notifications/unsubscribe-; > auth/AEpkllp8PXmLDDQLJNq-2yRLBoDAfXE-ks5rhf5pgaJpZM4Lq5F->.; > >; >; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub<https://github.com/; > su2code/SU2/issues/367#issuecomment-284288637>, or mute the thread<; > https://github.com/notifications/unsubscri",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/367#issuecomment-284314148:2381,config,config,2381,https://su2code.github.io,https://github.com/su2code/SU2/issues/367#issuecomment-284314148,2,['config'],['config']
Modifiability,"nother place (or lab server) and in Github we only had the config files, unfortunately we checked that for some users it was frustrating to download the config files and then go to another place to download the grids. From our practical point of view, the current setting is ideal to run the regression tests. But we are open to any change that benefits the SU2 users/developers community. . Now, it is very easy to download and modify the TestCases (keep in mind that the options in the config files change frequently) but, the price to pay is a large GitHub repository that it is difficult to download if you don‚Äôt have a good internet connection. Anyway, I think you are coming to Stanford in one week, it would be great to chat with you. We would love to have you and your group as a SU2 developer/user. Looking forward to meeting you and thanks for testing SU2. Best; Francisco. ## . Dr. Francisco Palacios; Engineering Research Associate at Stanford University; AIAA Senior Member, SIAM Member, and SU2 lead developer; Editorial Board Member for Scientific Report (Nature Publishing Group); Intel Parallel Computing Center. Personal webpage: http://adl.stanford.edu/people/fpalacios.html; SU2 webpage: http://su2.stanford.edu/. Department of Aeronautics and Astronautics; Durand Building. Room 357; Stanford University; Stanford CA 94305; United States. On Feb 3, 2015, at 1:32 PM, Lorena A. Barba notifications@github.com wrote:. > And why is your Test repo so large?; > Perhaps some data files would be happier living elsewhere?; > ; > I'm thinking that if your Tests load large mesh files, for example, these mesh files could be placed in a data repository (like Figshare, Data Dryad, Zenodo), and your configuration files for each test could fetch the data it needs. I would imagine that the input data does not change often (or perhaps ever?) and one permalink and DOI is better suited for data than a version-controlled repo.; > ; > ‚Äî; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72909446:1996,config,configuration,1996,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72909446,1,['config'],['configuration']
Modifiability,ntation. Updated the build files.; - bootstrap; - Started parallel CGNS reader.; - Memory fix.; - Minor change; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Updated binaries; - Small change to configure.ac. Bootstrap.; - Small change; - Cleaning the code; - Updated grid deformation subroutine; - Fixing the mesh deformation; - Updated SU2_MSH; - Bug fixing; - Initial implementation of parallel CGNS reader. Works on 1 rank.; - Merged in recent changes to geometry_structure.cpp.; - Periodic BC working in serial; - Update option_structure.hpp; - Merge pull request #154 from su2code/fixCOptionEnumList; - Bug fixing (periodic bc); - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Another important updated to BC in parallel; - More implementation and clean up of the parallel CGNS reader.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - CGNS reader bug fix.; - Updated adj. NS solver with primitive variables and farfield bc including viscous contribution.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Small change; - Back to the previous version; - Fixed some loop variables.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Bug fixes for CGNS.; - New slope limiter based on the wall distance; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Bug fixing; - Non-dimensional adjoint bc; - CGNS bug.; - Mixed-element support in new CGNS reader.; - Memory fix for mixed-element CGNS in parallel.; - Activated the parallel CGNS reader.; - New FFD input; - Adjacency building for Parmetis improve to account for VTK structure; - added if viscous steps to some adjeuler bcs; - Minor changes; - Back to previous version of ParMetis; - Small change; - Final update.; - Minor bug fixed.; - Updated SU2_DEF (cgns); - CGNS global element ID bug fix.; - Heat flux bug fix.; - Small fix.; - Merge branch 'master' into develop; - changed history,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:6821,variab,variables,6821,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['variab'],['variables']
Modifiability,"nts to maintain. For example, in an airfoil test case I want to make sure the sharp trailing edge at node 512 is maintained, so I can manually add; ```; NCORNERS= 1; 1 512; ```; to the end of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_40960_split.meshb; % Invert the background mesh orientation; % Sometimes required for 3D meshes, since AMG doe",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:1111,adapt,adaptation,1111,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,1,['adapt'],['adaptation']
Modifiability,ntwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/share,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17362,plugin,plugins,17362,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,ntwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/inte,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19876,plugin,plugins,19876,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"o allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not port all methods in one go xD). The template machinery to support this is actually not too crazy:; ```c++; #include <array>; #include <cmath>. // An example type to use instead of the container that stores solution data for all vertices.; struct SolutionContainer; {; std::array<double,3> velocity;; std::array<double,3> areaVector;; };. using ResultType = double;. // We want classes with this interface.; class VirtualInterface; {; public:; virtual ResultType Compute(const SolutionContainer&) const = 0;; };. // The Compute method is to be composed via an inheritance chain, to do this; // we allow each building block to inherit from any class. These classes should; // be function objects that have no member variables, all data used in the; // resulting Compute method will be on the stack.; template<typename Base>; class ComputeArea : Base; {; protected:; // Different template instantiations will be made for; // 2D/3D to allow perfect loop unrolling.; enum : int {nDim = Base::nDim};. // To share variables between building blocks we will pass; // down a struct which is also composed by inheritance; struct WorkVarsType : Base::WorkVarsType; {; double area; // add ""area"" to the variables of Base; };; ; // The final implementation of Compute will be a call down the chain.; // The final constructed WorkVarsType is not known at this stage,; // hence we also template the method.; template<typename WV>; void Compute(WV& wv, const SolutionContainer& sol) const; {; // Boilerplate, call base first. This is akin to the decorator design pattern; // without polymorphism. ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:2557,inherit,inheritance,2557,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,4,['inherit'],"['inherit', 'inheritance']"
Modifiability,"o:notifications@github.com]; Sent: Monday, July 22, 2019 8:38 AM; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Subscribed <subscribed@noreply.github.com>; Subject: [su2code/SU2] C++ compiler cannot create executables (#738). Dear developers,; I am trying to install SU2 in docker ubuntu 18.04 container so that I can easily share with partner. But I failed to compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, please?; config.log<https://github.com/su2code/SU2/files/3418183/config.log>. ‚Äî; You are receiving this because you are subscribed to t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:1149,variab,variables,1149,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,1,['variab'],['variables']
Modifiability,odulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/p,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:15389,plugin,plugins,15389,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ogramming may become an entrance barrier to new additions to the community. As I wrote in the preamble of #789:; ""But please participate even if you never heard of these topics, your opinion about readability and ""developability"" of the code is important! I think the code-style should be accessible to people starting a PhD (after they read a bit about C++...).""; I try to encapsulate and hide the tricky bits as much as possible to make the code as readable as possible, whether I am succeeding or not is for the community to decide, in all these PR's I've been pointing to the areas I think are trickier, if someone, anyone, feels they are absolutely incomprehensible please say something... either here, or trough slack, or by email (I think it shows in the commits) (I understand not everyone is keen on github exposure). > I'm aware that you have been doing very well at documenting the code and the various PRs, but I'd say we should try to find an strategy to ease the learning curve on potential new developers (maybe some developer tutorials? a collection of the comments/discussions on the PRs moved to the wiki? a list of links/useful resources?). I agree with documentation of broad design decisions, that is the intent of #789, and developer tutorials (how to implement a new X) once we are content with the restructurings, otherwise they will quickly go outdated... or actually...; We should probably first think about the answers to ""how to implement a new X"" and restructure/refactor as a function of that.; Based on previous efforts of maintaining wiki's updated while code is being developed, I much prefer this github style where you can clearly tell what version of the code the comments refer to. A collection of comments/discussions organized by topic and linked to a feature is somewhat what I had in mind when I opened a ""big PR"" (#824) with little branches such as this one, I can try to complete that with a list of links/useful resources, references as it were, good idea!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:5095,refactor,refactor,5095,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['refactor'],['refactor']
Modifiability,"oint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); gradI[iVar][iDim] += a_ij[iDim]*flux;; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); grad(iPoint+k,iVar,iDim) = gradI[iVar][iDim][k];; ...; ```; Similarly when computing the gradient we need to first fetch/transpose it to be able to vectorize subsequent computations; ```c++; FltVec gradI[MAXNVAR][MAXNDIM];. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); gradI[iVar][iDim][k] = grad(iPoint+k,iVar,iDim);; ...; ```; Performance wise this is actually better than the SoA version (4% on gradients, 35% on limiters) as it also benefits from better locality, and it is only slightly (3%) worse than zig zag storage, especially when fusing limiters and gradients as the transposition of the gradient into storage is greatly amortised.; Regarding readability, the 3 nested loops can be moved to methods of the container, but we cannot get rid off the local variable (if we want vectorization that is). **We lose the ability to vectorize primitive variable updates efficiently with AoS** but currently that only accounts for 3% of the runtime and it is a memory bound operation therefore it would not gain much from vectorization anyway. On the subject of de-swizzling data remember I said the writes into CSysMatrix would be a bit weird, that is because each Jacobian contribution will be a ""matrix of short arrays"" that needs to be transformed into a short array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:15046,variab,variable,15046,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['variab'],['variable']
Modifiability,ointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/Po,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19122,plugin,plugins,19122,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ok I just removed the commented lines!; Sorry about that, I initially put there those ""couts"" cause I first thought about throwing out a warning string (in case users try to impose Gamma and Gas_constant using standard_air model) and then I forgot to remove them. ; This is a bug from the current develop branch actually: right now it is possible to change gamma even though one chooses the std_air model.; It happened to me that simulations were not converging and giving weird behaviour just because I forgot to remove the option from the config file. I put that correction but maybe you've a better idea on how to handle this?. Regarding the Jacobians, you're right, right now the implementation is exactly the generalization of the one implemented in the original ideal gas situation (Roe). Maybe in the future we will work also on Jacobians for the HLLC but that's something I don't really need right now. I can talk with folks here in Milano or in Delft and see if there a critical mass calling for that implementation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/209#issuecomment-152458824:541,config,config,541,https://su2code.github.io,https://github.com/su2code/SU2/pull/209#issuecomment-152458824,1,['config'],['config']
Modifiability,ols/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.inl (0) ; - I SU2_CFD/include/numerics_machine_learning_turbulent.hpp (0) ; - I SU2_CFD/include/numerics_structure.hpp (0) ; - I SU2_CFD/include/numerics_structure.inl (0) ; - I SU2_CFD/include/output_structure.hpp (0) ; - I SU2_CFD/include/solver_structure.hpp (0) ; - I SU2_CFD/include/solver_structure.inl (0) ; - I SU2_CFD/include/transpor,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20460,plugin,plugins,20460,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"om>> wrote:. I've tracked down the source of the bug, and I'll submit a pull request later today. During the output of the periodic mesh in SU2_MSH, CPeriodicGeometry::SetMeshFile sorts the nodes into the order normal, receive, send. This can be found in lines 18798-18819 of Common/src/geometry_structure<https://github.com/su2code/SU2/blob/68991cd1005cf118e1ff21b8952bb366bb299cf3/Common/src/geometry_structure.cpp#L18798>. I've copied down the lines here for reference:. /*--- Change the numbering to guarantee that the all the receive; points are at the end of the file ---*/; unsigned long OldnPoint = geometry->GetnPoint();; unsigned long *NewSort = new unsigned long[nPoint];; for (iPoint = 0; iPoint < nPoint; iPoint++) {; NewSort[iPoint] = iPoint;; }. unsigned long Index = OldnPoint-1;; for (iMarker = 0; iMarker < nMarker; iMarker++) {; if (bound[iMarker][0]->GetVTK_Type() == VERTEX) {; if (config->GetMarker_All_SendRecv(iMarker) < 0) {; for (iElem_Bound = 0; iElem_Bound < nElem_Bound[iMarker]; iElem_Bound++) {; if (bound[iMarker][iElem_Bound]->GetNode(0) < geometry->GetnPoint()) {; NewSort[bound[iMarker][iElem_Bound]->GetNode(0)] = Index;; NewSort[Index] = bound[iMarker][iElem_Bound]->GetNode(0);; Index--;; }; }; }; }; }. In order to sort the points, a list mapping the old points to the new points (NewSort) is created. The problem is that this list is sorted by switching nodes. But it doesn't switch around the contents of the list (i.e. two node numbers from the list). Instead it switched an index from the list and an actual node number pulled from the geometry. This presents two problems:. 1. If any of the receive nodes actually are at the end of the list, they will get switched away from the end of the list.; 2. If any node is switched twice, data is lost. That's because the sorting assumes that the elements being switched have not already been switched. This is how the three points went missing from the cube problem I previously referenced. If my write-up is too c",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/431#issuecomment-358423989:1220,config,config,1220,https://su2code.github.io,https://github.com/su2code/SU2/issues/431#issuecomment-358423989,1,['config'],['config']
Modifiability,"onfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false; ; Please be sure to add the $SU2_HOME and $SU2_RUN",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:7964,config,config-lite-,7964,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,onfigure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of uns,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:10313,config,configure,10313,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,6,['config'],['configure']
Modifiability,ons.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/data.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/filelock.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/redirect.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/state.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/tools.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/historyMap.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/mesh/adapt.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/mesh; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/mesh/tools.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/mesh; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/mesh/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/mesh; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/opt/project.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/opt; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/opt/scipy_tools.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/opt; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/opt/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/opt; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/adaptation.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632032044:5605,adapt,adapt,5605,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632032044,1,['adapt'],['adapt']
Modifiability,ools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16617,plugin,plugins,16617,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,ools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/Pointwise,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:18344,plugin,plugins,18344,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"opt/xcat/sbin; PATH: /usr/lib64/qt-3.3/bin; PATH: /opt/pbs/default/bin; PATH: /opt/pbs/tools/bin; PATH: /usr/lpp/mmfs/bin/; PATH: /usr/local/bin; PATH: /bin; PATH: /usr/bin; PATH: /usr/local/sbin; PATH: /usr/sbin; PATH: /sbin; PATH: /gshare/soft/init; PATH: /gshare/soft/scripts; PATH: .; PATH: /gshare/soft/init; PATH: /gshare/soft/scripts; PATH: . ## ----------- ##; ## Core tests. ##; ## ----------- ##. configure:2465: checking build system type; configure:2479: result: x86_64-unknown-linux-gnu; configure:2499: checking host system type; configure:2512: result: x86_64-unknown-linux-gnu; configure:2532: checking target system type; configure:2545: result: x86_64-unknown-linux-gnu; configure:2587: checking for a BSD-compatible install; configure:2655: result: /usr/bin/install -c; configure:2666: checking whether build environment is sane; configure:2721: result: yes; configure:2872: checking for a thread-safe mkdir -p; configure:2911: result: /bin/mkdir -p; configure:2918: checking for gawk; configure:2934: found /bin/gawk; configure:2945: result: gawk; configure:2956: checking whether make sets $(MAKE); configure:2978: result: yes; configure:3075: checking whether make supports nested variables; configure:3092: result: yes; configure:3117: checking for style of include used by make; configure:3145: result: GNU; configure:3196: result: >>> MPI support disabled by default <<<; configure:3269: checking for g++; configure:3285: found /usr/bin/g++; configure:3296: result: g++; configure:3323: checking for C++ compiler version; configure:3332: g++ --version >&5; g++ (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3343: $? = 0; configure:3332: g++ -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:1591,config,configure,1591,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,56,"['config', 'variab']","['configure', 'variables']"
Modifiability,or Tecplot binary solutions for unsteady flows. Fixes #150.; - Now SU2 should work with the latest version of the Intel compiler.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Working on the O3 stuff; - Small change.; - Add another check to improve stability.; - Collection of improvements.; - Updated actuator disk; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Preliminary implementation of the Neg SA; - Minor updates; - Preliminary implementation of the Negative SA; - Bug fixing; - Fixed memory issued for very large meshes with ParMETIS.; - Clear evaluation of Vorticity and StrainMag; - Viscous limiter; - Updated RELAXATION_FACTOR; - RANS MG; - Partial fix to no MPI output; - Updated I/O; - Updated Adapt CFL; - Updated Adaptive CFL number; - Release 3.2.8; - Updated SetCFL_Number; - Small update; - Small change; - Small adjustments; - Minor changes; - Updated release 3.2.8; - MPI disabled by default in build. Added --enable-mpi flag to configure.; - Merged the ParMETIS implementation. Updated the build files.; - bootstrap; - Started parallel CGNS reader.; - Memory fix.; - Minor change; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Updated binaries; - Small change to configure.ac. Bootstrap.; - Small change; - Cleaning the code; - Updated grid deformation subroutine; - Fixing the mesh deformation; - Updated SU2_MSH; - Bug fixing; - Initial implementation of parallel CGNS reader. Works on 1 rank.; - Merged in recent changes to geometry_structure.cpp.; - Periodic BC working in serial; - Update option_structure.hpp; - Merge pull request #154 from su2code/fixCOptionEnumList; - Bug fixing (periodic bc); - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - Another important updated to BC in parallel; - More implementation and clean up of the parallel CGNS reader.; - Merge branch 'develop' of https://github.com/su2code/SU2 into develop; - CGNS reader bug fix.; - Upd,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:5795,config,configure,5795,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['config'],['configure']
Modifiability,"or machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Loc",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6618,config,config-lite-,6618,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,"ore parallel partitioning.; Performing linear partitioning of the grid nodes.; 494258 interior elements before parallel partitioning.; Distributing elements across all ranks.; Calling the partitioning functions.; Getting into adjacency function.; Building the graph adjacency structure.; 5 surface markers.; 10222 boundary elements in index 0 (Marker = aircraft).; 9712 boundary elements in index 1 (Marker = farfield).; 3382 boundary elements in index 2 (Marker = inner_nearfield).; 19738 boundary elements in index 3 (Marker = symmetry).; 3382 boundary elements in index 4 (Marker = outer_nearfield).; Calling ParMETIS...; Traceback (most recent call last):; File ""/home/app/SU2/install/bin/parallel_computation.py"", line 110, in <module>; main(); File ""/home/app/SU2/install/bin/parallel_computation.py"", line 61, in main; options.compute ); File ""/home/app/SU2/install/bin/parallel_computation.py"", line 88, in parallel_computation; info = SU2.run.CFD(config) ; RuntimeError:; Command = mpirun -n 12 /home/app/SU2/install/bin/SU2_CFD config_CFD.cfg; SU2 process returned error '15'; [ubuntu:8553] *** An error occurred in MPI_Wait; [ubuntu:8553] *** on communicator MPI COMMUNICATOR 3 DUP FROM 0; [ubuntu:8553] *** MPI_ERR_TRUNCATE: message truncated; [ubuntu:8553] *** MPI_ERRORS_ARE_FATAL: your MPI job will now abort; --------------------------------------------------------------------------; mpirun has exited due to process rank 9 with PID 8554 on; node ubuntu exiting improperly. There are two reasons this could occur:. 1. this process did not call ""init"" before exiting, but others in; the job did. This can cause a job to hang indefinitely while it waits; for all processes to call ""init"". By rule, if one process calls ""init"",; then ALL processes must call ""init"" prior to termination. 2. this process called ""init"", but exited without calling ""finalize"".; By rule, all processes that call ""init"" MUST call ""finalize"" prior to; exiting or it will be considered an ""abnormal termination""",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/159#issuecomment-75485283:1123,config,config,1123,https://su2code.github.io,https://github.com/su2code/SU2/issues/159#issuecomment-75485283,1,['config'],['config']
Modifiability,ort.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16695,plugin,plugins,16695,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"orted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in general use more memory due to the intermediate variables and extra adjacency information needed. If the entire algorithm is transformed performance may suffer as some computations may have to be repeated.; However, some reductions are possible without intermediate variables, for example when assembling the system matrix for implicit schemes only the diagonal entries can result in race conditions, now it just so happens that each diagonal entry is equal to the negated corresponding column sum.; - **Atomics** are terrible for the performance of code that writes frequently to memory (i.e. bandwidth-bound code), they do not increase the memory footprint and so make sense for compute-bound code.; Bugs due to a missing atomic can be very hard to debug (but any race condition is). Coloring is what one sees most in the literature, and yet I lean towards gather-to-scatter. Fewer things can go wrong with it as it is easy to understand, one gets the maximum amount of parallelism. I will now take two familiar routines, computing gradients (Green-Gauss) and limiters, vectorize / parallelize them in different ways, and measure relative performance to illustrate some of these key points introduced here. There will be C++ snipets and there will be some x86 assembly too :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:6096,variab,variables,6096,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['variab'],['variables']
Modifiability,"ost machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6119,config,config,6119,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"oup at Polytechnic University of Milan. |; | - Prof. Rafael Palacios' group at Imperial College London. |; -------------------------------------------------------------------------; | Copyright (C) 2012-2015 SU2, the open-source CFD code. |; | |; | SU2 is free software; you can redistribute it and/or |; | modify it under the terms of the GNU Lesser General Public |; | License as published by the Free Software Foundation; either |; | version 2.1 of the License, or (at your option) any later version. |; | |; | SU2 is distributed in the hope that it will be useful, |; | but WITHOUT ANY WARRANTY; without even the implied warranty of |; | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU |; | Lesser General Public License for more details. |; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. Build Configuration Summary:. Source code location: /home/antodech/SU2-4.1.0; Install location: /gshare/work/hpascalj/CodeSU2-master; Version: 4.1.0; C++ Compiler: g++; C Compiler: gcc; Preprocessor flags: ; Compiler flags: -g -O2; Linker flags: ; MPI support: no; Metis support: no; Parmetis support: no; TecIO support: no; CGNS support: yes; HDF5 support: no; SZIP support: no; ZLIB support: no; Mutation++ support: no; Jsoncpp support: no; LAPACK support: no; Datatype support:; double yes; complex no; codi_reverse no; codi_forward no. External includes: ; External libs: . Build SU2_CFD: yes; Build SU2_DOT: yes; Build SU2_MSH: yes; Build SU2_DEF: yes; Build SU2_SOL: yes; Build SU2_GEO: yes. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=""/gshare/work/hpascalj/CodeSU2-master/bin""; export SU2_HOME=""/home/antodech/SU",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:18415,Config,Configuration,18415,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,1,['Config'],['Configuration']
Modifiability,"ovided.\n'); ; #--- Check existence of initial mesh, solution; ; required_files = [current_mesh,current_solution]; ; if not all (os.path.exists(fil) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):; err += fil + '\n'; raise RuntimeError , err; ; #--- Start looping; ; # Get mesh dimension; dim = su2amg.get_su2_dim(current_mesh); if ( dim != 2 and dim != 3 ):; raise RuntimeError , ""Wrong dimension number\n""; ; #--- AMG parameters; ; config_amg = dict(); ; config_amg['hgrad'] = float(config['ADAP_HGRAD']); config_amg['hmax'] = float(config['ADAP_HMAX']); config_amg['hmin'] = float(config['ADAP_HMIN']); config_amg['mesh_in'] = 'current.meshb'; config_amg['mesh_out'] = 'current.new.meshb'; config_amg['metric_in'] = ''; config_amg['sol_in'] = 'current_sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d -",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7060,config,config,7060,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"ow with a few pragmas we get gcc to vectorize:; ```C++; template<size_t nVar>; void computeGradients_impl(size_t nEdge,; size_t nPoint,; size_t nDim,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& area,; const vector<double>& volume,; const Matrix& phi,; VectorOfMatrix& grad); {; grad.setZero();. for(size_t iEdge=0; iEdge<nEdge; ++iEdge); {; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. double phi_ave[nVar];. #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); phi_ave[iVar] = 0.5*(phi(iPoint,iVar)+phi(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); {; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; double flux = phi_ave[iVar]*area(iEdge,iDim);. grad(iPoint,iVar,iDim) += flux;; grad(jPoint,iVar,iDim) -= flux;; }; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); for(size_t iDim=0; iDim<nDim; ++iDim); #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; ```; Well it is not just a few pragmas, we need to make the number of variables known at compile time (via a template parameter) and we need to transpose how the gradient is stored, i.e. instead of {xyz, xyz, xyz, xyz} we need {xxxx, yyyy, zzzz}. This code gets a speed-up of **2.2**. This code is generic but the template needs to be instantiated for every possible number of variables and we need a `switch` to call the right version at runtime, not very friendly.; Processing multiple edges at the same time is not worth the effort, for one we need `gather/scatter` on a very light routine, and on top of that we need to sort the edges such that we do not attempt to `scatter` to the same point when updating the gradient (a problem similar to the race condition described for SPMD). We can switch to a point-based loop and process multiple points in a SIMD way, that avoids the `scatter` problem but `gathers` will still be required. Here is what the scalar version of the point-based loop loo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:2817,variab,variables,2817,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['variab'],['variables']
Modifiability,"pData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false; ; Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if appl",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:8050,config,config-lite-,8050,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config-lite-']
Modifiability,"pecasts. Still tracking down a memory problem...; - Critical bug fix for vtxdist array.; - Partial fix; - More MPI improvements.; - Fixing a bug in SU2_DEF; - Updated BC_ActDisk_Boundary (MPI); - Merge remote-tracking branch 'upstream/develop' into develop; - changing solidboundary setting to be heatflux OR euler etc instead of AND, also working on doxygen documentation; - Dynamic allocation for some marker-related arrays.; - visualize part taken out to match upstream/dev; - Collection of improvements; - Release 3.2.7; - Fixing LOW_MEMORY_OUTPUT; - Updated LOW_MEMORY_OUTPUT option; - Updated configure.ac; - After autoconf; - Updated MPI; - Updated BC_Engine_Exhaust and BC_Engine_Bleed; - Small change; - Fixing subsonic engine intake option; - Small output change; - Added output_su2.cpp; - Updated Engine BC; - Working on Engine BCs; - Added Supersonic Outlet BC; - Minor change; - Merge remote-tracking branch 'upstream/develop' into develop; - adjoints, solid boundary, doxygen in config; - continued fixing; - re-added adjoint bc mods; - re-adding avg outlet pressure (static pressure adjoint); - re-adding avg outlet pressure (static pressure adjoint); - Merge branch 'temp' of https://github.com/hlkline/SU2 into temp; - continued fixing; - average total pressure and fixes to avg outlet pressure; - adding stagnation pressure output to SU2_DOT; - Merge pull request #146 from hlkline/temp; - Updated Entropy fix (now it is active).; - Another change in BC_Engine_Exhaust; - Updated CGNS in parallel; - Added runtime file; - Small typo; - Adjustment of the Entropy fix coefficient; - Bug in SU2_GEO; - Debug version with print statements.; - Updated release 3.2.7.1; - Small change; - Updated config file; - Code update; - MPI Status and Request fix.; - Another MPI Status/Request fix.; - Actuator disk update.; - Small update; - Initial implementation of pyramids and prisms for Tecplot binary.; - Small fix for Tecplot binaries. Closes #56. Closes #57.; - Removed extra allocation re",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:3391,config,config,3391,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['config'],['config']
Modifiability,plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTool,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19197,plugin,plugins,19197,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19349,plugin,plugins,19349,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,proj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:15153,plugin,plugins,15153,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"proj_j;; limiter(jPoint,iVar) = min(limiter(jPoint,iVar), lim_j);; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; for(size_t iVar=0; iVar<nVar; ++iVar); {; double lim = limiter(iPoint,iVar);; limiter(iPoint,iVar) = lim*(lim+2)/(lim*lim+lim+2);; }; }; }; ```; Something in the code above is a bit different from the implementation in SU2, namely:; ```C++; double lim_i = phiMax(iPoint,iVar);; if(proj_i <= 0.0) {; lim_i = phiMin(iPoint,iVar);; proj_i = min(proj_i, -eps);; }; ```; This is the bit of code that selects the right delta based on the sign of the projection and avoids division by zero, this less readable version does the same with one branch instead of three, simplifying ""if"" statements is essential for vectorization, so to make the comparison fair I used the same strategy in the scalar code. To make this post shorter I will show the SIMD and parallel version of the code right away. Trying to process multiple edges instead of multiple variables has all the problems I mentioned for the gradients, so again we use the trick of templating on the number of variables.; ```C++; template<size_t nVar>; void computeLimiters_impl(size_t nPoint,; size_t nDim,; const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& coords,; const Matrix& phi,; const VectorOfMatrix& grad,; Matrix& phiMax,; Matrix& phiMin,; Matrix& limiter); {; // initialize; #pragma omp parallel for schedule(dynamic,TARGET_CHUNK_SIZE); for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; phiMax(iPoint,iVar) = phi(iPoint,iVar);; phiMin(iPoint,iVar) = phi(iPoint,iVar);; limiter(iPoint,iVar) = 2.0;; }; }. // find min and max neighbor; for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; #if SORT_BY_COLOR==1; size_t iEdge = k;; #else; size_t iEdge = ed",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:3389,variab,variables,3389,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,4,['variab'],['variables']
Modifiability,pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.inl (0) ; - I SU2_CFD/include/numerics_machine_learning_turbulent.hpp (0) ; - I SU2_CFD/include/numerics_structure.hpp (0) ; - I SU2_CFD/include/numerics_structure.inl (0) ; - I SU2_CFD/in,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20296,plugin,plugins,20296,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"python3); Found pkg-config: /usr/bin/pkg-config (1.7.3); Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Run-time dependency mpich found: YES 3.3.2; Dependency mpich found: YES 3.3.2 (cached); Message: Extracting boost ...; Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Run-time dependency openblas found: YES 0.3.10; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_HOME/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.6 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: true; PaStiX: false; Mixed Float: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=/home/slimshady/UserPackages/SU2_INSTALL/bin; export SU2_HOME=/home/slimshady/UserPackages/SU2_HOME; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. Use './ninja -C build install' to compile and install SU2. Build targets in project: 21. Found ninja-1.10.0.git at /home/slimshady/UserPackages/SU2_HOME/ninja; ```; The ninja command fails like so:; ```; slimshady@arch-linux-hp-probook-g3-450: SU2_HOME$ ./ninja -C build install ; ninja: Entering directory `build'; [583/894] Linking target SU2_CFD/src/SU2_CFD; FAILED: SU2_CFD/src/SU2_CFD ; /usr/bin/g++ -o SU2_",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137:2956,Config,Configuration,2956,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137,1,['Config'],['Configuration']
Modifiability,"r -p; configure:2911: result: /bin/mkdir -p; configure:2918: checking for gawk; configure:2934: found /bin/gawk; configure:2945: result: gawk; configure:2956: checking whether make sets $(MAKE); configure:2978: result: yes; configure:3075: checking whether make supports nested variables; configure:3092: result: yes; configure:3117: checking for style of include used by make; configure:3145: result: GNU; configure:3196: result: >>> MPI support disabled by default <<<; configure:3269: checking for g++; configure:3285: found /usr/bin/g++; configure:3296: result: g++; configure:3323: checking for C++ compiler version; configure:3332: g++ --version >&5; g++ (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3343: $? = 0; configure:3332: g++ -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:3116,Config,Configured,3116,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,1,['Config'],['Configured']
Modifiability,"r""'; am__untar='$${TAR-tar} xf -'; bindir='${exec_prefix}/bin'; build='x86_64-unknown-linux-gnu'; build_alias=''; build_cpu='x86_64'; build_os='linux-gnu'; build_vendor='unknown'; datadir='${datarootdir}'; datarootdir='${prefix}/share'; docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'; dvidir='${docdir}'; exec_prefix='${prefix}'; host='x86_64-unknown-linux-gnu'; host_alias=''; host_cpu='x86_64'; host_os='linux-gnu'; host_vendor='unknown'; htmldir='${docdir}'; includedir='${prefix}/include'; infodir='${datarootdir}/info'; install_sh='${SHELL} /home/antodech/SU2-4.1.0/install-sh'; libdir='${exec_prefix}/lib'; libexecdir='${exec_prefix}/libexec'; localedir='${datarootdir}/locale'; localstatedir='${prefix}/var'; mandir='${datarootdir}/man'; mkdir_p='$(MKDIR_P)'; oldincludedir='/usr/include'; pdfdir='${docdir}'; prefix='/gshare/work/hpascalj/CodeSU2-master'; program_transform_name='s,x,x,'; psdir='${docdir}'; sbindir='${exec_prefix}/sbin'; sharedstatedir='${prefix}/com'; su2_externals_INCLUDES=''; su2_externals_LIBS=''; sysconfdir='${prefix}/etc'; target='x86_64-unknown-linux-gnu'; target_alias=''; target_cpu='x86_64'; target_os='linux-gnu'; target_vendor='unknown'. ## ----------- ##; ## confdefs.h. ##; ## ----------- ##. /* confdefs.h */; #define PACKAGE_NAME ""SU2""; #define PACKAGE_TARNAME ""SU2""; #define PACKAGE_VERSION ""4.1.0""; #define PACKAGE_STRING ""SU2 4.1.0""; #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; #define PACKAGE_URL ""https://github.com/su2code""; #define PACKAGE ""SU2""; #define VERSION ""4.1.0""; #define STDC_HEADERS 1; #define HAVE_SYS_TYPES_H 1; #define HAVE_SYS_STAT_H 1; #define HAVE_STDLIB_H 1; #define HAVE_STRING_H 1; #define HAVE_MEMORY_H 1; #define HAVE_STRINGS_H 1; #define HAVE_INTTYPES_H 1; #define HAVE_STDINT_H 1; #define HAVE_UNISTD_H 1; #define SIZEOF_SHORT_INT 2; #define SIZEOF_INT 4; #define SIZEOF_UNSIGNED_INT 4; #define SIZEOF_LONG_INT 8; #define SIZEOF_FLOAT 4; #define SIZEOF_DOUBLE 8; #define SIZEOF_VOID_P 8. configure: exit 0; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:27135,config,configure,27135,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,rc/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D Mes,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19273,plugin,plugins,19273,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"re:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4619: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E conftest.c; configure:4664: $? = 0; configure:4678: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: res",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:8782,config,configure,8782,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,re:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = ,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:10452,config,configure,10452,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,6,['config'],['configure']
Modifiability,"recently pushed to develop branch with doxygen group created and a few comments updated to be put into the group. This will add a link on the modules page. Since there are so many config options, everyone please feel free to update other variables in a similar way.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/122#issuecomment-59972462:180,config,config,180,https://su2code.github.io,https://github.com/su2code/SU2/issues/122#issuecomment-59972462,2,"['config', 'variab']","['config', 'variables']"
Modifiability,"rror: ac_nonexistent.h: No such file or directory; configure:4678: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4707: checking for grep that handles long lines and -e; configure:4765: result: /bin/grep; configure:4770: checking for egrep; configure:4832: result: /bin/grep -E; configure:4837: checking for ANSI C header files; configure:4857: gcc -c -g -O2 conftest.c >&5; configure:4857: $? = 0; configure:4930: gcc -o conftest -g -O2 conftest.c >&5; configure:4930: $? = 0; configure:4930: ./conftest; configure:4930: $? = 0; configure:4941: result: yes; configure:4954: checking for sys/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; c",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:9713,config,configure,9713,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,"rs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; SU2_CFD(config_cfd); ; except:; sys.stdout = sav_stdout; sys.stderr = sav_stderr; raise; ; sys.stdout = sav_stdout; sys.stderr = sav_stderr; ; else:; required_options=['SOLUTION_FLOW_FILENAME']; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : RESTART_SOL is set to YES, but the solution is missing:\n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; current_mesh = config['MESH_FILENAME']; current_solution = config['SOLUTION_FLOW_FILENAME']; ; sys.stdout.write('Initial CFD solution is provided.\n'); ; #--- Check existence of initial mesh, solution; ; required_files = [current_mesh,current_solution]; ; if not all (os.path.exists(fil) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):;",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:5328,config,config,5328,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"s and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link current files; ; config_cfd = copy.deepcopy(config); for opt in adap_options:; config_cfd.pop(opt, None); config_cfd.LOW_MEMORY_OUTPUT = ""NO""; ; config_cfd.WRT_BINARY_RESTART = ""NO""; #config_cfd.READ_BINARY_RESTART = ""NO""; ; current_mesh = ""Initial_mesh""; current_solution = ""Initial_solution""; ; if config['RESTART_SOL'] == 'NO':; ; stdout_hdl = open('ini.stdout','w') # new targets; stderr_hdl = open('ini.stderr','w'); ; success = False; val_out = [False]; ; sys.stdout.write('Running initial CFD solution.\n'); ; try: # run with redirected outputs; ; sav_stdout, sys.stdout = sys.stdout, stdout_hdl ; sav_stderr, sys.stderr = sys.stderr, stderr_hdl; ; current_mesh = config['MESH_FILENAME']; current_solution = ""ini_restart_flow.dat""; ; config_cfd.CONV_FILENAME = ""ini_history""; config_cfd.RESTART_FLOW_FILENAME = current_solution; ; SU2_CFD(config_cfd); ; except:; sys.stdout = sav_stdout; sys.stderr = sav_stderr; raise; ; sys.stdout = sav_stdout; sys.stderr = sav_stderr; ; else:; required_options=['SOLUTION_FLOW_FILENAME']; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : RESTART_SOL is set to YES, but the solution is missing:\n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; curr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:4957,config,config,4957,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,"s correct, SU2 just want to use an updated version of the limiter for the turbulence variables. ` if (config->GetSpatialOrder() == SECOND_ORDER_LIMITER) SetSolution_Limiter(geometry, config);; `; and for the flow variables. ` if (limiter_flow) solver_container[FLOW_SOL]->SetPrimitive_Limiter(geometry, config);; `. Another story is if that is really worth it and we should use the values from the previous iteration. Remember that we compute the turbulence variables after updating the flow variables... so... from the theoretical point of view it makes sense to have an updated value for the limiter. However this is not 100% accurate because we are using old gradients to compute the new limiter. Anyway, the spirit is to have a limiter computed using the latest flow variables value and we should probably check that the gradients have been also updated before computing limiters again for the turbulence equation. What I don't really like is Upwind_Residual. ` bool limiter = (config->GetSpatialOrder() == SECOND_ORDER_LIMITER);; `. in this case we are using only the info about limiters or not in the turbulence model... so if, for example, we are using JST for the mean flow equations then the limiter for the flow equations have never been computed and. ```; if (limiter) {; FlowPrimVar_i[iVar] = V_i[iVar] + Limiter_i[iVar]*Project_Grad_i;; FlowPrimVar_j[iVar] = V_j[iVar] + Limiter_j[iVar]*Project_Grad_j;; }. ``` . Is incorrect because Limiter_i has never been computed (if we are lucky maybe we are using a zero value by default... but we need to check). In other words, I think this require a deeper look. @jschuele, could you please think on this and submit a new pull request (I'll close this one). If you don't have time, please let me know and we really appreciate if you could add this situation as an Issue. We'll try to fix this problem as soon as possible. By the way the initial confusion was that the SpatialOrder in . ` config->GetSpatialOrder(); `; is updated in ; ```; void ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/403#issuecomment-320490588:1063,config,config,1063,https://su2code.github.io,https://github.com/su2code/SU2/pull/403#issuecomment-320490588,1,['config'],['config']
Modifiability,"s nowadays, so we should always be improving the class design accordingly. I suppose this will just get more important with adding more physics, zones, and more complex time integration schemes. I would like to highlight that when the code was first released, we did not have ""zones"" at all (not until some early sliding mesh work after a couple of versions), and the CDriver and CIteration classes didn't even exist until we dreamed them up a couple of years ago. My point is that, with some proper planning, we have the creativity and the right team to develop the solution we need, and we shouldn't be afraid to make big changes when necessary. Moving quickly while leveraging the team's broad skillset is one of our biggest advantages in this project. As you all know, over the years, we continue to move toward a *_structure.cpp and *_physics.cpp mindset for how we do our abstractions/data encapsulations, with ""structure"" components reused and ""physics"" components being specialized to a certain set of governing equations. This has happened in many places, including recently with the CTransfer class, for instance, and it is likely to happen with the COutput class(es) before long. However, one area where there hasn't been much evolution is within the CIntegration classes. Apart from a couple of additions for structural problems and now the DG integration, it is largely the same as it was in the first release. Perhaps this is our opportunity to rethink and update these classes for future expansion, just as we've done for others over the years. We could rework them, move them up or down in the hierarchy, change where they're instantiated, change the inheritance, and so on. Even if they get a little more complicated (like usual), as long as they're properly abstracted, it isn't likely to bother the developers working in other areas of the code too much. In short, I think some effort spent on the CIntegration classes could help here, and they are due for some updates anyway. Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/437#issuecomment-329078585:1749,inherit,inheritance,1749,https://su2code.github.io,https://github.com/su2code/SU2/issues/437#issuecomment-329078585,1,['inherit'],['inheritance']
Modifiability,s.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugin,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:18892,plugin,plugins,18892,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,s/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templat,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:19407,plugin,plugins,19407,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,s/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.hpp (0) ; - I SU2_CFD/include/numerics_machine_learning.inl (0) ; - I SU2_CFD/in,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20133,plugin,plugins,20133,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,s/types.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for sys/stat.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdlib.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for string.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; conf,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:10684,config,configure,10684,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,seSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D M,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14924,plugin,plugins,14924,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,seSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/api,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17526,plugin,plugins,17526,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,seSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (7,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17929,plugin,plugins,17929,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d - Mesh size coefficient %.1lf\n"" % (iSiz+1, len(mesh_sizes), mesh_size)); ; for iSub in range(nSub):; ; config_amg['size'] = mesh_size; config_amg['amg_log'] = 'ite%d.amg.stdout' % (global_iter); ; # Prints; pad_cpt = (""(%d/%d)"" % (iSub+1, nSub)).ljust(9); pad_nul = """".ljust(9); ; if not amg_python : ; ; #--- Load su2 mesh ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- If not using the amg python interface, convert the mesh and make system call; ; su2amg.write_mesh(""current.meshb"", ""current.solb"", mesh); ; if not os.path.exists(""current.solb""):; raise RuntimeError , ""\n##ERROR : Can't find solution.\n""; if not os.path.exists(""current.meshb""):; raise RuntimeError , ""\n##ERROR : Can't find mesh.\n""; ; #--- Get sensor; ; sensor = su2amg.create_sensor(mesh, adap_sensor); su2amg.write_solution(""current_sen",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7901,adapt,adaptation,7901,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['adapt'],['adaptation']
Modifiability,"setZero();. for(size_t iEdge=0; iEdge<nEdge; ++iEdge); {; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. for(size_t iVar=0; iVar<nVar; ++iVar); {; double phi_ave = 0.5*(phi(iPoint,iVar)+phi(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); {; double flux = phi_ave*area(iEdge,iDim);. grad(iPoint,iVar,iDim) += flux;; grad(jPoint,iVar,iDim) -= flux;; }; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; ```; This is more or less what SU2 does with minor differences on how the edges (`connectivity`) and area are stored, there is no vectorization nor easy way to make the loop parallel, this will be the reference for execution times. Suppose now that due to a perfect storm the number of variables is 4, here is how with a few pragmas we get gcc to vectorize:; ```C++; template<size_t nVar>; void computeGradients_impl(size_t nEdge,; size_t nPoint,; size_t nDim,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& area,; const vector<double>& volume,; const Matrix& phi,; VectorOfMatrix& grad); {; grad.setZero();. for(size_t iEdge=0; iEdge<nEdge; ++iEdge); {; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. double phi_ave[nVar];. #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); phi_ave[iVar] = 0.5*(phi(iPoint,iVar)+phi(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); {; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; double flux = phi_ave[iVar]*area(iEdge,iDim);. grad(iPoint,iVar,iDim) += flux;; grad(jPoint,iVar,iDim) -= flux;; }; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); for(size_t iDim=0; iDim<nDim; ++iDim); #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; ```; Well it is not just a few pragmas, we need to make the number of variables known at compile time (via a t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:1719,variab,variables,1719,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['variab'],['variables']
Modifiability,"st machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/home/tjim/anaconda3/envs/sound/bin/python); Run-time dependency MPI for c found: YES 4.0.3; Run-time dependency MPI for cpp found: YES 4.0.3; WARNING: Use the 'pic' kwarg instead of passing '-fpic' manually to 'meshb7'; Message: Boost sources found.; Run-time dependency mkl-static-lp64-seq found: YES 2020 Update 4; Program swig found: YES (/home/tjim/anaconda3/envs/sound/bin/swig); Message: Using mpi4py from /home/tjim/anaconda3/envs/sound/lib/python3.7/site-packages/mpi4py/include; Run-time dependency python3 found: YES 3.6; Program install.sh found: YES (/bin/sh /opt/su2/SU2_src/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.3 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: true; OpenBlas: false; PaStiX: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=/opt/su2/SU2v7_adap/bin; export SU2_HOME=/opt/su2/SU2_src; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. Use './ninja -C build install' to compile and install SU2. Build targets in project: 19; Found ninja-1.10.0.git at /opt/su2/SU2_src/ninja; ```; Where the `Run-time dependency python3` is reported as the system v3.6 whereas I'm running 3.7.8. Could it be that amg was installed into the system python? But before running meson, I had activated my python conda environment and mpi4py seems to be picked up from the right one. I'm just not sure why it also finds 3.6.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-751431778:2433,Config,Configuration,2433,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-751431778,1,['Config'],['Configuration']
Modifiability,"still under testing, so I can't guarantee the result if the numerical scheme or the other options are changed. Which configuration file would you want?; > > By any chance, are you implementing or developing a transition model? Can you tell me what model you are willing to use if it's a model implementation? My next goal is to implement the AFT model or the k-w-gamma model, but I'm trying to implement a k-w-gamma model because it seems like the AFT model is being implemented by the other developer.; > ; > If you could send me the config files for the T3A, T3A- and NLF test cases it would be awesome!; > ; > I have implemented the same model as yours, the LM model, in parallel to you 'cause I needed it for some simulations. I also tried implementing the same version but related to the SA turbulence model, however it still is bothering me that I cannot seem to get good results on it.; > ; > If you want, I also tried the prolate spheroid test-case with good results. If you need I can give the configs and the meshes. The only thing about this test-case is that it is more related to the cross-flow transition, thus it needs to be implemented, which I think I'll do in these days.; > ; > I think that the k-w-gamma model is the way to go right after the implementation of the LM model since it has lots of equations in common. Do you think that you need another class for it or you will write on the same classes that you have already built (like the CTransLMSolver)?. The test case(T3A, T3A-, and NLF-0416) configuration files were uploaded to my git repository. Here is the [link](https://github.com/sun5k/SU2/tree/develop/TestCases/transition ). Suggestions for the prolate spheroid test-case is appreciated. However, my transition model is the LM-2009, and I have no plans for the 2015-LM model. Therefore, the cross-flow transition is left for future developers. I think the CTransGammaSolver, CTransGSolver, or the other name of classes will be added for the k-w-gamma transition model.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1201919830:1270,config,configs,1270,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1201919830,1,['config'],['configs']
Modifiability,su2code/SU2/pull/814/files#diff-2> (143); * A SU2_DEF/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-3> (13); * A SU2_DOT/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-4> (25); * A SU2_GEO/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-5> (9); * A SU2_MSH/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-6> (8); * A SU2_PY/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-7> (24); * A SU2_PY/pySU2/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-8> (62); * A SU2_SOL/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-9> (12); * A cmake-format.yaml<https://github.com/su2code/SU2/pull/814/files#diff-10> (40); * A cmake/CheckLinkerFlag.cmake<https://github.com/su2code/SU2/pull/814/files#diff-11> (70); * A cmake/ConfigureCGNS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-12> (11); * A cmake/ConfigureCLI11.cmake<https://github.com/su2code/SU2/pull/814/files#diff-13> (2); * A cmake/ConfigureCodi.cmake<https://github.com/su2code/SU2/pull/814/files#diff-14> (87); * A cmake/ConfigureExternals.cmake<https://github.com/su2code/SU2/pull/814/files#diff-15> (26); * A cmake/ConfigureMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-16> (16); * A cmake/ConfigureMPI.cmake<https://github.com/su2code/SU2/pull/814/files#diff-17> (12); * A cmake/ConfigureMetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-18> (12); * A cmake/ConfigureMutationpp.cmake<https://github.com/su2code/SU2/pull/814/files#diff-19> (12); * A cmake/ConfigureParmetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-20> (15); * A cmake/ConfigureTecio.cmake<https://github.com/su2code/SU2/pull/814/files#diff-21> (18); * A cmake/ConfigureThreads.cmake<https://github.com/su2code/SU2/pull/814/files#diff-22> (12); * A cmake/FindMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-23> (318); * A cmake/FindMPI4PY.cmake<https://github.com/su2code/SU2/pull/814/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:5514,Config,ConfigureCodi,5514,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,1,['Config'],['ConfigureCodi']
Modifiability,"sult: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 Developers: |; | - Prof. Juan J. Alonso's group at Stanford University. |; | - Prof. Piero Colonna's group at Delft University of Technology. |; | - Prof. Nicolas R. Gauger's group at Kaiserslautern U. of Technology. |; | - Prof. Alberto Guardone's group at Polytechnic University of Milan. |; | - Prof. Rafael Palacios' group at Imperial College London. |; -------------------------------------------------------------------------; | Copyr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16627,config,config,16627,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"t --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3999: $? = 0; configure:3988: gcc -V >&5; gcc: '-V' option must have argument; configure:3999: $? = 1; configure:3988: gcc -qversion >&5; gcc: unrecognized option '-qversion'; gcc: no input files; configure:3999: $? = 1; configure:4003: checking whether we are using the GNU C compiler; configure:4022: gcc -c conftest.c >&5; configure:4022: $? = 0; configure:4031: result: yes; configure:4040: checking whether gcc accepts -g; configure:4060: gcc -c -g conftest.c >&5; configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conftest.c -o conftest2.o >&5; configure:4380: $? = 0; configure:4386: gcc -c conftest.c -o conftest2.o >&5; configure:4390: $? = 0; configure:4401: cc -c conftest.c >&5; configure:4405: $? = 0; configure:4413: cc -c conftest.c -o conftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:7049,config,configure,7049,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"t changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5454,config,config,5454,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"t have argument; configure:3999: $? = 1; configure:3988: gcc -qversion >&5; gcc: unrecognized option '-qversion'; gcc: no input files; configure:3999: $? = 1; configure:4003: checking whether we are using the GNU C compiler; configure:4022: gcc -c conftest.c >&5; configure:4022: $? = 0; configure:4031: result: yes; configure:4040: checking whether gcc accepts -g; configure:4060: gcc -c -g conftest.c >&5; configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conftest.c -o conftest2.o >&5; configure:4380: $? = 0; configure:4386: gcc -c conftest.c -o conftest2.o >&5; configure:4390: $? = 0; configure:4401: cc -c conftest.c >&5; configure:4405: $? = 0; configure:4413: cc -c conftest.c -o conftest2.o >&5; configure:4417: $? = 0; configure:4423: cc -c conftest.c -o conftest2.o >&5; configure:4427: $? = 0; configure:4445: result: yes; configure:4513: checking for ranlib; configure:4529: found /usr/bin/ranlib; configure:4540: result: ranlib; configure:4574: checking how to run the C preprocessor; configure:4605: gcc -E conftest.c; configure:4605: $? = 0; configure:4619: gcc -E conftest.c; conftest.c:11:28: error: ac_nonexistent.h: No such file or directory; configure:4619: $? = 1; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""SU2""; | #define PACKAGE_TARNAME ""SU2""; | #define PACKAGE_VERSION ""4.1.0""; | #define PACKAGE_STRING ""SU2 4.1.0""; | #define PACKAGE_BUGREPORT ""su2code-dev@lists.stanford.edu""; | #define PACKAGE_URL ""https://github.com/su2code""; | #define PACKAGE ""SU2""; | #define VERSION ""4.1.0""; | /* end confdefs.h. */; | #include <ac_nonexistent.h>; configure:4644: result: gcc -E; configure:4664: gcc -E ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:7617,config,configure,7617,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,4,['config'],['configure']
Modifiability,"t means pyamg was not correctly installed; otherwise it is in fact installed. In the latter case, you can check if your python is configured to enable shared libraries. To do it, according to [this](https://stackoverflow.com/questions/23201498/how-to-check-if-python3-was-built-with-enable-shared), in the python shell you can type ; `import sysconfig`; `sysconfig.get_config_vars('Py_ENABLE_SHARED')`; If the result is `[0]`, ie ""False"", you have to build python with the option `--enable-shared`. ; Now, I don't know how to do accomplish that with conda, but with [pyenv](https://github.com/pyenv/pyenv) it involves installing the desired python version with `CONFIGURE_OPTS=--enable-shared pyenv install <version>`. To recap, a ""workflow for newbies"" which appears to be working for me is. 1. install pyenv either from [source](https://github.com/pyenv/pyenv#installation) or from your distibution repositories, if available. IMPORTANT: make sure the environment variables are correctly set and `pyenv init` is added to your shell, as per the installation instructions.; 2. install the desired python version (for example 3.7.8), enabling shared libraries: ; `CONFIGURE_OPTS=--enable-shared pyenv install 3.7.8`; 3. clone/download the [feature_adap](https://github.com/su2code/SU2/tree/feature_adap) branch of SU2;; 4. in the SU2 folder, configure meson ; `./meson.py build` ; and make sure to update the environment variables in your `.bashrc` as indicated by meson's output.; 5. use ninja to build and install SU2 ; `./ninja -C build install`;; if you run into a permission error, specify an installation directory passing the `--prefix` option to meson, as explained [here](https://www.cfd-online.com/Forums/su2-installation/227676-su-installation-failed-due-insufficient-permissions.html). These passages, at least for me, result in a running SU2 with mesh adaptation, although I have made no tests on running actual simulations. That being said, the involvement of pyenv is due to the fact th",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-751823130:1258,variab,variables,1258,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-751823130,1,['variab'],['variables']
Modifiability,"t(1). def amg ( config , kind='' ):; ; sys.stdout.write(""SU2-AMG Anisotropic Mesh Adaptation\n""); ; #--- TODO: Check pyamg version compatibility; ; #--- Check config options related to mesh adaptation; ; adap_options = ['ADAP_SIZES', 'ADAP_SUBITE', 'ADAP_SENSOR', \; 'ADAP_BACK', 'ADAP_HMAX', 'ADAP_HMIN', 'ADAP_HGRAD', 'ADAP_RESIDUAL_REDUCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.s",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:3474,config,config,3474,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,te.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.c (290) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEPUtils.h (725) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/runtimeWrite.h (57) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.c (492) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWGM/apiGridModel.h (1808) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.c (132) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWP.h (707) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.c (789) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/s,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:18965,plugin,plugins,18965,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"testcase suite. > * Should this just run ""out of the box"" with a working installation of OpenMP in any machine, or is there anything else _fancy_ needed?. I would leave it to the community to decide what the defaults should be, probably for a lot of new users that don't run on clusters just calling SU2_CFD and not having to worry about mpi would be nice (a lot of the issues on CFD online are mpi related). > * Is the previous behaviour exactly kept, or are there any modifications in the basic, non OpenMP version of code? (Not that I mind, just curious). Other than the algorithmic changes (but mathematically equivalent) introduced to limiters and gradients in #834, yes. > What's the advantage of having one numerics term per thread?. It is a requirement, we need to write data into numerics before using them, multiple threads cannot write to the same location (i.e. the internal structures of CNumerics) therefore one per thread is required. > ...Also, I think I missed the point where the numerics container is extended beyond MAX_TERMS. The allocation of space for one numerics per thread is done above in line 1995 of my 21 Dec 2019 comment: `...MAX_TERMS*omp_get_max_threads()...`.; The instantiation of one numerics per thread is then done by executing the rest of the preprocessing in parallel and instead of using `XYZ_TERM` using `XYZ_TERM+offset` where `offset = thread_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could revisit the ownership relations of the numerics classes, i.e. allocate them as members of their respective solvers, which if we do, we can think of having a purpose built container that automates the per-thread creation and access. > Why are they redefined each time inside the loop?; > Is this for efficiency reasons?. Referring to variables being declared inside loops. One stylist reason is that declaring everything at the top of a function is the C way of doing things, the C++ people whose books/blogs I've read and talks I've watche",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:1558,extend,extended,1558,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['extend'],['extended']
Modifiability,"the desired python version with `CONFIGURE_OPTS=--enable-shared pyenv install <version>`. To recap, a ""workflow for newbies"" which appears to be working for me is. 1. install pyenv either from [source](https://github.com/pyenv/pyenv#installation) or from your distibution repositories, if available. IMPORTANT: make sure the environment variables are correctly set and `pyenv init` is added to your shell, as per the installation instructions.; 2. install the desired python version (for example 3.7.8), enabling shared libraries: ; `CONFIGURE_OPTS=--enable-shared pyenv install 3.7.8`; 3. clone/download the [feature_adap](https://github.com/su2code/SU2/tree/feature_adap) branch of SU2;; 4. in the SU2 folder, configure meson ; `./meson.py build` ; and make sure to update the environment variables in your `.bashrc` as indicated by meson's output.; 5. use ninja to build and install SU2 ; `./ninja -C build install`;; if you run into a permission error, specify an installation directory passing the `--prefix` option to meson, as explained [here](https://www.cfd-online.com/Forums/su2-installation/227676-su-installation-failed-due-insufficient-permissions.html). These passages, at least for me, result in a running SU2 with mesh adaptation, although I have made no tests on running actual simulations. That being said, the involvement of pyenv is due to the fact that the provided python wheel for pyamg is for python 3.7 only. If I understand correctly, the library itself is proprietary, sadly, so I assume @bmunguia has access either to the source files or to someone who can package them. Depending on the actual compatibility of the code, it would be nice if the wheel was updated to the latest python version, or at least the dependency on 3.7.* was removed. . @chesiv you can also try checking the logs in the `log.err` and `log.out` files to see if anything has gone wrong. Keep in mind all SU2 output is redirected to them, so you might not get any useful information on your terminal.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-751823130:2156,adapt,adaptation,2156,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-751823130,1,['adapt'],['adaptation']
Modifiability,"the primitive-container-indexing that took place in #1392 because when I revert to commit fe6ba90aab388ed6d9ff77fa3cb03434fe86654c right before that merge took place everything works fine. Maybe I also did a mistake when porting the CSpeciesSolver to that new structure. I am trying to do a verification of the inlet files by using the written example_inlet_file as input which should result in the very same history as the non-inlet version. I see a difference in Residuals which is sometimes not consistent (I had cases where I cycled through 3 different outcomes for the inlet version in a random order...wtf). It has nothing to do with the wrong values being read in and made available to the Solver, they are perfect. I now did 2 full-time days of debugging and I a don't get it. I have traced the problem down quite a bit and know which code lines I have to comment to make the problem go away ... but it doesnt make sense: I am not allowed (I can, but then I have non-equal diffs) to write anything (but zero!) in certain blocks of the local variable `profileData` in `CMarkerProfileReader`. That is only the case for more than 1 species equation! I also overwrote the `Inlet_Species_Var` using the `SetUnformInlet` which just takes the cfg-Marker values. . It seems to be some memory-problem and valgrind trys to speak to me but can only point me to the constructor of the Avg_GradSpecies for the volume in CDriver and tells me about a `Conditional jump or move depends on uninitialised value(s)` in `CSysSolve.cpp:131`; ```c++; if ((nrm <= 0.0) || (nrm != nrm)) {; ```; and is supposed to originate from `CDriver.cpp:1366` via a `Uninitialised value was created by a heap allocation`; ```c++; numerics[iMGlevel][SPECIES_SOL][visc_term] = new CAvgGrad_Species<Indices>(nDim, nVar_Species, true, config);; ```; ```c++; 338 --139924-- REDIR: 0x53dc330 (libstdc++.so.6:operator new[](unsigned long)) redirected to 0x4c2a801 (operator new[](unsigned long)); 339 --139924-- REDIR: 0x53da3e0 (libstd",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1388#issuecomment-968058603:1159,variab,variable,1159,https://su2code.github.io,https://github.com/su2code/SU2/pull/1388#issuecomment-968058603,1,['variab'],['variable']
Modifiability,"ther |; | version 2.1 of the License, or (at your option) any later version. |; | |; | SU2 is distributed in the hope that it will be useful, |; | but WITHOUT ANY WARRANTY; without even the implied warranty of |; | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU |; | Lesser General Public License for more details. |; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. ------------------------ Physical Case Definition -----------------------; Input mesh file name: mesh_NACA0012_inv.su2. -------------------------- Output Information ---------------------------; The output file format is Tecplot ASCII (.dat).; Flow variables file name: flow. ------------------- Config File Boundary Information --------------------; +-----------------------------------------+; | Marker Type| Marker Name|; +-----------------------------------------+; | Euler wall| airfoil|; +-----------------------------------------+; | Far-field| farfield|; +-----------------------------------------+. ---------------------- Read Grid File Information -----------------------; Two dimensional problem.; 5233 points before parallel partitioning.; Performing linear partitioning of the grid nodes.; 10216 interior elements before parallel partitioning.; Executing the partitioning functions.; Building the graph adjacency structure.; Distributing elements across all ranks.; 2 surface markers.; +------------------------------------+; | Index| Marker| Elements|; +------------------------------------+; | 0| airfoil| 200|; | 1| farfield| 50|; +------------------------------------+; Calling ParMETIS... graph partitioning complete (1114 edge cuts).; Distributing ParMETIS coloring.; Rebalancing vertices.; Rebalancing volume element connectivity.; Rebalancing markers and surface elements.; 6403 vertices including ghost points. ; 11338 ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-514630913:2743,Config,Config,2743,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-514630913,1,['Config'],['Config']
Modifiability,"ther |; | version 2.1 of the License, or (at your option) any later version. |; | |; | SU2 is distributed in the hope that it will be useful, |; | but WITHOUT ANY WARRANTY; without even the implied warranty of |; | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU |; | Lesser General Public License for more details. |; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. ------------------------ Physical Case Definition -----------------------; Input mesh file name: mesh_NACA0012_inv.su2. -------------------------- Output Information ---------------------------; The output file format is Tecplot ASCII (.dat).; Flow variables file name: flow. ------------------- Config File Boundary Information --------------------; +-----------------------------------------+; | Marker Type| Marker Name|; +-----------------------------------------+; | Euler wall| airfoil|; +-----------------------------------------+; | Far-field| farfield|; +-----------------------------------------+. ---------------------- Read Grid File Information -----------------------; Two dimensional problem.; 5233 points.; 2 surface markers.; +------------------------------------+; | Index| Marker| Elements|; +------------------------------------+; | 0| airfoil| 200|; | 1| farfield| 50|; +------------------------------------+; 10216 triangles.; Identify vertices.; Storing a mapping from global to local point index. ------------------------- Solution Postprocessing -----------------------. Error in ""void CBaselineSolver::SetOutputVariables(CGeometry*, CConfig*)"": ; -------------------------------------------------------------------------; Unable to open SU2 restart file solution_flow.dat; ------------------------------ Error Exit -------------------------------. -------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-514653545:2740,Config,Config,2740,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-514653545,1,['Config'],['Config']
Modifiability,"thing to do. So let‚Äôs indeed do something like what Tom suggests (in the spirit of MARKER_MONITORING) so that one can control which markers get wall functions applied. If a list of markers is not specified in the config file, the default behavior should be that all no-slip walls get wall function BCs. If a list of markers is specified, then those and only those markers listed get wall function Bfs (with the others getting integration to the wall treatment). Now, what you point out in the second half of your message is the ultimate in flexibility: not only specifying wall functions in a subset of the no-slip wall markers, but also allowing for different kinds of wall functions to be used in those markers. I imagine that this would be a seldom used capability‚Ä¶but someone out there might have the need. I guess it does not seem to me that the coding of the most flexible logic is that much more complicated, so we may as well do that. If you guys think it is too complicated, the advertised options in the config file can allow some simpler behavior. My two cents,. Juan. On Sep 5, 2017, at 9:58 PM, Edwin van der Weide <notifications@github.com<mailto:notifications@github.com>> wrote:. Juan,. I think that having the flexibility to apply wall functions on only a subset of the viscous wall boundaries would be useful. E.g., if you are interested in a wing, you can apply integration to the wall there, but apply wall functions on the fuselage. My preference would be to have a dedicated BC type for that, i.e. Tom's second suggestion. Apart from this, we can have the different wall model types as a single input parameter, i.e. you apply the same wall model type for all viscous boundaries. Or would you like to have the flexibility to specify this as well per individual marker?. Edwin. ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/399#issuecomment-327374728>, or mute the thread<https://github.co",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-327377108:1344,config,config,1344,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-327377108,2,['config'],['config']
Modifiability,"tial mesh, solution; ; required_files = [current_mesh,current_solution]; ; if not all (os.path.exists(fil) for fil in required_files):; err = '\n\n## ERROR : Can\'t find:\n'; for fil in required_files:; if not os.path.exists(fil):; err += fil + '\n'; raise RuntimeError , err; ; #--- Start looping; ; # Get mesh dimension; dim = su2amg.get_su2_dim(current_mesh); if ( dim != 2 and dim != 3 ):; raise RuntimeError , ""Wrong dimension number\n""; ; #--- AMG parameters; ; config_amg = dict(); ; config_amg['hgrad'] = float(config['ADAP_HGRAD']); config_amg['hmax'] = float(config['ADAP_HMAX']); config_amg['hmin'] = float(config['ADAP_HMIN']); config_amg['mesh_in'] = 'current.meshb'; config_amg['mesh_out'] = 'current.new.meshb'; config_amg['metric_in'] = ''; config_amg['sol_in'] = 'current_sensor.solb'; config_amg['itp_sol_in'] = 'current.solb'; config_amg['adap_source'] = ''; ; if 'ADAP_BACK' in config:; config_amg['adap_back'] = os.path.join(cwd,config['ADAP_BACK']); #os.symlink(os.path.join(cwd, config.ADAP_BACK), config.ADAP_BACK); else:; config_amg['adap_back'] = config['MESH_FILENAME']; ; print ""config_amg : "" + config_amg['adap_back']; back_name, back_extension = os.path.splitext(config_amg['adap_back']); ; if not os.path.exists(config_amg['adap_back']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d - Mesh size coefficient %.1lf\n"" % (iSiz+1,",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:7112,config,config,7112,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,trXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plug,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:15308,plugin,plugins,15308,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ts in config_structure to make doxygen pretty; - Bug fixing; - Merge branch 'develop'; - EA in ft^2; - further update to config; - Merge remote-tracking branch 'upstream/develop' into upstream_dev; - Minor changes; - Updated NF BC; - More adjustments; - Small update; - Final update Nearfield BC; - added massflowrate as option for cauchy criteria, more config file comments; - Merge remote-tracking branch 'upstream/develop' into upstream_dev; - paraview output modified/added back in for current version for SU2_DEF; - Merge branch 'develop' into feature_dualoutput; - Removed deprecated options from quicstart config.; - Working version of the compressible actuator disk; - Updated fixed CL mode.; - Very minor change; - Merge branch 'develop' into feature_dualoutput; - Final push to 3.2.9; - Merge branch 'develop'; - Minor change; - Minor change; - Small change; - Minor change; - Bug fixing: unsigned short val_vertex --> unsigned long val_vertex; - CFL adapt now works for adjoint problems; - Merge branch 'develop' into feature_dualoutput; - Fixing a typo; - Fix in the Euler BC for grid movement cases; - merging and fixing conflicts bwtn feature_dealloc and develop; - dealloc; - Time spectral fix.; - Merging some recent bug fixes from master into the develop branch to keep nsync.; - Merge branch 'feature_gridvel_fix' into develop; - Merge remote-tracking branch 'upstream/develop' into feature_Deallocation; - correcting issues, adding more deallocation; - fixed uninitialized pointers in CConfig; - further deallocation; - some corrections needed to pass reg tests; - fixed some dealloc issues that caused errors in euler adj; - modifications needed to (mostly) pass reg tests; all run w/o segfault. File Changes; - D Articles/AIAA_2013-0287.pdf (0) ; - D Articles/AIAA_2014-0243.pdf (0) ; - M Common/doc/docmain.hpp (46) ; - M Common/include/config_structure.hpp (1038) ; - M Common/include/config_structure.inl (191) ; - M Common/include/dual_grid_structure.hpp (43) ; - M Common/inc",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:9856,adapt,adapt,9856,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['adapt'],['adapt']
Modifiability,twiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (7,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14441,plugin,plugins,14441,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,twiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.xslt (232) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Minus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport_Plus.gif (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/module.mk (240) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/C,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:16376,plugin,plugins,16376,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,twiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plugin/src/plugins/pluginRegistry.h (29) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.c (228) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/apiCAEP.h (550) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/CAEP/a,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17446,plugin,plugins,17446,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ty check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or nativ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5732,config,config,5732,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['config'],['config']
Modifiability,"ty; ; #--- Check config options related to mesh adaptation; ; adap_options = ['ADAP_SIZES', 'ADAP_SUBITE', 'ADAP_SENSOR', \; 'ADAP_BACK', 'ADAP_HMAX', 'ADAP_HMIN', 'ADAP_HGRAD', 'ADAP_RESIDUAL_REDUCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsistent number of mesh sizes and sub-iterations'; ; #--- Use the python interface to amg, or the executable?; ; amg_python = su2amg.get_python_amg(config); ; #--- Change current directory; ; warn = False; adap_dir = './ADAP'; cwd = os.getcwd(); ; if os.path.exists(adap_dir):; sys.stdout.write('./ADAP exists. Removing old mesh adaptation in 10s.\n'); sys.stdout.flush(); if warn : time.sleep(10); shutil.rmtree(adap_dir); ; os.makedirs(adap_dir); os.chdir(adap_dir); sys.stdout.write('The %s folder was deleted\n' % adap_dir); ; os.symlink(os.path.join(cwd, config.MESH_FILENAME), config.MESH_FILENAME); os.symlink(os.path.join(cwd, config.SOLUTION_FLOW_FILENAME), config.SOLUTION_FLOW_FILENAME); ; #--- Compute initial solution if needed, else link ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:3661,config,config,3661,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['config'],['config']
Modifiability,ub.com/su2code/SU2/pull/814/files#diff-0> (147); * A Common/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-1> (149); * A SU2_CFD/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-2> (143); * A SU2_DEF/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-3> (13); * A SU2_DOT/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-4> (25); * A SU2_GEO/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-5> (9); * A SU2_MSH/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-6> (8); * A SU2_PY/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-7> (24); * A SU2_PY/pySU2/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-8> (62); * A SU2_SOL/CMakeLists.txt<https://github.com/su2code/SU2/pull/814/files#diff-9> (12); * A cmake-format.yaml<https://github.com/su2code/SU2/pull/814/files#diff-10> (40); * A cmake/CheckLinkerFlag.cmake<https://github.com/su2code/SU2/pull/814/files#diff-11> (70); * A cmake/ConfigureCGNS.cmake<https://github.com/su2code/SU2/pull/814/files#diff-12> (11); * A cmake/ConfigureCLI11.cmake<https://github.com/su2code/SU2/pull/814/files#diff-13> (2); * A cmake/ConfigureCodi.cmake<https://github.com/su2code/SU2/pull/814/files#diff-14> (87); * A cmake/ConfigureExternals.cmake<https://github.com/su2code/SU2/pull/814/files#diff-15> (26); * A cmake/ConfigureMKL.cmake<https://github.com/su2code/SU2/pull/814/files#diff-16> (16); * A cmake/ConfigureMPI.cmake<https://github.com/su2code/SU2/pull/814/files#diff-17> (12); * A cmake/ConfigureMetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-18> (12); * A cmake/ConfigureMutationpp.cmake<https://github.com/su2code/SU2/pull/814/files#diff-19> (12); * A cmake/ConfigureParmetis.cmake<https://github.com/su2code/SU2/pull/814/files#diff-20> (15); * A cmake/ConfigureTecio.cmake<https://github.com/su2code/SU2/pull/814/files#diff-21> (18); * A cmake/ConfigureThreads.cmake<https://github.com/su2code/SU2/,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/814#issuecomment-552242380:5332,Config,ConfigureCGNS,5332,https://su2code.github.io,https://github.com/su2code/SU2/pull/814#issuecomment-552242380,1,['Config'],['ConfigureCGNS']
Modifiability,"uction and performance.; b. I think it is important to start the validation project, create a link; from the main SU2 web page to it, and than let it grow with the existing; mechanism of community contributions with approvals. Your list is very fine; for beginning. However I think we should strive to enrich it with 3D and; time dependent cases. I hope to be able to be in the loop and contribute to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familiar with canonical CFD flows that are used in these cases. But it; > would be great to have other cases, such as Turbo-machinary or FSI cases,; > that show the full breadth of SU2's abilities. This is by no means an; > exhaustive list:; >; > 1. Zero Gradient Flat Plate; > 2. 2D and 3D Bump in Channel; > 3. Asymmetric Dif",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:1284,config,configuration,1284,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,1,['config'],['configuration']
Modifiability,"ude'; C compiler for the host machine: /home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-gcc (gcc 7.3.0 ""x86_64-conda_cos6-linux-gnu-gcc (crosstool-NG 1.23.0.449-a04d0) 7.3.0""); C linker for the host machine: /home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-gcc ld.bfd 2.33.1; Using 'AR' from environment with value: '/home/user/anaconda3/bin/x86_64-conda_cos6-linux-gnu-ar'; Using 'LDFLAGS' from environment with value: '-Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,--gc-sections -Wl,-rpath,/home/user/anaconda3/lib -Wl,-rpath-link,/home/user/anaconda3/lib -L/home/user/anaconda3/lib'; Using 'CPPFLAGS' from environment with value: '-DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/user/anaconda3/include'; C++ compiler for the host machine: c++ (gcc 4.8.5 ""c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)""); C++ linker for the host machine: c++ ld.bfd 2.27-27; Host machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/home/user/anaconda3/bin/python3); Found pkg-config: /home/user/anaconda3/bin/pkg-config (0.29.2); /work/A/openmpi/3.0.0_intel2018u2/bin/mpicc found: YES (/work/A/openmpi/3.0.0_intel2018u2/bin/mpicc) 3.0.0; Run-time dependency MPI for c found: YES 3.0.0; /work/A/openmpi/3.0.0_intel2018u2/bin/mpicxx found: YES (/work/A/openmpi/3.0.0_intel2018u2/bin/mpicxx) 3.0.0; Run-time dependency MPI for cpp found: YES 3.0.0; Message: Boost sources found.; Program swig found: YES (/home/user/anaconda3/bin/swig); Message: Using mpi4py from /home/user/anaconda3/lib/python3.7/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/user/programs/su2/SU2_src/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.8 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; --------------------------------------------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1134#issuecomment-744491311:3909,config,config,3909,https://su2code.github.io,https://github.com/su2code/SU2/issues/1134#issuecomment-744491311,2,['config'],['config']
Modifiability,"uded but aren't on the `LD_LIBRARY_PATH` by default, so one has to export first. (I'm not sure if this is really a great workaround since the whole Python environment lib directory is now in the path, but it seems to work for now.). I'm getting an issue now where the script seems to crash while `Running initial CFD solution`:. ```; (test_env) tim@super:/work/projects/mesh_adapt_testing/A000i_adap/2_cfd$ LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH SU2_MPI_COMMAND=""mpirun --use-hwthread-cpus -n %i %s"" python /opt/su2/SU2v7_adap/bin/mesh_adaptation_amg.py -f inv_test.cfg -n 40 > mesh_adapt.out; ## WARNING: MISSING SU2 MESH FILE KEYWORD: NCORNERS=.; Traceback (most recent call last):; File ""/opt/su2/SU2v7_adap/bin/mesh_adaptation_amg.py"", line 112, in <module>; main(); File ""/opt/su2/SU2v7_adap/bin/mesh_adaptation_amg.py"", line 73, in main; options.save_all ); File ""/opt/su2/SU2v7_adap/bin/mesh_adaptation_amg.py"", line 102, in mesh_adaptation_amg; SU2.run.amg(config); File ""/opt/su2/SU2v7_adap/bin/SU2/run/amg.py"", line 220, in amg; SU2_CFD(config_cfd); File ""/opt/su2/SU2v7_adap/bin/SU2/run/interface.py"", line 112, in CFD; run_command( the_Command ); File ""/opt/su2/SU2v7_adap/bin/SU2/run/interface.py"", line 292, in run_command; raise exception(message); RuntimeError: Path = /work/projects/mesh_adapt_testing/A000i_adap/2_cfd/adap/ini/,; Command = mpirun --use-hwthread-cpus -n 40 /opt/su2/SU2v7_adap/bin/SU2_CFD config_CFD.cfg; SU2 process returned error '254'; cmap[28922] == -1; cmap[28853] == -1; cmap[28858] == -1; cmap[28966] == -1; cmap[28989] == -1; cmap[28943] == -1; cmap[28915] == -1; cmap[28950] == -1; cmap[28923] == -1; cmap[28871] == -1; cmap[28941] == -1; cmap[28887] == -1; cmap[28889] == -1; cmap[37] == -1; cmap[32342] == -1; cmap[24652] == -1; cmap[50507] == -1; cmap[51850] == -1; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, th",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754504570:1139,config,config,1139,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754504570,1,['config'],['config']
Modifiability,ugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.suo (0) ; - D MeshTools/PointwiseSU2plugin/depend.sh (28) ; - D MeshTools/PointwiseSU2plugin/mkplugin (10) ; - D MeshTools/PointwiseSU2plugin/mkplugin.bat (82) ; - D MeshTools/PointwiseSU2plugin/mkplugin.tcl (422) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win32Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.props (28) ; - D MeshTools/PointwiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14200,plugin,plugins,14200,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,ugins/shared/PWP/apiPWPUtils.h (1030) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/apiUtils.h (174) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/shared/PWP/pwpPlatform.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/site.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/structured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/CaeTemplate.vcproj (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/module.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/modulelocal-sample.mk (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepInstanceData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/rtCaepSupportData.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/CAEP/runtimeWrite.c (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpInitItems.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpPluginInfo.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/templates/PWP/rtPwpVersions.h (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.props (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/unstructured.vsprops (0) ; - D MeshTools/PointwiseSU2plugin_Instructions.txt (0) ; - I QuickStart/inv_NACA0012.cfg (0) ; - I README (0) ; - I SU2_CFD/include/SU2_CFD.hpp (0) ; - I SU2_CFD/include/definition_structure.hpp (0) ; - I SU2_CFD/include/fluid_model.hpp (0) ; - I SU2_CFD/include/fluid_model.inl (0) ; - I SU2_CFD/include/integration_structure.hpp (0) ; - I SU2_CFD/include/integration_structure.inl (0) ; - I SU2_CFD/include/iteration_structure.hpp (0) ; - I SU2_CFD/include/numerics_machine_learn,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:20047,plugin,plugins,20047,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,"ult: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3999: $? = 0; configure:3988: gcc -V >&5; gcc: '-V' option must have argument; configure:3999: $? = 1; configure:3988: gcc -qversion >&5; gcc: unrecognized option '-qversion'; gcc: no input files; configure:3999: $? = 1; configure:4003: checking whether we are using the GNU C compiler; co",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:5816,config,configure,5816,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['configure']
Modifiability,"un-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: false; PaStiX: false; Mixed Float: false",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:7892,config,config,7892,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['config'],"['config', 'config-lite-']"
Modifiability,"ure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of object files; configure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --wit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:4824,config,configure,4824,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"ure:3568: g++ -c conftest.cpp >&5; configure:3572: $? = 0; configure:3593: result: o; configure:3597: checking whether we are using the GNU C++ compiler; configure:3616: g++ -c conftest.cpp >&5; configure:3616: $? = 0; configure:3625: result: yes; configure:3634: checking whether g++ accepts -g; configure:3654: g++ -c -g conftest.cpp >&5; configure:3654: $? = 0; configure:3695: result: yes; configure:3720: checking dependency style of g++; configure:3831: result: gcc3; configure:3921: checking for gcc; configure:3937: found /usr/bin/gcc; configure:3948: result: gcc; configure:3979: checking for C compiler version; configure:3988: gcc --version >&5; gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3999: $? = 0; configure:3988: gcc -V >&5; gcc: '-V' option must have argument; configure:3999: $? = 1; configure:3988: gcc -qversion >&5; gcc: unrecognized option '-qversion'; gcc: no input files; configure:3999",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:5796,Config,Configured,5796,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,1,['Config'],['Configured']
Modifiability,ure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for memory.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for strings.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for inttypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $? = 0; configure:5140: ./conftest; configure:5140: $? = 0; configure:5154: result: 8; configure:516,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:11072,config,configure,11072,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"ure:5409: result: no; configure:5409: checking for X11/Intrinsic.h; configure:5409: result: no; configure:5721: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/lib/libcgns.a; configure:5735: result: yes; configure:5755: checking for /gshare/soft/code_saturne/4.0.0/prod/cgnslib_3.2.1/include/cgnslib.h; configure:5769: result: yes; configure:6815: checking that generated files are newer than configure; configure:6821: result: done; configure:6952: creating ./config.status. ## ---------------------- ##; ## Running config.status. ##; ## ---------------------- ##. This file was extended by SU2 config.status 4.1.0, which was; generated by GNU Autoconf 2.69. Invocation command line was. CONFIG_FILES = ; CONFIG_HEADERS = ; CONFIG_LINKS = ; CONFIG_COMMANDS = ; $ ./config.status . on master. config.status:875: creating externals/tecio/Makefile; config.status:875: creating externals/metis/Makefile; config.status:875: creating externals/parmetis/Makefile; config.status:875: creating Makefile; config.status:875: creating externals/Makefile; config.status:875: creating Common/lib/Makefile; config.status:875: creating SU2_CFD/obj/Makefile; config.status:875: creating SU2_DOT/obj/Makefile; config.status:875: creating SU2_MSH/obj/Makefile; config.status:875: creating SU2_DEF/obj/Makefile; config.status:875: creating SU2_SOL/obj/Makefile; config.status:875: creating SU2_GEO/obj/Makefile; config.status:875: creating SU2_PY/Makefile; config.status:1047: executing depfiles commands; configure:8181: result:. -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 4.1.0 'Cardinal' |; | \__ \ |_| |/ / |; | |___/\___//___| Suite |; | |; -------------------------------------------------------------------------; | SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|; | Dr. Thomas D. Economon, economon@stanford.edu |; -------------------------------------------------------------------------; | SU2 D",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:16185,config,config,16185,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['config'],['config']
Modifiability,"using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer arithmetic and so we really need iterators to amortise that cost, there is also the drawback that scalar usage of such a container would be terrible. **For these reasons I think we should sacrifice ultimate performance and keep node data in AoS storage.**. The major impact on gradients and limiters is the way the code is written, to vectorize the computation we need to compute the gradient into a local variable and then ""transpose"" it when storing it, i.e.; ```c++; FltVec phiI[MAXNVAR], gradI[MAXNVAR][MAXNDIM];; ...; for(size_t iVar=0; iVar<nVar; ++iVar); {; auto flux = weight*(phiI[iVar]+phi.getVec(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); gradI[iVar][iDim] += a_ij[iDim]*flux;; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); grad(iPoint+k,iVar,iDim) = gradI[iVar][iDim][k];; ...; ```; Similarly when computing the gradient we need to first fetch/transpose it to be able to vectorize subsequent computations; ```c++; FltVec gradI[MAXNVAR][MAXNDIM];. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); gradI[iVar][iDim][k] = grad(iPoint+k,iVar,iDim);; ...; ```; Performance wise this is actually better than the SoA version (4% on gradients, 35% on limiters) as it also benefits from better locality, and i",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:13804,variab,variable,13804,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['variab'],['variable']
Modifiability,"we could maybe also use multizone, and allow a zone to be selected for volume averaging and integrated variables.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1894#issuecomment-1396603114:103,variab,variables,103,https://su2code.github.io,https://github.com/su2code/SU2/issues/1894#issuecomment-1396603114,1,['variab'],['variables']
Modifiability,"while you might be envisioning a more clever approach, the python wrapper has some tools to help with this too. SU2.io.tools.restart2solution(config,state=None); """""" moves restart file to solution file, ; optionally updates state; direct or adjoint is read from config; adjoint objective is read from config; """""". should be called right after a call to SU2_CFD (ie with SU2.run.direct()",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/17#issuecomment-29596087:142,config,config,142,https://su2code.github.io,https://github.com/su2code/SU2/issues/17#issuecomment-29596087,3,['config'],['config']
Modifiability,"will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; # Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public; # License along with SU2. If not, see <http://www.gnu.org/licenses/>. import os, sys, shutil, copy, time; import numpy as np. from .. import io as su2io; from .. import amginria as su2amg; from interface import CFD as SU2_CFD. try :; import pyamg ; except:; sys.stderr.write(""## ERROR : Unable to import pyamg module.\n""); sys.exit(1). def amg ( config , kind='' ):; ; sys.stdout.write(""SU2-AMG Anisotropic Mesh Adaptation\n""); ; #--- TODO: Check pyamg version compatibility; ; #--- Check config options related to mesh adaptation; ; adap_options = ['ADAP_SIZES', 'ADAP_SUBITE', 'ADAP_SENSOR', \; 'ADAP_BACK', 'ADAP_HMAX', 'ADAP_HMIN', 'ADAP_HGRAD', 'ADAP_RESIDUAL_REDUCTION', 'ADAP_EXT_ITER', 'ADAP_SOURCE','ADAP_PYTHON']; required_options = ['ADAP_SIZES', 'ADAP_SUBITE', \; 'ADAP_SENSOR', 'MESH_FILENAME', 'RESTART_SOL', 'MESH_OUT_FILENAME']; ; if not all (opt in config for opt in required_options):; err = '\n\n## ERROR : Missing options: \n'; for opt in required_options:; if not opt in config:; err += opt + '\n'; raise RuntimeError , err; ; # Print adap options; sys.stdout.write(su2amg.print_adap_options(config, adap_options)); ; #--- How many iterative loops? Using what prescribed mesh sizes? ; ; mesh_sizes = su2amg.get_mesh_sizes(config); sub_iter = su2amg.get_sub_iterations(config); ; # solver iterations/ residual reduction param for each size level; adap_ext_iter = su2amg.get_ext_iter(config); adap_res = su2amg.get_residual_reduction(config). adap_sensor = config.ADAP_SENSOR; sensor_avail = ['MACH', 'PRES', 'MACH_PRES']; ; if adap_sensor not in sensor_avail:; raise RuntimeError , 'Unknown adaptation sensor (ADAP_SENSOR option)\n'; ; if len(mesh_sizes) != len(sub_iter):; raise RuntimeError , 'Inconsisten",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:2597,Adapt,Adaptation,2597,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,5,"['Adapt', 'adapt', 'config']","['Adaptation', 'adaptation', 'config']"
Modifiability,wiseSU2plugin/src/Pointwise/Win64Target.vsprops (24) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/CaeStrXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeStrXML/runtimeWrite.c (443) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sdf (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.sln (26) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.suo (0) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/CaeUnsSU2.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/UpgradeLog.XML (47) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_UpgradeReport_Files/UpgradeReport.css (207) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/_U,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:14766,plugin,plugins,14766,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,wiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInitItems.h (142) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtCaepSupportData.h (83) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/rtPwpVersions.h (64) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite.c (439) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsSU2/runtimeWrite_orig.txt (60) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj (511) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcproj.PWI.dgarlisch.user (121) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj (307) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.filters (78) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/CaeUnsXML.vcxproj.user (3) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/module.mk (239) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/modulelocal-sample.mk (84) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInitItems.h (98) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepInstanceData.h (135) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtCaepSupportData.h (89) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpInitItems.h (68) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpPluginInfo.h (75) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/rtPwpVersions.h (62) ; - D MeshTools/PointwiseSU2plugin/src/plugins/CaeUnsXML/runtimeWrite.c (347) ; - D MeshTools/PointwiseSU2plugin/src/plugins/README.txt (272) ; - D MeshTools/PointwiseSU2plugin/src/plugins/module.mk (309) ; - D MeshTools/PointwiseSU2plugin/src/plugins/modulelocal.mk (8) ; - D MeshTools/PointwiseSU2plug,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:17205,plugin,plugins,17205,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['plugin'],['plugins']
Modifiability,xcbkptlist (0) ; - I SU2_IDE/Xcode/SU2_CFD.xcodeproj/xcuserdata/fpalacios.xcuserdatad/xcschemes/SU2_CFD.xcscheme (0) ; - I SU2_IDE/Xcode/SU2_DEF.xcodeproj/project.pbxproj (0) ; - I SU2_IDE/Xcode/SU2_DOT.xcodeproj/project.xcworkspace/xcshareddata/SU2_DOT.xccheckout (0) ; - I SU2_IDE/Xcode/SU2_GEO.xcodeproj/project.xcworkspace/xcshareddata/SU2_GEO.xccheckout (0) ; - I SU2_IDE/Xcode/SU2_MSH.xcodeproj/project.pbxproj (0) ; - D SU2_IDE/Xcode/SU2_PRT.xcodeproj/fpalacios.mode1v3 (0) ; - D SU2_IDE/Xcode/SU2_PRT.xcodeproj/fpalacios.pbxuser (0) ; - D SU2_IDE/Xcode/SU2_PRT.xcodeproj/project.pbxproj (0) ; - D SU2_IDE/Xcode/SU2_PRT.xcodeproj/project.xcworkspace/contents.xcworkspacedata (0) ; - D SU2_IDE/Xcode/SU2_PRT.xcodeproj/project.xcworkspace/xcshareddata/SU2_DDC.xccheckout (0) ; - I SU2_IDE/Xcode/SU2_SOL.xcodeproj/project.pbxproj (0) ; - I SU2_IDE/Xcode/SU2_SOL.xcodeproj/xcuserdata/fpalacios.xcuserdatad/xcschemes/SU2_SOL.xcscheme (0) ; - I SU2_MSH/include/SU2_MSH.hpp (0) ; - I SU2_MSH/obj/Makefile.am (0) ; - I SU2_MSH/obj/Makefile.in (0) ; - I SU2_MSH/src/SU2_MSH.cpp (0) ; - D SU2_PRT/bin/.gitignore (0) ; - D SU2_PRT/include/SU2_PRT.hpp (0) ; - D SU2_PRT/obj/Makefile.am (0) ; - I SU2_PRT/obj/Makefile.in (0) ; - D SU2_PRT/src/SU2_PRT.cpp (0) ; - D SU2_PY/2DChannel.py (0) ; - D SU2_PY/3DChannel.py (0) ; - I SU2_PY/Makefile.am (0) ; - I SU2_PY/Makefile.in (0) ; - I SU2_PY/SU2/**init**.py (0) ; - I SU2_PY/SU2/eval/design.py (0) ; - I SU2_PY/SU2/eval/functions.py (0) ; - I SU2_PY/SU2/eval/gradients.py (0) ; - I SU2_PY/SU2/io/config.py (0) ; - I SU2_PY/SU2/io/config_options.py (0) ; - I SU2_PY/SU2/io/data.py (0) ; - I SU2_PY/SU2/io/filelock.py (0) ; - I SU2_PY/SU2/io/redirect.py (0) ; - I SU2_PY/SU2/io/state.py (0) ; - I SU2_PY/SU2/io/tools.py (0) ; - I SU2_PY/SU2/mesh/adapt.py (0) ; - I SU2_PY/SU2/mesh/tools.py (0) . Patch Links:; - https://github.com/su2code/SU2/pull/174.patch; - https://github.com/su2code/SU2/pull/174.diff; ‚Äî; Reply to this email directly or view it on GitHub.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:27379,config,config,27379,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,4,"['adapt', 'config']","['adapt', 'config']"
Modifiability,"y is static polymorphism.; For example in the non vectorized numerics we have a family of Roe schemes since a lot of code is shared, and the only difference is how the dissipation terms are computed. There this is done with virtual functions, here we want none of that.; Virtual functions allow a parent class to dynamically call methods of its children, we want to do this statically and so we need to let the parent class know who is deriving from it.; ```c++; template<class Derived>; class Parent {; public:; void parentMethod() {; // ""I know I am also a Derived and so I can cast myself.""; auto derived = static_cast<Derived*>(this);; // ""now I can use a method of derived""; derived->childMethod();; }; };. // A derived class needs to inform the parent about itself; class Child : public Parent<Child> {; public:; void childMethod() {...}; };; ```. Why is this better? Note that 2 of these derived classes don't actually have the same parent, i.e. one inherits from `Parent<ChildA>` the other from `Parent<ChildB>` this means that 2 versions of Parent were instantiated specifically for each derived class, this allows code to be inlined and optimized for each, an ability lost with virtual functions. ### Putting it all together; For vectorized central schemes we have something like:; ```c++; // Intermediate class for centered schemes, note the 2 template parameters; template<class Derived, class Base>; class CCenteredBase : public Base {; public:; // Main public method implemented here making use of ""Derived"" and ""Base"".; void ComputeFlux(...) const final {; ... // gather data, do some computation; derived->DissipationTerms(...); // static polymorphism; Base::ViscousTerms(...); // static decorator; ... // update linear system; }; }. // A final centered scheme, which is what we instantiate, with some viscous decorator.; template<class Decorator>; class CJSTScheme : public CCenteredBase<CJSTScheme<Decorator>, Decorator> {; protected:; void DissipationTerms(...) const {...}; }; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721:3236,inherit,inherits,3236,https://su2code.github.io,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721,2,"['inherit', 'polymorphi']","['inherits', 'polymorphism']"
Modifiability,y/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/io/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/io; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/mesh/adapt.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/mesh; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/mesh/tools.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/mesh; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/mesh/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/mesh; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/opt/project.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/opt; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/opt/scipy_tools.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/opt; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/opt/__init__.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/opt; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/adaptation.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/adjoint.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/deform.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/direct.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/interface.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/merge.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2/run/geometry.py to /home/slimshady/UserPackages/SU2_INSTALL_NEW/bin/SU2/run; Installing /home/slimshady/UserPackages/SU2_NEW/SU2_PY/SU2,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632032044:6422,adapt,adaptation,6422,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632032044,1,['adapt'],['adaptation']
Modifiability,ypes.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for stdint.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4954: checking for unistd.h; configure:4954: gcc -c -g -O2 conftest.c >&5; configure:4954: $? = 0; configure:4954: result: yes; configure:4970: checking size of short int; configure:4975: gcc -o conftest -g -O2 conftest.c >&5; configure:4975: $? = 0; configure:4975: ./conftest; configure:4975: $? = 0; configure:4989: result: 2; configure:5003: checking size of int; configure:5008: gcc -o conftest -g -O2 conftest.c >&5; configure:5008: $? = 0; configure:5008: ./conftest; configure:5008: $? = 0; configure:5022: result: 4; configure:5036: checking size of unsigned int; configure:5041: gcc -o conftest -g -O2 conftest.c >&5; configure:5041: $? = 0; configure:5041: ./conftest; configure:5041: $? = 0; configure:5055: result: 4; configure:5069: checking size of long int; configure:5074: gcc -o conftest -g -O2 conftest.c >&5; configure:5074: $? = 0; configure:5074: ./conftest; configure:5074: $? = 0; configure:5088: result: 8; configure:5102: checking size of float; configure:5107: gcc -o conftest -g -O2 conftest.c >&5; configure:5107: $? = 0; configure:5107: ./conftest; configure:5107: $? = 0; configure:5121: result: 4; configure:5135: checking size of double; configure:5140: gcc -o conftest -g -O2 conftest.c >&5; configure:5140: $? = 0; configure:5140: ./conftest; configure:5140: $? = 0; configure:5154: result: 8; configure:5168: checking size of void *; configure:5173: gcc -o conftest -g -O2 conftest.c >&5; configure:5173: $? = 0; configure:5173: ./conftest; configure:5173: $? = 0; configure:5187: result: 8; configure:5409: checking X11/Intrinsic.h usability; configure:5409: gcc -c -g -O2 conftest.c >&5; conftest.c:61:27: error: X11/Intrinsic.h: No such file or directory; configure:5409: $? = 1; configure: failed program w,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:11473,config,configure,11473,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,8,['config'],['configure']
Modifiability,"|; | SU2 is free software; you can redistribute it and/or |; | modify it under the terms of the GNU Lesser General Public |; | License as published by the Free Software Foundation; either |; | version 2.1 of the License, or (at your option) any later version. |; | |; | SU2 is distributed in the hope that it will be useful, |; | but WITHOUT ANY WARRANTY; without even the implied warranty of |; | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU |; | Lesser General Public License for more details. |; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. ------------------------ Physical Case Definition -----------------------; Input mesh file name: mesh_NACA0012_inv.su2. -------------------------- Output Information ---------------------------; The output file format is Tecplot ASCII (.dat).; Flow variables file name: flow. ------------------- Config File Boundary Information --------------------; +-----------------------------------------+; | Marker Type| Marker Name|; +-----------------------------------------+; | Euler wall| airfoil|; +-----------------------------------------+; | Far-field| farfield|; +-----------------------------------------+. ---------------------- Read Grid File Information -----------------------; Two dimensional problem.; 5233 points before parallel partitioning.; Performing linear partitioning of the grid nodes.; 10216 interior elements before parallel partitioning.; Executing the partitioning functions.; Building the graph adjacency structure.; Distributing elements across all ranks.; 2 surface markers.; +------------------------------------+; | Index| Marker| Elements|; +------------------------------------+; | 0| airfoil| 200|; | 1| farfield| 50|; +------------------------------------+; Calling ParMETIS... graph partitioning complete (1114 edge cuts).; Distr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-514630913:2696,variab,variables,2696,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-514630913,1,['variab'],['variables']
Modifiability,"|; | SU2 is free software; you can redistribute it and/or |; | modify it under the terms of the GNU Lesser General Public |; | License as published by the Free Software Foundation; either |; | version 2.1 of the License, or (at your option) any later version. |; | |; | SU2 is distributed in the hope that it will be useful, |; | but WITHOUT ANY WARRANTY; without even the implied warranty of |; | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU |; | Lesser General Public License for more details. |; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. ------------------------ Physical Case Definition -----------------------; Input mesh file name: mesh_NACA0012_inv.su2. -------------------------- Output Information ---------------------------; The output file format is Tecplot ASCII (.dat).; Flow variables file name: flow. ------------------- Config File Boundary Information --------------------; +-----------------------------------------+; | Marker Type| Marker Name|; +-----------------------------------------+; | Euler wall| airfoil|; +-----------------------------------------+; | Far-field| farfield|; +-----------------------------------------+. ---------------------- Read Grid File Information -----------------------; Two dimensional problem.; 5233 points.; 2 surface markers.; +------------------------------------+; | Index| Marker| Elements|; +------------------------------------+; | 0| airfoil| 200|; | 1| farfield| 50|; +------------------------------------+; 10216 triangles.; Identify vertices.; Storing a mapping from global to local point index. ------------------------- Solution Postprocessing -----------------------. Error in ""void CBaselineSolver::SetOutputVariables(CGeometry*, CConfig*)"": ; -------------------------------------------------------------------------; Unable to o",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-514653545:2693,variab,variables,2693,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-514653545,1,['variab'],['variables']
Performance," PR. And‚Ä¶ do not worry too much (or at all)... we are doing this for free and for fun! As you know, after a major release we always find this kind of small bugs. The big picture is that thanks to you we all enjoy an awesome multipoint optimization capability! Thanks!. Best,; Francisco. > On Mar 25, 2018, at 6:04 PM, Heather Kline <notifications@github.com> wrote:; > ; > @hlkline commented on this pull request.; > ; > In SU2_PY/SU2/eval/design.py <https://github.com/su2code/SU2/pull/519#discussion_r176962282>:; > ; > > @@ -364,7 +364,7 @@ def obj_df(dvs,config,state=None):; > # For multiple objectives are evaluated one-by-one rather than combined; > # MARKER_MONITORING should be updated to only include the marker for i_obj; > # For single objectives, multiple markers can be used ; > - config['MARKER_MONITORING'] = marker_monitored[i_obj]; > + if (n_obj>1): config['MARKER_MONITORING'] = marker_monitored[i_obj]; > @fpalacios <https://github.com/fpalacios> yes, I commented a bit too quickly; I do see the behavior that you mention. I think the line previously mentioned helps with getting the value of the objective but not the gradient.; > While I was testing this on my end I also noticed that there is an issue if you list the same objective multiple times (for example, if you wanted to weight the drag contribution from one surface more than another), where since it has the same key the previous dict entry is overwritten. Do you mind if I add an error catching that to your PR?; > ; > I am taking a look back through it but so far I think your solution will be good - and better to fix the performance in master now and worry about elegant improvements in the develop branch.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/519#discussion_r176962282>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AccuRlzQ3wEuDogzT35DALgoNbrSv32Xks5tiD64gaJpZM4S4O1W>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/519#issuecomment-376023020:1667,perform,performance,1667,https://su2code.github.io,https://github.com/su2code/SU2/pull/519#issuecomment-376023020,1,['perform'],['performance']
Performance," be transformed into a short array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 = T0.widePermuteLo(T2); C1 = T1.widePermuteLo(T3);; C2 = T0.widePermuteHi(T2); C3 = T1.widePermuteHi(T3);. (Array4d(&bjj[0][k])-C0).store(&bjj[0][k]);; (Array4d(&bjj[1][k])-C1).store(&bjj[1][k]);; (Array4d(&bjj[2][k])-C2).store(&bjj[2][k]);; (Array4d(&bjj[3][k])-C3).store(&bjj[3][k]);. C0.store(&bij[0][k]); C1.store(&bij[1][k]);; C2.store(&bij[2][k]); C3.store(&bij[3][k]);; ```; I am showing this because it represents a readability worst case in terms of manipulating SIMD types, we might end up with one or two of these to get the best performance possible but they will always be encapsulated and deep in kernel-type areas of SU2 that are almost never touched. ## Conclusions; - Over 45% faster CSysMatrix updates by mapping off-diagonal blocks to edges and diagonal blocks to points.; - Colouring is the best strategy for hybrid parallelism of compute-heavy edge loops and matrix updates as it interleaves compute and memory operations.; - AoS storage should be kept to avoid significant loss of performance in compute-light edge loops due to poor locality of SoA storage.; - Major implication of AoS is on point loops where some data needs to be fetched (transposed) into local variables for effective vectorization.; - An intermediate storage scheme, AoSoA, can provide both good locality and vectorization of point loops, however it requires that data be accessed via special iterators and scalar code based on it would have poor performance. Next I will try to estimate how much we can gain for a ""rea",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:16548,perform,performance,16548,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['performance']
Performance," case, we would have something along the lines of: . a) NACA0012; i) 113 x 33; ii) 225 x 65 ; iii) 449 x 129; iv) ... This way we have a family of meshes and configuration files that are specifically built for the purpose of validating the code and comparing with other solvers. I might be useful to compress meshes that are larger than a certain size (say 10MB). We should also put a limit on the size of a single mesh that the repository can handle (say 50MB?). . Within the home directory, the README file should list all the cases in the repository, who the custodian of the test case is (person with meshes in case the meshes are too large), and which version it was last run on. . I thought about splitting it up into Verification cases and Validation cases, but I thought it would be more informative and intuitive to split up according to the physics of the simulations. My thinking might be limited because that's how I have seen the TestCases folder organized, so any other suggestions are welcome. I think it is imperative that this is accompanied with a section on the SU2 website that showcases just the results of the validation test cases (grid convergence studies, residual reductions etc) and links to the v&v repo appropriately. This way, if people are just inquisitive about SU2's performance, they can get a quick snapshot of the results, without the need to run the cases themselves. . I also wanted to broach the topic of convergence here. Would it be a good idea to standardize the termination criteria wherever possible? For example, in the NACA0012 case we can ensure that residuals are reduced by 8 orders of magnitude for all meshes. Or for the ONERAM6, we use Cauchy convergence and make sure the C_L is converged to 6 orders of magnitude. This would have to be flexible since the same level of convergence might not apply to all the cases in the repository. But for within a test case, I think it would be good to use the same convergence criteria for a family of meshes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426026053:1925,perform,performance,1925,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426026053,2,['perform'],['performance']
Performance," per rank participates in the message passing, I have no experience here though so this might be a bad strategy, idk. **Back to business:**; I went silent for a bit because in prototyping a typical residual computation and matrix update loop I made some realisations that made me go back to the drawing board regarding data structures, and eventually back to square 0. . ## Parallel strategy for flux computation; Because significant computation is required to obtain each edge's flux, it does not make sense to attempt a ""point-loop"" strategy (which would double the effort).; However, one can either use colouring to avoid the race conditions that would result from updating the residual of cells i and j, or store the edge fluxes and then, on a second point-loop perform the summation of fluxes for each cell, with the direction being accounted by the same adjacency information used in the point-loop GG gradient computation.; If we consider only the update of residuals the two strategies are fairly equivalent performance wise, the tie breaker is the matrix updates. ## Matrix Updates; By this I mean the `addBlock`, `subBlock` we do (two times each) to update diagonal and off-diagonal blocks for each edge.; Here is a dummy numerics loop that does nothing else but setting blocks in the matrix (with colouring).; ```c++; void testLoop1(const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; double** blk_i, double** blk_j,; SparseMatrix& matrix); {; matrix.setZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; size_t iEdge = edgeIdx[k];; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. matrix.addBlock(iPoint, iPoint, blk_i);; matrix.addBlock(iPoint, jPoint, blk_j);. matrix.subBlock(jPoint, jPoint, blk_j);; matrix.subBlock(jPoint, iPoint, blk_i);; }; }",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:1221,perform,performance,1221,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['performance']
Performance," prefer to use either (a) an open source library that is actively maintained, or (b) our own tree-based search. I do think that this is important for the various reasons that have been outlined/discussed already. The method Harichand describes is pretty much what we did in the ASC program. Edwin can provide more details (and we had an AIAA paper around 2005 on this topic). My suggestion: if Edwin has a tree search in C++ already and someone is willing to spend the time to integrated it, that would be the best option. We get the performance that is needed with a lightweight tree search, without external dependencies (to libraries that may provide a lot of other functionality we do not need), and we can expand to parallel trees as needed. If there is no code already available, then PCL seems like a good alternative (since it seems one can compile only portions of the library). Any takers?. Cheers,. Juan. On Jun 8, 2016, at 4:35 AM, Harichand M V <notifications@github.com<mailto:notifications@github.com>> wrote:. All,. Thanks for your comments. I think ANNlibrary is no longer maintained. It would be better if we can use a well maintained library in-order to prevent issues in future. Additionally ANNlibrary does not support distributed trees. As far as I know, pointcloud library also does not support distributed trees. I guess we will have to write a wrapper routine using MPI. This will create a local tree for its own portion of the surface mesh. Now distance computation can be done by querying all the trees and using the minimum. One catch here is that we will have to compute distance queries in a group in order to prevent the communication latency eating up the advantage. Waiting for comments. ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHubhttps://github.com/su2code/SU2/issues/282#issuecomment-224563432, or mute the threadhttps://github.com/notifications/unsubscribe/ADpSxBy8kuwFTxIZIeCNXcpo7NhErZYeks5qJqjqgaJpZM4ItVbi.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-224806527:1720,latency,latency,1720,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-224806527,1,['latency'],['latency']
Performance," scale, rotate, and translate options over into the SU2_MSH executable, which might be a more logical home for it. However, this would require adding an extra set of config options for reading in a scale/rotate/translate options for SU2_MSH. The nice thing here is that we keep the intent separate, i.e., only design variables are listed with the other design variables while the mesh transformations are elsewhere. A different, possibly simpler way would be to just create separate names for these two types in the list of available options so that there is no ambiguity. Any thoughts?. On Aug 16, 2015, at 9:21 AM, Heather Kline <notifications@github.com<mailto:notifications@github.com>> wrote:. Some illustrative images/output in case my description was hard to understand:; [image]https://cloud.githubusercontent.com/assets/5167760/9294050/52a764b2-440f-11e5-8681-b68318da0ce7.png. SU2_DEF output when only ""airfoil"" marker included:. ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid. ----------------------- Volumetric grid deformation ---------------------; Performing the deformation of the volumetric grid. # FGMRES residual history. # Residual tolerance target = 4.14044e-11. # Initial residual norm = 15.8102. ```; 0 1; 50 2.17385e-06; 100 1.08998e-10; ```. # FGMRES final (true) residual:. # Iteration = 105: |res|/|res0| = 3.50764e-11. Non-linear iter.: 1/1. Linear iter.: 105. Min. area: 4.1019e-08. Error: 5.54565e-10. ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 1.039217 seconds on 1 core. ------------------------- Exit Success (SU2_DEF) ------------------------. [image]https://cloud.githubusercontent.com/assets/5167760/9294056/7be9439a-440f-11e5-862f-742246ef1565.png; SU2_DEF: output when ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-132065067:1574,Perform,Performing,1574,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-132065067,1,['Perform'],['Performing']
Performance," simd-loops in sight, in good C++ fashion that trickery has been encapsulated in a ""simd-friendly"" class.; Such a class can look something like this:; ```C++; template<class T, size_t N>; class Array; {; #define FOREACH for(size_t k=0; k<N; ++k); public:; enum : size_t {Size = N};; enum : size_t {Align = N*sizeof(T)};; private:; // fixed size and aligned array of internal data, naturally maps to a SIMD register; alignas(Align) T vals_[N];; /*; * Some helper methods go here; */; public:; // **** CONSTRUCTORS **** //; // We want to be able to construct this type from single scalars,; // a memory location from which we LOAD data,; // or a memory location and some offsets from which we GATHER data.; // In addition to the ""normal"" constructors. // scalar broadcasting ctor; STRONGINLINE Array(T x) {bcast(x);}. // loading ctor; STRONGINLINE Array(const T* ptr); {; #pragma omp simd aligned(ptr:Align); FOREACH vals_[k] = ptr[k];; }; // gathering ctor; template<class U>; STRONGINLINE Array(const T* base_ptr, const U& offsets); {; #pragma omp simd; FOREACH vals_[k] = base_ptr[offsets[k]];; }; /*; * Other traditional constructors (default, copy-ctor, move-ctor, etc) go here; */. // **** ACCESSORS **** //; STRONGINLINE T& operator[] (size_t k) {return vals_[k];}; STRONGINLINE T operator[] (size_t k) const {return vals_[k];}. // **** MATH OPERATORS **** //; STRONGINLINE Array& operator= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] = rhs.vals_[k];; return *this;; }. STRONGINLINE Array& operator+= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] += rhs.vals_[k];; return *this;; }; STRONGINLINE Array operator+ (const Array& rhs) const { return Array(*this)+=rhs; }; ; /*; * Many other operators go here.; */; };. // Common math function overloads; template<class T>; STRONGINLINE T vmax(const T& a, const T& b); {; T res;; #pragma omp simd; for(size_t k=0; k<T::Size; ++k); res[k] = (a[k]>b[k])? a[k] : b[k];; return res;; }. #undef FOREACH; ```; There are other (bet",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:7464,load,loading,7464,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['load'],['loading']
Performance," the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditions, i.e. each endpoint is referenced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main memory and forces cache coherency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** reduces temporal locality, edges are sorted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:4852,cache,cache,4852,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['cache'],['cache']
Performance," then combined in a final `min(2, max/max, min/min)` to which the limiter function is applied (this would also be applicable to Venkatakrishnan-[Wang] limiters).; This is equivalent to the edge-loop, if statements are not required as due to cells being closed, if the positive projection is not zero, the negative one will also not be zero, therefore it is correct to always evaluate both ratios.; This algorithm only needs min and max neighbors as small local variables instead of large global ones due to the way those values are determined. This is where the memory from the extra adjacency information is recovered. Like @economon said, fusing the gradient kernel with the limiter kernel is trivial with these point loops, and I do not think it affects readability much since one can clearly tell ""what is what"" (I will not put it here but it really is a matter of copy paste), including the boundaries could be a bit more challenging, but I will give performance number nevertheless. **Performance summary**. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.25 | 2.0 |; | **Speed 4 cores** | 2.45 | 2.7 | 4.5 | 7.0 |. The basic point version does not lose to edge based because, contrary to gradients, it does not require duplication of computations while benefiting from sequential access to gradients.; Again the point-based implementation does really well in parallel, limiters are more compute intensive and so the scaling is almost perfect.; For reference, limiters are 1.9 times more expensive to compute than gradients with the reference edge version. With point loops, SIMD, and in parallel, gradients and limiters cost the same. If we consider the combined cost of gradients and limiters, and compare the scalar ""edge+edge"" with the SIMD ""point+point"" and ""fused point"" we get:. | G+L Approach | Edge+Edge | Point+Point | Fused Point |; | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:10217,Perform,Performance,10217,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,1,['Perform'],['Performance']
Performance," to SU2 in one of our branches. >@pcarruscag; >(...) being able to use PETSc or HYPRE would be interesting as it would give us access to AMG, and @talbring 's branch feature_template_linear_solver would make such an integration compatible with AD. (...). >@EduardoMolina; >(...) When Brian (@bmunguia ) and I mentioned PETSc, it was an idea to try a different Newton-Krylov (with preconditioner) library in order to improve the convergence of SU2.; Since the slow convergence of the SU2-FV is the main feedback that I received from other users from industry and academia, I think it worth try an external library and evaluate the performance. (...). >@pcarruscag ; >(...) That is something I am also interested in as for some of my structural cases the current linear solvers simply do not converge. (...). >@economon ; >I would add one practical comment for consideration: it is worth checking whether the main restriction we have is related to approximations in the Jacobian that limit the effective CFL we can use or whether the convergence of the linear solver itself is a problem (speed or complete lack of convergence). A quick test without resorting to another library is to increase the fill-in for ILU-preconditioned GMRES, which is very expensive/slow but should converge difficult problems, and to check how high we can take the CFL when allowing each nonlinear iteration to converge to a tight tolerance in the linear solver, say 1e-14 (you can output the linear solver residuals to verify convergence). If we can take the CFL higher with a more performant linear solver, then it could be worth the effort to try other options.; >If the CFL must remain low for stability, then perhaps we should look at the quality of the Jacobians we construct to see if we can improve, or even try exact Jacobians with AD if we can afford it. A more advanced CFL ramping strategy could also be helpful here to get us closer to a solution before trying to aggressively converge. I think that is everyone.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460853218:3877,perform,performant,3877,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460853218,2,['perform'],['performant']
Performance,"# Import issues. In Python 3, relative import behaviour changes.; In Python 2, ""import module"" loads first local module, then system module. In Python 3, it is the opposite. ## Import patterns in SU2 code. If we consider, to simplify, these generic packages:; `package1/p1m1.py`; `package1/p1m2.py`; `package1/__init__.py`. `package2/p2m1.py`; `package2/__init__.py`. In SU2 code we find these patterns:. **Pattern 1**; `package1/__init__.py`; contains. ``` python; import p1m1; import p1m2; ```. These instructions are useless as it is the common behaviour of package.; If a `__init__.py` is defined, I can do from package1 import p1m1 or import package1.p1m1. Do you know why this happens ? Is there an historical reason or other ?; For example, in [`SU2_PY/SU2/__init__.py`](https://github.com/su2code/SU2/blob/master/SU2_PY/SU2/__init__.py) or [`SU2_PY/SU2/mesh/__init__.py`](https://github.com/su2code/SU2/blob/master/SU2_PY/SU2/mesh/__init__.py). **Pattern 2**; `package1/__init__.py`; contains. ``` python; from p1m1 import f; ```. **Pattern 3**; `package1/p1m1.py`; contains. ``` python; from ..p1m2 import f; ```. **Pattern 4**. ``` python; import cPickle as pickle; ```. ## Solution. I suggest these solutions:. **Pattern 1**; delete imports. **Pattern 2**; replace `from p1m1 import f` with `from .p1m1 import f` . See also next solution. **Pattern 3**. This is OK. Another approach is to always use absolute imports, for example. ``` python; from ..p1m2 import f; ```. becomes. ``` python; from package1.p1m2 import f; ```. Result is the same except that it is recommended in [PEP8](https://www.python.org/dev/peps/pep-0008/#id20) but first approach is ok too.; I can do it if you want. **Pattern 4**; Py3 pickle now manage both accelerated cPickle and pure python pickle; See https://docs.python.org/3/whatsnew/3.0.html#library-changes, 4th item.; So replace it with. ``` python; if sys.version_info.major > 2:; # Py3 pickle now manage both accelerated cPickle and pure python pickle; # S",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/246#issuecomment-197397273:95,load,loads,95,https://su2code.github.io,https://github.com/su2code/SU2/issues/246#issuecomment-197397273,2,['load'],['loads']
Performance,"### Intro to SIMD; The ALU of modern CPU are capable of processing multiple elements of built-in types simultaneously by applying one instruction (e.g. add) to a register of those elements. Registers are at the very top of the memory hierarchy, for any computation to be performed data needs to be in registers.; An AVX register is 256 bits wide, that means 4 lanes of doubles or 8 of floats, AVX-512 (available in Xeon-Phi and SkylakeX processors) doubles the size. By GPU standards these are rookie numbers. **Why should we care about SIMD?**; Because it is the only way to use the whole silicon, by and large vector instructions have the same latency and throughput of their scalar versions, therefore speedups proportional to the number of SIMD lanes are possible in compute-bound code.; As we saw in #716 there is some of that in the numerics, do not expect 4x speed-ups though, low order unstructured FVM is known to be bandwidth-bound, vectorization helps a bit there too (instructions are also data that needs to travel to the CPU) (maybe for explicit schemes and 8 SIMD lanes, maybe). **Relation with data structures**; There is only one efficient way to move data between memory and registers, via `load` and `store` instructions (they do come in multiple flavors). That is, pointing to a memory location and reading or writing N elements of contiguous data.; It is not the only way, it is also possible to `gather` and `scatter` data. That is populating the register from non-contiguous locations and vice versa. This is about one order of magnitude slower, to the point where if the computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:271,perform,performed,271,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,6,"['latency', 'perform', 'throughput']","['latency', 'performed', 'throughput']"
Performance,"(GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3343: $? = 0; configure:3332: g++ -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3343: $? = 0; configure:3332: g++ -V >&5; g++: '-V' option must have argument; configure:3343: $? = 1; configure:3332: g++ -qversion >&5; g++: unrecognized option '-qversion'; g++: no input files; configure:3343: $? = 1; configure:3363: checking whether the C++ compiler works; configure:3385: g++ conftest.cpp >&5; configure:3389: $? = 0; configure:3437: result: yes; configure:3440: checking for C++ compiler default output file name; configure:3442: result: a.out; configure:3448: checking for suffix of executables; configure:3455: g++ -o conftest conftest.cpp >&5; configure:3459: $? = 0; configure:3481: result: ; configure:3503: checking whether we are cross compiling; configure:3511: g++ -o conftest conftest.cpp >&5; configure:3515: $? = 0; configure:3522: ./conftest; configure:3526: $? = 0; configure:3541: result: no; configure:3546: checking for suffix of ob",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:3753,tune,tune,3753,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['tune'],['tune']
Performance,"(GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3999: $? = 0; configure:3988: gcc -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux; Thread model: posix; gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ; configure:3999: $? = 0; configure:3988: gcc -V >&5; gcc: '-V' option must have argument; configure:3999: $? = 1; configure:3988: gcc -qversion >&5; gcc: unrecognized option '-qversion'; gcc: no input files; configure:3999: $? = 1; configure:4003: checking whether we are using the GNU C compiler; configure:4022: gcc -c conftest.c >&5; configure:4022: $? = 0; configure:4031: result: yes; configure:4040: checking whether gcc accepts -g; configure:4060: gcc -c -g conftest.c >&5; configure:4060: $? = 0; configure:4101: result: yes; configure:4118: checking for gcc option to accept ISO C89; configure:4181: gcc -c -g -O2 conftest.c >&5; configure:4181: $? = 0; configure:4194: result: none needed; configure:4216: checking dependency style of gcc; configure:4327: result: gcc3; configure:4345: checking whether gcc and cc understand -c and -o together; configure:4376: gcc -c conft",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:6433,tune,tune,6433,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['tune'],['tune']
Performance,"(Krylov solvers, sparse approximate factorizations, etc.) is relatively independent from what I have in mind.; Nevertheless being able to use PETSc or HYPRE would be interesting as it would give us access to AMG, and @talbring 's branch feature_template_linear_solver would make such an integration compatible with AD.; What I would like is to have a ""CMatrixDense"" class, to give concrete examples:; - For RBF interpolation the guy who worked on it before me implemented his own Cholesky and LU factorizations, matrix-matrix, matrix-vector routines, etc.; - @jayantmukho recently needed some eigenvector decomposition's for the uncertainty quantification feature.; - I imagine in some other places of the code similar routines were needed, for example small matrix inversion when computing gradients by weighted least squares (indeed what I need now is a QR decomposition). And, as an added bonus, I think some other areas of the code could be simplified / optimized by adopting a dense matrix format, for example:; - This snipped from the viscous numerics refactoring`for (iDim = 0; iDim < nDim; iDim++) {; TauElem[iDim] = 0.0;; for (jDim = 0; jDim < nDim; jDim++); TauElem[iDim] += tau[iDim][jDim]*UnitNormal[jDim];; }` would simply become `TauElem=tau*UnitNormal`; - Cumbersome allocations like `tau_jacobian_i = new su2double* [nDim];; for (iDim = 0; iDim < nDim; iDim++) {; tau_jacobian_i[iDim] = new su2double [nVar];; }` become `Matrix tau_jacobian_i(nDim,nVar);` and the cleanup is dealt with by the destructor of the object automatically. Now to answer some questions.; @juanjosealonso @erangit LAPACK and BLAS are indeed the standard, so much so that most (all?) newer libraries will call their routines behind the scenes.; However they considerably simplify the user interface by encapsulating the aforementioned construction/destruction and by exposing natural ways of manipulating the matrices, e.g. access entire rows, columns, blocks, etc.; Another issue with using BLAS routines is th",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459653772:1157,optimiz,optimized,1157,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459653772,2,['optimiz'],['optimized']
Performance,"**Disclaimer**; The performance numbers that follow are based on simple implementations of the methods, I do not claim any of my implementations or choice of methods to be optimal. If you know better speak up.; The data is from the case used to benchmark #753 (see #716), it is by no means an extensive collection of different grid types. I will share code and data with anyone who wants to repeat the tests on the condition they post detailed results. With that out of the way :) ... ### Green-Gauss Gradients. This is the plain edge-loop version of the code with boundary contributions omitted for simplicity:; ```C++; void computeGradients(size_t nEdge,; size_t nPoint,; size_t nVar,; size_t nDim,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& area,; const vector<double>& volume,; const Matrix& phi,; VectorOfMatrix& grad); {; grad.setZero();. for(size_t iEdge=0; iEdge<nEdge; ++iEdge); {; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. for(size_t iVar=0; iVar<nVar; ++iVar); {; double phi_ave = 0.5*(phi(iPoint,iVar)+phi(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); {; double flux = phi_ave*area(iEdge,iDim);. grad(iPoint,iVar,iDim) += flux;; grad(jPoint,iVar,iDim) -= flux;; }; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; ```; This is more or less what SU2 does with minor differences on how the edges (`connectivity`) and area are stored, there is no vectorization nor easy way to make the loop parallel, this will be the reference for execution times. Suppose now that due to a perfect storm the number of variables is 4, here is how with a few pragmas we get gcc to vectorize:; ```C++; template<size_t nVar>; void computeGradients_impl(size_t nEdge,; size_t nPoint,; size_t nDim,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& area,; const vector<double>& volume,; con",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:20,perform,performance,20,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['perform'],['performance']
Performance,"**SOLVED** see edit. Hello! I seem to remember that it used to be possible to get angle of attack in the history file? Is this still possible? I would like to be able to just pull the angle of attack out of the history file, along with the aero coeffs.; Context:; I have looked through the custom output document and the reference config file, and (perhaps I am secretly blind), but there does not seem to be a simple output group for it.; Reason I need it: performing analysis for fixed Cl, so angle of attack is useful information. At the moment I am getting probed data:; ```; CUSTOM_OUTPUTS='m_vel_x : Macro{VELOCITY_X};\; m_vel_y : Macro{VELOCITY_Y};\; vel_x1: Probe{$m_vel_x}[-15, -15];\; vel_y1: Probe{$m_vel_y}[-15, -15]'; ```; And just getting the tan(y/x) of the probed values for angle. This works well enough.; The other option I have is stripping the angle of attack out of the forced breakdown file, would prefer to not do, but can. EDIT:. **It can be pulled out of line 2 of flow.meta**",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2138#issuecomment-1780159397:458,perform,performing,458,https://su2code.github.io,https://github.com/su2code/SU2/issues/2138#issuecomment-1780159397,2,['perform'],['performing']
Performance,", please ?. Best. Here is my definition file.; ```; Bootstrap: docker; From: ubuntu:18.04; ; %post; apt-get -y update; apt-get -y upgrade; apt-get -y install python3 python3-pip git build-essential autoconf openmpi-bin openmpi-common libopenmpi-dev m4 gfortran swig vim; pip3 install mpi4py numpy scipy matplotlib; git clone --depth=1 https://github.com/su2code/SU2; cd SU2; mkdir SU2_Install; autoreconf -i; ./bootstrap; export CXXFLAGS=""-O3 -Wall""; python3 preconfigure.py --enable-autodiff --enable-mpi --enable-PY_WRAPPER --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx --prefix=$PWD/SU2_Install; make -j 4 install; make clean; cd ..; pip3 install tensorforce[tf]; git clone https://github.com/tensorforce/tensorforce.git; cd tensorforce/; git checkout major-revision-final; pip3 install -e .; ; %runscript; exec /SU2/bin/$1 $2 ; ```; The error is:; ```; make[3]: Entering directory '/SU2/SU2_BASE/SU2_PY/pySU2'; /bin/bash: python: command not found; swig -DHAVE_MPI -Wall -I/usr/include/python3.6m -I/usr/include/python3.6m -I/root/.local/lib/python2.7/site-packages/mpi4py/include -I/mpi4py/include -I/Library/Python/2.7/site-packages/mpi4py/include -outdir ./ -o SU2_APIPYTHON_wrap.cxx -c++ -python /SU2/SU2_BASE/../SU2_PY/pySU2/pySU2.i ; /SU2/SU2_BASE/../SU2_PY/pySU2/pySU2.i:64: Error: Unable to find 'mpi4py/mpi4py.i'; Makefile:532: recipe for target 'SU2_APIPYTHON_wrap.cxx' failed; make[3]: *** [SU2_APIPYTHON_wrap.cxx] Error 1; make[3]: Leaving directory '/SU2/SU2_BASE/SU2_PY/pySU2'; Makefile:525: recipe for target 'all' failed; make[2]: *** [all] Error 2; make[2]: Leaving directory '/SU2/SU2_BASE/SU2_PY/pySU2'; Makefile:441: recipe for target 'install-recursive' failed; make[1]: *** [install-recursive] Error 1; make[1]: Leaving directory '/SU2/SU2_BASE'; Makefile:13: recipe for target 'install-SU2_BASE' failed; make: *** [install-SU2_BASE] Error 2; FATAL: failed to execute %post proc: exit status 2; FATAL: While performing build: while running engine: exit status 255; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-515298427:2199,perform,performing,2199,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-515298427,1,['perform'],['performing']
Performance,"---------- Performance Summary --------------------------; Simulation totals:; Cores: 8 | DOFs/point: 6 ; Points/core: 10428.1 | Ghost points/core: 2045.25 ; Wall-clock time (hrs): 0.153299 | Core-hrs: 1.22639 . Preprocessing phase:; Preproc. Time (s): 2.69291 | Preproc. Time (%): 0.487956 . Compute phase:; Compute Time (s): 385.71 | Compute Time (%): 69.8909 ; Iteration count: 560 | Avg. s/iter: 0.688769 ; Core-s/iter/Mpoints: 55.2191 | Mpoints/s: 0.144877 . Output phase:; Output Time (s): 163.472 | Output Time (%): 29.6211 ; Output count: 112 | Avg. s/output: 1.45957 ; -------------------------------------------------------------------------; ```; Note that the iteration count is the total number of all inner iterations. 30% of the time is spend in the output routine. That may sound like a lot, but lets take a look at the second case, where I still call the output routines, but disabled the writing of any files. ```; -------------------------- Performance Summary --------------------------; Simulation totals:; Cores: 8 | DOFs/point: 6; Points/core: 10428.1 | Ghost points/core: 2045.25; Wall-clock time (hrs): 0.112822 | Core-hrs: 0.902578. Preprocessing phase:; Preproc. Time (s): 3.84826 | Preproc. Time (%): 0.947474. Compute phase:; Compute Time (s): 399.446 | Compute Time (%): 98.347; Iteration count: 560 | Avg. s/iter: 0.713297; Core-s/iter/Mpoints: 57.1855 | Mpoints/s: 0.139896. Output phase:; Output Time (s): 2.86557 | Output Time (%): 0.705527; Output count: 112 | Avg. s/output: 0.0255854; Restart Aggr. BW (MB/s): 0 | MB/s/core: 0; -------------------------------------------------------------------------; ``` ; You can see that now the time spend in the output routines (including gathering all data, partitioning and sorting) just takes 0.7% of the overall time. Its not nothing, but roughly one order of magnitude smaller than one iteration of the solver. . I also compared it to the current develop using callgrind on a similar case and for both versions the num",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-535018704:1246,Perform,Performance,1246,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-535018704,1,['Perform'],['Performance']
Performance,"-------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid. ----------------------- Volumetric grid deformation ---------------------; Performing the deformation of the volumetric grid. # FGMRES residual history. # Residual tolerance target = 4.14044e-11. # Initial residual norm = 15.8102. ```; 0 1; 50 2.17385e-06; 100 1.08998e-10; ```. # FGMRES final (true) residual:. # Iteration = 105: |res|/|res0| = 3.50764e-11. Non-linear iter.: 1/1. Linear iter.: 105. Min. area: 4.1019e-08. Error: 5.54565e-10. ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 1.039217 seconds on 1 core. ------------------------- Exit Success (SU2_DEF) ------------------------. [image]https://cloud.githubusercontent.com/assets/5167760/9294056/7be9439a-440f-11e5-862f-742246ef1565.png; SU2_DEF: output when deforming with all markers included:. ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid.; No surface deformation (scaling, rotation, or translation). ----------------------- Volumetric grid deformation ---------------------; Performing a translation of the volumetric grid.; Translational displacement: (1, 0, 0). ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 0.716938 seconds on 1 core. as far as I can tell the regression test failure is the same as for the current develop branch; I'll update this pull request whenever that is resolved. ‚Äî; Reply to this email directly or view it on GitHubhttps://github.com/su2code/SU2/pull/187#issuecomment-131578218.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-132065067:2673,Perform,Performing,2673,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-132065067,2,['Perform'],['Performing']
Performance,"-images.githubusercontent.com/21182966/28308831-b937bf76-6ba7-11e7-9108-e8a2ab959b74.png). Then I noticed a difference in SENS_GEO (which is the second term of the upper equation, right?) between compressible and incompressible. . ![image](https://user-images.githubusercontent.com/21182966/28310143-bb28c42a-6bab-11e7-8c14-8409b6b12027.png). So if the scale is adjusting current step size the step of dC and SENS_GEO represents the second term, then the SENS_GEO would change when the scale is changed. But this is not the case for incompressible and compressible. . In short, the only noticeable change, due to scaling, occurs in deformation folder of DSN_002. But this is after the optimization step, which is really confusing. Scaling adjusts the current step size and because it can not find a sufficient decrease it is halving the dv_value. But then one should expect different values in the adjoint folder for different scale factors, right?. I hope you can use this information and can tell me whether it is a correct behavior of the optimizer. I should also note that I did not make use of constraints, just as in the test case. I read that the optimizer will switch from optimization procedure. I think this should not matter because of the test case. . I attached also the configure files (compressible (working, scale= 0.01) and incompressible (not working, scale =0.01)) and the mesh file, which is in both cases the same file. [compressible_cfg.txt](https://github.com/su2code/SU2/files/1155421/compressible_cfg.txt); [incompressible_cfg.txt](https://github.com/su2code/SU2/files/1155427/incompressible_cfg.txt); [mesh_300_su2.txt](https://github.com/su2code/SU2/files/1155430/mesh_300_su2.txt). I hope I provide enough information so that one can clarify the behavior of the optimizer. I also appreciate if one can tell me which variables have to be kept in mind. I really want to learn from this and if more information is needed, I really do not mind to provide it. Many thanks in adv",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316018103:3553,optimiz,optimizer,3553,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316018103,2,['optimiz'],['optimizer']
Performance,"/21182966/28308831-b937bf76-6ba7-11e7-9108-e8a2ab959b74.png). Then I noticed a difference in SENS_GEO (which is the second term of the upper equation, right?) between compressible and incompressible. . ![image](https://user-images.githubusercontent.com/21182966/28310143-bb28c42a-6bab-11e7-8c14-8409b6b12027.png). So if the scale is adjusting current step size the step of dC and SENS_GEO represents the second term, then the SENS_GEO would change when the scale is changed. But this is not the case for incompressible and compressible. . In short, the only noticeable change, due to scaling, occurs in deformation folder of DSN_002. But this is after the optimization step, which is really confusing. Scaling adjusts the current step size and because it can not find a sufficient decrease it is halving the dv_value. But then one should expect different values in the adjoint folder for different scale factors, right?. I hope you can use this information and can tell me whether it is a correct behavior of the optimizer. I should also note that I did not make use of constraints, just as in the test case. I read that the optimizer will switch from optimization procedure. I think this should not matter because of the test case. . I attached also the configure files (compressible (working, scale= 0.01) and incompressible (not working, scale =0.01)) and the mesh file, which is in both cases the same file. [compressible_cfg.txt](https://github.com/su2code/SU2/files/1155421/compressible_cfg.txt); [incompressible_cfg.txt](https://github.com/su2code/SU2/files/1155427/incompressible_cfg.txt); [mesh_300_su2.txt](https://github.com/su2code/SU2/files/1155430/mesh_300_su2.txt). I hope I provide enough information so that one can clarify the behavior of the optimizer. I also appreciate if one can tell me which variables have to be kept in mind. I really want to learn from this and if more information is needed, I really do not mind to provide it. Many thanks in advance!. Floris van der Schuur",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316018103:3665,optimiz,optimizer,3665,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316018103,6,['optimiz'],"['optimization', 'optimizer']"
Performance,"1. & 2. I believe I have addressed these comments in my subsequent commits. ; 3. I will need some time to look into this, but it would be orthogonal to what was done in this work.; 4. This is a trivial change, and I'll be happy to make it when single precision support is added. The JIT features support both single and double precision.; 5. Could you suggest a RANS case for me to run to check performance?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/543#issuecomment-413024928:395,perform,performance,395,https://su2code.github.io,https://github.com/su2code/SU2/pull/543#issuecomment-413024928,1,['perform'],['performance']
Performance,"2-440f-11e5-8681-b68318da0ce7.png). SU2_DEF output when only ""airfoil"" marker included:. ``` c++; ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid. ----------------------- Volumetric grid deformation ---------------------; Performing the deformation of the volumetric grid. # FGMRES residual history; # Residual tolerance target = 4.14044e-11; # Initial residual norm = 15.8102; 0 1; 50 2.17385e-06; 100 1.08998e-10; # FGMRES final (true) residual:; # Iteration = 105: |res|/|res0| = 3.50764e-11. Non-linear iter.: 1/1. Linear iter.: 105. Min. area: 4.1019e-08. Error: 5.54565e-10. ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 1.039217 seconds on 1 core. ------------------------- Exit Success (SU2_DEF) ------------------------; ```. ![image](https://cloud.githubusercontent.com/assets/5167760/9294056/7be9439a-440f-11e5-862f-742246ef1565.png); SU2_DEF: output when deforming with all markers included:. ``` c++; ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid.; No surface deformation (scaling, rotation, or translation). ----------------------- Volumetric grid deformation ---------------------; Performing a translation of the volumetric grid.; Translational displacement: (1, 0, 0). ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 0.716938 seconds on 1 core.; ```. as far as I can tell the regression test failure is the same as for the current develop branch; I'll update this pull request whenever that is resolved.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-131578218:1434,Perform,Performing,1434,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-131578218,2,['Perform'],['Performing']
Performance,"; 		aux = (struct.unpack('33s',data[20+(i)*33:20+(i+1)*33])[0]); 		for j in range(len(aux)):; 			if aux[j] == ""\x00"":; 				break; 		variables_names.append(aux[:j]). 	# Read data in one shoot; 	start = 20 + nvar*33; 	end = start+nvar*ndof*8; 	array = np.asfarray(struct.unpack('%dd'%(nvar*ndof),data[start:end])); 	array = array.reshape(ndof,nvar). 	# The last two values are for metadata: one int for ExtIter and 8 su2doubles.; 	# Metadata: 1 int for ExtIter and 8 doubles; 	#ncount = len(data) - nvar*ndof*8 - 4 - 64; 	ExtIter = struct.unpack('i',data[end:end+4])[0]; 	metadata = struct.unpack('8d',data[end+4:end+4+8*8]). 	# Create dictionary; 	data_file = {'names':variables_names,'data':array, 'ExtIter':ExtIter, 'MetaData':metadata}; 	return data_file. def read_restart_ascii(filename):; 	""""""; 	; 	""""""; 	infile = open(filename, 'r'); 	header = infile.readline(); 	variables_names = header.replace(""\"""","" "").replace(""\t"", "" "").strip().split()[1:]; 	infile.close(); 	; 	array = np.loadtxt(filename, skiprows = 1). 	array = array[:,1:]; 	; 	# Create dictionary; 	data_file = {'names':variables_names,'data':array, 'ExtIter':0, 'MetaData':[]}	; 	return data_file. def write_restart_binary(data_file,filename=""solution_flow_bin.dat""):; 	"""""". 	""""""; 	fout = open(filename,'wb'). 	# The first is a magic number that we can use to check for binary files (it is the hex; 	# representation for ""SU2"").; 	fout.write(struct.pack('i', 535532)). 	# The second two values are number of variables and number of points (DoFs).; 	nvar = data_file['data'].shape[1]; 	ndof = data_file['data'].shape[0]; 	fout.write(struct.pack('i', nvar)); 	fout.write(struct.pack('i', ndof)); 	fout.write(struct.pack('i', 1)); 	fout.write(struct.pack('i', 8)). 	# Write the variable names of the file. Note that we are adopting a; # fixed length of 33 for the string length to match with CGNS.; 	for variable_name in data_file['names']:; 		fout.write(struct.pack('33s', variable_name)); 	; 	# Write the entire data in one shoot; 	fo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-528461173:2203,load,loadtxt,2203,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-528461173,1,['load'],['loadtxt']
Performance,"; phiR = phi.getVec(jPoint,iVar) + limiter.getVec(jPoint,iVar)*phiR;. FltVec flux = (phiL+phiR)*0.5;. for(size_t k=0; k<SIMDLEN; ++k) {; residual(iPoint[k],iVar) += flux[k];; residual(jPoint[k],iVar) -= flux[k];; }; }; ```; Note that at the end of the loop we need to de-swizzle the flux to update the multiple indexes references by iPoint and jPoint, which are now short arrays of integers (this operation can be moved to the container, akin to `getVec` but I show it here for clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13:; vpmuludq ymm0, ymm4, ymm1; vmovq xmm15, rax; vmovapd ymm6, ymm11; mov rdx, rax; vpbroadcastq ymm15, xmm15; sal rdx, 5; add rax, 1; vpaddq ymm0, ymm0, ymm2; vpsllq ymm0, ymm0, 32; vpaddq ymm0, ymm5, ymm0; vmovdqa YMMWORD PTR [rbp-240], ymm0; vpaddq ymm0, ymm3, ymm0; vmo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:8727,cache,cache,8727,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['cache'],['cache']
Performance,"; | |; | You should have received a copy of the GNU Lesser General Public |; | License along with SU2. If not, see <http://www.gnu.org/licenses/>. |; -------------------------------------------------------------------------. ------------------------ Physical Case Definition -----------------------; Input mesh file name: mesh_NACA0012_inv.su2. -------------------------- Output Information ---------------------------; The output file format is Tecplot ASCII (.dat).; Flow variables file name: flow. ------------------- Config File Boundary Information --------------------; +-----------------------------------------+; | Marker Type| Marker Name|; +-----------------------------------------+; | Euler wall| airfoil|; +-----------------------------------------+; | Far-field| farfield|; +-----------------------------------------+. ---------------------- Read Grid File Information -----------------------; Two dimensional problem.; 5233 points before parallel partitioning.; Performing linear partitioning of the grid nodes.; 10216 interior elements before parallel partitioning.; Executing the partitioning functions.; Building the graph adjacency structure.; Distributing elements across all ranks.; 2 surface markers.; +------------------------------------+; | Index| Marker| Elements|; +------------------------------------+; | 0| airfoil| 200|; | 1| farfield| 50|; +------------------------------------+; Calling ParMETIS... graph partitioning complete (1114 edge cuts).; Distributing ParMETIS coloring.; Rebalancing vertices.; Rebalancing volume element connectivity.; Rebalancing markers and surface elements.; 6403 vertices including ghost points. ; 11338 interior elements including halo cells. ; 11338 triangles.; Establishing MPI communication patterns.; Identify vertices.; Storing a mapping from global to local point index. ------------------------- Solution Postprocessing -----------------------. Error in ""void CBaselineSolver::SetOutputVariables(CGeometry*, CConfig*)"": ; ---------",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-514630913:3199,Perform,Performing,3199,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-514630913,1,['Perform'],['Performing']
Performance,";. #pragma omp simd; for(size_t k=0; k<blkSz; ++k); {; coeffs[bii+k] += blk_i[k]; coeffs[bij+k] = +blk_j[k];; coeffs[bji+k] = -blk_i[k]; coeffs[bjj+k] -= blk_j[k];; }; }; ```; This is **47% faster**, which for a memory bound task is massive!; Yes, this does increase the memory footprint a bit (makes CSysMatrix 4% larger for a 3D problem) but I can get that back by sharing sparsity patterns and maps across turbulence and bulk flow (I think @talbring was already working on this in the template linear solver branch he had started). We could also parallelize the matrix updates without colouring by setting only the off-diagonal coefficients and then setting the diagonal entries to the column sum.; It turns out that this is worse (by about 10%), maybe if the matrix were symmetric (row sum) but a column sum accesses blocks very far apart. Also we want to interleave compute and load/stores as much as possible to allow the CPU pipelining magic to mask the latency of the latter (even if it looks like you can only write the block after it is computed, CPU's have all kinds of buffers that allow the next loop iteration to begin while data is in flight). **Therefore colouring is the way to go.**. _Note: With vectorized numerics we insert blocks for 4 or 8 edges into the matrix at a time, the data for those inserts will be in a slightly weird format, which will make `SparseMatrix::updateBlocks` a bit harder on the eye, more on that later._. ## MUSCL Reconstruction; The MUSCL reconstruction, characteristic of upwind schemes, is the simplest building block to show the (negative) implications of storing the data as structures of arrays (SoA) on the performance of some operations.; Here is the most basic numerics you can think of, reconstruct and average (the dummy matrix loop was to benchmark the writes this is to benchmark the reads); ```c++; void computeResidual(size_t nVar,; size_t nDim,; const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,si",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:5021,load,load,5021,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,4,"['latency', 'load']","['latency', 'load']"
Performance,"<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; phiR -= grad.getVec(jPoint,iVar,iDim)*d_ij[iDim];; }. phiL = phi.getVec(iPoint,iVar) + limiter.getVec(iPoint,iVar)*phiL;; phiR = phi.getVec(jPoint,iVar) + limiter.getVec(jPoint,iVar)*phiR;. FltVec flux = (phiL+phiR)*0.5;. for(size_t k=0; k<SIMDLEN; ++k) {; residual(iPoint[k],iVar) += flux[k];; residual(jPoint[k],iVar) -= flux[k];; }; }; ```; Note that at the end of the loop we need to de-swizzle the flux to update the multiple indexes references by iPoint and jPoint, which are now short arrays of integers (this operation can be moved to the container, akin to `getVec` but I show it here for clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:8524,perform,perform,8524,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['perform']
Performance,"> * Not mission critical but in the raw logs each line has some lengthy timestamp. Is it possible to get rid of that?; > ; > `2019-10-29T14:12:02.9434263Z sim_vals (computed): -1.293870, 4.141024, -0.002288, 0.008868`. I don't think so. Maybe they'll add that in the future. > * Can you say a few words about resources we get from github? #parallelcores/processes, time-per-month. 20 concurrent jobs. There is no limitation in the time-per-month for public repositories. Every job has 2 cores, 7GB of memory and 14GB of disk space. Source:; https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions#usage-limits; https://help.github.com/en/github/automating-your-workflow-with-github-actions/virtual-environments-for-github-actions#supported-virtual-environments-and-hardware-resources",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/806#issuecomment-547509688:384,concurren,concurrent,384,https://su2code.github.io,https://github.com/su2code/SU2/pull/806#issuecomment-547509688,1,['concurren'],['concurrent']
Performance,"> 1.How does this relate to my new PR #921? Should I close that one, since the shape optimization is going to be overhauled anyways?. @clarkpede this is going to take a while to implement (on the order of months). In the mean time, it would still be good to fix the issue you bring up in #921, if it is an easy fix. If you think the fix is going to be on the same order of time, then might not be worth investing the effort if it is going to get overhauled anyway. . As for the post-processed objective functions, I am planning on fully incorporating #913 into this work so that any variables that can be defined using the expression language, can be used as an objective function. According to that PR, the post-processing has been auto-differentiated as well, so getting gradients should be automatic as well. . @talbring I agree with all of your points. I especially want to extract the FFD functionality and expose CGeometry and CConfig functions to python. I haven't used swig before so I need to do some homework. And yes, this PR is called Shape Optimization overhaul but I am hoping the changes made here are general enough that they can be used in a plethora of other situations. If I end up being myopic in any of the refactoring, please point it out :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/923#issuecomment-607953901:85,optimiz,optimization,85,https://su2code.github.io,https://github.com/su2code/SU2/pull/923#issuecomment-607953901,2,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"> 2, g. I follow your instruction and try to rebuil it. The size of SU2_CFD.exe reduces to 596MB. Maybe I need more optimization options.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/754#issuecomment-519749680:116,optimiz,optimization,116,https://su2code.github.io,https://github.com/su2code/SU2/issues/754#issuecomment-519749680,1,['optimiz'],['optimization']
Performance,"> > Hi @rois1995 any progress? Would be very interesting to add this to develop, looking forward to using it actually.; > ; > Hi @bigfooted, unfortunately I do not have enough time/computational power to perform a proper validation. I only tried something with a NACA0021 at 17 deg and 60 deg and they were promising, at least for the DDES implementation. The SAS ones are not that good. I'll upload some post-processing as soon as I have the time to do so. Hi @rois1995, I believe there is an error or a typo in the Babu's paper in the Q_SAS source term and in turn in your implementation, which may be the reason for the poor performance in SAS results. . ![image](https://github.com/user-attachments/assets/5791d344-967a-4cc5-b512-457b7fe61435). This term changes units depending on the output of the max function, which doesn't make any sense. I believe the terms in the max function should be divided by omega^2 and k^2 instead of omega and k, respectively. Which is exactly how it is done in [https://resolver.tudelft.nl/uuid:5d23e2a6-5675-450d-bf3d-1dd40d736cae](url). I will try some of the benchmark cases in these papers when I have the time. Let me know what you think.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2447067474:204,perform,perform,204,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2447067474,2,['perform'],"['perform', 'performance']"
Performance,"> > I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .; > ; > There is the geometry toolbox for dot product and normal: https://github.com/su2code/SU2/blob/master/Common/include/toolboxes/geometry_toolbox.hpp just look in the code for examples, in vscode you can search for GeometryToolbox::DotProduct or GeometryToolbox::Norm. The problem is more related to the finding of the wall-normal for a point within the volume mesh, not to the computations that it will be involved in.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1429614350:488,perform,perform,488,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1429614350,1,['perform'],['perform']
Performance,> @EvertBunschoten even if the performance isn't great this is a pretty small change so I think we can merge it. Do you have time to wrap it up and add a simple regression test?. I just added a test case and tutorial under the TestCases and Tutorials repo under the same branch name. I'm also writing a short tutorial on the SU2 website repo.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2152#issuecomment-2271237145:31,perform,performance,31,https://su2code.github.io,https://github.com/su2code/SU2/pull/2152#issuecomment-2271237145,2,['perform'],['performance']
Performance,"> @bigfooted out of curiosity, how does a non-planar FFD box affect the deformation/optimization process?. When deforming a mesh, there can be mesh nodes close to the edge (planar sides) of the box that are either inside or outside of the box, depending on how you the nonplanar face ABCD is interpreted. This ambiguity can be resolved by either splitting the face into 2 triangles over a dividing line AC or BD, or by defining an average middle point and dividing the plane into 4 triangles.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1742#issuecomment-1225218421:84,optimiz,optimization,84,https://su2code.github.io,https://github.com/su2code/SU2/pull/1742#issuecomment-1225218421,1,['optimiz'],['optimization']
Performance,"> @kursatyurt Hello, thank you so much for the lead.; > ; > Our initial scope mostly involved writing our own kernels and I did explore some libraries at the start - I was planning on using CUSP as well but my main concern was its lack of being updated to the newly compatible versions of the toolkit. cuSolver and cuBLAS do exist, but I chose to go ahead with a ""simple"" kernel implementation to have more control. I also felt that if I could keep the block size of the grid in optimal territory then they could be just as fast as those options (please do correct me if my reading of the literature or the situation was incorrect). To learn the basics, it's a good idea, but for large-scale projects, I prefer using existing libraries if possible.; Those libraries generally exploit state-of-the-art solution like mixed-precision computing. A gaming GPU is not way faster than a good CPU in double precision, but way faster in single precision, most of them have 64:1 ratio, however server class GPU have 2:1 ratio. Also when available they use vendor libraries like cuBLAS or hipBLAS. It is always nice to have you only care about connection and somebody else handle the solver as performant as possible. In future probably they will provide more and more solvers and it will be automagically works. It is kind of light-weight too, not a huge dependency like Trilinos or PETSc. ; > ; > I was not aware of Ginkgo and I will surely give it a go and try to produce some comparative results. I am currently super busy for this month and will get to working on the code with some delay.; > ; > Again, thank you for the lead!. I can test on various GPUs (P100/V100/A100 and 4070Mobile) on single node multi-gpu etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2346#issuecomment-2397803409:1183,perform,performant,1183,https://su2code.github.io,https://github.com/su2code/SU2/pull/2346#issuecomment-2397803409,2,['perform'],['performant']
Performance,"> Are you talking about shape optimization with re-meshing?; > If yes, people are already working on restart with interpolation (@jayantmukho @bmunguia ); > Otherwise, SU2 already restarts when doing shape optimization. Is restart with interpolation already in the latest repo? It would be very useful for running remeshed but roughly similar cases! Thanks.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/852#issuecomment-586816457:30,optimiz,optimization,30,https://su2code.github.io,https://github.com/su2code/SU2/issues/852#issuecomment-586816457,2,['optimiz'],['optimization']
Performance,"> Are you talking about shape optimization with re-meshing?; > If yes, people are already working on restart with interpolation (jayantmukho bmunguia ); > Otherwise, SU2 already restarts when doing shape optimization. Yes, but also for other cases where some small modification on the geometry were made, it wouldn't be necessary to simulate from scratch, since the flow should have almost the same behavior. I modificated the @EduardoMolina's script in order to add interpolation and some other modifications. It resulted in a much faster convergence in a simulation of a 2D nozzle, with a reduction of about 1000 iterations. However, the script wrote in Python is very slow, probably rewriting it on c/c++ would give a much better performance. Pastebin of the script: [https://pastebin.com/LyWSp85U](https://pastebin.com/LyWSp85U); [SU2_initial_guess.zip](https://github.com/su2code/SU2/files/4113038/SU2_initial_guess.zip)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/852#issuecomment-578454512:30,optimiz,optimization,30,https://su2code.github.io,https://github.com/su2code/SU2/issues/852#issuecomment-578454512,3,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"> Could you elaborate more on this?? Let me explain a typical scenario I would go through (picking BCs as an example):; > ; > * I should be able to construct my custom BC inheriting from one of the existing ones. Put this new BC_TYPE boundary condition in my dynamically-linked library.; > ; > * BUT no recompiling of SU2_CFD; the program should provide facilities to dynamically load libs at RUNTIME (e.g. list of custom ibs in case config file).; > ; > * Now, switching between my custom BC types and the standard ones only requires to edit the config file. For example, the inlet BC of the SA turbulence model is defined in CTurbSASolver::BC_Inlet(); We can place this definition in a separate file bcinit.cpp and dynamically link this file so you have a libbcinit.so file. SU2 knows about libbcinit.so and BC_Inlet() at compile time. ; In your testcases directory, you can put a copy of bcinit.cpp and redefine the boundary condition BC_Inlet. If you change the boundary condition, you only compile bcinit.cpp in your testcase directory and create a libbcinit.so in your testcase directory. You then make sure that when SU2 is looking for dynamically linked libraries, it searches your testcase directory before it searches the SU2 installation directory. . As you see, this can be used for redefining existing (at compile time) functions and modifying its content. I find it especially useful for creating custom initial conditions. If you want to create a completely new custom boundary condition BC_Custom(), it is probably easiest to predefine this structure and create a custom_bc option in the config file. In a CFD problem, there are only a limited number of possibilities (for types of boundary conditions, and systems of equations), so I'm not sure when a BC_Custom() is useful, or when the tipping point is where self-registering classes will become useful for its implementation. Recompiling the code completely takes maybe 2 minutes for me, so I never saw compiling times as a problem.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-680758665:380,load,load,380,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-680758665,1,['load'],['load']
Performance,"> Do I understand correctly that two gradients are always computed per iteration?; > Is there any downside to using the unweighted LS for viscous flux correction? Is the statement that this type of gradient is better for reconstruction based on your observations or is it one of those well known things?. Yes - the gradient for now is computed twice and stored separately for viscous flows with 2nd-order upwind. Could be combined into one loop eventually. It is known that weighted LSQ / GG is more accurate (see Mavriplis, ""Revisiting the Least-Squares Procedure for Gradient Reconstruction on Unstructured Meshes"" for instance). However, unweighted LSQ is known to be more robust.. so a good compromise is to use it only for the reconstruction step (which is more susceptible to robustness issues than the viscous term) and then use WLSQ or GG for all other gradients in the viscous flux/sources for accuracy. > Sometimes high CFL leads to limit-cycle oscillations of the residuals and the solution is to reduce it, is this something this controller can pick up?; > High CFL also makes the linear systems harder to solve and as Edwin pointed out _somewhere_ there is not much point going above reasonable values with weakly coupled turbulence. Do you think it would be reasonable to build in some feedback from the linear solver (e.g. it is taking too much time or did not converge -> drop the CFL)?. Yes, I would also like to couple it to the linear solver so that we can remove the need to tune that as well. Ideally the user will not need to adjust parameters. There are some things I am going to try for that..",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-531890295:1495,tune,tune,1495,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-531890295,2,['tune'],['tune']
Performance,"> Ettore, Thanks for submitting this. I thought you gave an excellent presentation at the SU2 Conference and the much better actuator disk model you and your colleagues have put together will surely be useful to many people. Thanks for participating and being a member of the SU2 Community. Please stay healthy and well and I hope to meet you in person next time we have a meeting (fingers crossed‚Ä¶.maybe next year?). Best wishes, Juan; > [‚Ä¶](#); > On Jun 18, 2020, at 1:27 AM, SaettaE ***@***.***> wrote: Proposed Changes Addition of a new actuator disk model with a variable load and swirl distributions along disk radius. Contributors: Theoretical and Applied Aerodynamic Research Group (TAARG) of University of Naples Federico II. EttoreSaetta, lorenzorusso07, rtogna. Related Work Introduction of new options in the config. file. Introduction of an additional input file that contains the propeller data. Introduction of additional c++ functions. Addition of code lines to existing functions preserving the original actuator disk model. PR Checklist [X ] I am submitting my contribution to the develop branch. My contribution generates no new compiler warnings (try with the '-Wall -Wextra -Wno-unused-parameter -Wno-empty-body' compiler flags). [ X] My contribution is commented and consistent with SU2 style. I have added a test case that demonstrates my contribution, if necessary. I have updated appropriate documentation (Tutorials, Docs Page, config_template.cpp) , if necessary. You can view, comment on, or merge this pull request online at: #1027 <#1027> Commit Summary Update config_template.cfg File Changes M config_template.cfg <https://github.com/su2code/SU2/pull/1027/files#diff-2c2f226c0183e7633cf165c6d3862450> (5) Patch Links: https://github.com/su2code/SU2/pull/1027.patch <https://github.com/su2code/SU2/pull/1027.patch> https://github.com/su2code/SU2/pull/1027.diff <https://github.com/su2code/SU2/pull/1027.diff> ‚Äî You are receiving this because you are subscribed to this t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1027#issuecomment-646601487:577,load,load,577,https://su2code.github.io,https://github.com/su2code/SU2/pull/1027#issuecomment-646601487,1,['load'],['load']
Performance,"> Great! I did not run flamelet + CHT in a full optimization loop, yet. My next step is to validate gradients and add a regression test for the adjoint of flamelet + CHT.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1917#issuecomment-1447237033:48,optimiz,optimization,48,https://su2code.github.io,https://github.com/su2code/SU2/pull/1917#issuecomment-1447237033,1,['optimiz'],['optimization']
Performance,"> Hi @rois1995 any progress? Would be very interesting to add this to develop, looking forward to using it actually. Hi @bigfooted, unfortunately I do not have enough time/computational power to perform a proper validation. I only tried something with a NACA0021 at 17 deg and 60 deg and they were promising, at least for the DDES implementation. The SAS ones are not that good. I'll upload some post-processing as soon as I have the time to do so.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-1983515044:195,perform,perform,195,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-1983515044,1,['perform'],['perform']
Performance,"> I do not have a good grasp on the performance of each scheme. I fear that may be a much time-intensive task, particularly since these all are implicit at the moment. I'm thinking just run this test case out to convergence for each scheme then comparing convergence histories. That way if any don't converge, we know we're not grandfathering in broken cases/schemes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1885#issuecomment-1381005993:36,perform,performance,36,https://su2code.github.io,https://github.com/su2code/SU2/pull/1885#issuecomment-1381005993,1,['perform'],['performance']
Performance,"> I don't understand the question very well. The order of the points needs to be according to the VTK hexahedron http://www.princeton.edu/~efeibush/viscourse/vtk.pdf I can't visualize where you are getting that deformation, but when using an FFD box that does not include the entire design surface you need to be careful with the continuity of the deformation to prevent creating discontinuous steps. Mmmh I see. It looks like the blade elements are extending beyond the blade surface itself and, therefore, are cut by the FFD box even if the whole geometry appears to be included withing the FFD box domain. I solved the issue by defining an user-defined fixing plane (very cool option, btw). I experienced a similar situation with an internal flow over cylinder, too.; My question was whether this behavior was mesh-dependent or FFD box-dependent. I guess it is reasonable to say that mesh elements extension beyond the body which we're optimizing is causing this, however FFD continuity allows to keep this dummy shape deformation from happening. . Secondly, I had MAX DIFF = 0 because I couldn't understand your correction properly. I had to consider the righ-hand rule third component (_thumb_) pointing inside the FFD box for each of the surfaces we establish when attaching the FFD box (_each of those defined by the points listed in FFD_DEFINITION_). Then it worked perfectly.; Still, I don't understand why for some geometries we apply what discussed in the [tutorial](https://su2code.github.io/tutorials/Species_Transport/) and here it is the opposite. At least I know what to expect and how to fix it. If you could add an alert message in the next SU2 version, that would be much appreciated. > Well, it's the F-FFD week it seems :) https://www.cfd-online.com/Forums/su2/249879-when-use-su2_def-generate-ffd-box-i-can-not-get-ffd_surface_points.html. It's sunday: is the week ending or starting? ahah I guess we both stopped counting ;); As always, thank you very much for the time you're s",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2025#issuecomment-1546805169:939,optimiz,optimizing,939,https://su2code.github.io,https://github.com/su2code/SU2/issues/2025#issuecomment-1546805169,1,['optimiz'],['optimizing']
Performance,"> I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp . There is the geometry toolbox for dot product and normal:; https://github.com/su2code/SU2/blob/master/Common/include/toolboxes/geometry_toolbox.hpp; just look in the code for examples, in vscode you can search for GeometryToolbox::DotProduct or GeometryToolbox::Norm",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1426019269:486,perform,perform,486,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1426019269,1,['perform'],['perform']
Performance,"> I think the issue is looping jSpan between 0 and nSpanDonor-1, I think it should be looped between 1 and nSpanDonor-2 (as is done in the higher level of the for loop) as the hub and shroud are handled seperately and there is no interpolation performed here. Admittedly, this is probably the area of the turbomachinery code I am most unfamiliar with. Thanks @joshkellyjak! I'll try this.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2034531618:244,perform,performed,244,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2034531618,1,['perform'],['performed']
Performance,"> In principle sounds good, it will probably break lots of cases, optimization scripts and what not. We'll see, we are not leaving this inconsistent though, all or nothing. I agree.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2079#issuecomment-1631908837:66,optimiz,optimization,66,https://su2code.github.io,https://github.com/su2code/SU2/pull/2079#issuecomment-1631908837,1,['optimiz'],['optimization']
Performance,"> In the discrete adjoint we always to a dry run before the real recording, maybe that could be use to recompute the CFL at 0 overhead?. Isn't that what we were doing before? While I also generally wouldn't want to rely on file I/O, my issues with how we had it were ; 1) if the final CFL of the primal solver was large then even adapting in the dry run would have a much lower CFL, which resulted in super slow adjoint convergence making it a huge (or at least more than necessary) bottleneck in optimization/mesh adaptation; 2) sometimes I would get divergence when adapting in the dry run even with converged primal solutions. Storing the CFL would at least recreate the state at primal convergence, which should be stable if the CFL adaptation is reliable. But maybe this idea is better suited for the python wrapper where we could just keep everything in memory.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1036#issuecomment-739075301:483,bottleneck,bottleneck,483,https://su2code.github.io,https://github.com/su2code/SU2/pull/1036#issuecomment-739075301,2,"['bottleneck', 'optimiz']","['bottleneck', 'optimization']"
Performance,"> In the early days, we thought completely removing CVariable and CNumerics would be very intrusive to change and would hurt flexibility... Over the years, I don't think that folks have really modified the CNumerics classes all that often (once you have implemented the Roe method, it is more or less done). As someone who has worked with the CNumerics classes a lot, I can say that we really don't gain much by keeping them as separate classes. On the surface, it seems like a good use of the [strategy pattern](https://sourcemaking.com/design_patterns/strategy). But from a pragmatic approach, it's not as flexible as OO purists would like you to believe. First off, if you need a new variable in the CNumerics class, you need to change both the solver class and the numerics class, since the solver class calls Setters to set the numerics variables. If you don't call the right Setters, you get a silent failure (unless you're using valgrind). The passing of variables between solver and numerics also leads to a lot of code duplication. And for many solvers (e.g. the viscous NS numerics or the source terms in the SST model) you only end up with one numerics class anyways. I also imagine there's a strong performance hit from all the Setters and copying of variables. But I haven't taken the time to check for myself. In my opinion, you could keep 80% of the current flexibility by using different functions instead of different classes. But I also think we would have to work carefully, or else we'll make the code harder to maintain.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-514020687:1211,perform,performance,1211,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-514020687,1,['perform'],['performance']
Performance,"> Just put the default definition of the function in a dynamically linked library and when you want to use a different definition of this function, just point your library path to your custom library in e.g. your testcases directory. Could you elaborate more on this?? Let me explain a typical scenario I would go through (picking BCs as an example):; - I should be able to construct my custom BC inheriting from one of the existing ones. Put this new BC_TYPE boundary condition in my dynamically-linked library.; - BUT no recompiling of SU2_CFD; the program should provide facilities to dynamically load libs at RUNTIME (e.g. list of custom ibs in case config file).; - Now, switching between my custom BC types and the standard ones only requires to edit the config file. As I understand,; - Dynamically loading a library specified in the config file at runtime is easy. ""dlopen"" is there, and possibly more sophisticated libraries?; - The issue is that there is no way to ""select"" the new BC because it was not known at compile-time.; - Most of the code is built around the assumption of ""knowing things"" at compile time. So a series of if statements checking the setting in the config file was the way to go. If the setting in the config says EULER; The Euler BC gets picked up. But what if it says Custom_EULER?. I got distracted by some other stuff. But here is the thing:; - All BCs should inherit from a Base Class (Assuming BCs are classes to begin with); - The selection mechanism will rely on the custom BC class registering itself to a Factory automatically.; - Through the magic of templates and macro expansion, it's possible to easily add the custom BC to the map of known BCs (Yet to be implemented). If this interests you and if you think there is a decent chance of incorporating this design into the code, please let me know. I will give this a higher priority :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-679979421:600,load,load,600,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-679979421,2,['load'],"['load', 'loading']"
Performance,"> Method described below.; > No config options needed.; > Takes about a minute to interpolate an 8M node mesh to a 70M mesh on 1000 cores.; > May or may not add OpenMP to this which would improve scalability.; > Restarts are read twice for RANS problems, which is not great for this type of feature... This is a great addition, I am now doing this outside of SU2 with some python code, but having this native in SU2 is really great! I haven't looked at the details yet, but I guess the assumption is that the geometry stay the same, we only have a finer mesh? Also, the 'restarts are read twice for RANS' is that a general issue when having additional solvers (like heat, scalar, nemo)?; Last thing (for now): Does it work when using an inlet.dat boundary file?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1277#issuecomment-830808518:196,scalab,scalability,196,https://su2code.github.io,https://github.com/su2code/SU2/pull/1277#issuecomment-830808518,1,['scalab'],['scalability']
Performance,"> So modifying the gradient + residual is an improvement and it's just the normals that cause issues? Or the change to the residual is also problematic?. The modification of the Green-Gauss gradients only is working correctly. If I take the normal velocity on the symmetry plane as a performance indicator, then I observe that there is a mean (or maximum) discrepancy $\Delta V$ for develop, which reduces to less than $0.5 \Delta V$ for the new GG.; [edit: additionally, the convergence behavior does not deteriorate for the GG modification]",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2194#issuecomment-1888699276:284,perform,performance,284,https://su2code.github.io,https://github.com/su2code/SU2/pull/2194#issuecomment-1888699276,1,['perform'],['performance']
Performance,"> Thanks for pointing that out. I dont think it is intentional. Maybe we can use this PR also to fix this ?. That depends on how atomic we want these PRs to be. This PR is largely a refactoring PR, and shouldn't change any underlying performance. But adding extra calculations on source terms and wall conditions might change the performance of the code. The two changes are completely compatible, so combining them wouldn't be hard. Nevertheless, I propose we keep these changes separate, so that the purpose of each PR is clear and easy to see. In my mind, two small PRs are easier to check and review than one large PR. @talbring @economon What do you think? One big PR or two small PRs?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/626#issuecomment-458177675:234,perform,performance,234,https://su2code.github.io,https://github.com/su2code/SU2/pull/626#issuecomment-458177675,4,['perform'],['performance']
Performance,"> Thanks for the PR! I just have a single question: Why Set_MPI_MaxLength needed to be called 2 times for periodic boundaries?; > ; > LGTM! If Travis pass, we are ready to merge.; > Eduardo. To be honest, I don't know. I just know that that:. + Without calling it twice, the max length is not initialized on some of the periodic halo nodes.; + When you do call it twice, the max length is initialized on all periodic halo nodes. Something similar happens when loading a solution from a restart file, where the solver needs to do something like this:. solver[MESH_0][FLOW_SOL]->Set_MPI_Solution(geometry[MESH_0], config);; solver[MESH_0][FLOW_SOL]->Set_MPI_Solution(geometry[MESH_0], config);. @economon Do you know why the MPI calls need to be made twice?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/649#issuecomment-463668790:460,load,loading,460,https://su2code.github.io,https://github.com/su2code/SU2/pull/649#issuecomment-463668790,1,['load'],['loading']
Performance,"> The FFD is defined in a way that makes all points fail the ""point inside box"" check, we need to improve the user-friendliness of this check, try using this order of the points for ffd setting. Applying the right-hand rule to the first 4 points must point into the center of the FFD 0.0134584, 0.0087787, -0.035265, 0.0108551, 0.00980938, -0.041096, 0.00734385, 0.013199, -0.0388281, 0.0114466, 0.0124845, -0.0326164, 0.0276521, 0.0238333, -0.0393685, 0.0240801, 0.0278683, -0.0456933, 0.0203954, 0.0303584, -0.0422846, 0.0246565, 0.0271419, -0.035573). I checked but it works only for this specific mesh. When I apply the same FFD box generation for the diffuser (following the righy-hand rule), I still obtaind MAX DIFF = 0. . In [this tutorial](https://su2code.github.io/tutorials/Species_Transport/), the FFD box points ordering is counterclockwise and I always performed my optimization with this kind of FFD box. I cannot understand if this behavior is mesh dependent or it just me not understanding the way you ordered your points therefore my impossibility to replicate your FFD attachment is the correct way. Also, could this issue be the origin of this weird shape deformation? . ![image](https://github.com/su2code/SU2/assets/96534491/c2ff9f0b-26db-426e-96c9-6157e2a20891)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2025#issuecomment-1546644391:867,perform,performed,867,https://su2code.github.io,https://github.com/su2code/SU2/issues/2025#issuecomment-1546644391,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"> The fixed-Cl mode is not active during adjoints, the AOA is just taken from the metadata. I.e. you would propose to try to disable the delta-pressure udpdate during the adjoint for prescribed massflow? In my understanding that would result in an inconsistent gradient -> which might work good enough for optimizations but in a gradient validation I would expect significant deviations. > If something is determined iteratively, then I think it is a solution variable, [...]. So it is settled then -> I will try to give pressure-drop the same treatment as regular solution variables as mentioned in point 2. of the PR description.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1030096530:306,optimiz,optimizations,306,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1030096530,1,['optimiz'],['optimizations']
Performance,"> The solution I suggested didn‚Äôt work?. I still have to check if the implementation is correct but with more than two cores the code breaks. However, I found out that the wall-normal of a volume point can be computed as the normalized gradient of the wall-distance. Does this sound correct to you? . However, there is a problem: I am using the aux variables to compute these gradients, but to compute dot(n, U) I first need n, thus I cannot compute them simultaneously. Since these computations are performed in the Preprocessing of the solvers, I was thinking to compute the normal within the FLOW_SOL preprocessing and the dot(n, U) in the TRANS_SOL preprocessing since the flow solver comes before the trans solver. Is this right?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1429962062:500,perform,performed,500,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1429962062,1,['perform'],['performed']
Performance,"> There are a couple of small tweaks that need to be made to the python scripts to make sure the changes I pushed for multipoint optimizations work with this new output structure. There are also a few changes that need to be made to make sure that at the end of the fixed CL mode, the code outputs the flow state before the finite-differencing takes place.; > ; > It might be easiest if I make those changes and push them. Would that be a hassle? Should I just comment on the code and let you make the changes?. Seems like you merged this one already in #780, then modify it there I would say.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-536924652:129,optimiz,optimizations,129,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-536924652,1,['optimiz'],['optimizations']
Performance,"> There was a lot of talk about refactoring the shape optimization framework to be able to work completely in memory.; > I think the idea was not to have more drivers but simply to have more granularity such that you could manipulate the geometry from python (without writing it to files).; > We also wanted introspection, i.e. you could probe SU2 via python for what variables and functions are available.; > We also talked about having the projection step (DOT) included in CFD_AD so that you only need to worry about surface sensitivities, note that DEF is already part of CFD for forward mode AD.; > (talking does not go very far); > ; > If you want to lead this work, we can help you understand the inner workings. We meet every Wednesday at 4pm CET https://meet.jit.si/SU2_DevMeeting to discuss this type of issue. Thank you for the quick reply. The discussions you mention sound very promising, I would be glad to join tomorrow afternoon and learn more, so that I might contribute. One quick remark: I am aware that it is indeed possible to deform the mesh within `SU2_CFD`, I use this extensively for static aero-elastic analysis. However, I have not been able to have the deformed mesh be written to file at output (in SU2 or CGNS format). This is fine for aero-elastic updates (movement of the surface due to _structural displacements_), where it is sufficient to see the deformed mesh in the post-processing files. It becomes impractical though, for design updates (movement of the surface to due to _design displacements_, i.e. representing changes in the design variables) where the new mesh is a useful intermediate result. Even if this is just an issue in my configuration file, I think that a stand-alone driver or equivalent of `SU2_DEF` would remain useful. For each new set of updated design variables during shape optimisation, a single mesh deformation is sufficient to provide the new, updated jig geometry which all of the aerodynamic or aero-elastic analyses (one for each oper",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1262#issuecomment-818839696:54,optimiz,optimization,54,https://su2code.github.io,https://github.com/su2code/SU2/issues/1262#issuecomment-818839696,2,['optimiz'],['optimization']
Performance,"> This looks pretty good! I think you should add a regression.; Thanks! Yeah good point, I'll work on making one. > Should an incompressible version be added as well?; Mmmm, that's a good question. I think physically for aerodynamic heating loads to be sufficiently high, you'd need to have a high enough Ma to ned the compressible solver. But maybe there are cases in the incompressible solver where you're dealing with high temperature flows and want to model the wall radiation out? Maybe this is already implemented in a more complex way?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1703#issuecomment-1179527393:241,load,loads,241,https://su2code.github.io,https://github.com/su2code/SU2/pull/1703#issuecomment-1179527393,1,['load'],['loads']
Performance,"> What if you start with the ""perturbed value"" of AoA and then set it to the correct value for the FD step?. Mhmm, I am just thinking this through. At the end of the fixed_cl part, the flow is converged to the `TARGET_CL` and is at some angle of attack `alpha`. If I wanted to start from the perturbed value and set it to the final value of `alpha`, I would have to first, converge it to the perturbed value (`alpha + 0.001`), and then perform the finite difference step back to `alpha`. This would take approximately twice the number of `ITER_DCL_DALPHA` to perform. Which isn't the end of the world, but I would like to avoid if possible. Is there a cleverer way of doing this that I am not thinking off? The problem is that we don't know the final `alpha` until the fixed_cl simulation converges.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539575775:436,perform,perform,436,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539575775,2,['perform'],['perform']
Performance,"> You may want to remove the string based interface since it's known to be inneficient. When replacing the string-based with index-based look-up methods, the performance improves substantially. The figure below shows the average measured evaluation time (measured with chrono library) vs the number of output variables. It's clear that using index-based look-up methods results in reduced query time, as well as improved scaling. ![scaling_nVars](https://github.com/su2code/SU2/assets/38651601/31252439-ac6e-4f1b-82d4-e13a55d54c98)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2214#issuecomment-1952521226:158,perform,performance,158,https://su2code.github.io,https://github.com/su2code/SU2/pull/2214#issuecomment-1952521226,2,['perform'],['performance']
Performance,"> `DEFINITION_DV= ( 11, 1.0 | blade | FFD_BOX, 0, 0, 0, 1.0, 1.0, 1.0 )`. This constrains the control point to move in a direction such that `dx = dy = dz` since the `DV_VALUE` would be applied to all directions equally. It will also project the adjoint gradients along that direction. . If you specify it as 3 different DVs, they will have three different `DV_VALUE`s, one for each direction. The gradients would be projected in each direction individually, giving the optimizer more freedom to move the point.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/977#issuecomment-628737617:470,optimiz,optimizer,470,https://su2code.github.io,https://github.com/su2code/SU2/issues/977#issuecomment-628737617,1,['optimiz'],['optimizer']
Performance,> miliar with cygwin but maybe you compiling with debug options (-g) ? What optimization level are you using?. I don't use any build optimizations particularly at all. I'll check it and try to add some optimizations as your instruction. Thank you.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/754#issuecomment-519737534:76,optimiz,optimization,76,https://su2code.github.io,https://github.com/su2code/SU2/issues/754#issuecomment-519737534,3,['optimiz'],"['optimization', 'optimizations']"
Performance,">@bmunguia ; > @EduardoMolina and I have discussed this over the past few weeks and are also in favor of using an external library. I don't have a strong opinion on the library we choose, but he seems to be in favor of [PETSc](https://www.mcs.anl.gov/petsc/) from ANL, which has a 2-clause BSD license and is used by ADflow (formerly SUmb), among other solvers. Eduardo could probably provide more details.; > ; > Another one that's come up in our discussions is [HYPRE](https://computation.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods) from LLNL which has a GNU LGPL. >@juanjosealonso ; >(...) While PETSc is a wonderful library (and parallel), I would hesitate to use it as the solution for the problem that we are trying to solve: it is not the easiest thing to compile and it is most definitely not lightweight. If one also wanted to replace Krylov-space solvers and preconditioners in SU2 the PETSc might make more sense‚Ä¶.but it still forces the developer to conform to their view of the world (including matrix setup and decomposition). (...). >@erangit; >I also support external libraries usage (no need to repeat the many advantages as it is well described above) but I think we should be very wary of portability issues. For instance in SUMB, PETSc was used for the Krylov solvers and more. While indeed it worked well and in parallel mode, each new implementation was a nightmare. LAPACK/BLAS package, on the other hand, provides a much easier implementation experience. Certainly, this is not the only consideration but it should be taken into account. Currently, resulting from the significant contributions of the members of this developers group, SU2 implementation works like a charm. I think we should strive to conserve this feature, especially if we aim at attracting more users and developers into the community. (...). >@vdweide; >(...) @bmunguia and @EduardoMolina, what type of application did you have in mind for PETSc? The only thing I can think of is a f",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460853218:515,scalab,scalable-linear-solvers-multigrid-methods,515,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460853218,2,['scalab'],['scalable-linear-solvers-multigrid-methods']
Performance,"@BBArrosDias : thanks for the question. At the moment, there are no plans for Cmake. If this is a major pain point for the community (or if someone in the community has already added it and would like to contribute it), we are happy to consider it. Overall, folks seem fairly pleased with how autotools is performing on many different platforms.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/646#issuecomment-459997523:306,perform,performing,306,https://su2code.github.io,https://github.com/su2code/SU2/issues/646#issuecomment-459997523,1,['perform'],['performing']
Performance,"@Cristopher-Morales any things left for this PR? If PASSIVE_SCALAR is changed to SPECIES_TRANSPORT, and if you have confirmed that the nondimensionalization works correctly, then from my side it will be good to go. You can put a tutorial and regression test for the adjoint optimization in the next PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1762#issuecomment-1264289112:274,optimiz,optimization,274,https://su2code.github.io,https://github.com/su2code/SU2/pull/1762#issuecomment-1264289112,1,['optimiz'],['optimization']
Performance,"@EduardoMolina and I have discussed this over the past few weeks and are also in favor of using an external library. I don't have a strong opinion on the library we choose, but he seems to be in favor of [PETSc](https://www.mcs.anl.gov/petsc/) from ANL, which has a 2-clause BSD license and is used by ADflow (formerly SUmb), among other solvers. Eduardo could probably provide more details. Another one that's come up in our discussions is [HYPRE](https://computation.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods) from LLNL which has a GNU LGPL.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459562945:493,scalab,scalable-linear-solvers-multigrid-methods,493,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459562945,1,['scalab'],['scalable-linear-solvers-multigrid-methods']
Performance,@EvertBunschoten even if the performance isn't great this is a pretty small change so I think we can merge it.; Do you have time to wrap it up and add a simple regression test?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2152#issuecomment-2269672071:29,perform,performance,29,https://su2code.github.io,https://github.com/su2code/SU2/pull/2152#issuecomment-2269672071,2,['perform'],['performance']
Performance,"@Mick7: yep, I‚Äôll look at that next. You may have noticed that the other routines for Loading and preparing adjacency are now general for any mesh reader, so all we need is to move the reader for the ASCII format into its own class. . @pcarruscag: there is at least one simple stretching function I have in some old code I can put in. Other elements would also be nice. It‚Äôs easy to cut the quads into tris (I have the same implementation for this in a python script) and hexas into tets. Might wait for a compelling need to add these features though, but I have no doubt we‚Äôll add them",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/728#issuecomment-524179517:86,Load,Loading,86,https://su2code.github.io,https://github.com/su2code/SU2/pull/728#issuecomment-524179517,1,['Load'],['Loading']
Performance,"@TobiKattmann ; I have added `README.md` to the testcase folder. Let me know what you think. I'm not exactly sure what I should write as expected outcome for discrete adjoint solver. Ultimately, it is used for shape optimization, so getting a better objective function is what I need to confirm but I cannot run a complete shape optimization in the test case with only a few iterations. What do you usually look for to confirm adjoint calculation is working as expected?. > I would highly appreciate if you add a little `README.md` to your testcase folder and explain a bit what that testcase is meant to showcase and what one is meant to see/look out for/expected outcome and just a hint how to use it (if that is explained in the cfg then just mention that). This will help down the road for anyone that wonders or has to fix a failing reg test and wonders what this is all about. You might also mention the PR number 1329 in there. Doesn't need to be a long text.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1329#issuecomment-894628152:216,optimiz,optimization,216,https://su2code.github.io,https://github.com/su2code/SU2/pull/1329#issuecomment-894628152,2,['optimiz'],['optimization']
Performance,@aeroamit I think the code should be performing. I think running your tests on the axisymmetric branch would helpful to get the effort pushed in :),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1063#issuecomment-736696152:37,perform,performing,37,https://su2code.github.io,https://github.com/su2code/SU2/issues/1063#issuecomment-736696152,1,['perform'],['performing']
Performance,"@bigfooted @economon and @pcarruscag . I created separate repo to demonstrate what I'm after in the simplest way possible: [FoamScience/AutoRegistering-Cpp-Classes](https://github.com/FoamScience/AutoRegistering-Cpp-Classes/commits/master). > If you're going to check the code, check CSolver first, then CEulerSolver ... - Commit FoamScience/AutoRegistering-Cpp-Classes@20ca601 implements the concept for a single Factory.; - (Make-believe) Standard solver classes are compiled to a library; - A (Make-beleive) Custom solver class is compiled to its own shared library; - By default, the make program knows only about CEulerSolver (from standard solvers lib); - But if you pass in a library name (eg. libCCustomSolvers.so), it gets loaded, symbols pulled and the registration map for CSolver gets updated with the new Solver automatically. - But it would bloat the code if things went this way, so commit FoamScience/AutoRegistering-Cpp-Classes@380c052 isolates self-registration code into 3 macros to:; - Declare the registration map and associated members; - Define and initialize registration-related members on the base class; - Register a class. If you only care about the interface and not how the thing is implemented, commit 380c052 is your target.; I took care to document the important parts of the code, so, please, dig in and let me know what you think. At this point, integrating this with SU2 (and at what parts, and when) is your call but If you decide to do so, l will help.; > And yes, I wrote my own build script so I can have direct control over the compiler and the linker. **One last note: I used ""dlopen"", so you will have to compile the code on Linux I suppose.**",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-680962672:732,load,loaded,732,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-680962672,2,['load'],['loaded']
Performance,"@bigfooted out of curiosity, how does a non-planar FFD box affect the deformation/optimization process?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1742#issuecomment-1224998077:82,optimiz,optimization,82,https://su2code.github.io,https://github.com/su2code/SU2/pull/1742#issuecomment-1224998077,1,['optimiz'],['optimization']
Performance,"@economon I was envisioning something similar to the TestCases folder. With v&v cases grouped according to what they are testing. Something along the lines of: . 1) Inviscid Simulations: ; a) 2D Inviscid bump; b) 2D oblique shocks interaction; c) ...; 2) RANS simulations: ; a) Flatplate; b) NACA0012; c) ...; 3) Unsteady simulations:; a) Square Cylinder; b) ...; 4) Turbomachinary: ; a) ... And so on. Each of the directories would have sub-directories for different mesh sizes, with configuration files for each mesh level that have optimized parameters for best results. So for example if we are talking about the NACA0012 case, we would have something along the lines of: . a) NACA0012; i) 113 x 33; ii) 225 x 65 ; iii) 449 x 129; iv) ... This way we have a family of meshes and configuration files that are specifically built for the purpose of validating the code and comparing with other solvers. I might be useful to compress meshes that are larger than a certain size (say 10MB). We should also put a limit on the size of a single mesh that the repository can handle (say 50MB?). . Within the home directory, the README file should list all the cases in the repository, who the custodian of the test case is (person with meshes in case the meshes are too large), and which version it was last run on. . I thought about splitting it up into Verification cases and Validation cases, but I thought it would be more informative and intuitive to split up according to the physics of the simulations. My thinking might be limited because that's how I have seen the TestCases folder organized, so any other suggestions are welcome. I think it is imperative that this is accompanied with a section on the SU2 website that showcases just the results of the validation test cases (grid convergence studies, residual reductions etc) and links to the v&v repo appropriately. This way, if people are just inquisitive about SU2's performance, they can get a quick snapshot of the results, without the need ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426026053:535,optimiz,optimized,535,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426026053,2,['optimiz'],['optimized']
Performance,"@economon Thanks for your answer. I have a couple more queries if you won't mind. When you say that the objective functions are not defined for the problem do you mean that I cannot solve the adjoint equations with that objective or just not yet use it with the shape optimization script as that data is not in the history output?. Secondly, how would I see how an objective function is defined? I have tried to see definitions for ENTROPY_GENERATION, TOTAL_PRESSURE_LOSS, KINETIC_ENERGY_LOSS, etc but couldn't find through a keyword search. Although it is solving the adjoint equations with these objectives, I don't know what they really mean. Third, I see there is an obj function: CUSTOM_OBJFUNC. How do I define a custom objective function in SU2?. Thanks,; Aman",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/889#issuecomment-606328715:268,optimiz,optimization,268,https://su2code.github.io,https://github.com/su2code/SU2/issues/889#issuecomment-606328715,1,['optimiz'],['optimization']
Performance,"@economon if I am not wrong, you used FFD with periodic boundary conditions for the adjoint optimization of the unducted fan. It might be that with the subsequent developments on that part of the code some generality has been lost there. Any comment on that?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/210#issuecomment-153518310:92,optimiz,optimization,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/210#issuecomment-153518310,1,['optimiz'],['optimization']
Performance,"@erangit I got the multipoint optimization to work with multiple mesh files. For a well posed optimization, the surfaces that can be deformed (for example the wing) should be same, and the FFD boxes have to be identical. Since the meshes are likely unstructured, you might not get the exact same discretization on the surface, which is fine. As long as the FFD box definition is the same, identical movements in the FFD control points should result in similar surface deformations. Just the marker definitions need to be consistent.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-532003485:30,optimiz,optimization,30,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-532003485,2,['optimiz'],['optimization']
Performance,"@fpalacios, @economon - There's a comment in the config files that says that 'OBJECTIVE_FUNCTION' sets the objective function for the optimizer - however it seems that this option is only used with controlling the adjoint solver and output, and whatever the user specifies there will be overwritten by the optimizer. I put an alternative comment in the config_templates here; I can either revert that back or change the comment in all the config files (I have a script).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/385#issuecomment-296410309:134,optimiz,optimizer,134,https://su2code.github.io,https://github.com/su2code/SU2/pull/385#issuecomment-296410309,2,['optimiz'],['optimizer']
Performance,"@hlkline That's a good point about the regression tests ensuring that the v&v results will be unlikely to change. If we have the same residuals for all the test cases, it isn't a stretch to say that the final results of the v&v cases will stay the same. But sometimes the test values for the regression tests are changed during development and then we lose the guarantee. . From the viewpoint of being rigorous, I agree with the suggestion to run the v&v cases before a major release like 7.0 and also with @erangit on keeping track of the last version that they were run for. I am unsure about holding the people who add the test cases responsible for re-running them. Circumstances change, and access to resources change. That may make it hard for people to run the v&v cases. . I also think it is a good idea to have the effort be collaborative so people can add cases. My concern is about size limits that github has on repositories. Some of the mesh files are going to be massive, especially given that we want to perform grid convergence studies. We will soon be over the size limit. I am not sure about how to get around that. Suggestions would be great!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423291806:1019,perform,perform,1019,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423291806,1,['perform'],['perform']
Performance,"@jayantmukho :; I think this is a very important addition. A typical optimization case (at least in the industry) deals with very different setups (say aircraft at cruise, take-off, and landing: different flight regimes and different configurations). That way it makes sense to allow also for different mesh files, each for every point.; Nimrod Cohen who works with me has been working on that line. I don't know how far he has gone.; I shall have him posted to this PR, he might be able to contribute.; Best,; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-525685943:69,optimiz,optimization,69,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-525685943,1,['optimiz'],['optimization']
Performance,"@jayantmukho Thanks for taking the lead on that. This is long overdue ... I already talked to some people about that and the conclusion was often that we should get rid of the current python framework and rely solely on the in-memory python wrapper functionalities. From what I can tell this is also what you would suggest. I have some additional things to add here:. - We should keep in mind other things than ""just"" shape optimization problems.; - The surface parameterization should be more or less independent of all the other things, so that we can easily integrate other tools/methods. In a first step it might be a good idea to just put all the FFD stuff into a separate (c++) library with a python interface.; - As you already mentioned, I am currently working on a more general way of defining output fields and in particular also objective functions in #913. I will add more information to this PR soon. The new python implementation should, in theory, not need to know about the specific objective function, but rather just asks for the value and the (surface) gradient. ; - We have to expose more c++ classes/functions to python. Especially the config and the geometry. . Maybe I will add more stuff/ideas, but thats it for now. @clarkpede : We will probably keep most of the postprocessing stuff in c++, so don't worry about that at the moment.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/923#issuecomment-607708376:424,optimiz,optimization,424,https://su2code.github.io,https://github.com/su2code/SU2/pull/923#issuecomment-607708376,1,['optimiz'],['optimization']
Performance,"@jayantmukho The fix in PR in #921 is done. Whereas the shape optimization restart did not work before, it does work now, at least on the two test cases I checked. The only thing missing is a regression test, to make sure bugs like that don't happen again. So I agree that it should be merged soon while the long-term refactoring occurs. As for post-processing, the objective function calculation can be quite complex in the use-cases Beckett and I have encountered. That's why it's run as a post-processing step, rather than updated continuously during runtime. But I agree that those types of changes can be limited to the C++ side of the code, with minimal changes to the python wrappers. So it may not be relevant to the current refactoring.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/923#issuecomment-607975492:62,optimiz,optimization,62,https://su2code.github.io,https://github.com/su2code/SU2/pull/923#issuecomment-607975492,1,['optimiz'],['optimization']
Performance,"@pcarruscag . a) I have done that. I get the same error.; b) Linux is the OS; c) The output of mpirun --version is; HYDRA build details:; Version: 3.2.1; Release Date: Fri Nov 10 20:21:01 CST 2017; CC: gcc ; CXX: g++ ; F77: gfortran ; F90: gfortran ; Configure options: '--disable-option-checking' '--prefix=/app/mpich-3.2.1' '--cache-file=/dev/null' '--srcdir=.' 'CC=gcc' 'CFLAGS= -O2' 'LDFLAGS=' 'LIBS=-lpthread ' 'CPPFLAGS= -I/app/setups/mpich-3.2.1/src/mpl/include -I/app/setups/mpich-3.2.1/src/mpl/include -I/app/setups/mpich-3.2.1/src/openpa/src -I/app/setups/mpich-3.2.1/src/openpa/src -D_REENTRANT -I/app/setups/mpich-3.2.1/src/mpi/romio/include' 'MPLLIBNAME=mpl'; Process Manager: pmi; Launchers available: ssh rsh fork slurm ll lsf sge manual persist; Topology libraries available: hwloc; Resource management kernels available: user slurm ll lsf sge pbs cobalt; Checkpointing libraries available: ; Demux engines available: poll select. The output of mpicxx --version is. g++ (GCC) 5.5.0; Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. d) The configuration of meson:. ./meson.py build -Denable-autodiff=true -Denable-directdiff=true -Denable-tecio=false -Dwith-mpi=disabled -Denable-cgns=false --prefix=/home/vksuman/SU2_7_0_3_gcc5_5_0_mpich3_2_1; ninja executable not found. Building ...; bootstrapping ninja...; warning: A compatible version of re2c (>= 0.11.3) was not found; changes to src/*.in.cc will not affect your build.; wrote build.ninja.; bootstrap complete. rebuilding...; [29/29] LINK ninja; The Meson build system; Version: 0.52.999; Source dir: /home/vksuman/SU2-7.0.3; Build dir: /home/vksuman/SU2-7.0.3/build; Build type: native build; Project name: SU2; Project version: 7.0.3 ""Blackbird""; C compiler for the host machine: gcc (gcc 5.5.0 ""gcc (GCC) 5.5.0""); C linker for the host machine: GNU ld.bfd 2.20.51.0.2-5; C+",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620552610:329,cache,cache-file,329,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620552610,1,['cache'],['cache-file']
Performance,"@pcarruscag Hi Pedro, just still want to make sure one thing, does the function the function 'LoadInletProfile' in CSolver.cpp needed to be changed? Since you didn't commit it. From the Valgrind output, a segment error occurred while reading the inletUNI.dat file. This is usually because the memory address attempted to be accessed is 0x0, which means there is a null pointer reference. The segment error occurs in the CConfig::GetInlet_Ptotal function and is due to accessing a null pointer. Maybe you can give me some suggestions and there's no need to change the version at this moment. Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241393846:94,Load,LoadInletProfile,94,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241393846,1,['Load'],['LoadInletProfile']
Performance,"@pcarruscag Hi Pedro. ; After a while we think the problem lies in the .dylib shared library file suffix. After manually changing suffix into _pysu2.so one can import/load the python module. We also tried to change meson.build file under SU2_PY/pysu2 to enforce output .so file: ; ``` ; swig_lib = shared_library(; '_pysu2',; cpp_source,; dependencies: [wrapper_deps, common_dep, su2_deps],; objects: [; su2_cfd_lib.extract_all_objects(),; su2_def_lib.extract_objects('drivers/CDeformationDriver.cpp'); ],; install: true,; include_directories : mpi4py_include,; cpp_args : [default_warning_flags,su2_cpp_args],; name_prefix : '',; name_suffix: 'so',; install_dir: 'bin'; ) ; ```; However, bug still remains while running python script that used pysu2/pysu2ad module. There is a MPI related issue after calling Postprocessing in pysu2: . ```; ------------------------- Solver Postprocessing -------------------------; Deleted CNumerics container.; Deleted CIntegration container.; Deleted CSolver container.; Deleted CIteration container.; Deleted CInterface container.; Deleted CGeometry container.; Deleted CFreeFormDefBox class.; Deleted CSurfaceMovement class.; Deleted CVolumetricMovement class.; Deleted CConfig container.; Deleted nInst container.; Deleted COutput class.; -------------------------------------------------------------------------; [DN0a22c803:22646] *** Process received signal ***; [DN0a22c803:22646] Signal: Segmentation fault: 11 (11); [DN0a22c803:22646] Signal code: (0); [DN0a22c803:22646] Failing at address: 0x0; [DN0a22c803:22646] *** End of error message ***; Segmentation fault: 11; ```; The exact crash location is: ; ```; Exception Type: EXC_BAD_ACCESS (SIGSEGV); Exception Codes: KERN_INVALID_ADDRESS at 0x0000737e9bdce5a2; Exception Codes: 0x0000000000000001, 0x0000737e9bdce5a2; Exception Note: EXC_CORPSE_NOTIFY. VM Region Info: 0x737e9bdce5a2 is not in any region. Bytes after previous region: 3842065106339 Bytes before following region: 13412496251486; REGION",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1606#issuecomment-1106125840:167,load,load,167,https://su2code.github.io,https://github.com/su2code/SU2/issues/1606#issuecomment-1106125840,1,['load'],['load']
Performance,"@pcarruscag, I agree with you it will be hard to beat the MKL (running at 60 percent peak for most of the gemm calls for the DG-solver), but if you don't have any performance loss, that would already be nice, as it improves readability. Furthermore, the performance of the DG solver in combination with the discrete adjoint is horrible, because it relies on my very naive implementation of the matrix products. So it would already be something if we can get an improvement there, although we do not use the DG adjoint solver (yet). . For me the easiest way to test things out for the DG-solver would actually be in SU2 itself. @economon put some nice profiling routines in there for the gemm calls, which can be used without any additional work to test eigen. @pcarruscag (or somebody else), could you create a branch in which eigen is downloaded in the external directory? I think I can manage from there. Thanks,. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459952137:163,perform,performance,163,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459952137,2,['perform'],['performance']
Performance,"@pcarruscag, could you give some more details what kind of dense matrix functionalities you would like to add? There is already an optimized implementation using the Intel MKL library (I know this is not open source, but developers can use it freely) and as Juan mentioned the DG-FEM solver also uses quite a bit of dense matrix functionality. One thing you have to realize though is that the whole enchilada has to work as well for the discrete adjoint solver. This means that no matter what external libraries you choose, you have to come up with your own functionality that works for the types used by CoDiPack. @bmunguia and @EduardoMolina, what type of application did you have in mind for PETSc? The only thing I can think of is a full Newton solver. And no matter how much I like PETSc, @juanjosealonso and @erangit have a point here. Looks like I start to belong to the group of old conservatives as well....",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459621000:131,optimiz,optimized,131,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459621000,1,['optimiz'],['optimized']
Performance,"@pcarruscag, my icpc version is 19.0.0.117 20180804....; The speed up is most likely also processor dependent. I ran this case on a Xeon(R) Gold 6140 CPU @ 2.30GHz with 24 Mb cache. Anyway, this is probably as fast as you can get the code to run with the current data structures. Maybe you can squeeze another 10 percent out of it, but that's most likely it. If we really want to speed things up, we need to change the data structures significantly (structure of arrays, a single array per variable, aligned memory allocation, padding arrays to a multiple of 8, no small loops over the number of dimensions, etc.) . As said before, I think we can get at least a factor of 4 in speed compared to the current version if we can use a significant number of SIMD loops, i.e. vectorization. However, I don't know how much support there is for a pretty much complete rewrite of the computational kernel. My two cents,. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524038333:175,cache,cache,175,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524038333,1,['cache'],['cache']
Performance,"@pcarruscag, your compiler flags perform a lot better. Compared to what I used, it speeds up another 15 percent. Compared to the develop version I get a speed up of 1.5 now on my machine. As far as your earlier question about vectorization is concerned, yes these are all small loops. None of the bigger loops is vectorized.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524805261:33,perform,perform,33,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524805261,1,['perform'],['perform']
Performance,"@pcarruscag: is this all ready now that the regression is in place? We can merge in if so. Also, you mentioned that ad-hoc scripting is needed to run optimization. Is that script provided anywhere in this PR so that folks can try out your implementation?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/595#issuecomment-437523508:150,optimiz,optimization,150,https://su2code.github.io,https://github.com/su2code/SU2/pull/595#issuecomment-437523508,1,['optimiz'],['optimization']
Performance,"@stephansmit Is it possible for you to share what you did? I looked at the code and don't want to mess with the MPI stuff as I don't know about it. Currently, I am limited to 3 cores which is greatly slowing down the optimizations. Thanks.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/990#issuecomment-641611543:217,optimiz,optimizations,217,https://su2code.github.io,https://github.com/su2code/SU2/issues/990#issuecomment-641611543,1,['optimiz'],['optimizations']
Performance,"@vdweide : I have not hit this issues yet, although I have not been paying too close of attention to the file size (although I have used some large ones). We can make a quick test of this with free stream through a very large cube mesh. . This also goes hand in hand with large mesh support, in my mind, since you won't care about the restart files if you can't get your large mesh loaded :). We can add this to the list for the RPSVV group.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/696#issuecomment-500946690:382,load,loaded,382,https://su2code.github.io,https://github.com/su2code/SU2/issues/696#issuecomment-500946690,1,['load'],['loaded']
Performance,"@vdweide, of relevance to performance I used -O3 -march=native -DNDEBUG. That last one disables the assertions the container class performs to detect out of bounds accesses.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524534304:26,perform,performance,26,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524534304,2,['perform'],"['performance', 'performs']"
Performance,"A question and a comment:. 1.How does this relate to my new PR #921? Should I close that one, since the shape optimization is going to be overhauled anyways?; 2. Both Beckett Zhou and I have performed shape optimization with objective functions computed as a post-processing step. From my (admittedly biased) perspective, I would like to have this sort of capability built into SU2. You can reference one of Beckett's papers ([\[1\]](https://arc.aiaa.org/doi/abs/10.2514/6.2015-3355) or [\[2\]](https://arc.aiaa.org/doi/abs/10.2514/6.2017-3658)) to see the sort of framework I'm talking about.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/923#issuecomment-607605381:110,optimiz,optimization,110,https://su2code.github.io,https://github.com/su2code/SU2/pull/923#issuecomment-607605381,3,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"ALE is one of the things missing right now. But this is something we want to target asap, to bring the incompressible solver on the same level as the compressible one. Furthermore we noticed that there is a lot of potential for further optimizations in terms of memory and speed. Conjugate Heat transfer (compressible and incompressible) is also on the way :). PS: I will fix the conflicts soon.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/327#issuecomment-259260177:236,optimiz,optimizations,236,https://su2code.github.io,https://github.com/su2code/SU2/pull/327#issuecomment-259260177,1,['optimiz'],['optimizations']
Performance,"About the output: most, if not all, of the changes affect only structural and FSI problems. They are not yet perfect, but the output is improved respect to the released version of the code. I believe it does not affect anybody else's output. . On the other hand - again, the output needs to be rethought. Together with the input, it's the bottleneck in terms of abstraction, the rest of the code is nice and abstract and the input/output is still full of ifs/else. Working on that at the moment... But it's a much bigger change, so that's why I decided to put this through now, as a minor release.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/522#issuecomment-382362207:339,bottleneck,bottleneck,339,https://su2code.github.io,https://github.com/su2code/SU2/pull/522#issuecomment-382362207,1,['bottleneck'],['bottleneck']
Performance,"After a meeting with @TobiKattmann, I have decided to change NEMO BC_EULER_WALL to match the one in CEulerSolver.cpp, where the velocity vector and gradients are corrected. Euler boundary condition is now called inside the symmetry plane boundary condition, before performing the residual correction; This way, I believe I am assuring for all the vector quantities to be parallel to the symmetry plane and guaranteeing the condition of symmetry according to _Jiri Blazek's - ""Computational fluid dynamics: principles and applications""_ . However, calling Euler function does not appear to substantially change the the solution substantially in the test I have made so far.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1168#issuecomment-764975018:265,perform,performing,265,https://su2code.github.io,https://github.com/su2code/SU2/pull/1168#issuecomment-764975018,1,['perform'],['performing']
Performance,"After realizing that SU2_MSH was only able to generate halo cells when the periodic BCs didn't share a common edge, @sravya91 and I went through the code that performs this task and fixed a few things to add this capability back. After fixing this we realized that there was an issue within the SU2_CFD when trying to run periodic BCs that touch each other. The issue was traced to the mpi communication routines, and since @economon was working on a revamp of this part of the code, we decided to wait until this was done. I am not sure what has been done here since, but I thought I should mention what has already been done in case you find it useful and can save you some time.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/431#issuecomment-358538787:159,perform,performs,159,https://su2code.github.io,https://github.com/su2code/SU2/issues/431#issuecomment-358538787,1,['perform'],['performs']
Performance,"Agreed that it is a bit different... . I would add one practical comment for consideration: it is worth checking whether the main restriction we have is related to approximations in the Jacobian that limit the effective CFL we can use or whether the convergence of the linear solver itself is a problem (speed or complete lack of convergence). A quick test without resorting to another library is to increase the fill-in for ILU-preconditioned GMRES, which is very expensive/slow but should converge difficult problems, and to check how high we can take the CFL when allowing each nonlinear iteration to converge to a tight tolerance in the linear solver, say 1e-14 (you can output the linear solver residuals to verify convergence). If we can take the CFL higher with a more performant linear solver, then it could be worth the effort to try other options. If the CFL must remain low for stability, then perhaps we should look at the quality of the Jacobians we construct to see if we can improve, or even try exact Jacobians with AD if we can afford it. A more advanced CFL ramping strategy could also be helpful here to get us closer to a solution before trying to aggressively converge. Just some options to try - it is an important topic and it would be good to isolate the primary restriction.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-460811699:776,perform,performant,776,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-460811699,1,['perform'],['performant']
Performance,"Agreed that libraries are great as long as they are optional - sometimes we need them for highly specialized tasks. Btw, is it possible to use your wrapper for other external solvers? For example, it might be worth testing with PETSc again soon for performance reasons. I would encourage making a single base interface for external solvers that talks to the existing structure in SU2, which never needs to change, and then creating the implementations for each solver that adapts the particular solver data structures to the fixed interface (similar with the grid readers and output routines). Is this easy to do now?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/771#issuecomment-524932838:249,perform,performance,249,https://su2code.github.io,https://github.com/su2code/SU2/pull/771#issuecomment-524932838,1,['perform'],['performance']
Performance,"Ah! uff glad we agree (I do pay attention to what you think).; I think the first concern is more or less covered, it can always be cut and pasted somewhere else, we have sgs and wall models floating around, maybe we should have a physical_models directory.; Regarding your second point I would just have the stressTensor function deciding what modifications to perform, QCR and UQ, based on input parameters.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-742663910:361,perform,perform,361,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-742663910,1,['perform'],['perform']
Performance,"Ah, I forgot to mention I do not use our shape optimization framework (should have started with that). The optimizer ""sees"" y = s_f * f(x'), SU2_** takes as input x, say ffd points, and computes f, say drag, (x' = s_x * x) then dy/dx' = s_f / s_x * df/dx, there is perhaps some equivalence with the tuning parameters we have.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616856147:47,optimiz,optimization,47,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616856147,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"All for improving the abstractions if possible. We did something similar for the scalar upwinding and the viscous schemes already. . My only comments, which you can probably guess already, are to make sure we don't take a large performance hit by adding more layers (for example, one can make an argument to remove the entire set of CNumerics classes and implement the methods more efficiently directly in the solver class with vectorization, etc) and that we maintain the flexibility for folks to quickly add new convective schemes which was the original motivation for the existing structure (and more layers could complicate this). Sounds like you're already considering these things, but it is important to find the right balance.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-500942445:228,perform,performance,228,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-500942445,1,['perform'],['performance']
Performance,"All,. Following this discussion, why not use something more descriptive for OBJECTIVE_FUNCTION? At the end of the day, it is meant as the functional, derived from the solution of the PDE, that we are solving the adjoint equations for. Then we use that adjoint field to compute gradients. How about ADJOINT_FUNCTIONAL? Or ADJ_FUNCTIONAL?. Best,. Juan. On Feb 22, 2016, at 8:34 AM, Francisco Palacios <notifications@github.com<mailto:notifications@github.com>> wrote:. Sorry for my late reply and thanks Heather for opening this important discussion.; I fully agree with you and OBJECTIVE_FUNCTION and OPT_OBJECTIVE cause confusion. As far I see the problem, if we focus on a typical users point of view, I think that OPT_OBJECTIVE and OPT_CONSTRAINT must be in the config file and as close as possible. They are the key to define an optimization problem (one of the key features of SU2). On the other hand, as you suggested we need to add some flexibility. It would be interesting to to able to define a multi-objective like; OPT_OBJECTIVE= DRAG \* DRAG_WEIGHT; LIFT^2 \* LIFT^2_WEIGHT;. As Tim pointed out OBJECTIVE_FUNCTION is important because is what we use to play and develop the adjoint capability but, from the users point of view it is not as interesting as the OPT_OBJECTIVE. If everything works ok, OPT_OBJECTIVE should be enough for most of the SU2 users. How many typical users are interested in solving and adjoint problem for the sake of solving of an adjoint problem?. However OBJECTIVE_FUNCTION is not a good name, from the point of view of the continuous adjoint, I would feel comfortable if we change it to ADJ_BND_CONDITION. That probably doesn't work for the discrete adjoint, isn't it? Tim, What key word would work for the Discrete Adjoint? We need something that reflect the effect, in mathematical terms, of the objective function in the AD adjoint problem. Finally, before adding any capability we should ask ourself how general is going to be and if it going to be useful for",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-187268164:832,optimiz,optimization,832,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-187268164,1,['optimiz'],['optimization']
Performance,"All,. I looked a bit more through Eigen and, indeed, the performance is pretty impressive and generally better than MKL and Atlas (the self-tuned implementation of LAPACK) ant most/all matrix sizes. I agree with comments made by @pcarruscg that having a standard for matrix operations throughout the source would clean up /simplify the code considerably and, since it does not seem to impact the AD approach, it should be pursued. It sounds like a quick test branch like @vdweide is suggesting makes sense. A quick driver code to test the performance of the Eigen routines vs MKL makes sense too. The only thing that @vdweide should comment on is how much work it would be to change the LAPACK/BLAS based implementation in the DG-FEM solver to the interface that Eigen exposes. Best,. Juan. On Feb 1, 2019, at 4:19 AM, Edwin van der Weide <notifications@github.com<mailto:notifications@github.com>> wrote:. Would it be an idea to create a branch to test things out and make a decision based on the results? It would be interesting to see the performance for e.g. the dense matrix multiplications in the DG-solver compared to Intel's MKL. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/643#issuecomment-459705131>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxM1gm0iy_FeGBMFzxVQnYFFzEHt4ks5vJDDlgaJpZM4adbAo>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459845576:57,perform,performance,57,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459845576,8,"['perform', 'tune']","['performance', 'tuned']"
Performance,"All,. I would agree that we need to look at an existing library and not re-develop one. The standard for dense linear algebra is LAPACK. It has been around forever, relies on BLAS routines, is currently being used in the SU2 higher-order DG-FEM solver. Various computer vendors (including GPU manufacturers) have spent many years optimizing BLAS and LAPACK calls on their own computer architectures. This means that your code is (a) portable and, by linking to the appropriate vendor-provided version of the library (say like Intel‚Äôs MKL), (b) you get highest performance. I am not familiar with Eigen (just looked at the web page), but there is an interesting comparison between Eigen and LAPACK (written by the developers of Eigen‚Ä¶take it with a grain of salt) here<http://eigen.tuxfamily.org/index.php?title=FAQ#How_does_Eigen_compare_to_BLAS.2FLAPACK.3F>. If all they say is true, then Eigen would be a very good choice. If it is a bit exaggerated, then maybe LAPACK is better. Does anyone have experience with Eigen? Are there any reasons why LAPACK is better? Can the folks involved in FV and DG-FEM solvers talk to each other before making a decision?. While PETSc is a wonderful library (and parallel), I would hesitate to use it as the solution for the problem that we are trying to solve: it is not the easiest thing to compile and it is most definitely not lightweight. If one also wanted to replace Krylov-space solvers and preconditioners in SU2 the PETSc might make more sense‚Ä¶.but it still forces the developer to conform to their view of the world (including matrix setup and decomposition). Best,. Juan. On Jan 31, 2019, at 4:43 PM, Brian Mungu√≠a <notifications@github.com<mailto:notifications@github.com>> wrote:. @EduardoMolina<https://github.com/EduardoMolina> and I have discussed this over the past few weeks and are also in favor of using an external library. I don't have a strong opinion on the library we choose, but he seems to be in favor of PETSc<https://www.mcs.anl.gov/p",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459566859:330,optimiz,optimizing,330,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459566859,2,"['optimiz', 'perform']","['optimizing', 'performance']"
Performance,"All,. Of course, another approach to verifying which sign is correct is to do an analytic differentiation (using CoDi?) or simply using complex-step on the residual calculation routine to get exact Jacobians (for a particular state) and confirm the correct sign. This does require some code extraction / refactoring to perform the test, but it has the benefit that you would know exactly what the correct answer is for the specific residual implementation. Best,. Juan. On Nov 16, 2018, at 11:03 AM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. As Jacobians affect convergence rate and not accuracy, you could do a quick test of the same problem with the current version and the sign flipped to see if there is measurable difference in the convergence rate. If yes, then it should give you a hint about which direction. If no, then we should still correct it, but prob don't need to put in too much effort. @clarkpede<https://github.com/clarkpede> : I'm interested in your unit testing set up... ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/609#issuecomment-439493827>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxInSS3cmLF8iFkD22AoYAp0G3G2yks5uvwvxgaJpZM4YeD9V>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/609#issuecomment-439500791:319,perform,perform,319,https://su2code.github.io,https://github.com/su2code/SU2/issues/609#issuecomment-439500791,2,['perform'],['perform']
Performance,"All,. Regarding the wall function specification, if we are going to settle on a standard way that could work for both the FV and DG-FEM solvers, it might be good to think about some modifiers that can later allow for a generality of approaches. We can make a distinction between wall functions and wall models, but this is subject to discussion‚Ä¶in essence both are performing similar duties, but people should express their opinions. With that said, how about a boolean such as USE_WALL_FUNCTIONS / USE_WALL_MODEL (YES or NO) with an optional argument WALL_FUNCTION_TYPE / WALL_MODEL_TYPE that can taken one of many pre-specified values that can be added as these options are developed and tested? Certainly options like STANDARD_WALL_FUNCTION, ADAPTIVE_WALL_FUNCTION, SCALABLE_WALL_FUNCTION, compressible and incompressible versions, and even EQUILIBRIUM_WALL_MODEL and NONEQUILIBRIUM_WALL_MODEL are things that are likely to be in the code in the near future. Thoughts?. Juan. On Sep 5, 2017, at 2:27 PM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. @petebachant<https://github.com/petebachant>: the paper that I linked earlier on this thread had some fairly simple examples similar to the one you propose.. different flat plates and so on with varying y^+. You can likely reuse the grid(s) in the TestCases repo. @vdweide<https://github.com/vdweide>: it was very simple in this first implementation. It checks for a single boolean for whether or not to apply wall functions (WALL_FUNCTIONS= YES or NO, https://github.com/su2code/SU2/blob/43b8a4015c4b09b01d78e4243d32011c663c2b70/SU2_CFD/src/solver_direct_mean.cpp#L15339), and then assumes they should be applied to all no-slip walls (heat flux or isothermal, https://github.com/su2code/SU2/blob/43b8a4015c4b09b01d78e4243d32011c663c2b70/SU2_CFD/src/solver_direct_mean.cpp#L16653). This could of course be made more specific for individual markers using a config structure like MARKER_MONITORING to list the",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-327313634:365,perform,performing,365,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-327313634,2,['perform'],['performing']
Performance,"All,. Thanks for your comments. I think ANNlibrary is no longer maintained. It would be better if we can use a well maintained library in-order to prevent issues in future. Additionally ANNlibrary does not support distributed trees. As far as I know, pointcloud library also does not support distributed trees. I guess we will have to write a wrapper routine using MPI. This will create a local tree for its own portion of the surface mesh. Now distance computation can be done by querying all the trees and using the minimum. One catch here is that we will have to compute distance queries in a group in order to prevent the communication latency eating up the advantage. . Waiting for comments",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-224563432:640,latency,latency,640,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-224563432,1,['latency'],['latency']
Performance,"All,. The following page has performance comparisons between eigen and mkl (and others):. http://eigen.tuxfamily.org/index.php?title=Benchmark. They are dated 2011, so they are a bit old, but if the quoted performance is real, I would say it is a no-brainer to switch to eigen. If the performance tests (for at least simple things like daxpy and gemm) could be repeated to verify the numbers, that would help us make a final decision. Best,. Juan. On Feb 2, 2019, at 1:58 AM, Edwin van der Weide <notifications@github.com<mailto:notifications@github.com>> wrote:. @pcarruscag<https://github.com/pcarruscag>, I agree with you it will be hard to beat the MKL (running at 60 percent peak for most of the gemm calls for the DG-solver), but if you don't have any performance loss, that would already be nice, as it improves readability. Furthermore, the performance of the DG solver in combination with the discrete adjoint is horrible, because it relies on my very naive implementation of the matrix products. So it would already be something if we can get an improvement there, although we do not use the DG adjoint solver (yet). For me the easiest way to test things out for the DG-solver would actually be in SU2 itself. @economon<https://github.com/economon> put some nice profiling routines in there for the gemm calls, which can be used without any additional work to test eigen. @pcarruscag<https://github.com/pcarruscag> (or somebody else), could you create a branch in which eigen is downloaded in the external directory? I think I can manage from there. Thanks,. Edwin. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/643#issuecomment-459952137>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxCgydwy1nS3qPJvyCMJXLXWNMSFsks5vJWEkgaJpZM4adbAo>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459986613:29,perform,performance,29,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459986613,10,['perform'],['performance']
Performance,"All,; If you have a look at ""feature_test_eigen"", I ""ported"" the JST ComputeResidual method.; I only changed the local variables of the method, so some temporaries are required to make things compatible with the outside world and with base class variables. Nevertheless, the performance is not worse (direct and discrete adjoint) and I think it reads better, but that is subjective.; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-460671586:275,perform,performance,275,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-460671586,1,['perform'],['performance']
Performance,"An update. I put in 10G ethernet cards with a small 10G switch. This kind of networking is definitely beyond my expertise, but I tested point to point bandwidth and latency and it seems like I get the full 10Gbps and latency seems to be 4 times better than my 1G cards. Its faster but the 4 machine numbers are still slower than the 1 machine numbers. Here are the new timings on Mesh 1 for completeness. - 8 process (1 machine x 8 threads) => 13.1s/iteration; - 8 process (2 machine x 4 threads) => 12.7s/iteration; - 16 process (1 machine x 16 threads) => 8.4s/iteration; - 16 process (2 machines x 8 threads) => 7.5s/iteration; - 16 process (4 machines x 4 threads) => 9.3s/iteration; - 32 process (2 machines x 16 threads) => 5.8s/iteration; - 64 process (4 machines x 16 threads) => 9.2s/iteration. On Mesh 2 the larger mesh, the 64 process time went from 40s on the 1G networking to 15.8s on 10G networking. So on the larger mesh, the scalability seems to be pretty good. . I'm certainly not an expert in high speed networking so I expect someone with more knowledge could get more out of my equipment and/or would know where the bottleneck is on the smaller mesh. . In looking around online, it seems like i should probably put in infiniband equipment instead for this purpose. Anyway, thanks for the help. If I decide to try and put in infiniband, I'll update this. Otherwise, if there's anything else that you want me to try on my hardware at some point let me know.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-594201448:165,latency,latency,165,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-594201448,4,"['bottleneck', 'latency', 'scalab']","['bottleneck', 'latency', 'scalability']"
Performance,"And why is your Test repo so large?; Perhaps some data files would be happier living elsewhere?. I'm thinking that if your Tests load large mesh files, for example, these mesh files could be placed in a data repository (like Figshare, Data Dryad, Zenodo), and your configuration files for each test could fetch the data it needs. I would imagine that the input data does not change often (or perhaps ever?) and one permalink and DOI is better suited for data than a version-controlled repo.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72739420:129,load,load,129,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72739420,1,['load'],['load']
Performance,"Are you talking about shape optimization with re-meshing?; If yes, people are already working on restart with interpolation (@jayantmukho @bmunguia ); Otherwise, SU2 already restarts when doing shape optimization.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/852#issuecomment-578428526:28,optimiz,optimization,28,https://su2code.github.io,https://github.com/su2code/SU2/issues/852#issuecomment-578428526,2,['optimiz'],['optimization']
Performance,"As I mentioned in my initial post, first-order works fine while restarting from the steady flow solution but when I want to restart FSI from a later time iteration, SU2 diverges. By subcycling, I meant that I would like to use different time step sizes for structure and fluid. For example, if I specify an FSI timestep of 1e-02s then I would like to use smaller timesteps on the fluid side (like 1e-05s) and maybe keep the structure time step to 1e-03s, and when both fluid and solid reach the same time, the deformation and load convergence be monitored and if they have not converged then another outer iteration would begin. Does that make sense?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1287#issuecomment-840632215:526,load,load,526,https://su2code.github.io,https://github.com/su2code/SU2/issues/1287#issuecomment-840632215,1,['load'],['load']
Performance,"As a second note: we are aware that even the 70 min. time limit is causing problems for new PRs and other branches that are using Travis CI individually. . One option is to ""parallelize"" the builds by decomposing the current regression scripts into more scripts with fewer tests each. However, this only addresses part of the problem, as the compilation step is taking the most time and is currently done within each script. We could consider compiling with lower optimization, etc., to get the cost down, but I am open to ideas on this front too.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/459#issuecomment-339748432:464,optimiz,optimization,464,https://su2code.github.io,https://github.com/su2code/SU2/issues/459#issuecomment-339748432,1,['optimiz'],['optimization']
Performance,At first glance this looks like a valid solution to me - if you want to open a pull request we can compare the regression test run to see if the performance changes (and of course if any regression tests break).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/252#issuecomment-208087862:145,perform,performance,145,https://su2code.github.io,https://github.com/su2code/SU2/issues/252#issuecomment-208087862,1,['perform'],['performance']
Performance,"At some point the marker starts being partitioned, some of it is in one rank, some in other(s).; Your print function truncates the file when it opens it, and so you only get the output from the last rank that opened the file.; You could make the file a member of the class, so that you can guarantee it is only opened once (other ranks would need to open in append mode), but then you still have a race condition when multiple ranks try to write simultaneously to the file (the result might be mixed lines, especially when `endl` is used to terminate lines because it forces a flush, maybe with ""\n"" and some luck it would be ok, but the order of the lines is still unpredictable).; To my knowledge mpi does not have simple ways to guarantee ordered execution of certain code regions. So unless you want to get knee deep in mpi, I recommend you keep this file output as a debug feature (that works on a single core) and use the normal surface output files (paraview, tecplot, etc.) for visualization.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/944#issuecomment-616367257:398,race condition,race condition,398,https://su2code.github.io,https://github.com/su2code/SU2/issues/944#issuecomment-616367257,2,['race condition'],['race condition']
Performance,"Can't you use gcc? You will get worse performance with any version of the intel compilers prior to 2019 than with even gcc 5.4...; If this is because you need intel MPI you can do:; export CC=gcc; export CXX=g++; export I_MPI_CC=gcc; export I_MPI_CXX=g++; And then follow the normal installation procedure (meson ninja). These problems you are running into with boost also have a ""half baked c++11 compiler support"" smell to them, namely the 03 suffix to that file.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620086431:38,perform,performance,38,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620086431,1,['perform'],['performance']
Performance,"Certain parts of the code use atomic reductions, and dynamic work sharing for load balancing. That's why there is slight (hopefully) non determinism.; There are more operations per iteration when using the NK solver, which makes it more noticeable.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2259#issuecomment-2034432299:78,load,load,78,https://su2code.github.io,https://github.com/su2code/SU2/issues/2259#issuecomment-2034432299,1,['load'],['load']
Performance,"Certainly sounds like an important data point, as our comms are non-blocking too.; I'm not familiar with Open FOAM to go peek under the hood, but from this page (https://www.openfoam.com/releases/openfoam-v1712/parallel.php) it sounds like it uses a multilevel domain decomposition, decompose by nodes, then by processors, and then by cores (maybe). Which would reduce the number of comms going in/out of each node (which is what the hybrid solver hopes to achieve). I remember seeing output messages from CFX indicative of similar strategies. We don't have as many people working on performance as the organizations behind those codes, but we will get there.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593638807:584,perform,performance,584,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593638807,1,['perform'],['performance']
Performance,"Classic stale bot. There are only 2 fixes since the UR fix was merged into develop in #1057, the Inner vs TimeIter fix and turning off CFL adaptation for the discrete adjoint (which I just added). If we're holding off on any algorithmic changes, I guess the only thing to discuss is which CFL should be used for the discrete adjoint. As is, it'll use whatever's specified in CFL_NUMBER in the config file, but I'm personally in favor of storing the local CFL to reduce the bottleneck of the adjoint. This could also be part of a separate PR if you need the bug fixes yesterday.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1036#issuecomment-739058644:473,bottleneck,bottleneck,473,https://su2code.github.io,https://github.com/su2code/SU2/pull/1036#issuecomment-739058644,1,['bottleneck'],['bottleneck']
Performance,"Concerning your first question.. that was an old example of using the custom objective option for running shape optimization (it was hard-coded for a particular problem - I do not recommend doing it that way). This is only necessary if you would like to include what is happening at the boundaries as part of the objective function or as a constraint. . If your sweep over the inlet velocity is not part of the objective/constrain definition, then you do not need to do this. For example, if you are minimizing drag by changing the shape of a solid boundary given multiple inlet conditions, you can use the normal drag objective.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/912#issuecomment-605275594:112,optimiz,optimization,112,https://su2code.github.io,https://github.com/su2code/SU2/issues/912#issuecomment-605275594,1,['optimiz'],['optimization']
Performance,"Cus yolo.; I have no idea how much that stuff matters to the repo size, so best not to prematurely optimize.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1129#issuecomment-744782549:99,optimiz,optimize,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/1129#issuecomment-744782549,1,['optimiz'],['optimize']
Performance,"Dear @salvovitale ,. Thanks for your reply. Unfortunately, all my attempts with periodic BCs failed during the Jacobian initialization independent; of the number of processors.... Apparently, SU2_MSH is converting the mesh correctly, visually at least... What is the size of your grid? It is 3D? I tried with grids from 1M to 10M without success.... @BeckettZhou and @talbring are also trying to perform unsteady simulations with periodic BCs. Can you share your experiences about this topic?. Any help is really appreciated. Regards . Eduardo Molina",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/416#issuecomment-317298834:396,perform,perform,396,https://su2code.github.io,https://github.com/su2code/SU2/issues/416#issuecomment-317298834,1,['perform'],['perform']
Performance,"Dear Heather,; I am analyzing a propeller of an UAV. I have static thrust measurements such that when I used Euler results I got 3.5 lbf thrust as compared to the measured 6 lbs. My next step was to perform an NS equation with SA turb model. I got 7 times over predicted results such that the mesh has a Y+ of less than 1. Then I thought of doing an SST but was not long enough that it gave me error with divergence. I have been setting up my SST case as per the tutorial example of NACA0012. However, I do not happen to see any entry with regards to eddy frequency etc. (usually required by SST) in the config file. Any guidance will be great.; Thanks; Jehan; From: Heather Kline notifications@github.com; To: su2code/SU2 SU2@noreply.github.com ; Sent: Tuesday, May 12, 2015 11:43 AM; Subject: [SU2] Feature deallocation (#174). Bringing this branch up to date with current develop branch. ; Various deallocation changes; Some regression tests fail but all run. (previously was not the case); You can view, comment on, or merge this pull request online at:; ¬†¬†https://github.com/su2code/SU2/pull/174; Commit Summary; - Updated GetEngine_Properties; - Fix to the last commit; - Small bug; - Merge branch 'develop' into feature_MPI; - merging; - SU2_SOL and SU2_CFD are working; - Preliminary, but complete, implementation of SU2_DEF; - More updates; - Working version; - Complete implementation (validate); - Working version of SU2_DEF; - Final push before moving to the develop branch; - New MPI (removing SU2_PRT); - Merged in Ben's ParMETIS integration and fixed some conflicts.; - Merge branch 'benkirk-parmetis_integration' into feature_MPI; - ParMETIS geometry routines have been copied over but are not activated yet.; - Small change to ParMETIS include.; - ParMETIS can now be activated for testing (PARMETIS=YES in config).; - Updated MG; - Updated EA subrotuine; - Small fix; - Fixing memory leak; - Fixing memory leaks; - Dev release v.3.2.6; - Increasing MAX_NUMBER_MARKER; - Working versi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:199,perform,perform,199,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['perform'],['perform']
Performance,"Dear SU2 Team Members,. Greetings! We are very happy to inform you that we are exploring the aerodynamic shape optimization script of SU2 R 5.0.0 (Raven) with different configurations. And we would also like to seek your assistance in connection with the following two issues:. We are not getting any clue on restarting procedure of the optimization process from previously finished cycles. Is there any way for exporting the intermediate / final optimized geometry as 3D CAD model. Thanking you in advance. Regards,; Jyothi Kumar Puttam.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/489#issuecomment-355968201:111,optimiz,optimization,111,https://su2code.github.io,https://github.com/su2code/SU2/issues/489#issuecomment-355968201,3,['optimiz'],"['optimization', 'optimized']"
Performance,Do we really need the templates right now ? Or this is just in case ? I think if we make su2double a float we get also problems somewhere else (furthermore using float makes actually no sense on current architectures regarding performance),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-426946593:227,perform,performance,227,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-426946593,1,['perform'],['performance']
Performance,"Doh, of course. Took a while to get some orientation in the code, but before implementing something I'd just like to clarify a few things:. As far as I can see the window size changes each time a new sample is added and the new average is immediatly recomputed and cached in `val`.; https://github.com/su2code/SU2/blob/72b2fa977b64b9683a388920f05298a40d39e5c5/SU2_CFD/src/output/COutput.cpp#L1916-L1928; I didn't find any other references to `WindowedUpdate` or `addValue`. Consequently it doesn't really make sense to cache the sum over n-1 samples, right?. Assuming that the windowing-function cannot change at runtime I'd propose the following changes:. - Add a new constructor to CWindowedAverage which takes the windowID as input parameter and stores it in a const field.; - Initialize the map that stores the CWindowedAverages in the COutput constructor with CWindowedAverage objects constructed with the WindowId specifed.; - Merge the code that updates the average (`WindowedUpdate`) into `addValue`, since both are currently called successively anyway. Delete `WindowedUpdate` function.; - Modify `addValue` to only store history for non-trivial windows. Another option might be to make CWindowedAverage (or `CWindowingTools`) an abstract class with `GetWndWeight` as pure virtual function that needs to be implemented for concrete windows. This would get rid of the duplicate code and switch-statements in CWindowedAverage. The constructor of COutput would then have to initialize the map with the right concrete class. Thoughts?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1545#issuecomment-1041186428:265,cache,cached,265,https://su2code.github.io,https://github.com/su2code/SU2/issues/1545#issuecomment-1041186428,2,['cache'],"['cache', 'cached']"
Performance,"Ettore,. Thanks for submitting this. I thought you gave an excellent presentation at the SU2 Conference and the much better actuator disk model you and your colleagues have put together will surely be useful to many people. Thanks for participating and being a member of the SU2 Community. Please stay healthy and well and I hope to meet you in person next time we have a meeting (fingers crossed‚Ä¶.maybe next year?). Best wishes,. Juan. > On Jun 18, 2020, at 1:27 AM, SaettaE <notifications@github.com> wrote:; > ; > Proposed Changes; > ; > Addition of a new actuator disk model with a variable load and swirl distributions along disk radius.; > ; > Contributors:; > Theoretical and Applied Aerodynamic Research Group (TAARG) of University of Naples Federico II.; > EttoreSaetta, lorenzorusso07, rtogna.; > ; > Related Work; > ; > Introduction of new options in the config. file.; > Introduction of an additional input file that contains the propeller data.; > Introduction of additional c++ functions.; > Addition of code lines to existing functions preserving the original actuator disk model.; > ; > PR Checklist; > ; > [X ] I am submitting my contribution to the develop branch.; > My contribution generates no new compiler warnings (try with the '-Wall -Wextra -Wno-unused-parameter -Wno-empty-body' compiler flags).; > [ X] My contribution is commented and consistent with SU2 style.; > I have added a test case that demonstrates my contribution, if necessary.; > I have updated appropriate documentation (Tutorials, Docs Page, config_template.cpp) , if necessary.; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/1027 <https://github.com/su2code/SU2/pull/1027>; > Commit Summary; > ; > Update config_template.cfg; > File Changes; > ; > M config_template.cfg <https://github.com/su2code/SU2/pull/1027/files#diff-2c2f226c0183e7633cf165c6d3862450> (5); > Patch Links:; > ; > https://github.com/su2code/SU2/pull/1027.patch <https://githu",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1027#issuecomment-646145454:595,load,load,595,https://su2code.github.io,https://github.com/su2code/SU2/pull/1027#issuecomment-646145454,1,['load'],['load']
Performance,"FYI - if you look at the full regtest log, there are a couple of tests failing silently - looks like on the SOL step such that when it checks the values it's still getting a match, but there is an error output. I checked, and this same problem occurs on the current develop branch, so it is not this PR causing the problem. . Since this fixes an urgent performance issue as far as I'm concerned we can merge this in despite that.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/340#issuecomment-264673401:353,perform,performance,353,https://su2code.github.io,https://github.com/su2code/SU2/pull/340#issuecomment-264673401,1,['perform'],['performance']
Performance,"First off, I love the changes. A cleanup of COuput and greater output flexibility were much needed. So let me see if I understand this code. Say that I, as a developer, want to add a new variable to the volume output. For example, I want the production of turbulent kinetic energy from the SST model during a compressible simulation. As a user, I can always add new outputs by adding new field names to the config file. But production isn't one of the (currently) available config-file options. So I would have to code it. First, I would obviously make sure that the production is properly stored in the turbulence variable class, with an accessor like `GetTurbProduction()`. Second, in `CFlowCompOutput::LoadVolumeData`, I would add to the appropriate place:. ```cpp; SetVolumeOutputValue(""PRODUCTION"", iPoint, Node_Turb->GetTurbProduction());; ```. Third, I would add `PRODUCTION` as a cfg input by adding the following line to `CFlowCompOutput::SetVolumeOutputFields`:. ```cpp; AddVolumeOutput(""PRODUCTION"", ""Turb_Production"", ""PRIMITVE""); ```. I could also split off production into its own output group by changing `PRIMITVE` to any other name. This name does not have to be registered anywhere else. In other words, I can change `PRIMITVE` to `SST_NUMERICS` and the only other place I need to put `SST_NUMERICS` is my cfg file. Finally, I could add either of the two following lines to my cfg file:; ```; VOLUME_OUTPUT= (COORDINATES, SOLUTION, PRODUCTION) ; VOLUME_OUTPUT= (COORDINATES, SOLUTION, SST_NUMERICS); ``` . Is this example correct? If not, what am I misunderstanding? What am I missing?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-514031723:705,Load,LoadVolumeData,705,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-514031723,1,['Load'],['LoadVolumeData']
Performance,"Folks,. I replaced the matrix multiplication in the DG solver (gemm in terms of BLAS) with the functionality provided by Eigen. It was very easy and it gives a very readable code. . I ran a couple of tests and, unfortunately, the preliminary conclusion is that you only get good performance if you let Eigen use an optimized BLAS implementation. In my case I used MKL. Compared to directly calling the MKL, there is an overhead of around 10 percent, which is still acceptable. However, if you do not use MKL and let Eigen do the matrix multiplication itself, the performance drops a factor of 7 for the test I carried out, which is a representative 3D test case. This factor is observed for both for the Intel and GNU compiler. It is still a factor 2 faster than my naive implementation though. So it looks like, at least for the DG solver, it is an absolute necessity to use an optimized BLAS implementation, unless there are some magic options in Eigen to make the gemm functionality faster. Using an optimized BLAS implementation in combination with Eigen is fine when doubles are used, i.e. when the solver is run in analysis mode. However, for the discrete adjoint solver the situation is a bit more complicated and we may have to come up with something better than just let Eigen handle the matrix multiplications. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-462075284:279,perform,performance,279,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-462075284,5,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Folks,. Perhaps we can split this issue to a separate thread. But it is indeed a critical one. Improving performance of the solver (or trying other preconditioned solvers) would be a significant improvement amortized over a very large number of users. Add it as a topic of discussion for the Annual Meeting in May?. Juan. On Feb 5, 2019, at 6:54 AM, pcarruscag <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi @EduardoMolina<https://github.com/EduardoMolina>,. That is something I am also interested in as for some of my structural cases the current linear solvers simply do not converge. However Eigen is not the tool for that as the sparse linear solvers it has are similar and are not distributed parallel.; When I opened this issue I was thinking exclusively about how we handle small-medium dense matrices that live on a single rank, and associated algorithms (the kind used for RBF interpolation for example).; I think the two issues are fairly orthogonal, so we can open another to discuss large solvers, for which related work has already been started. Cheers,; Pedro. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/643#issuecomment-460666656>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxClv7-iTk5lFN9sK4fkqM7lk0FZEks5vKZsPgaJpZM4adbAo>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-460714752:105,perform,performance,105,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-460714752,2,['perform'],['performance']
Performance,"Following along here.. will you eventually move the parallel section in CSysSolve up to the full application level (in the main() maybe) when you move to the next steps? In the earlier work, we found that, as you have seen in the linear solver routines, spawning parallel sections kernel-wise carried a large overhead. We found that the best performance was given by spawning right at the start and carry the threads through the entire program, just like the MPI ranks. . My only other comments, which it sounds like you are addressing, are to make the threads as transparent as possible to developers (shouldn't need to touch them unless they want to, like the MPI), and to make the compilation painless (disable/enable). Have you connected it to meson somehow yet?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-566642160:342,perform,performance,342,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-566642160,1,['perform'],['performance']
Performance,"Following this discussion, I want to share certain points related to convergence -. 1- Some good/fast solution initialisation methods will be helpful to start with (commercial solver like Fluent uses Full Multigrid initialisation /FMG - euler initialisation, which provides fast initial guess to start with). 2- Switching from first order to second order gradually will be helpful. 3- Smart/tuned CFL ramping strategy (some commercial codes have tuned way of doing it where CFL range varies from subsonic to hypersonic Mach number). 4- As Dr. Economon mentioned exact Jacobians play important role (In SU2 code, HLLC, JST and Roe have exact/nearly exact Jacobians). I observed that with inconsistent discretization (with some of the problems), solution does not go with higher CFL even in later stages and takes more iterations to converge. 5- It will be desirable to arrive at fewer set/combination of Linear solver+preconditioner which covers broad range of problems. That will help in faster evolution of solution convergence strategies . 6- Handling poor quality cells in some way may be important from practical usage point of view with realistic geometries (I don‚Äôt know how much literature is available for such stuff). Regards; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460875622:391,tune,tuned,391,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460875622,2,['tune'],['tuned']
Performance,"For SU2_DOT_AD the mesh deformation is differentiated manually, this is easy to do because it is a linear operation and the stiffness matrix does not depend on the design variables. You can read more about this kind of manual differentiation (forward and reverse) here: https://people.maths.ox.ac.uk/gilesm/files/NA-08-01.pdf. 1. If there is a better way please get involved in the optimization overall discussion. 2. Your interpretation of the sensitivities is correct. For clarity the FD mode of SU2_DOT is for use with the continuous adjoint only, for which the sensitivities at the surface already include the projection. 3. Not entirely sure if I understood. I think the interpretation of the boundary displacement sensitivities depends on how you initialize the adjoints. Formally what you should get is the product of the Jacobian transpose with the vector of adjoints you initialize. Those surface sensitivities are different from the ones in the file because they include the volume projection, whereas the ones in the file do not (they are the sensitivity wrt the surface nodes, but not considering that moving surface nodes also moves interior nodes).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1017#issuecomment-639520678:382,optimiz,optimization,382,https://su2code.github.io,https://github.com/su2code/SU2/issues/1017#issuecomment-639520678,1,['optimiz'],['optimization']
Performance,"For the first question, yes, the framework assumes that drag should be minimized and lift maximized. You should be able to flip it by using a negative scale factor, or you can directly modify the python framework to change this (just a one-line change). See get_objectiveSign() in SU2/SU2_PY/SU2/io/tools.py. For the second questions, it is difficult to known what SLSQP is doing under the hood. However, we use the scale factors to try to better control the optimization process (step sizes in particular). See more discussion about this in #733",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1103#issuecomment-756212832:459,optimiz,optimization,459,https://su2code.github.io,https://github.com/su2code/SU2/issues/1103#issuecomment-756212832,1,['optimiz'],['optimization']
Performance,"From my experience performance will not be better than current MKL, unless the matrices in question are small and their sizes known at compile time.; The selling point is not speed vs MKL, is that you get the same speed (if using a BLAS backend) plus the syntactic sugar, plus compatibility with any data type.; The DG solver is probably one of the most optimized parts of SU2 so I doubt it would gain any performance.; Since there seems to be interest I will try to ""port"" one of the fluid numerics classes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459864800:19,perform,performance,19,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459864800,3,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Good point! Indeed the solver has a hard time converging and the resudual barely drops below 4E-8 (far away from the limit specified in the tutorial).; ```; --------------------- Surface grid deformation (ZONE 0) -----------------; Performing the deformation of the surface grid.; 1 Free Form Deformation boxes.; 1 Free Form Deformation nested levels.; FFD box tag: BOX. FFD box level: 0. Degrees: 4, 1.; FFD Blending using Bezier Curves.; Number of parent boxes: 0. Number of child boxes: 0.; Corner points: 4. Control points: 20. Surface points: 3404.; Writing a Paraview file of the FFD boxes. ----------------- FFD technique (parametric -> cartesian) ---------------; Checking FFD box dimension.; Checking FFD box intersections with the solid surfaces.; SU2 is fixing user's input planes.; Update cartesian coord | FFD box: BOX. Max Diff: 0.00246933.; Writing a Paraview file of the FFD boxes. ------------------- Volumetric grid deformation (ZONE 0) ----------------; Performing the deformation of the volumetric grid.; Computing volumes of the grid elements.; Min. volume: 1.15412e-13, max. volume: 7.81947e-08.; Min. distance: 5e-07, max. distance: 0.0061806. # FGMRES residual history; # Residual tolerance target = 1e-14; # Initial residual norm = 9.32748e+06; 0 1; 10 4.70151e-07; 20 1.0396e-07; 30 9.99835e-08; 40 9.99358e-08; 50 9.94837e-08; 60 9.79571e-08; 70 9.48291e-08; 80 9.26963e-08; 90 9.25628e-08; 100 9.2495e-08; 110 9.13192e-08; 120 8.82461e-08; 130 8.5977e-08; 140 8.55573e-08; 150 8.55348e-08; 160 8.52077e-08; 170 8.32895e-08; 180 8.13964e-08; 190 8.10219e-08; ...; ```. Any suggestions on which settings may help the solver to converge?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1879#issuecomment-1377077729:232,Perform,Performing,232,https://su2code.github.io,https://github.com/su2code/SU2/issues/1879#issuecomment-1377077729,2,['Perform'],['Performing']
Performance,Good to see the results. It will really help with schemes having inconsistent discretization for the implicit part. . One of the interesting thing (slide 3) is allowable CFL change with change in number of cores. ; What could be the possible reason behind that?. (edit - could it be the performance of preconditioner with change in number of partitions (size of individual partioned domain). Like LU-SGS alone will do best on single grid and things become poorer and stall with increasing number of partitions with standard parallel implementation. So basically quality of initial solution feeding to krylov solver every iteration is making this difference. ; May be... Just a thought) . Regards; Amit,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-502204535:287,perform,performance,287,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-502204535,1,['perform'],['performance']
Performance,"Got my first glasses half a year into Fortran‚Ä¶ and never looked back. From: Pedro Gomes <notifications@github.com>; Sent: 28 January 2021 11:13; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Subscribed <subscribed@noreply.github.com>; Subject: Re: [su2code/SU2] Structural stress penalty function for optimization, fix some CConfig problems (#1176). @pcarruscag commented on this pull request. ________________________________. In Common/src/grid_movement/CSurfaceMovement.cpp<https://github.com/su2code/SU2/pull/1176#discussion_r566010726>:. > - Omega = (config->GetRotation_Rate(3)/config->GetOmega_Ref());. + Omega = config->GetRotation_Rate(2)/config->GetOmega_Ref();. As blind an any programmer, we should have XYZ enums. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/pull/1176#discussion_r566010726>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AATH4JKAAEAXKNHHCUGOQT3S4FBB7ANCNFSM4WOZ6DBA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1176#issuecomment-769213365:301,optimiz,optimization,301,https://su2code.github.io,https://github.com/su2code/SU2/pull/1176#issuecomment-769213365,1,['optimiz'],['optimization']
Performance,"Great progress, thanks @clarkpede !. As for your notes, some thoughts:; - I think you are already doing this but just in case... manually specifying the info at each node can be made a little easier by automatically generating the files for the first time if they don't exist at runtime. We had code that would do this for the grid motion case, and perhaps you can reuse it to generate inlet profile files with the correct global ID and dummy free-stream state to save the trouble of finding the global IDs by hand (that is what we wanted to avoid as well). Then you can at least use excel or another text editor to swap out the data.; - I wouldn't worry about interpolation to start. This can be added later.; - MG is a little tough, but I think we should be able to do a mapping down to the coarse levels in a similar way that we do the restarts in the volume mesh. Can you please check the code in LoadRestart() in solver_direct_mean.cpp where we restrict the solution down onto the coarse levels?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/467#issuecomment-342353441:901,Load,LoadRestart,901,https://su2code.github.io,https://github.com/su2code/SU2/issues/467#issuecomment-342353441,1,['Load'],['LoadRestart']
Performance,"HI ~ . Recently, I read a some paper [[DOI:10.1017/aer.2020.93](https://www.proquest.com/intermediateredirectforezproxy)]. The main topic of the above paper is considering the TKE term in the RANS equation for supersonic and hypersonic. ; In the paper, the original RANS equation is: ; ![image](https://user-images.githubusercontent.com/50565314/234077533-a521a533-5230-4fcf-b77e-16fbb909570e.png). The paper said CFL3D and VULCAN codes ignored every TKE term, and ; ‚ÄúSince different authors treated the k terms in different ways, sometimes it is difficult to obtain a uniform evaluation from different papers for the same turbulence models on the performance of supersonic and hypersonic turbulent flow predictions.‚Äù; So, the paper classified 3 types of RANS equations (C1, C2, and C3) like below:; ![image](https://user-images.githubusercontent.com/50565314/234077599-1ca42027-ce87-4d7b-b5a0-055453acced8.png). The paper‚Äôs result about k-w SST ; Mach 5 flat plate : ; ; ![image](https://user-images.githubusercontent.com/50565314/234078582-ed57291b-0dfb-4c67-be32-e8d44c9a8914.png); ![image](https://user-images.githubusercontent.com/50565314/234078598-6bfee0e1-d4ce-4876-90eb-971e97190a95.png). Mach 2.25 impinging shock :; ; ![image](https://user-images.githubusercontent.com/50565314/234078666-df0f96f7-68b1-4e73-95e3-ce7ddb26c1c4.png). Mach 8.18 impinging shock :; ; ![image](https://user-images.githubusercontent.com/50565314/234078679-b83a1e88-def1-48a3-be79-4400ba415868.png). Mach 2.9 compression corner :; ; ![image](https://user-images.githubusercontent.com/50565314/234078700-c4dd7444-2149-4ad7-997d-869a5bebb1ee.png). Mach 7.05 compression corner :; ; ![image](https://user-images.githubusercontent.com/50565314/234078733-00042db1-28c7-43c2-b4a6-30de08e86f2d.png). It looks like the attached boundary layer region(like a flat plate) is almost the same, while the separation region(impinging shock and compression corner) shows slightly different results. The results indicate that C1 is ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-1520613703:648,perform,performance,648,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-1520613703,1,['perform'],['performance']
Performance,"Harichand, Giulio, Edwin, and all,. I would definitely prefer to use either (a) an open source library that is actively maintained, or (b) our own tree-based search. I do think that this is important for the various reasons that have been outlined/discussed already. The method Harichand describes is pretty much what we did in the ASC program. Edwin can provide more details (and we had an AIAA paper around 2005 on this topic). My suggestion: if Edwin has a tree search in C++ already and someone is willing to spend the time to integrated it, that would be the best option. We get the performance that is needed with a lightweight tree search, without external dependencies (to libraries that may provide a lot of other functionality we do not need), and we can expand to parallel trees as needed. If there is no code already available, then PCL seems like a good alternative (since it seems one can compile only portions of the library). Any takers?. Cheers,. Juan. On Jun 8, 2016, at 4:35 AM, Harichand M V <notifications@github.com<mailto:notifications@github.com>> wrote:. All,. Thanks for your comments. I think ANNlibrary is no longer maintained. It would be better if we can use a well maintained library in-order to prevent issues in future. Additionally ANNlibrary does not support distributed trees. As far as I know, pointcloud library also does not support distributed trees. I guess we will have to write a wrapper routine using MPI. This will create a local tree for its own portion of the surface mesh. Now distance computation can be done by querying all the trees and using the minimum. One catch here is that we will have to compute distance queries in a group in order to prevent the communication latency eating up the advantage. Waiting for comments. ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHubhttps://github.com/su2code/SU2/issues/282#issuecomment-224563432, or mute the threadhttps://github.com/notifications/unsubscribe/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-224806527:588,perform,performance,588,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-224806527,1,['perform'],['performance']
Performance,"Have a look at a9466bb158ca8675352bf3b4b887cbf82b7f28ff for a suggestion on how to disable OpDiLib within the scope of the existing build options (casually tested). To clarify the AD implications: If you use OpDiLib, you will have atomic adjoints where no shared reading optimizations are applied, even with `-t 1`. Disabling OpDiLib - if we add that option - will amend this. The presence of `_OPENMP`, however, makes SU2 use the thread-safe CoDiPack type and enables thread-safety augmentations in CoDiPack. Therefore, a reverse AD + OpenMP - OpDiLib build is not the same as a classical serial reverse AD build that is vectorized one way or the other. If we add this, reverse AD + OpenMP - OpDiLib should also print an error for `-t 2` or higher. Since I am not 100% sure about it yet, could you clarify again what it is that you want to achieve in the end, and why?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1294#issuecomment-891257890:271,optimiz,optimizations,271,https://su2code.github.io,https://github.com/su2code/SU2/pull/1294#issuecomment-891257890,1,['optimiz'],['optimizations']
Performance,Have you tried one of the optimization tutorials?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1714#issuecomment-1186758772:26,optimiz,optimization,26,https://su2code.github.io,https://github.com/su2code/SU2/issues/1714#issuecomment-1186758772,1,['optimiz'],['optimization']
Performance,"Have you tried the suggested python 3.7 on CFD online?; As a side note, your compiler version does not do one specific optimization that the finite volume solvers rely on (icpc 19.0.1 onward does).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1042#issuecomment-657121387:119,optimiz,optimization,119,https://su2code.github.io,https://github.com/su2code/SU2/issues/1042#issuecomment-657121387,1,['optimiz'],['optimization']
Performance,"Hello @pcarruscag @TobiKattmann and SU2 developers,. We have been busy making several code updates, performing cleanup, etc. for this PR. Can you please review and provide feedback when you get the chance? Thank you in advance!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1300#issuecomment-1061224541:100,perform,performing,100,https://su2code.github.io,https://github.com/su2code/SU2/pull/1300#issuecomment-1061224541,2,['perform'],['performing']
Performance,"Hello Charanya, Tobi,. I've finally performed some validation runs trying to tackle the Boundary condition issue which was recognized by @TobiKattmann as the source of discrepancy in unsteady Euler simulations between the old version and the new version. My validation test case relies on the ONERA M6 model I originally used to point out the issue. The test consists in imposing a deformation of the wing boundary which resembles a bending mode of the wing (starting from an already converged steady state). Such input deformation is provided in time in the shape of a blended-step. For the considered mode, forces are recorded in the fashion of the popular (within an aeroelastic context) Generalized Aerodynamic Force (GAF) coefficient in time. A Fourier Transform allows me to recast the GAF in the frequency domain where I can compare the same value with the ones extracted by the Doublet Lattice Method on a geometrically equivalent panel mesh. Simulation is performed at mach 0.8(~ V_inf = 272.3 m/s ) and AoA = 0. In the figure here you can see the time domain GAF vs time as calculated by old SU2 (v 6.0.1), new SU2 (v6.2.0) enforcing the old boundary condition as suggested previously by @cvencro and new SU2 with the new boundary condition. . ![Time](https://user-images.githubusercontent.com/23583209/72831582-75070c80-3c83-11ea-94fc-06ebbffe9f18.jpg). You can notice how at approx 0.0023 sec the blended step is fully developed. Now, despite some small differences between the old SU2 version and the new with enforced old boundary conditions (that are due, among other things, to small changes in the mesh deformation algorithm that I have noticed) you can notice the big difference in the application of the two boundary conditions. . I also attach a couple zooms of the signal: first at time 0 which gives the GAF for the steady initial simulation and second for the converged values. It can be seen how (even if less important) some discrepancies are found here as well.; ![Time_zoom]",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-576826669:36,perform,performed,36,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-576826669,2,['perform'],['performed']
Performance,"Hello guys,. I would like to inform you that I was able to run an incompressible optimization case successfully (for drag, lift and efficiency), by changing RESTART_FLOW to ""YES"", reducing the objective scale and increasing the scaling of DEFINITION_DV. For that reason this issue can be closed. I would like to thank you again for helping me and giving me new insights of SU2 and optimization. Kind regards,. Floris van der Schuur",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-321828967:81,optimiz,optimization,81,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-321828967,2,['optimiz'],['optimization']
Performance,"Here are some numbers regarding the performance. I used an unsteady 3D case with 83425 points. I took the extreme case of calling the output routines every time-step and only 5 inner iterations. For the first run I enabled the writing of restart and tecplot file:; ```; -------------------------- Performance Summary --------------------------; Simulation totals:; Cores: 8 | DOFs/point: 6 ; Points/core: 10428.1 | Ghost points/core: 2045.25 ; Wall-clock time (hrs): 0.153299 | Core-hrs: 1.22639 . Preprocessing phase:; Preproc. Time (s): 2.69291 | Preproc. Time (%): 0.487956 . Compute phase:; Compute Time (s): 385.71 | Compute Time (%): 69.8909 ; Iteration count: 560 | Avg. s/iter: 0.688769 ; Core-s/iter/Mpoints: 55.2191 | Mpoints/s: 0.144877 . Output phase:; Output Time (s): 163.472 | Output Time (%): 29.6211 ; Output count: 112 | Avg. s/output: 1.45957 ; -------------------------------------------------------------------------; ```; Note that the iteration count is the total number of all inner iterations. 30% of the time is spend in the output routine. That may sound like a lot, but lets take a look at the second case, where I still call the output routines, but disabled the writing of any files. ```; -------------------------- Performance Summary --------------------------; Simulation totals:; Cores: 8 | DOFs/point: 6; Points/core: 10428.1 | Ghost points/core: 2045.25; Wall-clock time (hrs): 0.112822 | Core-hrs: 0.902578. Preprocessing phase:; Preproc. Time (s): 3.84826 | Preproc. Time (%): 0.947474. Compute phase:; Compute Time (s): 399.446 | Compute Time (%): 98.347; Iteration count: 560 | Avg. s/iter: 0.713297; Core-s/iter/Mpoints: 57.1855 | Mpoints/s: 0.139896. Output phase:; Output Time (s): 2.86557 | Output Time (%): 0.705527; Output count: 112 | Avg. s/output: 0.0255854; Restart Aggr. BW (MB/s): 0 | MB/s/core: 0; -------------------------------------------------------------------------; ``` ; You can see that now the time spend in the output routines (including",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-535018704:36,perform,performance,36,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-535018704,2,"['Perform', 'perform']","['Performance', 'performance']"
Performance,Here it is:; ```; slimshady@arch-linux-hp-probook-g3-450: ~$ cat /lib/pkgconfig/openblas.pc ; libdir=/usr/lib; includedir=/usr/include; openblas_config= USE_64BITINT= DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK= NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP= HASWELL MAX_THREADS=64; version=0.3.8; extralib=-lm -lpthread -lgfortran -lm -lpthread -lgfortran; Name: openblas; Description: OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version; Version: ${version}; URL: https://github.com/xianyi/OpenBLAS; Libs: -L${libdir} -lopenblas; Libs.private: ${extralib}; Cflags: -I${includedir}; ```. ```; slimshady@arch-linux-hp-probook-g3-450: ~$ cat /usr/lib/pkgconfig/openblas.pc ; libdir=/usr/lib; includedir=/usr/include; openblas_config= USE_64BITINT= DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK= NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP= HASWELL MAX_THREADS=64; version=0.3.8; extralib=-lm -lpthread -lgfortran -lm -lpthread -lgfortran; Name: openblas; Description: OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version; Version: ${version}; URL: https://github.com/xianyi/OpenBLAS; Libs: -L${libdir} -lopenblas; Libs.private: ${extralib}; Cflags: -I${includedir}; slimshady@arch-linux-hp-probook-g3-450: ~$ ; ```,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631992356:399,optimiz,optimized,399,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631992356,2,['optimiz'],['optimized']
Performance,"Hey Paul! Sorry to hear this is an issue for you. ~180 mio cells is quite large... any chance you can recreate on something much smaller? If you roll back some commits, does it work again? If you can find the exact commit, that would be helpful. On a smaller case, you might check whether the time averaged data is being written as you expect to the restart file by using an ASCII file and viewing it (add RESTART_ASCII to your OUTPUT_FILES). It is just a normal CSV. Might give you some clues. . If the number of columns in the restart is incorrect, or not what you expect, then I am guessing the loading of the restart is to blame and some quantities are not getting initialized correctly. That is done in CEulerSolver::LoadRestart() for the compressible code.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-620258270:598,load,loading,598,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-620258270,2,"['Load', 'load']","['LoadRestart', 'loading']"
Performance,"Hi ; > WeightNF.dat: I don't understand what this is for. It is read in CAdjEulerSolver::SetIntBoundary_Jump to calculate derivative, so it is used for adjoint calculation? My understanding is that at least discrete adjoint does not need to calculate derivative. Is it for continuous adjoint?. As far as I see it that function should not be called with the discrete adjoint solver. `CAdjEulerSolver::SetIntBoundary_Jump ` is only called by `CAdjFluidIteration::Preprocess` which should happen during a discrete adjoint run (but as far as i understand you that is not happening currently). All `CAdj<sth>` things are related to the continuous adjoint and `CDiscAdj<sth>` to the discrete adjoint.; Boundary conditions (this one being internal) need to be explicitly derived and set in the continuous adjoint but not in the discrete adjoint so your understanding was going in the right direction. (Although I am no expert in cont.adj. things either :) ). > VENKATAKRISHNAN limiter: With MARKER_NEARFIELD defined, this limiter causes strange pressure disturbance near the nearfield boundary. I tried to find a cause but no luck so far. (That's why I'm using VAN_ALBADA_EDGE in the test cases.). you can try maybe to tune the `VENKAT_LIMITER_COEFF` in the cfg, but I have no better hint for now. > Bad match for point 47742. Nearest donor distance: 3.6066950142e+00.: Lots of this message shows up. I don't know what this message is for. It doesn't seem to cause any real issues, so I've been ignoring them. That is certainly sth I would not ignore :) Does this occur with the case you added (i.e. no periodic bc)? Does it also occur when you run single core? maybe it is matching between internal MPI boundaries. In that case yould can add RANK to the VOLUME_OUTPUT and take more and more cores and see when it fails -> look at the Rank boundaries and maybe you notice sth",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1329#issuecomment-885462629:1212,tune,tune,1212,https://su2code.github.io,https://github.com/su2code/SU2/pull/1329#issuecomment-885462629,1,['tune'],['tune']
Performance,"Hi @MaxSagebaum,. The two options in your second step sound very interesting and I guess are the only way to get good performance for arithmetic intensive operations, like the ones in the DG solver. If I understand correctly option 1 is something that could be tried already, by applying the external function mechanism to the gemm and gemv functions (akin to what is done now for large linear systems) right? The only downside would be the creation of temporary matrices of passivedouble required to call the blas functions.; With option 2 maybe these temporaries would not be required? As there would be an active matrix class whose internal data structures would be passive matrices that could interface with blas directly?. I guess the important question is: For performance sensitive applications, do you see merit in developing something in house that could better leverage the new AD tool, or will it be able to handle ""any"" object oriented library we might adopt?. Thanks and regards,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-463181396:118,perform,performance,118,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-463181396,2,['perform'],['performance']
Performance,"Hi @Nicola-Fonzi,. I'm not 100% sure of the reasons behind the GetFSI_Simulation criteria. I'd imagine that the nMarker_Fluid_Load might have been included there to make sure that a problem is treated as FSI only if there is transfer of load from the fluid to the structural domain, even if both zones existed independently in the config. But since the GetFSI_Simulation check is set up as an ""or"" rather than ""and"", as long as one of them is satisfied, the logic will be true for an FSI simulation, which might be sufficient for your application?. For the velocity transfer, I agree with Rafa that it would be better if you could also transfer the velocity from the external structural solver. If an external structural solver is used for dynamic analysis, it probably can output the structural velocities as well as the structural displacements? I left the methods for the recalculation of the grid velocity using finite differences in the code to support fluid-only problems with dynamic grid motion, I wouldn't suggest this as the method for FSI problems. For primal analysis, results from both methods agree with FSI benchmark cases but if you are interested in adjoint analysis at any point, transferring the velocity information from the structural domain directly to the fluid domain gives a significant simplification and improvement to the gradients.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778368854:237,load,load,237,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778368854,2,['load'],['load']
Performance,"Hi @aeroamit ; I have encountered that problem before (in previous releases) using the Venkatakrishnan-Wang limiter for high Mach number cases. Had similar experience like yours, where Van Albada performed better. I think theoretically the Venkatakrishnan-Wang limiter should be better and this is why, to my opinion, it is the default option. Van Albada is a good reliable old work horse, also in other codes. Still, we might have some problem in the implementation of the Venkatakrishnan-Wang limiter,",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/917#issuecomment-603787485:196,perform,performed,196,https://su2code.github.io,https://github.com/su2code/SU2/issues/917#issuecomment-603787485,1,['perform'],['performed']
Performance,"Hi @gmandrews: we have been working hard on issues related to the partitioning / memory, and we have a branch that is under testing and nearly complete. Can you please try your case with the branch here, when you have a moment, to see if the performance is any better?. https://github.com/su2code/SU2/tree/fix_partitioning",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/479#issuecomment-347944502:242,perform,performance,242,https://su2code.github.io,https://github.com/su2code/SU2/issues/479#issuecomment-347944502,1,['perform'],['performance']
Performance,"Hi @jschuele thanks a lot for your contribution to SU2. Would you be so kind to update this branch and give us an estimate of the performance improvement that the changes are introducing. . @economon, @talbring we need to carefully look at them, they seems reasonable but... maybe to specific. Is it worth it the lost of generality? some numbers would help a lot!. In my opinion the line 230 is not a bug... we need to divide by the total number of points, not the number of points in a particular core of the MPI decomposition. But I'll double check that. What do you think?. Thanks a lot,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/386#issuecomment-320490984:130,perform,performance,130,https://su2code.github.io,https://github.com/su2code/SU2/pull/386#issuecomment-320490984,1,['perform'],['performance']
Performance,"Hi @jschuele, definitively a 10% or 15% improvement in performance is totally worth it. Be sure that we we'll approve the changes and the work is not going to be wasted. . Thanks again for your contribution! I'm going to add some comments to the source code to be sure that we understand why the performance improvement. Best,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/386#issuecomment-322069750:55,perform,performance,55,https://su2code.github.io,https://github.com/su2code/SU2/pull/386#issuecomment-322069750,2,['perform'],['performance']
Performance,"Hi @pcarruscag ,. Sorry for the late response. . I went through all your implementation and performed some tests. . Although, I didn't see an improvement using the accurate jacobians in the subsonic test cases, as already mentioned here, and even in the transonic OneraM6 case from the repo. This implementation is very clean and in my opinion is a great improvement. . I hope that in other cases, the use of accurate jacobian will have a positive effect in the convergence. The only thing that I would like to bring is that in the future, you open a PR from su2 repo instead from your personal account. It is easier for the reviewers to compile and test. I will wait Travis pass to merge this PR. Thanks again. Eduardo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-511142563:92,perform,performed,92,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-511142563,1,['perform'],['performed']
Performance,"Hi @pcarruscag Let me give me some background, we are trying to perform resolvent analysis and for that we need to have linearized NS equations. I ran my LES simulations in SU2 and mean flow data is available in SU2 so I would like to stick to SU2 to understand if SU2 can solve the ‚Äúdirect"" linearized Navier-Stokes equations? ; Also, we are looking for PETSc library to use for LU decomposition. I understand SU2 uses eigen numerical library so possibly we can integrate PETSc in SU2 or perhaps we can perform outside SU2 after above step is completed to get the solved linearized matrices in SU2. I tried to explain please let me know if this make sense, else I will provide more details. ; I am referencing this paper for my work page 4-6 (https://arxiv.org/abs/2005.10964); [Optimal eddy viscosity for resolvent-based.pdf](https://github.com/su2code/SU2/files/5765838/Optimal.eddy.viscosity.for.resolvent-based.pdf)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1141#issuecomment-754091837:64,perform,perform,64,https://su2code.github.io,https://github.com/su2code/SU2/issues/1141#issuecomment-754091837,2,['perform'],['perform']
Performance,"Hi @pcarruscag and @vdweide ,. Thanks for creating a test branch and for bringing this discussion. When Brian (@bmunguia ) and I mentioned PETSc, it was an idea to try a different Newton-Krylov (with preconditioner) library in order to improve the convergence of SU2. ; Since the slow convergence of the SU2-FV is the main feedback that I received from other users from industry and academia, I think it worth try an external library and evaluate the performance. ; I will be happy to help test Eigen and see if it is a good candidate. Best,; Eduardo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-460479862:451,perform,performance,451,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-460479862,2,['perform'],['performance']
Performance,"Hi @pcarruscag and @vdweide thank you very much for your troubleshooting tips and explanation! I think I was confusing 3 different settings - the base compilers (CC and CXX), the wrapped mpi compilers (MPICC and MPICXX), and the MKL pkgconfigpath. I did not realise that after updating my base compilers in my environment that the openmpi `mpicc` and `mpicxx` would automatically pick up the new `gcc` (I thought I'd have to compile new mpi wrappers). . I was able to get SU2 on our HPC compiled and running by doing (after installing the newer `gcc` and `g++` compilers):; ```; module load openmpi/3.0.0_intel2018.2.046 ; CC=$(which mpicc) CXX=$(which mpicxx) ./meson.py build -Denable-autodiff=true -Denable-directdiff=true -Denable-pywrapper=true --prefix=/home/user/programs/su2/SU2-7.0.8 -Dwith-mpi=enabled -Denable-mkl=true -Dcustom-mpi=true; ```. What is strange is that previously, the HPC MKL appeared to be automatically picked up from the `PKG_CONFIG_PATH`. I wanted to use my own newer local copy but updating this path didn't seem to work, bet setting the `-Dmkl_root` flag fixed that.; i.e.; ```; module load openmpi/3.0.0_intel2018.2.046 ; CC=$(which mpicc) CXX=$(which mpicxx) ./meson.py build -Denable-autodiff=true -Denable-directdiff=true -Denable-pywrapper=true --prefix=/home/user/programs/su2/SU2-7.0.8 -Dwith-mpi=enabled -Denable-mkl=true -Dcustom-mpi=true -Dmkl_root=/home/user/programs/intel/2020_update4/compilers_and_libraries_2020.4.304/linux/mkl; ```; Thanks again for both your help! Take care.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1134#issuecomment-745142779:586,load,load,586,https://su2code.github.io,https://github.com/su2code/SU2/issues/1134#issuecomment-745142779,2,['load'],['load']
Performance,"Hi @pcarruscag, just a small follow-up to my comment in the code section concerning the new adjoint implementation that might also help here (either by using it directly or just for getting some ideas). What I would like to change is in fact not the `CDiscAdjSolver` (which I find is very good) - but I'd like to propose some changes for the *interface* to the AD tool. And some subsequent stuff.; It will allow for a more direct control of derivatives which is favourable in case one deals with multiple zones, multiple sets of conservative variables, geometry coordinates in case of FSI, and so on. And of course in terms of performance as one needs only one tape that one can keep during all iterations, regardless of what their variables might be. In case you are interested, take a look at the implementation in [su2code:sc_develop](https://github.com/su2code/SU2/tree/sc_develop). I'll open the PR as soon as @talbring opened his one for his great rework on input/ouput. As for this PR, let me wait a second if we can clear up the issue concerning the registration and I'll leave a small review afterwards.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/615#issuecomment-457582842:627,perform,performance,627,https://su2code.github.io,https://github.com/su2code/SU2/pull/615#issuecomment-457582842,2,['perform'],['performance']
Performance,"Hi @pcarruscag, thanks for the quick response. . There are still several possible memory reductions on the FEA solver by moving stuff to the vertices. Even though over-allocating would probably be fine for the structural solver as problems remain relatively small, I am replicating this structure for the mesh solver on the fluid side, and in there we should be careful not to add tons of doubles that are only necessary at the boundaries to the whole variable structure. I might also need a similar thing in the flow solver, e.g., to store boundary loads for the adjoint solver. I believe that relying on some ordering would be quite complex and require a lot of reworking of the code, everything in the solvers links directly to the point index, which gets renumbered at the beginning. So forcing the vertex nodes to go on to the initial positions doesn't seem like an easy one. And, as you say, maybe if we flag the nodes (as boundary or interior) we end up pretty much at the starting point. Possibly, the best alternative would be to replicate the structure in CGeometry in CSolver, therefore adding some CVertexVariable parent class and child for the different solvers. There are other boundary magnitudes that could be interesting to store as well. It would require some work, but given that there is a direct correspondence iMarker+iVertex -> iPoint, I would expect that to be the least invasive approach.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-508090169:550,load,loads,550,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-508090169,1,['load'],['loads']
Performance,"Hi @pcarruscag,; thank you very much for the insight and the well thought proposed solution. I wasn't aware that there was such a loss in performance, it seems clear that something needs to be done. The only question I have is regarding the following comment . > There are no free lunches and this performance improvement would come at the cost of losing the ability to have different types of variables in different parts of the domain. I'm using this feature more and more, I was planning to extend it in the structural solver to remove the `if fsi` statements, and I also used it in the rework of the mesh solver, as defining variables at the interface only reduces greatly the memory footprint (sort of like the node-vertex structures in geometry). You mention there are options to keep this versatility, how difficult do you think would be to implement them?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-507998889:138,perform,performance,138,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-507998889,4,['perform'],['performance']
Performance,"Hi @rsanfer,; I was afraid you were going to say that...; On the subject of memory savings, and taking the specific case of CFEAVariable, the class is 304 bytes before it allocates data, once data is allocated for a plain nonlinear 3D problem the effective size is 704 bytes, looking at the constructors, for such a problem we allocate 22 doubles or 176 bytes. So effectively 75% of the memory (equivalent to 66 doubles) is wasted.; It is important to note that this ""efficiency"" figure does not get much better even when this class allocates all it members (for which one needs fsi + adjoint + unsteady). This happens because operator `new []` needs to store the size of the allocation together with the data for when `delete []` is called so you get ""pointer + size + data"" rounded to a multiple of 16B because of the default alignment.; Therefore my opinion is that we can ""over allocate"" and still save memory, unless you need massive amounts of data for the boundary points(?)... But looking at CFEABoundVariable I don't think that is the case.; If we want to be optimum in terms of performance and memory usage, we would need to mimic the CGeometry strategy in CSolver.; If we do not want to mimic that structure we need to either be able to rely on some ordering of the special cases, e.g. boundary variables stored first, so that at runtime:; ```; double* Get(int iNode) {; if (iNode < nBoundary); return &special[iNode];; else; return &normal[iNode-nBoundary];; }; ```; If we cannot rely on some order we would need to tag nodes ""special"" or ""normal"" and then use some form of map for special cases... All this would cost a lot of indirection.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-508082019:1088,perform,performance,1088,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-508082019,1,['perform'],['performance']
Performance,"Hi @sun5k,. I think that the restart of the solution is missing. Since for CTransLMSolver you have inherited the functions from CTurbSolver class, the restart is only applied to the turbulent solver. I solved this problem by creating another class called CTransSolver which is a copy of the CTurbSolver class but with a modified LoadRestart function. I guess that the function in the CTurbSolver class can be modified to take into account the transition solver. It depends if we want to divide the transition from the turbulence solver or not.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1111256246:329,Load,LoadRestart,329,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1111256246,1,['Load'],['LoadRestart']
Performance,"Hi @vdweide,. Thank you for testing this out.; I had a look at the code and I think the overhead may be partly due to the multiplication function being compiled in one library and used in another. Which leaves little chance for some boiler plate code in the Eigen::Map class to be optimized way. If you share the test case and it fits in 16GB of ram I am happy to hack a bit and try to get those 10%.; As for Eigen beating MKL, like I said I never thought that would be the case, but out of curiosity what is the typical size of the matrices in the DG solver?. Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-462083402:281,optimiz,optimized,281,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-462083402,1,['optimiz'],['optimized']
Performance,"Hi Andrei,. for the optimization you have to convert the mesh to .su2 first. You can do that for example by just running SU2_DEF with DV_KIND set to FFD_SETTING. This will create a mesh_out.su2 (which is the default if MESH_OUT_FILENAME is not set). Afterwards change MESH_FILENAME and MESH_FORMAT accordingly.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/270#issuecomment-212912758:20,optimiz,optimization,20,https://su2code.github.io,https://github.com/su2code/SU2/issues/270#issuecomment-212912758,1,['optimiz'],['optimization']
Performance,"Hi Antonio, thanks for the review! . Precisely, the point of this PR is to ease generalization of multi-zone, multi-instance problems. For this reason, I am currently working on a branch putting together a CMultizoneDriver, which should be generic enough to accommodate problems involving complex multiphysics. The situation is now that there are a lot of hard-coded constraints, in order for specific features to work. FSI is an example itself; it requires a very strict way of setting up the problem. The same happens with other features such as Multizone HB. While this is ok for showcasing the features, I don't think it's a sustainable approach. For example, if we were to do Turbomachinery FSI, with the current structure it wouldn't be feasible. It would require a ""CTurbomachineryFSIDriver"" class, and more hard coded assumptions. My goal is to get rid of these bottlenecks, by leveraging on the class structure of SU2. Of course, this will require work, but I think it will pay off in the long run. This PR is just a starting point: SU2_DEF, SU2_DOT, etc, will need to be updated accordingly in next stages, together with other changes that are also necessary in the optimization framework and the core code to get rid of a lot of hacks here and there. I will reply to your specific questions separately.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/528#issuecomment-392047648:870,bottleneck,bottlenecks,870,https://su2code.github.io,https://github.com/su2code/SU2/pull/528#issuecomment-392047648,2,"['bottleneck', 'optimiz']","['bottlenecks', 'optimization']"
Performance,"Hi Brian, ; I'm sorry for the late reply, I've been using the feature_adap branch in 2D and 3D with success in the last weeks, so thanks for the amazing work. . After your last commit I recompiled everything, moreover now I'm using `$SU2_RUN/SU2_DEF` before running `mesh_adaption_amg`, so to be sure that element orientation is as expected. The tool is working nice, once the smoothing, grad, adaption values are tuned, thank you very much!. After a bit of use may I add pair of feature request, that in my opinion would improve the overall (already remarkable) quality of the `feature_adap` .; **_Feature request:_**; 1. The possibility to have boundary layer elements (QUAD PENTA) with the mesh adaption would be very much appreciated. If not possible, wouldn't it be possible to force a frozen interface between boundary layer elements?; 2. Add a ""region of interest"" where the refinement takes place. Sometimes it is not required to have sharp shocks resolved far away from the body.; 3. Do you plan to merge this feature in the master branch?. **_Bugs (or at least unexpected behavior):_**; 1. When I use the restart option, even if there is a `restart_flow.dat`, in the base folder, apparently the `mesh_adaption_amg` does not create a link into the \adap\ini\ folder, and I've to manually copy it (quite fast), to effectively enable the restart option. **_Clarification_**; 1. `PYADAP_BACK` option is really interesting, but I don't get it completely: shall I mesh the complete flowfield with higher detail (refined mesh), does this option handle only the body surface (or only the volume inside the body of interest, not the flowfield)? Is there any plan to use geometric files such as step or iges, to have the proper curvatures defined?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-637328023:414,tune,tuned,414,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-637328023,1,['tune'],['tuned']
Performance,"Hi Economon,. I encountered an issue very similar to what Auzbaig reported: the error message ""OBJECTIVE_FUNCTION: invalid option value EntropyGeneration"" during optimization with SU2. (I am using SU2 version 8.0.1 ""Harrier.""). After thoroughly examining the existing Python optimization framework, I found that one of the steps in the optimization chain is generating different config.cfg files, with a focus on DV_VALUE and OBJECTIVE_FUNCTION. DV_VALUE controls the geometry deformation;; OBJECTIVE_FUNCTION determines the type of objective/constraints.; Then the framework calls SU2_CFD and SU2_DOT to obtain performance metrics or gradient information.; As you mentioned, ""You might need to run updateHistoryMap.py to register new outputs with Python."" Initially, I thought it meant simply providing a new input for OBJECTIVE_FUNCTION in the Python optimization framework. However, it seems that this may not work at the C++ level. To verify this, I ran $ SU2_CFD your_config.cfg -d and observed all available history outputs. However, I suspect that OBJECTIVE_FUNCTION cannot use every history output, meaning that the adjoint solver might not recognize some objective functions. Does this imply that additional modifications in the C++ code are required?. Additionally, I would appreciate more information regarding CUSTOM_OBJFUNC. From TestCases/user_defined_functions/lam_flatplate.cfg, I understand that CUSTOM_OBJFUNC allows combinations of existing OBJECTIVE_FUNCTIONs and can also utilize CUSTOM_OUTPUTS. The flexibility of CUSTOM_OUTPUTS seems to enable the construction of various desired variables. However, I am unsure whether using OBJECTIVE_FUNCTION= CUSTOM_OBJFUNC along with CUSTOM_OUTPUTS can entirely replace the need for additional modifications in the C++ code. Since I‚Äôm not very proficient in C++, I would greatly appreciate your guidance. Sincerely,; Tongtong",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/889#issuecomment-2324575133:162,optimiz,optimization,162,https://su2code.github.io,https://github.com/su2code/SU2/issues/889#issuecomment-2324575133,10,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Hi Eduardo,. As I wrote #657 here my bits (thanks @economon to notify me about this issue):; The top wall, which is the symmetry wall in your case, is not a straight line (i.e. line in 2D or plane in 3D) but has a bump in it. Therefore I would say the symmetry BC is inappropriate for that geometry/mesh. ; Implementation-wise the BC_sym routine in develop assumes (but not checks) a constant unit normal over all boundary elements in a symmetry marker and I would say that this a necessary condition for a symmetry-marker. . To cite a comment from @economon from that PR #657 . > As we should always have a plane for this BC type, is this [tangent vector computation to the unit normal, Editors note] something you can check outside the loop, or complete as a preprocessing and store? Looks a little expensive to perform at every vertex during runtime. Because of that preprocessed computation/storage of the unit normal (and a tangent to this normal) the current implementation of BC_Sym cannot be ""exploited"" to serve as an ""inviscid (slip) wall"" for non-straight markers. Using `MARKER_EULER= ( sym )` is not correct either as the gradients of the velocity components (used in the viscous stress tensor of the momentum equations) are not computed correctly for the reflected state. Although using MARKER_EULER in the current develop will give you the same results as the master (or older develop before #657 ) with MARKER_SYM (... as it uses the same implementation). If you pull the ""Preprocessing"" part from the develop Sym_BC into the loop over all vertices of the boundary marker, the unit normal (and tangential) gets recomputed for each vertex. That gives you results which should be a lot closer to what happens in the master. Plus handling the velocity gradient correctly. From my point of view this would be the correct way.; Apply this patch in the root of the latest develop code using `patch -p1 < SymAsInviscidSlipWall.diff` to get the code I mean. [SymAsInviscidSlipWall.diff.txt](ht",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/735#issuecomment-513801538:814,perform,perform,814,https://su2code.github.io,https://github.com/su2code/SU2/issues/735#issuecomment-513801538,1,['perform'],['perform']
Performance,"Hi Floris,. Can you clarify whether you are using the continuous or discrete adjoint?. One thing that I am noticing in your results above is the large difference in magnitude between the compressible and incompressible sensitivities on the surface, which could require very different scaling later when that info is sent to the optimizer... . I would recommend running the discrete adjoint to get sensitivities for lift/drag w.r.t. the same set of design variables for both the compressible and incompressible solvers and comparing the result (with a nearly incompressible flow so the conditions are basically the same). This way, you can remove the scaling for optimization that is part of the shape_optimization.py script and focus only on the gradient results first. You could use the discrete_adjoint.py script for this. Hope this helps,; Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316295088:328,optimiz,optimizer,328,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316295088,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"Hi Floris,. the optimizer does not receive any information on the flow itself. The only information it gets are the objective function and the gradient. The optimizer is typically halving the dv_value if there was no sufficient decrease using the current step size for example if the initial scaling of the objective function was too large. So first of all try to reduce that factor (the number in OPT_OBJECTIVE). You probably need a different value for different regimes and Reynolds numbers as the magnitude of the gradient might be also different then. If that does not help then I think that the reason for the behavior you describe is probably the accuracy of the gradient. Can you have a look at the convergence of the adjoint problem in all of the cases ? Otherwise you can also try the discrete adjoint (discrete_adjoint.py or -g DISCRETE_ADJOINT for shape_optimization.py). Best,; Tim",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-314993835:16,optimiz,optimizer,16,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-314993835,2,['optimiz'],['optimizer']
Performance,"Hi Heather,. This is a very interesting contribution. Just one question, Does multi objective include multi point optimization? Could you please give us an example of the particular application that you have in mind? . Thanks,; Francisco. > On Feb 9, 2016, at 11:24 AM, Heather Kline notifications@github.com wrote:; > ; > This pull request is intended to be the first of two (or more) pull requests implementing multi-objective functionality. I am separating it into multiple requests since some structural changes are made which could potentially effect things outside the regression tests, and I want to make it easier for code review.; > ; > In this pull request, the ability to run multiple objectives is added to the python tools and to the config options. Within the CFD and adjoint solvers, the only major change is in the data structure containing the objectives - it now can hold a list of objectives, but when the adjoint solver is run only one objective is included. Later pull requests are planned to include the ability to run a single adjoint solution for a sum of objectives defined on different markers.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/237 https://github.com/su2code/SU2/pull/237; > Commit Summary; > ; > config options updated to be compatible with multiple objectives - mdo not yet implemented; > python tools; > python adjusted for multiple objectives: will always run 1st objective only with continuous adjoint, but will run separate continuous adjoint evaluations within optimization; > continuous adjoint evaluates the requested objectives; > fixing some errors; > File Changes; > ; > M Common/include/config_structure.hpp https://github.com/su2code/SU2/pull/237/files#diff-0 (20); > M Common/include/config_structure.inl https://github.com/su2code/SU2/pull/237/files#diff-1 (6); > M Common/src/config_structure.cpp https://github.com/su2code/SU2/pull/237/files#diff-2 (90); > M SU2_PY/SU2/eval/d",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/237#issuecomment-182175757:114,optimiz,optimization,114,https://su2code.github.io,https://github.com/su2code/SU2/pull/237#issuecomment-182175757,1,['optimiz'],['optimization']
Performance,"Hi Jayant; Thanks for being so prompt and fast in handling this very important issue.; I‚Äôm currently in vacation at Scotland so I‚Äôll be brief and just add few; comments:; a. As you wrote, validation is very different from test cases. Mesh,; configuration and solutions should be optimized for accuracy, experiment; reproduction and performance.; b. I think it is important to start the validation project, create a link; from the main SU2 web page to it, and than let it grow with the existing; mechanism of community contributions with approvals. Your list is very fine; for beginning. However I think we should strive to enrich it with 3D and; time dependent cases. I hope to be able to be in the loop and contribute to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familia",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:279,optimiz,optimized,279,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,3,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Hi Josef,. This is an important issue that we need to solve, I going to double check; the problem and I'll keep you posted. Thanks for your interest in SU2,; Best,; Francisco. On Mon, Dec 19, 2016 at 5:44 AM, jschuele <notifications@github.com> wrote:. > Fetched developed branch and ran serial_regression.py. Got case FAILED; > with GCC for ls89_sa, centrifugal_blade, centrifugal_stage.; > With INTEL compiler on same platform get passed for ls89_sa,; > centrifugal_blade, centrifugal_stage but failed for statbeam3d. Strange are; > the differences for naca0012_def and most of the brick-tests with intel.; > They converge in significant fewer steps and are marked FAILED.; > Is it worthwhile to investigate the differences between GCC and Intel for; > the brick-cases?; > I'am asking, because I'm gone look to fasten calculations up with; > optimizations in the existing code for single core and perhaps MPI. Far; > goal, but really far, may be using GPUs as well. Currently I have a 15%; > improvement single core for RANS from the Comp&Fluids_129 paper. But of; > course the calculations should not only be faster but correct as well.; > Regards, Josef; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/347>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AEpklloul4VIZDvBs74KUwxxmcGMoBWDks5rJopSgaJpZM4LQvRv>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/347#issuecomment-270770408:844,optimiz,optimizations,844,https://su2code.github.io,https://github.com/su2code/SU2/issues/347#issuecomment-270770408,1,['optimiz'],['optimizations']
Performance,"Hi Josef: glad to see you getting involved!. I am very interested in this. We have seen differing behavior sometimes between the two compiler sets, in particular when high levels of optimization are being used. In fact, you might check if the same issues appear without compiler optimization. Often, it is an initialization problem or some optimization that affects correctness. If you have the time to explore different settings and perhaps dig into the code a bit, I would very much like to isolate and remove these compiler-dependent problems with your help.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/347#issuecomment-268111434:182,optimiz,optimization,182,https://su2code.github.io,https://github.com/su2code/SU2/issues/347#issuecomment-268111434,3,['optimiz'],['optimization']
Performance,"Hi Pedro, ; As discussed last week, I now translate and rotate the whole aircraft in the elastic mesh in combination with a farfield onflow. Implementing and doing the coordinate transformations right took me a few hours, but now everything seems to work properly and fast :). 1. Currently, activating the gust resets/overwrites the grid velocities due to the deformed mesh, but I haven't found the place yet. Any ideas?. 2. Should I clean up / remove the split velocity approach as described in the first post or would you like to keep it?. 4. How to handle the new approach, should I close this pull request and open a new one? There are a few commits which I needed to undo. 5. Generally, I still need the rotating frame approach for steady maneuver load cases, e.g. to calculate the pitching, rolling or yawing aircraft in a steady simulation. The acceleration terms are zero in this case, but I understood that the Coriolis-Term with omega x velocity is missing. Is that correct? I guess they are probably important for objects like a propeller which spins at a couple of thousand RPMs but maybe it is justified to neglect them for slow objects?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1954#issuecomment-1505397240:753,load,load,753,https://su2code.github.io,https://github.com/su2code/SU2/pull/1954#issuecomment-1505397240,2,['load'],['load']
Performance,"Hi Tim,. In collaboration with the Energy Centre Netherlands (ECN) we are interested in participating in the development of a pressure-based incompressible solver. The applications we have in mind are all related to wind turbines, for which compressible solvers perform relatively poorly. We realize that OpenFOAM is very much capable of carrying out such simulations, but the motivation for developing this in SU2 is indeed the availability of the (discrete) adjoint. Regards,. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/429#issuecomment-326904729:262,perform,perform,262,https://su2code.github.io,https://github.com/su2code/SU2/issues/429#issuecomment-326904729,1,['perform'],['perform']
Performance,"Hi everyone,; I was tring to use the mesh adaptation feature but the whole procedure is not clear to me.; Following the previous indications I:. 1. downloaded the `feature_adapt branch`. 2. downloaded the Adaptive 2D NACA 0012 example (https://pyamg.saclay.inria.fr/pyamgexamples.html#2dnaca): `adap_NACA0012.cfg`, `mesh_NACA0012_inv.su2`, `NACA0012_ini.dat`. 3. added the following lines to the config:; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```. 4. run the following command: `$ python3 SU2_RUN/mesh_adaptation_amg.py -f adap_ONERAM6.cfg -n 8`. The response I have obtained is the following:; ```; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (30000, 60000, 120000); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : MACH; PYADAP_HMAX : 500.0; PYADAP_HMIN : 1e-9; PYADAP_HGRAD : 1.8; PYADAP_FLOW_ITER : (2999, 4999, 6999); PYADAP_ADJ_ITER : (2999, 4999, 6999); PYADAP_CFL : (10.0, 15.0, 20.0); PYADAP_RDG : NO. The ./adap folder was deleted. Generating GMF background surface mesh.; ## WARNING: MISSING SU2 MESH FILE KEYWORD: NCORNERS=.; Initial CFD solution is provided.; ```. As expected, a `./ADAP` folder was created, containing these docs: `amg_back_meshb`, `config_CFD.cfd`, `log.err`, `log.out` (sizes 0 byte), `mesh_NACA0012_inv.su2` (link to the mesh), `NACA0012_ini.dat` (link to the file.dat). Did I perform the procedure correctly? Or did I m",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-737134105:1006,perform,performed,1006,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-737134105,2,['perform'],['performed']
Performance,"Hi,; I like this idea of self registering classes for our factories, although the instantiation logic is seldom as linear as converting a name to a type... Maybe you could refactor just one of our factories to give us a better idea of what it could look like?. This issue of ""modularizing"" pieces of the code is central to the refactoring of the optimization framework, which will require significant chunks of the code to be exposed to python, so by all means get involved in that (join #refactor_optimization on SU2 Slack and the developer meetings, Wednesdays at 4pm CET). Personally I think this flavour of extensibility is small fish compared to other structural problems we are currently addressing (duplication, code bloat, performance, robustness, etc.) and in my opinion addressing those issues will make it easier to extend the code in this manner, not harder.; Also from the pure C++ side I see no problem with having to modify the code... In so doing the new code is automatically under the same open source license, which to me is as good thing. A couple of practical considerations:; - About your examples, we want fewer drivers, not more. The methods of CVariable, CPoint, and co. need to be inline if the code is to have any semblance of performance.; - I think the majority of the code should still be statically linked, even if some parts of it can be extended by means of custom dynamic libraries, because that will just be less problematic for folks who build from source but are not developers. > The design I described above doesn't take into account C++ templates as I don't see them used that frequently (Is that a thing?). It is becoming a thing yes absolutely, although not at the very highest levels of abstraction. > Please, Please, we have to stop using raw pointers like that. It's being done... It takes time and not many people are comfortable doing this kind of refactoring (consider it an invitation :) ).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-668153867:346,optimiz,optimization,346,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-668153867,3,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Hi.; So I have lots of good news. I was able to build SU2 with the recommended changes in the meson.build file, (thank you, @pcarruscag!):; > ```; > su2_deps += blas_dep; > su2_deps += dependency('lapack'); > ```; using both, blas and openblas. For blas I used `-Dblas-name=blas` as an extra argument passed to meson. Mind you, I didn't use the `meson.py` script or `./ninja` but instead used the preinstalled versions on my system. I had also cloned the `fix_python_3.8` branch instead of master so there are quite some changes I had to do to successfully build it. I also noticed that openblas uses ~17 MBs extra install space, which I think is because of additional optimizations over the standard preinstalled blas package (just a speculation). So I think I will be using openblas for now instead of blas. But blas works, just in case someone might be wondering. Thank you all for your help!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632352572:669,optimiz,optimizations,669,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632352572,1,['optimiz'],['optimizations']
Performance,"Hi; Kind of strange that Travis tests failed. Modifications were performed only in the script; compute_polar.py and the pull request was set following git pull from develop branch.; Could it be that there is a problem with the online develop branch?; How can I check what caused Travis to fail?; Thanks,; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-376225263:65,perform,performed,65,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-376225263,1,['perform'],['performed']
Performance,"Hmm.. I'm a bit surprised by this, since in the latest versions of the code, the memory required during partitioning does not exceed the memory required during the solve. Are you using the latest version of SU2? We've been working on even more memory optimization lately in the fix_periodic branch, if you'd like to give that a try. I am more concerned with the error you are receiving from the CGNS reader though, and think something funny might be happening there. Can you please share more info on the error?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/291#issuecomment-231554898:251,optimiz,optimization,251,https://su2code.github.io,https://github.com/su2code/SU2/issues/291#issuecomment-231554898,1,['optimiz'],['optimization']
Performance,"Hypothesis (this is a rolling release post :); - [x] It is only broken for quad and not for tri meshes in 2D :x: nope Testcases/incomp_navierstokes/cylinder is a 2D Tri mesh and fails as well; ![image](https://user-images.githubusercontent.com/31306376/99550414-00901d80-29bb-11eb-9cec-6370399e7270.png); Compare that to the Testcases/naviersstokes/cylinder which utilizes the same mesh but is uses the compressible solver. This works; ![image](https://user-images.githubusercontent.com/31306376/99550985-9b88f780-29bb-11eb-8a3d-fe596fa1d3b2.png); which directly brings us to the next hypothesis...; - [x] it is only broken for incompressible flow (so far /euler/wedge worked /navierstokes/cylinder/ /Quickstart worked and /incomp_navierstokes/cylinder /incomp_navierstokes/bend /incomp_euler/naca0012 didnt ) :heavy_check_mark: yep thats it, the implemetation was wrong for incompressible flow `LoadSurfaceData` was falsely used instead of `LoadVolumeData`",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1109#issuecomment-729759618:896,Load,LoadSurfaceData,896,https://su2code.github.io,https://github.com/su2code/SU2/issues/1109#issuecomment-729759618,2,['Load'],"['LoadSurfaceData', 'LoadVolumeData']"
Performance,"I added the value of the global (real) number of elements before the partitioning. I needed this for GlobalToLocal vectors and load of information from file. @economon, can you double check it's all fine with this?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/338#issuecomment-264241439:127,load,load,127,https://su2code.github.io,https://github.com/su2code/SU2/pull/338#issuecomment-264241439,1,['load'],['load']
Performance,"I agree that this should be fixed, and as you have identified it is a problem separate from the FSI problem so you're doing the right thing (as far as my opinion goes) in terms of making this pull request. ; And you've definitely identified an important problem. . Considering that the deconstructers are used within SetVolume_Deformation() in the current develop branch, it seems like (part of) the problem is that that deconstructor is not doing what we thought it would. Aka, although C++ compilers will allow you to use LinsysSol.~CSysVector(), it may not be actually doing what it looks like - and based on your observations it seems like ~CSysVector() is not being called at all. A destructor like ~CSysVector() is more conventionally called by using a 'delete'. This may change the way that the initialize function is used for that object as well, by replacing it with 'new'. Replacing the current method of initializing/destructing that class with a new/delete pair should not change performance, and if anything improve it due to calling the destructor, since it looks like the constructor and the 'Initialize' methods are currently identical. Did you test via a cout or another way to see if the code within ~CSysVector() was called?. Having the delete within the SetVolume_Deformation() will free up memory during the rest of the calculation, as otherwise that memory will not be freed until the CVolumetricMovement class is deleted at the end of execution (or when something like delete [] grid_movement_container happens). But there may also be advantages to keeping it within the CVolumetricMovement constructor/destructor definition. Anyone else have a thought on this?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-147892835:992,perform,performance,992,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-147892835,1,['perform'],['performance']
Performance,"I agree with both of you, that OBJECTIVE_FUNCTION should be a bit more descriptive. ; Following the format of other adjoint options (CONV_NUM_METHOD_ADJFLOW, LIMIT_ADJFLOW), how about OBJFUNC_ADJFLOW or FUNCTIONAL_ADJFLOW? . Regarding the format of OPT_OBJECTIVE, what I have working in another branch (which I have been sitting on pending figuring out these types of issues and more testing) is a format like:; OPT_OBJECTIVE = DRAG*0.1; LIFT*2.0; COMBINE_OBJECTIVE = YES; Where the associated adjoint settings are:; OBJECTIVE_FUNCTION = DRAG, LIFT; OBJECTIVE_WEIGHT = 0.1, -2.0. The effect of COMBINE_OBJECTIVE is a flag to switch between treating the objectives separately (each objective and its gradient is evaluated separately and the python scripts loop sequentially over the objectives, or if this option is 'YES' then a 'COMBO' value is output to the history file and the gradient is computed all-at-once (I can explain that more offline if necessary)). At the moment this only works for linear combinations of existing objectives, so the sample objective Francisco listed would be beyond that. . What do you think of this as an option structure for minimizing 0.1*DRAG-2.0*LIFT:; OPT_OBJECTIVE = COMBINATION; ...; OBJFUNC_ADJFLOW = COMBINATION; ..; COMBO_OBJDEF = DRAG, LIFT; COMBO_OBJWEIGHT = 0.1, -2.0; Where this would still be compatible with looping over sequential objectives in the shape optimization (that is really just a fairly small update to the python, and has some benefits depending on how many constraints you have), and both the adjoint and optimization would refer to OBJDEF if 'COMBINATION' is set as the objective.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-187280368:1404,optimiz,optimization,1404,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-187280368,2,['optimiz'],['optimization']
Performance,"I agree with the final conclusion here... thanks for discussing this and working toward a solution. . We have found in some of our performance optimization work that continuously allocating/deallocating memory is a performance killer, and I am in favor of uniform behavior across the code for readability/usability. Let's merge this in.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-149771091:131,perform,performance,131,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-149771091,6,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"I also found out the hard way that `TOTAL_HEATFLUX` was dimensional, but one additional thing to consider here is that if I call `CDriverBase::GetMarkerNormalHeatFlux` in a Python-wrapped code then I think this PR would cause the returned heat flux to be nondimensional, which can be a nuisance if using it for CHT while running in nondimensional mode. If for FSI, `CDriverBase::GetMarkerFlowLoad` is the dimensional flow load, then this PR would also be inconsistent with that; but if that function returns nondim. loads then this update makes much more sense (I am not sure if it's nondim or not).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2109#issuecomment-1679732658:422,load,load,422,https://su2code.github.io,https://github.com/su2code/SU2/pull/2109#issuecomment-1679732658,2,['load'],"['load', 'loads']"
Performance,"I also use Arch Linux, so I can experiment with the blas/openblas stuff a bit. I usually just use the standard blas and lapack packages in arch, and don't have any issues. I know that openblas replaces blas, but i'm not sure of its interaction with lapack. How much of a performance increase does openblas typically provide over blas? . Anyway, @aditya12398 , for now it looks like you and @pcarruscag have found a work-around! Cheers!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632168739:271,perform,performance,271,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632168739,1,['perform'],['performance']
Performance,"I always fix one point, so the optimizer doesn't take the geometry for a walk.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/984#issuecomment-628729111:31,optimiz,optimizer,31,https://su2code.github.io,https://github.com/su2code/SU2/issues/984#issuecomment-628729111,1,['optimiz'],['optimizer']
Performance,"I am a little partial because I wrote it, but this https://github.com/su2code/FADO should do any kind of optimization you want.; Multiple operating points, manipulations of variables, running everything simultaneously... But I guess for something simple it is a little more work to setup.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1279#issuecomment-833754354:105,optimiz,optimization,105,https://su2code.github.io,https://github.com/su2code/SU2/issues/1279#issuecomment-833754354,2,['optimiz'],['optimization']
Performance,"I am currently tweaking settings to try to get the optimization to continue further; my goal is to get this done today, so I will update this pull request if that is successful.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/362#issuecomment-273270203:51,optimiz,optimization,51,https://su2code.github.io,https://github.com/su2code/SU2/pull/362#issuecomment-273270203,1,['optimiz'],['optimization']
Performance,"I am having some trouble in getting the Fixed CL mode to work properly with the new Output structure and SingleZoneDriver was wondering if anyone had some advice. . The way the fixed Cl mode works is that it first converges the solution to the target CL that is set in the config options. After that, it increases the `AOA` by 0.001 and runs for `ITER_DCL_DALPHA` iterations to determine the gradient `dCL_dAlpha`. This is essentially a finite differencing step to calculate gradients such as dCD_dCL so that it can be added to the objective function if the discrete adjoint is run in the fixed_cl mode. Currently, both the fixed cl convergence and the finite differencing occurs within the one call of `CFluidIteration::Solve` . This PR just changes how the fixed_CL mode converges to the `TARGET_CL` value and doesn't change anything about how the finite differencing step is performed. . My issue is to do with how to output the correct solution (the state before the finite differencing step) at the end of the simulation. Both the fixed cl convergence and the finite differencing occur within the one call of `CFluidIteration::Solve`. But the final solution output is controlled by the `CSinglezoneDriver::Output`. But by the time this is called the solution is at the state after the finite difference step has been taken and the CL is no longer matched. . The proper way to do it in this new output structure/SingleZoneDriver format would be to run the fixed CL mode to convergence using the SingleZoneDriver (including doing all the outputs from the `CSinglezoneDriver::Output` and then running the finite difference after that. But that wouldn't be possible without putting the if (fixed_cl) statement in either the SingleZoneDriver or in SU2_CFD, both of which are much higher level, and shouldn't have a problem specific if statement. The other way to do it would be to force the output structure to write the solution files before the finite differencing step (within the CFluidIteration) ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539148332:878,perform,performed,878,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539148332,1,['perform'],['performed']
Performance,I am not familiar with cygwin but maybe you compiling with debug options (-g) ? What optimization level are you using?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/754#issuecomment-519503808:85,optimiz,optimization,85,https://su2code.github.io,https://github.com/su2code/SU2/issues/754#issuecomment-519503808,1,['optimiz'],['optimization']
Performance,"I am not sure about why periodic boundaries are allowed to deform. It doesn't seem to be a good idea unless there is a way to deform its periodic pair in the same way. As for @auzbaig's question about why SLSQP converges in one step: There is a huge difference in the magnitude of the objective function, O(1) and the gradient O(-11). I am guessing the optimizer doesn't think it can reduce the function value any further since the gradient with respect to the DVs is so small. . To change the relative magnitudes of the objective and gradient, you need to change the DV scaling. This isn't intuitive and is one of the things we are hoping to address in #922 . Check out the `obj_df` function in `SU2_PY/SU2/eval/design.py` (line 386 in the develop branch). There you see how the gradient is scaled: . `grad[k] = grad[k] * sign * scale * global_factor / dv_scl` . Here `scale` is the objective function scaling factor, `global_factor` is what you specify for the `OPT_GRADIENT_FACTOR`, the `dv_scl` is the design variable scaling. . So if you wanted to bring the gradient norm to O(1), you'd have to specify a DV scaling of 1e-11. Usually a gradient norm of O(-6) is what seems to work best with SLSQP.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-628724163:353,optimiz,optimizer,353,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-628724163,2,['optimiz'],['optimizer']
Performance,"I am trying to run again the SWBLI V&V case on the SU2 page. However, as it is provided, it does not work with the SU2 standard boundary conditions. In particular, it always diverges due to NaN residuals in the X-Momentum equation. However, when I use the BCs from the NASA TMR page it works just fine (although only the v2003m model). . Here are the results of the computations performed. . Three configs are used:; 1 - With dimensionless limits $k_{lim} = 10^{-20}$ and $w_{lim} = 10^{-10}$.; 2 - Without dimensionless limiters.; 3 - With dimensionless limits $k_{lim} = 10^{-30}$ and $w_{lim} = 10^{-20}$. I am reporting the Skin Friction Coefficient on the lower wall against the Experimental results and the trend of the residual for $\rho$ during the simulations. Five different meshes have been considered. ![ComparisonNewBCsResiduals](https://github.com/user-attachments/assets/d84d7a23-e173-449a-9968-8d8d49b6000f). ![ComparisonNewBCsSFC](https://github.com/user-attachments/assets/243c55c6-e9c7-4335-b889-67244fa81e6b). The solutions are pretty much identical for the same mesh level, but the cases with the config 3 achieved convergence across all of the meshes. It is interesting how, on finer meshes, the use of dimensionless limits (config 1) actually had worst convergence than the one with std limits (config 2) (up until the finest mesh, where config 2 diverges). I am going to try to perform the simulations also with the non m variants of the SST model and the full production term. It may require some work since all of the occurrences of the ""ComputeStressTensor"" have to be changed. Ideally I think that it should be computed only once and then used that value for all of the other instances. I will focus only on the V2003 model for now as it is the only one that does not diverge.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2325316937:379,perform,performed,379,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2325316937,2,['perform'],"['perform', 'performed']"
Performance,"I attach my `pkgconfig` file for `ompi-cxx.pc` . Note the `Libs.private` line, which correctly states dependencies, but it seems to be ignored by the SU2 build system:. ```; # Copyright (c) 2010 Cisco Systems, Inc. All rights reserved.; # Copyright (c) 2016 IBM Corporation. All rights reserved.; #; Name: Open MPI; Description: Portable high-performance MPI implementation; Version: 4.0.2; URL: http://www.open-mpi.org/; #; prefix=/Users/cesss/OpenMPI/4.0.2; exec_prefix=${prefix}; includedir=${prefix}/include; libdir=${exec_prefix}/lib; pkgincludedir=${includedir}/openmpi; #; # Note that -lopen-pal and all the EXTRA_LIBS are only necessary when; # static linking (they're pulled in by libopen-rte.so's implicit; # dependencies), so only list these in Libs.private.; #; Libs: -L${libdir} -lmpi; Libs.private: -lopen-rte -lopen-pal -lm -lz ; #; Cflags: -I${includedir}; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/867#issuecomment-583904437:343,perform,performance,343,https://su2code.github.io,https://github.com/su2code/SU2/issues/867#issuecomment-583904437,1,['perform'],['performance']
Performance,"I build mine for parallel with OpenMP and then use the environment variable; OMP_NUM_THREADS. On Mon, 10 Feb 2020, 14:41 cesss, <notifications@github.com> wrote:. > *Is your feature request related to a problem? Please describe.*; > I'm going to build SU2 with PaStiX, which requires BLAS built in serial; > mode (not parallel). So, I must build OpenBLAS as sequential for PaStiX.; >; > However, SU2 also makes use of BLAS... but... what kind of build for; > OpenBLAS, sequential or parallel?; >; > It's not a subtle thing, because things can go wrong (or lose a lot of; > performance) if it's built in a way different to what SU2 expects.; >; > *Describe the solution you'd like*; > Just mention it in the build instructions where you mention that OpenBLAS; > can be used by SU2.; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/869?email_source=notifications&email_token=AJCOXN5ODRHEGDIWPFF6YITRCFRS3A5CNFSM4KSPLSO2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IMIWASA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN7HGYWRNCWPPNOLHKTRCFRS3ANCNFSM4KSPLSOQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/869#issuecomment-584254305:573,perform,performance,573,https://su2code.github.io,https://github.com/su2code/SU2/issues/869#issuecomment-584254305,1,['perform'],['performance']
Performance,I can submit a PR later this week addressing this issue. I've done shape optimization with inlet profiles before.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/970#issuecomment-623585831:73,optimiz,optimization,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/970#issuecomment-623585831,1,['optimiz'],['optimization']
Performance,"I can totally see your point. Unfortunately there are no other ways. However, these are only minor performance tweaks. Maybe I will just add this inside the CNumerics::GetInviscidProjJac, since one should not expect a lot of modifications there.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/201#issuecomment-150165444:99,perform,performance,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/201#issuecomment-150165444,1,['perform'],['performance']
Performance,"I could create a ""safe Allgatherv"" function, e.g. in [`mpi_structure.hpp`](https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/Common/include/parallelization/mpi_structure.hpp) or in [`ndflattener.hpp`](https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/Common/include/toolboxes/ndflattener.hpp). This function should check the number of processes, perform a simple copy if it is 1, and otherwise calls the regular Allgatherv. It would then be used [here](https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/Common/include/toolboxes/ndflattener.hpp#L235) instead of `SU2_MPI::Allgatherv`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1893#issuecomment-1397491031:400,perform,perform,400,https://su2code.github.io,https://github.com/su2code/SU2/issues/1893#issuecomment-1397491031,2,['perform'],['perform']
Performance,"I could not follow the work here; I just watched the conference presentation. As much work has been done, have you considered using an existing linear algebra library such as https://github.com/ginkgo-project/ginkgo?. AFAIK the only thing you need to do is copy the matrix to Gingko format on GPU. Then Gingko will provide an efficient, scalable solver that works not only on NVIDIA but also on AMD and Intel. . GMRES and ILU preconditioners are available there, so it is pretty much ready to go for all problems.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2346#issuecomment-2397599775:337,scalab,scalable,337,https://su2code.github.io,https://github.com/su2code/SU2/pull/2346#issuecomment-2397599775,1,['scalab'],['scalable']
Performance,"I did few tests (CGNS mesh format), following are the details -; **While trying to use all 8 cores per node (Total 70 nodes, each having 24 GB RAM)-**. Loading section Connect_PRISM of element type Prism.; malloc failed for element data; malloc failed for element data; ............ malloc failed for element data; Error allocating I4->I8 data array...; malloc failed for element data; Error allocating I4->I8 data array...; malloc failed for element data; ................; malloc failed for element data; malloc failed for element data; Loading section Connect_TETRA of element type Tetrahedron. **While trying 6 cores in each node**. Loading section Connect_PRISM of element type Prism.; malloc failed for element data; malloc failed for element data; malloc failed for element data; malloc failed for element data; malloc failed for element data. **Finally settled with 4 cores at each node and memory usage at every node is--** . PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND ; 4652 aero 30 10 872m 746m 10m R 100 3.1 43:03.38 SU2_CFD ; 4653 aero 30 10 1076m 951m 10m R 100 3.9 43:12.10 SU2_CFD ; 4654 aero 30 10 1162m 1.0g 10m R 100 4.3 43:15.15 SU2_CFD ; 4655 aero 30 10 1458m 1.3g 10m R 100 5.5 43:08.96 SU2_CFD . **With above, memory usage seems to be around 16.8 % of 24 GB RAM**. Hope I am not missing something else (some other usage etc...) and what should be the approximate memory requirement for such mesh sizes (around 60 million or is there a general guideline of memory requirement with mesh size for RANS computation with Implicit solver) ?. Regards; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/291#issuecomment-232018195:152,Load,Loading,152,https://su2code.github.io,https://github.com/su2code/SU2/issues/291#issuecomment-232018195,3,['Load'],['Loading']
Performance,"I did run the viscous ONERA M6 case. The speed up with the default config was marginal (2-3%). I also tried with multigrid enabled, in which case the MKL version was 10% faster. Overall the bottlenecks for the rans case were different than the inviscid onera case. I'll look at what can be done here next.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/543#issuecomment-416955089:190,bottleneck,bottlenecks,190,https://su2code.github.io,https://github.com/su2code/SU2/pull/543#issuecomment-416955089,1,['bottleneck'],['bottlenecks']
Performance,"I do not believe that we should go back to a synchronous communication approach‚Ä¶in my experience asynchronous communication always gives better or equal performance and scalability to a carefully-done synchronous approach. It would be a step back to return to the v6.2 communication schedule. Perhaps the same tests can be repeated on a different machine with a different / better network and see what the outcome is?. Best,. Juan. On Mar 1, 2020, at 4:49 PM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. We could play around with the Wait() calls to wait for a specific message instead of the first to arrive, but it would take some effort to go back to the previous behavior, where the comms happened one at a time for each pair of ranks that needed to communicate. In v7, the behavior is that each rank posts all of their receives, then posts all of their sends, before the buffers holding the received data are checked and unloaded (once the communication of that particular message has completed). ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/894?email_source=notifications&email_token=AA5FFRHHV2YZWCMXS624GILRFL7ATA5CNFSM4K56OFUKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOENNR34Y#issuecomment-593174003>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AA5FFRGLYCGNEQSYRE4ZQRDRFL7ATANCNFSM4K56OFUA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593186725:153,perform,performance,153,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593186725,2,"['perform', 'scalab']","['performance', 'scalability']"
Performance,"I do not have a good grasp on the performance of each scheme. I fear that may be a much time-intensive task, particularly since these all are implicit at the moment.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1885#issuecomment-1381003988:34,perform,performance,34,https://su2code.github.io,https://github.com/su2code/SU2/pull/1885#issuecomment-1381003988,1,['perform'],['performance']
Performance,"I don't see a real problem here. Efficiency is always maximized so in the python scripts the objective function is scaled by -1.0. That's why the optimizer output gives you negative values. Note that the optimizer always minimizes the objective function (therefore we need the scaling)!. I am closing this, but if you have any questions regarding this, please reopen this issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/395#issuecomment-308408287:146,optimiz,optimizer,146,https://su2code.github.io,https://github.com/su2code/SU2/issues/395#issuecomment-308408287,2,['optimiz'],['optimizer']
Performance,"I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035:484,perform,perform,484,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035,1,['perform'],['perform']
Performance,"I have covered all operations used in non adjoint use, the non ideal part of the implementation I mentioned above is that the parallelization is ""local"", i.e. we get to the operation we want to make parallel and launch the threads there, for simple vector-vector operations the overhead may be significant.; Ideally we would have a parallel construct at a higher level, say CSysSolve::Solve, so that the threads are already in flight when we get to those small operations.; In principle it is not too hard to do that, but it needs to be done carefully especially when the execution gets to an MPI part of the code (which thread(s) communicate, etc.).; I will try to benchmark this to put numbers on the performance / simplicity trade-off.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-560572616:703,perform,performance,703,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-560572616,2,['perform'],['performance']
Performance,"I have not used ninja and meson in the past for building. As such, I should mention that there is a difference between the mpi implentations on the Cent7 (normal) and Cent8 (requires load) machines. On the Cent8 machines, the mpi implementation does require a load command prior to compilation; none of the other codes I work with have an issue with running post-compile (or they state that it is a missing file, not a seg fault). I'll check on library names etc to ensure nothing conflicts",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-623656920:183,load,load,183,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-623656920,2,['load'],['load']
Performance,"I have same problem. In cluster, I can run normal analysis (not optimization) without any issue. When I try to run optimization on nodes of HPC, it gives same error at random stage. For example sometimes at DNS2 Defrom or DSN1 adjoint. [error.txt](https://github.com/su2code/SU2/files/12063848/error.txt). Could you suggest any solution?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1666#issuecomment-1637055845:64,optimiz,optimization,64,https://su2code.github.io,https://github.com/su2code/SU2/issues/1666#issuecomment-1637055845,2,['optimiz'],['optimization']
Performance,"I have used both weight +1 and -1 but the optimization direction appears to be independent of it. Another issue is that the OBJECTIVE_WEIGHT parameter is not printed correctly in the configs generated during optimization. Its always +1 (even if I set it as -1). Is the DV_VALUE the same as ""FINDIFF_STEP""? Or does its value happens to be the same?. And why is the DV_VALUE always the same during the optimization to 0.001? Shouldn't this depend on the case itself?. I have attached my config.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-626404968:42,optimiz,optimization,42,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-626404968,3,['optimiz'],['optimization']
Performance,"I just pushed a new version of your inlet profile branch. I really like the solver class abstractions. I can tell you have a good grip on the classes and where data should live - nice job. Here are the changes I have made:; * everything is generalized in parallel for an arbitrary number of inlets in the file. The file format changed slightly.; * I moved around some routines and data to take more advantage of inheritance and encapsulation: it is now more like the restart routines where the reading and data live in the parent CSolver class, the specific load functions are found in the solvers (I overloaded SetInletAtVertex), and the template file is written by COutput. It is written such that any solver could eventually use it for any marker type by adding the appropriate SetInletAtVertex routine for solver-specific data (might need to rename for different marker types rather than inlet) and writing an appropriate template file writer in the output.; * for now, it is still requiring a essentially a matching profile point (nearest neighbor within a tight tolerance) by default, but you can have an arbitrary number of points in the file for each marker, and we can eventually add interpolation easily. We already have some of these routines.; * the turbulent solvers now all use the Inlet_TurbVars data structure even for uniform inlets. Can you please check this with Python?; * multigrid is now working. I put in a boundary face area-averaged restriction operator for the inlet profiles. Any decent approximation on the coarse levels should work ok. I left all of your original routines there, but deactivated them for the moment. Can you please give it a look and let me know what you think (and whether it is working for you)? Feedback most welcome. If we are happy with it, we can clean it up and submit a PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/467#issuecomment-371716916:558,load,load,558,https://su2code.github.io,https://github.com/su2code/SU2/issues/467#issuecomment-371716916,1,['load'],['load']
Performance,"I know that it can be frustrating sometimes operating within the constraints of an open-source project such as ours. However, I can assure you that folks do indeed care about performance, and sometimes I have the impression that we stress over relatively small performance issues (remember to keep the total pie chart of where the major work of the solver resides in mind). . The option WRT_PERFORMANCE= YES is available to get timings for runs broken down by preprocessing, compute, and output phases, and I think we should focus our performance concerns first on issues within the compute phase, unless a major bottleneck appears in the other two phases that completely prohibits us from running larger cases (we have been clearing many of those out lately). We do not have the resources of a professional software company, but what we do have is a great community of folks who are putting in lots of effort on a volunteer basis. @pcarruscag: your reviews have been very helpful for improving contributions - thank you for that effort. Let's keep supporting each other, but let's also make sure we stay positive and foster a welcoming environment to encourage more participation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-534682406:175,perform,performance,175,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-534682406,8,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,"I know this is wicked late, but I have just recently been doing a lot of shape optimization and finally can answer some questions on it. Is this still an issue?. Usually when the optimizer exits with that error, it means the DIRECT run diverged, or something of that sort.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/559#issuecomment-513077626:79,optimiz,optimization,79,https://su2code.github.io,https://github.com/su2code/SU2/issues/559#issuecomment-513077626,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"I noticed that the output phase values for WRT_PERFORMANCE= YES are currently off due to the number of output phases not being correctly tracked (we call the SetResultsFiles in the Iteration class most of the time, and the one in the driver with the timing only at the end of the run). @talbring, did you already have something in mind for this? Otherwise, I can think of a cleaner way to handle those performance benchmarks. I think it would be good to start printing that information by default too potentially. A good place might be within the MPI structure, since it is accessible everywhere and we can also hide the timer ifdefs for MPI.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/798#issuecomment-543913612:402,perform,performance,402,https://su2code.github.io,https://github.com/su2code/SU2/pull/798#issuecomment-543913612,1,['perform'],['performance']
Performance,"I noticed you mentioned that it is a multiblock structured mesh. SU2 expects a single block format, unless explicitly setting up a multi zone problem, so there's an outside chance it's only loading part of the mesh. I would expect that to throw some kind of error, but it's worth checking.; This could explain the wrong z projection, but to check you can plot the output volume solution to see if your mesh is loaded appropriately.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/533#issuecomment-388545925:190,load,loading,190,https://su2code.github.io,https://github.com/su2code/SU2/issues/533#issuecomment-388545925,2,['load'],"['loaded', 'loading']"
Performance,"I observed that sometimes only the product of the stress tensor with a vector is of interest, e.g.:. CNumerics::ComputeStressTensor(nDim, Tau, ...); for (iDim = 0; iDim < nDim; iDim++) {; for (jDim = 0 ; jDim < nDim; jDim++) {; someforce[iDim] += Tau[iDim][jDim]*Normal[jDim];; }; }; // never use Tau again. Do you think it is reasonable to have another function, which takes `someforce` and `Normal` instead of `Tau` as an argument and performs the addition? This would save from allocating `Tau` and going through two pairs of nested `for` loops.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-743131314:437,perform,performs,437,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-743131314,1,['perform'],['performs']
Performance,"I rolled back and had a look at the case again, it turned out to be issue with input given in one of the reference (I followed). I have changed the inputs from original reference and repeated the run (find the attached pdf [SU2_hflux_issue.pdf] https://github.com/su2code/SU2/files/5685357/SU2_hflux_issue.pdf); ) with finer grid. I also ran the case with alternate code. Pressure distribution match is good b/w the two but some differences are still there in heat flux distribution. The important thing is that I could not obtain a low dissipation 2nd order solution (perhaps this is common issue with such cases). I iterated to higher E fix value and Venkat limiter coeff =0.01 to make it work (got some in between order of accuracy). Seems like there will be requirement of some knobs to tune the numerical dissipation for hypersonic cases to avoid carbuncle/instabilities.; I am closing it for now, as primary issue is sorted but perhaps new additions/improvements will be required. Regards; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1063#issuecomment-744062256:791,tune,tune,791,https://su2code.github.io,https://github.com/su2code/SU2/issues/1063#issuecomment-744062256,1,['tune'],['tune']
Performance,"I see thanks for sharing that.; The way I understand (or not) blocking v non-blocking communication, with the former there will be more communications in flight at a given moment since the code does not wait to receive before issuing the next message. Maybe this puts a lot of pressure on your network...; Maybe there are tuning parameters to improve network performance under these conditions (it could be worth having a look around CFD Online), or maybe your new hardware will not have any problem. As for software solutions.; If your usual application is compressible RANS/URANS you can try the new and experimental hybrid parallel mode we just introduced in 7.0.2. This will allow you to have one MPI process per node which will unfold in 16 threads each.; I cannot guarantee this will work flawlessly since I have not tested it for pure unstructured meshes (which seems to be your case) but for block-structured-ish meshes the results so far are very promising (#861).; To use this add option `-Dwith-omp=true` to meson, and then launch the code with `mpirun -n 4 --bind-to none SU2_CFD -t 16 config.cfg` (or something equivalent, the ""--bind-to none"" part is important).; Let me know if you get a cryptic error along the lines of ""coloring failed"". For pure MPI, @economon would it be viable to force per-message waits? and would that be roughly equivalent to the old communication mode? (this would be more work on our side @drewkett so if you could give option 1 a go it would be great).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593162200:359,perform,performance,359,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593162200,1,['perform'],['performance']
Performance,"I see, I do not know what is the quickest way to invert a 5x5 matrix, most robust would probably be LU with pivoting (for which we have the code in the RBF class). Since that relates to how we handle small dense matrices I would say it relates to #643 so it would be good if the community got to a conclusion there.; In any case I want this PR to be only about templating, I can do that kind of cleanup when I:; - Try to activave the MKL optimizations for the discrete adjoint.; - Move the row/col elimination tasks from the structural solver and mesh deformation to CSysMatrix (as you suggested in #658).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/653#issuecomment-485102720:438,optimiz,optimizations,438,https://su2code.github.io,https://github.com/su2code/SU2/pull/653#issuecomment-485102720,1,['optimiz'],['optimizations']
Performance,I should add that I was running a 2D case. SU2_CFD fails in the second optimizer iteration in the setup of the periodic boundaries due to wrong information in the new mesh file.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/210#issuecomment-153779802:71,optimiz,optimizer,71,https://su2code.github.io,https://github.com/su2code/SU2/issues/210#issuecomment-153779802,1,['optimiz'],['optimizer']
Performance,"I should also mention though that moving the threading to a single high-level parallel section is also very problematic for readability/development. Folks will have to be aware that the threads are active, and it can be very error-prone. This was one of the major detractors of implementing the OpenMP framework as we had it in the C&F paper into the develop branch, even though the performance was quite good (and also the interoperability of threading and AD at the time). Any clever suggestions/techniques for hiding the threading as much as possible are most welcome.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-566654480:383,perform,performance,383,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-566654480,1,['perform'],['performance']
Performance,"I think I implemented all the modifications you suggested. I am sorry you see all the commits in between, unfortunately due to Covid I work outside of office and I actually use Github to push the modified code to the office PC. I was actually working on a separate branch but, for reason that I do not understand, all the commits have been moved in the merging process... sorry about that. I am still learning git. In particular the modifications are:. - The functions related to static mesh deformation have been removed. I only included some new lines in the python wrapper ; that overwrite the initial velocities to zero and push back the solution.; - I now use the BC_Sym_Plane of the FEA solver for the deformation at the symmetry plane. I had to add a flag that avoids ; accessing LinSysReact in case of mesh deformation, as this is not initialised in that context.; - GetnMarker_Match_Deform_Mesh is not present anymore; - The marker has been renamed from MATCH_DEFORM_MESH to DEFORM_MESH_SYM_PLANE. All the functions have also ; been renamed accordingly; - I included the SU2 header in all the new files, changing the version number to 7.0.8. I did not modify the version number of ; the files that were already present in SU2 prior to this PR. I think the merging process should take care of that, am I wrong?; - The python functions that were separated in x,y,z component now give back an array and are merged into one function only; - The descriptions for the methods have been added; - The test case has been removed. I actually prepared a tutorial and all the appropriate files will be placed in the tutorial and ; website repos. I will now perform a PR for those repos so that you can see the material. Again thank you very much and sorry for the mess with the ""internal"" commits. . Please let me know if you think I missed something",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-742471972:1654,perform,perform,1654,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-742471972,2,['perform'],['perform']
Performance,"I think in LoadSurfaceElements the SendRecv markers do not exist yet.; unsigned short is what we use most for marker. Local to global should be an array or vector, global to local should be an unordered map, exactly as done for the point and element maps.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762153763:11,Load,LoadSurfaceElements,11,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762153763,1,['Load'],['LoadSurfaceElements']
Performance,I think it would be super useful to change some (or all) of the TestCases to include the suggested settings that you have outlined in this PR. Most users wouldn't know how to get the best performance out of the code otherwise.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-540057251:188,perform,performance,188,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-540057251,1,['perform'],['performance']
Performance,"I think its a good idea to separate the weight from the objective function. This makes it more clear and flexible. However, what bothers me a little bit is that the OBJECTIVE_FUNCTION option is now used for two things. Namely for the optimization and for the individual adjoint runs. Maybe it would be good to still have another option for specifying the obj. function for the adjoint run itself (with a completely different name, so that there won't be any confusions). . Maybe it's less of a problem then I think, though.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-185126081:234,optimiz,optimization,234,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-185126081,2,['optimiz'],['optimization']
Performance,"I think no more changes are needed. All of the test cases remain the same since probably the Rotation correction wasn't used. The only major corrections are the following:; - CRot now is set to 2.0 as in TMR; - The computation of $\hat{S}$ is performed before the the Rotation correction is applied, not after.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2352#issuecomment-2343820369:243,perform,performed,243,https://su2code.github.io,https://github.com/su2code/SU2/pull/2352#issuecomment-2343820369,1,['perform'],['performed']
Performance,"I think that defining these regions in separate files would be better. It would keep the mesh format intact and allow users to change the regions without regenerating the mesh.; We could also use the regions to define volumetric source terms.; 1) Config option to provide the file with regions; 2) Preprocess the regions in each mpi rank to define them as lists of local indices (based on the global indices that are owned by the rank).; 3) Extend the custom outputs to perform volume integrals and averages (not too different from the surface averages we already have), this would directly allow the volume averages to be used in optimizations.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1894#issuecomment-1396263229:470,perform,perform,470,https://su2code.github.io,https://github.com/su2code/SU2/issues/1894#issuecomment-1396263229,2,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"I think that is what is happening, the logic to use either MACH_MOTION or the farfield velocity as the reference is in CEulerSolver::SetReferenceValues, I think if you have fluid load markers we will assume FSI and not use MACH_MOTION. Give this a try and if it fixes the issue we need more robust logic.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1954#issuecomment-1462640745:179,load,load,179,https://su2code.github.io,https://github.com/su2code/SU2/pull/1954#issuecomment-1462640745,1,['load'],['load']
Performance,"I think the issue is looping jSpan between 0 and nSpanDonor-1, I think it should be looped between 1 and nSpanDonor-2 (as is done in the higher level of the for loop) as the hub and shroud are handled seperately and there is no interpolation performed here. Admittedly, this is probably the area of the turbomachinery code I am most unfamiliar with.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2034492128:242,perform,performed,242,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2034492128,1,['perform'],['performed']
Performance,"I thought about tackling this but I will most likely also switch to FADO for these kinds of things for multizone (shape optimization, finite differences). ; Afaik there is a `pull` array which keeps track of all files that need to be copied, it might also be enough to add that to the `state` in `shaep_optimization.py`. Not to discourage you but I doubt that it will work with just that addition tbh. But you are more then welcome to give it a shot and see how it goes :+1:",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1279#issuecomment-835825080:120,optimiz,optimization,120,https://su2code.github.io,https://github.com/su2code/SU2/issues/1279#issuecomment-835825080,1,['optimiz'],['optimization']
Performance,I tried again and the problem still persist. I test the NACA64A010 euler optimization with V4.3.0. ; I attached the Log for adjoint calculation. same thing happened on all of the unsteady cases. there would be some problems with gradient projection code; [log_Adjoint(DRAG).pdf](https://github.com/su2code/SU2/files/517609/log_Adjoint.DRAG.pdf),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/296#issuecomment-252417783:73,optimiz,optimization,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/296#issuecomment-252417783,1,['optimiz'],['optimization']
Performance,I was having several other issues with optimization in v7. I have downgraded to v6 where none of these issues are there. I will not need a resolution for this at the moment. Thanks! @stephansmit,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/990#issuecomment-645074820:39,optimiz,optimization,39,https://su2code.github.io,https://github.com/su2code/SU2/issues/990#issuecomment-645074820,1,['optimiz'],['optimization']
Performance,"I was running some tests using a simple geometry but for the refinement seems to be chewing up the geometry. Has anyone who has worked on 3D geometries experienced this or figured out a way to avoid this?. I was using the following settings:; ```; % ------------- MESH ADAPTATION PARAMETER ------------%; %; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= MACH; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 2.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (1000000, 1300000, 1500000); % Number of adaptations performed at each level; PYADAP_SUBITE= (2, 2, 2); ```. ![refine](https://user-images.githubusercontent.com/16842258/104834786-0b94fa80-58e5-11eb-9018-687ffc5aaa9d.png). I noticed a few comments up, there is the `PYADAP_BACK` setting, which sounds like it might solve this, but how should one use this? Should the geometry alone be re-meshed to a high resolution and the whole volume exported as a SU2 block? Or should it be just a surface mesh? (It seems that Pointwise is not able to output only the surface mesh in SU2 format.)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-761751741:827,perform,performed,827,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-761751741,2,['perform'],['performed']
Performance,"I would like to reopen the issue regarding the dry run. When having turbomachine settings on, the dry run fails when calculating (preprocessing the turbomachine geometry) with the following error:. - Case Testcases APU_Turbomachinery; - Version 7.5.1 ; - Command: SU2_CFD -d Jones_restart.cfg. ```; ---------------------- Turbomachinery Preprocessing ---------------------; Initialize Turbo Vertex Structure.; Number of span-wise sections in Zone 0: 0.; Number of span-wise sections in Zone 1: 0.; Max number of span-wise sections among all zones: 0.; Initialize solver containers for average and performance quantities.; Compute inflow and outflow average geometric quantities.; Set span-wise sections between zones on Mixing-Plane interface.; Transfer average geometric quantities to zone 0.; [---] *** Process received signal ***; [---] Signal: Segmentation fault (11); [---] Signal code: Address not mapped (1); [---] Failing at address: 0x8; [---] [ 0] /lib/x86_64-linux-gnu/libc.so.6(+0x43090)[0x7ffa2d583090]; [---] [ 1] SU2_CFD(+0x5e6dc4)[0x55c98b9dedc4]; [---] [ 2] SU2_CFD(+0x1ab51e)[0x55c98b5a351e]; [---] [ 3] SU2_CFD(+0x1bc2d3)[0x55c98b5b42d3]; [---] [ 4] SU2_CFD(+0x201b26)[0x55c98b5f9b26]; [---] [ 5] SU2_CFD(+0x151f79)[0x55c98b549f79]; [---] [ 6] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7ffa2d564083]; [---] [ 7] SU2_CFD(+0x171b3e)[0x55c98b569b3e]; [---] *** End of error message ***; Segmentation fault; ```. i guess in the dry run mode, some algorithm are ignored and therefore the segmentation fails. ; I was wondering: . 1) Are there any additional output variables that come with the turbomachinery settings (besides those, available in the folder) . 2) If not, available output for the solver can be achieved by just dry running a case that has the same solver but no turbomachine settings on. Maybe a flag in the dry run option could be implemented on, that deactives the turbomachine settings in the case, to avoid the error message.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/857#issuecomment-1623092119:597,perform,performance,597,https://su2code.github.io,https://github.com/su2code/SU2/issues/857#issuecomment-1623092119,1,['perform'],['performance']
Performance,"I'll have the summary at the bottom, you guys read papers you know to look for the conclusions.; ## Global speedup (Conclusions); I took the expected speedups for each prototyped area of the code and applied them to the profile I measured for the benchmark case from #716 / #753 (which is not very linear solver intensive).; It is hard to estimate the effect of fusing the convective and viscous edge loops, I assumed the cheaper of the two becomes ""free"" and the other gets a speedup of 1.5 (speedup should be 1.85 accounting for the matrix update optimizations).; I assumed that gradients and limiters are not fused and that minor areas of the code get no speedup, which is not necessarily true as this work would require contiguous storage of geometric properties (geometry->node and geometry->edge) and so some speedup is expected due to that, but in the absence of evidence I prefer to be conservative.; Here are the numbers:; ![image](https://user-images.githubusercontent.com/38071223/66394872-15376f00-e9ce-11e9-80ed-193aea2aae6f.png); The take home number is **1.7**. Cumulative with the 1.4 from contiguous storage, so 2.4 total. Despite most of my posts being focused on SIMD my main motivation is the hybrid parallelization which will allow important algorithmic improvements when running on hundreds of cores, namely the multigrid and additive linear preconditioners will retain their effectiveness at much larger core counts.; I will not hazard an estimate for this. ## Proposed changes (Summary); **Hybrid parallel**; - Gradients (GG) and limiters converted to point loops (embarrassing parallel, no edge colouring needed).; - Residual loops parallelized with edge colouring, if anyone has suggestions regarding algorithms send them my way, so far I only tested greedy colouring on edge groups to preserve spatial locality (this aspect is absolutely fundamental).; - Matrix multiplication, BCSR format is also embarrassing parallel.; - Linear preconditioners, additive decomposition wit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539523312:549,optimiz,optimizations,549,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539523312,1,['optimiz'],['optimizations']
Performance,"I'm going to jump on this too. Is anyone working on solution interpolation (from one mesh to another)? @sravya91, are you still working on this? Did PR #672 introduce any capabilities to address interpolation? This seems to be a common request from SU2 users: [\[1\]](https://www.cfd-online.com/Forums/su2/213321-su2-solution-interpolation.html) [\[2\]](https://www.cfd-online.com/Forums/su2/215920-use-coarse-grid-flow-solution-initial-solution-fine-grid.html). I've used some pretty rough python scripts to do solution interpolation in the past, and it would be nice to have some SU2 C++ code that could perform the same task.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/466#issuecomment-502780046:606,perform,perform,606,https://su2code.github.io,https://github.com/su2code/SU2/issues/466#issuecomment-502780046,1,['perform'],['perform']
Performance,"I'm sorry to interject on this issue with what is probably a useless comment, but I wanted to ask if this issue affects you also in 1st order simulations?. In my experience MUSCL reconstruction at boundaries in SU2 is ""incorrect"" as it doesn't take into account the boundary condition applied and just assumed ```v_i = v_j```, as far as I have understood from scouring the code. This usually is a small first order approximation locally, but with complex EoS or unlucky combinations of BCs and numerical settings it can cause unphysical solutions and crashes. In a project of mine I have had some success by either disabling MUSCL outright at boundaries (very conservative and brutal solution), or disable it only at specific kinds of corners, which requires more memory unfortunately as one needs to somehow save if the node is a corner, etc. The ""real solution"" would be to either save the boundary solution in ghost nodes and use it for the gradient computation, or fix gradients in post-process with a small performance penalty.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2266#issuecomment-2107217617:1012,perform,performance,1012,https://su2code.github.io,https://github.com/su2code/SU2/pull/2266#issuecomment-2107217617,1,['perform'],['performance']
Performance,"I'm wondering, if a test case for unsteady restart shape optimization would be computationally too expensive for the test system. ; Please let me know you opinion on that. ; Otherwise this request is complete. Best; Steffen",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/964#issuecomment-627498661:57,optimiz,optimization,57,https://su2code.github.io,https://github.com/su2code/SU2/pull/964#issuecomment-627498661,1,['optimiz'],['optimization']
Performance,"I've messed around with this a bit in some of my other branches. Since I've been using python scripts, I've used the minimum CFL in the volume at the end of the flow solution (obtained from the history file) as the CFL in my adjoint runs. I figured that would be the largest CFL that could be applied everywhere and give a contractive iteration. Doing so significantly reduced the cost of the adjoint (obviously proportional to CFL_Min/CFL_Init). We could probably do even better and output the local CFL in the restart then load that into adjoint runs, maybe with a reduction factor if we want to be conservative.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1036#issuecomment-673044213:525,load,load,525,https://su2code.github.io,https://github.com/su2code/SU2/pull/1036#issuecomment-673044213,1,['load'],['load']
Performance,"I've run into some headaches getting the optimization to run efficiently on my end, which is why I ask. Playing with a toy problem, SLSQP actually does a great job on its own (with all tuning parameters set to 1.0) if the following conditions are met:. + The constraints and bounds effectively bound ""reasonable"" solutions, so you don't have to worry about unrealistic deformations.; + The optimization function is (relatively) convex. If those conditions are met, then playing with any of the tuning parameters makes SLSQP converge more slowly, sometimes with 10x the iterations. So its not clear to me when the tuning parameters are necessary, and how those tuning parameters affect the convergence in those cases. I'm not arguing that the tuning parameters aren't necessary, just that their effects aren't clear. And I agree, the proper way to nondimensionalize and regularize these problems is not clear from a brief search of the literature.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616825497:41,optimiz,optimization,41,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616825497,4,['optimiz'],['optimization']
Performance,"If ""default"" blas is just the compiled reference implementation then the difference is massive, because it will not be optimized code. As for lapack it should not matter so much, to my knowledge the lapack functions we use are built on top of blas so good blas -> good lapack.; But of course the question is whether this is even needed, I think only the DG solver and RBF interpolation use blas.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632175752:119,optimiz,optimized,119,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632175752,1,['optimiz'],['optimized']
Performance,"If it ever becomes a bottleneck for my objectives with SU2, I will pitch it and work on it. Until then I have to develop and consolidate high level functionality.; I do not think anyone mentioned this in Glasgow so it is probably not an issue for anyone, it is just one of those nice things to have in place when you start writing code...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/570#issuecomment-434001240:21,bottleneck,bottleneck,21,https://su2code.github.io,https://github.com/su2code/SU2/pull/570#issuecomment-434001240,1,['bottleneck'],['bottleneck']
Performance,"In `CVolumetricMovement::SetBoundaryDisplacements` the periodic boundaries are left free, and so there is no guarantee that periodicity will be preserved. I don't use the optimization framework, but the default formulation is usually to minimize, i.e. you use a negative weight if you want to maximize, have you tried not setting the weight to -1?. If you want to perturb a single parameter you change one of the values in DV_VALUE. Attach your config...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-626400442:171,optimiz,optimization,171,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-626400442,1,['optimiz'],['optimization']
Performance,"In my case I need to build like this:; ```; export CC=mpicc.mpich; export CXX=mpicxx.mpich; export CXXFLAGS=""-march=native -funroll-loops -ffast-math -fno-finite-math-only"". ./meson.py build --optimization=2 --warnlevel=3 -Denable-tests=true --prefix=$PWD/build -Dcustom-mpi=true -Dwith-omp=true; ./ninja -C build install; ```; Maybe building with OpenMP makes a difference.; The unit test output is; ```; ../UnitTests/Common/toolboxes/ndflattener_tests.cpp:78: FAILED:; REQUIRE( nd3[r][0][0] == 0.7 ); with expansion:; 2.0 == 0.7; ```; valgrind does not pick up anything on the unit test, only on the new test case added in #1892 ; The expected output is as shown in hybrid_regression.py (note that the testcases branch is not develop).; When the UB manifests the residuals are not the expected (by varying orders of magnitude depending on the spurious value of wall roughness).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1893#issuecomment-1385691650:193,optimiz,optimization,193,https://su2code.github.io,https://github.com/su2code/SU2/issues/1893#issuecomment-1385691650,1,['optimiz'],['optimization']
Performance,"In principle sounds good, it will probably break lots of cases, optimization scripts and what not. We'll see, we are not leaving this inconsistent though, all or nothing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2079#issuecomment-1631861372:64,optimiz,optimization,64,https://su2code.github.io,https://github.com/su2code/SU2/pull/2079#issuecomment-1631861372,1,['optimiz'],['optimization']
Performance,"In reply to:; > What is the subroutine ""FinishResidualCalc"" is it a new name to call ""ComputeResidual"" if that is the case, for consistency with the rest of the code we should probably use ""ComputeResidual"". I would have liked to have named it the way you suggested. But unfortunately, it's not possible. There's two reasons for this: one is more philosophical, the other is due to a programming restriction. 1. The real residual calculation is a larger method in the parent class (i.e. `CAvgGrad_Abstract::ComputeResidual`). The method currently called `FinishResidualCalc` is just a step in that larger process.; 2. Since the real residual calculation is in the parent class, we need to be able to call it from derived classes (i.e. `CAvgGrad_TurbSA::ComputeResidual`). If we also name a separate method in the derived class `ComputeResidual`, then that method now overrides the method in the parent class. Instead of performing the whole calculation, callers would only get the final step in the calculation. I'm not fixed on the name. Honestly, I picked it somewhat arbitrarily. I just know that ""ComputeResidual"" isn't an option. What do you suggest as a better name?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/422#issuecomment-320694792:920,perform,performing,920,https://su2code.github.io,https://github.com/su2code/SU2/pull/422#issuecomment-320694792,1,['perform'],['performing']
Performance,"In short, it means that the particular objective that you are requesting is not available in the python framework at this time. You can run. ```; $ SU2_CFD your_config.cfg -d; ```. to see the list of possible outputs that can be used as objectives for your particular problem currently. There are some objectives that have not been moved to the new output structure yet (but they are coming). In the meantime, you can add new custom history outputs for the flow solver (see CFlowCompOutput.cpp for instance) and then use them for objectives during shape optimization (you will likely need to run updateHistoryMap.py to register the new outputs with python).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/889#issuecomment-602776476:554,optimiz,optimization,554,https://su2code.github.io,https://github.com/su2code/SU2/issues/889#issuecomment-602776476,1,['optimiz'],['optimization']
Performance,"In the lab we are also writing/rewriting another largish solver with eigen (https://ic-sharpy.rtfd.io/). A major advantage (and, I think, critical for open source) was code readability to ease the learning curve for newcomers, with no reported penalty on performance. I second all the other nice things about it written by @pcarruscag.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459943384:255,perform,performance,255,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459943384,2,['perform'],['performance']
Performance,"Indeed, this helps, but it could be more general, since you only get to see this in the console output. I was thinking that a simple tag in the optimization history file for the evaluations that are 'major' would make this much simpler (and easier to post-process).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/108#issuecomment-102168908:144,optimiz,optimization,144,https://su2code.github.io,https://github.com/su2code/SU2/issues/108#issuecomment-102168908,2,['optimiz'],['optimization']
Performance,"Interesting. Well I managed to get icpc 19.04 to work last night (cluster IT problems...) and sure enough I got my 9% back. I think that is too large a difference in relative performance of a code that does not have any architecture specific tuning to attribute to 1 CPU generation. I have some ideas for vectorization + threads without complete re-writes and without readability concerns, I'll prototype them when I have time.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524215699:175,perform,performance,175,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524215699,1,['perform'],['performance']
Performance,"It makes sense to cache because addValue does not always add a new value, only when the time iteration changes, after the first inner iteration addValue only modifies the last entry of the history.; The changes you mention sound ok, keep the switches, virtual would make everything slower and more complicated.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1545#issuecomment-1041285090:18,cache,cache,18,https://su2code.github.io,https://github.com/su2code/SU2/issues/1545#issuecomment-1041285090,1,['cache'],['cache']
Performance,"It's not always the case that using a restart file is continuing from a simulation. For example, if one has a simulation that has a similar solution as a seed. An example would be doing optimization and using a nearby flow solution. Here, having the iteration count start from zero is useful, because it's the more accurate measure. We would also have to this about how this interfaces with MAX_ITER. Right now it's really clear, but which does it mean when iterations don't start from zero?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/99#issuecomment-103239930:186,optimiz,optimization,186,https://su2code.github.io,https://github.com/su2code/SU2/issues/99#issuecomment-103239930,2,['optimiz'],['optimization']
Performance,"It's possible that you hit a bug, or the adjoint solver diverged, or... who knows, the python scripts are not very friendly at reporting errors and they are also not very flexible.; My most sincere advice is to follow what is done in this tutorial https://su2code.github.io/tutorials/Species_Transport/ it will save you time in the medium term, and at least you will know what the optimization is doing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1666#issuecomment-1160907119:381,optimiz,optimization,381,https://su2code.github.io,https://github.com/su2code/SU2/issues/1666#issuecomment-1160907119,1,['optimiz'],['optimization']
Performance,"It's running.; A small problem is that I have to change `ubuntu:19.04` to `ubuntu:18.04` and change `libopenmpi3` to `libopenmpi-dev openmpi-bin` in the definition, or it will fail.; ```; ubuntu@main-3:~/main_shared_volume/build_singularity_image/builid_image$ sudo singularity build su2_tensorforce.sif su2_tensorforce.def ; INFO: Starting build...; Getting image source signatures; Skipping fetch of repeat blob sha256:1eecd0e4c2cd8c1f628b81c53a487aae6c8d4140248a8617313cd73079be09c4; Skipping fetch of repeat blob sha256:fac13afdf65bf403945c8d6bee654a26940c5527a9913bdf8daa54b69a49f550; Skipping fetch of repeat blob sha256:0c6dd534ddf18642a5af19c09c2d9744d0d1aa93680995d430b5257b6eed079d; Skipping fetch of repeat blob sha256:854703cff8700dce5b5ff70e54f5d612ab701405bc200a5b10a0213ca9025e50; Copying config sha256:993d5f573a24af19dd6006bc3e6e113bd0c709797dc48676f4f0b5ed456470cc; 2.42 KiB / 2.42 KiB [======================================================] 0s; Writing manifest to image destination; Storing signatures; singularity image-build: relocation error: /lib/x86_64-linux-gnu/libnss_files.so.2: symbol __libc_readline_unlocked version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference; FATAL: While performing build: while running engine: exit status 127; ```. My OS is ubuntu 18.04, and OpenMPI version is 2.1.1. I will take a test to see the reason. Once if finishes, I will let you know. Thank you.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-515383478:1231,perform,performing,1231,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-515383478,1,['perform'],['performing']
Performance,"Lately I've been playing with Ipopt, which has auto scaling, the documentation (https://coin-or.github.io/Ipopt/OPTIONS.html#OPT_NLP_Scaling) and implementation papers go into decent detail about the strategies they have.; That being said, in the optimizations I've run in the past using L-BFGS-B, I scaled the objectives, constraints, and variables to the [-1, 1] range, and things seemed to work ok, i.e. not excessively long line searches etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616830810:247,optimiz,optimizations,247,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616830810,1,['optimiz'],['optimizations']
Performance,"Looking at `CSurfaceMovement::SetFFDCPChange` in `Common/src/grid_movement_structure.cpp`, it looks like it would move by 0.001 in all directions. The movement vector would be [0.001, 0.001, 0.001]. . Like @pcarruscag said, we usually only move in one of the directions. If you want to move in all directions and let the optimizer control them independently, you could define multiple DVs for the same control point: . DEFINITION_DV= ( 11, 1.0 | blade | FFD_BOX, 0, 0, 0, 1.0, 0.0, 0.0 ); ( 11, 1.0 | blade | FFD_BOX, 0, 0, 0, 0.0, 1.0, 0.0 ); ( 11, 1.0 | blade | FFD_BOX, 0, 0, 0, 0.0, 0.0, 1.0 ). But I would be careful when doing this. It can cause some wonky-looking deformations.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/977#issuecomment-628732284:321,optimiz,optimizer,321,https://su2code.github.io,https://github.com/su2code/SU2/issues/977#issuecomment-628732284,1,['optimiz'],['optimizer']
Performance,"Made the last of the changes that I wanted too in connection to the comments provided by @economon and @pcarruscag . Just as a review of the things I changed: . 1) Changed the error message; 2) Implemented the UQ methodology for a non-ideal fluid and for both gradient methods (AvgGrad and AvgCorrectedGrad). ; 3) generalized the eigen-decomposition functions for order n matrices. Also made the functions static so that they can be used without the need for an instantiation of the CNumerics class; 4) Improved performance by moving variable declarations to the class constructor for CNumerics; 5) Changed UQ config option names to be more specific. Added an output message for when people use the previous names.; 6) This instigated some changes to the TestCases config files, and to the compute_uncertainty.py script.; 7) Some general code clean up. Let me know if there are any other improvements that I should include.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/570#issuecomment-434551782:512,perform,performance,512,https://su2code.github.io,https://github.com/su2code/SU2/pull/570#issuecomment-434551782,1,['perform'],['performance']
Performance,"Marker fluid load is to allow the native structural solver to receive fluid loads from python, and to extract adjoints again from python. Similarly, it allows extracting fluid loads from the flow solver via python, and its adjoints to be set, again from python.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778381964:13,load,load,13,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778381964,3,['load'],"['load', 'loads']"
Performance,"My experience is that nice looking code and performance are two conflicting items, unfortunately. Apart from being contiguous in memory, you only obtain good performance when the vector length is a multiple of 8 or 16. This typically leads to padding the array, which does not improve readability. Furthermore, the best optimization is obtained when the vector length is known at compile time, typically leading to even uglier looking constructions,",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-513174037:44,perform,performance,44,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-513174037,3,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Nah, I usually put in all the control points. It doesn't increase the computation time significantly and the optimizer should be able to handle that many control points.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/984#issuecomment-628727533:109,optimiz,optimizer,109,https://su2code.github.io,https://github.com/su2code/SU2/issues/984#issuecomment-628727533,1,['optimiz'],['optimizer']
Performance,"Nice progress @pcarruscag!. I like the concept of your SIMD-friendly class that will take care of the data structure under the hood coupled with a standard type of loop statement (w/ +SIMDLEN). This should make it pretty easy for folks to still modify the kernels without having to worry about the data alignment, and they can reuse the same simple 'for' construct repeatedly. . Another reason to have our own lightweight class for this is that you can avoid dependence on OpenMP for SIMD (although that feature looks to have potential and wasn't available until somewhat recently) as well as the intrinsics. In my experience, the latter is especially bad for portability and readability (part of why we left the CaF work in a separate repo). It starts to become so specialized that compiling and modifying become difficult. W.r.t. OpenMP, another roadblock there a few years ago was making sure it is interoperable with CoDi for the adjoint, but I know this has been worked on and may be available by now. Might keep an open mind about point vs. edge. In some places, we may be able to pump up the compute in our loops by fusing kernels, as previously discussed (and I am guessing you are working on this already with gradients/limiters). Could change the final performance numbers significantly. Lastly, I know you are not there yet, but it is worth considering whether you can reuse anything you are developing in the kernels here for the linear solver routines. At some point, you will successfully reduce the cost of the residual kernels (RHS) to the bandwidth limit, and the majority of the iteration cost will be in the linear solver (it is already about 50% of the iteration cost before optimization, if I recall). Before making final decisions on strategy, you should consider if it will help in any of the linear solver routines too.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530440072:1263,perform,performance,1263,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530440072,4,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"No meson option yet, it is a very small one though, the whole system works by detecting `-fopenmp`.; Your second comment is the main argument against moving the parallel section further up.; Allocation routines have the highest risk of making a mess, but even seemingly innocuous things like the small auxiliary arrays we allocate e.g. in CSolver and then use in derived classes are a problem.; I am almost done making the FEA solver completely hybrid parallel and I had to refactor most uses of those arrays. This is also why I took a more functional approach to the new limiter and gradient routines. The way we use CConfig is also not thread safe, we would need to make all ""SetSomethings"" atomic, which would be monumental.; Initially I would have a few parallel sections (it is not too difficult to then move them up if we think that is the way to go) I want to use the FEA solver to get an idea for the relative performance, after seeing the effect of `OMP_WAIT_POLICY` I am optimistic.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-566667503:918,perform,performance,918,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-566667503,1,['perform'],['performance']
Performance,"No need for Intel buddies, I know what's up. Take [this code:](https://gcc.godbolt.org/z/siQamn); ```; class Base {; public:; inline virtual double get() const {return 0.0;}; };. class Derived : public Base {; double val;; public:; Derived(double a) : val(a) {}. inline double get() const final {return val;}; };. double fun1(Base* obj) {; return obj->get();; }. double fun2(Base* obj) {; return static_cast<Derived*>(obj)->get();; }; ```. `get` of derived has been marked `final` so in `fun2` polymorphism should be optimized away. Here is the assembly for gcc 5.4:. ```; fun1(Base*):; mov rax, QWORD PTR [rdi]; jmp [QWORD PTR [rax]]; fun2(Base*):; movsd xmm0, QWORD PTR [rdi+8]; ret; ```; `fun1` needs a jump, `fun2` knows what to return right away. Here is the assembly for icc 17:; ```; fun1(Base*):; mov rax, QWORD PTR [rdi] #16.12; mov rdx, QWORD PTR [rax] #16.12; jmp rdx #16.12; fun2(Base*):; mov rax, QWORD PTR [rdi] #20.34; mov rdx, QWORD PTR [rax] #20.34; jmp rdx #20.34; ```. @vdweide please tell me you did not use icc 19, because it performs this optimization just fine on this simple example. By the way @talbring (since you asked in #753), take away the `final` keyword and nothing gets optimized by the `static_cast`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-523952473:517,optimiz,optimized,517,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-523952473,8,"['optimiz', 'perform']","['optimization', 'optimized', 'performs']"
Performance,"Not sure if this issue is related, but I'm performing axisymmetric simulations of a convergent nozzle. Throughout most of the domain the axis values seem fine, but there is a region where density behaves quite strangely at the axis. What is seen here is the density gradient, just to make it more visible:; ![grafik](https://user-images.githubusercontent.com/42602495/152206391-755443cc-7c7e-43f1-812a-2335879027c4.png). Results obtained with SLAU2, 2nd order euler.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1373#issuecomment-1028187842:43,perform,performing,43,https://su2code.github.io,https://github.com/su2code/SU2/issues/1373#issuecomment-1028187842,1,['perform'],['performing']
Performance,Not without changing the meson.build script to treat blas and lapack separately (which I don't think we should do since a default build-from-source openblas will have both) or specifying a load of environment variables.; In said script you can try modifying `su2_deps += blas_dep` to; ```; su2_deps += blas_dep; su2_deps += dependency('lapack'); ```; Or maybe it will work if you just specify `-Dblas-name=lapack` and blas happens to be included as an automatic dependency of that.; Our documentation does state that:; >Note: The BLAS library needs to provide support for LAPACK functions. I'll update it with this arch linux special case when I get a minute.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-632083173:189,load,load,189,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-632083173,1,['load'],['load']
Performance,"Of course I'll provide an example of an MLP input file, as well as a python script I wrote that translates an MLP trained through TensorFlow to such an input file. . Very well, I'll move the files from the numerics folder to the common folder and change names accordingly. The models I used so far had between 5 and 50 perceptrons and up to 15 layers. Performance is quite important, as evaluation of MLP's is generally more computationally expensive than for example lookup tables. The larger the MLP architecture, the more costly evaluations get of course. Any improvement to the computation speed will therefore be welcome. In terms of memory, the MLP's don't seem to be an issue so far.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1757#issuecomment-1247834992:352,Perform,Performance,352,https://su2code.github.io,https://github.com/su2code/SU2/pull/1757#issuecomment-1247834992,1,['Perform'],['Performance']
Performance,"Ok one issue out of the way.; After reading your first post again, it is a bit suspicious that the iteration time is ""exactly"" the same, can you post the preprocessing part of the output for:; 16 cores on one node; 16 total cores on 2 nodes (8+8); 8 cores on one node.; If b)==c) you are running identical simulations on each node (i.e. not distributing over nodes).; If a)==b) can you test the scalability with fewer cores (2 on one node Vs 1+1).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593073686:395,scalab,scalability,395,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593073686,1,['scalab'],['scalability']
Performance,"Ok the ""simple"" version of ""going parallel"" whenever we get to a linear algebra operation did not make the cut.; On an older architecture there was a 10% slowdown of the linear solvers at ~10k nodes per core and about the same on a newer architecture but only at ~1k node per core.; Since hybrid parallel is supposed to be good for strong scaling, this was not good enough... With the new strategy it is ok (see ""performance"" below), hence this is ready for review. ### Overall Strategy; The strategy now is to start a parallel section in CSysSolve::Solve that covers building the preconditioner and solving the linear system.; Linear algebra routines called within this section have _worksharing_ constructs instead of _parallel_ ones, i.e. the work is distributed by however many threads arrive to that routine. This also makes the routines safe to call in serial.; The only ""dangerous"" things to do in parallel are to: manage memory for a shared object (multiple threads call `new` but there is only one shared pointer on which to call `delete`); writing to the same memory locations concurrently.; I tried to make the first issue debugable by asserting that the initialization routines of CSysMatrix and CSysVector are only called by the master thread.; For the second issue I made the associated classes as const-correct as possible, that should at least make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does n",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:413,perform,performance,413,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,4,"['concurren', 'perform']","['concurrently', 'performance']"
Performance,"Ok time to share some results after #753.; I deviated a bit from the original plan in that I skipped the contrived strategy of using a wrapper container with a special [] operator (as it had a slight whiff of hackery), and went straight to adding ""iNode"" to the methods of CVariable instead (me and a few lines of python...). The first rule of performance is **""measure it before changing code""**, I broke that rule because as my first post illustrated non contiguous storage at the scale we had is a real killer. With that out of the way, to some extent at least (the layout may not be optimum still) measuring is essential to decide what to do next. This is the case I am using:; ![case](https://user-images.githubusercontent.com/38071223/63288257-27d9d580-c2b4-11e9-9899-8b44b230b8bb.png); It is a bad wing design (NACA0012) with some sweep and taper and a home-brew mesh whose quality rivals that of the design (it converges and the flow does not separate...).; The mesh is just over 500k vertices (so it ""fits"" comfortably in my pc) the y+ is not great (obvs) but the aspect ratios are 200 and 2000 in the chordwise and spanwise directions respectively, so not exactly linear solver friendly either. Some settings which are kinda optimal:; - Mach 0.6, AoA 2 degrees;; - SST (1st order);; - CFL 20 (higher and residuals would limit-cycle (regardless of linear solver settings); - Roe;; - MUSCL - Green-Gauss and Venkat-Wang;; - FGMRES + LU_SGS to 0.05 residual (about 3 iters on avg.);; - 2 levels of MG (1,1,2 iterations, all zeros for other stuff and 0.7 damping both ways);. The case is light on the linear solver and therefore stands to benefit the most from better data layout. Conversely, applications that can take higher CFL / or use central schemes will not benefit as much. **Running this from scratch to residual of 10^-8 on a couple of Xeon E5-2650v4 (24c total) shows a speedup of 1.4 and just over 10% lower memory usage.**; Those numbers will be better for an equivalent 2D case sin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-522730951:344,perform,performance,344,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-522730951,2,['perform'],['performance']
Performance,"Ok, I think the mesh file issue may have been due to the file system. The mesh file issue happened when I ran the simulation across three nodes on the cluster I was using. I tested on a single high memory node instead and the issue went away. It looks like problem solved! . The drag objective also seems to be working. One thing I noticed is that GNORM and OBJFUN values are not being listed in the output for each design as they were in the single point optimization. I'm not sure what that's about, but the drag values are decreasing!. Thanks again for the responses!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/912#issuecomment-609554540:456,optimiz,optimization,456,https://su2code.github.io,https://github.com/su2code/SU2/issues/912#issuecomment-609554540,1,['optimiz'],['optimization']
Performance,"Ok, now `CPoint` stores information on the closest wall element location in vectors `ClosestWall_{Rank,Zone,Marker,Elem}`. `CPoint::SetWallRoughness` performs the lookup, inserting the location into the map (rank,zone,marker)->(roughness) that is provided to `CPoint::SetWallRoughness` as an argument of a new templated type `NdFlattener`. I wrote the new file `Common/include/ndflattener.hpp` some time ago and I think it is a nice generalization of the. > custom type with interface (rank, [zone,] marker). you're referring to. In short, it allows to. - serialize pointer-to-pointer-to... arrays into 1D arrays, as many as there are indices. The array corresponding to the last index stores the data and the others store indices.; - And to `MPI_Allgatherv` them, adding a new index for the rank. Using it detaches a bit from the original goal of this PR (which was to fix some illegal reads reported by valgrind, because the wrong array of roughnesses was accessed) but I think it's a useful structure. Probably I should also add some tests.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1286#issuecomment-841123844:150,perform,performs,150,https://su2code.github.io,https://github.com/su2code/SU2/pull/1286#issuecomment-841123844,1,['perform'],['performs']
Performance,"Okay, all tests should be passing (except some random new codefactor issues). Main issue with the GY models hanging is disambiguating which matrix of collision integral (omega) values to use, Scalabrin's notation is a bit unclear. Are there other places we need to modify for including electrons? Anything in viscous numerics?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1887#issuecomment-1384746569:192,Scalab,Scalabrin,192,https://su2code.github.io,https://github.com/su2code/SU2/pull/1887#issuecomment-1384746569,1,['Scalab'],['Scalabrin']
Performance,"On the subject of virtual functions I would like to put another idea forward.; After moving things around in #725 I noticed that we have tons of `inline virtual` methods.; The keyword `inline` has two meanings to the compiler:; - ""Dear merciful compiler please copy paste the body of this function and then do all your wonderful optimizations, if that pleases your excellency.""; - ""Dear forgiving compiler, you will find this method defined in multiple units, please don't be mad"" (i.e. ignore the one-definition-rule). `virtual` means determine what version of the method to call at runtime. This is not compatible with the first (and often the intended one) meaning of inline, therefore the compiler will in general not inline those methods.; They will only be inlined if they are being called on a pointer to the derived class that does not declare the method to be virtual anymore. CSolver knows what variables it creates and so in hot areas of the code it could do a static downcast to allow inlining (e.g. `static_cast<CEulerVariable*>(node[iNode])->DoStuff()`).; Where is this important? For example when computing gradients, where simple additions and subtractions are hidden behind virtual functions.; If you are worried about maintenance each solver can typedef its most safe downcast level or better yet (or just more modern), methods that could benefit from this can be templated for the type of downcast.; Those in favour say Yea those against say Nay.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-509273008:329,optimiz,optimizations,329,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-509273008,2,['optimiz'],['optimizations']
Performance,"One of the interesting paper -. "" Comparison of numerical and Analytical Jacobians"", Kirk J. Vanden, Paul D. Orkwis; AIAA, Vol 34, No. 6, June 1996. They computed the exact analytical Jacobian with symbolic manipulation. In conclusion they are showing that both analytical and numerical Jacobians showed similar performance and suggesting that for simpler numerical fluxes, analytical Jacobians should be the best way to go and for complex numerical fluxes, numerical Jacobian can be preferable choice (but if one can work out analytical, that should be good as well, I guess (one time effort) ). Best; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-505615012:312,perform,performance,312,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-505615012,2,['perform'],['performance']
Performance,"Oops, there was a typo: the SU2 version is actually 7.1.0 not 7.0.1. I'm glad you had looked into it. On high DOF counts per partition, I know they tend to be fairly similar. I only see big differences on meshes with 20M DOF on >200 partitions (i.e. where accounting for partition connectivity is more important). While having the option for different partitioners would be a nice feature, I do not know if the SU2 user-base would actually have much interest in it. The last time we tried a hybrid parallel approach our performance improvement was quite low (<10%). Thank you for your input.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1307#issuecomment-867007424:520,perform,performance,520,https://su2code.github.io,https://github.com/su2code/SU2/issues/1307#issuecomment-867007424,1,['perform'],['performance']
Performance,Out of date. Quiet mode for the shape_optimization.py script (on by default) leaves us with a clean optimization history written to the console. Closing,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/108#issuecomment-459230679:100,optimiz,optimization,100,https://su2code.github.io,https://github.com/su2code/SU2/issues/108#issuecomment-459230679,1,['optimiz'],['optimization']
Performance,"PR opening window is closed now. Thanks to all the people contributing. . Since we only have a limited amount of time to deal with all the PRs we have to be a bit structured. That means the following:. - Since we only have a limited amount of concurrent Travis jobs we might **manually cancel some jobs** in order to give precedence to PRs which have reviews and are likely to be merged once Travis passes. Please check your branch once in a while to restart the job if necessary. - If you have comments on a PR that you think **should** be addressed before merging, please block the merge by **requesting changes**. - Make use of the **WIP** feature. Especially if you think that you are not able to work on your PR in any ways for a couple of days (including addressing comments). This makes it easier for us to find an order for reviewing/merging.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/762#issuecomment-525670354:243,concurren,concurrent,243,https://su2code.github.io,https://github.com/su2code/SU2/pull/762#issuecomment-525670354,1,['concurren'],['concurrent']
Performance,"Part of the reason I never gave much attention to the current optimization scripts, and instead developed my own, is that I need different settings for primal and adjoint and the optimization scripts cannot handle that. I don't think we should have different config settings for primal and adjoint. I'm certain the adjoint solver considers the convergence criteria, you probably did something wrong in your setup (I'm guessing the fields you are monitoring do not exist for the adjoint, hence it has nothing to use as convergence field) but since you did not attach your config file, all I can tell you is to read the documentation https://su2code.github.io/docs_v7/Solver-Setup/. > ... I am downgrading ... Yes you are. Honestly I envy this kind of pragmatism, it is probably why SU2 has tens or hundreds of ""feature branches"" lagging behind master by several versions. I feel like ranting but I'll be pragmatic for once.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1024#issuecomment-645255976:62,optimiz,optimization,62,https://su2code.github.io,https://github.com/su2code/SU2/issues/1024#issuecomment-645255976,2,['optimiz'],['optimization']
Performance,"Passing arrays by pointer -> don't https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-use-ptr; Variables declared at the top of the function -> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce; Using member variables to ""pass data"" to other methods -> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Ri-explicit. ""What are important implementation aspects?"" You ask -> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#per7-design-to-enable-optimization",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1218#issuecomment-789893628:504,optimiz,optimization,504,https://su2code.github.io,https://github.com/su2code/SU2/issues/1218#issuecomment-789893628,1,['optimiz'],['optimization']
Performance,"Pedro,. I did a single core analysis on a Xeon Gold @2.30 GHz for the implicit solver, see below; ![SU2_Profile](https://user-images.githubusercontent.com/15017924/63409877-5067e980-c3f2-11e9-8957-0fc3ba26d69d.png); I can give more details, if needed. This is not shown in the picture, but the good news is that your feature_contiguous_cvariable_PR branch is a factor 1.25 to 1.3 faster per iteration than the current develop version. The bad news is that the far majority is still spent in scalar loops and the performance of the vectorized loops is rather poor. However, that was to be expected with the current data structures. My experience is that if you can vectorize the loops appropriately you can gain a factor of 3 to 4 compared to scalar loops (theoretically 8, but you never get that). However, that means a complete redesign of the current data structures and most likely a loss in generality and readability. If people want, we can start a discussion on this. And indeed, the inviscid flux computations are very time consuming. In the DG code I created a more hard coded version of the Roe solver and that was significantly faster (factor of 3). So also that is something to think about. Cheers,. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-523329065:512,perform,performance,512,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-523329065,1,['perform'],['performance']
Performance,"Please use meson and ninja to build the code as documented here: https://su2code.github.io/docs_v7/Build-SU2-Linux-MacOS/. This is what I do:; ```; export BUILD=build; export CXXFLAGS=""-funroll-loops -march=native -mtune=native"". ./meson.py $BUILD -Dcustom-mpi=true -Dwith-omp=true -Denable-mixedprec=true -Denable-autodiff=true -Denable-tecio=false -Denable-mkl=true -Dmkl_root=$MKLROOT --prefix=$PWD/$BUILD --optimization=2 --warnlevel=2; ./ninja -C $BUILD install; ```; Depending on how your compilers are setup you may find convenient to modify this:; ```; if get_option('custom-mpi'); mpi_dep = []; ```; To:; ```; if get_option('custom-mpi'); mpi_dep = [declare_dependency(link_args: ['-lmpi'])]; ```; In the meson.py script, I'm sure there is a way to do it with environment variables but I never bothered trying. Regards,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1088#issuecomment-706397914:411,optimiz,optimization,411,https://su2code.github.io,https://github.com/su2code/SU2/issues/1088#issuecomment-706397914,1,['optimiz'],['optimization']
Performance,"Probably because with optimizations turned on the compiler optimizes away the unused argument.; The linker probably fails because the base MPI wrapper defines MPI_STATUS as extern, should be a quick fix.; Btw I've been removing those ifdefs whenever possible, everything should be encapsulated in the wrapper.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/956#issuecomment-620127214:22,optimiz,optimizations,22,https://su2code.github.io,https://github.com/su2code/SU2/issues/956#issuecomment-620127214,2,['optimiz'],"['optimizations', 'optimizes']"
Performance,"Reading Scalabrin, he says the WBE transport model breaks down at Ttr > 10,000 K, and he uses the GY model for incorporating ionization in LeMANS. So I think the roadmap to for viscous/ionized flows is:. 1. Implement GY model according to Scalabrin wth Coulomb potential for ion-ion collisions; 2. Add some flag to make sure transport model for viscous-ionized is always GY",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1887#issuecomment-1382335968:8,Scalab,Scalabrin,8,https://su2code.github.io,https://github.com/su2code/SU2/pull/1887#issuecomment-1382335968,2,['Scalab'],['Scalabrin']
Performance,"Recently pushed to develop branch with this.; Note: there is a LoadRestart method in the CSolver class which might reduce some repeated code, I'm not sure if there was a good reason folks had not used it in the past.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/68#issuecomment-56878160:63,Load,LoadRestart,63,https://su2code.github.io,https://github.com/su2code/SU2/issues/68#issuecomment-56878160,1,['Load'],['LoadRestart']
Performance,"Regarding periodic boundaries: You have two options. You can hack the code to not allow grid deformation on periodic boundaries. That's a simple code edit, since the code already prevents most boundaries from being deformed. Let me know if you want to use this option, and I can point you to those lines. Second, you can use the `HOLD_GRID_FIXED` and `HOLD_GRID_FIXED_COORD` options to prevent grid deformation outside a specific box. I have found this option to be better overall, since it also makes the linear system easier to solve in `SU2_DEF`. The `DV_VALUE` and `FINDIFF_STEP` are different. I've only seen `FINDIFF_STEP` used for the finite-differencing python script, though it may have other uses I am not aware of. The `DV_VALUE` depends on the context. When using `SU2_DOT`, `DV_VALUE` is set to its default value. But when performing shape optimization using SU2's framework, the `DV_VALUE` parameters will be set based on the output of SLSQP (or whatever optimization framework you're using).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/976#issuecomment-626799862:836,perform,performing,836,https://su2code.github.io,https://github.com/su2code/SU2/issues/976#issuecomment-626799862,6,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,Resolved by #1228 thanks @pcarruscag and thanks for the explanation. . Just one more thing. do you have an idea why I still see 100% cpu load in that case? I picture a hyperactive process running around a stoplight sign at a zebra walk üö• üèÉ ü¶ì waiting for his teammates to catch up whilst not getting cold. My private machine gets hot and loud so I guess there is real computation going on there. It could relax and sit on that park bench ü™ë for a minute.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1241#issuecomment-804757081:137,load,load,137,https://su2code.github.io,https://github.com/su2code/SU2/issues/1241#issuecomment-804757081,1,['load'],['load']
Performance,"Right, that is the AUSM-family refactoring done with the hybrid Jacobians, Roe approximation is still available and it is the default.; So far:; - It was not practical to do finite differences of the mass flux and pressure by perturbing the conservatives, I had to do it on the primitives which then requires an extra Jacobian... So the approach is more expensive per iteration, which could be partially offset by using vector-mode forward-AD.; - However for some cases convergence is much better for the same CFL (wedge case with CFL=25) and in others (transonic airfoil, SST, low Re mesh) it allows much higher (4x) CFL to be used, which again results in lower time overall.; - The performance penalty from the extra layers does not seem to be big, but I have to measure that in a machine that is not doing other things at the same time.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-501745584:684,perform,performance,684,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-501745584,1,['perform'],['performance']
Performance,"Run SU2_CFD with `WRT_BINARY_RESTART= NO`. That will give you an ASCII `restart_flow.dat`. It will look something like this:; ```; ""PointID""	""x""	""y""	""z""	""Density""	""X-Momentum""	""Y-Momentum""	""Z-Momentum""	""Energy""	""Pressure""	""Temperature""	""C<sub>p</sub>""	""Mach""; 0	6.931794337794450e-01	1.199410270705132e+00	3.552713678800501e-15	9.247274759558524e-01	6.998395924205978e-01	6.744390123118781e-01	2.033333591408758e-01	2.825647424000119e+00	9.170095708259952e-01	9.784295110379145e-01	-1.930126447908861e-01	9.113348070779481e-01	; 1	6.906841300000011e-01	1.196300000000000e+00	0.000000000000000e+00	1.118921803269151e+00	5.021166385546235e-01	7.896289876522433e-01	2.161057381347509e-01	3.352487832836354e+00	1.176133434271568e+00	1.037113520398247e+00	3.252350821002600e-01	7.075425651590469e-01	; 2	6.924294614497271e-01	1.202091611452504e+00	1.468890958566504e-03	9.758692057411605e-01	8.423040306657703e-01	5.135454779704676e-01	2.297213358745695e-01	2.971366201327637e+00	9.782771280113181e-01	9.890989089014984e-01	-7.047753042024051e-02	8.761491078578573e-01	; ```; This answers the original question, ""How do I get SU2 to output raw ASCII data?"". You can also use the python scripting capabilities of Tecplot or Paraview (technically, VTK). You can find documentation for Tecplot's python API [here](https://www.tecplot.com/docs/pytecplot/index.html) and for VTK's python API [here](https://lorensen.github.io/VTKExamples/site/). That will allow you to use the Paraview or Tecplot files directly in python. You would use the paraview or tecplot libraries to load the data into python, then post-process it however you want. There's no need for ""manually deleting the lines for cell numbers.""",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-528461710:1564,load,load,1564,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-528461710,1,['load'],['load']
Performance,"Some illustrative images/output in case my description was hard to understand:; ![image](https://cloud.githubusercontent.com/assets/5167760/9294050/52a764b2-440f-11e5-8681-b68318da0ce7.png). SU2_DEF output when only ""airfoil"" marker included:. ``` c++; ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid. ----------------------- Volumetric grid deformation ---------------------; Performing the deformation of the volumetric grid. # FGMRES residual history; # Residual tolerance target = 4.14044e-11; # Initial residual norm = 15.8102; 0 1; 50 2.17385e-06; 100 1.08998e-10; # FGMRES final (true) residual:; # Iteration = 105: |res|/|res0| = 3.50764e-11. Non-linear iter.: 1/1. Linear iter.: 105. Min. area: 4.1019e-08. Error: 5.54565e-10. ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 1.039217 seconds on 1 core. ------------------------- Exit Success (SU2_DEF) ------------------------; ```. ![image](https://cloud.githubusercontent.com/assets/5167760/9294056/7be9439a-440f-11e5-862f-742246ef1565.png); SU2_DEF: output when deforming with all markers included:. ``` c++; ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid.; No surface deformation (scaling, rotation, or translation). ----------------------- Volumetric grid deformation ---------------------; Performing a translation of the volumetric grid.; Translational displacement: (1, 0, 0). ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 0.716938 seconds on 1 core.; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-131578218:328,Perform,Performing,328,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-131578218,2,['Perform'],['Performing']
Performance,"Sorry for my late reply and thanks Heather for opening this important discussion.; I fully agree with you and OBJECTIVE_FUNCTION and OPT_OBJECTIVE cause confusion. As far I see the problem, if we focus on a typical users point of view, I think that OPT_OBJECTIVE and OPT_CONSTRAINT must be in the config file and as close as possible. They are the key to define an optimization problem (one of the key features of SU2). On the other hand, as you suggested we need to add some flexibility. It would be interesting to to able to define a multi-objective like; OPT_OBJECTIVE= DRAG \* DRAG_WEIGHT; LIFT^2 \* LIFT^2_WEIGHT;. As Tim pointed out OBJECTIVE_FUNCTION is important because is what we use to play and develop the adjoint capability but, from the users point of view it is not as interesting as the OPT_OBJECTIVE. If everything works ok, OPT_OBJECTIVE should be enough for most of the SU2 users. How many typical users are interested in solving and adjoint problem for the sake of solving of an adjoint problem?. However OBJECTIVE_FUNCTION is not a good name, from the point of view of the continuous adjoint, I would feel comfortable if we change it to ADJ_BND_CONDITION. That probably doesn't work for the discrete adjoint, isn't it? Tim, What key word would work for the Discrete Adjoint? We need something that reflect the effect, in mathematical terms, of the objective function in the AD adjoint problem. Finally, before adding any capability we should ask ourself how general is going to be and if it going to be useful for the most part of the SU2 users community (in my opinion, external aerodynamics). If the new objective function is only useful for us, or a research project, then I think we need to create some kind of custom objective function, (e.g. CUSTOM_OBJFUNC at the same level than DRAG, LIFT, etc) that we can describe with other set of parameters. Thanks,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-187255862:365,optimiz,optimization,365,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-187255862,1,['optimiz'],['optimization']
Performance,"Sorry for taking so long to reply to this.; The old automake build system is loosely maintained, so far as I know it is currently working fine. Note that you need to specify the optimization flags manually, on gcc these work well:; export CXXFLAGS=""-O2 -funroll-loops -DNDEBUG -march=native""",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1037#issuecomment-661415665:178,optimiz,optimization,178,https://su2code.github.io,https://github.com/su2code/SU2/issues/1037#issuecomment-661415665,1,['optimiz'],['optimization']
Performance,"Sorry for the late response. I had to try out a few things. @GomerOfDoom, this is the output of `pacman -Qi blas lapack openblas`; I think it is relevant to this issue that i mention, I had installed openblas which replaced blas while trying to meet the pre-install requirements.; ```; slimshady@arch-linux-hp-probook-g3-450: UserPackages$ pacman -Qi blas lapack openblas; Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. Name : lapack; Version : 3.9.0-2; Description : Linear Algebra PACKage; Architecture : x86_64; URL : https://www.netlib.org/lapack; Licenses : custom; Groups : None; Provides : None; Depends On : blas; Optional Deps : None; Required By : arpack qrupdate suitesparse; Optional For : None; Conflicts With : None; Replaces : None; Installed Size : 7.03 MiB; Packager : Antonio Rojas <arojas@archlinux.org>; Build Date : Sun 24 Nov 2019 04:13:58 PM IST; Install Date : Sat 22 Feb 2020 01:05:19 PM IST; Install Reason : Installed as a dependency for another package; Install Script : No; Validated By : Signature. Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631053271:426,optimiz,optimized,426,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631053271,1,['optimiz'],['optimized']
Performance,"Sounds good to me. Then, I suggest we leave the comments for now, and you can come back to it when considering #643 further (or when some performance issues are considered) in a later PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/653#issuecomment-485926000:138,perform,performance,138,https://su2code.github.io,https://github.com/su2code/SU2/pull/653#issuecomment-485926000,1,['perform'],['performance']
Performance,"Sounds good. I was a little concerned about carrying around unnecessary memory during fluid computations, which will be the case for FSI as well as time spectral and some other applications, but you have a good point about avoiding allocation/deallocation overhead, and since you're reducing the number of times the same variables are re-allocated without any deallocation, it'll be a performance improvement relative to the current code either way. Please replace the 'varname.~Classname' calls with 'delete varname', then I think it should be good to go (pending anyone else weighing in on this). [you probably already know this from previous pull requests, but just in case - you don't have to create a new pull request, just commit into your branch and it will update automatically]",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-148124339:385,perform,performance,385,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-148124339,1,['perform'],['performance']
Performance,"Sounds good. Initially it would be enough to have some unit tests that would already show how to setup the network, together with documentation / example of the file format. Applications can come after. Some initial comments:; Please move the files to toolboxes/ and ideally use a namespace for the new classes.; Start the class names with C as we do, e.g. CIOMap. Then, how large are the models you've used so far? and how important is performance to this feature? (Just so I know how much to comment on that)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1757#issuecomment-1247824519:437,perform,performance,437,https://su2code.github.io,https://github.com/su2code/SU2/pull/1757#issuecomment-1247824519,1,['perform'],['performance']
Performance,"Sounds like a reasonable optimization, the only other place that handles averages is `COutput::Postprocess_HistoryData`, so this should be a very local change and thus a good first issue. Do you want to give it a go at creating a pull request for this? We can give you some pointers. But it should be simple to modify the `addValue` function to take the window type as argument and only `push_back` for non trivial windows.; Even those could be optimized by caching the sum over n-1 elements, this would avoid traversing the entire history of values when only the last entry is modified during inner iterations.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1545#issuecomment-1037249095:25,optimiz,optimization,25,https://su2code.github.io,https://github.com/su2code/SU2/issues/1545#issuecomment-1037249095,4,['optimiz'],"['optimization', 'optimized']"
Performance,Sounds like a sensible fix. Please open a PR.; We should also warn or throw an error if that condition happens because the performance is not going to be good with very few nodes per thread.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1667#issuecomment-1160900707:123,perform,performance,123,https://su2code.github.io,https://github.com/su2code/SU2/issues/1667#issuecomment-1160900707,1,['perform'],['performance']
Performance,"Text always moves between the images for some reason ... euler oneram6 14cores; ![sloweuler_oneram6](https://user-images.githubusercontent.com/31306376/65078336-18c27200-d99d-11e9-9d5c-5e38df4f9803.gif). euler channel 14cores; ![sloweuler_channel](https://user-images.githubusercontent.com/31306376/65078374-2a0b7e80-d99d-11e9-8860-23e48399873b.gif); Hi @pcarruscag (and everyone else of course :) ), Here some selected convergence rate comparisons with of this PR with develop. I also compared results all of those case side by side and the differences (I used contour line positions for most of it) are pretty subtle. Most of the times I double checked that I didn't load the same flow.vtk. At shocks it was a bit more visible especially close the wall but one has to really zoom in for it. Concerning lift / drag coefficient which are written on screen the difference was below 1% throughout the cases I looked at. Some cases were tested with different amount of cores with no mentionable deviance in Residuals. inc ns bend 2cores; ![incns_bend](https://user-images.githubusercontent.com/31306376/65078454-50c9b500-d99d-11e9-8be2-4ea1cb397c14.gif). inc euler nozzle 4cores; ![inceuler_nozzle](https://user-images.githubusercontent.com/31306376/65078420-3ee81200-d99d-11e9-83b3-cd8d301a5771.gif). euler wedge 14cores; ![euler_wedge](https://user-images.githubusercontent.com/31306376/65078443-49a2a700-d99d-11e9-9110-03dd278d742f.gif)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-532401028:669,load,load,669,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-532401028,1,['load'],['load']
Performance,"Thank you Pedro for the lightning reply! ; Yes, I see, unfortunately, I can't cross-check the log right now to see whether the ""STRAIGHT EDGE"" string was triggered, but I'll pay attention to that in the future for sure. . Anyway, I wonder whether the axis treatment is looking for a ""numerical 0"", or does perform some sort of filtering or tolerance on the mesh ( in some ways similar to what some CADs do). In my case, the body was in the order of meters, and the domain was in the order of 100 m.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1373#issuecomment-1464373891:306,perform,perform,306,https://su2code.github.io,https://github.com/su2code/SU2/issues/1373#issuecomment-1464373891,1,['perform'],['perform']
Performance,"Thank you for the feedbacks, I am working on the modifications you suggested. I will perform a couple of tests to be sure I did not break anything. Hope to commit the new code soon!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-740209039:85,perform,perform,85,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-740209039,2,['perform'],['perform']
Performance,Thank you for your quick response. I'll open a PR to fix the comment.; Do you happen to know why the default value of ADJ_SHARP_LIMITER_COEFF is set to 3? It makes surface sensitivity zero for large areas and screws up shape optimization. It took me a while to find out that this variable is the cause. I think the default value should be something that works for most users.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1830#issuecomment-1328190193:225,optimiz,optimization,225,https://su2code.github.io,https://github.com/su2code/SU2/issues/1830#issuecomment-1328190193,1,['optimiz'],['optimization']
Performance,"Thanks @MicK7 I will have a look, my initial thought was to have a simple strategy where within each MPI rank parallelism is extracted via colouring or scatter-to-gather transformations and only one thread per rank participates in the message passing, I have no experience here though so this might be a bad strategy, idk. **Back to business:**; I went silent for a bit because in prototyping a typical residual computation and matrix update loop I made some realisations that made me go back to the drawing board regarding data structures, and eventually back to square 0. . ## Parallel strategy for flux computation; Because significant computation is required to obtain each edge's flux, it does not make sense to attempt a ""point-loop"" strategy (which would double the effort).; However, one can either use colouring to avoid the race conditions that would result from updating the residual of cells i and j, or store the edge fluxes and then, on a second point-loop perform the summation of fluxes for each cell, with the direction being accounted by the same adjacency information used in the point-loop GG gradient computation.; If we consider only the update of residuals the two strategies are fairly equivalent performance wise, the tie breaker is the matrix updates. ## Matrix Updates; By this I mean the `addBlock`, `subBlock` we do (two times each) to update diagonal and off-diagonal blocks for each edge.; Here is a dummy numerics loop that does nothing else but setting blocks in the matrix (with colouring).; ```c++; void testLoop1(const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; double** blk_i, double** blk_j,; SparseMatrix& matrix); {; matrix.setZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; size_t iEdge = edgeIdx[k];; size_t iPoint = connectivity[iEdge].first;; size_t j",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:834,race condition,race conditions,834,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,4,"['perform', 'race condition']","['perform', 'race conditions']"
Performance,Thanks @economon this makes a lot of sense. And if it goes ahead maybe the options DEFORM_LINEAR_SOLVER_ITER and DEFORM_LINEAR_ITER should also be fused?. This is has a smallish negative implication to FSI cases. There because the deformation is incremental it is acceptable to converge the solver to 1e-6 or only 1e-5. But in shape optimization (@cvencro and I are working on that) we would be limited by the lowest required tolerance. @rsanfer this is something to consider in the mesh deformation refactoring.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/623#issuecomment-443665804:333,optimiz,optimization,333,https://su2code.github.io,https://github.com/su2code/SU2/pull/623#issuecomment-443665804,1,['optimiz'],['optimization']
Performance,"Thanks @economon!; I don't know what is the current situation with OpenMP and CoDi but any eventual change will have to be compatible with CoDi. The worst case would be disabling OpenMP for the discrete adjoint, the parallel clause supports an ""if"" modifier so that would not be too hard. But I hope to at least be able to lower the memory footprint by fusing some loops or make pre-accumulation more effective by using point loops.; The linear solvers will indeed become the bottleneck, they already are for JST, the good thing is matrix multiplication is easier to vectorize, not sure the best strategy will be similar though. ### Limiters. Scalar (reference) version of the code:; ```C++; void computeLimiters(size_t nPoint,; size_t nVar,; size_t nDim,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& coords,; const Matrix& phi,; const VectorOfMatrix& grad,; Matrix& phiMax,; Matrix& phiMin,; Matrix& limiter); {; for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; for(size_t iVar=0; iVar<nVar; ++iVar); {; phiMax(iPoint,iVar) = phi(iPoint,iVar);; phiMin(iPoint,iVar) = phi(iPoint,iVar);; limiter(iPoint,iVar) = 2.0;; }; }. for(auto edge : connectivity); {; size_t iPoint = edge.first;; size_t jPoint = edge.second;. for(size_t iVar=0; iVar<nVar; ++iVar); {; phiMax(iPoint,iVar) = max(phiMax(iPoint,iVar), phi(jPoint,iVar));; phiMin(iPoint,iVar) = min(phiMin(iPoint,iVar), phi(jPoint,iVar));. phiMax(jPoint,iVar) = max(phiMax(jPoint,iVar), phi(iPoint,iVar));; phiMin(jPoint,iVar) = min(phiMin(jPoint,iVar), phi(iPoint,iVar));; }; }. for(auto edge : connectivity); {; size_t iPoint = edge.first;; size_t jPoint = edge.second;. double d_ij[3] = {0.0, 0.0, 0.0};. for(size_t iDim=0; iDim<nDim; ++iDim); d_ij[iDim] = 0.5*(coords(jPoint,iDim)-coords(iPoint,iDim));. for(size_t iVar=0; iVar<nVar; ++iVar); {; double proj_i = 0.0, proj_j = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; proj_i += d_ij[iDim]*grad(iPoint,iVar,iDim);; proj_j -= d_ij[iDim]*grad(jPoint,iVar,iDim);; }. doubl",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:476,bottleneck,bottleneck,476,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['bottleneck'],['bottleneck']
Performance,"Thanks @pcarruscag for responding! I really appreciate you taking time to answer this. Well, I was just looking at the density residuals for convergence. That should be valid for both primal and adjoint. I have attached my config file for future reference. The same works for v6 though. Yes, downgrading hurts. But I had good reasons to do so because of the shape optimization scripts for turbomachinery are way more developed for v6 than v7. I wish I could have done that earlier. Plus the MPI issue as well #990. Now I am able to use 30 instead of 3 cores and that makes one hell of a difference. The good part about git is that I can go back to v6.1.0 tag and get not only the code and Testcases but the website at that version as well. That certainly helps.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1024#issuecomment-645495083:364,optimiz,optimization,364,https://su2code.github.io,https://github.com/su2code/SU2/issues/1024#issuecomment-645495083,1,['optimiz'],['optimization']
Performance,"Thanks Edwin, the vectorized loops in the code are probably very simple array copies, hence the low efficiency? I would put money on not a single vector instruction being generated for the important stuff. I was surprised by the 1.25 to 1.3 factor you are seeing, for the exact same case I measured 1.39 (to be more precise). Initially I thought it had something to do with running single core, thus leaving vast amounts of L3 for only that core to use, so on the same 24c platform I ran 2 processes (30MB of cache for each) (very uncivilised) and the factor went down to 1.37, so cache was not the reason.; So then I thought maybe the Intel compilers are very good at optimizing polymorphism away, but the development branch compiled with icc 17 runs at exactly the same speed as when compiled with gcc 5.4. Then I compiled feature_contiguous_cvariable with icc 17 and it runs 9% slower than the gcc binaries, and so with icc 17 the speedup for this case was 1.27 errrrr... Anyone got a buddy at Intel?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-523930905:509,cache,cache,509,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-523930905,6,"['cache', 'optimiz']","['cache', 'optimizing']"
Performance,"Thanks Heather,. Could you please take a look at the log_Adjoint.out file generated in the folder DESIGNS/DSN_001/ADJOINT_DRAG/ when you run the single objective-with-multiple-surfaces regression test (in the part whereSU2 specifies the Surface(s) where the force coefficients are evaluated). It seems that the shape optimization python script only copied the first surface to config_CFD.cfg. I found the ""if (n_obj>1):‚Äù solution‚Ä¶ but, you know better the multi objective implementation. Just let me know if there is another more elegant fix that we can implement. Thanks!; Francisco. > On Mar 25, 2018, at 1:55 PM, Heather Kline <notifications@github.com> wrote:; > ; > @hlkline commented on this pull request.; > ; > In SU2_PY/SU2/eval/design.py <https://github.com/su2code/SU2/pull/519#discussion_r176953697>:; > ; > > @@ -364,7 +364,7 @@ def obj_df(dvs,config,state=None):; > # For multiple objectives are evaluated one-by-one rather than combined; > # MARKER_MONITORING should be updated to only include the marker for i_obj; > # For single objectives, multiple markers can be used ; > - config['MARKER_MONITORING'] = marker_monitored[i_obj]; > + if (n_obj>1): config['MARKER_MONITORING'] = marker_monitored[i_obj]; > I think that the array of monitored markers is extended to accommodate this situation in config.py (~line 514), and there is a single objective-with-multiple-surfaces regression test; do you have a case you can send me where this wasn't working? Or if you see an issue with that test that I previously missed I wouldn't mind looking into it.; > ; > ‚Äî; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/519#pullrequestreview-106743204>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AccuRva3VNHDjv7H11VnmorjY5pCNlpkks5tiARDgaJpZM4S4O1W>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/519#issuecomment-376016690:317,optimiz,optimization,317,https://su2code.github.io,https://github.com/su2code/SU2/pull/519#issuecomment-376016690,1,['optimiz'],['optimization']
Performance,"Thanks Max that sounds very promising indeed. To everyone else, a quick update on the issue of performance vs. MKL.; I played a bit with @vdweide 's case and it does not seem trivial to get those 10% of performance back, at least not without a lot of restructuring.; I did however measure the performance of native gemm in Eigen to be ""only"" 2.5 times worse than MKL, after some emails we determined that this was because with the Intel compiler Eigen was not using AVX instructions but with g++ those instructions could be enabled by setting the -march flag appropriately. So far the conclusions are:; - Get 0% to 10% performance loss if you are using MKL (one could always bypass Eigen and call mkl directly).; - Write clean code compatible with AD and that will perform better than most easy implementations.; - Eventually get better performance of the discrete adjoint via the more efficient differentiation of operations with matrix-like objects.; - Have an extra dependency that does not need to be compiled.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-463591821:95,perform,performance,95,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-463591821,6,['perform'],"['perform', 'performance']"
Performance,"Thanks Pedro,. If you want I can run this test case also with the Intel performance tools. These usually give some more info what can be improved to obtain better performance. Cheers,. Edwin.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-523063269:72,perform,performance,72,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-523063269,2,['perform'],['performance']
Performance,"Thanks Suman,. My suggestion is the following‚Ä¶ we have really never performed a detailed test of the CUSP scheme. As far I remember it was a really quick implementation. And it looks to see that you know SU2 and you are ready to contribute ‚Ä¶ Would it be possible for you to create a pull request with the changes, including a test case? if it is a bug, your change will pay off immediately. Best,; Francisco. > On Jul 12, 2017, at 10:03 PM, SumanVajjala <notifications@github.com> wrote:; > ; > @hlkline <https://github.com/hlkline> Thank you for your reply. We have been using SU2 for over 2 years and only recently we started looking at the code to understand some of the issues we were facing. To clarify I did not report it as a bug. I do understand that the flow variables obtained by Riemann invariants (line 10433) are set as the primitive variables for the boundary point. But when it came to the flux calculation I saw Jacobian_j and that triggered my question. I know that each scheme has a ComputeResidual routine but for this specific case what routine is being used? Is it the one in numerics_template.cpp? And I still do not understand why Jacobian_j should play a role in the flux calculation! I will be glad if you can kindly comment on it.; > ; > Finally, can I now treat that this is a non-issue?; > ; > @fpalacios <https://github.com/fpalacios> @oleburghardt <https://github.com/oleburghardt> @hlkline <https://github.com/hlkline> By the way don't you think Nu_c in line no 729 in numerics_direct_mean.cpp should be Nu_c = (1.0-Beta)*LamdaNeg? This was the other probable bug I was referring to within SU2 found in CUSP implementation.; > ; > Regards; > Suman; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/issues/405#issuecomment-314971522>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AccuRkqESRvP7dcREH5t_PKPioRlkERhks5sNaUSgaJpZM4OKV38>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/405#issuecomment-315096146:68,perform,performed,68,https://su2code.github.io,https://github.com/su2code/SU2/issues/405#issuecomment-315096146,1,['perform'],['performed']
Performance,"Thanks a lot, @TobiKattmann, for this fix,. I was able to reproduce the error locally as well and the fix makes perfect sense to me. I've only added one small statement:; `config_container[iZone]->SetiInst(INST_0);`; to SU2_SOL in cases with single instance, to enforce that iInst = config->GetiInst() in CBaselineSolver::LoadRestart() receives the correct value. @economon as of now, I think there are no multizone-multiinstance cases available in develop. When that comes through, it would only require an extra loop on iInst and the correct setting of; `config_container[iZone]->SetiInst(iInst);`; in the very same fashion as it is done for harmonic balance (lines 357-380 in SU2_SOL.cpp). Then, inside the LoadRestart routine, the correct container position is read in line 3939 of solver_structure.cpp,; `unsigned short iInst = config->GetiInst();`; and used onwards. . I'll wait until the tests pass for this latest commit and then merge it in by Monday morning if there are no further comments.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/572#issuecomment-417633741:322,Load,LoadRestart,322,https://su2code.github.io,https://github.com/su2code/SU2/pull/572#issuecomment-417633741,2,['Load'],['LoadRestart']
Performance,"Thanks for all the questions on the shape optimization. It helps us make improvements to the code to make it easier to use. . You are correct in that the adjoint gradients determine the direction that the optimizer moves the design variables. But this direction can (and usually does) change during the optimization process as it explores different parts of the design space. So the design variables won't always move in the same direction. Sometimes the optimizer won't take the best step in the direction of descent. In this case, the objective function can increase. The optimizer will then try again in the same direction but with a different (usually smaller) step size. If it does achieve a reduction in the objective function, it will usually run the adjoints again to get an updated gradient direction. The objective + adjoint iterations are called major iterations and are what is output by the SLSQP algorithm. This process is more complicated when there are constraints involved. . So in summary, no it is not necessary (or likely) that the objective function will always decrease through an optimization process",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/984#issuecomment-628714360:42,optimiz,optimization,42,https://su2code.github.io,https://github.com/su2code/SU2/issues/984#issuecomment-628714360,6,['optimiz'],"['optimization', 'optimizer']"
Performance,"Thanks for fixing the alignment.; With those options the code actually looks ok in areas that were recently cleaned up.; But the need for the manual formatting we have in loads of places comes from having code that is far too verbose and repetitive e.g. 10 calls to MPI routines with tons of arguments, 10 operator [] in a single line to get to the CSolver we need, entire copy pasted sections that should be functions, etc..; I am not a fan of that kind of wholesale automatic change because it does not fix any of the structural problems we have, and it tends to make the fixing of those issues harder because the aforementioned problematic areas are usually less readable after such changes.; I like the optimization approach of making small gradual improvements, but unfortunately this kind of maintenance is not very glamorous and few of us are up for it...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/969#issuecomment-625436086:171,load,loads,171,https://su2code.github.io,https://github.com/su2code/SU2/pull/969#issuecomment-625436086,2,"['load', 'optimiz']","['loads', 'optimization']"
Performance,"Thanks for putting those results together, Samet. For more comparisons, you might also check out the paper by Langtry, et al., ""Predicting 2D Airfoil and 3D Wind Turbine Rotor Performance using a Transition Model for General CFD Codes"" that contains this exact case. Another interesting paper is Potsdam, ""Unstructured Mesh CFD Aerodynamic Analysis of the NREL Phase VI Rotor."" We can also look at the surface streamlines to compare with some of the results in these papers.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-260412407:176,Perform,Performance,176,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-260412407,1,['Perform'],['Performance']
Performance,"Thanks for rebases; A couple of notes: ; - the reference to the github issue in the comments may be confusing to others as to which part of that thread is being referenced. To make sure that future developers are aware of import issues, maybe just one line like 'recommended import format compatible with both Python 2.7 and 3', if you feel a comment really is necessary there.; - on the regressions: I know it may seem like small differences, but the fact that they are different with just changes to the python code is very concerning, and in some of the tests the differences are quite large (specifically discadj_euler_py and directidff_euler_py). If they are calling the exact same C++ executables and performing the exact same computations the result should be the same. If this is something going on behind the scenes within the python packages that cannot be avoided, we need to understand what that difference is, and where it is coming from. ; The only explanation I can think of off the top of my head for why the output could be different with only changing python code, is if some function previously imported from a different package is using single-precision instead of double-precision for some arithmetic operation or file io. If what you changed is actually providing GREATER precision that's fantastic, but we need to know for sure either way.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/260#issuecomment-224031436:707,perform,performing,707,https://su2code.github.io,https://github.com/su2code/SU2/pull/260#issuecomment-224031436,1,['perform'],['performing']
Performance,"Thanks for the additional information. > This should give a difference in sensitivity results, . Hm, I think some things should be clarified at this point because I think that it's possible that you mixed up two different step sizes:. - There is a step size that is used to **compute** the gradient when setting up finite difference quotients. That's a bit tricky, because although you are using an adjoint solution for the gradient computation, these are still used within the grid deformation. You can find it's value in the third column and since it's the same, the gradients agree. - There is the step size belonging to the optimizer which **uses** the gradient (the one Tim refers to). It is influenced by the overall scaling of the objective function and agrees with the one you put above the gradients. This scaling factor determines the amplitude of the mesh deformation. As Tim pointet out, the optimizer only 'sees' the objective function's value, its gradient and the scaling factor. It has no idea that there are some mesh deformations or aerodynamics going on in the background ;-). Therefore I find your result. > However the deviation of the sens_adjoint of incompressible is huge compare to the compressible case. most important since it explains the different behaviour of the optimizer (and it's addionally not due to different values of the objective, since your CLift- and CDrag-values agree). The remaining question is: Why are they that different? ; It could be due to distinctly different physics captured by the different PDEs (unlikely but possible), or due to (performance?) issues with the adjoint solver.; Fortunately, SU2 comes with an alternative adjoint solver (see Tims initial post how to run it) that can now help to find the reason. Regards, Ole",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316045392:628,optimiz,optimizer,628,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316045392,4,"['optimiz', 'perform']","['optimizer', 'performance']"
Performance,"Thanks for the answer. If it has no benefit we can leave it like that. I was just worried that is not possible to load szplt and plt files together into tecplot. But I tried it and it works :+1: . I am happy with the change. As soon as there is further approval, we can merge it in.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-426696883:114,load,load,114,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-426696883,1,['load'],['load']
Performance,"Thanks for the contribution! This is a much needed change. I wanted to perform a refactoring like this myself. The viscous (or turbulent) stress calculation is repeated many times in the code. Changing that calculation (e.g. adding QCR or UQ) currently requires changing many files. In my humble opinion, the stress tensor calculation should have its own class at the lowest level of the code, like the gas model (e.g. ideal gas) or the viscosity calculation (e.g. Sutherland's law). `CNumerics` classes need access to it, and `CNumerics` is meant to have minimal dependencies. But the stress isn't really ""numerics."" Its part of the underlying equations we're trying to solve. Changing the stress tensor isn't the same flavor as changing from JST to Roe. Because the stress is part of the underlying equations, it is sometimes needed in the `CSolver` classes. Previously, I've seen the stress tensor used in `CNSSolver` boundary conditions and axisymmetric source terms. That may still be true in the current version of the code. The best way to make sure that both `CSolver` and `CNumerics` have access to it is to make it an independent class. Unless, of course, we want to be manually setting the six tensor elements in `CNumerics`, like we do with primitive variables. I don't like that alternative.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-742531842:71,perform,perform,71,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-742531842,1,['perform'],['perform']
Performance,"Thanks for the contribution, that sounds like it might be a useful change if it improves performance.; Do you have any benchmarks for large cases (where frequent flushes may cause a larger performance penalty), or for cases on a non-NFS cluster? Aka, how long it took to write the large file you mention with or without this change?. I've seen some forum posts recommending using mostly ""\n"" for performance, with occasional ""endl"" to keep that buffer from being to large. It is recommended not to use endl too much with file i/o: ; http://demin.ws/blog/english/2012/04/25/endl-vs-new-line/. However, it looks like that file didn't have an endl at the end - so perhaps if you have the time you could test the performance change if you change just the last ""\n"" to ""endl""?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/281#issuecomment-223457468:89,perform,performance,89,https://su2code.github.io,https://github.com/su2code/SU2/pull/281#issuecomment-223457468,4,['perform'],['performance']
Performance,"Thanks for the detailed analysis... out of curiosity, how tightly did you converge the linear solve with each nonlinear iteration? . Lately, we have seen that the ILU preconditioner performs best, and, when solving the linear systems to a smaller tolerance, one can often use a higher CFL number. It could be interesting to look at the convergence of the linear solve for a single nonlinear iteration (at different points of the calculation) for GMRES+ILU to a near machine precision tolerance both with and without the term in the Jacobian. That might best show the impact of this term. All of that being said, I think we can add this term, as performance is the same or better, and it is technically correct.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/491#issuecomment-358747316:182,perform,performs,182,https://su2code.github.io,https://github.com/su2code/SU2/pull/491#issuecomment-358747316,2,['perform'],"['performance', 'performs']"
Performance,"Thanks for the issue @Eduardo-Carvalho. If anyone working in an area related to unsteady optimization has a moment to take a look at this (maybe @TobiKattmann or @ScSteffen?), I'd appreciate it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/909#issuecomment-603370840:89,optimiz,optimization,89,https://su2code.github.io,https://github.com/su2code/SU2/issues/909#issuecomment-603370840,1,['optimiz'],['optimization']
Performance,"Thanks for the question Francisco - someone else actually asked me about multi-point optimization earlier today. Unfortunately that is not addressed here, but if there is some way that I can make this more compatible with future developments in that direction please do let me know. . An example of the application would be for optimization of an inlet, where you would want to simultaneously optimize for the conditions at the throat of the inlet and minimize drag on the surface. It may also be used for arbitrary linear combinations of heat flux, drag, lift, etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/237#issuecomment-182178391:85,optimiz,optimization,85,https://su2code.github.io,https://github.com/su2code/SU2/pull/237#issuecomment-182178391,3,['optimiz'],"['optimization', 'optimize']"
Performance,"Thanks for the question; The RESTART_SOLUTION option determines only whether the CFD solution will restart from a provided solution file, not whether the optimizer will restart. ; To restart the optimizer process, this must be specified to the python script:; shape_optimization.py -r project.pkl -f config.cfg -n N; The options of all the python scripts can be viewed with a command like:; shape_optimization.py -h. So, to run an optimization process restarted from a previous optimization, and to have each individual simulation restart from previously converged CFD results you will need to BOTH specify RESTART_SOLUTION and the -r python option. To restart the optimizer but have each CFD simulation start from scratch, use the -r option and specify RESTART_SOLUTION=NO. . Restarting from a specified design (rather than the most recent design) is not currently provided as an option, but if you are willing to dig into things manually it may be possible via editing the project.pkl and results.pkl files. . In the future, please view our forum at http://www.cfd-online.com/Forums/su2/, you may find questions about configuration options etc that have already been answered, and a wider community will be able to respond.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/290#issuecomment-231421177:154,optimiz,optimizer,154,https://su2code.github.io,https://github.com/su2code/SU2/issues/290#issuecomment-231421177,5,['optimiz'],"['optimization', 'optimizer']"
Performance,"Thanks for the quick review @pcarruscag. I have cleaned up a little bit. Also added a nicer table of the output. l prefer that we always compute the min/max values, at least for the FVM CFD solvers, for a few reasons. The most important reason is that we should start to build up some intuition about the correlation between mesh quality metrics and accuracy + convergence in the solvers. This can be especially important during optimization when the mesh is deforming. I think the metrics are valuable to print every time for this reason, which might help users diagnose problems eventually. Additionally, the cost is relatively small (on par with the other pre-processing routines, it is only executed once and it is parallelized, and the memory is released if we don't write).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/778#issuecomment-526456264:429,optimiz,optimization,429,https://su2code.github.io,https://github.com/su2code/SU2/pull/778#issuecomment-526456264,2,['optimiz'],['optimization']
Performance,"Thanks for the replies and suggestions. I am trying to use built-in optimization abilities of SU2 for turbomachinery cases. So far the multi zone issue seems like one of the many problems. I realized this when using a single zone case while trying to avoid previous multi zone problem I encountered, when using v7.0.6, turbomachinery cases create a different kind of solution history file and it seems to interfere with the optimization process. Also, it seems like the optimization side of SU2 is created without considering turbomachinery simulations since the current objective functions are not really useful for turbomachinery optimization, and there are some objective functions that are in config_template.cfg but does not work such as SURFACE_MASSFLOW, SURFACE_TOTAL_PRESSURE and TORQUE. Therefore, it seems like the solution history and objective function problems need to be solved together in order to do optimization on turbomachinery cases with v7.0.6. Even though v7.0.6 turned out very satisfactory just for solving both single and multi zone turbomachinery cases I am trying to see if using an older version like v6.2.0 would change the situation on turbomachinery optimization. It may seem like I am avoiding going in and changing the code but I want to see first if a base version of SU2 can do the job.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1279#issuecomment-835832913:68,optimiz,optimization,68,https://su2code.github.io,https://github.com/su2code/SU2/issues/1279#issuecomment-835832913,6,['optimiz'],['optimization']
Performance,"Thanks for the reply, I'll use feature_adap. Also very appreciated the required and optional command list.; As far as the run is concerned, it exits during the first mesh adaption (no error on the console though). The amg.out is quite long and there are a lot of info. Let me briefly summarize the case I'm testing:; - Supersonic inviscid 2D axialsymmetric cylinder.; - mesh adaption Mach based.; - no shape optimization.; - mesh adaption (PYADAP_FLOW_ITER= (2999, 4999, 6999)); - coarse mesh (PYADAP_COMPLEXITY= (20000, 60000, 120000)); - ITER = 10000. I would expect then the solver to start, reach iteration number 2999, adapt the flow mesh, then run until 4999, adapt, 6999 adapt, reach 10000 iterations.; In the :; `adapt/ini/log.out` ; as far as I can tell it reaches 10000 iterations, which is quite unexpected, maybe my problem arise due to mismatching options in the *.cfg file, is there any applicable *.cfg file to start from?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619502763:408,optimiz,optimization,408,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619502763,1,['optimiz'],['optimization']
Performance,"Thanks for the response and pointing me to the PR. I updated gcc version 9 and open mpi to version 4.02. It slightly improved speed but the behavior is still the same. . I don‚Äôt understand mpi well enough to understand the implications of that PR, but I guess that maybe it‚Äôs doing more communication at some level that causes it to be much more sensitive to network performance making 1G Ethernet inadequate. . I will try and upgrade my networking and see if that resolves the issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593003762:367,perform,performance,367,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593003762,1,['perform'],['performance']
Performance,"Thanks for the reviews guys. At the moment the optimization framework does not support the topology variables, there is a script in SU2_PY for this feature that runs a testcase with hardcoded parameters...; It is not an easy thing to run a tutorial for :/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/752#issuecomment-524374294:47,optimiz,optimization,47,https://su2code.github.io,https://github.com/su2code/SU2/pull/752#issuecomment-524374294,1,['optimiz'],['optimization']
Performance,"Thanks for the reviews guys.; @economon I added comments to the area of the code you highlighted.; The file IO is not a bottleneck at the moment, and that filtering step is only done once.; I did have a look at anything with ""adjacency"" in the name but I took the easy way out (shamelessly) as those routines looked quite intimidating.; If you have plans to make the output structure capable of handling element values I will piggy-back/collaborate on that and output the derivatives via the output instead of writing a dedicated file.; Since we have two approvals, I will turn the example case I've included into a regression and then this can be merged.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/595#issuecomment-435698786:120,bottleneck,bottleneck,120,https://su2code.github.io,https://github.com/su2code/SU2/pull/595#issuecomment-435698786,1,['bottleneck'],['bottleneck']
Performance,"Thanks for the update. I gave the new version a try. Unfortunately one of my machines is acting up and i can't go to the office to fix it so I ran the tests on 3 machines using the 10G ethernet. I saw the warning about a backup strategy for edge coloring, but it ran just fine. The performance for 3 nodes was about 30% faster than 2 nodes (compared to ideal of 50% faster). Whenever my office opens back up, I'll get the 4th machine back online and i can try the 4 node version, which is the one that required 8192 for edge coloring.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-615329675:282,perform,performance,282,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-615329675,1,['perform'],['performance']
Performance,"Thanks for your hints. Now I understand that:; a) In `CPhysicalGeometry::LoadSurfaceElements`, the process finds those global markers that have at least one element adjacent to the subdomain of the process, and assigns local IDs. The function is called in the constructor of `CPhysicalGeometry`.; b) The transfer of quantities from one MPI process to another is done with additional markers of type `SEND_RECEIVE`. They are created e.g. in `CPhysicalGeometry::SetSendReceive` => after the constructor has been called. I also saw that the problem of mapping local (non-`SEND_RECEIVE`) markers to some global identifiers can be (and is) solved by the `string` `config->GetMarker_All_TagBound(val_marker)`. And probably there is no point in assigning a global ID to each pair of communicating `SEND_RECEIVE` markers.; ; So there is no need for the local<->global mapping that I intended to implement. Instead I will just remove the two members of `CPhysicalGeometry` and what depends on it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762234155:73,Load,LoadSurfaceElements,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762234155,1,['Load'],['LoadSurfaceElements']
Performance,"Thanks for your input, I think you make a good point. . The way I was thinking about it is that OBJECTIVE_FUNCTION would now serve the same purpose and have the same behavior across multiple methods - right now (in the current develop and master branch), OBJECTIVE_FUNCTION is used either when running SU2_CFD with the continuous or discrete adjoint method, and when running continuous_adjoint.py, while OPT_OBJECTIVE is used with shape_optimization.py.; Where this gets confusing is that shape_optimization.py automatically flips signs of certain objectives without ever informing the user that this is the case - right now the only way to find out that the sign is flipped is either to carefully read through the source code or run a case and figure it out from the results. ; This will get more confusing when adding in multiple objectives - I would like to at least move the sign change into the config file rather than hidden behind the scenes; however that does get dangerous as it will quietly change the optimization behavior for people who aren't aware of that modification.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/241#issuecomment-185479306:1012,optimiz,optimization,1012,https://su2code.github.io,https://github.com/su2code/SU2/pull/241#issuecomment-185479306,1,['optimiz'],['optimization']
Performance,"Thanks for your reply - I haven't tried the latest version, but plan to do it soon.; It sound like a reasonable explanation that DIRECT diverged (the images does look rather diverged).; Have you run the shape optimization tutorial 1?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/559#issuecomment-513481846:209,optimiz,optimization,209,https://su2code.github.io,https://github.com/su2code/SU2/issues/559#issuecomment-513481846,1,['optimiz'],['optimization']
Performance,"Thanks! Please feel free to add anything you consider to my PR. And‚Ä¶ do not worry too much (or at all)... we are doing this for free and for fun! As you know, after a major release we always find this kind of small bugs. The big picture is that thanks to you we all enjoy an awesome multipoint optimization capability! Thanks!. Best,; Francisco. > On Mar 25, 2018, at 6:04 PM, Heather Kline <notifications@github.com> wrote:; > ; > @hlkline commented on this pull request.; > ; > In SU2_PY/SU2/eval/design.py <https://github.com/su2code/SU2/pull/519#discussion_r176962282>:; > ; > > @@ -364,7 +364,7 @@ def obj_df(dvs,config,state=None):; > # For multiple objectives are evaluated one-by-one rather than combined; > # MARKER_MONITORING should be updated to only include the marker for i_obj; > # For single objectives, multiple markers can be used ; > - config['MARKER_MONITORING'] = marker_monitored[i_obj]; > + if (n_obj>1): config['MARKER_MONITORING'] = marker_monitored[i_obj]; > @fpalacios <https://github.com/fpalacios> yes, I commented a bit too quickly; I do see the behavior that you mention. I think the line previously mentioned helps with getting the value of the objective but not the gradient.; > While I was testing this on my end I also noticed that there is an issue if you list the same objective multiple times (for example, if you wanted to weight the drag contribution from one surface more than another), where since it has the same key the previous dict entry is overwritten. Do you mind if I add an error catching that to your PR?; > ; > I am taking a look back through it but so far I think your solution will be good - and better to fix the performance in master now and worry about elegant improvements in the develop branch.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/519#discussion_r176962282>, or mute the thread <https://github.com/notifications/unsubscribe-auth",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/519#issuecomment-376023020:294,optimiz,optimization,294,https://su2code.github.io,https://github.com/su2code/SU2/pull/519#issuecomment-376023020,1,['optimiz'],['optimization']
Performance,"Thanks, I hope I can run some tests in the next couple of weeks and compare the performance with other implementations, especially MKL, because this gives the fastest results at the moment.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-460092205:80,perform,performance,80,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-460092205,1,['perform'],['performance']
Performance,"Thanks, Tim. Did you check if this is related to the compiler or architecture, by any chance? I know that the partitions provided by ParMETIS change depending on the system (although they should be deterministic). In the past, compiler optimizations have led to non-deterministic behavior on some systems. Does it still occur with -O0 optimization?. We'll look into it too.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/276#issuecomment-221407884:236,optimiz,optimizations,236,https://su2code.github.io,https://github.com/su2code/SU2/issues/276#issuecomment-221407884,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"Thanks, that was very helpful. . I have another question related to this., Would you suggest keeping all the control points as design variables or should the number of design variables be very selective to ensure that correct optimization direction is achieved? I have 216 control points on my FFD box, I can reduce them if I put in some extra effort in indexing them. Is it worth it?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/984#issuecomment-628725910:226,optimiz,optimization,226,https://su2code.github.io,https://github.com/su2code/SU2/issues/984#issuecomment-628725910,1,['optimiz'],['optimization']
Performance,"Thanks, this is a very useful contribution. . Yes, please, an example (maybe a NACA0012 in test cases optimization) is required. Best,; Francisco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/406#issuecomment-312933080:102,optimiz,optimization,102,https://su2code.github.io,https://github.com/su2code/SU2/pull/406#issuecomment-312933080,1,['optimiz'],['optimization']
Performance,"That will be great. Although I have been restarting my optimizations to work around this, I feel this fix is important.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/970#issuecomment-623591047:55,optimiz,optimizations,55,https://su2code.github.io,https://github.com/su2code/SU2/issues/970#issuecomment-623591047,1,['optimiz'],['optimizations']
Performance,The `DV_VALUE` should be different across design iterations since this is determined by optimizer. . Is this the case in the config_DEF.cfg in the DEFORM folder?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/977#issuecomment-628743170:88,optimiz,optimizer,88,https://su2code.github.io,https://github.com/su2code/SU2/issues/977#issuecomment-628743170,1,['optimiz'],['optimizer']
Performance,"The adjoint handling of the Eigen library can actually be a two step process. In the first step we just use the BlackBox differentiation of Eigen. This will work for every user in the primal code and adjoint code. As a second step we would then look into the BLAS wrapper of Eigen and check if we can provide a special treatment for the adjoint aka CoDiPack version. In general there are two options available:. 1. Wrap the BLAS calls in external functions, requires a lot of manual programming but can be generalized so that it is also available as a general feature of CoDiPack (e.g. We can handle BLAS to XX %). 2. Make use of the ""new"" AD tool I am currently programming. This tool does not insert itself into the Eigen structures, but wraps around them. Then the special path for BLAS can be activated without the AD tool even noticing it. For both options it will be very interesting for us to see how the performance compares with respect to the primal optimized and non optimized version.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-462272618:912,perform,performance,912,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-462272618,3,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"The corners warning is fine. I added the ability to specify corner points for sharp features that the user wants to maintain. For example, in an airfoil test case I want to make sure the sharp trailing edge at node 512 is maintained, so I can manually add; ```; NCORNERS= 1; 1 512; ```; to the end of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:346,perform,performs,346,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,1,['perform'],['performs']
Performance,"The discrete adjoint may still run with the chosen objective, since that is entirely defined within the C++, but some additional steps may be needed to run your objective with the Python framework. First, I recommend that you verify in your primal solve that you can compute one of your chosen objectives such as ENTROPY_GENERATION, and that it appears in the history file, since this is a prerequisite for running shape optimization with the Python framework. You should be able to follow details of the old ENTROPY_GENERATION objective if you look in the COutputLegacy::SpecialOutput_Turbo() routine in the legacy output. Note that you may need to do some work to connect this for your particular problem, since as mentioned, the turbomachinery related features are currently being brought into line with the most recent version of the software, and the routine may not be called by default. Once you have your desired objectives being computed and printed to the history file, give the updateHistoryMap.py script a look so that you can update the fields that the python framework can handle. As for custom objectives, there is a variable within the fluid solvers named Total_Custom_ObjFunc that will be differentiated for you if you use it compute a custom expression within the solver class (you can do this in multiple places within the solver class, but make sure it is called). Same suggestions apply for making sure that you can compute the custom objective, it appears in the history file, and that the python script is updated to read that particular field during optimization.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/889#issuecomment-609959747:421,optimiz,optimization,421,https://su2code.github.io,https://github.com/su2code/SU2/issues/889#issuecomment-609959747,2,['optimiz'],['optimization']
Performance,"The optimization output includes a list of the major optimization iterations and the associated minor iteration number, which allows you to identify which of the CFD evaluations are associated with the major optimization iteration. Is that sufficiently addressing this issue?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/108#issuecomment-101389663:4,optimiz,optimization,4,https://su2code.github.io,https://github.com/su2code/SU2/issues/108#issuecomment-101389663,3,['optimiz'],['optimization']
Performance,"The primary changes in #652 were related to replacing legacy blocking send/receive calls with non-blocking versions (with the receives accepted in a first-come manner using WaitAny()) for all of the point-to-point communications. At the time, I saw modest time/iteration improvements (10-20%) across the board when testing scalability on a fairly large cluster (Xeon nodes with Infiniband). Can you check if there's anything in your network setup that would render the non-blocking communications ineffective? That would be my best guess since it was the major change.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593130929:323,scalab,scalability,323,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593130929,1,['scalab'],['scalability']
Performance,"There are a couple of small tweaks that need to be made to the python scripts to make sure the changes I pushed for multipoint optimizations work with this new output structure. There are also a few changes that need to be made to make sure that at the end of the fixed CL mode, the code outputs the flow state before the finite-differencing takes place. . It might be easiest if I make those changes and push them. Would that be a hassle? Should I just comment on the code and let you make the changes?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-536735942:127,optimiz,optimizations,127,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-536735942,1,['optimiz'],['optimizations']
Performance,"There are a couple of talks in the upcoming SU2 conference (https://su2foundation.org/su2conference2020/) which sound related to this, perhaps tune in to those.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1003#issuecomment-635813021:143,tune,tune,143,https://su2code.github.io,https://github.com/su2code/SU2/issues/1003#issuecomment-635813021,1,['tune'],['tune']
Performance,"There is also a C++ version of the ADT search, although it assumes that the entire tree can be stored on one rank. Edwin. ---. From: juanjosealonso notifications@github.com; Sent: Thursday, June 9, 2016 9:27 PM; To: su2code/SU2; Cc: Weide, E.T.A. van der (CTW); Comment; Subject: Re: [su2code/SU2] Optimization of wall distance computation (#282). All,. Edwin has WAAAYYY too much on his plate right now. The ADT code is not that complicated and I know that there is an F90 (fairly object oriented) implementation. Edwin, is there also a C++ implementation that someone could start from?. If either Harichand or Giulio want to lead the effort, that would be great. I am sure Edwin would be happy to advise here and there if needed. So?. Cheers,. Juan. On Jun 9, 2016, at 4:42 AM, Harichand M V <notifications@github.com<mailto:notifications@github.com>> wrote:. If a k-d tree based implementation with parallel support with either pointcloud or full implementation is planned, I am interested to contribute. Otherwise Edwin can lead the work with ADT based implementation. I can give the necessary coding support. ## . You are receiving this because you commented.; Reply to this email directly, view it on GitHubhttps://github.com/su2code/SU2/issues/282#issuecomment-224871075, or mute the threadhttps://github.com/notifications/unsubscribe/ADpSxFz0dOtTPpROEf7HF5x7B-duSVsDks5qJ_wUgaJpZM4ItVbi. ## . You are receiving this because you commented.; Reply to this email directly, view it on GitHubhttps://github.com/su2code/SU2/issues/282#issuecomment-225000652, or mute the threadhttps://github.com/notifications/unsubscribe/AOUnxLFSv5QD58IfpCw5MIgXIUo6tTBVks5qKGksgaJpZM4ItVbi.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-225013108:298,Optimiz,Optimization,298,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-225013108,1,['Optimiz'],['Optimization']
Performance,"There was a lot of talk about refactoring the shape optimization framework to be able to work completely in memory.; I think the idea was not to have more drivers but simply to have more granularity such that you could manipulate the geometry from python (without writing it to files).; We also wanted introspection, i.e. you could probe SU2 via python for what variables and functions are available.; We also talked about having the projection step (DOT) included in CFD_AD so that you only need to worry about surface sensitivities, note that DEF is already part of CFD for forward mode AD.; (talking does not go very far). If you want to lead this work, we can help you understand the inner workings. We meet every Wednesday at 4pm CET https://meet.jit.si/SU2_DevMeeting to discuss this type of issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1262#issuecomment-818786416:52,optimiz,optimization,52,https://su2code.github.io,https://github.com/su2code/SU2/issues/1262#issuecomment-818786416,2,['optimiz'],['optimization']
Performance,"These are all fantastic questions. I have exclusively used SLSQP for any optimizations that I have run. So, I can only speak to that optimization algorithm. . > Why do we want the gradient norm to be ~1E-6?. Not sure why this is. I agree with what @economon said. These tuning parameters are to coax out an ideal step size for the optimizer. As you can imagine, the ideal step size is wildly varying depending on the optimization objectives/constraints, scales of the geometry, and types/numbers of design variables that are being used. You have to play this game of scaling the objectives and constraints in different ways to coax out the ideal first step. In my limited testing, the value of 1E-6 for the gradient norm seems to work well for 3D RANS aerodynamic shape optimizations of an aircraft wing when using FFD control points to change the shape of the wing. This is a specific use case that was the subject of a lot of the underlying research that resulted in the shape optimization framework. Which is likely why I have had good results using this rule of thumb. . > Is 1E-6 a good rule? Or is it just a decent starting point, and values very different from 1E-6 are used in practice? Also, if this is ""a good rule,"" then shouldn't we just automatically rescale the problem after the first design iteration?. Scaling in an optimization problem can be pretty frustrating and time consuming. Anecdotally, I have been using @economon 's suggestions of leaving everything else as default (value of 1) and only playing with the objective and constraint scalings to get a good first step size. As mentioned before, this step size is of different values for different problems, which is why it is difficult to come up with universal scalings that would work for most problems. But I am hoping to address some of these scaling issues in #923 . . I haven't really found much good literature on this problem, but I might be looking in the wrong places. Recommendations are welcome. . A big boon is hav",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616810829:73,optimiz,optimizations,73,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616810829,6,['optimiz'],"['optimization', 'optimizations', 'optimizer']"
Performance,"These timings were all run this morning on the same cluster. . Using qperf, I'm seeing 80 microsecond latency. I'm also seeing the expected bandwidth using qperf as well. I would think that mpi would behave similarly but 100% sure. . I'm quite sure that the jobs are being launched correctly. I've checked that a bunch of times since that was my first instinct. I've both logged into all the machines and watched top and everything looked normal. And I've tried running SU2 v6 before and after v7, launching them the same way, and I keep getting the same numbers. I'm not sure how to check whether there is any reason non blocking comm would be ineffective. If you have any ideas I can certainly try something. I tried to download vampirtrace which seemingly can profile mpi, but it failed to compile against my version of mpi. When I get the chance I can try a different version of openmpi and see if I can get it running. The networking setup is pretty simple with all 4 machines plugged into the same switch and they share their own vlan as part of a bigger network. As I said, I ordered some faster networking equipment to see if it makes a difference (though I'm honestly not 100% sure that what I ordered will work with my comps but we'll see.)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593144776:102,latency,latency,102,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593144776,2,['latency'],['latency']
Performance,"This could be a nice way to save some computational cost... but, the flow limiter may be needed even when the turb. limiter is not in the reconstruction, here:. https://github.com/su2code/SU2/blob/ec551e427f20373511432e6cd87402304cc46baa/SU2_CFD/src/solver_direct_turbulent.cpp#L475-L478. So, we should double-check in the regressions that the flow limiter is always well computed (during the previous flow iteration) when we perform an iteration of the turb. model.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/403#issuecomment-313451152:426,perform,perform,426,https://su2code.github.io,https://github.com/su2code/SU2/pull/403#issuecomment-313451152,1,['perform'],['perform']
Performance,"This is a very important topic, @jayantmukho. The optimization functionality is very difficult for folks to get working on their own. There are too many options, and it is not user friendly. We need to improve, and I am open to streamlining the interface if you have some ideas. In general, the bevy of options that you nicely describe above have been added over the years in order to coax the scipy SLSQP optimizer into converging, especially with constraints. It has mostly been a trial-and-error process during that time. Most of the tricks involve getting the scaling set such that the SLSQP optimizer does not take any massively errant steps during its line search that cause divergence. I think it would be great to see a standard normalization of the problem (say, make everything on the order of 1 going in/out of the optimizer) and interfaces to new optimizers (this exists already in part in feature_pyopt). In practice, I use **ONLY** the Scale value in OPT_OBJECTIVE and OPT_CONSTRAINT (set to a value that results in a first optimizer step roughly 10% the characteristic length of my geometry), and ignore the options OPT_GRADIENT_FACTOR, OPT_RELAX_FACTOR, and OPT_LINE_SEARCH_BOUND. I sometimes use the OPT_BOUND_UPPER and OPT_BOUND_LOWER options. But even this approach still requires some manual tuning.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-520726069:50,optimiz,optimization,50,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-520726069,6,['optimiz'],"['optimization', 'optimizer', 'optimizers']"
Performance,"This is obviously very good work and should make it much simpler to add new outputs etc. My main concern when first reviewing was performance (something no one seems to care about) but from the limited testing I did while merging this and CVariable there seems to be no big impact, I did not time anything though, if you have numbers to share please do.; Nevertheless if you can get away with using unordered_map instead of map it would be better. Possibly part of the reason everyone puts of reviewing this is that it is a major refactoring and yet there are no accompanying notes about the architecture the implementation choices etc. I absolutely guarantee you that is not how professional software is developed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-534651933:130,perform,performance,130,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-534651933,2,['perform'],['performance']
Performance,"This is the sort of scalability (in terms of time to solution, not per iteration) we get now:; ![image](https://user-images.githubusercontent.com/38071223/83768964-2fb60b00-a677-11ea-91fb-794cc2af4652.png); Which you can directly compare with #861. Edit: The results at 192c are actually better, it depends on the position of the cluster nodes in the network, the update is apples to apples.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1009#issuecomment-636478203:20,scalab,scalability,20,https://su2code.github.io,https://github.com/su2code/SU2/pull/1009#issuecomment-636478203,1,['scalab'],['scalability']
Performance,"This isn't just a hypothetical problem. In `CSolver::LoadInletProfile`, a specified inlet profile is compared against the loaded grid. Since each MPI task ""owns"" a different section of the grid, you can get errors on one task but not another. Here's the current workaround. The code currently does an `MPI_Allreduce` to check if there were any errors globally, then calls `SU2_MPI::Error` collectively if there were any errors. The code works fine how it is, but it would be nice if there was a standardized way to approach problems like this.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/564#issuecomment-415853537:53,Load,LoadInletProfile,53,https://su2code.github.io,https://github.com/su2code/SU2/issues/564#issuecomment-415853537,2,"['Load', 'load']","['LoadInletProfile', 'loaded']"
Performance,This works for a single case. I will try running a shape optimization with this and update this thread. It was a smart way of setting this. Thanks.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/970#issuecomment-626908235:57,optimiz,optimization,57,https://su2code.github.io,https://github.com/su2code/SU2/issues/970#issuecomment-626908235,1,['optimiz'],['optimization']
Performance,"Tom,. Ok. So 3 Gb and 4 sec to write on 72 cores is about 10.6Mb / sec / core. Since not each core has access to a separate I/O node (assume 8 cores / processor), that would give upwards of 80 Mb / sec / node which is quite respectable. The reading seems a bit slower, but it is indeed a major improvement. Later in time we should do some tests for much larger files to make sure we get some level of scalability. Best,. Juan. On Mar 3, 2017, at 10:40 AM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. Juan,. Don't know those numbers yet for the aggregate bandwidth with Lustre or how many I/O nodes are available for this cluster. Will have to do a detailed analysis eventually. For reference, this RANS case at 27 million grid points (not cells) results in a 3 GB restart file (binary). I'll take the two orders of magnitude improvement :). Tom. ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/pull/379#issuecomment-284035130>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxLewYDD1YDs9b-b3gf61tw7hQLMcks5riF6TgaJpZM4MMhev>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/379#issuecomment-284049783:401,scalab,scalability,401,https://su2code.github.io,https://github.com/su2code/SU2/pull/379#issuecomment-284049783,1,['scalab'],['scalability']
Performance,"Using Cygwin's OpenMPI you can compile SU2 using the following command:. $SU2_HOME/configure --prefix=$SU2_EXEC --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx --enable-metis --with-metis-cppflags=""-D_FILE_OFFSET_BITS=64 -DNDEBUG -DNDEBUG2 -DHAVE_GETLINE -DMETIS_USE_LONGINDEX=1"" --enable-parmetis --with-parmetis-cppflags=""-DMETIS_USE_LONGINDEX=1"" --enable-cgns. Ok, you will not have the same performance as a linux distribution but you will be able to run SU2. I hope it can help. Best,; Eduardo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/521#issuecomment-378291150:412,perform,performance,412,https://su2code.github.io,https://github.com/su2code/SU2/issues/521#issuecomment-378291150,1,['perform'],['performance']
Performance,"Vec(data_,offsets_); }. STRONGINLINE FltVec operator++(int) {; auto ret = (*this)(); offsets_ += Incr; return ret;; }; };; ```; so silly in fact, it only moves forward, we use it in our loop like so; ```c++; ...; auto gradI = grad.getColIterator(iPoint);; auto gradJ = grad.getColIterator(jPoint);. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += (gradI++)*d_ij[iDim];; phiR -= (gradJ++)*d_ij[iDim];; }; ...; ```; to get better assembly; ```asm; .L7:; vmovapd ymm3, ymm13; vmovapd ymm2, YMMWORD PTR [rbp-400]; add rax, 32; vgatherqpd ymm0, QWORD PTR [rcx+ymm1*8], ymm3; vpaddq ymm1, ymm1, ymm11; vmovapd YMMWORD PTR [rbp-272], ymm0; vmovapd YMMWORD PTR [rbp-240], ymm0; vfmadd132pd ymm0, ymm2, YMMWORD PTR [rax-32]; vmovdqa YMMWORD PTR [rbp-208], ymm1; vmovapd YMMWORD PTR [rbp-400], ymm0; cmp rax, rbx; jne .L7; ```; which makes the vectorized code perform just as well as the scalar code, iterators could also be used for the other variables but that would start to hurt readability without improving the performance much. _Note: There is also a chance the compiler (gcc) is not doing this kind of optimization because of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer a",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:12332,perform,perform,12332,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,4,['perform'],"['perform', 'performance']"
Performance,We are trying to perform resolvent analysis and need to linear NS equations in matrix form. But I guess I got your answer. Thank you for help!,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1141#issuecomment-751761402:17,perform,perform,17,https://su2code.github.io,https://github.com/su2code/SU2/issues/1141#issuecomment-751761402,1,['perform'],['perform']
Performance,"We have also encountered the significant memory requirements of the discrete adjoint. Actually, this requirement prevented the use of fine mesh (of 10-20M cells) in optimizations process. This is not the case while using continuous adjoint but the effectiveness of the discrete adjoint is higher by far.; I think this is a very important issue in the actual use of the method. Unfortunately, I do not have any solution to suggest.; Best,; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/594#issuecomment-427554385:165,optimiz,optimizations,165,https://su2code.github.io,https://github.com/su2code/SU2/issues/594#issuecomment-427554385,1,['optimiz'],['optimizations']
Performance,"We have submitted a bug report to Intel about this three years ago. I recently talked with a higher support guy from Intel and he told me that this ticket is on very low priority. . If you (or anybody else) has the possibility to submit a bug report to intel, we would appreciate it. Bug report number 02697346. The problem is, that we defined this method inside of the template class, which makes it automatically inlined. For specific methods I do not want them to be inlined, since it provides a small performance boost and also improves debugging and performance sampling. An example is:; ```; #include <iostream>. template<typename T>; struct S1 {; void func() { std::cout<< ""Creates no warning, is inlined"" << std::endl;}; };. template<typename T>; struct S2 {; __attribute__((noinline)) void func() { std::cout<< ""Creates warning, is not inlined"" << std::endl;}; };. template<typename T>; struct S3 {; __attribute__((noinline)) void func();; };. template<typename T>; void S3<T>::func() { std::cout<< ""Creates no warning, is not inlined"" << std::endl;}. int main(int nargs, char** args) {; S1<int> s1; ; s1.func();. S2<int> s2; ; s2.func();. S3<int> s3; ; s3.func();; }; ```. I do not want to change CoDiPack to the implementation of S3 since this is a code copy of the declaration. But there are other options. You can disable the 'no inlining' with the option -DCODI_UseAvoidedInlines=0. Another option is, that we add the pgrama `#pragma warning disable 2196` for intel compilers in CoDiPack. But this is also not a good option as general case. So I would add it as a new parameter e.g. `-DCODI_DisableIntelNoInlineWarning`. What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1087#issuecomment-706082605:505,perform,performance,505,https://su2code.github.io,https://github.com/su2code/SU2/issues/1087#issuecomment-706082605,2,['perform'],['performance']
Performance,"Well, the good news is that, when staying within a single node (up to 16 cores) v7 seems to perform significantly better for you than v6.2. The bad news is that something is screwy when you go multi-node. The MPI implementation of SU2 should scale fairly well as long as you have >~ 10,000 nodes per MPI rank / partition. On 64 ranks, you have 106,250 and 421,875 cells per rank, respectively, for each of the two meshes (6.8e6 and 27e6) which is nowhere close to the scalability limit‚Ä¶there is still plenty of work to do in each rank compared to the amount of communication that each rank must do (per iteration). In my mind this points to one of two things:. 1. Network between nodes: has this changed substantially between your timings for 6.2 and 7.0? Or is the network identical? In general, the numbers of the scalability limit that I listed above are for high-performance networking equipment (InfiniBand network cards on each node and a switch with a healthy amount of bisection bandwidth) with high bandwidth and low latency. Have you had a chance to measure the performance of your network (we used to have a little program called bounce that you can compile and run to get these statistics)? GigE cards and switches can have terrible MPI latencies. 2. Something is going wrong with the launching of jobs: As Pedro mentions, some of the timings are suspicious. Any chance you are launching multiple jobs per node and you are not realizing it? Can you log in to one of the nodes during the run and see what is running there? Orphaned jobs from a previous run?. Best,. Juan. On Mar 1, 2020, at 9:40 AM, Andrew Burkett <notifications@github.com<mailto:notifications@github.com>> wrote:. I think that is just a coincidence that the timings were the same but I should have provided more data up front. I did the preprocessing output check you described and a==b. The following output is from 16 cores on 1 node if you want to take a look. output_1.txt<https://github.com/su2code/SU2/files/4272178",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593127059:92,perform,perform,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593127059,5,"['latency', 'perform', 'scalab']","['latency', 'perform', 'performance', 'scalability']"
Performance,"When the window size changes the weights for each sample change, you do need the history for nontrivial windows and to recompute the weights.; But it is possible to cache the sum over n-1 samples until the number of samples changes again.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1545#issuecomment-1040060714:165,cache,cache,165,https://su2code.github.io,https://github.com/su2code/SU2/issues/1545#issuecomment-1040060714,1,['cache'],['cache']
Performance,"While I believe the velocity transfer is the way to go for adjoints and accuracy especially in incompressible flow, it should be possible to cater to both needs by basing the flow solver flow traction malarkey on Marker deform mesh, instead of marker fluid load.; Which would possibly make the setup easier as well.; If we want the flexibility to have fluid load markers independent of mesh deformation deformation, we may need a ""yet another config knob"".; One aspect to consider is that the displacement coming from python might be a forced motion, and so the consistency argument no longer matters.; Perhaps what we need, is a way to tell for which boundaries the velocity is known or not.; If the velocity is not known, it could be computed by finite differences at the interface and made part of the velocity-elasticity problem.; This would allow the forced motions to work together with FSI.; If the velocity is not known for any boundary, it is orders of magnitude quicker to compute it by finite differences. Sorry for the soliloquy, but I think all y'all get what I'm sayin'",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778391020:257,load,load,257,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778391020,2,['load'],['load']
Performance,"While `unsigned short* CPhysicalGeometry::Local_to_Global_Marker` and `Global_to_Local_Marker` are currently not in use, I think that they should be filled with sensible content rather than being removed. The data seems to be already available in `CPhysicalGeometry::LoadSurfaceElements` with the local variables; - `vector<unsigned long> Marker_Local` and ; - `unordered_map<unsigned long, unsigned long> Marker_Global_to_Local`. I'd like to implement this change. Before that, let's discuss the following questions: Do you think that marker IDs (often called `iMarker`) should be `unsigned short` or `unsigned long` (this is inconsistent across the code)? Should the above data structures be arrays (with some special code for ""this global index does not correspond to a local index"") or maps/lists? I'd prefer the latter, respectively.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762047231:267,Load,LoadSurfaceElements,267,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762047231,1,['Load'],['LoadSurfaceElements']
Performance,"Why don't I add additional regression cases of multiple objective on a single surface and a single objective on multiple surfaces, I think otherwise the situations you mention are covered (both of those should already work, but may not be covered by regressions, and they can easily be covered by single-iteration tests). ; There is a tutorial page here: ; https://github.com/su2code/SU2/wiki/Multi-Objective-Optimization; Although that's from a while ago I don't think much needs to be changed, except for broken links including images.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/494#issuecomment-357367522:409,Optimiz,Optimization,409,https://su2code.github.io,https://github.com/su2code/SU2/pull/494#issuecomment-357367522,1,['Optimiz'],['Optimization']
Performance,"Why is it good C++ to use containers (instead of raw arrays):; - Book keeping: No need for verbose allocations / de-allocations.; - Information: The size is carried with the container, the type of data, the allocation strategy (e.g. alignment), etc.; - Correctness: A const method can change the elements of a raw array, because in such cases const does not qualify the data, only the address (pointer) of that data. On the other hand, a const method will imply const containers, on which only const methods can be called, and so on.; - Performance 1: A nested array (**), or nested container (vector<vector>) is NOT a matrix, it is a list of arrays, consequently there is more construction / destruction overhead (more allocations) uncertain performance at runtime, because inner arrays can end up arbitrarily far from each other, you end up needing copies to talk with e.g. blas or mpi...; - Versatility: Above all a container encapsulates data structure details (e.g. if something is a vector or list or map or row-major matrix or column-major matrix or sparse matrix) behind an interface. Which then lets you change the details separately from the code that uses the data. Whenever you pass an array by pointer you are locking yourself to ONE very particular organization of data in memory.; - Performance 2: This encapsulation is not insulation, it is completely transparent to the compiler because any half decent container type will be defined inline. Furthermore... If the compiler sees two pointers it has absolutely no idea if they are pointing to the same thing, or worse if they partially overlap. To legally optimize such code compilers need to introduce a ton of checks and fallback code, on the other hand, defining operations on containers which you know never to overlap provides a clean way to avoid compiler-paranoia.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1225#issuecomment-793832435:537,Perform,Performance,537,https://su2code.github.io,https://github.com/su2code/SU2/pull/1225#issuecomment-793832435,4,"['Perform', 'optimiz', 'perform']","['Performance', 'optimize', 'performance']"
Performance,Would it be an idea to create a branch to test things out and make a decision based on the results? It would be interesting to see the performance for e.g. the dense matrix multiplications in the DG-solver compared to Intel's MKL.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459705131:135,perform,performance,135,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459705131,1,['perform'],['performance']
Performance,"YES! I am excited to try this out. I can probably test it on some of the other TMR cases (airfoils, flatplates). Will post the results when I get those done. . Side note, there was one issue that @bmunguia and I encountered when performing optimizations with adaptive CFL. Say the DIRECT simulation is run with adaptive CFL and is well converged (6 to 8 orders of residual reduction). When the discrete adjoint performs the one direct iteration to store the computational graph, it uses the initial CFL value, not the CFL that the adaptive CFL routine ended at. This results in the residuals being very high for that one iteration, which then affects the convergence of the discrete adjoint. . I will try to run an adjoint on one of these cases as well to see if the problem persists. Perhaps could be overcome with a simple additional field for CFL in the restart meta-data",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-531520526:229,perform,performing,229,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-531520526,6,"['optimiz', 'perform']","['optimizations', 'performing', 'performs']"
Performance,"Yeah the config is a bit confusing. The initial CFD run (in adap/ini) uses the value specified in ITER (unless RESTART_SOL= YES, then it runs one iteration just to get force coefficients). . After that, it runs a series of adaptations based on the settings in PYADAP_SUBITE, PYADAP_FLOW_ITER, and PYADAP_COMPLEXITY. . 1. AMG interpolates the solution; 2. A simulation is run for PYADAP_FLOW_ITER[0] iterations (2999 in your case); 3. An adaptation is performed with a target size of PYADAP_COMPLEXITY[0] (20000 in your case). This is done PYADAP_SUBITE[0] times. Then it moves on to the next mesh level. I admit that I haven't really debugged the feature-based (e.g. Mach-based) adaptation much. I found a couple bugs in the python scripts and just updated them, so could you pull again and rerun ninja?. The AMG output is pretty long, but since it's developed at Inria, I don't have any control over that. I guess as long as none of the lines are error statements (usually complaining about invalid projections or negative eigenvalues of the metric from my experience) it should be fine. The only actual information I get from amg.log is usually in the last line; ```; NbSensor 30518 msh->npobk 30518 NbrTyp 19 msh->npoin 52477; ```; which just tells you how many points are in the old vs. new mesh, but you could just look at the .su2 files for that. Another important note is that the python version of AMG currently only supports triangle and tetrahedral volume elements.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619584815:451,perform,performed,451,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619584815,1,['perform'],['performed']
Performance,"Yeah, but listening to Mr Turner is surely well invested time if one is able to follow at least some of his thoughts. But imo he does a good job in that, I sometimes tune in for cppcast and that is okayish to follow most of the time (but that is not really in depth tbh)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1208#issuecomment-785905666:166,tune,tune,166,https://su2code.github.io,https://github.com/su2code/SU2/pull/1208#issuecomment-785905666,1,['tune'],['tune']
Performance,"Yeah... It sounded more like an hardware limitation than a software implementation (mpi) issue. About the hybrid solver, you are running into load balancing issues (there are more threads than work packets, i.e. edge groups) it will be better for larger meshes, and maybe an 8x8 division works better than 4x16.; As you are using JST you can also try running at higher CFL to shift work to the linear solver which has no load balancing issues regardless of the group size parameter (the adaptive CFL mode may be necessary to get through the initial transient). Let us know if the new hardware solves the problem.; I will let you know via this issue when we have a release where the hybrid implementation might scale better on unstructured grids.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593573398:142,load,load,142,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593573398,2,['load'],['load']
Performance,"Yes, the minimum required version is now 4.7 (which has full C++11 support). But only for the AD binaries!; We have to move forward, otherwise it is not possible to include current and future changes that improve the performance. But I can provide a patch to make it work with gcc < 4.7 if necessary.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/350#issuecomment-271090352:217,perform,performance,217,https://su2code.github.io,https://github.com/su2code/SU2/pull/350#issuecomment-271090352,1,['perform'],['performance']
Performance,"You are completely right... the description for OBJECTIVE_FUNCTION. % Objective function in optimization problem (DRAG, LIFT, SIDEFORCE, MOMENT_X,; % MOMENT_Y, MOMENT_Z, EFFICIENCY,; % EQUIVALENT_AREA, NEARFIELD_PRESSURE,; % FORCE_X, FORCE_Y, FORCE_Z, THRUST,; % TORQUE, TOTAL_HEATFLUX,; % MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,; % INVERSE_DESIGN_HEATFLUX, AVG_TOTAL_PRESSURE, ; % MASS_FLOW_RATE, ELLIPTIC_SPANLOAD, MAX_SECTIONAL_CL); OBJECTIVE_FUNCTION= DRAG. Is not accurate and introduces some level of confusion. . From the ‚Äúaverage"" user point of view my experience is that they only use OPT_OBJECTIVE and thy don‚Äôt know that OBJECTIVE_FUNCTION exists. Could you please change ""Objective function in optimization problem‚Äù by something more accurate? In fact, we should maybe think on changing the keyword OBJECTIVE_FUNCTION itself. Best,; Francisco. > On Apr 22, 2017, at 5:19 PM, Heather Kline <notifications@github.com> wrote:; > ; > @fpalacios <https://github.com/fpalacios>, @economon <https://github.com/economon> - There's a comment in the config files that says that 'OBJECTIVE_FUNCTION' sets the objective function for the optimizer - however it seems that this option is only used with controlling the adjoint solver and output, and whatever the user specifies there will be overwritten by the optimizer. I put an alternative comment in the config_templates here; I can either revert that back or change the comment in all the config files (I have a script).; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/385#issuecomment-296410309>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AEpklinNXzQxD1nXZbsTUqsE6aPW6zEMks5rypkJgaJpZM4MgM_e>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/385#issuecomment-296417940:92,optimiz,optimization,92,https://su2code.github.io,https://github.com/su2code/SU2/pull/385#issuecomment-296417940,4,['optimiz'],"['optimization', 'optimizer']"
Performance,You only see changes on residuals that are -20 so I think you are ok.; Taking those variables from members to local variables may allow the compiler to re-order some stuff for optimization.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1923#issuecomment-1432346004:176,optimiz,optimization,176,https://su2code.github.io,https://github.com/su2code/SU2/pull/1923#issuecomment-1432346004,1,['optimiz'],['optimization']
Performance,"[flat plate test.zip](https://github.com/user-attachments/files/16321830/flat.plate.test.zip); @pcarruscag Hi Pedro, thanks for the help. I used your modified one to do a plat plate test, which could work without inlet profile, however, when I input the inlet profile with uniform value(should be same as no-input), it still diverged immediately. I was looking through the function 'LoadInletProfile' in CSolver.cpp these days, maybe there should be some changes around? Because there is a determination of inlet type, which SUPERSONIC_BC doesn't belong to, I am not that sure if it effects. I attached all the testing files, including mesh, config, profile dat, etc. Please take a look and let's debug on this.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241240909:383,Load,LoadInletProfile,383,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241240909,1,['Load'],['LoadInletProfile']
Performance,"```diff; $ git --no-pager diff --cached ; diff --git a/meson.build b/meson.build; index ca86992ea..b68a03c52 100644; --- a/meson.build; +++ b/meson.build; @@ -1,15 +1,12 @@; project('SU2', 'c', 'cpp',; version: '7.5.1 ""Blackbird""',; + meson_version: '0.61.1',; license: 'LGPL2',; default_options: ['buildtype=release',; 'warning_level=0',; 'c_std=c99',; 'cpp_std=c++11']); ; -if meson.version() != '0.61.1'; - error('SU2 must be configured with the extended Meson script (./meson.py) in the SU2 root directory.'); -endif; -; pymod = import('python'); python = pymod.find_installation(); ; ```. I used this patch, and then ran the following:. ```; $ meson setup builddir --wipe; The Meson build system; Version: 1.0.1; Source dir: /tmp/SU2; Build dir: /tmp/SU2/builddir; Build type: native build. meson.build:1:0: ERROR: Meson version is 1.0.1 but project requires 0.61.1; ```. Using the >= comparison, it configures fine, and downloads a git submodule for mutationpp/coolprop on demand. From a hasty look around, it seems like the other git submodules are used as externals/ directories, not meson subprojects. Another project I know uses e.g. ```; if not fs.exists('submoduledir/README.md'); error('Missing the `submoduledir` submodule! Run `git submodule update --init` to fix this.'); endif; ```. for each submodule before it gets processed by meson. This is less automatic than wrapping it in meson.py, but does provide pretty clear directions... the sticking point is if people download tarballs. You currently point people to github's autogenerated archives, which is NOT sufficient as it doesn't have submodules included. I would actually suggest using `meson dist --include-subprojects --no-tests` to produce your own tarballs and attach them as additional releases artifacts. Meson *does* include submodules (whether or not they are subprojects) automatically to the tarball it creates.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1945#issuecomment-1451057434:33,cache,cached,33,https://su2code.github.io,https://github.com/su2code/SU2/issues/1945#issuecomment-1451057434,2,['cache'],['cached']
Performance,actually I face the issue when dealing with naca64a10 optimization,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/296#issuecomment-248936687:54,optimiz,optimization,54,https://su2code.github.io,https://github.com/su2code/SU2/issues/296#issuecomment-248936687,1,['optimiz'],['optimization']
Performance,"and here's a trace from a unix cluster --. ```; ---------------------- Read Grid File Information -----------------------; Three dimensional problem.; 3113133 points before parallel partitioning.; Performing linear partitioning of the grid nodes.; 4478644 interior elements before parallel partitioning.; Distributing elements across all ranks.; Calling the partitioning functions.; Getting into adjacency function.; Building the graph adjacency structure.; 8 surface markers.; 166730 boundary elements in index 0 (Marker = aircraft).; 33766 boundary elements in index 1 (Marker = farfield).; 742 boundary elements in index 2 (Marker = injest).; 290 boundary elements in index 3 (Marker = inlet).; 22500 boundary elements in index 4 (Marker = inner_nearfield).; 243 boundary elements in index 5 (Marker = outlet).; 146871 boundary elements in index 6 (Marker = symmetry).; 22500 boundary elements in index 7 (Marker = outer_nearfield).; Calling ParMETIS...; Fatal error in MPI_Wait:; Message truncated, error stack:; MPI_Wait(156).....................: MPI_Wait(request=0x106b830,; status0x106b6e0) failed; MPIDI_CH3U_Receive_data_found(259): Message from rank 0 and tag 1; truncated; 36096 bytes received but buffer size is 32032; Fatal error in MPI_Wait:; Message truncated, error stack:; MPI_Wait(156).....................: MPI_Wait(request=0x106b830,; status0x106b6e0) failed; MPIDI_CH3U_Receive_data_found(259): Message from rank 0 and tag 1; truncated; 36400 bytes received but buffer size is 32032; Fatal error in MPI_Wait:; Message truncated, error stack:; MPI_Wait(156).....................: MPI_Wait(request=0x106b830,; status0x106b6e0) failed; MPIDI_CH3U_Receive_data_found(259): Message from rank 0 and tag 1; truncated; 35800 bytes received but buffer size is 31680; Fatal error in MPI_Wait:; Message truncated, error stack:; MPI_Wait(156).....................: MPI_Wait(request=0x106b830,; status0x106b6e0) failed; MPIDI_CH3U_Receive_data_found(259): Message from rank 0 and tag 1; trunc",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/159#issuecomment-75485343:197,Perform,Performing,197,https://su2code.github.io,https://github.com/su2code/SU2/issues/159#issuecomment-75485343,1,['Perform'],['Performing']
Performance,"angle=np.radians(26),; outlet_angle=np.radians(12),; upper_thick_prop=[0.015, 0.05, 0.05 , 0.015],; lower_thick_prop=[0.015, 0.05, 0.05, 0.015],; leading_prop=0.5,; trailing_prop=0.5,; chord_length=0.018,; ). axial_turbo_passage = TurboStagePassage(; inflow_passage=TurboRowPassage(; airfoil=rotor_airfoil,; spacing_to_chord=0.5,; leading_edge_gap_to_chord=1.0,; trailing_edge_gap_to_chord=0.25,; type=""camber"",; mesh_params=TurboMeshParameters(; airfoil_label=""wall1"",; bottom_label=""periodic1"",; top_label=""periodic2"",; inlet_label=""inflow"",; outlet_label=""outmix"",; ); ),; outflow_passage=TurboRowPassage(; airfoil=stator_airfoil,; spacing_to_chord=0.5,; leading_edge_gap_to_chord=0.25,; trailing_edge_gap_to_chord=1.0,; type=""camber"",; mesh_params=TurboMeshParameters(; airfoil_label=""wall2"",; bottom_label=""periodic3"",; top_label=""periodic4"",; inlet_label=""inmix"",; outlet_label=""outflow"",; ); ); ). ##############################################################################################. from paraflow import run_simulation, get_flasher, SimulationParams, get_frames, display_frame; from paraflow.simulation.su2 import Su2SimulationConfig . flasher = get_flasher(""air"", ""gas""); sim_results = run_simulation(; axial_turbo_passage,; params=SimulationParams(; inlet_total_state=flasher.flash(P=87909, T=276, mach_number=0.4098), ; target_outlet_static_state=flasher.flash(P=108932, T=296),; translation=[; np.array([0.0, 266, 0.0]),; None; ]; ),; working_directory=""./simulation_out"", ; id=""1"",; auto_delete=True,; verbose=True,; # num_procs=9,; cfg=Su2SimulationConfig(; custom_repo_url= ""https://github.com/su2code/SU2/tree/master"",; version= ""8.0.0""; ); ); sim_results.to_file(""./simulation_out/cached.pkl""). # sim_results = SimulationResult.from_file(""./simulation_out/cached.pkl""). frames = get_frames(; sim_results, ; property_names=[""Pressure""], ; num_pnts=500,; ); display_frame(frames, ""Pressure""); sim_results.eval_values.loc[sim_results.eval_values.index[-1], ' ""TotTotEff[1]"" ']",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2204#issuecomment-1912707796:2303,cache,cached,2303,https://su2code.github.io,https://github.com/su2code/SU2/issues/2204#issuecomment-1912707796,2,['cache'],['cached']
Performance,"ays to do this, for example using [x86 intrinsics](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=2273,2273,2436,2943,2436,2943,610,1788,2942) (in header `<x86intrin.h>`), register types instead of arrays, and a boat load of template meta-programming (I'm guessing) there are professional libraries for this.; This quickly-hacked-together code is compatible with custom types, portable, and seems to do the trick. To pull this off we do not need to have `Vector` or `Matrix` of this class, the underlying type for those data structures is still `double`, only the `getVec` type methods need to convert on the fly to the SIMD type, for example:; ```C++; // use the ""pointer ctor"" to return an array starting at ""row0""; Array<double,4> Matrix<double>::getVec(size_t row0, size_t col) const {; return Array<double,4>(&data_[row0+col*rows_]);; }. // use the ""gather ctor"" to return an array with the indices in ""rows""; template<class U>; Array<double,4> Matrix<double>::getVec(const U& rows, size_t col) const {; return Array<double,4>(&data_[col*rows_], rows);; }; ```; After inlining those copies get optimized away.; Although the stored type, and ""scalar interface"" of the containers do not need to change, the storage order of the data does. Notice that in the above data is stored by columns instead of rows (something that @vdweide mentioned in #716) this has greater implications for gradients as instead of the familiar ""vector of matrices"" we would need a ""matrix of vectors"", i.e. the derivative of variable i w.r.t. coordinate j stored as a vector for all points. The `Adjacency` also needs to be stored in a funny way. For the scalar version of the code it was stored as a CSR sparse matrix (one array of indices into the arrays of data for each point, the rows).; For the vectorized version we want to load (small) arrays of jPoint's, arrays of iEdge's, and arrays of directions, and as we know either those are contiguous or we take a huge performance hit.; If all poi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:9772,optimiz,optimized,9772,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['optimiz'],['optimized']
Performance,"back at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import mpi4py; print(mpi4py.get_include()); --- stdout ---; C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ; --- stderr ---; ; ; Message: Using mpi4py from C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\lib\site-packages\mpi4py\include; ""python-3.9-embed"" could not be found in LIBPC (None), this is likely due to a relocated python installation; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'python-3.9-embed' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion python-3.9-embed` -> 1; ; Found ""python-3.9-embed"" via fallback pkgconfig lookup in PKG_CONFIG_LIBDIR/PKG_CONFIG_PATH; Found ""python-3.9"" via SYSCONFIG module; Dependency python found: YES (sysconfig); Program install.sh found: YES (sh D:\Programme\SU2-7.1.1\SU2_PY/pySU2\install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.1.1 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrappe",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:7832,cache,cached,7832,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['cache'],['cached']
Performance,"calj/CodeSU2-master; Version: 4.1.0; C++ Compiler: g++; C Compiler: gcc; Preprocessor flags: ; Compiler flags: -g -O2; Linker flags: ; MPI support: no; Metis support: no; Parmetis support: no; TecIO support: no; CGNS support: yes; HDF5 support: no; SZIP support: no; ZLIB support: no; Mutation++ support: no; Jsoncpp support: no; LAPACK support: no; Datatype support:; double yes; complex no; codi_reverse no; codi_forward no. External includes: ; External libs: . Build SU2_CFD: yes; Build SU2_DOT: yes; Build SU2_MSH: yes; Build SU2_DEF: yes; Build SU2_SOL: yes; Build SU2_GEO: yes. Please be sure to add the $SU2_HOME and $SU2_RUN environment variables,; and update your $PATH (and $PYTHONPATH if applicable) with $SU2_RUN. Based on the input to this configuration, add these lines to your .bashrc file:. export SU2_RUN=""/gshare/work/hpascalj/CodeSU2-master/bin""; export SU2_HOME=""/home/antodech/SU2-4.1.0""; export PATH=$PATH:$SU2_RUN; export PYTHONPATH=$PYTHONPATH:$SU2_RUN. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=x86_64-unknown-linux-gnu; ac_cv_c_compiler_gnu=yes; ac_cv_cxx_compiler_gnu=yes; ac_cv_env_CCC_set=; ac_cv_env_CCC_value=; ac_cv_env_CC_set=; ac_cv_env_CC_value=; ac_cv_env_CFLAGS_set=; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_CXXFLAGS_set=; ac_cv_env_CXXFLAGS_value=; ac_cv_env_CXX_set=; ac_cv_env_CXX_value=; ac_cv_env_LDFLAGS_set=; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_file__gshare_soft_code_saturne_4_0_0_prod_cgnslib_3_2_1_include_cgnslib_h=yes; ac_cv_file__gshare_soft_code_saturne_4_0_0_prod_cgnslib_3_2_1_lib_libcgns_a=yes; ac_cv_header_X11_Intrinsic_h=no; ac_cv_header_inttypes_h=yes; ac_cv_header_memory_h=yes; ac_cv_header_std",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:19528,Cache,Cache,19528,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,1,['Cache'],['Cache']
Performance,"ce some structural changes are made which could potentially effect things outside the regression tests, and I want to make it easier for code review.; > ; > In this pull request, the ability to run multiple objectives is added to the python tools and to the config options. Within the CFD and adjoint solvers, the only major change is in the data structure containing the objectives - it now can hold a list of objectives, but when the adjoint solver is run only one objective is included. Later pull requests are planned to include the ability to run a single adjoint solution for a sum of objectives defined on different markers.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/237 https://github.com/su2code/SU2/pull/237; > Commit Summary; > ; > config options updated to be compatible with multiple objectives - mdo not yet implemented; > python tools; > python adjusted for multiple objectives: will always run 1st objective only with continuous adjoint, but will run separate continuous adjoint evaluations within optimization; > continuous adjoint evaluates the requested objectives; > fixing some errors; > File Changes; > ; > M Common/include/config_structure.hpp https://github.com/su2code/SU2/pull/237/files#diff-0 (20); > M Common/include/config_structure.inl https://github.com/su2code/SU2/pull/237/files#diff-1 (6); > M Common/src/config_structure.cpp https://github.com/su2code/SU2/pull/237/files#diff-2 (90); > M SU2_PY/SU2/eval/design.py https://github.com/su2code/SU2/pull/237/files#diff-3 (8); > M SU2_PY/SU2/eval/functions.py https://github.com/su2code/SU2/pull/237/files#diff-4 (14); > M SU2_PY/SU2/eval/gradients.py https://github.com/su2code/SU2/pull/237/files#diff-5 (4); > M SU2_PY/SU2/io/config.py https://github.com/su2code/SU2/pull/237/files#diff-6 (21); > M SU2_PY/SU2/io/tools.py https://github.com/su2code/SU2/pull/237/files#diff-7 (21); > M SU2_PY/SU2/opt/project.py https://github.com/su2code/SU2/pull",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/237#issuecomment-182175757:1575,optimiz,optimization,1575,https://su2code.github.io,https://github.com/su2code/SU2/pull/237#issuecomment-182175757,1,['optimiz'],['optimization']
Performance,"centages only, normalized by that of CFluidIteration::Iterate (to exclude pre-processing time) and multiplied the results from the total ""iteration time"" from the history file. Doing that for before and after results allowed computing individual speedup factors for each important routine (in terms of time, otherwise they are all special and important in their own way) e.g. gradients, limiters, upwind/viscous residuals, etc.; ![image](https://user-images.githubusercontent.com/38071223/63292708-30cfa480-c2be-11e9-8d4a-5feb3dc61abf.png). Here is the data by the way: [results.xlsx](https://github.com/su2code/SU2/files/3517492/results.xlsx). As predicted the linear solvers stay the same and routines that are light see more speedup than their arithmetic-intensive friends.; What is surprising to me is how intensive the convective residuals appear to be with only a 7% improvement, so surprising in fact, I do not think the above paints the full picture. Maybe the outlet bandwidth bottleneck (into the Jacobian matrix) is more important.; To put that do the test I switched to Euler-explicit time marching and repeated the measurements:; ![image](https://user-images.githubusercontent.com/38071223/63293351-d8010b80-c2bf-11e9-8135-2502eac1128e.png); Better, but not by much, which means upwind and viscous residuals computations might gain a lot from vectorization (SIMD). And like @economon mentioned even more if they are somehow fused together.; It also means the writes to CSysMatrix are relatively expensive, I think there are two-three reasons for it.; - We do a linear search on each Add/SubtractBlock - This could be replaced by a map.; - The Jacobian contributions are first written into a temporary block - Interleaving the writes with the computation could help mask latency.; - That temporary is not stored contiguously - Which makes it hard to vectorize the writes to CSysMatrix. **So what do I think should be tackled next?**; Hybrid parallelism (wait what?!) from messing about wi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-522730951:4284,bottleneck,bottleneck,4284,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-522730951,2,['bottleneck'],['bottleneck']
Performance,"ck']):; raise RuntimeError , ""\n\n##ERROR : Can't find back mesh: %s.\n\n"" % config_amg['adap_back']; ; if back_extension == "".su2"":; ; #pyamg.su2_to_libmeshb(config_amg['adap_back'], """", ""amg_back""); print ""skipping back mesh ...""; #import _amgio as amgio; #amgio.py_ConvertSU2toInria(config_amg['adap_back'], """", ""amg_back""); #config_amg['adap_back'] = ""amg_back.meshb""; ; if 'ADAP_SOURCE' in config:; config_amg['adap_source'] = os.path.join(cwd,config['ADAP_SOURCE']); ; global_iter = 0; ; sys.stdout.write(""\nStarting mesh adaptation process.\n""); ; for iSiz in range(len(mesh_sizes)):; ; mesh_size = int(mesh_sizes[iSiz]); nSub = int(sub_iter[iSiz]); ; sys.stdout.write(""\nIteration %d/%d - Mesh size coefficient %.1lf\n"" % (iSiz+1, len(mesh_sizes), mesh_size)); ; for iSub in range(nSub):; ; config_amg['size'] = mesh_size; config_amg['amg_log'] = 'ite%d.amg.stdout' % (global_iter); ; # Prints; pad_cpt = (""(%d/%d)"" % (iSub+1, nSub)).ljust(9); pad_nul = """".ljust(9); ; if not amg_python : ; ; #--- Load su2 mesh ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- If not using the amg python interface, convert the mesh and make system call; ; su2amg.write_mesh(""current.meshb"", ""current.solb"", mesh); ; if not os.path.exists(""current.solb""):; raise RuntimeError , ""\n##ERROR : Can't find solution.\n""; if not os.path.exists(""current.meshb""):; raise RuntimeError , ""\n##ERROR : Can't find mesh.\n""; ; #--- Get sensor; ; sensor = su2amg.create_sensor(mesh, adap_sensor); su2amg.write_solution(""current_sensor.solb"", sensor); ; if not os.path.exists(""current_sensor.solb""):; raise RuntimeError , ""\n##ERROR : Can't find adap sensor.\n""; ; #--- Run amg; ; sys.stdout.write(""Running amg. Log : %s\n"" % config_amg['amg_log']); ; if os.path.exists(""current.itp.solb""):; os.remove(""current.itp.solb""); ; try :; su2amg.amg_call(config_amg); except:; raise RuntimeError , ""\n##ERROR : Call to AMG failed.\n""; ; if not os.path.exists(config_amg['mesh_out']):; raise RuntimeError , ""\n##ERR",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:8379,Load,Load,8379,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['Load'],['Load']
Performance,"closed for movement to cfd-online forum.; multi-threading does indicate an issue with compiling. One thing to check is whether the same mpi implementation is being used for compilation and at runtime. (aka, openmpi vs mpich)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/303#issuecomment-242175443:42,multi-thread,multi-threading,42,https://su2code.github.io,https://github.com/su2code/SU2/issues/303#issuecomment-242175443,1,['multi-thread'],['multi-threading']
Performance,"computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:2588,perform,perform,2588,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['perform'],['perform']
Performance,"d news is that something is screwy when you go multi-node. The MPI implementation of SU2 should scale fairly well as long as you have >~ 10,000 nodes per MPI rank / partition. On 64 ranks, you have 106,250 and 421,875 cells per rank, respectively, for each of the two meshes (6.8e6 and 27e6) which is nowhere close to the scalability limit‚Ä¶there is still plenty of work to do in each rank compared to the amount of communication that each rank must do (per iteration). In my mind this points to one of two things:. 1. Network between nodes: has this changed substantially between your timings for 6.2 and 7.0? Or is the network identical? In general, the numbers of the scalability limit that I listed above are for high-performance networking equipment (InfiniBand network cards on each node and a switch with a healthy amount of bisection bandwidth) with high bandwidth and low latency. Have you had a chance to measure the performance of your network (we used to have a little program called bounce that you can compile and run to get these statistics)? GigE cards and switches can have terrible MPI latencies. 2. Something is going wrong with the launching of jobs: As Pedro mentions, some of the timings are suspicious. Any chance you are launching multiple jobs per node and you are not realizing it? Can you log in to one of the nodes during the run and see what is running there? Orphaned jobs from a previous run?. Best,. Juan. On Mar 1, 2020, at 9:40 AM, Andrew Burkett <notifications@github.com<mailto:notifications@github.com>> wrote:. I think that is just a coincidence that the timings were the same but I should have provided more data up front. I did the preprocessing output check you described and a==b. The following output is from 16 cores on 1 node if you want to take a look. output_1.txt<https://github.com/su2code/SU2/files/4272178/output_1.txt>. Here are three sets of timings. One for SU2 v7 on a smaller problem (6.8e6 cells) and one for SU2 v7 on a larger one (27e6 cells) ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-593127059:1072,perform,performance,1072,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-593127059,1,['perform'],['performance']
Performance,"dweide; >(...) @bmunguia and @EduardoMolina, what type of application did you have in mind for PETSc? The only thing I can think of is a full Newton solver. And no matter how much I like PETSc, @juanjosealonso and @erangit have a point here. Looks like I start to belong to the group of old conservatives as well.... >@economon ; >(...) If you really would like to give PETSc a shot, I recommend talking with @anilvar who had an interface for connecting it to SU2 in one of our branches. >@pcarruscag; >(...) being able to use PETSc or HYPRE would be interesting as it would give us access to AMG, and @talbring 's branch feature_template_linear_solver would make such an integration compatible with AD. (...). >@EduardoMolina; >(...) When Brian (@bmunguia ) and I mentioned PETSc, it was an idea to try a different Newton-Krylov (with preconditioner) library in order to improve the convergence of SU2.; Since the slow convergence of the SU2-FV is the main feedback that I received from other users from industry and academia, I think it worth try an external library and evaluate the performance. (...). >@pcarruscag ; >(...) That is something I am also interested in as for some of my structural cases the current linear solvers simply do not converge. (...). >@economon ; >I would add one practical comment for consideration: it is worth checking whether the main restriction we have is related to approximations in the Jacobian that limit the effective CFL we can use or whether the convergence of the linear solver itself is a problem (speed or complete lack of convergence). A quick test without resorting to another library is to increase the fill-in for ILU-preconditioned GMRES, which is very expensive/slow but should converge difficult problems, and to check how high we can take the CFL when allowing each nonlinear iteration to converge to a tight tolerance in the linear solver, say 1e-14 (you can output the linear solver residuals to verify convergence). If we can take the CFL higher",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460853218:2949,perform,performance,2949,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460853218,2,['perform'],['performance']
Performance,"e use it in our loop like so; ```c++; ...; auto gradI = grad.getColIterator(iPoint);; auto gradJ = grad.getColIterator(jPoint);. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += (gradI++)*d_ij[iDim];; phiR -= (gradJ++)*d_ij[iDim];; }; ...; ```; to get better assembly; ```asm; .L7:; vmovapd ymm3, ymm13; vmovapd ymm2, YMMWORD PTR [rbp-400]; add rax, 32; vgatherqpd ymm0, QWORD PTR [rcx+ymm1*8], ymm3; vpaddq ymm1, ymm1, ymm11; vmovapd YMMWORD PTR [rbp-272], ymm0; vmovapd YMMWORD PTR [rbp-240], ymm0; vfmadd132pd ymm0, ymm2, YMMWORD PTR [rax-32]; vmovdqa YMMWORD PTR [rbp-208], ymm1; vmovapd YMMWORD PTR [rbp-400], ymm0; cmp rax, rbx; jne .L7; ```; which makes the vectorized code perform just as well as the scalar code, iterators could also be used for the other variables but that would start to hurt readability without improving the performance much. _Note: There is also a chance the compiler (gcc) is not doing this kind of optimization because of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer arithmetic and so we really need iterators to amortise that cost, there is also the drawback that scalar usage of such a container would be terrible. **For these reasons I",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:12582,optimiz,optimization,12582,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['optimiz'],['optimization']
Performance,"ead_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could revisit the ownership relations of the numerics classes, i.e. allocate them as members of their respective solvers, which if we do, we can think of having a purpose built container that automates the per-thread creation and access. > Why are they redefined each time inside the loop?; > Is this for efficiency reasons?. Referring to variables being declared inside loops. One stylist reason is that declaring everything at the top of a function is the C way of doing things, the C++ people whose books/blogs I've read and talks I've watched, recommend keeping namespaces (the inside of the loop being one) as clean as possible.; The only reason not to do this is if you explicitly want re-use, in the case of trivial types this does not improve efficiency, and in the context of OpenMP code it can create issues. Just like we need one numerics per thread, if we declare variables outside a parallel loop the default OpenMP behaviour is to consider them shared, and concurrent writes to shared locations = gdb and many bad words xD.; **EDIT:** I should mention here that if the parallel region is started before the variable declarations they become local and all is well, with the exception of class members, those will be shared most of the time (this is where const correctness can give some peace of mind). > Also, just an additional (hopefully constructive) comment: I find all of these developments great, and I honestly think that you are doing an amazing job on performance and overall code improvement. However, as a non-C++-master myself, I'm just a little concerned of whether some advanced programming may become an entrance barrier to new additions to the community. As I wrote in the preamble of #789:; ""But please participate even if you never heard of these topics, your opinion about readability and ""developability"" of the code is important! I think the code-style should be accessible to people starting ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:2965,concurren,concurrent,2965,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['concurren'],['concurrent']
Performance,"eature_adapt branch`. 2. downloaded the Adaptive 2D NACA 0012 example (https://pyamg.saclay.inria.fr/pyamgexamples.html#2dnaca): `adap_NACA0012.cfg`, `mesh_NACA0012_inv.su2`, `NACA0012_ini.dat`. 3. added the following lines to the config:; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```. 4. run the following command: `$ python3 SU2_RUN/mesh_adaptation_amg.py -f adap_ONERAM6.cfg -n 8`. The response I have obtained is the following:; ```; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (30000, 60000, 120000); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : MACH; PYADAP_HMAX : 500.0; PYADAP_HMIN : 1e-9; PYADAP_HGRAD : 1.8; PYADAP_FLOW_ITER : (2999, 4999, 6999); PYADAP_ADJ_ITER : (2999, 4999, 6999); PYADAP_CFL : (10.0, 15.0, 20.0); PYADAP_RDG : NO. The ./adap folder was deleted. Generating GMF background surface mesh.; ## WARNING: MISSING SU2 MESH FILE KEYWORD: NCORNERS=.; Initial CFD solution is provided.; ```. As expected, a `./ADAP` folder was created, containing these docs: `amg_back_meshb`, `config_CFD.cfd`, `log.err`, `log.out` (sizes 0 byte), `mesh_NACA0012_inv.su2` (link to the mesh), `NACA0012_ini.dat` (link to the file.dat). Did I perform the procedure correctly? Or did I miss something?; If it is correct and complete, which file contains the adaptive mesh? How can I use it since there is no new .su2 file? . Thank you for the big help",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-737134105:1958,perform,perform,1958,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-737134105,2,['perform'],['perform']
Performance,"ed the linear solvers stay the same and routines that are light see more speedup than their arithmetic-intensive friends.; What is surprising to me is how intensive the convective residuals appear to be with only a 7% improvement, so surprising in fact, I do not think the above paints the full picture. Maybe the outlet bandwidth bottleneck (into the Jacobian matrix) is more important.; To put that do the test I switched to Euler-explicit time marching and repeated the measurements:; ![image](https://user-images.githubusercontent.com/38071223/63293351-d8010b80-c2bf-11e9-8135-2502eac1128e.png); Better, but not by much, which means upwind and viscous residuals computations might gain a lot from vectorization (SIMD). And like @economon mentioned even more if they are somehow fused together.; It also means the writes to CSysMatrix are relatively expensive, I think there are two-three reasons for it.; - We do a linear search on each Add/SubtractBlock - This could be replaced by a map.; - The Jacobian contributions are first written into a temporary block - Interleaving the writes with the computation could help mask latency.; - That temporary is not stored contiguously - Which makes it hard to vectorize the writes to CSysMatrix. **So what do I think should be tackled next?**; Hybrid parallelism (wait what?!) from messing about with this case (and more refined versions) it is clear the MG puts some limits on how many cores can be used before it stops being able to produce coarse grids, both in number and quality. Going to an MPI+Threads strategy would move that limit by one order of magnitude, giving us some robustness and performance for folks hoping to rely on strong scaling. I think I'll break it off here and keep my thoughts about SIMD and hybrid parallel for a later occasion (I have to do some ""real"" PhD work for a while) but please, if anyone has ideias, comments, corrections, suggestions, similar ongoing developments (specially)... I am all ears/eyes. Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-522730951:5081,latency,latency,5081,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-522730951,4,"['latency', 'perform']","['latency', 'performance']"
Performance,"ed to compute the gradient into a local variable and then ""transpose"" it when storing it, i.e.; ```c++; FltVec phiI[MAXNVAR], gradI[MAXNVAR][MAXNDIM];; ...; for(size_t iVar=0; iVar<nVar; ++iVar); {; auto flux = weight*(phiI[iVar]+phi.getVec(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); gradI[iVar][iDim] += a_ij[iDim]*flux;; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); grad(iPoint+k,iVar,iDim) = gradI[iVar][iDim][k];; ...; ```; Similarly when computing the gradient we need to first fetch/transpose it to be able to vectorize subsequent computations; ```c++; FltVec gradI[MAXNVAR][MAXNDIM];. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); gradI[iVar][iDim][k] = grad(iPoint+k,iVar,iDim);; ...; ```; Performance wise this is actually better than the SoA version (4% on gradients, 35% on limiters) as it also benefits from better locality, and it is only slightly (3%) worse than zig zag storage, especially when fusing limiters and gradients as the transposition of the gradient into storage is greatly amortised.; Regarding readability, the 3 nested loops can be moved to methods of the container, but we cannot get rid off the local variable (if we want vectorization that is). **We lose the ability to vectorize primitive variable updates efficiently with AoS** but currently that only accounts for 3% of the runtime and it is a memory bound operation therefore it would not gain much from vectorization anyway. On the subject of de-swizzling data remember I said the writes into CSysMatrix would be a bit weird, that is because each Jacobian contribution will be a ""matrix of short arrays"" that needs to be transformed into a short array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpos",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:14611,Perform,Performance,14611,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,1,['Perform'],['Performance']
Performance,"ed) adaptation instead of feature-based (just based on Mach or pressure) that Vic's fork used. Some things to note:; 1. It's currently only tested on Euler (it uses a Hessian of the Euler fluxes so it might work for NS/RANS, but probably not) (@WallyMaier and I also extended it to TNE2 in [feature_amgtne2](https://github.com/su2code/SU2/tree/feature_amgtne2) but the source terms are giving us trouble on adapted meshes); 2. It requires AD support since it uses the discrete adjoint to weigh the Euler flux Hessians; 3. I did all my testing with the AMG executable since pyAMG doesn't have all the features I currently need, but I just updated the branch to use pyAMG. I just tested the new interface with an airfoil and it seems to be working, but there might still be some bugs. You'll want to run mesh_adaptation_amg.py with the following options:; **ADAP_SIZES:** list of mesh complexities for each adaptive level. This is correlated to mesh size, but picking good values requires some playing around; **ADAP_SUBITE:** number of adaptations performed at each adaptive level. If set to (2,3) for example, it will run 2 adaptive iterations to try to reach ADAP_SIZES[0], and 3 iterations to try to reach ADAP_SIZES[1]; **ADAP_EXT_ITER:** number of iterations used by SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_RESIDUAL_REDUCTION:** order of magnitude residual reduction for SU2_CFD and SU2_CFD_AD for each adaptive level; **ADAP_SENSOR:** currently only works for GOAL; **ADAP_HMAX:** maximum cell size (m); **ADAP_HMIN:** minimum cell size (m); **ADAP_HGRAD:** gradation coefficient (>1) used by AMG during mesh smoothing. A larger value corresponds to larger allowed gradient in mesh size. E.g. for the RAE2822 I used:; ADAP_SIZES= (12800, 19200, 25600); ADAP_SUBITE= (2, 2, 2); ADAP_EXT_ITER= (9999, 9999, 9999); ADAP_RESIDUAL_REDUCTION= (6, 6, 6); ADAP_SENSOR= GOAL; ADAP_HMAX= 10.0; ADAP_HMIN= 1e-8; ADAP_HGRAD= 1.5. ![mesh](https://user-images.githubusercontent.com/19416354/599",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504675574:1311,perform,performed,1311,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504675574,1,['perform'],['performed']
Performance,"enced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main memory and forces cache coherency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** reduces temporal locality, edges are sorted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in general use more memory due to the intermediate variables and extra adjacency information needed. If the entire algorithm is transformed performance may suffer as some computations may have to be repeated.; However, some reductions are possible without intermediate variables, for example when assembling the system matrix for implicit sche",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:5164,cache,cache,5164,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['cache'],['cache']
Performance,"ents. Registers are at the very top of the memory hierarchy, for any computation to be performed data needs to be in registers.; An AVX register is 256 bits wide, that means 4 lanes of doubles or 8 of floats, AVX-512 (available in Xeon-Phi and SkylakeX processors) doubles the size. By GPU standards these are rookie numbers. **Why should we care about SIMD?**; Because it is the only way to use the whole silicon, by and large vector instructions have the same latency and throughput of their scalar versions, therefore speedups proportional to the number of SIMD lanes are possible in compute-bound code.; As we saw in #716 there is some of that in the numerics, do not expect 4x speed-ups though, low order unstructured FVM is known to be bandwidth-bound, vectorization helps a bit there too (instructions are also data that needs to travel to the CPU) (maybe for explicit schemes and 8 SIMD lanes, maybe). **Relation with data structures**; There is only one efficient way to move data between memory and registers, via `load` and `store` instructions (they do come in multiple flavors). That is, pointing to a memory location and reading or writing N elements of contiguous data.; It is not the only way, it is also possible to `gather` and `scatter` data. That is populating the register from non-contiguous locations and vice versa. This is about one order of magnitude slower, to the point where if the computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple s",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:1209,load,load,1209,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['load'],['load']
Performance,"eply.github.com>; Cc: Subscribed <subscribed@noreply.github.com>; Subject: [su2code/SU2] C++ compiler cannot create executables (#738). Dear developers,; I am trying to install SU2 in docker ubuntu 18.04 container so that I can easily share with partner. But I failed to compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, please?; config.log<https://github.com/su2code/SU2/files/3418183/config.log>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/S",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:1219,cache,cached,1219,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,1,['cache'],['cached']
Performance,"er the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear preconditioners. For now the objective is ""just"" not to loose performance while gaining flexibility.; - The performance of MPI+threads with 1 thread per rank will be worse than just MPI (no free lunches). With this [small case](https://github.com/su2code/SU2/files/3933059/small_case.zip) using 8 cores off a machine with two 2650v4 CPU, Intel MPI 2018 + GCC 8.2, the hybrid (2 ranks of 4 threads) approach is about 5% faster thank the MPI-only (8 ranks), I expect larger cases to have identical performance. ### How To; - Compile: Add -fopenmp to the compiler and linker arguments.; - Run: Set number of threads with env variable `OMP_NUM_THREADS` (eventually I will make that a command line parameter), for best performance set `OMP_WAIT_POLICY=ACTIVE` and beware of thread binding settings, use `mpirun --bind-to socket` or `mpirun --bind-to numa` never `core`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:2927,tune,tune,2927,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,10,"['perform', 'tune']","['performance', 'tune']"
Performance,"er thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** reduces temporal locality, edges are sorted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in general use more memory due to the intermediate variables and extra adjacency information needed. If the entire algorithm is transformed performance may suffer as some computations may have to be repeated.; However, some reductions are possible without intermediate variables, for example when assembling the system matrix for implicit schemes only the diagonal entries can result in race conditions, now it just so happens that each diagonal entry is equal to the negated corresponding column sum.; - **Atomics** are terrible for the performance of code that writes frequently to memory (i.e. bandwidth-bound code), they do not increase the memory footprint and so make sense for compute-bound code.; Bugs due to a missing atomic can be very hard to debug (but any race condition is). Coloring is what one sees most in the literature, and yet I lean towards gather-to-scatter. Fewer things can go wrong with it as it is easy to understand, one gets the maximum amount of parallelism. I will now take two familiar routines, computing gradients (Green-Gauss) and limiters, vectorize / parallelize them in different ways, and measure relative performanc",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:5967,perform,performance,5967,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['perform'],['performance']
Performance,"es and alternating digital trees (ADTs) in the past with very significant cost reductions) is going to be necessary in the very near future as people begin to run much larger models. Otherwise the preprocessing time for the searches can become excessive and dominant. If someone wanted to try using PCL for this, that would be quite interesting. Given the open source license, as Tom mentions, there should not be a problem interfacing with SU2. Now, an issue we faced in the ASC / PSAAP programs is that for extremely large calculations, the surface mesh (to be searched for minimum distance calculations) may actually not fit in a single processor. For that purpose we built parallel ADTs in the past (unfortunately in FORTRAN90) which replicate a small portion of the upper structure of the tree in all processors (without consuming a lot of memory) and then decomposed the tree into the various processors participating in the searches. While the parallel speedups / efficiencies were not earth-shattering, we did manage to overcome the memory bottlenecks. Does anyone know if PCL can also handle trees that are decomposed in parallel? Would PCL work with its own MPI communicator and automate the communication needed for the searches?. Cheers,. Juan. On Jun 5, 2016, at 4:06 AM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. Indeed, at the moment, we are relying on brute force searches. We have discussed using tree searches internally (and potentially have some reusable code available for this), but nothing has been implemented. It looks like pointcloud is released under a BSD license, which is very permissive. Do you have an implementation in SU2 already with this code embedded? It is also fairly straightforward for us to add hooks in the configure process to installed libraries on your system. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHubhttps://github.com/su2code/SU2/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-223861540:1127,bottleneck,bottlenecks,1127,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-223861540,1,['bottleneck'],['bottlenecks']
Performance,"everything at the top of a function is the C way of doing things, the C++ people whose books/blogs I've read and talks I've watched, recommend keeping namespaces (the inside of the loop being one) as clean as possible.; The only reason not to do this is if you explicitly want re-use, in the case of trivial types this does not improve efficiency, and in the context of OpenMP code it can create issues. Just like we need one numerics per thread, if we declare variables outside a parallel loop the default OpenMP behaviour is to consider them shared, and concurrent writes to shared locations = gdb and many bad words xD.; **EDIT:** I should mention here that if the parallel region is started before the variable declarations they become local and all is well, with the exception of class members, those will be shared most of the time (this is where const correctness can give some peace of mind). > Also, just an additional (hopefully constructive) comment: I find all of these developments great, and I honestly think that you are doing an amazing job on performance and overall code improvement. However, as a non-C++-master myself, I'm just a little concerned of whether some advanced programming may become an entrance barrier to new additions to the community. As I wrote in the preamble of #789:; ""But please participate even if you never heard of these topics, your opinion about readability and ""developability"" of the code is important! I think the code-style should be accessible to people starting a PhD (after they read a bit about C++...).""; I try to encapsulate and hide the tricky bits as much as possible to make the code as readable as possible, whether I am succeeding or not is for the community to decide, in all these PR's I've been pointing to the areas I think are trickier, if someone, anyone, feels they are absolutely incomprehensible please say something... either here, or trough slack, or by email (I think it shows in the commits) (I understand not everyone is keen o",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:3469,perform,performance,3469,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['perform'],['performance']
Performance,"f501dc168cd7ef4a4d1f81140a0959a9d4382128 fixes divergence of the `disc_adj_fsi` case among the parallel regression tests that occurred when using the CoDiPack type `RealReverseIndex` instead of `RealReverse`. Since the bug is not obvious from the commit and there might be a better way to fix this, let me put this up for discussion. In `CDiscAdjMultizoneDriver::SetRecording`, the tape is recorded part by part. The part of the code that is at fault involves three of them.; - `DEPENDENCIES -> OBJECTIVE_FUNCTION`: an index is last used on a right hand side; - `OBJECTIVE_FUNCTION -> TRANSFER`: the index is available for reuse and used on the left hand side; - `recording for a zone`: the index is used on a right hand side. In `CDiscAdjMultizoneDriver.cpp::ComputeAdjoints`, however, the `TRANSFER -> OBJECTIVE_FUNCTION` part of the evaluation is skipped in some cases. After the `recording for a zone` evaluation accumulated adjoints for the said index, the adjoint reset that would be performed in the skipped tape part is missing. Instead, the tape evaluation `DEPENDENCIES -> OBJECTIVE_FUNCTION` receives the adjoints for this index, which is wrong because the index is associated with a different primal variable in this part of the tape. Have there been issues regarding dependencies between tape parts previously? Are there mechanisms established that address such issues?. If someone wants to give it a try, I added a build option for the tape type in 183c3ca7a3235c8293cf2242c66c82d35a3922c7. You can switch to the index tape by calling meson with `-Dcodi-tape=JacobianIndex`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1294#issuecomment-859603733:990,perform,performed,990,https://su2code.github.io,https://github.com/su2code/SU2/pull/1294#issuecomment-859603733,1,['perform'],['performed']
Performance,"fig_amg['amg_log']); ; if os.path.exists(""current.itp.solb""):; os.remove(""current.itp.solb""); ; try :; su2amg.amg_call(config_amg); except:; raise RuntimeError , ""\n##ERROR : Call to AMG failed.\n""; ; if not os.path.exists(config_amg['mesh_out']):; raise RuntimeError , ""\n##ERROR : Mesh adaptation failed.\n""; ; if not os.path.exists(""current.itp.solb""):; raise RuntimeError , ""\n##ERROR AMG: Solution interpolation failed.\n"" ; ; #--- Convert output from Inria mesh format to su2; # Deal with markers; ; save_markers = mesh['markers']; del mesh; ; # Read Inria mesh; mesh = su2amg.read_mesh(config_amg['mesh_out'], ""current.itp.solb""); mesh['markers'] = save_markers; ; current_mesh = ""ite%d.su2"" % global_iter; current_solution = ""ite%d.dat"" % global_iter ; ; su2amg.write_mesh(current_mesh, current_solution, mesh); ; if not os.path.exists(current_mesh) or not os.path.exists(current_solution) :; raise RuntimeError , ""\n##ERROR : Conversion to SU2 failed.\n"". else : # Use pyAmg interface; ; ; #--- Load su2 mesh ; ; mesh = su2amg.read_mesh(current_mesh, current_solution); ; #--- Create sensor used to drive the adaptation; ; sensor_wrap = su2amg.create_sensor(mesh, adap_sensor); ; mesh['sensor'] = sensor_wrap['solution']; ; sys.stdout.write(' %s Generating adapted mesh using AMG\n' % pad_cpt); ; mesh_new = su2amg.amg_call_python(mesh, config_amg); ; #--- print mesh size; ; sys.stdout.write(' %s AMG done: %s\n' % (pad_nul, su2amg.return_mesh_size(mesh_new))); ; mesh_new['markers'] = mesh['markers']; mesh_new['dimension'] = mesh['dimension']; ; current_mesh = ""ite%d.su2"" % global_iter; current_solution = ""ite%d.dat"" % global_iter; ; su2amg.write_mesh(current_mesh, current_solution, mesh_new); ; #--- Run su2; ; log = 'ite%d.SU2'%global_iter; stdout_hdl = open('%sstdout'%log,'w') # new targets; stderr_hdl = open('%sstderr'%log,'w'); ; success = False; val_out = [False]; ; sys.stdout.write(' %s Running CFD\n' % pad_nul); ; try: # run with redirected outputs; ; sav_stdout, sys.stdou",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/606#issuecomment-504636643:10100,Load,Load,10100,https://su2code.github.io,https://github.com/su2code/SU2/issues/606#issuecomment-504636643,1,['Load'],['Load']
Performance,"fyi, the surface files output both a .csv and a .dat version, one of which; can be opened by tecplot (.dat) with everything you usually want for; visualization, while the other one contains the global index information; and values that are used in surface-based mesh deformation (and maybe other; tools, but that's the one I know of - I could see that format being useful; for prescribed surface properties as well). So one challenge that would be; faced with this change is how to make sure that both files are still; output. I would argue for switching to no suffixes where possible - less work for; new users, a little more work for us - one way we could get the best of; both worlds is by having the filenames written in the config without; suffix, but when loaded into su2 (and the python version of loading the; config file) store the variable with the appropriate suffix. That way if it; changes in the future it only has to be updated in one place, and all the; old config files would still work after a code change that alterred the; suffix.; -Heather. On Wed, Jul 30, 2014 at 11:05 AM, Brendan Tracey notifications@github.com; wrote:. > SU2 right now is inconsistent with how it does file names in the config; > file. For example, the restart file needs to be specified with a "".dat""; > suffix, but in the case of the surface files, the "".csv"" is added; > automatically. SU2 should be consistent across all filenames. Preferably,; > this will be fixed by having the user specify all suffixes. This is a tiny; > amount of additional work for the user, but it makes writing scripts that; > use the config file much easier. When the suffix is in the config file,; > it's easy to have python say ""open this file"". If the config file just has; > the base name of the file (no extension) then the knowledge of what suffix; > SU2 uses must be hard-coded into the follow-on script (which can then break; > later if SU2 changes).; > ; > ‚Äî; > Reply to this email directly or view it on GitHub; > https",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/41#issuecomment-50703399:762,load,loaded,762,https://su2code.github.io,https://github.com/su2code/SU2/issues/41#issuecomment-50703399,2,['load'],"['loaded', 'loading']"
Performance,"g an unsteady solution, to implementing numerical error estimates‚Ä¶and many others. It is important that the search / interpolation routines work when interpolating between grids where some points in the target grid may fall outside of the source grid and, therefore some notion of distance to the wall is needed. Fortunately, Edwin van der Weide had worked on an interpolation library that @sravya91 (who received her PhD yesterday at our graduation ceremony and is now working at NVIDIA) used in her work. Jayant Mukhopadhaya and Brian Munguia have also been testing/improving the library. Perhaps everyone can comment on current status and we can create a small task force to see what still needs to be done and who can do what?. Best,. Juan. On Jun 17, 2019, at 10:36 AM, Clark Pederson <notifications@github.com<mailto:notifications@github.com>> wrote:. I'm going to jump on this too. Is anyone working on solution interpolation (from one mesh to another)? @sravya91<https://github.com/sravya91>, are you still working on this? Did PR #672<https://github.com/su2code/SU2/pull/672> introduce any capabilities to address interpolation? This seems to be a common request from SU2 users: [1]<https://www.cfd-online.com/Forums/su2/213321-su2-solution-interpolation.html> [2]<https://www.cfd-online.com/Forums/su2/215920-use-coarse-grid-flow-solution-initial-solution-fine-grid.html>. I've used some pretty rough python scripts to do solution interpolation in the past, and it would be nice to have some SU2 C++ code that could perform the same task. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/466?email_source=notifications&email_token=AA5FFRGCPYI5KNVQZ7GB5F3P27DQZA5CNFSM4EB5RB6KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX35BDQ#issuecomment-502780046>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA5FFRA2PYIJFUNP7AHIS3DP27DQZANCNFSM4EB5RB6A>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/466#issuecomment-502783107:1687,perform,perform,1687,https://su2code.github.io,https://github.com/su2code/SU2/issues/466#issuecomment-502783107,1,['perform'],['perform']
Performance,"g global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for Machi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:5360,cache,cached,5360,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['cache'],['cached']
Performance,"he end of the loop we need to de-swizzle the flux to update the multiple indexes references by iPoint and jPoint, which are now short arrays of integers (this operation can be moved to the container, akin to `getVec` but I show it here for clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13:; vpmuludq ymm0, ymm4, ymm1; vmovq xmm15, rax; vmovapd ymm6, ymm11; mov rdx, rax; vpbroadcastq ymm15, xmm15; sal rdx, 5; add rax, 1; vpaddq ymm0, ymm0, ymm2; vpsllq ymm0, ymm0, 32; vpaddq ymm0, ymm5, ymm0; vmovdqa YMMWORD PTR [rbp-240], ymm0; vpaddq ymm0, ymm3, ymm0; vmovdqa YMMWORD PTR [rbp-208], ymm0; vpaddq ymm0, ymm15, ymm0; vmovdqa YMMWORD PTR [rbp-176], ymm0; vgatherqpd ymm15, QWORD PTR [rdi+ymm0*8], ymm6; vmovapd ymm0, YMMWORD PTR [rsi+rdx]; vfmadd213pd ymm0, ymm15, YMMWORD PTR [rbp-336]; vmovapd ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:8977,perform,performance,8977,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['performance']
Performance,"here is an interesting comparison between Eigen and LAPACK (written by the developers of Eigen‚Ä¶take it with a grain of salt) here<http://eigen.tuxfamily.org/index.php?title=FAQ#How_does_Eigen_compare_to_BLAS.2FLAPACK.3F>. If all they say is true, then Eigen would be a very good choice. If it is a bit exaggerated, then maybe LAPACK is better. Does anyone have experience with Eigen? Are there any reasons why LAPACK is better? Can the folks involved in FV and DG-FEM solvers talk to each other before making a decision?. While PETSc is a wonderful library (and parallel), I would hesitate to use it as the solution for the problem that we are trying to solve: it is not the easiest thing to compile and it is most definitely not lightweight. If one also wanted to replace Krylov-space solvers and preconditioners in SU2 the PETSc might make more sense‚Ä¶.but it still forces the developer to conform to their view of the world (including matrix setup and decomposition). Best,. Juan. On Jan 31, 2019, at 4:43 PM, Brian Mungu√≠a <notifications@github.com<mailto:notifications@github.com>> wrote:. @EduardoMolina<https://github.com/EduardoMolina> and I have discussed this over the past few weeks and are also in favor of using an external library. I don't have a strong opinion on the library we choose, but he seems to be in favor of PETSc<https://www.mcs.anl.gov/petsc/> from ANL, which has a 2-clause BSD license and is used by ADflow (formerly SUmb), among other solvers. Eduardo could probably provide more details. Another one that's come up in our discussions is HYPRE<https://computation.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods> from LLNL which has a GNU LGPL. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/643#issuecomment-459562945>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxJH0ySGyxvngq-G9YuG-H1HbBcYFks5vI42qgaJpZM4adbAo>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459566859:2255,scalab,scalable-linear-solvers-multigrid-methods,2255,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459566859,1,['scalab'],['scalable-linear-solvers-multigrid-methods']
Performance,"here's a trace from my ubuntu machine --. ```; ---------------------- Read Grid File Information -----------------------; Three dimensional problem.; 293290 points before parallel partitioning.; Performing linear partitioning of the grid nodes.; 494258 interior elements before parallel partitioning.; Distributing elements across all ranks.; Calling the partitioning functions.; Getting into adjacency function.; Building the graph adjacency structure.; 5 surface markers.; 10222 boundary elements in index 0 (Marker = aircraft).; 9712 boundary elements in index 1 (Marker = farfield).; 3382 boundary elements in index 2 (Marker = inner_nearfield).; 19738 boundary elements in index 3 (Marker = symmetry).; 3382 boundary elements in index 4 (Marker = outer_nearfield).; Calling ParMETIS...; Traceback (most recent call last):; File ""/home/app/SU2/install/bin/parallel_computation.py"", line 110, in <module>; main(); File ""/home/app/SU2/install/bin/parallel_computation.py"", line 61, in main; options.compute ); File ""/home/app/SU2/install/bin/parallel_computation.py"", line 88, in parallel_computation; info = SU2.run.CFD(config) ; RuntimeError:; Command = mpirun -n 12 /home/app/SU2/install/bin/SU2_CFD config_CFD.cfg; SU2 process returned error '15'; [ubuntu:8553] *** An error occurred in MPI_Wait; [ubuntu:8553] *** on communicator MPI COMMUNICATOR 3 DUP FROM 0; [ubuntu:8553] *** MPI_ERR_TRUNCATE: message truncated; [ubuntu:8553] *** MPI_ERRORS_ARE_FATAL: your MPI job will now abort; --------------------------------------------------------------------------; mpirun has exited due to process rank 9 with PID 8554 on; node ubuntu exiting improperly. There are two reasons this could occur:. 1. this process did not call ""init"" before exiting, but others in; the job did. This can cause a job to hang indefinitely while it waits; for all processes to call ""init"". By rule, if one process calls ""init"",; then ALL processes must call ""init"" prior to termination. 2. this process called ""init"", bu",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/159#issuecomment-75485283:195,Perform,Performing,195,https://su2code.github.io,https://github.com/su2code/SU2/issues/159#issuecomment-75485283,1,['Perform'],['Performing']
Performance,"his would require adding an extra set of config options for reading in a scale/rotate/translate options for SU2_MSH. The nice thing here is that we keep the intent separate, i.e., only design variables are listed with the other design variables while the mesh transformations are elsewhere. A different, possibly simpler way would be to just create separate names for these two types in the list of available options so that there is no ambiguity. Any thoughts?. On Aug 16, 2015, at 9:21 AM, Heather Kline <notifications@github.com<mailto:notifications@github.com>> wrote:. Some illustrative images/output in case my description was hard to understand:; [image]https://cloud.githubusercontent.com/assets/5167760/9294050/52a764b2-440f-11e5-8681-b68318da0ce7.png. SU2_DEF output when only ""airfoil"" marker included:. ------------------------- Surface grid deformation ----------------------; Performing the deformation of the surface grid. ----------------------- Volumetric grid deformation ---------------------; Performing the deformation of the volumetric grid. # FGMRES residual history. # Residual tolerance target = 4.14044e-11. # Initial residual norm = 15.8102. ```; 0 1; 50 2.17385e-06; 100 1.08998e-10; ```. # FGMRES final (true) residual:. # Iteration = 105: |res|/|res0| = 3.50764e-11. Non-linear iter.: 1/1. Linear iter.: 105. Min. area: 4.1019e-08. Error: 5.54565e-10. ----------------------- Write deformed grid files -----------------------; Merging grid connectivity.; Merging grid coordinates.; Writing volume mesh file.; Writing surface mesh file.; Writing .su2 file.; Adding any FFD information to the SU2 file. Completed in 1.039217 seconds on 1 core. ------------------------- Exit Success (SU2_DEF) ------------------------. [image]https://cloud.githubusercontent.com/assets/5167760/9294056/7be9439a-440f-11e5-862f-742246ef1565.png; SU2_DEF: output when deforming with all markers included:. ------------------------- Surface grid deformation ----------------------; Performing ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/187#issuecomment-132065067:1697,Perform,Performing,1697,https://su2code.github.io,https://github.com/su2code/SU2/pull/187#issuecomment-132065067,1,['Perform'],['Performing']
Performance,"hort array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 = T0.widePermuteLo(T2); C1 = T1.widePermuteLo(T3);; C2 = T0.widePermuteHi(T2); C3 = T1.widePermuteHi(T3);. (Array4d(&bjj[0][k])-C0).store(&bjj[0][k]);; (Array4d(&bjj[1][k])-C1).store(&bjj[1][k]);; (Array4d(&bjj[2][k])-C2).store(&bjj[2][k]);; (Array4d(&bjj[3][k])-C3).store(&bjj[3][k]);. C0.store(&bij[0][k]); C1.store(&bij[1][k]);; C2.store(&bij[2][k]); C3.store(&bij[3][k]);; ```; I am showing this because it represents a readability worst case in terms of manipulating SIMD types, we might end up with one or two of these to get the best performance possible but they will always be encapsulated and deep in kernel-type areas of SU2 that are almost never touched. ## Conclusions; - Over 45% faster CSysMatrix updates by mapping off-diagonal blocks to edges and diagonal blocks to points.; - Colouring is the best strategy for hybrid parallelism of compute-heavy edge loops and matrix updates as it interleaves compute and memory operations.; - AoS storage should be kept to avoid significant loss of performance in compute-light edge loops due to poor locality of SoA storage.; - Major implication of AoS is on point loops where some data needs to be fetched (transposed) into local variables for effective vectorization.; - An intermediate storage scheme, AoSoA, can provide both good locality and vectorization of point loops, however it requires that data be accessed via special iterators and scalar code based on it would have poor performance. Next I will try to estimate how much we can gain for a ""realistic"" numerics class.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:17010,perform,performance,17010,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,4,['perform'],['performance']
Performance,"iVar, lim*(lim+2.0)/(lim*lim+lim+2.0));; }; }; }; ```; In terms of algorithm, for each point we find the min and max neighbor values and the min (negative) and max (positive) projections, those are then combined in a final `min(2, max/max, min/min)` to which the limiter function is applied (this would also be applicable to Venkatakrishnan-[Wang] limiters).; This is equivalent to the edge-loop, if statements are not required as due to cells being closed, if the positive projection is not zero, the negative one will also not be zero, therefore it is correct to always evaluate both ratios.; This algorithm only needs min and max neighbors as small local variables instead of large global ones due to the way those values are determined. This is where the memory from the extra adjacency information is recovered. Like @economon said, fusing the gradient kernel with the limiter kernel is trivial with these point loops, and I do not think it affects readability much since one can clearly tell ""what is what"" (I will not put it here but it really is a matter of copy paste), including the boundaries could be a bit more challenging, but I will give performance number nevertheless. **Performance summary**. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.25 | 2.0 |; | **Speed 4 cores** | 2.45 | 2.7 | 4.5 | 7.0 |. The basic point version does not lose to edge based because, contrary to gradients, it does not require duplication of computations while benefiting from sequential access to gradients.; Again the point-based implementation does really well in parallel, limiters are more compute intensive and so the scaling is almost perfect.; For reference, limiters are 1.9 times more expensive to compute than gradients with the reference edge version. With point loops, SIMD, and in parallel, gradients and limiters cost the same. If we consider the combined cost of gradients and limiters, and co",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:10182,perform,performance,10182,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['perform'],['performance']
Performance,"ig'; Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Project name: SU2; Project version: 7.0.6 ""Blackbird""; Using 'CC' from environment with value: '/usr/bin/gcc'; Using 'CXX' from environment with value: '/usr/bin/g++'; Using 'CC' from environment with value: '/usr/bin/gcc'; C compiler for the host machine: /usr/bin/gcc (gcc 10.2.0 ""gcc (GCC) 10.2.0""); C linker for the host machine: /usr/bin/gcc ld.bfd 2.35.1; Using 'CXX' from environment with value: '/usr/bin/g++'; C++ compiler for the host machine: /usr/bin/g++ (gcc 10.2.0 ""g++ (GCC) 10.2.0""); C++ linker for the host machine: /usr/bin/g++ ld.bfd 2.35.1; Host machine cpu family: x86_64; Host machine cpu: x86_64; Program python3 found: YES (/usr/bin/python3); Found pkg-config: /usr/bin/pkg-config (1.7.3); Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Run-time dependency mpich found: YES 3.3.2; Dependency mpich found: YES 3.3.2 (cached); Message: Extracting boost ...; Using 'PKG_CONFIG_PATH' from environment with value: '/usr/local/mpich-3.3.2/lib/pkgconfig'; Run-time dependency openblas found: YES 0.3.10; Program swig found: YES (/usr/bin/swig); Message: Using mpi4py from /home/slimshady/.local/lib/python3.8/site-packages/mpi4py/include; Dependency python found: YES (pkgconfig); Program install.sh found: YES (/bin/sh /home/slimshady/UserPackages/SU2_HOME/SU2_PY/pySU2/install.sh); Message: -------------------------------------------------------------------------; | ___ _ _ ___ |; | / __| | | |_ ) Release 7.0.6 ""Blackbird"" |; | \__ \ |_| |/ / |; | |___/\___//___| Meson Configuration Summary |; | |; -------------------------------------------------------------------------; ; Option Value; ---------------------; TecIO: true; CGNS: true; AD (reverse): true; AD (forward): true; Python Wrapper: true; Intel-MKL: false; OpenBlas: true; PaStiX: false; Mixed Float: false. Please be sure to add the $SU2_HOME and $SU2_RUN environment vari",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137:2304,cache,cached,2304,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-721366137,1,['cache'],['cached']
Performance,"im; ++iDim); grad.setVec(iPoint,iVar,iDim,; grad.getVec(iPoint,iVar,iDim)/volume.getVec(iPoint));; }; }; ```; I think this is just as readable especially considering that in SU2 we always need to use some Set/Get/Add/Sub method to update a variable, the difference is that here those methods have overloads to operate on small fixed size vectors. The speedup is **1.35** (i.e. 35% faster than edge-based reference) note that the improvement relative to scalar-point-based is only 1.6, those pesky gathers... The loop advances `SIMDLEN` points on each iteration, yet there are no pragmas and small simd-loops in sight, in good C++ fashion that trickery has been encapsulated in a ""simd-friendly"" class.; Such a class can look something like this:; ```C++; template<class T, size_t N>; class Array; {; #define FOREACH for(size_t k=0; k<N; ++k); public:; enum : size_t {Size = N};; enum : size_t {Align = N*sizeof(T)};; private:; // fixed size and aligned array of internal data, naturally maps to a SIMD register; alignas(Align) T vals_[N];; /*; * Some helper methods go here; */; public:; // **** CONSTRUCTORS **** //; // We want to be able to construct this type from single scalars,; // a memory location from which we LOAD data,; // or a memory location and some offsets from which we GATHER data.; // In addition to the ""normal"" constructors. // scalar broadcasting ctor; STRONGINLINE Array(T x) {bcast(x);}. // loading ctor; STRONGINLINE Array(const T* ptr); {; #pragma omp simd aligned(ptr:Align); FOREACH vals_[k] = ptr[k];; }; // gathering ctor; template<class U>; STRONGINLINE Array(const T* base_ptr, const U& offsets); {; #pragma omp simd; FOREACH vals_[k] = base_ptr[offsets[k]];; }; /*; * Other traditional constructors (default, copy-ctor, move-ctor, etc) go here; */. // **** ACCESSORS **** //; STRONGINLINE T& operator[] (size_t k) {return vals_[k];}; STRONGINLINE T operator[] (size_t k) const {return vals_[k];}. // **** MATH OPERATORS **** //; STRONGINLINE Array& operator= (const A",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:7269,LOAD,LOAD,7269,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,1,['LOAD'],['LOAD']
Performance,"irst;; size_t jPoint = connectivity[iEdge].second;; ```; Apologies for the macro but it is just to illustrate that if we re-sort edge data after coloring the edge index is the loop index, otherwise the edge indices for each color need to be stored in a separate array.; Note that for each edge loop we first loop over colors, then over same-color edges, it is this inner loop that can run in parallel in chunk sizes that are multiple of the group size considered during coloring. There is some runtime cost on entry to every #omp parallel section, with coloring we enter one such section once by color. I mentioned in the introduction coloring reduces locality and therefore performance, here is the effect of color group size on the execution time of the scalar code on one thread:; ![image](https://user-images.githubusercontent.com/38071223/64686801-2e0d3d00-d481-11e9-82a0-c56e5554cd83.png); The hassle-free option of not sorting by color ""never"" recovers the performance of the base algorithm, things are even worse for the SIMD version where even at group size of 8192 with re-sorting the slowdown is 14%. Running the edge-loop version on 4 cores (8192 group + sorting) we get speedups (relative to reference) of **1.98** and **2.04** for the scalar and SIMD versions respectively (yes I quadruple checked).; If you are keeping track of the number two things should surprise you, the first is that there is no difference between scalar and SIMD now (the vector instruction are still there though), the second is that 4 cores give only a 2x speedup. The reason for both is: the implementation is very memory-bound, and so throwing more compute at it, either in the form of more cores or more lanes, does not help much. This is the 4 core summary:. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed** | 2.0 | 2.0 | 3.8 | 2.8 |. I think the point-based versions scale better because they are a bit less memory-bound as they write ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:14089,perform,performance,14089,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['perform'],['performance']
Performance,"ix updates without colouring by setting only the off-diagonal coefficients and then setting the diagonal entries to the column sum.; It turns out that this is worse (by about 10%), maybe if the matrix were symmetric (row sum) but a column sum accesses blocks very far apart. Also we want to interleave compute and load/stores as much as possible to allow the CPU pipelining magic to mask the latency of the latter (even if it looks like you can only write the block after it is computed, CPU's have all kinds of buffers that allow the next loop iteration to begin while data is in flight). **Therefore colouring is the way to go.**. _Note: With vectorized numerics we insert blocks for 4 or 8 edges into the matrix at a time, the data for those inserts will be in a slightly weird format, which will make `SparseMatrix::updateBlocks` a bit harder on the eye, more on that later._. ## MUSCL Reconstruction; The MUSCL reconstruction, characteristic of upwind schemes, is the simplest building block to show the (negative) implications of storing the data as structures of arrays (SoA) on the performance of some operations.; Here is the most basic numerics you can think of, reconstruct and average (the dummy matrix loop was to benchmark the writes this is to benchmark the reads); ```c++; void computeResidual(size_t nVar,; size_t nDim,; const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& coords,; const Matrix& phi,; const VectorOfMatrix& grad,; const Matrix& limiter,; Matrix& residual); {; residual.setZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; size_t iEdge = edgeIdx[k];; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. double d_ij[MAXNDIM];; for(size_t iDim=0; iDim<nDim; ++iDim); d_ij[iDim] = 0.5*(coords(jPoint,iDim)-coords(iPoint",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:5797,perform,performance,5797,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['performance']
Performance,"k];}; STRONGINLINE T operator[] (size_t k) const {return vals_[k];}. // **** MATH OPERATORS **** //; STRONGINLINE Array& operator= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] = rhs.vals_[k];; return *this;; }. STRONGINLINE Array& operator+= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] += rhs.vals_[k];; return *this;; }; STRONGINLINE Array operator+ (const Array& rhs) const { return Array(*this)+=rhs; }; ; /*; * Many other operators go here.; */; };. // Common math function overloads; template<class T>; STRONGINLINE T vmax(const T& a, const T& b); {; T res;; #pragma omp simd; for(size_t k=0; k<T::Size; ++k); res[k] = (a[k]>b[k])? a[k] : b[k];; return res;; }. #undef FOREACH; ```; There are other (better) ways to do this, for example using [x86 intrinsics](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=2273,2273,2436,2943,2436,2943,610,1788,2942) (in header `<x86intrin.h>`), register types instead of arrays, and a boat load of template meta-programming (I'm guessing) there are professional libraries for this.; This quickly-hacked-together code is compatible with custom types, portable, and seems to do the trick. To pull this off we do not need to have `Vector` or `Matrix` of this class, the underlying type for those data structures is still `double`, only the `getVec` type methods need to convert on the fly to the SIMD type, for example:; ```C++; // use the ""pointer ctor"" to return an array starting at ""row0""; Array<double,4> Matrix<double>::getVec(size_t row0, size_t col) const {; return Array<double,4>(&data_[row0+col*rows_]);; }. // use the ""gather ctor"" to return an array with the indices in ""rows""; template<class U>; Array<double,4> Matrix<double>::getVec(const U& rows, size_t col) const {; return Array<double,4>(&data_[col*rows_], rows);; }; ```; After inlining those copies get optimized away.; Although the stored type, and ""scalar interface"" of the containers do not need to change, the storage order of the data d",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:8890,load,load,8890,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['load'],['load']
Performance,"l is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear preconditioners. For now the objective is ""just"" not to loose performance while gaining flexibility.; - The performance of MPI+threads with 1 thread per rank will be worse than just MPI (no free lunches). With this [small case](https://github.com/su2code/SU2/files/3933059/small_case.zip) using 8 cores off a machine with two 2650v4 CPU, Intel MPI 2018 + GCC 8.2, the hybrid (2 ranks of 4 threads) approach is about 5% faster thank the MPI-only (8 ranks), I expect larger cases to have identical performance. ### How To; - Compile: Add -fopenmp to the compiler and linker arguments.; - Run: Set number of threads with env variable `OMP_NUM_THREADS` (eventually I will make that a command line parameter), for best performance set ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:2645,Perform,Performance,2645,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,1,['Perform'],['Performance']
Performance,"lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. Name : lapack; Version : 3.9.0-2; Description : Linear Algebra PACKage; Architecture : x86_64; URL : https://www.netlib.org/lapack; Licenses : custom; Groups : None; Provides : None; Depends On : blas; Optional Deps : None; Required By : arpack qrupdate suitesparse; Optional For : None; Conflicts With : None; Replaces : None; Installed Size : 7.03 MiB; Packager : Antonio Rojas <arojas@archlinux.org>; Build Date : Sun 24 Nov 2019 04:13:58 PM IST; Install Date : Sat 22 Feb 2020 01:05:19 PM IST; Install Reason : Installed as a dependency for another package; Install Script : No; Validated By : Signature. Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. ```. I tried it without enabling openblas, it did move forward but broke further later in the build with a ridiculously long error message. For the sake of readability I am attaching a [logfile](https://github.com/su2code/SU2/files/4652822/su2_build_NoOpenBlas.log) here. For obvious reasons I think this is because of the `-Denable-pywrapper=true` flag. What is the problem here? I want to build SU2 with all these options available. I am also thinking maybe I s",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631053271:1636,optimiz,optimized,1636,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631053271,1,['optimiz'],['optimized']
Performance,"metric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writes to 2 locations (gather / scatter access pattern, not to be confused with the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:3175,load,load,3175,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['load'],['load']
Performance,"n let it grow with the existing; mechanism of community contributions with approvals. Your list is very fine; for beginning. However I think we should strive to enrich it with 3D and; time dependent cases. I hope to be able to be in the loop and contribute to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familiar with canonical CFD flows that are used in these cases. But it; > would be great to have other cases, such as Turbo-machinary or FSI cases,; > that show the full breadth of SU2's abilities. This is by no means an; > exhaustive list:; >; > 1. Zero Gradient Flat Plate; > 2. 2D and 3D Bump in Channel; > 3. Asymmetric Diffuser; > 4. Backward facing step; > 5. Unsteady Square cylinder; > 6. NACA0012; > 7. NACA4412 Trailing Edge Seperation; > 8. Joukowski Airfoi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:1455,perform,performance,1455,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,1,['perform'],['performance']
Performance,"nce in convergence and result, which I think is due to the difference in regime. The convergence of the direct solution is: ; ![image](https://user-images.githubusercontent.com/21182966/28309520-e967cbc6-6ba9-11e7-9233-9c9f69db126b.png). The convergence of the adjoint solution is:; ![image](https://user-images.githubusercontent.com/21182966/28308831-b937bf76-6ba7-11e7-9108-e8a2ab959b74.png). Then I noticed a difference in SENS_GEO (which is the second term of the upper equation, right?) between compressible and incompressible. . ![image](https://user-images.githubusercontent.com/21182966/28310143-bb28c42a-6bab-11e7-8c14-8409b6b12027.png). So if the scale is adjusting current step size the step of dC and SENS_GEO represents the second term, then the SENS_GEO would change when the scale is changed. But this is not the case for incompressible and compressible. . In short, the only noticeable change, due to scaling, occurs in deformation folder of DSN_002. But this is after the optimization step, which is really confusing. Scaling adjusts the current step size and because it can not find a sufficient decrease it is halving the dv_value. But then one should expect different values in the adjoint folder for different scale factors, right?. I hope you can use this information and can tell me whether it is a correct behavior of the optimizer. I should also note that I did not make use of constraints, just as in the test case. I read that the optimizer will switch from optimization procedure. I think this should not matter because of the test case. . I attached also the configure files (compressible (working, scale= 0.01) and incompressible (not working, scale =0.01)) and the mesh file, which is in both cases the same file. [compressible_cfg.txt](https://github.com/su2code/SU2/files/1155421/compressible_cfg.txt); [incompressible_cfg.txt](https://github.com/su2code/SU2/files/1155427/incompressible_cfg.txt); [mesh_300_su2.txt](https://github.com/su2code/SU2/files/1155430/mesh_",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/409#issuecomment-316018103:3196,optimiz,optimization,3196,https://su2code.github.io,https://github.com/su2code/SU2/issues/409#issuecomment-316018103,2,['optimiz'],['optimization']
Performance,"nd of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_40960_split.meshb; % Invert the background mesh orientation; % Sometimes required for 3D meshes, since AMG doesn't perform; % a check that the orientation of the background and foreground; % meshes match; PYADAP_INV_BACK= NO; % Don't use ridge detection if corners specified; PYADAP_RDG= NO; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:1328,perform,performed,1328,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,2,['perform'],"['perform', 'performed']"
Performance,"nd off-diagonal blocks for each edge.; Here is a dummy numerics loop that does nothing else but setting blocks in the matrix (with colouring).; ```c++; void testLoop1(const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; double** blk_i, double** blk_j,; SparseMatrix& matrix); {; matrix.setZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; size_t iEdge = edgeIdx[k];; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. matrix.addBlock(iPoint, iPoint, blk_i);; matrix.addBlock(iPoint, jPoint, blk_j);. matrix.subBlock(jPoint, jPoint, blk_j);; matrix.subBlock(jPoint, iPoint, blk_i);; }; }; ```; This and a few more memory reads is why we can't have nice things, i.e. massive speedups with vectorization. Believe it or not this loop sets ~75% of the maximum speed at which the residual edge loop can run (bandwidth bottleneck).; Don't be sad though, we can make a few things about it better:; - We can store the blocks we insert contiguously so the writes can be vectorized (this would be done using a container so that we still have `(i,j)` access syntax);; - On each insertion we have to first look for the block by traversing the `colInd` (column index) array, we can instead map the diagonal blocks to the corresponding points and the off-diagonal blocks to the edge (remember we insert ""by the edge"").; - We can fuse numerics (possibly using the [decorator](https://en.wikipedia.org/wiki/Decorator_pattern) pattern) so that we write to the matrix only once per iteration, which means we only need to clear the diagonal blocks and not the entire matrix because we can **set** the off-diagonals instead of **updating** them. Assuming these modification our dummy loop becomes; ```c++; void testLoop2(const vector<size_t>& colorStart,; const vector<size_t>& edgeId",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:2432,bottleneck,bottleneck,2432,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['bottleneck'],['bottleneck']
Performance,"ne, the ideal step size is wildly varying depending on the optimization objectives/constraints, scales of the geometry, and types/numbers of design variables that are being used. You have to play this game of scaling the objectives and constraints in different ways to coax out the ideal first step. In my limited testing, the value of 1E-6 for the gradient norm seems to work well for 3D RANS aerodynamic shape optimizations of an aircraft wing when using FFD control points to change the shape of the wing. This is a specific use case that was the subject of a lot of the underlying research that resulted in the shape optimization framework. Which is likely why I have had good results using this rule of thumb. . > Is 1E-6 a good rule? Or is it just a decent starting point, and values very different from 1E-6 are used in practice? Also, if this is ""a good rule,"" then shouldn't we just automatically rescale the problem after the first design iteration?. Scaling in an optimization problem can be pretty frustrating and time consuming. Anecdotally, I have been using @economon 's suggestions of leaving everything else as default (value of 1) and only playing with the objective and constraint scalings to get a good first step size. As mentioned before, this step size is of different values for different problems, which is why it is difficult to come up with universal scalings that would work for most problems. But I am hoping to address some of these scaling issues in #923 . . I haven't really found much good literature on this problem, but I might be looking in the wrong places. Recommendations are welcome. . A big boon is having a robust solver. If it can handle flow simulations with odd geometries, you need to do less parameter tweaking. The reason you need good scaling is so that the optimizer doesn't explore difficult parts of the design space. If the simulation diverges, the optimization fails. Some intelligent handling of simulation divergences would also help the optimiz",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616810829:1333,optimiz,optimization,1333,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616810829,1,['optimiz'],['optimization']
Performance,"nother place (or lab server) and in Github we only had the config files, unfortunately we checked that for some users it was frustrating to download the config files and then go to another place to download the grids. From our practical point of view, the current setting is ideal to run the regression tests. But we are open to any change that benefits the SU2 users/developers community. . Now, it is very easy to download and modify the TestCases (keep in mind that the options in the config files change frequently) but, the price to pay is a large GitHub repository that it is difficult to download if you don‚Äôt have a good internet connection. Anyway, I think you are coming to Stanford in one week, it would be great to chat with you. We would love to have you and your group as a SU2 developer/user. Looking forward to meeting you and thanks for testing SU2. Best; Francisco. ## . Dr. Francisco Palacios; Engineering Research Associate at Stanford University; AIAA Senior Member, SIAM Member, and SU2 lead developer; Editorial Board Member for Scientific Report (Nature Publishing Group); Intel Parallel Computing Center. Personal webpage: http://adl.stanford.edu/people/fpalacios.html; SU2 webpage: http://su2.stanford.edu/. Department of Aeronautics and Astronautics; Durand Building. Room 357; Stanford University; Stanford CA 94305; United States. On Feb 3, 2015, at 1:32 PM, Lorena A. Barba notifications@github.com wrote:. > And why is your Test repo so large?; > Perhaps some data files would be happier living elsewhere?; > ; > I'm thinking that if your Tests load large mesh files, for example, these mesh files could be placed in a data repository (like Figshare, Data Dryad, Zenodo), and your configuration files for each test could fetch the data it needs. I would imagine that the input data does not change often (or perhaps ever?) and one permalink and DOI is better suited for data than a version-controlled repo.; > ; > ‚Äî; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72909446:1860,load,load,1860,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72909446,1,['load'],['load']
Performance,"ocations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main memory and forces cache coherency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** reduces temporal locality, edges are sorted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in general use more memory due to the intermediate variables and extra adjacency information needed. If the entire algorithm is transformed performance may suffer as some computations may have to be repeated.; However, some reductions are possible without intermediate variables, for example when assembling the system matrix for implicit schemes only the diagonal entries can result in race conditions, now it just so happens that each diagonal entry is equal to the negated corresponding column sum.; - **Atomics** are terrible for the performance of code that writes freque",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:5423,perform,performance,5423,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['perform'],['performance']
Performance,"of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE']; Found pkg-config: D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE (0.28); Determining dependency 'ompi-c' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-c` -> 1; ; mpicc binary missing from cross or native file, or env var undefined.; Trying a default mpicc fallback at mpicc; mpicc found: NO; Run-time dependency MPI for c found: YES; Pkg-config binary for MachineChoice.HOST is cached.; Determining dependency 'ompi-cxx' with pkg-config executable 'D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'; PKG_CONFIG_PATH: ; Called `D:\Programme\pkg-config-lite-0.28-1_bin-win32\pkg-config-lite-0.28-1\bin\pkg-config.EXE --modversion ompi-cxx` -> 1; ; mpic++ binary missing from cross or native file, or env var undefined.; Trying a default mpic++ fallback at mpic++; Trying a default mpic++ fallback at mpicxx; Trying a default mpic++ fallback at mpiCC; mpic++ found: NO; Run-time dependency MPI for cpp found: NO (tried pkgconfig and config-tool); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe D:/Programme/SU2-7.1.1/meson_scripts/check_dir.py boost; --- stdout ---; ; --- stderr ---; ; ; Message: Boost sources found.; Program swig found: YES (D:\Programme\swigwin-4.0.2\swig.EXE); Running command: C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe -c import m",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:6375,cache,cached,6375,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['cache'],['cached']
Performance,"orted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-fetcher.; This can be mitigated to some extent by coloring groups of edges, groups of edges of the same color can be processed simultaneously, but within each group edges need to be processed serially. However grouping will reduce how much parallelism can be exploited within each color.; - **Gather to scatter** will in general use more memory due to the intermediate variables and extra adjacency information needed. If the entire algorithm is transformed performance may suffer as some computations may have to be repeated.; However, some reductions are possible without intermediate variables, for example when assembling the system matrix for implicit schemes only the diagonal entries can result in race conditions, now it just so happens that each diagonal entry is equal to the negated corresponding column sum.; - **Atomics** are terrible for the performance of code that writes frequently to memory (i.e. bandwidth-bound code), they do not increase the memory footprint and so make sense for compute-bound code.; Bugs due to a missing atomic can be very hard to debug (but any race condition is). Coloring is what one sees most in the literature, and yet I lean towards gather-to-scatter. Fewer things can go wrong with it as it is easy to understand, one gets the maximum amount of parallelism. I will now take two familiar routines, computing gradients (Green-Gauss) and limiters, vectorize / parallelize them in different ways, and measure relative performance to illustrate some of these key points introduced here. There will be C++ snipets and there will be some x86 assembly too :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:6214,race condition,race conditions,6214,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,8,"['perform', 'race condition']","['performance', 'race condition', 'race conditions']"
Performance,"ot be called with the discrete adjoint solver. `CAdjEulerSolver::SetIntBoundary_Jump ` is only called by `CAdjFluidIteration::Preprocess` which should happen during a discrete adjoint run (but as far as i understand you that is not happening currently). All `CAdj<sth>` things are related to the continuous adjoint and `CDiscAdj<sth>` to the discrete adjoint.; > Boundary conditions (this one being internal) need to be explicitly derived and set in the continuous adjoint but not in the discrete adjoint so your understanding was going in the right direction. (Although I am no expert in cont.adj. things either :) ). So, it sounds like I don't need to care about it as long as I use discrete adjoint then. > > VENKATAKRISHNAN limiter: With MARKER_NEARFIELD defined, this limiter causes strange pressure disturbance near the nearfield boundary. I tried to find a cause but no luck so far. (That's why I'm using VAN_ALBADA_EDGE in the test cases.); > ; > you can try maybe to tune the `VENKAT_LIMITER_COEFF` in the cfg, but I have no better hint for now. I forgot to mention. I have tested VENKATAKRISHNAN limiter with v6. I am hoping that it is fixed by now after reading [this discussion](https://github.com/su2code/SU2/issues/917). > > Bad match for point 47742. Nearest donor distance: 3.6066950142e+00.: Lots of this message shows up. I don't know what this message is for. It doesn't seem to cause any real issues, so I've been ignoring them.; > ; > That is certainly sth I would not ignore :) Does this occur with the case you added (i.e. no periodic bc)? Does it also occur when you run single core? maybe it is matching between internal MPI boundaries. In that case yould can add RANK to the VOLUME_OUTPUT and take more and more cores and see when it fails -> look at the Rank boundaries and maybe you notice sth. Yes, it occurs with the case I added. I haven't tested with single core. As far as I see in `CPhysicalGeometry::MatchNearField`, the code looks for a nearest point to a point on",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1329#issuecomment-885501847:1314,tune,tune,1314,https://su2code.github.io,https://github.com/su2code/SU2/pull/1329#issuecomment-885501847,1,['tune'],['tune']
Performance,"p size is wildly varying depending on the optimization objectives/constraints, scales of the geometry, and types/numbers of design variables that are being used. You have to play this game of scaling the objectives and constraints in different ways to coax out the ideal first step. In my limited testing, the value of 1E-6 for the gradient norm seems to work well for 3D RANS aerodynamic shape optimizations of an aircraft wing when using FFD control points to change the shape of the wing. This is a specific use case that was the subject of a lot of the underlying research that resulted in the shape optimization framework. Which is likely why I have had good results using this rule of thumb. . > Is 1E-6 a good rule? Or is it just a decent starting point, and values very different from 1E-6 are used in practice? Also, if this is ""a good rule,"" then shouldn't we just automatically rescale the problem after the first design iteration?. Scaling in an optimization problem can be pretty frustrating and time consuming. Anecdotally, I have been using @economon 's suggestions of leaving everything else as default (value of 1) and only playing with the objective and constraint scalings to get a good first step size. As mentioned before, this step size is of different values for different problems, which is why it is difficult to come up with universal scalings that would work for most problems. But I am hoping to address some of these scaling issues in #923 . . I haven't really found much good literature on this problem, but I might be looking in the wrong places. Recommendations are welcome. . A big boon is having a robust solver. If it can handle flow simulations with odd geometries, you need to do less parameter tweaking. The reason you need good scaling is so that the optimizer doesn't explore difficult parts of the design space. If the simulation diverges, the optimization fails. Some intelligent handling of simulation divergences would also help the optimization framework.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/733#issuecomment-616810829:2165,optimiz,optimizer,2165,https://su2code.github.io,https://github.com/su2code/SU2/issues/733#issuecomment-616810829,3,['optimiz'],"['optimization', 'optimizer']"
Performance,"p team developing the SU2. I think moving the main tutorials to the main repository is a good idea. We; declared to contribute some validation cases and written tutorials and; having this in main repository will ease the process of adding/modifying; the docs to a simple pull request. I also have a suggestion regarding the Test Cases and Tutorial files. I; apologize if this is the wrong place or this has been discussed already,; but still will give it a try:; - Test cases folder from SU2/su2code repository shall be moved to the; SU2/TestCases repository. Rationale: this makes one repository to store the; test case *.cfg files and mesh files.; - There shall be a TestCases/Mesh folder to store all the meshes needed for; Test Cases files, without subdivisions for RANS, Euler etc subfolders.; Considering that multiple test cases use the same mesh and all the mesh; files are distinct, this solution generates one place to store all the mesh; files. Should a user perform a test case, he/she will find the mesh by name; referenced in the *.cfg file instead searching thru multiple folders. This; will also help avoiding unnecessary copies of mesh files.; - The same should be done for Tutorial files: Tutorial/Mesh folder for; storing meshes (duplicating these few files from TestCases/Mesh should not; be a problem IMO, but will really help a new user to get up to speed with; SU2); - I have no clear opinion on where the Tutorial files folder should be; stored. But considering moving written tutorials to main repository i think; that tutorial files should also be stored in main SU2/su2code repository. Best regards and Happy New Year; Jƒôdrzej. 2017-12-30 23:45 GMT+01:00 Tim Albring <notifications@github.com>:. > What do you think of moving the written tutorials also to the main; > repository ? Then we can have links in the wiki to the markdown files like; > this (the link will be much shorter if the files are in the master branch):; > https://github.com/su2code/SU2/blob/0e36facc031aa",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/485#issuecomment-354736415:1159,perform,perform,1159,https://su2code.github.io,https://github.com/su2code/SU2/pull/485#issuecomment-354736415,2,['perform'],['perform']
Performance,"r clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13:; vpmuludq ymm0, ymm4, ymm1; vmovq xmm15, rax; vmovapd ymm6, ymm11; mov rdx, rax; vpbroadcastq ymm15, xmm15; sal rdx, 5; add rax, 1; vpaddq ymm0, ymm0, ymm2; vpsllq ymm0, ymm0, 32; vpaddq ymm0, ymm5, ymm0; vmovdqa YMMWORD PTR [rbp-240], ymm0; vpaddq ymm0, ymm3, ymm0; vmovdqa YMMWORD PTR [rbp-208], ymm0; vpaddq ymm0, ymm15, ymm0; vmovdqa YMMWORD PTR [rbp-176], ymm0; vgatherqpd ymm15, QWORD PTR [rdi+ymm0*8], ymm6; vmovapd ymm0, YMMWORD PTR [rsi+rdx]; vfmadd213pd ymm0, ymm15, YMMWORD PTR [rbp-336]; vmovapd YMMWORD PTR [rbp-336], ymm0; cmp rbx, rax; jne .L13; ```; the meat of which is `vgatherqpd` (`getVec`) and `vfmadd213pd` fused-multiply-add to update `phiL`, everything else is integer arithmetic which in the scalar version gets factored",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:9248,optimiz,optimizable,9248,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['optimiz'],['optimizable']
Performance,"size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; #if SORT_BY_COLOR==1; size_t iEdge = k;; #else; size_t iEdge = edgeIdx[k];; #endif. size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;; ```; Apologies for the macro but it is just to illustrate that if we re-sort edge data after coloring the edge index is the loop index, otherwise the edge indices for each color need to be stored in a separate array.; Note that for each edge loop we first loop over colors, then over same-color edges, it is this inner loop that can run in parallel in chunk sizes that are multiple of the group size considered during coloring. There is some runtime cost on entry to every #omp parallel section, with coloring we enter one such section once by color. I mentioned in the introduction coloring reduces locality and therefore performance, here is the effect of color group size on the execution time of the scalar code on one thread:; ![image](https://user-images.githubusercontent.com/38071223/64686801-2e0d3d00-d481-11e9-82a0-c56e5554cd83.png); The hassle-free option of not sorting by color ""never"" recovers the performance of the base algorithm, things are even worse for the SIMD version where even at group size of 8192 with re-sorting the slowdown is 14%. Running the edge-loop version on 4 cores (8192 group + sorting) we get speedups (relative to reference) of **1.98** and **2.04** for the scalar and SIMD versions respectively (yes I quadruple checked).; If you are keeping track of the number two things should surprise you, the first is that there is no difference between scalar and SIMD now (the vector instruction are still there though), the second is that 4 cores give only a 2x speedup. The reason for both is: the implementation is very memory-bound, and so throwing more compute at it, either in the form of more cores or more lanes, does",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:13800,perform,performance,13800,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['perform'],['performance']
Performance,"tColIterator(jPoint);. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += (gradI++)*d_ij[iDim];; phiR -= (gradJ++)*d_ij[iDim];; }; ...; ```; to get better assembly; ```asm; .L7:; vmovapd ymm3, ymm13; vmovapd ymm2, YMMWORD PTR [rbp-400]; add rax, 32; vgatherqpd ymm0, QWORD PTR [rcx+ymm1*8], ymm3; vpaddq ymm1, ymm1, ymm11; vmovapd YMMWORD PTR [rbp-272], ymm0; vmovapd YMMWORD PTR [rbp-240], ymm0; vfmadd132pd ymm0, ymm2, YMMWORD PTR [rax-32]; vmovdqa YMMWORD PTR [rbp-208], ymm1; vmovapd YMMWORD PTR [rbp-400], ymm0; cmp rax, rbx; jne .L7; ```; which makes the vectorized code perform just as well as the scalar code, iterators could also be used for the other variables but that would start to hurt readability without improving the performance much. _Note: There is also a chance the compiler (gcc) is not doing this kind of optimization because of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer arithmetic and so we really need iterators to amortise that cost, there is also the drawback that scalar usage of such a container would be terrible. **For these reasons I think we should sacrifice ultimate performance and keep node data in AoS storage.**. The major impact on",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:12669,perform,performance,12669,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['performance']
Performance,"to be bandwidth-bound, vectorization helps a bit there too (instructions are also data that needs to travel to the CPU) (maybe for explicit schemes and 8 SIMD lanes, maybe). **Relation with data structures**; There is only one efficient way to move data between memory and registers, via `load` and `store` instructions (they do come in multiple flavors). That is, pointing to a memory location and reading or writing N elements of contiguous data.; It is not the only way, it is also possible to `gather` and `scatter` data. That is populating the register from non-contiguous locations and vice versa. This is about one order of magnitude slower, to the point where if the computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:1932,latency,latency,1932,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['latency'],['latency']
Performance,"to return an array with the indices in ""rows""; template<class U>; Array<double,4> Matrix<double>::getVec(const U& rows, size_t col) const {; return Array<double,4>(&data_[col*rows_], rows);; }; ```; After inlining those copies get optimized away.; Although the stored type, and ""scalar interface"" of the containers do not need to change, the storage order of the data does. Notice that in the above data is stored by columns instead of rows (something that @vdweide mentioned in #716) this has greater implications for gradients as instead of the familiar ""vector of matrices"" we would need a ""matrix of vectors"", i.e. the derivative of variable i w.r.t. coordinate j stored as a vector for all points. The `Adjacency` also needs to be stored in a funny way. For the scalar version of the code it was stored as a CSR sparse matrix (one array of indices into the arrays of data for each point, the rows).; For the vectorized version we want to load (small) arrays of jPoint's, arrays of iEdge's, and arrays of directions, and as we know either those are contiguous or we take a huge performance hit.; If all points had the same number of neighbors we could store the adjacency in LIL (list of lists) format, essentially a column-major matrix, but that is not true for hybrid meshes and so we would possibly waste a lot of memory.; The solution is to use a Block-CSR format (like in CSysMatrix) where the blocks are the vectors we want and instead of one row per point we have one row per SIMD group. But even within a SIMD-sized group points can have different number of neighbors...; The solution for that is padding, within each group the number of neighbors is rounded up, shorter rows are then padded with valid data, e.g. jPoint=iPoint, direction=0, and iEdge repeated. This concept of padding is important for something else, you may have noticed that the SIMD point-loops I showed make no provisions for values of nPoint that are not multiples of SIMDLEN, that is because the containers already ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:10484,load,load,10484,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,4,"['load', 'perform']","['load', 'performance']"
Performance,try matlab or python scripting in conjuction with ABAQUS or ANSYS for introducing genetic algorithms or other simulation optimization methods.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1003#issuecomment-637031316:121,optimiz,optimization,121,https://su2code.github.io,https://github.com/su2code/SU2/issues/1003#issuecomment-637031316,1,['optimiz'],['optimization']
Performance,"tter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writes to 2 locations (gather / scatter access pattern, not to be confused with the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditions, i.e. each endpoint is referenced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:3915,race condition,race conditions,3915,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['race condition'],['race conditions']
Performance,"uction and performance.; b. I think it is important to start the validation project, create a link; from the main SU2 web page to it, and than let it grow with the existing; mechanism of community contributions with approvals. Your list is very fine; for beginning. However I think we should strive to enrich it with 3D and; time dependent cases. I hope to be able to be in the loop and contribute to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familiar with canonical CFD flows that are used in these cases. But it; > would be great to have other cases, such as Turbo-machinary or FSI cases,; > that show the full breadth of SU2's abilities. This is by no means an; > exhaustive list:; >; > 1. Zero Gradient Flat Plate; > 2. 2D and 3D Bump in Channel; > 3. Asymmetric Dif",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:1344,perform,performance,1344,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,1,['perform'],['performance']
Performance,"use of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer arithmetic and so we really need iterators to amortise that cost, there is also the drawback that scalar usage of such a container would be terrible. **For these reasons I think we should sacrifice ultimate performance and keep node data in AoS storage.**. The major impact on gradients and limiters is the way the code is written, to vectorize the computation we need to compute the gradient into a local variable and then ""transpose"" it when storing it, i.e.; ```c++; FltVec phiI[MAXNVAR], gradI[MAXNVAR][MAXNDIM];; ...; for(size_t iVar=0; iVar<nVar; ++iVar); {; auto flux = weight*(phiI[iVar]+phi.getVec(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); gradI[iVar][iDim] += a_ij[iDim]*flux;; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); grad(iPoint+k,iVar,iDim) = gradI[iVar][iDim][k];; ...; ```; Similarly when computing the gradient we need to first fetch/transpose it to be able to vectorize subsequent computations; ```c++; FltVec gradI[MAXNVAR][MAXNDIM];. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); for(size_t k=0; k<SIMDLEN; ++k); gradI[iVar][iDim][k] = grad(iPoint+k,iVar,iDim);",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:13605,perform,performance,13605,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['perform'],['performance']
Performance,"w` but there is only one shared pointer on which to call `delete`); writing to the same memory locations concurrently.; I tried to make the first issue debugable by asserting that the initialization routines of CSysMatrix and CSysVector are only called by the master thread.; For the second issue I made the associated classes as const-correct as possible, that should at least make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear precondition",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:2029,bottleneck,bottleneck,2029,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['bottleneck'],['bottleneck']
Performance,"we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writes to 2 locations (gather / scatter access pattern, not to be confused with the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditions, i.e. each endpoint is referenced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main memory and forces cache coherency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** r",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:4126,race condition,race conditions,4126,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['race condition'],['race conditions']
Performance,"y is static polymorphism.; For example in the non vectorized numerics we have a family of Roe schemes since a lot of code is shared, and the only difference is how the dissipation terms are computed. There this is done with virtual functions, here we want none of that.; Virtual functions allow a parent class to dynamically call methods of its children, we want to do this statically and so we need to let the parent class know who is deriving from it.; ```c++; template<class Derived>; class Parent {; public:; void parentMethod() {; // ""I know I am also a Derived and so I can cast myself.""; auto derived = static_cast<Derived*>(this);; // ""now I can use a method of derived""; derived->childMethod();; }; };. // A derived class needs to inform the parent about itself; class Child : public Parent<Child> {; public:; void childMethod() {...}; };; ```. Why is this better? Note that 2 of these derived classes don't actually have the same parent, i.e. one inherits from `Parent<ChildA>` the other from `Parent<ChildB>` this means that 2 versions of Parent were instantiated specifically for each derived class, this allows code to be inlined and optimized for each, an ability lost with virtual functions. ### Putting it all together; For vectorized central schemes we have something like:; ```c++; // Intermediate class for centered schemes, note the 2 template parameters; template<class Derived, class Base>; class CCenteredBase : public Base {; public:; // Main public method implemented here making use of ""Derived"" and ""Base"".; void ComputeFlux(...) const final {; ... // gather data, do some computation; derived->DissipationTerms(...); // static polymorphism; Base::ViscousTerms(...); // static decorator; ... // update linear system; }; }. // A final centered scheme, which is what we instantiate, with some viscous decorator.; template<class Decorator>; class CJSTScheme : public CCenteredBase<CJSTScheme<Decorator>, Decorator> {; protected:; void DissipationTerms(...) const {...}; }; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721:3426,optimiz,optimized,3426,https://su2code.github.io,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721,1,['optimiz'],['optimized']
Performance,"y waste a lot of memory.; The solution is to use a Block-CSR format (like in CSysMatrix) where the blocks are the vectors we want and instead of one row per point we have one row per SIMD group. But even within a SIMD-sized group points can have different number of neighbors...; The solution for that is padding, within each group the number of neighbors is rounded up, shorter rows are then padded with valid data, e.g. jPoint=iPoint, direction=0, and iEdge repeated. This concept of padding is important for something else, you may have noticed that the SIMD point-loops I showed make no provisions for values of nPoint that are not multiples of SIMDLEN, that is because the containers already took care of that by rounding up the number of columns, and so that seemingly out-of-bounds access is safe (ain't encapsulation great). Padding also aligns the start of each column, thus it is a generally good thing to have (on large dimensions) whether used or not. Here is a relative performance recap before we talk bout parallelization. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed** | 1.0 | 2.2 | 0.83 | 1.35 |. **Parallel execution**. I will start at the end for this, all it takes to parallellize the points loops with OpenMP is to take this:; ```C++; for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); ```; And add some pixie dust; ```C++; #pragma omp parallel for schedule(dynamic,128); for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); ```; This means each thread gets chunks of 128 loop iterations (512 points) to work on, assigned in a dynamic way, the 4 core speedup (still relative to our reference) is **3.8** for the SIMD code and **2.8** for the scalar code. Parallelizing the edge loops is a bit more intricate, as this:; ```C++; for(size_t iEdge=0; iEdge<nEdge; ++iEdge); {; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;; ```; Becomes:; ```C++; for(size_t color=",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:11828,perform,performance,11828,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['perform'],['performance']
Performance,"{; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; double flux = phi_ave[iVar]*area(iEdge,iDim);. grad(iPoint,iVar,iDim) += flux;; grad(jPoint,iVar,iDim) -= flux;; }; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); for(size_t iDim=0; iDim<nDim; ++iDim); #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; ```; Well it is not just a few pragmas, we need to make the number of variables known at compile time (via a template parameter) and we need to transpose how the gradient is stored, i.e. instead of {xyz, xyz, xyz, xyz} we need {xxxx, yyyy, zzzz}. This code gets a speed-up of **2.2**. This code is generic but the template needs to be instantiated for every possible number of variables and we need a `switch` to call the right version at runtime, not very friendly.; Processing multiple edges at the same time is not worth the effort, for one we need `gather/scatter` on a very light routine, and on top of that we need to sort the edges such that we do not attempt to `scatter` to the same point when updating the gradient (a problem similar to the race condition described for SPMD). We can switch to a point-based loop and process multiple points in a SIMD way, that avoids the `scatter` problem but `gathers` will still be required. Here is what the scalar version of the point-based loop looks like:; ```C++; void computeGradients(size_t nPoint,; size_t nVar,; size_t nDim,; const Adjacency& adj,; const Matrix& area,; const vector<double>& volume,; const Matrix& phi,; VectorOfMatrix& grad); {; for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) = 0.0;. for(size_t iNeigh=0; iNeigh<adj.nNeighbor(iPoint); ++iNeigh); {; size_t jPoint = adj.jPoint(iPoint,iNeigh);; size_t iEdge = adj.iEdge(iPoint,iNeigh);; double dir = adj.dir(iPoint,iNeigh);. for(size_t iVar=0; iVar<nVar; ++iVar); {; double phi_ave = 0.5*(phi(iPoint,i",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:3498,race condition,race condition,3498,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['race condition'],['race condition']
Safety," Storing a mapping from global to local point index. ------------------------- Solution Postprocessing -----------------------. Error in ""void CBaselineSolver::SetOutputVariables(CGeometry*, CConfig*)"": ; -------------------------------------------------------------------------; Unable to open SU2 restart file solution_flow.dat; ------------------------------ Error Exit -------------------------------. --------------------------------------------------------------------------; MPI_ABORT was invoked on rank 17 in communicator MPI_COMM_WORLD; with errorcode 1. NOTE: invoking MPI_ABORT causes Open MPI to kill all MPI processes.; You may or may not see output from other processes, depending on; exactly when Open MPI kills them.; --------------------------------------------------------------------------; [hongwei-Workstation:07803] PMIX ERROR: UNREACHABLE in file server/pmix_server.c at line 2079; [hongwei-Workstation:07803] PMIX ERROR: UNREACHABLE in file server/pmix_server.c at line 2079; [hongwei-Workstation:07803] PMIX ERROR: UNREACHABLE in file server/pmix_server.c at line 2079; [hongwei-Workstation:07803] PMIX ERROR: UNREACHABLE in file server/pmix_server.c at line 2079; [hongwei-Workstation:07803] PMIX ERROR: UNREACHABLE in file server/pmix_server.c at line 2079; [hongwei-Workstation:07803] PMIX ERROR: UNREACHABLE in file server/pmix_server.c at line 2079; [hongwei-Workstation:07803] 23 more processes have sent help message help-mpi-api.txt / mpi-abort; [hongwei-Workstation:07803] Set MCA parameter ""orte_base_help_aggregate"" to 0 to see all help / error messages; ```; ```; hongwei@hongwei-Workstation:~/SU2_RUN/QuickStart$ singularity exec su2.sif SU2_SOL inv_NACA0012.cfg ; /.singularity.d/actions/exec: 9: exec: SU2_SOL: not found; ```; ```; hongwei@hongwei-Workstation:~/SU2_RUN/QuickStart$ singularity shell su2.sif ; Singularity su2.sif:~/SU2_RUN/QuickStart> SU2_SOL inv_NACA0012.cfg ; bash: SU2_SOL: command not found; Singularity su2.sif:~/SU2_RUN/QuickStart>; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/739#issuecomment-514630913:5482,abort,abort,5482,https://su2code.github.io,https://github.com/su2code/SU2/issues/739#issuecomment-514630913,1,['abort'],['abort']
Safety," make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear preconditioners. For now the objective is ""just"" not to loose performance while gaining flexibility.; - The performance of MPI+threads with 1 thread per rank will be worse than just MPI (no free lunches). With this [small case](https://github.com/su2code/SU2/files/3933059/small_case.zip) using 8 cores off a machine with two 2650v4 CPU, Intel MPI 2018 + GCC 8.2, the hybrid (2 ranks of 4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:2405,risk,risk,2405,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['risk'],['risk']
Safety," the other gets a speedup of 1.5 (speedup should be 1.85 accounting for the matrix update optimizations).; I assumed that gradients and limiters are not fused and that minor areas of the code get no speedup, which is not necessarily true as this work would require contiguous storage of geometric properties (geometry->node and geometry->edge) and so some speedup is expected due to that, but in the absence of evidence I prefer to be conservative.; Here are the numbers:; ![image](https://user-images.githubusercontent.com/38071223/66394872-15376f00-e9ce-11e9-80ed-193aea2aae6f.png); The take home number is **1.7**. Cumulative with the 1.4 from contiguous storage, so 2.4 total. Despite most of my posts being focused on SIMD my main motivation is the hybrid parallelization which will allow important algorithmic improvements when running on hundreds of cores, namely the multigrid and additive linear preconditioners will retain their effectiveness at much larger core counts.; I will not hazard an estimate for this. ## Proposed changes (Summary); **Hybrid parallel**; - Gradients (GG) and limiters converted to point loops (embarrassing parallel, no edge colouring needed).; - Residual loops parallelized with edge colouring, if anyone has suggestions regarding algorithms send them my way, so far I only tested greedy colouring on edge groups to preserve spatial locality (this aspect is absolutely fundamental).; - Matrix multiplication, BCSR format is also embarrassing parallel.; - Linear preconditioners, additive decomposition within each MPI rank over a number of threads that need not be the same as that used for other areas. **SIMD**; - For gradients, limiters, and numerics a SIMD-friendly type will be used, by and large the high level code will look the same (see my examples above) but multiple points/edges will be processed simultaneously.; - No changes will be required to the data layout of CVariable, which means there will be no penalty to scalar code, new overloads for acce",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539523312:1452,hazard,hazard,1452,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539523312,1,['hazard'],['hazard']
Safety,"## V&V; Now we have a regression script dedicated to the V&V examples see #1538; I have added a high-lift case to the website ([here](https://github.com/su2code/su2code.github.io/pull/71), and [here](https://su2code.github.io/vandv/30p30n/)).; I think that to avoid the [issue of outdated files](https://github.com/su2code/VandV/pull/3) in V&V repo, the best strategy is to add only meshes and documentation to the V&V repo (without duplicating the website). Then anything needed to run the case should be put under regression (via the TestCases and SU2 repos as usual).; If the meshes are too large for GitHub, and are not publicly available elsewhere, we can use the SU2 Foundation Google drive. The config files can be forced to remain updated by running them in --dry_run mode in the V&V regressions. So I think the next steps would be:; - Revive the configs of the [other V&V cases](https://github.com/su2code/VandV) and put them under regression.; - Add V&V for other areas. So if you have ever done any V&V of an SU2 feature not covered yet please consider **adding the data to the V&V repo, the results to the website, and creating a minimal regression test** for it. If you have never done any V&V, please consider reviving one of the existing ones.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1487#issuecomment-1032966507:260,avoid,avoid,260,https://su2code.github.io,https://github.com/su2code/SU2/issues/1487#issuecomment-1032966507,1,['avoid'],['avoid']
Safety,"(size_t iDim=0; iDim<nDim; ++iDim); #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; ```; Well it is not just a few pragmas, we need to make the number of variables known at compile time (via a template parameter) and we need to transpose how the gradient is stored, i.e. instead of {xyz, xyz, xyz, xyz} we need {xxxx, yyyy, zzzz}. This code gets a speed-up of **2.2**. This code is generic but the template needs to be instantiated for every possible number of variables and we need a `switch` to call the right version at runtime, not very friendly.; Processing multiple edges at the same time is not worth the effort, for one we need `gather/scatter` on a very light routine, and on top of that we need to sort the edges such that we do not attempt to `scatter` to the same point when updating the gradient (a problem similar to the race condition described for SPMD). We can switch to a point-based loop and process multiple points in a SIMD way, that avoids the `scatter` problem but `gathers` will still be required. Here is what the scalar version of the point-based loop looks like:; ```C++; void computeGradients(size_t nPoint,; size_t nVar,; size_t nDim,; const Adjacency& adj,; const Matrix& area,; const vector<double>& volume,; const Matrix& phi,; VectorOfMatrix& grad); {; for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) = 0.0;. for(size_t iNeigh=0; iNeigh<adj.nNeighbor(iPoint); ++iNeigh); {; size_t jPoint = adj.jPoint(iPoint,iNeigh);; size_t iEdge = adj.iEdge(iPoint,iNeigh);; double dir = adj.dir(iPoint,iNeigh);. for(size_t iVar=0; iVar<nVar; ++iVar); {; double phi_ave = 0.5*(phi(iPoint,iVar)+phi(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) += phi_ave*dir*area(iEdge,iDim);; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) /= volum",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:3618,avoid,avoids,3618,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['avoid'],['avoids']
Safety,") arrays of jPoint's, arrays of iEdge's, and arrays of directions, and as we know either those are contiguous or we take a huge performance hit.; If all points had the same number of neighbors we could store the adjacency in LIL (list of lists) format, essentially a column-major matrix, but that is not true for hybrid meshes and so we would possibly waste a lot of memory.; The solution is to use a Block-CSR format (like in CSysMatrix) where the blocks are the vectors we want and instead of one row per point we have one row per SIMD group. But even within a SIMD-sized group points can have different number of neighbors...; The solution for that is padding, within each group the number of neighbors is rounded up, shorter rows are then padded with valid data, e.g. jPoint=iPoint, direction=0, and iEdge repeated. This concept of padding is important for something else, you may have noticed that the SIMD point-loops I showed make no provisions for values of nPoint that are not multiples of SIMDLEN, that is because the containers already took care of that by rounding up the number of columns, and so that seemingly out-of-bounds access is safe (ain't encapsulation great). Padding also aligns the start of each column, thus it is a generally good thing to have (on large dimensions) whether used or not. Here is a relative performance recap before we talk bout parallelization. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed** | 1.0 | 2.2 | 0.83 | 1.35 |. **Parallel execution**. I will start at the end for this, all it takes to parallellize the points loops with OpenMP is to take this:; ```C++; for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); ```; And add some pixie dust; ```C++; #pragma omp parallel for schedule(dynamic,128); for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); ```; This means each thread gets chunks of 128 loop iterations (512 points) to work on, assigned in a dynamic way, the 4 core sp",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:11644,safe,safe,11644,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['safe'],['safe']
Safety,");; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec lim = vmin(FltVec(2.0), vmin(; (phiMax[iVar]-phi.getVec(iPoint,iVar))/prjMax[iVar],; (phiMin[iVar]-phi.getVec(iPoint,iVar))/prjMin[iVar]));. limiter.setVec(iPoint,iVar, lim*(lim+2.0)/(lim*lim+lim+2.0));; }; }; }; ```; In terms of algorithm, for each point we find the min and max neighbor values and the min (negative) and max (positive) projections, those are then combined in a final `min(2, max/max, min/min)` to which the limiter function is applied (this would also be applicable to Venkatakrishnan-[Wang] limiters).; This is equivalent to the edge-loop, if statements are not required as due to cells being closed, if the positive projection is not zero, the negative one will also not be zero, therefore it is correct to always evaluate both ratios.; This algorithm only needs min and max neighbors as small local variables instead of large global ones due to the way those values are determined. This is where the memory from the extra adjacency information is recovered. Like @economon said, fusing the gradient kernel with the limiter kernel is trivial with these point loops, and I do not think it affects readability much since one can clearly tell ""what is what"" (I will not put it here but it really is a matter of copy paste), including the boundaries could be a bit more challenging, but I will give performance number nevertheless. **Performance summary**. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.25 | 2.0 |; | **Speed 4 cores** | 2.45 | 2.7 | 4.5 | 7.0 |. The basic point version does not lose to edge based because, contrary to gradients, it does not require duplication of computations while benefiting from sequential access to gradients.; Again the point-based implementation does really well in parallel, limiters are more compute intensive and so the scaling is almost perfect.; For reference, limiters are 1.9 ti",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:9835,recover,recovered,9835,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['recover'],['recovered']
Safety,", March 23, 2021 1:40 AM; To: su2code/SU2 ***@***.***>; Cc: Avish Suresh Bhambhani Wadhwani ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] Microsoft MPI not read, WIndows 10 (#1233). Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it. ‚Äî; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsu2code%2FSU2%2Fissues%2F1233%23issuecomment-804498319&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150583134%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2BpP5qwT1upuD56kAXXvmDMqq%2B5lTmsMaJ6%2Fgx7gHoyM%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FATHYUQAJN6RB6GCI7QDTE7LTE7POTANCNFSM4ZHARKPQ&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150593131%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=KJACa6bUpNomvHIrZDe0%2FoMQ3DeJTksfdC5nwoHPTWk%3D&reserved=0>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-827721160:2522,safe,safelinks,2522,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-827721160,1,['safe'],['safelinks']
Safety,", which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:2848,avoid,avoided,2848,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['avoid'],['avoided']
Safety,"-------------------------+; | Inner_Iter| rms[Rho]| rms[k]| rms[w]| CL| CD| LinSolRes|; +------------------------------------------------------------------------------------------+; | 0| -3.131336| -3.358218| 2.356417| 0.021774| 45.825257| -2.955766|; ...; | 12377| -11.999782| -15.033189| -10.208063| 0.003434| 0.989679| -4.378694|; | 12378| -12.000141| -15.033858| -10.208411| 0.003434| 0.989679| -4.378353|. ----------------------------- Solver Exit -------------------------------; All convergence criteria satisfied.; ```. **`SU2_CFD multizone.cfg` in `issue_simplified/multizone`** gives; ```; +--------------------------------------+; | Multizone Summary |; +--------------------------------------+; | Outer_Iter| avg[bgs][0]| avg[bgs][1]|; +--------------------------------------+; | 0| -0.259741| -0.741089|; | 1| -1.224321| -2.240439|. ...; | 841| -0.356891| 0.285076|; | 842| -0.124937| 0.178422|. Error in ""void CSolver::SetResidual_RMS(const CGeometry*, const CConfig*)"":; -------------------------------------------------------------------------; SU2 has diverged (NaN detected).; ------------------------------ Error Exit -------------------------------; ```. **`mpirun SU2_CFD mz-0.cfg` in `issue_complicated/singlezone`** with 24 MPI ranks (because it needs so many iterations) gives; ```; +----------------------------------------------------------------+; | Inner_Iter| Time(sec)| rms[Rho]| CL| CD|; +----------------------------------------------------------------+; | 0| 4.5727e-02| -3.131336| -0.000000| 47.049080|; | 1| 3.9651e-02| -3.399537| -0.000000| 43.567743|; ...; | 1304734| 3.6630e-02| -12.000000| -0.000000| 1.003811|; | 1304735| 3.6630e-02| -12.000003| -0.000000| 1.003811|. ----------------------------- Solver Exit -------------------------------; All convergence criteria satisfied.; ```. **`SU2_CFD mz-all.cfg` in `issue_complicated/multizone`** gives; ```; +--------------------------------------+; | Multizone Summary |; +--------------------------------------+;",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1414#issuecomment-1432681206:1579,detect,detected,1579,https://su2code.github.io,https://github.com/su2code/SU2/issues/1414#issuecomment-1432681206,1,['detect'],['detected']
Safety,"---------------; ```. When I check the `log.out`, I see that it occurs when calling ParMETIS (`log.err` is empty):; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 7860157 grid points before partitioning.; 11486658 volume elements before partitioning.; 3 surface markers.; 32148 boundary elements in index 0 (Marker = BODY).; 76160 boundary elements in index 1 (Marker = FARFIELD).; 291440 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency structure.; Calling ParMETIS...; ```. I figured that that this might not be an AMG issue but a 7.0.3 build issue, so I tried running `mpirun --use-hwthread-cpus -n 40 /opt/su2/SU2v7_adap/bin/SU2_CFD inv_test.cfg` on its own and also got a similar error:; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 7860157 grid points before partitioning.; 11486658 volume elements before partitioning.; 3 surface markers.; 32148 boundary elements in index 0 (Marker = BODY).; 76160 boundary elements in index 1 (Marker = FARFIELD).; 291440 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency structure.; Key 0 not found!; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun detected that one or more processes exited with non-zero status, thus causing; the job to be terminated. The first process to do so was:. Process name: [[54379,1],4]; Exit code: 254; --------------------------------------------------------------------------; ``` . Do you know what `Key 0` might be referring to? Thanks and regards.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754504570:4089,abort,aborted,4089,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754504570,2,"['abort', 'detect']","['aborted', 'detected']"
Safety,"------------; All convergence criteria satisfied.; ```. **`SU2_CFD multizone.cfg` in `issue_simplified/multizone`** gives; ```; +--------------------------------------+; | Multizone Summary |; +--------------------------------------+; | Outer_Iter| avg[bgs][0]| avg[bgs][1]|; +--------------------------------------+; | 0| -0.259741| -0.741089|; | 1| -1.224321| -2.240439|. ...; | 841| -0.356891| 0.285076|; | 842| -0.124937| 0.178422|. Error in ""void CSolver::SetResidual_RMS(const CGeometry*, const CConfig*)"":; -------------------------------------------------------------------------; SU2 has diverged (NaN detected).; ------------------------------ Error Exit -------------------------------; ```. **`mpirun SU2_CFD mz-0.cfg` in `issue_complicated/singlezone`** with 24 MPI ranks (because it needs so many iterations) gives; ```; +----------------------------------------------------------------+; | Inner_Iter| Time(sec)| rms[Rho]| CL| CD|; +----------------------------------------------------------------+; | 0| 4.5727e-02| -3.131336| -0.000000| 47.049080|; | 1| 3.9651e-02| -3.399537| -0.000000| 43.567743|; ...; | 1304734| 3.6630e-02| -12.000000| -0.000000| 1.003811|; | 1304735| 3.6630e-02| -12.000003| -0.000000| 1.003811|. ----------------------------- Solver Exit -------------------------------; All convergence criteria satisfied.; ```. **`SU2_CFD mz-all.cfg` in `issue_complicated/multizone`** gives; ```; +--------------------------------------+; | Multizone Summary |; +--------------------------------------+; | Outer_Iter| avg[bgs][0]| avg[bgs][1]|; +--------------------------------------+; | 0| -0.937734| -2.766626|; | 1| -2.167353| -6.482096|. ...; | 6546| -0.859233| -0.793018|; | 6547| -0.865290| -0.739081|. Error in ""void CSolver::SetResidual_RMS(const CGeometry*, const CConfig*)"":; -------------------------------------------------------------------------; SU2 has diverged (NaN detected).; ------------------------------ Error Exit -------------------------------; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1414#issuecomment-1432681206:2878,detect,detected,2878,https://su2code.github.io,https://github.com/su2code/SU2/issues/1414#issuecomment-1432681206,1,['detect'],['detected']
Safety,".6455e-02| 9| 1.0000e+02| -8.116638| -6.253576| -6.088205| -2.591315| -6.098708| 2.464595| 3.6910e+05| 0.0000e+00| 1.0000e+05| 1.0000e+05| 1.6910e+05| -1.7511e-12| 7.4888e-13| 0.0000e+00| 0.0000e+00| 0.0000e+00|; | 2000| 12| 5.0000e-08| 1.6035e-02| 9| 1.0000e+02| -8.700803| -6.595298| -6.652705| -3.158904| -6.897678| 1.470020| 3.6910e+05| 0.0000e+00| 1.0000e+05| 1.0000e+05| 1.6910e+05| -3.5221e-12| 1.5395e-13| 0.0000e+00| 0.0000e+00| 0.0000e+00|; +-----------------------------------------------------------------------+; | File Writing Summary | Filename |; +-----------------------------------------------------------------------+; |SU2 binary restart |Flow_Restart_Convection_ZeroRestart_02000.dat|; |Paraview |Volume_Output_Convection_ZeroRestart_02000.vtu|; |CSV file |Surface_Output_Convection_ZeroRestart_02000.csv|; +-----------------------------------------------------------------------+; +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+; | Time_Iter| Inner_Iter| Cur_Time| Time(sec)|Linear_Solve| Max CFL| rms[Rho]| rms[RhoU]| rms[RhoV]| rms[RhoE]| rms[k]| rms[w]| Avg_Press|Avg_Press(NS|Avg_Press(NS|Avg_Press(NS|Avg_Press(NS|HF(NS_Resona|HF(NS_Resona| tavg[HF]|tavg[Avg_Pre|tavg[Avg_Tem|; +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+. Error in ""void CSolver::SetResidual_RMS(const CGeometry *, const CConfig *)"":; -------------------------------------------------------------------------; SU2 has diverged (NaN detected).; ------------------------------ Error Exit -------------------------------. ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1872#issuecomment-1379475347:3832,detect,detected,3832,https://su2code.github.io,https://github.com/su2code/SU2/issues/1872#issuecomment-1379475347,1,['detect'],['detected']
Safety,".py script. The command used was:. ```; python3 $SU2_RUN/mesh_adaptation_amg.py -f adapt_Mesh.cfg -n 4; ```; The script initiates the mesh adaptation process as expected, with the following output:. ```; SU2-AMG Anisotropic Mesh Adaptation. Mesh adaptation options:; PYADAP_COMPLEXITY : (30000, 60000, 120000); PYADAP_SUBITE : (2, 2, 2); PYADAP_SENSOR : GOAL; PYADAP_HMAX : 500.0; PYADAP_HMIN : 1e-9; PYADAP_HGRAD : 1.8. ./adap exists. Removing old mesh adaptation in 10s.; The ./adap folder was deleted. Generating GMF background surface mesh.; Initial CFD solution is provided.; ```; However, no _adap\ite0_ folder gets created. ; The log.err file in the _adap/ini_ directory provides this traceback:. ```; Traceback (most recent call last):; File "".../mesh_adaptation_amg.py"", line 111, in <module>; ...; RuntimeError: ...; Error in TokenizeString(): two or more options before an ""="" sign in the configuration file.; terminate called after throwing an instance of 'int'; ...; *** Process received signal ***; Signal: Aborted (6); Signal code: (-6); ...; ```. The critical part of this error seems to be the Error in TokenizeString() message, suggesting an issue with parsing the configuration file. This error typically indicates a syntax problem, such as having multiple options on a single line without proper separation by an equal sign (=). However, upon reviewing _adap/ini/config_CFD.cfg_, was unable to find any lines that clearly violated this syntax rule. Could this error be indicative of a more subtle issue within the configuration file, or might it be related to specific aspects of the feature_adap branch? Any insights, suggestions, or guidance on how to troubleshoot this error would be greatly appreciated. If anyone has a working adapt_mesh.cfg file for a similar setup or for the feature_adap branch, I would be very interested in seeing it. Understanding the configuration details of a working example could be highly beneficial in resolving my issue. Thank you for your help!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-1847333809:1358,Abort,Aborted,1358,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-1847333809,1,['Abort'],['Aborted']
Safety,"2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -MF 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o.d' -o 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -c ../SU2_CFD/src/output/CHeatOutput.cpp; icpc: command line warning #10006: ignoring unknown option '-Wno-empty-body'; ../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/allocation_toolbox.hpp(79): **error: the global scope has no ""aligned_alloc""; ptr = ::aligned_alloc(alignment, size);**; ^; detected during:; instantiation of ""void container_helpers::AccessorImpl<Index_t, Scalar_t, Store, AlignSize, 0UL, 0UL>::m_allocate(size_t={unsigned long}, Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL]"" at line 411 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""size_t={unsigned long} C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::m_resize(Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL, StaticRows=0UL, StaticCols=0UL]"" at line 445 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols> &C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::operator=(const C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols> &) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL, StaticRows=0UL, StaticCols=0UL]"" at line 63 of; ""../SU2_CFD/src/output/../../include/solvers/../../../Common/include/geometry/elements/CGaussVariable.hpp"". compilation aborted for ../SU2_CFD/src/output/CHeatOutput.cpp (code 2). Could the issue be because of C++-11 features not being supported by the compiler I am using? I am using Intel Parallel Studio 2017. Regards; Suman",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620066614:2571,abort,aborted,2571,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620066614,1,['abort'],['aborted']
Safety,"7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the build machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the build machine: c++ ld.bfd 2.30; None of 'CC' are defined in the environment, not changing global flags.; None of 'CFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity testing C compiler: gcc; Is cross compiler: False.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: gcc D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.c -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe; C compiler for the host machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the host machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'C",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:3416,Sanity check,Sanity check,3416,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['Sanity check'],['Sanity check']
Safety,:+1: Is there something that can be tweaked in the implementation of the NdFlattneer to mitigate this issue? Either avoiding displs[0] != 0 or handling the single rank case manually?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1893#issuecomment-1397480249:116,avoid,avoiding,116,https://su2code.github.io,https://github.com/su2code/SU2/issues/1893#issuecomment-1397480249,1,['avoid'],['avoiding']
Safety,"> . Hi Pedro, thanks for your reply. I don't know how to safely typedef the mlpdouble type the way you suggested. I thought you meant that I just had to copy the way su2double was defined in `code_config.hpp`, but I guess that's not right. Do you know an example showing how this works?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1757#issuecomment-1498919360:57,safe,safely,57,https://su2code.github.io,https://github.com/su2code/SU2/pull/1757#issuecomment-1498919360,1,['safe'],['safely']
Safety,"> > I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .; > ; > There is the geometry toolbox for dot product and normal: https://github.com/su2code/SU2/blob/master/Common/include/toolboxes/geometry_toolbox.hpp just look in the code for examples, in vscode you can search for GeometryToolbox::DotProduct or GeometryToolbox::Norm. The problem is more related to the finding of the wall-normal for a point within the volume mesh, not to the computations that it will be involved in.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1429614350:452,recover,recover,452,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1429614350,1,['recover'],['recover']
Safety,"> @jtneedels Im a bit confused why this is necessary? Why do files need extra lines? versus not?. Github flags it as an issue, I think the main concern is it can cause problems when files are concatenated. Basically just a ""better safe than sorry"" situation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1391#issuecomment-934104439:231,safe,safe,231,https://su2code.github.io,https://github.com/su2code/SU2/pull/1391#issuecomment-934104439,1,['safe'],['safe']
Safety,"> @sun5k please take care of the two comments above from my last review, and add regressions for your 2 tutorials (see what is done in TestCases/tutorials.py. Then I think we can merge this PR!. I'm seeing TestCases/tutorials.py. I have some questions about the code.; In the tutorials.py in transition flat plate for the BC model. . tutorial_trans_flatplate = TestCase('transitional_flatplate_tutorial'); tutorial_trans_flatplate.cfg_dir = ""../Tutorials/compressible_flow/Transitional_Flat_Plate""; tutorial_trans_flatplate.cfg_file = ""transitional_BC_model_ConfigFile.cfg""; tutorial_trans_flatplate.test_iter = 0; tutorial_trans_flatplate.test_vals = [-22.021786, -15.330766, 0.000000, 0.023952] #last 4 columns; tutorial_trans_flatplate.su2_exec = ""mpirun -np 2 SU2_CFD""; tutorial_trans_flatplate.timeout = 1600; tutorial_trans_flatplate.tol = 0.00001; tutorial_trans_flatplate.no_restart = True; test_list.append(tutorial_trans_flatplate). I guess, ; ""tutorial_trans_flatplate.test_iter"" is a number of iterations,; ""tutorial_trans_flatplate.su2_exec"" is the command for SU2_CFD,; ""tutorial_trans_flatplate.timeout"" is the maximum program running time, ; ""tutorial_trans_flatplate.tol"" is a tolerance for convergence criteria,; ""tutorial_trans_flatplate.no_restart"" is a restart option. . I can't understand this whole sentence.; ""tutorial_trans_flatplate.test_vals = [-22.021786, -15.330766, 0.000000, 0.023952]"". Could you explain what's meaning?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1751#issuecomment-1294467724:799,timeout,timeout,799,https://su2code.github.io,https://github.com/su2code/SU2/pull/1751#issuecomment-1294467724,2,['timeout'],['timeout']
Safety,"> I don't known how the process to find the alpha that gives you a given CL works, but could the derivative not be obtained from this process? i.e. you could avoid the FD step entirely. It is a simple proportional controller that will change the angle of attack after a number of iterations depending on the difference between the current CL and the target CL. . So if the the option `ITER_DCL_DALPHA = 0` then it will do exactly what you suggest. It calculates the derivative based on the last update. The only problem with that is, there is no guarantee that the simulation at the previous update was converged, so the derivative might be incorrect. . But you are correct, I could just do a really tiny update (order of delta AoA ~10^-6) at the end and calculate the finite difference using that value. Let me try that and see if the gradients it calculates are reasonable, or if the update is too small and it gets clouded by numerical errors.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539606698:158,avoid,avoid,158,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539606698,2,['avoid'],['avoid']
Safety,"> I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp . There is the geometry toolbox for dot product and normal:; https://github.com/su2code/SU2/blob/master/Common/include/toolboxes/geometry_toolbox.hpp; just look in the code for examples, in vscode you can search for GeometryToolbox::DotProduct or GeometryToolbox::Norm",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1426019269:450,recover,recover,450,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1426019269,1,['recover'],['recover']
Safety,"> I just found a heap buffer overflow in the interface code, mentioning it here in case it is related [#2246 (comment)](https://github.com/su2code/SU2/pull/2246#issuecomment-2034404720). I ran your test case with the fixes from #2246 and the address sanitizer, it still shows the behaviour that you describe and the address sanitizer did not detect anything else. So it's probably not related to the aforementioned overflow.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2255#issuecomment-2042496683:342,detect,detect,342,https://su2code.github.io,https://github.com/su2code/SU2/issues/2255#issuecomment-2042496683,1,['detect'],['detect']
Safety,"> If you add it to the tutorials test suite... and it runs in < 5min, or it covers a few of the commonly untested options, I'd say go for it. Ok!. ; > Out of curiosity, do you use the windowing feature to discard a few initial time steps?. No not directly. The idea and motivation was, that I didn't want to wait until the transient phase of the flow field is computed. So I use a precomputed restart file, which serves as a better ""inital guess"" than freestream values. Then, so the idea, the transient phase is skipped for the first design, and it is at least shortened for other designs. This way, we safe CPU time.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/964#issuecomment-627769844:604,safe,safe,604,https://su2code.github.io,https://github.com/su2code/SU2/pull/964#issuecomment-627769844,1,['safe'],['safe']
Safety,"> Maybe we can avoid creating another instance is the surface_movement pointer is not nullptr when the init function is called? In CDriver we would just make sure all surface_movement are initialized to nullptr. Yeah, that would be an alternative to creating `surface_movement` per instance. It's the easier fix but I am not sure if the resulting behaviour would be correct either. @maxaehle have you tried this?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2018787319:15,avoid,avoid,15,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2018787319,1,['avoid'],['avoid']
Safety,"> Nice! By the way, did you use some scripts for going through all the files and returning 'bad' naming conventions?. No, now I am just going through it by hand probably some linters are available to at least detect them. Actually, I am a bit confused as it is not so clear in the guide. It looks like the beginning of the project was just abbreviated from the Google style guide and was not enforced. Enforcing function names in UpperCamelCase and leaving variable names to the developer seems reasonable. > Can you explain the snake/camel terminology? :). Let's say we have a variable we want to name as `number of nodes per mesh` there are 2 common choices as . ```cpp; number_of_nodes_per_mesh = 42;; numberOfNodesPerMesh = 42;; ```; The first case is called the [snake case](https://en.wikipedia.org/wiki/Snake_case) and the second one is the [camel case ](https://en.wikipedia.org/wiki/Camel_case). Snake case is generally used in Python as [PEP8](https://peps.python.org/pep-0008/) suggests. . > Please revert the python accessor changes. I merged develop many of them vanished, should I revert the remaining ones?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1981#issuecomment-1482062542:209,detect,detect,209,https://su2code.github.io,https://github.com/su2code/SU2/pull/1981#issuecomment-1482062542,2,['detect'],['detect']
Safety,"> Note that you need to checkout this branch `fix_2d_periodic_rotation` (it is not in `develop` yet). Hi Pedro,; I checked the files you sent but building SU2 from source provided some errors:. - _MinGW64_ files provided from SU2 official website are corrupted and the installation crashes; however, it is possible to install the software but the .exe file mentioned in the installation guide won't be present. ; - After building _meson.py_ , the ninja installation command was line typed and the following alert message appeared "" **ninja: fatal: chdir to 'build' - No such file or directory** "". On a different laptop (with different user, to avoid the same mistakes) the following ERROR came up after the mason.py command line:; "" **'meson.py' is not recognized as an internal or external command, operable program or batch file** "". I don't know if any other user might have experienced the same errors. ; Anyway, are the bugfix files you published already available in the pre-compiled version? ; In the meanwhile, I'll try to figure out this inconvenient. Thank you in advance.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1562#issuecomment-1069325722:645,avoid,avoid,645,https://su2code.github.io,https://github.com/su2code/SU2/issues/1562#issuecomment-1069325722,2,['avoid'],['avoid']
Safety,"> Regrading the results: Why do we not see the dip in skin friction coefficient for low Reynolds like we see in the paper of Rumsey? The paper shows that predicting this dip is a feature of the model, and it makes it different from the van Driest theory. I thought it depended on the grid resolution. The case of fine resolution grid(545 x 385), we can see ""dip"" in SU2 result(but relatively small). . ![image](https://github.com/su2code/SU2/assets/50565314/35739361-fa48-4710-aaea-97daf8ccf7cc); ![image](https://github.com/su2code/SU2/assets/50565314/50025c47-35c8-4480-aec1-1a3f17cf2342). From the ""Coarse-Zoom"" plot, The ""dip"" in coarse mesh(138 x 97) also appears in SU2, but it is really weak.; ![image](https://github.com/su2code/SU2/assets/50565314/0a1cd730-b321-47c9-aaee-1647bb696898); ![image](https://github.com/su2code/SU2/assets/50565314/0d60d026-ab8e-4cbf-b3ec-439ae67b5c96)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2271#issuecomment-2089945113:154,predict,predicting,154,https://su2code.github.io,https://github.com/su2code/SU2/pull/2271#issuecomment-2089945113,1,['predict'],['predicting']
Safety,"> Thank you for the detective work @yiren6 üëç We may need to consider changing the extension for OSX or create a symbolic link during the installation process. @patelha57 can you try the solution that yieren6 found?; > ; > As for the crash, I realize now that you are using the branch from PR #1300, it looks like that memory leak was fixed by @aa-g here [b2ddd96](https://github.com/su2code/SU2/commit/b2ddd9666b76b80ce5ce485b58dc5f97a27420b8) (at least that line 558 changed). When using code from a pull request you can have a look at the regression tests #1300 (bottom of the page) to get an idea if some issues might still be work in progress. Hey Pedro! Yup, we worked side-by-side to figure this issue out, we're actually labmates (small world!). I can also confirm that `pysu2` & `pysu2ad` are imported without errors on my OSX laptop. My environment is:. - Homebrew package manager; - GCC GNU compiler 11.2.0; - Python 3.9.12; - OpenMPI 4.1.3; - mpi4py 3.1.3; - swig 4.0.2. To summarize, the main change was to add `name_suffix: 'so'` option to `/SU2_PY/pySU2/meson.build`. This forces the output of `_pysu2.so` & `_pysu2ad.so` instead of OSX default of `_pysu2.dylib` & `_pysu2ad.dylib` for shared libraries.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1606#issuecomment-1107649598:20,detect,detective,20,https://su2code.github.io,https://github.com/su2code/SU2/issues/1606#issuecomment-1107649598,1,['detect'],['detective']
Safety,"> The logic when computing the Laplacians (used for 4th order dissipation) is that for points on a physical boundary, only other physical boundaries are considered when adding solution differences.; > I think this is to avoid adding very large differences for wall points. However when we have a point at a wall-symmetry intersection, the wall point will receive contributions from the symmetry points since that is also a ""physical boundary"".; > That is my hypothesis anyway, anyone care to run some tests? :). Thanks you for the hint, I am running some tests using different values of the 4th order dissipation coefficient for the OneraM6 test case.; Lowering this value, as expected, increase the oscillations of the JST scheme. Anyway the problem is still there.; What looks strange to me is that this difference is present only for the skin friction coefficient and not for the other variables.; Is it possible that the problem is due to the computation of the Cf?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1125#issuecomment-742483637:220,avoid,avoid,220,https://su2code.github.io,https://github.com/su2code/SU2/issues/1125#issuecomment-742483637,1,['avoid'],['avoid']
Safety,"> There are 2 cases in the testcases repository, both are using the Euler solver. Maybe also check if your case is running correctly with the settings from those testcases. Earlier, I was defining the mesh movement for the static zone as:. ` GRID_MOVEMENT= NONE `. since it was stationary. However, after checking the test cases, I found that the stator zones should also be defined as moving as. ```; GRID_MOVEMENT= RIGID_MOTION; MOTION_ORIGIN= 0.0 0.0 0.0; ROTATION_RATE = 0.0 0.0 0.0 ; ```. even though the mesh stays stationary. In that case, the unphysical flow results I presented earlier vanished. Earlier, I tried the cylinder test case with the inner zone having . ```; GRID_MOVEMENT= RIGID_MOTION; MOTION_ORIGIN= 0.0 0.0 0.0; ROTATION_RATE = 0.0 0.0 0.0; ```. and the outer zone having; ` GRID_MOVEMENT= NONE `. where the simulation gave physically viable results. I guess the zone interface may not accurately work if the `GRID_MOVEMENT` options of the neighbouring zones do not match while one of the zones has a non-zero movement. However, I have not simulated any other test cases. Also, the sliding_interface/rotating_cylinders test case diverges with the given .cfg files. At around the 775th time step, I received the following error message:. `SU2 has diverged (Residual > 10^20 detected). `. However, it works just fine if the simulations are done in subsonic flow (e.g. `MACH_NUMBER= 0.1`) while keeping the rest of the configuration the same.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2255#issuecomment-2051695181:1297,detect,detected,1297,https://su2code.github.io,https://github.com/su2code/SU2/issues/2255#issuecomment-2051695181,1,['detect'],['detected']
Safety,"> This is too hacky, mixing the iteration counts and adding +1 here and there. Doesn't look safe. We should of course first update the iteration count, and then check the convergence criteria for this iteration. ; Now [edit: in develop branch] the +1 is inside the monitor() function and monitor(iter) actually checks if iter+1 fulfills the convergence criterion, which is not what the stopping criterion should be. If we correct this, then all python files that use this have to be re-ordered a bit. I still have to check if there are other places where we make use of the fact that the current iteration is actually Iter+1.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1960#issuecomment-1464359066:92,safe,safe,92,https://su2code.github.io,https://github.com/su2code/SU2/pull/1960#issuecomment-1464359066,1,['safe'],['safe']
Safety,"> Thrust should be -11.12N and torque 0.8329Nm, not accounting for number of blades. Is that closer to what you expect?; > ; > The coefficients are computed with a reference velocity based on Mach motion, but the dimensional factor shown in the breakdown file considers the free stream velocity instead... (silly and avoidable bug). How did you get the values of -11.12N and 0.8329Nm from the breakdown file, and output file? I'm not sure where/how to calculate it. I'm new at SU2. and want to use it for VAWT torque calcs, so stumbled upon this discussion in my searches. Many thanks",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1175#issuecomment-1946975666:317,avoid,avoidable,317,https://su2code.github.io,https://github.com/su2code/SU2/issues/1175#issuecomment-1946975666,1,['avoid'],['avoidable']
Safety,"> What if you start with the ""perturbed value"" of AoA and then set it to the correct value for the FD step?. Mhmm, I am just thinking this through. At the end of the fixed_cl part, the flow is converged to the `TARGET_CL` and is at some angle of attack `alpha`. If I wanted to start from the perturbed value and set it to the final value of `alpha`, I would have to first, converge it to the perturbed value (`alpha + 0.001`), and then perform the finite difference step back to `alpha`. This would take approximately twice the number of `ITER_DCL_DALPHA` to perform. Which isn't the end of the world, but I would like to avoid if possible. Is there a cleverer way of doing this that I am not thinking off? The problem is that we don't know the final `alpha` until the fixed_cl simulation converges.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539575775:622,avoid,avoid,622,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539575775,1,['avoid'],['avoid']
Safety,"> You are proposing the exact opposite of the conclusion of the paper:; > ; > ""From the above findings, it is **recommended that all three of these terms be included** when running hypersonic, or even supersonic, turbulent flow simulations, especially for flows with shock wave-induced separations.""; > ; > And they clearly say this: ""While the full inclusion of these terms does not always result in predictions that agree better with DNS/experimental data, this is likely caused by the fact that their exclusion cancels out effects of other flaws in the RANS models employed.""; > ; > If your strategy is to get a better match with experiments by neglecting physics terms, then you should rethink your strategy. Thank you for your comment @bigfooted . The above paper is not presented to improve the current k-w SST model. . As you can see in the first post, there is a problem with the high Mach number and freestream turbulence intensity case. If high turbulence kinetic energy(TKE) and Mach number condition, the boundary condition cannot be maintained the imposed value. (I think there seems to be a bug in the temperature calculation using total energy when including the TKE). The introduction of C1 was intended to provide a 'temporary' solution at the level of first aid (simply commenting out conditional statements in code).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-1521383702:401,predict,predictions,401,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-1521383702,2,['predict'],['predictions']
Safety,"> generalize turb+species output for Comp/Inc/NEMO away into a parent class to avoid duplication. Actually I just noticed there is no `CAdjNEMOOutput` or similar. Not sure @WallyMaier , but is the NEMO-tribe not doing in adjoints?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1461#issuecomment-985070634:79,avoid,avoid,79,https://su2code.github.io,https://github.com/su2code/SU2/pull/1461#issuecomment-985070634,1,['avoid'],['avoid']
Safety,"> in the viscous forces case, it should be ok to move the ""if Domain"" up and avoiding computations on halo points. Corrected in commit f6f986ec256a1c47199703ef6540145506dbbdc3 in #1362 similar to that, moving the code depending on the nearest neighbor access (i.e. YPlus calculation) down into an ""if Domain"" block. Note however that after this change YPlus is not computed on halo cells any more, which might be problematic e.g. for [CTurbSSTSolver::SetTurbVars_WF](https://github.com/su2code/SU2/blob/5655d91d7da192ad0b2a231f9ab5334c2235c10a/SU2_CFD/src/solvers/CTurbSSTSolver.cpp#L494).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1430#issuecomment-966266235:77,avoid,avoiding,77,https://su2code.github.io,https://github.com/su2code/SU2/issues/1430#issuecomment-966266235,1,['avoid'],['avoiding']
Safety,">Do I understand correctly that the roughness height does not influence the wall distance calculation itself?... @pcarruscag , Yes. I can use the markerID to find the corresponding roughness as long as the field element and the nearest wall marker are on the same rank. I was not sure how to relate the markerID on rankID from a different rank to the global config list, hence the current implementation. I am open to fixing it with a different implementation if I can figure out how to actually do it. The few things I tried all ended up causing problems and this was one way to avoid them (also my inexperience with MPI did not help).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-596708744:580,avoid,avoid,580,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-596708744,1,['avoid'],['avoid']
Safety,">Therefore, we try to avoid templates when possible ‚Ä¶. I find this view strange. I would appreciate if current C++ software techniques can be applied. How much can they help to make the source code a bit simpler?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/400#issuecomment-360055094:22,avoid,avoid,22,https://su2code.github.io,https://github.com/su2code/SU2/issues/400#issuecomment-360055094,2,['avoid'],['avoid']
Safety,"@; *GomerOfDoom <https://github.com/GomerOfDoom>*. *Then it makes sense why I am having this trouble. Thank you for letting me; know. This helps a lot. I will try to figure this one out atleast for my; case, what I can do. Appreciate your response! *. On Mon, Mar 16, 2020 at 7:36 PM Paul <notifications@github.com> wrote:. > I can also confirm that there is an issue with the *binary* Paraview; > output for large files. The code appears to write out the .vtu file just; > fine, but Paraview throws errors when attempting to open it. This does not; > occur for ASCII format Paraview files or smaller binary Paraview files. The; > case I am working on consists of a 180 million cell mesh.; >; > Also, @monika1387 <https://github.com/monika1387> , please note that the; > DG-FEM LES capability is *not* currently fully validated, and may be; > unstable in certain circumstances. Use this at your own risk. We are; > working on fixes for the DG solver, but they are still a ways away from; > being finished.; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/787#issuecomment-599805153>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ALJ3OXCKD44SRSZPDWKSDM3RH2ZZFANCNFSM4IT7MM2A>; > .; >. -- ; *Thank you,*. *Monika Chauhan *. *Graduate Research Assistant, Doctoral Program*. *Aerospace and Ocean Engineering Dept, Virginia Tech,Blacksburg, VA 24061*; *Cell# 540-998-5012*",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-599807771:899,risk,risk,899,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-599807771,1,['risk'],['risk']
Safety,"@JedrzejMosiezny . The reason why the mesh and config files are split into separate repos is the following: ideally we want to have the test cases being closely coupled to the current version of the code as config options change quite frequently. However, the mesh files are simply too big to have them in the main repo (it takes too much time to check them out etc.). So a compromise was to still leave the config files in the main repo in order for them to stay up-to-date. We thought that the information [here](https://github.com/su2code/SU2/wiki/Test-Cases) would be quite clear for the user on how to merge config and mesh files. Following this instructions should avoid having to search for the mesh files manually. Let us know if you think different. @economon could you add Jƒôdrzej to the dev team here on github ? Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/485#issuecomment-355152833:671,avoid,avoid,671,https://su2code.github.io,https://github.com/su2code/SU2/pull/485#issuecomment-355152833,2,['avoid'],['avoid']
Safety,"@TobiKattmann,; In the Airfoil_2D case, why are the surfaces detected as straight? Also the messages are a bit strange:; Boundary marker leading_edge is a single straight.; Boundary marker 0.0 is a single straight.; Boundary marker pressure_side is a single straight.; Boundary marker 0.0 is a single straight.; Boundary marker suction_side is a single straight.; Boundary marker 0.0 is a single straight.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-537167522:61,detect,detected,61,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-537167522,1,['detect'],['detected']
Safety,"@drewkett, in version 7.0.3 the hybrid solver should work better, it auto detects if it is not able to get enough parallelization and switches to an alternative approach (there is a warning message when this happens).; The alternative approach (which at least on hex-dominant grids is not worse) can also be forced with `EDGE_COLORING_GROUP_SIZE= 0`. I've been daily driving this version of the code for the past month without issues, if you find any do let us know. Also, to some extent I replicated these findings of SU2 slowing down when using ethernet interconnects, the machines I have access to with this kind of network are shared so I did not try to benchmark (as repeatability is an issue) but it does slow down quite a bit as soon as more than one node is involved.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-606535236:74,detect,detects,74,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-606535236,1,['detect'],['detects']
Safety,"@economon Right now, Euler & Sym can be used interchangeably in both (incomp. & comp.) solvers. One could safely remove one but keeping both is reasonable I guess as both BC are expected by users and maybe the implementation deviates in the future.; Both will give the same results, independent of the 'curvyness' of the boundary (as that is checked in a preprocessing step). Bonus info: Comp & Incomp implementations are identical, so if a higher-level FlowSolver is implemented, EulerWall and SymBC could move up there.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-536898493:106,safe,safely,106,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-536898493,1,['safe'],['safely']
Safety,"@economon for prototyping, the changes proposed in #753 allow a container to be added to CVariable as a public member and thus directly accessible everywhere (one can even allocate only in some derived constructors, with no risk of leaking memory). For release-quality code I think encapsulation is desirable, that being said I'm not above declaring the client solver a friend of the specific CVariable it uses (also with the changes introduced, there would be a way to access member variables directly without moving them to base CVariable).; I like encapsulation not because of OOP principles but because of `GetVelocity(iDim)` instead of `GetPrimitive(iDim+1)`. As for overhead I think it is 0 as long as methods are inline: [example](https://gcc.godbolt.org/z/QXoExF); But in all honesty I also chose to change the CVariable interface as little as possible to make my life easier.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-520226075:224,risk,risk,224,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-520226075,1,['risk'],['risk']
Safety,"@economon the rotating_cylinder case is running well with CGNS mesh input.; However when it reaches the File output part, I get an error :; *** Error in `/opt/SU2/SU2_CFD': munmap_chunk(): invalid pointer: 0x000000000b547cd0 ***; ======= Backtrace: =========; #0 0x00007ffff66841f7 in raise () from /lib64/libc.so.6; #1 0x00007ffff66858e8 in abort () from /lib64/libc.so.6; #2 0x00007ffff66c3f47 in __libc_message () from /lib64/libc.so.6; #3 0x00007ffff66c9b54 in malloc_printerr () from /lib64/libc.so.6; #4 0x000000000045c95e in COutput::DeallocateConnectivity_Parallel(CConfig*, CGeometry*, bool) (); #5 0x000000000045c41f in COutput::SetResult_Files_Parallel(CSolver*****, CGeometry****, CConfig**, unsigned long, unsigned short) (); #6 0x0000000002191a5f in CMultizoneDriver::Output(unsigned long) (); #7 0x00000000021918b1 in CMultizoneDriver::StartSolver() (); #8 0x0000000001620fe1 in main (). I haven't investigated much but I don't have the problem with the SU2 mesh.; Maybe there is a problem with the surface boundaries in CGNS.; It seems that the parsing of the ZoneBC node to get the FamilyName of the Boundary condition in CGNS is missing since moving to a class.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/728#issuecomment-526586410:342,abort,abort,342,https://su2code.github.io,https://github.com/su2code/SU2/pull/728#issuecomment-526586410,1,['abort'],['abort']
Safety,"@elfring: thank you very much for the suggestion, but for the time being, our philosophy is to keep the code as simple as possible to keep a low barrier to entry for new users/developers. Therefore, we try to avoid templates when possible (there are a few isolated places where they are necessary). This may change in the future, but we'll close this for now.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/400#issuecomment-360053938:209,avoid,avoid,209,https://su2code.github.io,https://github.com/su2code/SU2/issues/400#issuecomment-360053938,2,['avoid'],['avoid']
Safety,"@jayantmukho, the arguments to the ADT are converted to the data structures used in the ADT. This must be done, because sometimes it is necessary to gather surface grids to all ranks for an efficient search. That is why it is safe to release the memory immediately. Note that it is not necessary to do so, but this is just to avoid that an unnecessary amount of memory is allocated.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/605#issuecomment-435131100:226,safe,safe,226,https://su2code.github.io,https://github.com/su2code/SU2/pull/605#issuecomment-435131100,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"@libm3l: if you have the time, could you please apply the suggested changes above from Tecplot (thanks, @davetaflin!)? It is probably best to start with a fresh branch without the changes to the autotools stuff that show up in the commits on this PR in order to avoid some conflicts when we merge. Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/339#issuecomment-321732961:262,avoid,avoid,262,https://su2code.github.io,https://github.com/su2code/SU2/pull/339#issuecomment-321732961,1,['avoid'],['avoid']
Safety,"@marcovanderbijl : thanks for the question. The original limit there is simply to impose an upper bound for memory considerations, since the first instantiation of the array of FFD boxes (before the number of FFD boxes embedded in the mesh is detected) needs a default value. We can of course change this to automatically detect the number to avoid the requirement or make it an input option in the config, but we have not run into this issue yet. For now, you should be able to increase that to a reasonable number without any issue. Please give it a try.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/684#issuecomment-495078497:243,detect,detected,243,https://su2code.github.io,https://github.com/su2code/SU2/issues/684#issuecomment-495078497,6,"['avoid', 'detect']","['avoid', 'detect', 'detected']"
Safety,"@pcarruscag : as for header issues, I believe the consensus was also moving toward completely splitting the headers by class as well. It is true that then we may need to include multiple headers one-by-one, but in most cases, I think that we may just need to add a handful (rather than all), and this division should also help us avoid some of the dependencies during compile time. Open to more opinions on this, of course.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-501388653:330,avoid,avoid,330,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-501388653,1,['avoid'],['avoid']
Safety,@pcarruscag @CatarinaGarbacz I am going to close this PR to focus on making small/manageable PRs to develop itself to avoid bloating. Ill try to stick with 10-20 files changed.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1108#issuecomment-729858337:118,avoid,avoid,118,https://su2code.github.io,https://github.com/su2code/SU2/pull/1108#issuecomment-729858337,1,['avoid'],['avoid']
Safety,"@pcarruscag I was planning to do all, but I can stick to places that files have already been moved around. Is there a list of future restructuring to happen so I can avoid those files?. Version 7 seems to be a good place to tackle a lot of these small changes. In any case, I can address this in a separate branch to limit any downsides.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/807#issuecomment-548145692:166,avoid,avoid,166,https://su2code.github.io,https://github.com/su2code/SU2/pull/807#issuecomment-548145692,1,['avoid'],['avoid']
Safety,@pcarruscag I would like to get your opinion about following checks since they are related to code style and changes many things. https://clang.llvm.org/extra/clang-tidy/checks/readability/braces-around-statements.html -> This can be disabled for short ones. Needs to decide short is how many characters. https://clang.llvm.org/extra/clang-tidy/checks/readability/else-after-return.html. https://clang.llvm.org/extra/clang-tidy/checks/readability/isolate-declaration.html . May be this is too https://clang.llvm.org/extra/clang-tidy/checks/modernize/use-auto.html. If chosen those ones can be applied just before release v8. to avoid merge conflicts,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1989#issuecomment-1485959545:628,avoid,avoid,628,https://su2code.github.io,https://github.com/su2code/SU2/pull/1989#issuecomment-1485959545,1,['avoid'],['avoid']
Safety,@pcarruscag I would not call that an avoidable bug considering the fact that the regression test passed.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/751#issuecomment-518274692:37,avoid,avoidable,37,https://su2code.github.io,https://github.com/su2code/SU2/pull/751#issuecomment-518274692,1,['avoid'],['avoidable']
Safety,@pcarruscag Indeed both implementations are very similar. But this is the case for a lot of routines in CEulerSolver and CIncEulerSolver at the moment. We can think about introducing a common base class for both in the future to remove this code duplication. But for now there is no other way except for moving the implementation to CSolver which we should avoid in my opinion.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/657#issuecomment-470926608:357,avoid,avoid,357,https://su2code.github.io,https://github.com/su2code/SU2/pull/657#issuecomment-470926608,1,['avoid'],['avoid']
Safety,@pcarruscag Thanks for approving the pull request. Your advice has been immensely important for me to complete this. I hope this is merged timely to avoid any further changes with the develop branch. I will update the config template and add a test case to the repo soon.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/815#issuecomment-589673332:149,avoid,avoid,149,https://su2code.github.io,https://github.com/su2code/SU2/pull/815#issuecomment-589673332,1,['avoid'],['avoid']
Safety,"@pcarruscag Yes, we would have a group (or matrix, I guess) of CConfigs. We don't have to follow a rigorous ""one-config-per-class"" definition; we could make a lot of headway just by splitting things up very roughly. If I understand, you're thinking we would have to have a base class with lots of virtual functions, and then derived classes with specific implementations. I don't think that would be necessary. First off, that wouldn't solve any problems, since the base class would have to have virtual placeholders for all the config classes. Second, the respective solver classes know what calls they need to make. So they can just have a specific derived class as a parameter (e.g. `CIncSolverConfig`). They don't need an abstract base class because we expect the incompressible settings to incompressible settings, and we won't ever switch it out for any other type of settings. The derived classes (e.g. `CIncSolverConfig`) could implement their own config getters/setters, without having any matching virtual functions in the base Config class. That should allow us to keep our inlines and avoid dynamic dispatches. There may be other flaws with my thinking that i'm not seeing. I just wanted to put my idea out there so we can make more informed decisions. I can also move this discussion to a separate issue, if we want to flesh out this discussion more.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-501240303:1097,avoid,avoid,1097,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-501240303,1,['avoid'],['avoid']
Safety,"@pcarruscag sorry for being picky :D but I would like to have the double changed to passivedouble. In case someone needs a float we can name it passivefloat. Sometimes I use automated scripts to check for occurences of double variables, so we should use passivedouble whenever we can to avoid future confusions on whether the use of double is intentionally or not.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-426698341:287,avoid,avoid,287,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-426698341,1,['avoid'],['avoid']
Safety,"@talbring : as you know, the difference between disabled and active grid movement with 0 velocity is that the former case does not even allocate the memory for the grid velocity at each node, and many conditionals checking for grid movement throughout the solver (fluxes, BCs) are avoided. This was to save memory and effort when grid motion is not needed, however, maybe we need to now change the strategy for multizone problems which may have both fixed and moving zones (perhaps always active with 0 as default). . I am a little surprised they are not the same as well, but somewhere in the code path there must be an issue with this.. my guess is something related to BC_Fluid_Interface() or the transfer structure when grid movement is active on both sides but has a value of 0 on one of the interfaces.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/700#issuecomment-505188890:281,avoid,avoided,281,https://su2code.github.io,https://github.com/su2code/SU2/pull/700#issuecomment-505188890,1,['avoid'],['avoided']
Safety,"@vdweide compilation with level 2 warnings (-Wall -Wextra) is no longer so verbose that it is not useful.; Most of the remaining warnings are of the ""not vectorized with simd"" variety and they come (I suppose) from CSysVector.hpp:302, I think I'll leave them to avoid having to create an exclusion for Intel only. If you want to fix the GCC 10 memcpy memset warnings feel free to use this PR, otherwise it is good to go on my side.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1091#issuecomment-707627414:262,avoid,avoid,262,https://su2code.github.io,https://github.com/su2code/SU2/pull/1091#issuecomment-707627414,1,['avoid'],['avoid']
Safety,"@vdweide ok I think I safeguarded the required areas, if you could test this it would be great as I do not have these libraries.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/603#issuecomment-435066556:22,safe,safeguarded,22,https://su2code.github.io,https://github.com/su2code/SU2/pull/603#issuecomment-435066556,1,['safe'],['safeguarded']
Safety,"@vdweide, of relevance to performance I used -O3 -march=native -DNDEBUG. That last one disables the assertions the container class performs to detect out of bounds accesses.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524534304:143,detect,detect,143,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524534304,1,['detect'],['detect']
Safety,"A cleaner output has been implemented. Unfortunately, it is not possible to detect the particular point that is diverging.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/74#issuecomment-57041769:76,detect,detect,76,https://su2code.github.io,https://github.com/su2code/SU2/issues/74#issuecomment-57041769,1,['detect'],['detect']
Safety,Access to the global to local should be via a function to avoid unintentional insertion.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762154711:58,avoid,avoid,58,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762154711,1,['avoid'],['avoid']
Safety,"Actually, @vdweide predicted exactly this issue in #696. I can report that, after updating the CGNS reader in #728, it is possible to run the solver on meshes with over 1 billion grid points (it was a hex cube, so also roughly 1 billion cells). I did not go much beyond that or try to do a restart, but I am certain we will uncover additional issues like this. @talbring, good ideas for the restart, we should start there. I am fine with keeping this issue (maybe pin it if necessary), or we can reopen #696.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-622151435:19,predict,predicted,19,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-622151435,1,['predict'],['predicted']
Safety,"Ah. Well, pull request #500 should fix this bug, regardless. It's a single-purpose pull request that's ready to be merged in with the develop branch. That being said, it looks like the changes implemented in `enhancement_periodicbc` and `enhancement_periodicbc_paralleldraft` seem to encompass a lot of the other changes needed to fix periodic boundary conditions. Unfortunately, both branches are based off of v4.3 and seem to be a little rough (there's a lot of cout statements, commented out code, etc.). @demanosalvas, @sravya91, or @hlkline: Do you anticipate updating these branches in the next few months? Our group wants to run a few periodic problems, and we're currently trying to fix the bugs in the periodic implementation. We want to avoid duplicating effort if at all possible.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/431#issuecomment-358555075:747,avoid,avoid,747,https://su2code.github.io,https://github.com/su2code/SU2/issues/431#issuecomment-358555075,1,['avoid'],['avoid']
Safety,"All testcases run for only a few steps, not entirely to convergence, the purpose is really just to detect change.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-746403241:99,detect,detect,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-746403241,1,['detect'],['detect']
Safety,"Also since this issue is getting resolved, is there anyway or option I can; reduced number of variables in exported results? I tried using; VOLUME_OUTPUT= (COORDINATES, PRIMITIVE) deleted SOLUTIONS so that I can; able to reduce the size of file from redundant parameters which i don't; need as of now. But seems like that does not work either and exported .vtk; with same size. It supposed to work like that if I understand correctly. On Mon, Mar 16, 2020 at 6:53 PM Monika Chauhan <monika1387@vt.edu> wrote:. > @clarkepede Sure, I will try to make an example to show .; > So my problem is CD nozzle and I am running FEM-LES solver and exported; > data in .csv and PARAVIEW type. Everything seems good its just I was unable; > to visualize exported .vtk files (open but does not show me the final; > result- stuck in just opening it - I am not sure if its paraview issue or; > its 4 GB file which causing this error). So I tried to export my file using; > Tecplot type option but unable to do so and getting this Bus error which I; > never encountered earlier in SU2 ever (what is that error - YOUR; > APPLICATION TERMINATED WITH THE EXIT STRING: Bus error (signal 7)). So; > trying to dump my files in anyway to visualize them, since its FEM-LES; > solver with DG scheme so files are pretty huge. Still let me know if I need; > to send you an example. Attached .cfg file for reference.; >; >; >; > On Mon, Mar 16, 2020 at 6:13 PM Clark Pederson <notifications@github.com>; > wrote:; >; >> @monika1387 <https://github.com/monika1387> I'm sorry, I still don't; >> understand. Do you have a minimal working example, where you can reproduce; >> the problem you're having?; >>; >> Where does the error occur? In SU2_CFD? In SU2_SOL? In Paraview? In; >> Tecplot? What's the specific error message? What's the context?; >>; >> ‚Äî; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/su2code/SU2/issues/787#issuecomment-599781328>,",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-599795725:250,redund,redundant,250,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-599795725,1,['redund'],['redundant']
Safety,Are there any duplicate files here? Perhaps the regression tests could copy in the files from tutorials before running to avoid having redundant information.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/485#issuecomment-353223445:122,avoid,avoid,122,https://su2code.github.io,https://github.com/su2code/SU2/pull/485#issuecomment-353223445,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"By the way, I have another set up updates for you guys to consider that are; beyond the scope of this pull request. Let me know if you are waiting on me; to close the pull request or if you can do that. I put the recommended changes for the structure of config.py file in a gist; https://gist.github.com/spendres/7bbe6eb60fac1f2f148a that separates the; low level config errors validation. I also created a few unit test cases to; allow a controlled build up of regex checks without risk of breaking; previous bug fixes. Let me know. Steve. On Sat, Jan 10, 2015 at 11:34 PM, Steven Endres spendres@gmail.com wrote:. > thanks for the commands; > ; > On Sat, Jan 10, 2015 at 11:54 AM, Trent Lukaczyk <notifications@github.com; > ; > > wrote:; > > ; > > so now the file is being committed as deleted... please roll back to this; > > commit; > > spendres@6cbddbe; > > https://github.com/spendres/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520; > > ; > > here are the commands you can use --; > > Reset the index to the desired tree; > > ; > > git reset 6cbddbe; > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520; > > Move the branch pointer back to the previous HEAD; > > ; > > git reset --soft HEAD@{1}; > > ; > > git commit -m ""Revert to 6cbddbe; > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520; > > ""; > > Update working copy to reflect the new commit; > > ; > > git reset --hard; > > ; > > ‚Äî; > > Reply to this email directly or view it on GitHub; > > https://github.com/su2code/SU2/pull/144#issuecomment-69462490.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/144#issuecomment-69498342:483,risk,risk,483,https://su2code.github.io,https://github.com/su2code/SU2/pull/144#issuecomment-69498342,1,['risk'],['risk']
Safety,"Couple of issues with clang-format, found in the context of #1044, on this kind of style:. ```; su2double; foo, /* blabla */; bar; /* blabla */; ```; It goes mental sometimes. Order of includes is modified, which is guaranteed to break compilation. So running clang-format on the whole code in one go is maybe possibly perhaps definitely not safe.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-656154231:342,safe,safe,342,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-656154231,1,['safe'],['safe']
Safety,"Dear @cvencro,; Great upgrade of the interface treatment! ; I was wondering what happens in case the structural solver is not the internal one, but rather an external solver coupled via Python. I think, in that case, the BC_velocity cannot be applied as there is information missing (we usually only transfer the displacement via python).; The solution to this, with minimum modifications, would be to slightly change the result of GetFSI_simulation. Indeed, at the moment, it checks if there is a marker_fluid_load or if there are both the structural solver and the fluid solver.; I was thinking that we may leave only the second check (i.e. if there are both the structural solver and the fluid solver), so that we avoid any problem. Do you think this is possible? Why did we actually need to check also the marker_fluid_load?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778303887:717,avoid,avoid,717,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778303887,1,['avoid'],['avoid']
Safety,"Dear Heather,; I am analyzing a propeller of an UAV. I have static thrust measurements such that when I used Euler results I got 3.5 lbf thrust as compared to the measured 6 lbs. My next step was to perform an NS equation with SA turb model. I got 7 times over predicted results such that the mesh has a Y+ of less than 1. Then I thought of doing an SST but was not long enough that it gave me error with divergence. I have been setting up my SST case as per the tutorial example of NACA0012. However, I do not happen to see any entry with regards to eddy frequency etc. (usually required by SST) in the config file. Any guidance will be great.; Thanks; Jehan; From: Heather Kline notifications@github.com; To: su2code/SU2 SU2@noreply.github.com ; Sent: Tuesday, May 12, 2015 11:43 AM; Subject: [SU2] Feature deallocation (#174). Bringing this branch up to date with current develop branch. ; Various deallocation changes; Some regression tests fail but all run. (previously was not the case); You can view, comment on, or merge this pull request online at:; ¬†¬†https://github.com/su2code/SU2/pull/174; Commit Summary; - Updated GetEngine_Properties; - Fix to the last commit; - Small bug; - Merge branch 'develop' into feature_MPI; - merging; - SU2_SOL and SU2_CFD are working; - Preliminary, but complete, implementation of SU2_DEF; - More updates; - Working version; - Complete implementation (validate); - Working version of SU2_DEF; - Final push before moving to the develop branch; - New MPI (removing SU2_PRT); - Merged in Ben's ParMETIS integration and fixed some conflicts.; - Merge branch 'benkirk-parmetis_integration' into feature_MPI; - ParMETIS geometry routines have been copied over but are not activated yet.; - Small change to ParMETIS include.; - ParMETIS can now be activated for testing (PARMETIS=YES in config).; - Updated MG; - Updated EA subrotuine; - Small fix; - Fixing memory leak; - Fixing memory leaks; - Dev release v.3.2.6; - Increasing MAX_NUMBER_MARKER; - Working versi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:261,predict,predicted,261,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['predict'],['predicted']
Safety,"Dear SU2 users,. I continued the investigation and managed to track down the source of the problem.; The issues I face with SU2 appear when my wing geometry has several airfoils across the span. I ran several cases with supercritical airfoils and NACA 4 digits airfoils. As soon as the airfoil was changing along the span, SU2 had troubles computing the projected and wetted area of the wing, an attaining a correct solution. To better illustrate the issue, I attached a SU2 .cfg file (dummy.txt) and Gmsh .geo file (dummy_mesh.txt) to this post.; The geometry is the same as in the previous post except that I used 3 different airfoils along the span. That is, I replaced the NASA SC(2)-0712 by the {NASA SC(2)-0714, NASA SC(2)-0712, NASA SC(3)-0712}.; These airfoils are similar, so I expected to recover similar results. However, I observed that:; - SU2 computed the wrong z-projected area : 23.1 m^2 instead of 38 m^2,; - the y+ of the first cell is way too high in certain regions (see attached image, grey zones are the area where y+<1),; - the Cp distribution if not looking good (makes sense with those values of y+), see attached file. I am unsure if the problem appears because Gmsh has trouble in generating this kind of mesh or because SU2 has trouble reading it. Any ideas are welcome. Thank you again,; Adrien. ![cp](https://user-images.githubusercontent.com/39187559/43064280-c076a5e2-8e5e-11e8-84e5-602d1ee27ea2.png); ![y](https://user-images.githubusercontent.com/39187559/43064281-c09a1f86-8e5e-11e8-82b9-4c4fddc7d470.png); [dummy_mesh.txt](https://github.com/su2code/SU2/files/2218394/dummy_mesh.txt); [dummy.txt](https://github.com/su2code/SU2/files/2218395/dummy.txt); [log.txt](https://github.com/su2code/SU2/files/2218411/log.txt)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/533#issuecomment-406973884:799,recover,recover,799,https://su2code.github.io,https://github.com/su2code/SU2/issues/533#issuecomment-406973884,1,['recover'],['recover']
Safety,"Dear all,; Thank you very much for your comments!; I agree with you, transferring the velocity is definitely the best solution in the long run. However, as Pedro mentioned, there is also the case when a certain imposed deformation is set, without solving any structural system. This is the case of a forced motion. In the python script configuration files it is required to set the marker_fluid_load as this is the only way to make SU2 compute the tractions at that marker. Maybe, a solution to both needs, can be to make SU2 compute the tractions anyway for the wall boundary. . In this way, if you have the velocity at the interface, you can define this interface as also marker_fluid_load, the FSI bool will be true and the new BC_velocity will be used. If you do not have the velocity at the interface, you will avoid marker_fluid_load and SU2 will not fail trying to use bc_velocity. This will also give me more time to develop, from the python side, the required modifications to use the new interface. Please let me know your comments",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-778585840:816,avoid,avoid,816,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-778585840,1,['avoid'],['avoid']
Safety,"Dejavu from modified and unmodified...; We want to default to noft2, a noft2 option is redundant. On Mon, 23 May 2022, 14:35 Nijso, ***@***.***> wrote:. > ***@***.**** commented on this pull request.; > ------------------------------; >; > In Common/include/option_structure.hpp; > <https://github.com/su2code/SU2/pull/1646#discussion_r879465502>:; >; > > @@ -1056,18 +1045,98 @@ inline SST_ParsedOptions ParseSSTOptions(const SST_OPTIONS *SST_Options, unsigne; > return SSTParsedOptions;; > }; >; > +/*!; > + * \brief SA Options; > + */; > +enum class SA_OPTIONS {; > + NONE, /*!< \brief No option / default. */; > + NEG, /*!< \brief Negative SA. */; > + EDW, /*!< \brief Edwards version. */; > + FT2, /*!< \brief Use FT2 term. */; >; > I think it's better to use the keyword NOFT2 instead of FT2 to be more; > compatible with the NASA naming.; >; > ‚Äî; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/1646#pullrequestreview-981782386>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXNZS5KCB7L45MPF4KULVLOCT3ANCNFSM5WSMMMUA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1646#issuecomment-1274193498:87,redund,redundant,87,https://su2code.github.io,https://github.com/su2code/SU2/pull/1646#issuecomment-1274193498,1,['redund'],['redundant']
Safety,"Denable-cgns=true '-Dprefix=D:\Programme\SU2-7.1.1\bin'; Python system: Windows; The Meson build system; Version: 0.54.999; Source dir: D:\Programme\SU2-7.1.1; Build dir: D:\Programme\SU2-7.1.1\build; Build type: native build; None of 'PKG_CONFIG_PATH' are defined in the environment, not changing global flags.; None of 'PKG_CONFIG_PATH' are defined in the environment, not changing global flags.; Project name: SU2; Project version: 7.1.1 ""Blackbird""; None of 'CC' are defined in the environment, not changing global flags.; None of 'CFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity testing C compiler: gcc; Is cross compiler: False.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: gcc D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.c -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe; C compiler for the build machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the build machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:1289,Sanity check,Sanity check,1289,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['Sanity check'],['Sanity check']
Safety,Discussion #2213 is about fixes for the address sanitizer detections in the `harmonic_balance` and `hb_rans_preconditioning` test cases (see https://github.com/su2code/SU2/actions/runs/8422887468/job/23065483005?pr=2246).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2018520875:58,detect,detections,58,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2018520875,1,['detect'],['detections']
Safety,"Everything seems to be fine. The test cases run smoothly. I have been following the conversation with Rocco, I will now contact him to understand how to avoid duplication and how to best integrate our works",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-743747473:153,avoid,avoid,153,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-743747473,1,['avoid'],['avoid']
Safety,"For the fluid zone0 the boundaries are detected as NOT straight (captial letters because it is written on screen like that ;) ) and for the solid zone1 the fluid markers are still in the Global marker list but not in the local list... thats why they are written as straight on screen (explanation in next paragraph). In parallel cases this case (process knows the global marker but does not own any nodes of it i.e. it is also not in the local marker list) the process has to assume that the boundary is straight for the mpi communication otherwise we would never have straight boundary-straightness predictions in high process-count simulations. Here the situation is the same... except for it is a serial case. I have to admit I am not really sure how to best tackle that. Can you split the cfg files like in the Airfoil_RBF case (not sure if this is an old vs new driver thing)? I could exclude that structral solver from the surf_straightness check in CDriver::Geometrical_Preprocessing but I am not sure if that possible and if, what boolean to use.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-537377677:39,detect,detected,39,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-537377677,2,"['detect', 'predict']","['detected', 'predictions']"
Safety,For the moment I tried to not use six to avoid to add a new library dependency but it could be another solution!,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/246#issuecomment-209998153:41,avoid,avoid,41,https://su2code.github.io,https://github.com/su2code/SU2/issues/246#issuecomment-209998153,1,['avoid'],['avoid']
Safety,"GCC doesn‚Äôt necessarily come with g++. Does which g++ show anything? If not, try: sudo apt-get install g++. Dave. From: thw1021 [mailto:notifications@github.com]; Sent: Monday, July 22, 2019 8:38 AM; To: su2code/SU2 <SU2@noreply.github.com>; Cc: Subscribed <subscribed@noreply.github.com>; Subject: [su2code/SU2] C++ compiler cannot create executables (#738). Dear developers,; I am trying to install SU2 in docker ubuntu 18.04 container so that I can easily share with partner. But I failed to compile the code with following errors:. (base) root@a5502ebdff64:/home/SU2# ./configure --prefix=/home/SU2/SU2_Install CXXFLAGS=""-O3"" --enable-mpi --with-cc=/usr/bin/mpicc --with-cxx=/usr/bin/mpicxx. checking build system type... x86_64-pc-linux-gnu. checking host system type... x86_64-pc-linux-gnu. checking target system type... x86_64-pc-linux-gnu. checking for a BSD-compatible install... /usr/bin/install -c. checking whether build environment is sane... yes. checking for a thread-safe mkdir -p... /bin/mkdir -p. checking for gawk... no. checking for mawk... mawk. checking whether make sets $(MAKE)... yes. checking whether make supports nested variables... yes. checking whether make supports nested variables... (cached) yes. checking for style of include used by make... GNU. checking whether the C++ compiler works... no. configure: error: in `/home/SU2':. configure: error: C++ compiler cannot create executables. See `config.log' for more details. I am sure that I have installed gcc/g++ successfully. You can see. (base) root@a5502ebdff64:/home# gcc --version. gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0. Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO. warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. (base) root@a5502ebdff64:/home# g++ -o hello hello.cc. (base) root@a5502ebdff64:/home# ./hello. Hello, World!. I have uploaded the config.log file. Could you give me some suggestions, p",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513847308:984,safe,safe,984,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513847308,1,['safe'],['safe']
Safety,"Great idea! Below are some links to databases that I know of. I'd be happy to contribute. . (Some) CFD companies run very large regression tests that can take a long time to complete. Typically, you do not put validation test cases in a regression test (and run it up to convergence) because it will just take too long. A regression test should be <30s or so. ; At a certain point there *will* be validation test cases that will take a couple of weeks to run. If you want to make sure that the validation tests are up-to-date and will run with the current version, create a regression test for it: create a coarse mesh setup for it and run it for only 10 iterations and check the residuals. ; Having said that, it will be nice if there is a general 'run' script that will run all subcases of a single validation case to construct the entire validation and validate the final results with the known/stored solutions.; -nijso. ercoftac database:; http://cfd.mace.manchester.ac.uk/ercoftac/index.html; nparc database:; https://www.grc.nasa.gov/WWW/wind/valid/archive.html; cfl3d V&V database:; https://cfl3d.larc.nasa.gov/Cfl3dv6/cfl3dv6_testcases.html; V&V database for turbulence models:; https://turbmodels.larc.nasa.gov/; drag prediction workshop:; https://aiaa-dpw.larc.nasa.gov/; some cfd-online V&V links: ; https://www.cfd-online.com/Wiki/Validation_and_test_cases; https://www.cfd-online.com/Links/refs.html#validation; reacting flow database:; https://www.sandia.gov/TNF/abstract.html",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426239437:1228,predict,prediction,1228,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426239437,1,['predict'],['prediction']
Safety,"Great progress, thanks @clarkpede !. As for your notes, some thoughts:; - I think you are already doing this but just in case... manually specifying the info at each node can be made a little easier by automatically generating the files for the first time if they don't exist at runtime. We had code that would do this for the grid motion case, and perhaps you can reuse it to generate inlet profile files with the correct global ID and dummy free-stream state to save the trouble of finding the global IDs by hand (that is what we wanted to avoid as well). Then you can at least use excel or another text editor to swap out the data.; - I wouldn't worry about interpolation to start. This can be added later.; - MG is a little tough, but I think we should be able to do a mapping down to the coarse levels in a similar way that we do the restarts in the volume mesh. Can you please check the code in LoadRestart() in solver_direct_mean.cpp where we restrict the solution down onto the coarse levels?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/467#issuecomment-342353441:542,avoid,avoid,542,https://su2code.github.io,https://github.com/su2code/SU2/issues/467#issuecomment-342353441,1,['avoid'],['avoid']
Safety,Great! This is a non-linear example: Can we say that the convergence pattern is not necessarily directly affected by the turbulence model's lower limits? ; Did you try avoiding the NK solver?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2337729090:168,avoid,avoiding,168,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2337729090,1,['avoid'],['avoiding']
Safety,"HI ~ . Recently, I read a some paper [[DOI:10.1017/aer.2020.93](https://www.proquest.com/intermediateredirectforezproxy)]. The main topic of the above paper is considering the TKE term in the RANS equation for supersonic and hypersonic. ; In the paper, the original RANS equation is: ; ![image](https://user-images.githubusercontent.com/50565314/234077533-a521a533-5230-4fcf-b77e-16fbb909570e.png). The paper said CFL3D and VULCAN codes ignored every TKE term, and ; ‚ÄúSince different authors treated the k terms in different ways, sometimes it is difficult to obtain a uniform evaluation from different papers for the same turbulence models on the performance of supersonic and hypersonic turbulent flow predictions.‚Äù; So, the paper classified 3 types of RANS equations (C1, C2, and C3) like below:; ![image](https://user-images.githubusercontent.com/50565314/234077599-1ca42027-ce87-4d7b-b5a0-055453acced8.png). The paper‚Äôs result about k-w SST ; Mach 5 flat plate : ; ; ![image](https://user-images.githubusercontent.com/50565314/234078582-ed57291b-0dfb-4c67-be32-e8d44c9a8914.png); ![image](https://user-images.githubusercontent.com/50565314/234078598-6bfee0e1-d4ce-4876-90eb-971e97190a95.png). Mach 2.25 impinging shock :; ; ![image](https://user-images.githubusercontent.com/50565314/234078666-df0f96f7-68b1-4e73-95e3-ce7ddb26c1c4.png). Mach 8.18 impinging shock :; ; ![image](https://user-images.githubusercontent.com/50565314/234078679-b83a1e88-def1-48a3-be79-4400ba415868.png). Mach 2.9 compression corner :; ; ![image](https://user-images.githubusercontent.com/50565314/234078700-c4dd7444-2149-4ad7-997d-869a5bebb1ee.png). Mach 7.05 compression corner :; ; ![image](https://user-images.githubusercontent.com/50565314/234078733-00042db1-28c7-43c2-b4a6-30de08e86f2d.png). It looks like the attached boundary layer region(like a flat plate) is almost the same, while the separation region(impinging shock and compression corner) shows slightly different results. The results indicate that C1 is ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-1520613703:704,predict,predictions,704,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-1520613703,1,['predict'],['predictions']
Safety,"Have a look at a9466bb158ca8675352bf3b4b887cbf82b7f28ff for a suggestion on how to disable OpDiLib within the scope of the existing build options (casually tested). To clarify the AD implications: If you use OpDiLib, you will have atomic adjoints where no shared reading optimizations are applied, even with `-t 1`. Disabling OpDiLib - if we add that option - will amend this. The presence of `_OPENMP`, however, makes SU2 use the thread-safe CoDiPack type and enables thread-safety augmentations in CoDiPack. Therefore, a reverse AD + OpenMP - OpDiLib build is not the same as a classical serial reverse AD build that is vectorized one way or the other. If we add this, reverse AD + OpenMP - OpDiLib should also print an error for `-t 2` or higher. Since I am not 100% sure about it yet, could you clarify again what it is that you want to achieve in the end, and why?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1294#issuecomment-891257890:438,safe,safe,438,https://su2code.github.io,https://github.com/su2code/SU2/pull/1294#issuecomment-891257890,2,['safe'],"['safe', 'safety']"
Safety,"Heather, thanks for your response.; I do agree that it is preferable to avoid an exhaustive list of defaults. However, currently SU2 runs double booking: For the C++ code, defaults are set in SetRunTime_Options (part of config_structures.cpp) and for the Python scripts, a partial list of defaults is defined in config.py. If we can automatically sync between the c++ and python codes, it will make developers life much easier. ; I suggest creating a single ASCII file that contains all the defaults values. This file can be read both by the c++ code and by the Python scripts, before overwitting parameters, reading from the case cfg file. ; Such a file can be part of the distribution. Whenever a new parameter is defined in SetRunTime_Options, its default value should be written in the defaults' file. Actually, we can prepare a rendering script that would read through SetRunTime_Options and prepares the defaults in the ASCII file, synced with the c++, for the Python. What do you think?; Best,; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-377178756:72,avoid,avoid,72,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-377178756,1,['avoid'],['avoid']
Safety,"Hello @pcarruscag, thank you for your suggestions. > Nice to have this addition to the code, I don't know much about CGNS so these are maybe dumb questions:; > ; > * Will this also work to output meshes after deformation with SU2_DEF? I am guessing not because we had that issue with where to put the FFD information. We did not think to output CGNS meshes with SU2_DEF yet. Maybe it is a development that we can consider.; For the moment, it works just to output the flow-field in CGNS format running SU2_SOL or SU2_CFD. > * Is it possible to write the file by sections? i.e. instead of gathering all the data in a single node do a number of Send/Recv to avoid running out of memory for large problems. I was thinking about problems with the memory. Maybe one possibility is to make each process to write a CGNS file and then merge them into one file (but I have never tried it).; The CGNS library currently embedded with SU2 does not support the parallel writing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1131#issuecomment-744048522:656,avoid,avoid,656,https://su2code.github.io,https://github.com/su2code/SU2/pull/1131#issuecomment-744048522,1,['avoid'],['avoid']
Safety,"Hello guys, I have a proposal to make some numerical tests automatically compared with standard analytical results, requiring the deviation of specific physical variables to be in an allowable range. So that such numerical result bias error could be detected in time accurately after every time the numerical algorithm changes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/735#issuecomment-514969680:250,detect,detected,250,https://su2code.github.io,https://github.com/su2code/SU2/issues/735#issuecomment-514969680,1,['detect'],['detected']
Safety,"Hello,. I ran an incompressible case with NACA 0012 (AoA=0, TMR case) and I see a similar difference between SA and SST on the grid level 3 (https://turbmodels.larc.nasa.gov/naca0012_grids.html, 257 points on the airfoil surface). I also tried the SST_SUST model and have attached the plots for mid section and wake here (white lines - SA, red - SST, green - SST_SUST). The SUST model gives the same difference at mid chord and LE but not in the wake. The SST_SUST under predicts the drag value though (also I had some convergence issues with SUST).; ![pressure_line_cmp_mid](https://user-images.githubusercontent.com/28007882/66496216-dd5a2580-eaba-11e9-869e-097cce8e52b4.png); ![pressure_line_cmp_wake](https://user-images.githubusercontent.com/28007882/66496217-dd5a2580-eaba-11e9-9c72-1980625dd550.png). @economon , the SetStressTensor routine includes the -2/3 * rho * TKE term, so I suppose the TKE is accounted for in the viscous residual of the mean flow equations. . @emoralest6 if you wanted to check the source code, the mean flow solver is in SU2_CFD/src/solver_direct_mean.cpp and the corresponding numerics in the SU2_CFD/src/numerics_direct_mean.cpp file. Cheers.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/797#issuecomment-540063840:471,predict,predicts,471,https://su2code.github.io,https://github.com/su2code/SU2/issues/797#issuecomment-540063840,1,['predict'],['predicts']
Safety,"Hello; I'm so glad to see that the su2 meeting has been so productive!; To address Eran's concern, maybe it would be more reasonable to run v&v on; major releases only, aka 7.0 but not 7.1, and I agree that keeping a record; of the most recent version checked is a good idea-and as necessary minor; releases could be tested, as suggested by individual developers. The regression tests should ensure that the v&v results will be unlikely to; be changed. One thing we can do to reduce that risk further would be to; introduce regression tests that compare solution files rather than the; terminal output alone. I can take a stab at that if there's no other; volunteers- probably only needs to be a couple of critical tests, the file; diff may be slightly more expensive than currently, but given the increase; in test precision and detail I think it would be worth it. H. On Thu, Sep 20, 2018, 1:46 PM erangit <notifications@github.com> wrote:. > Hi All; > I‚Äôm a bit worried about the logistics related to checking this v&v data; > base for every new release.; > Unlike the tutorials, these cases, by their nature will be large and will; > require long integrations(the 2D cases might not fall on this category).; > This means also that significant computational resources will be required; > for this evaluation (about twice a year for a growing list of cases). Is it; > practical?; > The only way that I think that it might work is that each contributor will; > be responsible for checking the casesthat he has introduced, before each; > release. Being a voluntary institution, this can not be enforced (and we do; > not want to enforce). How about trying to be less demanding:; > In each validation case there will be a statement about the last version; > that it was checked with and the responsible contributor. Each contributor; > will receive a recommendation to check his cases before a new release, and; > will be able to do that and update the OK label also after the release.; > Less waterpro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423283690:488,risk,risk,488,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423283690,1,['risk'],['risk']
Safety,"Here's what I see:. - Viscous components of BC_INLET and BC_OUTLET commented out, can these be ucnommented?; - BC_INLET is non-operational.; - BC_SUPERSONIC_INLET is commented out and non-functional. Is this redundant in function to BC_FARFIELD, can it be removed, or should it be fixed?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1368083469:208,redund,redundant,208,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1368083469,1,['redund'],['redundant']
Safety,"Hey @economon, it has! And it seems to recover the results of the older Euler Wall implementation, at least it does for the pitching NACA64A010 which @cvencro analyzed in more detail :+1: ; I'll add an image over at 828. Thanks a lot!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/997#issuecomment-633728578:39,recover,recover,39,https://su2code.github.io,https://github.com/su2code/SU2/issues/997#issuecomment-633728578,1,['recover'],['recover']
Safety,"Hey David,. I have been taking a quick look, it looks like a very nice contribution to me. Thanks for sharing!. I can foresee some issues for those of us who have been working on driver and iteration structures lately, specially for multi-zone applications. Any particular advice to avoid conflicts?. Cheers!. Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/295#issuecomment-237534858:283,avoid,avoid,283,https://su2code.github.io,https://github.com/su2code/SU2/pull/295#issuecomment-237534858,1,['avoid'],['avoid']
Safety,"Hey Rocco,. > And both versions are/were on the develop branches -> what exactly do you refer to here: config-files, code, mesh. The code tags 6.0.1 and 6.2.0 refer to specific master-commits of the code. So I want to know what is exactly of the develop branch, can't be the code if you understand the tags as I do. Maybe you refer to the develop code at the time where these tags were introduced. But maybe sth different. > I guess they converge eventually to the same values. I tried to compare the same case but steady (I attach the summary). Results in this case are fairly similar and (in my opinion) raise no warnings. That is good to hear. ; Luckily @cvencro (Thanks for that üëç ) ran some tests and found that #740 (which rewrites Euler Wall boundaries for compressible and incompressible flows ... which was me btw) introduces the changes you see. The Euler wall for compressible is changed a bit in the way the boundary condition is enforced. Upon convergence both version should recover (close to) the same value. If the results in a steady state are the same/very-similar and if an unsteady simulation at low enough Reynolds-number converges to the same steady result (or oscillate in the same bounds) -> I would say it is simply some purely numerical effect based on the unphysical initialization and different treatment of the euler wall boundary. . 1 thing one could test additionally is to force a very high convergence in each physical timestep, i.e. usually one converges ~3 orders of magnitude in each ts -> now try converging until residual stalling in each ts. If the code versions get the same/closer results in the temporal evolution my euler wall boundary explanation would be quite reasonable.; Together with the long running unsteady simulation proposed above, I would feel more comfortable to judge. @cvencro (bringing the conversation to this place üòâ ) concerning the pitching case: the `if (dynamic_grid)` statements in the 'old' version are not necessary as that is handle",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-562621057:989,recover,recover,989,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-562621057,2,['recover'],['recover']
Safety,"Hey, . As Tom suggested in #997 I reran the pitching NACA64A010 (already shown above by @cvencro) with the branch `fix_gridvel`. Below CM over AOA which includes a version run with Toms fix which recovers the results given by the old Euler Wall (blue and green curve match) :+1: For comparison I also snipped and added the image from above. . Note that the `+Roe ` in the legend of my image refers to `conv_bound_term` which is the convective scheme used on boundaries (I tried other possiblities that's why I added that `+Roe`). In unmodified code that is always Roe (for compressible flow) as it is hardcoded. . ![CM_over_Aoa](https://user-images.githubusercontent.com/31306376/82845493-22658780-9ee5-11ea-9cdc-0ec4eee7a939.png); ![Cvencro_CMoverAOA828](https://user-images.githubusercontent.com/31306376/82845653-a750a100-9ee5-11ea-8a7b-8610748b6a48.png). I am confident that this also recovers the results that @RoccoBombardieri expects from his case. Can you rerun the case maybe with the `fix_gridvel` branch, or just adding the few changed lines in CEulerSolver.cpp? If that solves this issues I would be more than happy to take of that fix getting merged. . I will also rerun my latest test tomorrow.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-633731665:196,recover,recovers,196,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-633731665,2,['recover'],['recovers']
Safety,"Hey,. @cvencro and I were discussing this issue quite a bit this morning and here an attempt of a summary:. We are looking at the following cases:; 1. 3D Onera m6, compressible euler, including euler_wall and sym_plane ; a. steady state; b. unsteady (no pitching, deforming); 2. 2D NACA64A010, compressible euler, including euler_wall; a. unsteady (no pitching/ deformation); b. pitching (with rigid and with deforming mesh -> used for the gradient validation of @cvencro 's post ). We are rather certain that the differences between the code-versions are due to the new euler_wall boundary which was introduced in #740 (by me :) ). @cvencro did a test where the old euler_wall was simply pasted into the newer function body (which currently directly calls the sym_plane boundary) -> that recovered the results obtained with the 'older' version. The steady state results (onera m6) show that both codes deliver the same results (of course with some minor differences). So far so good. Unsteady cases are a bit trickier: the latest 2D results of @RoccoBombardieri show pretty much no difference including the first timesteps. The onera m6 case in contrast converges to the same (steady-state) results for both code version eventually but their initial transient phase differs quite significantly. . A possible explanation for the different initial transient phase: In both implementations a ""reflected state"" is constructed where the normal component of the velocity is subtracted [once in the older code version & twice in the newer version]. I.e. subtracting the normal component of velocity twice means mirroring the velocity along the symmetry plane. The newer code version is a bit ""stronger"" in enforcing the boundary conditions which could lead to the reduced oscillation in CD and CL. If we agree that both code versions produce physically correct results for steady cases and unsteady cases that were integrated long enough in time to get rid of the influence of the initial condition ... then",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-563314747:789,recover,recovered,789,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-563314747,2,['recover'],['recovered']
Safety,"Hi @TobiKattmann ,. Apologies for the huge gap in communication - I had to attend to other matters before I could try this out. I just wanted to follow up and thank you for your suggestions. Doing `export SU2_MPI_COMMAND=""mpirun --use-hwthread-cpus -n %i %s""` before calling 'parallel_computation.py' did the job!. Is it safe for me to edit line 70 in interface.py from `mpi_Command = 'mpirun -n %i %s'` to `mpi_Command = 'mpirun --use-hwthread-cpus -n %i %s'` so that it is set permanently? Or is it better to put `export SU2_MPI_COMMAND=""mpirun --use-hwthread-cpus -n %i %s""` in my .bashrc?. Many thanks and kind regards,; Tim",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/526#issuecomment-428829621:321,safe,safe,321,https://su2code.github.io,https://github.com/su2code/SU2/issues/526#issuecomment-428829621,1,['safe'],['safe']
Safety,"Hi @WallyMaier, good thought that you'd like the developers to not lose sight of proper documentation, especially for all the new stuff.; Though _appropriate_ can be very subjective and seems too vague to me. It could be code comments, a tutorial, contributions to the Docs page, a scientific article, ...; So in the end it might be too easy ticking this box... (making it an almost redundant addition in the worst case). Can we think of a more specific formulation?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/799#issuecomment-541651742:383,redund,redundant,383,https://su2code.github.io,https://github.com/su2code/SU2/pull/799#issuecomment-541651742,1,['redund'],['redundant']
Safety,"Hi @cjz667,; I know, that is why I suggested using the current development version. You can read about what that option does in #691. AUSM+up and similar schemes need a reference Mach number, which comes from MACH_NUMBER, apparently if that is 0 they do not do so well.; These settings should get you started: [cavity.txt](https://github.com/su2code/SU2/files/3526060/cavity.txt). I will put a check in the code for v7 to avoid mysterious ""divergence on the first iteration"" problems, I'll leave this issue open to remind me. Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/761#issuecomment-523511203:422,avoid,avoid,422,https://su2code.github.io,https://github.com/su2code/SU2/issues/761#issuecomment-523511203,1,['avoid'],['avoid']
Safety,"Hi @economon . > Did you solve this issue? I think that the problem is related to specifying VOLUME_OUTPUT fields different than the default (or at least I have had one other person report this to me). When you put in custom fields, the sensitivities are not also added by automatically. yes I noticed that adding sensitivity in the output solves the issue. ; I agree, it makes sense to put `SENSITIVITY` as a default entry in the case of adjoints to avoid this problem.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/964#issuecomment-626029155:451,avoid,avoid,451,https://su2code.github.io,https://github.com/su2code/SU2/pull/964#issuecomment-626029155,1,['avoid'],['avoid']
Safety,"Hi @economon,; thanks for cleaning this. One question, I think that LAPACK may be used by the RBF feature in #555, but to confirm, @pcarruscag, is this the case?; Regarding the autotools, I agree with @vdweide, I think we should use this PR to fix them. I think that @talbring proposal is a good idea, it would avoid the constant conflict that we have when we develop in different machines. I would also update the version of autotools provided in externals, so when bootstrap is run a recent version is compiled.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/586#issuecomment-423889045:311,avoid,avoid,311,https://su2code.github.io,https://github.com/su2code/SU2/pull/586#issuecomment-423889045,1,['avoid'],['avoid']
Safety,"Hi @pcarruscag ,; compressible needs this as well. There is some NICF (`Chi_b`, `Kappa_b`,...) stuff in the Euler_Wall implementation which I need some help with to get it right (that's why it is not done yet ). That is also the only compressible-exclusive part that could be a reason to not have one single code for inc+comp. But of course one could do it anyway with an `if(compressible)` conditional to avoid code duplication :). Towards input boolean: I thought about that as well, but with that preprocessing step it is impossible to get it wrong imo. I personally agree with BC_Sym always being flat and Euler allowing to be curvy, but as seen in issue #735 this opinion is not undisputed. By paying the price of checking straightness once, one eliminates the use of Marker_Sym (assumes const normal after your proposal) on curvy slip walls (happened in #735 ), or the possibly correct use of Marker_Euler on flat boundaries which would be a lot more expensive than checking once, right.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-517228836:406,avoid,avoid,406,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-517228836,1,['avoid'],['avoid']
Safety,"Hi @rsanfer and @TobiKattmann , I agree with the more generalised solution for rigid and deforming meshes too and this is excellent timing of #760 to combine the new approach. ; I have FSI cases I can use, but thought it would be a good stepping stone to use fluid-only case to begin with to avoid the coupling terms for this verification. Using dynamic surface movement definitions for the single-zone pitching airfoil test which has previously been used for rigid motion, the primal solutions and gradients from finite differences for both are very similar as expected. Therefore this should be a good reference to check the discrete adjoints for deforming mesh when the adaptations for grid velocities are made using #760.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/766#issuecomment-524565760:292,avoid,avoid,292,https://su2code.github.io,https://github.com/su2code/SU2/pull/766#issuecomment-524565760,1,['avoid'],['avoid']
Safety,"Hi @rsanfer,; Did you consider using a derived class of CFEAVariable that augments it with the fluid tractions?; This would save you the memory of the data, the pointer, and the boolean (which due to alignment issues is probably not just 1 byte). It would also avoid the if statements.; Cheers for removing the methods returning pointers by the way.; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/663#issuecomment-476253315:261,avoid,avoid,261,https://su2code.github.io,https://github.com/su2code/SU2/pull/663#issuecomment-476253315,1,['avoid'],['avoid']
Safety,"Hi Eduardo,. So far LES_FEM worked pretty well for us with few minor changes at our end.; Thank you for all your support and work in this.; But I do have one query, is anytime the SU2 team worked on averaging mean; flow data (or even perturbations) to avoid huge memory issues with large; LES dumped files in SU2? I mean we are doing averaging but for a large; number of files locally offline is challenging so we are wondering if you; have anything like that during the simulation SU2 can dump averaged mean; flow for a number of iterations?; Please advise if any work or anything closer worked upon which we can use; or take it from there.; Thank you in advance for your help!. On Wed, May 27, 2020 at 8:32 PM Eduardo Molina <notifications@github.com>; wrote:. > Hi Monika,; >; > We are in the V&V process of a new wall model LES implementation. Also, I; > took the opportunity to start fixing the RANS wall function since it will; > share the same code structure with the WMLES part, i.e. replace the wall; > shear stress in the NS fluxes.; >; > We didn‚Äôt extensively test the RANS wall functions, only very limited test; > cases. It will be great if you could run your own cases using the following; > branch:; >; > https://github.com/su2code/SU2/tree/feature_WallModelLES <; > https://github.com/su2code/SU2/tree/feature_WallModelLES>; >; > Please let me know if you need additional help and looking forward to hear; > from you.; >; > Best,; >; > Eduardo; >; >; >; > > On 27 May 2020, at 11:30, monika1387 <notifications@github.com> wrote:; > >; > >; > > Sure Juan! I would like to. Because I was running on RANS but I am; > working; > > on LES to make this wall functions work which is not working either.; > > Please let us know how we can support and work to get this working for; > LES; > > simulation (wall models in SU2).; > >; > > On Wed, May 27, 2020 at 12:29 PM Juan J. Alonso <; > notifications@github.com>; > > wrote:; > >; > > > Monika,; > > >; > > > There is a chance we could work t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-648243104:252,avoid,avoid,252,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-648243104,1,['avoid'],['avoid']
Safety,"Hi Josef,; in general, structural problems are quite stiff and it takes quite a lot of effort for the linear solver to find a solution for u. . I have just run this case in my own computer (GNU compilers), I get:; Iter Time(s) Res[Displx] Res[Disply] Res[Displz] CFEM(Total); 0 4.018591 -8.498274 -8.230638 -8.123824 6.4095e+04; so even I see a very small discrepancy. If LINEAR_SOLVER_ERROR is reduced to 1E-10,; Iter Time(s) Res[Displx] Res[Disply] Res[Displz] CFEM(Total); 0 4.223478 -10.390248 -10.043411 -10.058976 6.4095e+04; so it is just a matter of how much are we letting FGMRES converge. In principle I believe that, if the changes are just in the order of 1,6e-13, it should be fine to put up the tolerance a bit just for this particular case. It's not the same for non-linear structural problems (e.g. configBeam_2d.cfg) where the residuals printed by the code have a different meaning. In any case, just to be on the safe side: would you mind to share with me the file restart_beam.dat ? That way I can quantify the actual change in the results. Thanks,. Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/347#issuecomment-276688029:931,safe,safe,931,https://su2code.github.io,https://github.com/su2code/SU2/issues/347#issuecomment-276688029,1,['safe'],['safe']
Safety,"Hi Paul, indeed when I introduced aligned allocation I took for granted that it was a c++11 feature.; Did you come across any programmatic way to detect whether aligned_alloc is available? We could have a graceful fallback to normal new/delete, no part of the code strictly relies on alignment (yet).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-761011723:146,detect,detect,146,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-761011723,1,['detect'],['detect']
Safety,"Hi Pedro, sorry I'd forgotten to get to that one. I've just had a look through the logic again. Inside SetAiken_Relaxation, the predicted velocity is set which I think should keep the velocity update to be within the same time iteration, but if you think this still isn't actually the case let me know. Also, I've just spotted that inside Update in CFEAIteration, the logic for dynamic and/or fsi isn't complementary, so the separate ""else if"" handling for ImplicitNewmark_Relaxation isn't actually called at all. The SetDualTime_Solver which is called earlier in the same function in turn calls ImplicitNewmark_Relaxation so this hadn't been spotted earlier. I've removed the redundant else if statement... I've had to reintroduce this back since the regression tests for discadj_fsi and discadj_fsi_airfoil failed, which was a bit surprising since they are static fsi problems and the statements removed only considered problems with Newmark time integration.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-822094705:128,predict,predicted,128,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-822094705,2,"['predict', 'redund']","['predicted', 'redundant']"
Safety,"Hi Pedro, thanks for looking into this more. I had run into inconsistencies for FSI problems with relaxation which was the reason for the domain specific calls coming into the multizone driver Update function. With the changes I introduced, the velocity at the interface was being transferred correctly with and without relaxation, so I left it there but it is a bit messy. I'll test with the modified calls for the Relaxation as you suggest. I completely agree that if we can simplify the velocity transfer by just using the velocity directly, then we should. Especially since the predicted velocity is only zero order anyway.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-774993325:582,predict,predicted,582,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-774993325,2,['predict'],['predicted']
Safety,"Hi Pedro, thanks for the probe extraction feature. I'll be looking into it when I get the chance. . I have also worked on this feature since the beginning of this year (for SU2 v7.5.0); on my version, you can set the probes in the .cfg files by directly describing the locations or by a .csv file (if you have many probes, for example). It will also create an output history file for each probe with your specified volume output variables and a probe_information.dat containing the location of the nearest node for that probe (since no interpolation is done). I initially did some workarounds to avoid OOM problems in finding the probe location since I used this in a 400M nodes mesh. I still need to clean up a little bit the additional implementation while keeping/improving the efficiency to avoid a big overhead time in the simulation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1909#issuecomment-1497344705:596,avoid,avoid,596,https://su2code.github.io,https://github.com/su2code/SU2/pull/1909#issuecomment-1497344705,2,['avoid'],['avoid']
Safety,"Hi Pedro,; thanks for cleaning up Joel's code and creating the pull request. The disc_adj_fsi testcase is failing, I believe because of the relaxation. Probably you need to update the value of the test_case config and set the relaxation to 1.0 to recover the previous test. ; About the symmetric matrix class: Joel's implementation was indeed intended to populate the matrix needed for the RBF; the CSysMatrix would not be able to accommodate some terms due to the sparsity. It's well explained in the comments. Also, his implementation was only single-core. I agree that it would be very interesting to have some methods such as the cholesky decomposition available, but I think they would require some reworking (at least for parallelization).; I think this is a very valuable contribution, so it would be good to get more people on board to push it forward.; Cheers,; Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-406847760:247,recover,recover,247,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-406847760,1,['recover'],['recover']
Safety,"Hi Ruben,. Thank you for your feedback !. It is hard to tell what to do you to avoid conflicts. Anyway, the most significant part of the changes concerns the parent CDriver class, especially the constructor and some new functions that are pieces of code coming from the main function (like Output and Monitor). So if the contributions are focused on one particular driver (single, multi, ...) and if they are more or less compatible with the main ""driver->run"" then ""driver->update"" structure, it should be straightforward to solve the potential confilcts. Best,. David",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/295#issuecomment-237702911:79,avoid,avoid,79,https://su2code.github.io,https://github.com/su2code/SU2/pull/295#issuecomment-237702911,2,['avoid'],['avoid']
Safety,"Hi Steve,. I think that all your contributions are very interesting, so please feel free to create a pull request. Only one comment, please be sure that you pull to the develop branch (not the master). We only use the master branch for releasing the code. Thanks again!. Best; Francisco. On Jan 11, 2015, at 7:34 AM, Steven Endres notifications@github.com wrote:. > By the way, I have another set up updates for you guys to consider that are ; > beyond the scope of this pull request. Let me know if you are waiting on me ; > to close the pull request or if you can do that. ; > ; > I put the recommended changes for the structure of config.py file in a gist ; > https://gist.github.com/spendres/7bbe6eb60fac1f2f148a that separates the ; > low level config errors validation. I also created a few unit test cases to ; > allow a controlled build up of regex checks without risk of breaking ; > previous bug fixes. ; > ; > Let me know ; > ; > Steve ; > ; > On Sat, Jan 10, 2015 at 11:34 PM, Steven Endres spendres@gmail.com wrote: ; > ; > > thanks for the commands ; > > ; > > On Sat, Jan 10, 2015 at 11:54 AM, Trent Lukaczyk <notifications@github.com ; > > ; > > > wrote: ; > > > ; > > > so now the file is being committed as deleted... please roll back to this ; > > > commit ; > > > spendres@6cbddbe ; > > > https://github.com/spendres/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > ; > > > here are the commands you can use -- ; > > > Reset the index to the desired tree ; > > > ; > > > git reset 6cbddbe ; > > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > Move the branch pointer back to the previous HEAD ; > > > ; > > > git reset --soft HEAD@{1} ; > > > ; > > > git commit -m ""Revert to 6cbddbe ; > > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > "" ; > > > Update working copy to reflect the new commit ; > > > ; > > > git reset --hard ; > > > ; > > > ‚Äî ; > > > Reply to this email directly or vie",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/144#issuecomment-69612161:872,risk,risk,872,https://su2code.github.io,https://github.com/su2code/SU2/pull/144#issuecomment-69612161,1,['risk'],['risk']
Safety,"Hi Tobi,. If the old results can exactly be recovered for the 3D case discussed, then I recommend updating the code with the changes you've made for the JST convective residual as default since those were the original results and they have also been validated in @RoccoBombardieri 's study. I've just tried the branch `testing_symmetry_plane` with the recommended settings for the NACA0012 pitching airfoil case. With the JST convective residual calculation, the results still appear to be different on initial look. Something still appears to be not right when grid motion is included. Can you please also look into this and try the pitching NACA0012 using the case zip I'd attached in my earlier post?. Thanks,; Charanya",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-578083725:44,recover,recovered,44,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-578083725,1,['recover'],['recovered']
Safety,"Hi everyone, glad this subject is of interest. I will try to make that test case. I edit my earlier comment to avoid a mess. So I changed the terms. Still not sure but the derivation is simple. source term viscous = (0, tau_xy, tau_yy - tau_thetatheta, u* tau_yx + v* tau_yy - q)/y, right?. then from Bird:. ![IMG_20201027_115003](https://user-images.githubusercontent.com/55834287/97291927-d9767e00-184a-11eb-9418-a3ace3e3a077.jpg). bulk viscosity = 0, any derivative wrt theta = 0. For the generalised inviscid part I am pretty sure it is all correct including the jacobian. You can compare with very similar terms in any generalised flux jacobian like in Glaister's paper https://www.sciencedirect.com/science/article/pii/002199918890174X",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-713564781:111,avoid,avoid,111,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-713564781,2,['avoid'],['avoid']
Safety,"Hi, ; thanks for this contribution, I will get a more detailed feedback soon. A first comment about the CSymmetricMatrix class came up to my mind, from a first brief review.; There is already a CSysMatrix class and a few routines added in this pull request look redundant (matvect product for instance).; On the other hand, many of those routines (cholesky decomposition and so on) could turn out to be very useful also for other future code developments.; That said, perhaps it would be nice to collect all the matrix-related routines into the CSymmetricMatrix class (removing redundancies) to make them available at an higher level. Cheers,; Giulio",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/555#issuecomment-406370798:262,redund,redundant,262,https://su2code.github.io,https://github.com/su2code/SU2/pull/555#issuecomment-406370798,4,['redund'],"['redundancies', 'redundant']"
Safety,"Hi,. Regarding the cross-diffusion term (CD) that appears in Omega source term (residual). The SST model (1994/2003) is a high-Reynolds-number model. Namely, It can not predict correctly the sub-layer region (especially the correct profile of the TKE). Therefore, only a positive contribution is required. Moreover, since the SST model was design as a k-w and k-epsilon blending, the CD term ""belongs"" only to the k-epsilon ""branch"", that is why the CD term include the factor ""1-F1"". However, it may happen, that the factor ""1-F1"" is not a 100% safe guarantee. It may happen that ""1-F1"" is not zero in region where the CD term is negative (this happen due numerical errors). To avoid such a situation, it is a good idea to clip the CD term with zero. Otherwise, severe numerical robustness issues may rise. ; Yes, it is different from Menter publications, but I think that clipping the CD term with zero is completely inline with Menter original idea (that is why, I think, he was including the factor ""1-F1"". But again the 1-F1 factor is not 100% percent ""safe"").",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2251561287:169,predict,predict,169,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2251561287,4,"['avoid', 'predict', 'safe']","['avoid', 'predict', 'safe']"
Safety,Hmm but why would they need to? Dynamic FSI cases restart just fine...; I have not looked into this further (been fixing other bugs). But since the case does not recover after the first iteration it seems that the grid velocities are not computed at all.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/915#issuecomment-606618221:162,recover,recover,162,https://su2code.github.io,https://github.com/su2code/SU2/issues/915#issuecomment-606618221,1,['recover'],['recover']
Safety,"Hmmm ok, indeed that region of code does not look like the safest thing in the world...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-847891725:59,safe,safest,59,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-847891725,1,['safe'],['safest']
Safety,"How well does a restart work in general for multizone? I restart from a converged solution and the result at the zone interface shows high residuals, and I do not recover the exact residual values. The solution looks fine everywhere except at the zone interface. This image below shows the residuals for velocity.; [EDIT: high residuals is relative, it is still 1e-12, but it is higher than what it should be]; ![screenshot](https://user-images.githubusercontent.com/7050568/202928587-22acde97-ecc9-4e3b-9377-1ea95a98a129.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1821#issuecomment-1321255158:163,recover,recover,163,https://su2code.github.io,https://github.com/su2code/SU2/pull/1821#issuecomment-1321255158,1,['recover'],['recover']
Safety,"I agree with having suitable defaults that make the code robust, but ""expert"" options should still be available.; Having separate controls also sounds good, I would not throw an error though, maybe just a warning. If you detect the two gradient options to be the same the associated CVariable classes make the reconstruction gradient point to the primitive gradient instead of allocating, and the call to compute the reconstruction gradient is skipped. If this is what you have in mind I support 100%.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-533266438:221,detect,detect,221,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-533266438,1,['detect'],['detect']
Safety,"I also like the idea of renaming to ""SOLVER"" but I would also say to avoid as much churn as possible in the conditionals throughout the code... looks like a wash when reading through the PR changes (almost as many +'s as -'s). Unless the changes are going to make something much more flexible or clear, I would say just keep Kind_Regime and set it in config postprocessing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/756#issuecomment-520705829:69,avoid,avoid,69,https://su2code.github.io,https://github.com/su2code/SU2/pull/756#issuecomment-520705829,2,['avoid'],['avoid']
Safety,"I always thought of CSolver, CIteration, etc. as ""strategies"" and CNumerics as ""visitors"", but just because the numerics ""visit"" the edges. I like the separation between solver and numerics, but I think the implementation could be better to avoid the problems @clarkpede mentioned.; We will need the contiguous storage for vectorization, once we have that we should benchmark again to evaluate the overhead of the current numerics structure and the potential gains from vectorization and weight that against whatever loss of readibility we would need to incur.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-514334254:241,avoid,avoid,241,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-514334254,1,['avoid'],['avoid']
Safety,"I am sorry, but neither of those 2 is helpful to me. I can obtain ASCII data with Tecplot format, and with the restart file. However, the end of the restart_flow file looks something like this, and it may change with conditions for simulation:; ```; 3748	2.000000000000002e-02	0.000000000000000e+00	1.161205517119654e+00	8.075360800285049e+02	-4.616675578067918e-14	5.307920350591170e+05	9.999999999999996e+04	2.999999999999997e+02	2.002826699082778e+00	-1.559133774467877e-16	; 3749	0.000000000000000e+00	0.000000000000000e+00	1.161205517119653e+00	8.075360800285049e+02	-1.451560808848285e-13	5.307920350591170e+05	9.999999999999988e+04	2.999999999999997e+02	2.002826699082779e+00	-4.157690065247673e-16	; EXT_ITER= 195; AOA= 0.000000000000000e+00; SIDESLIP_ANGLE= 0.000000000000000e+00; INITIAL_BCTHRUST= 4.000000000000000e+03; DCD_DCL_VALUE= 0.000000000000000e+00; DCMX_DCL_VALUE= 0.000000000000000e+00; DCMY_DCL_VALUE= 0.000000000000000e+00; DCMZ_DCL_VALUE= 0.000000000000000e+00; ```; It is the same case for the _flow.dat_ file with Tecplot format. When reading this data file back with Python, the last lines will cause errors (with skip_footer option in numpy.genfromtxt) if they are not consistent in number for the parameter sweep. I only need the array w/o the tail data and wanted to avoid additional scripting through Tecplot or Paraview for a faster turnaround for speedup. Hence I was requesting if we can have a CSV format, with just the raw grid data and headings.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-528484440:1297,avoid,avoid,1297,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-528484440,1,['avoid'],['avoid']
Safety,"I am trying to catch up on the developments in this PR but I've lost the overview. Are there still issues that we need to figure out? It looks like convergence is now recovered and results look OK? ; Regarding the symmetry plane, as @pcarruscag mentioned it is improving the accuracy, but not necessarily the convergence. @pcarruscag and I tried to get it to converge as well as before, but no guarantees. Do you still see issues with the new symmetry plane?; Regarding the peak residual that you observed in a single node in the mesh: This is a common observation when using Green-Gauss, which gives O(1) accuracy in mixed mesh nodes where quadrilateral and triangular meshes meet. There are some methods that try to fix this, although none of them are holy grails and the best methods are the most expensive ones.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2394982976:167,recover,recovered,167,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2394982976,1,['recover'],['recovered']
Safety,"I believe the viscous components of a lot of bcs are commented out and can probably be removed at this point. I'm not even sure if they are formulated properly for NEMO problems. I think BC_Inlet can be removed. Or all the commented code can be removed with just an error message. Regarding the outlet boundaries, supersonic outlet does seem to be redundant. However, many validation cases use a supersonic outlet, regardless of boundary layers (ASWBLI), so it may be fine to keep.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1368248064:348,redund,redundant,348,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1368248064,1,['redund'],['redundant']
Safety,"I can also confirm that there is an issue with the *binary* Paraview output for large files. The code appears to write out the .vtu file just fine, but Paraview throws errors when attempting to open it. This does not occur for ASCII format Paraview files or smaller binary Paraview files. The case I am working on consists of a 180 million cell mesh. Also, @monika1387 , please note that the DG-FEM LES capability is *not* currently fully validated, and may be unstable in certain circumstances. Use this at your own risk. We are working on fixes for the DG solver, but they are still a ways away from being finished.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-599805153:517,risk,risk,517,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-599805153,1,['risk'],['risk']
Safety,"I could create a ""safe Allgatherv"" function, e.g. in [`mpi_structure.hpp`](https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/Common/include/parallelization/mpi_structure.hpp) or in [`ndflattener.hpp`](https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/Common/include/toolboxes/ndflattener.hpp). This function should check the number of processes, perform a simple copy if it is 1, and otherwise calls the regular Allgatherv. It would then be used [here](https://github.com/su2code/SU2/blob/1b085062547ec5b066a28ddeeacf4907588f4f5a/Common/include/toolboxes/ndflattener.hpp#L235) instead of `SU2_MPI::Allgatherv`.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1893#issuecomment-1397491031:18,safe,safe,18,https://su2code.github.io,https://github.com/su2code/SU2/issues/1893#issuecomment-1397491031,2,['safe'],['safe']
Safety,"I do have some issues with the continuous adjoint Testcases. Taking for example the euler_wedge. In the primal, results/convergence are really close. The continuous adjoint case (contadj_wedge) however produces pretty different results especially along the Euler walls (will upload an image later). The cont.adj. case converges though. So I guess I am doing missing something which is specific to the continuous adjoint? ; Maybe someone with experience in that field can help me and take a look. @hlkline maybe?. Update: Fixed the problem -> I had to change the call signature of the base implementation of `BC_Euler_Wall `and I changed it for all the primal solvers but not the continuous adjoint solver. Therefore in during integration the empty method of the CSolver was called. I'll additionally add the `override `keyword to the method declaration to avoid that in the future. Thanks to @talbring for pointing me to that",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-532675551:856,avoid,avoid,856,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-532675551,1,['avoid'],['avoid']
Safety,I edited your title not to scare someone reading the change log too much.; I would check (i.e. run to convergence) a few of the failed testcases especially those where CD and CL are not the same.; Small changes to only the residuals should be safe to update.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1189#issuecomment-774668565:243,safe,safe,243,https://su2code.github.io,https://github.com/su2code/SU2/pull/1189#issuecomment-774668565,1,['safe'],['safe']
Safety,"I expect that epsilon to be a simple measure to avoid division by 0, if that lower bound had physical meaning it would have to be multiplied by some reference factors to make its dimensions appropriate, otherwise SST would not give the same results for the same Reynolds obtained with different rho and mu.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2284506205:48,avoid,avoid,48,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2284506205,2,['avoid'],['avoid']
Safety,"I have a few updates. I found out that most of my FGMRES problems in this branch where related to the fact that I was using single precision for the linear system. You can see it in this graphs for the residuals of Rho. ![RMSRho_Mesh_3](https://github.com/user-attachments/assets/185b8195-e415-4dff-9332-cff573c069cc). The first two curves are in mixed-precision and they stop long before reaching the minimum residual required due to divergence of the linear solver. Moreover, it seems that the 2003 model here implemented (which, simply put, considers the full reynolds stress tensor for the computation of the production of k and always considers k in the stress tensor and in the thermodynamic variables) has faster convergence and increases the recirculating zone (maybe due to the reduction of turbulence kinetic energy) which is a feature that has also been seen in [DOI:10.1017/aer.2020.93]. . ![SFC_Mesh_3](https://github.com/user-attachments/assets/81a50021-6b58-4a84-9057-a18b5bab023c). There are some differences between the use of the TMR boundary conditions and the ones used before. The results improve with respect to the develop in the prediction of the SFC distribution, which has results completely off from the V&V page of SU2. ![SFC_Mesh_3_Old](https://github.com/user-attachments/assets/0f4d634b-df31-4f86-a324-d9f67947f1ff). ![RMSRho_Mesh_3_Old](https://github.com/user-attachments/assets/24d5c2f5-93fe-432f-82d9-c050a90f7339). I may keep on checking if the implementation of the v2003 model is correct or not by searching for other test cases (probably coming from DOI:10.1017/aer.2020.93).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2393433487:1153,predict,prediction,1153,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2393433487,2,['predict'],['prediction']
Safety,"I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035:448,recover,recover,448,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035,1,['recover'],['recover']
Safety,"I have started dividing the geometry classes. First, I created a new set of classes for the FVM mesh readers. There is a base interface that should never need to be modified, and the new CGNS reader is the first implementation. I will move the SU2 ASCII to this framework soon. The new class will make it easy to add new readers or even just implement analytic meshes like squares and cubes directly as child classes. I will break off a few more small classes in this PR, since they will be easy to handle, but I will likely wait for after this PR to completely divide CPhysicalGeometry just to be safe.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/728#issuecomment-520532998:598,safe,safe,598,https://su2code.github.io,https://github.com/su2code/SU2/pull/728#issuecomment-520532998,1,['safe'],['safe']
Safety,"I have tested the adjoint FSI solver, results from matching, conservative, and consistent interpolation all agree. I am attaching only the bare minimum [files](https://github.com/su2code/SU2/files/2475798/testing.zip): meshes, configs, histories and logs. As to avoid uploading large files, I can obviously share the solutions.; To me the original issue is fixed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/597#issuecomment-429571819:262,avoid,avoid,262,https://su2code.github.io,https://github.com/su2code/SU2/pull/597#issuecomment-429571819,1,['avoid'],['avoid']
Safety,"I haven't looked at this in awhile but I believe I had it working at the time. The volume of each element is already calculated, except that I believe the absolute value of it is used to avoid negative volume cells. The patch just lets the volume get calculated and reorients the element if the volume is negative. This makes a lot more sense to me than using what seems to be an arbitrary algorithm to determine if the elements should be reoriented. . I came across this when I was writing a 3d mesh generator. It doesn't create elements of the best quality but I made sure that they had a positive volume. SU2 would then reorient some elements on me, which caused even more issues for the meshes I created . . I can probably find the time to look into fixing the conflicts and creating a test case if that's desired.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/182#issuecomment-256731488:187,avoid,avoid,187,https://su2code.github.io,https://github.com/su2code/SU2/pull/182#issuecomment-256731488,1,['avoid'],['avoid']
Safety,"I just checked and develop has that problem too, I see it from log files in build n 600.2. That's probably something we missed form an older pull request.; Maybe we should start thinking about adding a test to check also those python script (?) just to avoid such issues in the future. Cause right now we are only looking at residuals and we can't check them.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/312#issuecomment-252172548:253,avoid,avoid,253,https://su2code.github.io,https://github.com/su2code/SU2/pull/312#issuecomment-252172548,1,['avoid'],['avoid']
Safety,I remember having the same problem when computing impinging jets flows on a hot surface in symmetric configurations. The maximum heat flux should be at the stagnation point of the jet (which is in the symmetry plane) but the simulation predicted the maximum at some distance from the symmetry. Mirroring the mesh and computing the full geometry led to the correct solution. ; I was using JST but didn't test with upwind schemes for comparison. I may do so if I have some time.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1125#issuecomment-782058918:236,predict,predicted,236,https://su2code.github.io,https://github.com/su2code/SU2/issues/1125#issuecomment-782058918,1,['predict'],['predicted']
Safety,"I removed from pull request the files removed in another pull request. I also tried to fix some PEP8 issues including ""useless `return`"" in one function.; The remain CodeFactor issues:; * `Use of eval (eval-used)` - there is check for `window` is presented in allowed value list, ; so it safe to eval this value currently.; * `Wildcard import math (wildcard-import)` - I have no idea what math expressions are used in this file. ; Maybe it could be removed. As I don't know if it will brake something in case of replacing it with `import math` instead of `from math import *`.; * `Redefining built-in 'pow' (redefined-builtin)` - is related to previous issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/983#issuecomment-629634439:288,safe,safe,288,https://su2code.github.io,https://github.com/su2code/SU2/pull/983#issuecomment-629634439,1,['safe'],['safe']
Safety,"I reran the thread sanitizer analysis and it didn't detect any data races. The deviations are small, so I'm with @pcarruscag that this is probably inherent non-determinism. I relaxed the tolerances in #1984.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1980#issuecomment-1483122833:52,detect,detect,52,https://su2code.github.io,https://github.com/su2code/SU2/issues/1980#issuecomment-1483122833,1,['detect'],['detect']
Safety,"I rolled back and had a look at the case again, it turned out to be issue with input given in one of the reference (I followed). I have changed the inputs from original reference and repeated the run (find the attached pdf [SU2_hflux_issue.pdf] https://github.com/su2code/SU2/files/5685357/SU2_hflux_issue.pdf); ) with finer grid. I also ran the case with alternate code. Pressure distribution match is good b/w the two but some differences are still there in heat flux distribution. The important thing is that I could not obtain a low dissipation 2nd order solution (perhaps this is common issue with such cases). I iterated to higher E fix value and Venkat limiter coeff =0.01 to make it work (got some in between order of accuracy). Seems like there will be requirement of some knobs to tune the numerical dissipation for hypersonic cases to avoid carbuncle/instabilities.; I am closing it for now, as primary issue is sorted but perhaps new additions/improvements will be required. Regards; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1063#issuecomment-744062256:846,avoid,avoid,846,https://su2code.github.io,https://github.com/su2code/SU2/issues/1063#issuecomment-744062256,1,['avoid'],['avoid']
Safety,"I see, then it should be possible to detect the version of the standard supported by the compiler and only enable the feature in that case. We do that for simd directives for compatibility (hopefully) with the MS compilers.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1214#issuecomment-788243448:37,detect,detect,37,https://su2code.github.io,https://github.com/su2code/SU2/pull/1214#issuecomment-788243448,1,['detect'],['detect']
Safety,I suppose when #913 and #923 are done this will be redundant (?),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/932#issuecomment-612463518:51,redund,redundant,51,https://su2code.github.io,https://github.com/su2code/SU2/pull/932#issuecomment-612463518,1,['redund'],['redundant']
Safety,"I think I found out the problem. In the correction of the gradients on the symmetry plane, somehow the gradient of the velocity along the normal direction was still not 0. By fixing it then the Mach number and nu_tilde profile are correct. I don't know if I am still missing the correction in the tangential direction, but at least the solution improves. Here you can see the same graph as before but without the line of the last commit. I have added, instead, a try with the Weighted Least Square (LS) and a first order (FO) (no MUSCL). In the end I have added the line for the correction implemented (Corr Grad). We can see that the behaviour before the implementation of the gradient correction is recovered. ![CommitsComparison_RMSRho_New](https://github.com/user-attachments/assets/dc7c843c-8141-489b-b627-a59cfb2d795d)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2374767784:701,recover,recovered,701,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2374767784,1,['recover'],['recovered']
Safety,"I think I implemented all the modifications you suggested. I am sorry you see all the commits in between, unfortunately due to Covid I work outside of office and I actually use Github to push the modified code to the office PC. I was actually working on a separate branch but, for reason that I do not understand, all the commits have been moved in the merging process... sorry about that. I am still learning git. In particular the modifications are:. - The functions related to static mesh deformation have been removed. I only included some new lines in the python wrapper ; that overwrite the initial velocities to zero and push back the solution.; - I now use the BC_Sym_Plane of the FEA solver for the deformation at the symmetry plane. I had to add a flag that avoids ; accessing LinSysReact in case of mesh deformation, as this is not initialised in that context.; - GetnMarker_Match_Deform_Mesh is not present anymore; - The marker has been renamed from MATCH_DEFORM_MESH to DEFORM_MESH_SYM_PLANE. All the functions have also ; been renamed accordingly; - I included the SU2 header in all the new files, changing the version number to 7.0.8. I did not modify the version number of ; the files that were already present in SU2 prior to this PR. I think the merging process should take care of that, am I wrong?; - The python functions that were separated in x,y,z component now give back an array and are merged into one function only; - The descriptions for the methods have been added; - The test case has been removed. I actually prepared a tutorial and all the appropriate files will be placed in the tutorial and ; website repos. I will now perform a PR for those repos so that you can see the material. Again thank you very much and sorry for the mess with the ""internal"" commits. . Please let me know if you think I missed something",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-742471972:768,avoid,avoids,768,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-742471972,2,['avoid'],['avoids']
Safety,"I think combining options where possible would be great. Also, won‚Äôt the move to multiple config files for multizone avoid the linear solver tolerance issue you mention for FSI, as the elasticity config can again reuse Linear_Solver_Error once it is not simultaneously being used by the fluid? Therefore, the deform option can be solely for grid deformation either during shape design or for the mesh equations in FSI problems.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/623#issuecomment-444003331:117,avoid,avoid,117,https://su2code.github.io,https://github.com/su2code/SU2/pull/623#issuecomment-444003331,1,['avoid'],['avoid']
Safety,"I tried the case from @pcarruscag and it indeed works. However, when I extrude the same mesh to 3-D by 5 cells in Pointwise I don't see the correct solution. I created the new interior face by dividing the existing mesh in the middle to avoid any tolerance issues when joining two disjoint meshes. I don't see any issues with mesh quality. Even though only one surface exists. the nodes are duplicated, but that is how Pointwise writes the mesh file when creating an internal face in 3D. If I try to avoid this duplication, there is an additional unspecified marker written. This duplication happens only on the interior of the face and not on the perimeter of the marker. . Also, I found this forum post about nodes being written twice(https://www.cfd-online.com/Forums/pointwise/171862-excluding-domain-boundaries-getting-written-twice.html) and it appears that Pointwise always writes duplicate nodes when exporting meshes with internal boundary markers. I am not quite sure if this now a Pointwise issue or SU2 one anymore.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/986#issuecomment-629166352:237,avoid,avoid,237,https://su2code.github.io,https://github.com/su2code/SU2/issues/986#issuecomment-629166352,2,['avoid'],['avoid']
Safety,"I was looking a bit more into this because of the issue with having to treat the structural solver differently in the Update function.; (I gotta say I feel lucky I never had to look into time domain stuff, because 3 nested iterations... not easy). Anyway, I think there is a problem here, the ""predicted displacement"" that is transferred to the fluid during outer iterations (the coupling iterations within each time iteration) is the one set in CFEASolver::SetAitken_Relaxation, which is part of the Corrector step at the end of the structural inner iterations (the ones within each outer iteration). The ""predicted velocity"" is not set in SetAitken_Relaxation thus the grid velocities are lagged by one time step, since they are only set to the current velocity of the structure at the end of the time step (in the Update methods). I have little trust in the predictor step, looking at it I thing only zero order has a chance of working and anything else will cause the fluid and structural sides to separate / overlap, I'll test the theory.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-774712415:294,predict,predicted,294,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-774712415,3,['predict'],"['predicted', 'predictor']"
Safety,"I was running some tests using a simple geometry but for the refinement seems to be chewing up the geometry. Has anyone who has worked on 3D geometries experienced this or figured out a way to avoid this?. I was using the following settings:; ```; % ------------- MESH ADAPTATION PARAMETER ------------%; %; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= MACH; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 2.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (1000000, 1300000, 1500000); % Number of adaptations performed at each level; PYADAP_SUBITE= (2, 2, 2); ```. ![refine](https://user-images.githubusercontent.com/16842258/104834786-0b94fa80-58e5-11eb-9018-687ffc5aaa9d.png). I noticed a few comments up, there is the `PYADAP_BACK` setting, which sounds like it might solve this, but how should one use this? Should the geometry alone be re-meshed to a high resolution and the whole volume exported as a SU2 block? Or should it be just a surface mesh? (It seems that Pointwise is not able to output only the surface mesh in SU2 format.)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-761751741:193,avoid,avoid,193,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-761751741,2,['avoid'],['avoid']
Safety,"I would like to reopen the issue regarding the dry run. When having turbomachine settings on, the dry run fails when calculating (preprocessing the turbomachine geometry) with the following error:. - Case Testcases APU_Turbomachinery; - Version 7.5.1 ; - Command: SU2_CFD -d Jones_restart.cfg. ```; ---------------------- Turbomachinery Preprocessing ---------------------; Initialize Turbo Vertex Structure.; Number of span-wise sections in Zone 0: 0.; Number of span-wise sections in Zone 1: 0.; Max number of span-wise sections among all zones: 0.; Initialize solver containers for average and performance quantities.; Compute inflow and outflow average geometric quantities.; Set span-wise sections between zones on Mixing-Plane interface.; Transfer average geometric quantities to zone 0.; [---] *** Process received signal ***; [---] Signal: Segmentation fault (11); [---] Signal code: Address not mapped (1); [---] Failing at address: 0x8; [---] [ 0] /lib/x86_64-linux-gnu/libc.so.6(+0x43090)[0x7ffa2d583090]; [---] [ 1] SU2_CFD(+0x5e6dc4)[0x55c98b9dedc4]; [---] [ 2] SU2_CFD(+0x1ab51e)[0x55c98b5a351e]; [---] [ 3] SU2_CFD(+0x1bc2d3)[0x55c98b5b42d3]; [---] [ 4] SU2_CFD(+0x201b26)[0x55c98b5f9b26]; [---] [ 5] SU2_CFD(+0x151f79)[0x55c98b549f79]; [---] [ 6] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7ffa2d564083]; [---] [ 7] SU2_CFD(+0x171b3e)[0x55c98b569b3e]; [---] *** End of error message ***; Segmentation fault; ```. i guess in the dry run mode, some algorithm are ignored and therefore the segmentation fails. ; I was wondering: . 1) Are there any additional output variables that come with the turbomachinery settings (besides those, available in the folder) . 2) If not, available output for the solver can be achieved by just dry running a case that has the same solver but no turbomachine settings on. Maybe a flag in the dry run option could be implemented on, that deactives the turbomachine settings in the case, to avoid the error message.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/857#issuecomment-1623092119:1951,avoid,avoid,1951,https://su2code.github.io,https://github.com/su2code/SU2/issues/857#issuecomment-1623092119,1,['avoid'],['avoid']
Safety,"I'll merge this one to make the diff on my other PR's cleaner, but feel free to comment if you see something that does not look right.; I think these are fairly safe changes bug-wise, CEdge does not have a lot of methods and so I did this almost manually.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/959#issuecomment-622496979:161,safe,safe,161,https://su2code.github.io,https://github.com/su2code/SU2/pull/959#issuecomment-622496979,1,['safe'],['safe']
Safety,"I'll merge this since it avoids confusion for people trying to use a feature that does not exist, it is all in one commit so it should be easy enough to revert if it becomes needed.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1153#issuecomment-757463538:25,avoid,avoids,25,https://su2code.github.io,https://github.com/su2code/SU2/pull/1153#issuecomment-757463538,1,['avoid'],['avoids']
Safety,"I'm not in a hurry, but I would not want to upset the stalebot. Practical consideration regarding storing the CFL, do we have to? In the discrete adjoint we always to a dry run before the real recording, maybe that could be use to recompute the CFL at 0 overhead?; I don't mind outputting the CFL, but it would be nice if we could avoid complexifying the restart logic further.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1036#issuecomment-739061041:331,avoid,avoid,331,https://su2code.github.io,https://github.com/su2code/SU2/pull/1036#issuecomment-739061041,1,['avoid'],['avoid']
Safety,"I'm with Juan on this... an in-house option in C++ would be best to avoid dependencies and have control of the algorithms for further tuning and easier application throughout the codebase. If anyone is willing to give it a shot, please let us know, and we can help with integration.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/282#issuecomment-224838550:68,avoid,avoid,68,https://su2code.github.io,https://github.com/su2code/SU2/issues/282#issuecomment-224838550,1,['avoid'],['avoid']
Safety,"I've been doing some recreational reading on strategies that people have used for vectorization of fluxes but so far I have not thought of a way to reconcile them with the nice encapsulation we have of the numerics. For gradients (at least GG) and limiters on the other hand I do have ideas. By the way is there a branch on the repo for the work you, Francisco, Intel, and others did on this kind of stuff?. Yeah making solution variables members of the solver would avoid a lot of virtual calls but it would make it harder to eventually reach the solution for post processing, or in other areas like Integration/Iteration where the solution is manipulated directly by non-solver classes, we will see...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-513171591:467,avoid,avoid,467,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-513171591,1,['avoid'],['avoid']
Safety,"I../externals/metis/libmetis -I../externals/parmetis/include -I../externals/parmetis/libparmetis -ICommon/src/./ -I../Common/src/./ -I/app/intel/intel2018/impi/2018.3.222/intel64/include -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fPIC -Wno-unused-parameter -Wno-empty-body -Wno-format-security -Wno-deprecated-declarations -Wno-non-virtual-dtor -DNDEBUG -DHAVE_MPI -DHAVE_METIS -DHAVE_PARMETIS -MD -MQ 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -MF 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o.d' -o 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -c ../SU2_CFD/src/output/CHeatOutput.cpp; icpc: command line warning #10006: ignoring unknown option '-Wno-empty-body'; ../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/allocation_toolbox.hpp(79): **error: the global scope has no ""aligned_alloc""; ptr = ::aligned_alloc(alignment, size);**; ^; detected during:; instantiation of ""void container_helpers::AccessorImpl<Index_t, Scalar_t, Store, AlignSize, 0UL, 0UL>::m_allocate(size_t={unsigned long}, Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL]"" at line 411 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""size_t={unsigned long} C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::m_resize(Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL, StaticRows=0UL, StaticCols=0UL]"" at line 445 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols> &C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::operator=(const C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols> &) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=Storage",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620066614:1276,detect,detected,1276,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620066614,1,['detect'],['detected']
Safety,"If I recall correctly @tobikattman was dealing with a similar issue; (relating local markers to global ones) on his symmetry boundary condition; pull request. I think it would be worth keeping the ADT as clean and; generic as possible. On Mon, 9 Mar 2020, 19:32 Akshay.K.R, <notifications@github.com> wrote:. > Do I understand correctly that the roughness height does not influence the; > wall distance calculation itself?...; >; > @pcarruscag <https://github.com/pcarruscag> , Yes. I can use the markerID; > to find the corresponding roughness as long as the field element and the; > nearest wall marker are on the same rank. I was not sure how to relate the; > markerID on rankID from a different rank to the global config list, hence; > the current implementation. I am open to fixing it with a different; > implementation if I can figure out how to actually do it. The few things I; > tried all ended up causing problems and this was one way to avoid them; > (also my inexperience with MPI did not help).; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/877?email_source=notifications&email_token=AJCOXNZA5Z2CBAXSTXG7BTTRGUY3XA5CNFSM4KVE7ON2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEOIQ3CA#issuecomment-596708744>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN2KX3BY5CXBZFKIMM3RGUY3XANCNFSM4KVE7ONQ>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-597205550:949,avoid,avoid,949,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-597205550,1,['avoid'],['avoid']
Safety,"If modifying the configure is necessary, I can help with that, but I think Tim is suggesting we just use the MPI_VERSION macro that is already defined by the implementations within the C++ (correct me if I am wrong). So, we could check for MPI_VERSION > 3, for instance. However, I think that in some older implementations this may not be defined, in which case we should default to something safe.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/574#issuecomment-419880168:393,safe,safe,393,https://su2code.github.io,https://github.com/su2code/SU2/pull/574#issuecomment-419880168,1,['safe'],['safe']
Safety,"If no internet connection is available, you have to download the appropriate submodules manually and place them in the root folder:. https://github.com/scicompkl/CoDiPack/archive/501dcf0305df147481630f20ce37c2e624fb351f.zip ; https://github.com/scicompkl/MeDiPack/archive/edde14f9ac4026b72b1e130f61c0a78e8652afa5.zip; https://github.com/mesonbuild/meson/archive/0435691e83fb7172e2a9635d2eb32d5521089916.zip; https://github.com/ninja-build/ninja/archive/2d15b04e411229cb902332957281622119025e77.zip . This information should be printed when no internet connection is detected, unfortunately there is a small bug in the current master branch that prevents that. A fix will be included in the next release. . Otherwise, you can also just run meson.py once on a computer with internet and then copy it to the other machine.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-619937697:566,detect,detected,566,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-619937697,1,['detect'],['detected']
Safety,"If you add GRID_VELOCITY to VOLUME_OUTPUT the 2nd order restart will work properly in 7.1.1, this will not be needed in future versions.; Restarting the solver does not recover precisely the same values as letting it continue the simulation, I do not have an explanation for this (or time to look for it unfortunately) but it may be why you have crashes with some iterations but not others (combined with the case being sensitive).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1287#issuecomment-843195621:169,recover,recover,169,https://su2code.github.io,https://github.com/su2code/SU2/issues/1287#issuecomment-843195621,1,['recover'],['recover']
Safety,"If you are interested, @vdweide spent considerable time between 2003 and 2008 writing a multiblock-structured turbo machinery code called SUmb, as part of the DoE ASCI program. SUmb, although written in Fortran90/95, had all of the interpolation capabilities that you need for turbo machinery computations when radial inlet / outflow profiles (Tt, Pt, flow angles, static pressure, etc.) are given as inputs on a radial grid whose spacing does not match that of the actual computational grid. You may consider creating some interpolation functions (with all the safeguards and error codes) in C++ based on the SUmb code (which was structured in a C++-like way) or at least take inspiration from that approach to identify interpolation utilities / libraries in C++ that could be used for the same purpose. Both @vdweide and I can provide you with access to the appropriate routines / functions in SUmb. On Sep 20, 2019, at 3:30 PM, Aman uz zaman Baig <notifications@github.com<mailto:notifications@github.com>> wrote:. @clarkpede<https://github.com/clarkpede> Thanks for your response! My work in focused on Turbomachinery and very frequently we need to have inlet profiles. I hope my work will give a neater, cleaner way of making this possible, though I also used python scripts in the past. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/791?email_source=notifications&email_token=AA5FFRDZYQ56RTPMG7RHC6DQKVFJ5A5CNFSM4IYRTZJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7IBREI#issuecomment-533731473>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA5FFRCUZWNCGUIGYDSADO3QKVFJ5ANCNFSM4IYRTZJA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/791#issuecomment-533740827:562,safe,safeguards,562,https://su2code.github.io,https://github.com/su2code/SU2/issues/791#issuecomment-533740827,1,['safe'],['safeguards']
Safety,"If you have a solution that allows you to use system-wide via an option and self-contained by default, please open a pull request.; As long as this option warns about having to manage dependencies manually I'm fine with it.; If you know a clean way of detecting the system-wide ninja and bypassing the ninja dependency that would also be an improvement.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1945#issuecomment-1450430036:252,detect,detecting,252,https://su2code.github.io,https://github.com/su2code/SU2/issues/1945#issuecomment-1450430036,1,['detect'],['detecting']
Safety,"In order to plausibilize the results in a first step I took the fluid-domain of the streamwise periodic 2D-cht testcase .; 1. h=0 <=> adiabatic wall, i.e. heatflux=0; 2. h>>0 <=~> isothermal wall with Twall = Tinfinity. which the results recover (I also checked that nondimensionalization works correct) :+1: See the archive below for mesh and cfg files. See also below for some images. Note though that the definition of the heat-transfer/convection bc above in the PR-header is not correct. the heatflux computes to:. `q=h (T_infinity - T_wall)` with. `h` the the heat transfer coefficient (to be set in config by the user). `T_infinity` the reference temperature at infinity (to be set in config by the user). `T_wall` the the current local temperature of the specific FV-cell (of course done by the code). [htc-cases.tar.gz](https://github.com/su2code/SU2/files/6893231/htc-cases.tar.gz). The first two are for the isothermal case 2. (nondimensionalized). There is still a ~2.5K gap but I cannot go higher with h then 1e5 as I got bad convergence then. . *EDIT 29.07.2021: * In a comment below @pedro pointed out that one should/could add the Jacobian contribution from that bc. Doing so resolves the previously seen (and here documented) convergence issues with high `h`. Running the case again with h=1e8 converges nicely and results in an averaged surface temperature of exactly 400K üëç . ![image](https://user-images.githubusercontent.com/31306376/127329398-65c4fdb2-2c1c-4657-bf1f-451624de87e0.png); ![image](https://user-images.githubusercontent.com/31306376/127329428-39ec0ef5-2c7b-4df6-8fb5-8ca7778b818d.png). For heatflux=0 and h=0 the results are (as expected) completely identical, the diff between the screen outputs is only that one uses a different bc in that `config file boundary information` tab; ![image](https://user-images.githubusercontent.com/31306376/127329459-ca9c0f26-a69e-498b-ae5a-31dbedf778cf.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1226#issuecomment-888307312:238,recover,recover,238,https://su2code.github.io,https://github.com/su2code/SU2/pull/1226#issuecomment-888307312,1,['recover'],['recover']
Safety,"In terms of file organisation I can think of two strategies, one would be grouping them according to parent class, numerics, solver, etc. this would maybe make navigation easier for people who work on the code daily but it does little more than what the naming convention already does. The other would be to group families of classes and that, I think, would help people who are less familiar with the code, so for example numerics, solvers, variables, etc. used for fluid simulations would be separate from the ones used for other physics. The main re-compilation trigger is probably the config, every file includes it and not all need it. Not much can be done here because most classes do use the config in some way but we could try to minimise how much the dependency spreads by:; - Reviewing what cpp files actually need to include config_structure.hpp; - Including from the cpp and using a forward declaration on the corresponding hpp. Other sensitive ""triggers"" are the header files of classes with many children (solver, numerics, and variable) splitting the header files for these (maybe by family for small classes to avoid an explosion of hpp files) would allow working on a child class without re-compiling all others so often. The clients of CSolver would only include the header for the abstract class so those too would be shielded from changes in children classes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-423970045:1127,avoid,avoid,1127,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-423970045,1,['avoid'],['avoid']
Safety,"It does output the file, Paraview & Tecplot formats (binary & ASCII) both work. However, I need the raw data as I will be subjecting it to a Machine Learning Algorithm in Python. Manually deleting the lines for cell numbers in Tecplot format is an additional time consuming step, that hinders full automation. Hence a simple file as flow.csv (CSV format) may help me run it more efficiently. 1. Ganti, Himakar & Khare, Prashant. (2018). Spatio-Temporal Prediction of Gaseous and Liquid Spray Fields using Machine Learning. 10.2514/6.2018-4760. . 2. Ganti, Himakar & Kamin, Manu & Khare, Prashant. (2019). Design Space Exploration for Vaporizing Liquid Jet in Air Crossflow using Machine Learning. 10.2514/6.2019-2211.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-528453362:453,Predict,Prediction,453,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-528453362,1,['Predict'],['Prediction']
Safety,"It seems like your situation may have been resolved, but for archival purposes, I'll list my workaround here. This problem occurs when you've installed python packages in two different locations. This could be due to installing some python packages in a system directory (e.g. `/usr/lib/`) and some in a user directory (e.g. `~/.local/`). SU2's build process is set to automatically detect the default package location, but it's not equipped to handle multiple package locations. There are some hardcoded includes, but these only work for python 2.7. I don't consider this a bug *per se* because multiple python package directories is not a standard use case. #### The symptoms. When building SU2 with the python wrapper you'll see the following error during the swig build:; ```; <install directory>/../SU2_PY/pySU2/pySU2.i:64: Error: Unable to find 'mpi4py/mpi4py.i'; ```; But mpi4py is indeed installed on your system and it's on your python path, as confirmed by opening a python terminal and running `import mpi4py`. #### The easiest workaround. Switch to a [virtualenv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). This will ensure that all of your python packages are stored in single location. #### Alternate workaround. In this method, you change the hardcoded includes to match mpi4py's package location. First I figure out where my mpi4py is installed. I start a terminal session of python using the python environment I want to use (in this case, it's python 3.6), and then run:; ```; from mpi4py import MPI; MPI; ```. Since I have mpi4py installed on your system and it's on my python path, I see something like:; ```; <module 'mpi4py.MPI' from '/home/clarkpede/.local/lib/python3.6/site-packages/mpi4py/MPI.cpython-34m.so'>; ```. The `/home/clarkpede/.local/lib/python3.6/` directory is where my mpi4py package is installed. But the swig compile command includes `/home/clarkpede/.local/lib/python2.7/`. That's not the right directory! So first I ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/722#issuecomment-515693590:383,detect,detect,383,https://su2code.github.io,https://github.com/su2code/SU2/issues/722#issuecomment-515693590,2,['detect'],['detect']
Safety,"It should be emphasized that we do not modify nor change the model formulation (terms, constants, coefficients, etc.) The Lower limit clipping of K and omega used currently in SU2 are not a part of the model formulation. It is a numerical fix to avoid negative values. To the best of our knowledge there is no formal lower limit given by Mentor or anyone else and current values in SU2 are taken arbitrarily. Based on our twenty years of experience, using the lower limit suggested will lead to a more robust scheme without compromising the quality of results. This has been demonstrated in the attached figures .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2323#issuecomment-2223408382:246,avoid,avoid,246,https://su2code.github.io,https://github.com/su2code/SU2/pull/2323#issuecomment-2223408382,1,['avoid'],['avoid']
Safety,"It's ok, I'll have a look today or tomorrow to see if there is some way to recover those precious deleted lines.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1449#issuecomment-974631156:75,recover,recover,75,https://su2code.github.io,https://github.com/su2code/SU2/pull/1449#issuecomment-974631156,1,['recover'],['recover']
Safety,"Juan,. Indeed, it is desirable that at the highest level the details of the time integration scheme and number of zones per discipline should not be visible. The question is whether that is achievable for all combinations you can think of. This is especially the case for the time integration schemes. E.g. suppose you would like to use a multi-stage time integration scheme for a multi-physics problem. To obtain the design accuracy in time, this implies that the loop over the number of time stages is outside the loop over the number of physical disciplines. Hence at a very high level in the hierarchy, the details of the time integration should then be known. The situation becomes even more complicated when one would like to employ time integration schemes that allow for time accurate local time stepping, e.g. the ones we are currently working on for the DG solver. I won't bore you with all the details here, but those schemes basically require the loop over the multiple disciplines to be between the predictor and corrector step, while both these steps consist of multiple stages. Although it is probably possible to come up with a data structure that supports all this, the question is whether this is desirable. Apart from the fact that it would require a major overhaul in the high level design of SU2, the implementation will be less readable, especially for people that will be starting with the code. Also the parallelization may become significantly more complicated. The alternative is that for unsteady multi-physics problems, we put the restriction that only single stage time integration schemes can be used, e.g. DT_STEPPING_1ST and DT_STEPPING_2ND. In that case, the details of the time integration scheme can be hidden at the driver level, where we then simply have a loop over the number of physical disciplines. The consequence of course is that more advanced time integration schemes will not be available for multi-physics problems. In the above I just tried to picture w",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/437#issuecomment-328441926:1012,predict,predictor,1012,https://su2code.github.io,https://github.com/su2code/SU2/issues/437#issuecomment-328441926,2,['predict'],['predictor']
Safety,"Just an update: There is now WRLES data for the axisymmetric transonic bump case on the NASA Turbulence Modeling Resource. The data includes pressure, turbulent kinetic energy, and density. While the WRLES is not ""ground truth,"" it is a reliable data source for comparison. Sometime over the next few weeks, I'll compare the WRLES data with the SU2 results, including some of the possible changes. This will give us a better idea of how these model changes impact the predictive accuracy.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/797#issuecomment-649816660:468,predict,predictive,468,https://su2code.github.io,https://github.com/su2code/SU2/issues/797#issuecomment-649816660,1,['predict'],['predictive']
Safety,Just as @economon I also had to `git submodule update --init` and I had the same `ERROR: Could not detect Ninja v1.5 or newer`. I am running on a RHEL Server 7 with git 1.8.3; I got everything to run after running the `./bootstrap.py` in `externals/ninja/` and adding that very directory to my PATH.; Two small hints for everyone trying: ` ./ninja -C build -j #cores` and the SU2_CFD binary is then in `<repo-root>/build/SU2_CFD/src/`. The QuickStart ran fine for me. It also ran perfectly in parallel without further ado. Is there already an AD-build? I would like to see/make a build speed comparison with auto- and directdiff enabled.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/685#issuecomment-495368696:99,detect,detect,99,https://su2code.github.io,https://github.com/su2code/SU2/issues/685#issuecomment-495368696,1,['detect'],['detect']
Safety,"Just as an information: I enabled CodeFactor to check the pull requests for tabs and white-spaces (I added CPPLINT.cfg file in the develop branch). However, this configuration does not work properly for PRs that are already open, they still use the default config. That is the reason why it is complaining about ""Redundant blank line .."" For new PRs it should work properly.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/808#issuecomment-550000663:313,Redund,Redundant,313,https://su2code.github.io,https://github.com/su2code/SU2/pull/808#issuecomment-550000663,1,['Redund'],['Redundant']
Safety,"Krishna,. Thanks for your contributions. I have a couple of questions...; 1. Can the dockerfiles be made more general so that a user does not need to manually change the paths, i.e., avoid having the pathname on your machine hard-coded?; 2. The config generator is nice (it seems to even be working in Safari), but I have one concern: can it be made to automatically track the current available options in the code since these change somewhat frequently? For instance, we have a gui utility that does this in Python by parsing the config_structure.cpp file for current options (SU2_PY/config_gui.py). Can your web-based tool be made to do something similar?. Tom",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/172#issuecomment-126105709:183,avoid,avoid,183,https://su2code.github.io,https://github.com/su2code/SU2/pull/172#issuecomment-126105709,1,['avoid'],['avoid']
Safety,MARKER_ROUGHWALL is fine too. Do you want some help with the MPI to avoid setting data into the config? (I don't want to create too much friction but that is something that should really be avoided).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-652641123:68,avoid,avoid,68,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-652641123,2,['avoid'],"['avoid', 'avoided']"
Safety,"May I add my 10 cents: I also encountered this problem, starting from ver 7 if I recall correctly. It happens on a cluster using rdma protocol and NFS, with Redhat Linux (matches the Centos configuration listed above). It doesn't happen on a single machine with several cores using Ubuntu (my LT). Fortunately, it aborts after all writing is complete... Moving to ascii output (RESTART_ASCII, READ_BINARY_RESTART=NO, WRT_BINARY_RESTART=NO had no effect (still aborts).; I think that it is a problem related to the machine setup/system SW. However, it doesn't happen with other codes or previous versions of SU2.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-624457511:314,abort,aborts,314,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-624457511,2,['abort'],['aborts']
Safety,"Maybe CNumerics is not the perfect place, but it is good enough for government work (there are much more misplaced things in there). The ""everything is class"" OO approach applied to the lowest level of abstraction is... well I think it is terrible -- and it has taken me a mighty long time to get rid of it in CPoint and CVariable and to design alternative Numerics -- because:; - Boilerplate: Set this, get that, constructor, destructor;; - Thread safety: Those classes always end up having some mutable state that renders them thread-unsafe;; - Correctness: Many of the classes we have follow this paradigm of ""pass by member variable"" - I like to know what are the inputs and outputs of something just by looking at the signature;; - Slowww: Too much virtual;; - Unnecessary complexity: A case of using a canon to kill the mosquito, good code should be as simple as possible, if a function does the job then that is the level of abstraction we should use. My introduction to C++ was also the ""everything is class"", then one day I read ""From Mathematics to Generic Programming"" and well, I started liking C++ a whole lot more.; The standard template library is incredibly successful, and it ""just"" provides some containers and generic algorithms which are functions. That is what we need in SU2, some decent containers and generic algorithms to operate on them. OO and its patterns are very good high level tools to achieve encapsulation and to isolate code, which are very important for projects with millions of lines of code, but for low level things they are overkill. Sorry for the rant, I guess I have strong feelings about tiny classes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-742629412:449,safe,safety,449,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-742629412,4,"['safe', 'unsafe']","['safety', 'unsafe']"
Safety,Maybe it makes more sense to have this changes in a separate branch for now ? This way we avoid potential problems for others in case there are some modifications of this config option necessary during the final implementation of the wall functions.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/435#issuecomment-329400246:90,avoid,avoid,90,https://su2code.github.io,https://github.com/su2code/SU2/pull/435#issuecomment-329400246,1,['avoid'],['avoid']
Safety,Maybe we can avoid creating another instance is the surface_movement pointer is not nullptr when the init function is called? In CDriver we would just make sure all surface_movement are initialized to nullptr.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2018574171:13,avoid,avoid,13,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2018574171,1,['avoid'],['avoid']
Safety,"Nice analysis @clarkpede. It is true that we simplify the Jacobians at the periodic boundaries, mostly to avoid issues with adding entries to the Jacobian from the neighbors that potentially do not live on our rank and to keep communication costs low (those neighbors are treated explicitly). This could be changed to communicate the full Jacobian.. but I am not sure it is worth the effort/cost. The approximation that is made should still be consistent though, because we only allow one of the repeated periodic nodes to participate in the linear solve with each nonlinear iteration, and then we communicate its update to its periodic pair. In short, the value of the solution should always be the same on periodic points with each iteration update, and if the problem converges to a steady-state (even in time stepping mode), the Jacobian should only affect convergence (the RHS should be the same). You could try the time stepping option with one of the RK methods to see if going fully explicit helps further isolate the issue. It could also be something related to the time step that is communicated. In the SetTime_Step() routine in the flow solver class, we do some special checks for time stepping mode to make sure that the minimum global time step is used in all cells. Might want to print out the dT communicated in the periodic comms or write the dT to the solution file to make sure everything is ok there too. Honestly, I don't think a ton of folks use the time stepping option in general with the FVM solver, so double-checking that it behaves well for a non-periodic problem could shed some light too, unless you have already done that.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/763#issuecomment-524007345:106,avoid,avoid,106,https://su2code.github.io,https://github.com/su2code/SU2/issues/763#issuecomment-524007345,2,['avoid'],['avoid']
Safety,"Nice post @pcarruscag : I think we can gain a lot by first breaking up the files, especially the headers, and then being much better about include statements. In particular, we can look at forward declarations, using more guards, and just minimizing the number of includes (I expect some are redundant). As far as breaking up the files, I think geometry is a good place to start. I can take a shot at this first soon. . More ideas out there? Anyone have some bandwidth to experiment a little with the headers?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-424215054:292,redund,redundant,292,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-424215054,1,['redund'],['redundant']
Safety,"Nice progress @pcarruscag!. I like the concept of your SIMD-friendly class that will take care of the data structure under the hood coupled with a standard type of loop statement (w/ +SIMDLEN). This should make it pretty easy for folks to still modify the kernels without having to worry about the data alignment, and they can reuse the same simple 'for' construct repeatedly. . Another reason to have our own lightweight class for this is that you can avoid dependence on OpenMP for SIMD (although that feature looks to have potential and wasn't available until somewhat recently) as well as the intrinsics. In my experience, the latter is especially bad for portability and readability (part of why we left the CaF work in a separate repo). It starts to become so specialized that compiling and modifying become difficult. W.r.t. OpenMP, another roadblock there a few years ago was making sure it is interoperable with CoDi for the adjoint, but I know this has been worked on and may be available by now. Might keep an open mind about point vs. edge. In some places, we may be able to pump up the compute in our loops by fusing kernels, as previously discussed (and I am guessing you are working on this already with gradients/limiters). Could change the final performance numbers significantly. Lastly, I know you are not there yet, but it is worth considering whether you can reuse anything you are developing in the kernels here for the linear solver routines. At some point, you will successfully reduce the cost of the residual kernels (RHS) to the bandwidth limit, and the majority of the iteration cost will be in the linear solver (it is already about 50% of the iteration cost before optimization, if I recall). Before making final decisions on strategy, you should consider if it will help in any of the linear solver routines too.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530440072:453,avoid,avoid,453,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530440072,2,['avoid'],['avoid']
Safety,"No meson option yet, it is a very small one though, the whole system works by detecting `-fopenmp`.; Your second comment is the main argument against moving the parallel section further up.; Allocation routines have the highest risk of making a mess, but even seemingly innocuous things like the small auxiliary arrays we allocate e.g. in CSolver and then use in derived classes are a problem.; I am almost done making the FEA solver completely hybrid parallel and I had to refactor most uses of those arrays. This is also why I took a more functional approach to the new limiter and gradient routines. The way we use CConfig is also not thread safe, we would need to make all ""SetSomethings"" atomic, which would be monumental.; Initially I would have a few parallel sections (it is not too difficult to then move them up if we think that is the way to go) I want to use the FEA solver to get an idea for the relative performance, after seeing the effect of `OMP_WAIT_POLICY` I am optimistic.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-566667503:78,detect,detecting,78,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-566667503,3,"['detect', 'risk', 'safe']","['detecting', 'risk', 'safe']"
Safety,"No not really, it is a fairly safe thing to change but it only makes sense to do it if the CFL is also increased. I did not make it default at the time because many cases would change over 2 lines of code...; Maybe it can be done now as part of #790? I can help you with the testcase updates.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/711#issuecomment-540995151:30,safe,safe,30,https://su2code.github.io,https://github.com/su2code/SU2/issues/711#issuecomment-540995151,1,['safe'],['safe']
Safety,"No, switching to first order is not a proper solution so I agree on avoiding doing this. The only possible thing I would add is to take into account the inlet and outlet boundary conditions in the computation of gradients at boundary points, but this could be a separate issue altogether.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2285#issuecomment-2449820746:68,avoid,avoiding,68,https://su2code.github.io,https://github.com/su2code/SU2/issues/2285#issuecomment-2449820746,1,['avoid'],['avoiding']
Safety,"Oh and let's please discuss the plan for modifying the code in one of the developer meetings.; It would be good to start just with the options that are in the code and clean them up to avoid duplication, which would probably give some clues for how to handle new options without duplicating anything.; To do this safely we should have unit tests for each of the source terms (because I doubt we have full coverage in the regressions for all turbulence options).; etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1364#issuecomment-907393264:185,avoid,avoid,185,https://su2code.github.io,https://github.com/su2code/SU2/issues/1364#issuecomment-907393264,2,"['avoid', 'safe']","['avoid', 'safely']"
Safety,Oh right... It was there all along and I missed it. Hope you don't mind I made that consistent and merged the velocity prediction with the displacement prediction.; And so everything LGTM.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-822335132:119,predict,prediction,119,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-822335132,2,['predict'],['prediction']
Safety,"Ok the ""simple"" version of ""going parallel"" whenever we get to a linear algebra operation did not make the cut.; On an older architecture there was a 10% slowdown of the linear solvers at ~10k nodes per core and about the same on a newer architecture but only at ~1k node per core.; Since hybrid parallel is supposed to be good for strong scaling, this was not good enough... With the new strategy it is ok (see ""performance"" below), hence this is ready for review. ### Overall Strategy; The strategy now is to start a parallel section in CSysSolve::Solve that covers building the preconditioner and solving the linear system.; Linear algebra routines called within this section have _worksharing_ constructs instead of _parallel_ ones, i.e. the work is distributed by however many threads arrive to that routine. This also makes the routines safe to call in serial.; The only ""dangerous"" things to do in parallel are to: manage memory for a shared object (multiple threads call `new` but there is only one shared pointer on which to call `delete`); writing to the same memory locations concurrently.; I tried to make the first issue debugable by asserting that the initialization routines of CSysMatrix and CSysVector are only called by the master thread.; For the second issue I made the associated classes as const-correct as possible, that should at least make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does n",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:843,safe,safe,843,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['safe'],['safe']
Safety,"Ok, SIMD update, with #753, #959, and #966 we now have a unified storage type for the data we need in CNumerics. This means that we (I) only need to implement ""SIMD accessor methods"" (i.e. that return a SIMD type instead of a su2double) for one class (C2DContainer and co.). I think to do SIMD right we need a new way of going about CNumerics, these are my design requirements for ""CNewNumerics"":; - Thread-safe (consequently const-correct), a single object must be safe to use by multiple threads.; - Minimal indirection, the polymorphic overhead will be reduced to a single call (ComputeResidual), all auxiliary functions (like the ones that live in CNumerics) will be forcefully inlined, no useless copies of data (no more numerics->SetBlaBla).; - Compile time nDim/nVar, which will: a) avoid heap allocations; b) allow effective loop-unrolling (also during the writes to CSysMatrix).; - Allow low-overhead composition, e.g. have one CRoe for Euler and one CRoeVisc for NS to fuse convective and viscous residuals (without copy pasting code).; - A lot more readable, those cryptic V_i[iDim+1] need to go (somehow...). To achieve all this, the ""CNewNumerics"" will work as a template (obvs) decorator/visitor.; A visitor in the sense that the solver calls the numerics and gives it (read-only) access to all its data, the object pulls whatever it needs directly and there is no need for numerics->SetBlaBla.; A template decorator in the sense that the class can be augmented simply by inheriting from another, along the lines of `class CRoeVisc : public CRoe, public CVisc` (to allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not por",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:407,safe,safe,407,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,6,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"Ok, changed it to 1000. Results changed only slightly. ; Got now; Iter Time(s) Res[Displx] Res[Disply] Res[Displz] CFEM(Total); Org: 0 34.920000 -8.498275 -8.230640 -8.123825 6.4095e+04; Reci 0 20.430000 -8.498260 -8.230796 -8.123818 6.4095e+04; Quad 0 25.000000 -8.498253 -8.230661 -8.123815 6.4095e+04; (Times are irrelevant - all calcs. do all types redundant).; How to continue? ; My (nasty, debugging) source used is a tiny 320 line C-code called as external ""C"". There I can select which method to be passed to the callee. I stepped with Totalview through all and found, that in GaussElimination the divisions (no matter how, except for the QUADs) are sometimes only accurate to the 14th decimal which is not unusual for double precision (checked with hand calculator in quad precision).; After all, Res is log10(of something) and ""of something"" differs in displx by 1,6e-13, that is a relative error of 5e-05",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/347#issuecomment-276675208:353,redund,redundant,353,https://su2code.github.io,https://github.com/su2code/SU2/issues/347#issuecomment-276675208,1,['redund'],['redundant']
Safety,"On an added note to this topic, and to avoid some future hassle, I have collected a list of active branches (updated within the last 3 months) that are currently falling far behind the last release:. - feature_boom; - feature_caa; - feature_turbo; - feature_turbo2phase; - feature_adjoint_lut; - feature_transp_part; - feature_turbo_aeroelastic; - feature_gradientNorm. I would strongly encourage to regularly update with develop to ensure the future merging process is as smooth as possible, particularly when we start moving files around.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/583#issuecomment-423180781:39,avoid,avoid,39,https://su2code.github.io,https://github.com/su2code/SU2/issues/583#issuecomment-423180781,1,['avoid'],['avoid']
Safety,"On the subject of virtual functions I would like to put another idea forward.; After moving things around in #725 I noticed that we have tons of `inline virtual` methods.; The keyword `inline` has two meanings to the compiler:; - ""Dear merciful compiler please copy paste the body of this function and then do all your wonderful optimizations, if that pleases your excellency.""; - ""Dear forgiving compiler, you will find this method defined in multiple units, please don't be mad"" (i.e. ignore the one-definition-rule). `virtual` means determine what version of the method to call at runtime. This is not compatible with the first (and often the intended one) meaning of inline, therefore the compiler will in general not inline those methods.; They will only be inlined if they are being called on a pointer to the derived class that does not declare the method to be virtual anymore. CSolver knows what variables it creates and so in hot areas of the code it could do a static downcast to allow inlining (e.g. `static_cast<CEulerVariable*>(node[iNode])->DoStuff()`).; Where is this important? For example when computing gradients, where simple additions and subtractions are hidden behind virtual functions.; If you are worried about maintenance each solver can typedef its most safe downcast level or better yet (or just more modern), methods that could benefit from this can be templated for the type of downcast.; Those in favour say Yea those against say Nay.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-509273008:1281,safe,safe,1281,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-509273008,2,['safe'],['safe']
Safety,"Our proposal does not relate to the SST's good behavior (iThe SST model is not sensitive to Omega freestream value: it is because of the addition of the cross-diffusion term, which was absent in the original Wilcox model). The current implicit treatment in the SU2 may generate a negative solution that is not physical. A low limit value is available in the code to avoid a negative solution. This means the solution is clipped to this value if the solution reaches a lower value. There is no single absolute low-limit value that is suitable, for example, issues with dimension vs. non-dimension form. Our proposal circumvents this problem. The current situation in the code is not robust. We suffer from many robustness issues, especially with the SST2003 model. However, using our proposal significantly enhanced the solver's robustness. The current situation is like a ""bug"" because it may interfere with the solution. We understand that our idea requires a lot of effort and that it would make the code unreproducible. Therefore, we would like to suggest the following: Give the user an option to control these low-limit values. The default values will be according to the hard-coded values. We also strongly recommend adding additional user low-limit values control according to our proposal. The user will be able to decide which option he prefers. Our end goal is to design the implicit treatment so that these low-limit controls will be almost redundant. Based on several publications I've made during the last 15-20 years, my code enjoys this feature.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2323#issuecomment-2231452852:366,avoid,avoid,366,https://su2code.github.io,https://github.com/su2code/SU2/pull/2323#issuecomment-2231452852,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Pedro Gomes ***@***.***>; Sent: Tuesday, March 23, 2021 1:40 AM; To: su2code/SU2 ***@***.***>; Cc: Avish Suresh Bhambhani Wadhwani ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] Microsoft MPI not read, WIndows 10 (#1233). Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it. ‚Äî; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsu2code%2FSU2%2Fissues%2F1233%23issuecomment-804498319&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150583134%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2BpP5qwT1upuD56kAXXvmDMqq%2B5lTmsMaJ6%2Fgx7gHoyM%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FATHYUQAJN6RB6GCI7QDTE7LTE7POTANCNFSM4ZHARKPQ&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150593131%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=KJACa6bUpNomvHIrZDe0%2FoMQ3DeJTksfdC5nwoHPTWk%3D&reserved=0>. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email direc",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-827721160:2063,safe,safelinks,2063,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-827721160,1,['safe'],['safelinks']
Safety,"Probably not, it was a silly idea anyway. Maybe you could perturb the target value of CL instead and measure the variation of alpha for an imposed variation of CL but that is starting to sound quite strange. I don't known how the process to find the alpha that gives you a given CL works, but could the derivative not be obtained from this process? i.e. you could avoid the FD step entirely. Edit: Regardless of how the process works, you can always do one more update of alpha to refine CL and take those two points for the finite difference, i.e. you never do an explicit perturbation and the final state is guaranteed to be the best.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539587908:364,avoid,avoid,364,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539587908,1,['avoid'],['avoid']
Safety,"Provocative thought of the day: Removing the numbers from the enums is a bit of spring cleaning, the ""modern C++"" way is to use `enum class` and to never rely on implicit conversions from enum to integer type.; In any case, it should be safe to remove the numbers when they already start at zero.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1242#issuecomment-805010330:237,safe,safe,237,https://su2code.github.io,https://github.com/su2code/SU2/pull/1242#issuecomment-805010330,1,['safe'],['safe']
Safety,"Realized I never followed up. I did not find a programmatic way to detect this. I think the best solution is to have people use your work-around file if they are stuck with an old compiler. When aligned_alloc becomes a required part of SU2, we may need to include a minimum compiler version requirement for the code. IMO, it is too much to continually write code that supports ancient compiler versions.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-778501880:67,detect,detect,67,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-778501880,1,['detect'],['detect']
Safety,"Regrading the results: Why do we not see the dip in skin friction coefficient for low Reynolds like we see in the paper of Rumsey? The paper shows that predicting this dip is a feature of the model, and it makes it different from the van Driest theory.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2271#issuecomment-2082038290:152,predict,predicting,152,https://su2code.github.io,https://github.com/su2code/SU2/pull/2271#issuecomment-2082038290,1,['predict'],['predicting']
Safety,"Reopening after chatting with @oleburghardt . I merged develop (which I hopefully made no mistakes in as there were quite some conflicts).; Left todo is imo (beyond possible further comments, possible failing tests etc): ; - adding a testcase that at best serves as a verification/sanity check (the expected results of course have to be documented for a possible future redo). I'll see what i'll find; - take a second look at the cfg option consolidation for good measure. I would prefer if this PR would not tackle the CFVMScalarSolver thing, but a first WIP-PR into that direction will come to a github repository near you soon ;)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1226#issuecomment-882848944:281,sanity check,sanity check,281,https://su2code.github.io,https://github.com/su2code/SU2/pull/1226#issuecomment-882848944,1,['sanity check'],['sanity check']
Safety,"Right there seems to be no way to reproduce this, and I don't see anything inherently wrong with the code.; No one else has reported any similar issue.; I am glad you have a workaround but I will not risk applying it to the code because it does not sound safe (to delete without calling close).; I'm closing this, if you ever get to the root of what's going on please let us now.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-894821584:200,risk,risk,200,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-894821584,2,"['risk', 'safe']","['risk', 'safe']"
Safety,"Right, in the viscous forces case, it should be ok to move the ""if Domain"" up and avoiding computations on halo points.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1430#issuecomment-965077124:82,avoid,avoiding,82,https://su2code.github.io,https://github.com/su2code/SU2/issues/1430#issuecomment-965077124,1,['avoid'],['avoiding']
Safety,"Right... I've finally fix this. The manual/offline build with meson will work in the next version.; For completeness, there is another way to work ""offline"", on a machine with internet access clone the SU2 repo using `git clone`, then run meson which will initialize the submodules, finally copy **everything** to the offline machine.; If this machine **has git** installed, it will detect that the submodules are present.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1335#issuecomment-1000842111:383,detect,detect,383,https://su2code.github.io,https://github.com/su2code/SU2/issues/1335#issuecomment-1000842111,1,['detect'],['detect']
Safety,"SU2v7_adap/bin/SU2/run/amg.py"", line 220, in amg; SU2_CFD(config_cfd); File ""/opt/su2/SU2v7_adap/bin/SU2/run/interface.py"", line 112, in CFD; run_command( the_Command ); File ""/opt/su2/SU2v7_adap/bin/SU2/run/interface.py"", line 292, in run_command; raise exception(message); RuntimeError: Path = /work/projects/mesh_adapt_testing/A000i_adap/2_cfd/adap/ini/,; Command = mpirun --use-hwthread-cpus -n 40 /opt/su2/SU2v7_adap/bin/SU2_CFD config_CFD.cfg; SU2 process returned error '254'; cmap[28922] == -1; cmap[28853] == -1; cmap[28858] == -1; cmap[28966] == -1; cmap[28989] == -1; cmap[28943] == -1; cmap[28915] == -1; cmap[28950] == -1; cmap[28923] == -1; cmap[28871] == -1; cmap[28941] == -1; cmap[28887] == -1; cmap[28889] == -1; cmap[37] == -1; cmap[32342] == -1; cmap[24652] == -1; cmap[50507] == -1; cmap[51850] == -1; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun detected that one or more processes exited with non-zero status, thus causing; the job to be terminated. The first process to do so was:. Process name: [[57069,1],11]; Exit code: 254; --------------------------------------------------------------------------; ```. When I check the `log.out`, I see that it occurs when calling ParMETIS (`log.err` is empty):; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 7860157 grid points before partitioning.; 11486658 volume elements before partitioning.; 3 surface markers.; 32148 boundary elements in index 0 (Marker = BODY).; 76160 boundary elements in index 1 (Marker = FARFIELD).; 291440 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency stru",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754504570:2178,abort,aborted,2178,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754504570,1,['abort'],['aborted']
Safety,Seems that 'shell=True' is a security risk. Any way to easily fix that by using different options with the system call? We could do a search and replace for the others already in the Python framework.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-533370188:38,risk,risk,38,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-533370188,1,['risk'],['risk']
Safety,"Should we use the branching methodology that we use for the SU2 repository? In the sense that we create a develop branch, create branches for any cases we want to add, submit pull requests that can be reviewed by the rest of the community etc. . I like the idea from @bigfooted, of having some regression testing that can run the simulation for a couple of iterations and check residuals (identical to what we do for the TestCases). This might be redundant to the actual regression tests that are done in SU2, but would be an easy first check on weather a particular validation case needs to be run again. Ideally, this would be run before any major version releases, as we discussed earlier. . I can also start working on creating a section on the website for the results of the validation cases. I'll eventually upload a sample validation case with corresponding results that people can model their efforts on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426808018:447,redund,redundant,447,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426808018,1,['redund'],['redundant']
Safety,"Some additional ideas on this topic:. #### Using Github projects; - For compilation of branches, I have created a github project: https://github.com/su2code/SU2/projects/7; - In there, you can list your active/old branches by adding a note to the relevant column. Please be so kind to mark the name of the branch in bold using Markdown's format (`** my branch name **`).; - I have added some examples from my own branches. #### Where do I find my branches?; - We have all worked on branches that we no longer remember, but Github has a really nice feature for this.; - Log-in to your Github user account and go to: https://github.com/su2code/SU2/branches/yours; - All the branches in which you have added at least one commit will be listed there. #### Old branches; - We have found a lot of branches that are older than the latest release and have no commits ahead of master (you can see this in your branch list).; - This would mean that normally all of their commits have already gone into a released version of SU2 and they are no longer required.; - I am planning to do some cleaning of very old branches to have a more compact structure, however it would be helpful if all the developers could indicate explicitly which branches can be safely removed to avoid any future issue.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/582#issuecomment-423178409:1241,safe,safely,1241,https://su2code.github.io,https://github.com/su2code/SU2/issues/582#issuecomment-423178409,2,"['avoid', 'safe']","['avoid', 'safely']"
Safety,"Sorry for the late reply, here are some personal opinions. (1) I have also test the turb flatplate and Onera M6 case (Fig1.Original; Fig2.Submit) in the tutorials. The convengence and results also shows just slightly difference. . (2) This PR is not suitable for the euler wall, for the wall is not always a straight plane and singular points do not statisfy the condition for the normal direction is hard to define. (3) Well, I have noticed the BC_Sym_Plane before, but it is very puzzling to me that only the closed point to the vertex on the sym wall is considered to add additional negative normal flux contribution. Maybe the mesh is unstructured and more than one point out of wall is linked to the vortex. Maybe the closed point is not normal to the wall while it always occurs on the 3D sym plane such as the ONERA M6 wing case. (4) This PR is to add a limitation of the velocity on the sym wall, just like what we do to the turb walls in the CTurbSSTSolver::CTurbSSTSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh). The fix is only available for the SYMMETRY wall and in the implicit iteration, just to avoid uncertainty and potential instability.; `; CTurbSSTSolver::CTurbSSTSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh); : CTurbSolver(geometry, config, true) {; ...... /*--- Initialize lower and upper limits---*/; lowerlimit[0] = 1.0e-10;; upperlimit[0] = 1.0e10;. lowerlimit[1] = 1.0e-4;; upperlimit[1] = 1.0e15;; `; ![untitled](https://github.com/su2code/SU2/assets/58663453/f5b5f543-3476-45d6-9477-94c7deeca9aa); ![untitled](https://github.com/su2code/SU2/assets/58663453/c6ecbdc5-0636-4880-a315-05c8636c27bb)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2174#issuecomment-1829816458:1130,avoid,avoid,1130,https://su2code.github.io,https://github.com/su2code/SU2/pull/2174#issuecomment-1829816458,1,['avoid'],['avoid']
Safety,"Sounds good. I was a little concerned about carrying around unnecessary memory during fluid computations, which will be the case for FSI as well as time spectral and some other applications, but you have a good point about avoiding allocation/deallocation overhead, and since you're reducing the number of times the same variables are re-allocated without any deallocation, it'll be a performance improvement relative to the current code either way. Please replace the 'varname.~Classname' calls with 'delete varname', then I think it should be good to go (pending anyone else weighing in on this). [you probably already know this from previous pull requests, but just in case - you don't have to create a new pull request, just commit into your branch and it will update automatically]",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-148124339:223,avoid,avoiding,223,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-148124339,1,['avoid'],['avoiding']
Safety,"Sounds like a reasonable optimization, the only other place that handles averages is `COutput::Postprocess_HistoryData`, so this should be a very local change and thus a good first issue. Do you want to give it a go at creating a pull request for this? We can give you some pointers. But it should be simple to modify the `addValue` function to take the window type as argument and only `push_back` for non trivial windows.; Even those could be optimized by caching the sum over n-1 elements, this would avoid traversing the entire history of values when only the last entry is modified during inner iterations.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1545#issuecomment-1037249095:504,avoid,avoid,504,https://su2code.github.io,https://github.com/su2code/SU2/issues/1545#issuecomment-1037249095,2,['avoid'],['avoid']
Safety,"Technically, this model has only one equation, the one for intermittency. Most of the functions are the same as the original LM model. Should I consider the Simplified model (SLM) as an option for the LM model to avoid duplicates? This is how I started, but I am open to discussions and suggestions.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1406921239:213,avoid,avoid,213,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1406921239,1,['avoid'],['avoid']
Safety,"Thank you all.; When I run the tutorial case with `mpirun`, there are some warnings:; ```; (base) root@a5502ebdff64:/home/SU2_RUN/QuickStart# mpirun -n 24 SU2_CFD inv_NACA0012.cfg ; --------------------------------------------------------------------------; mpirun has detected an attempt to run as root.; Running at root is *strongly* discouraged as any mistake (e.g., in; defining TMPDIR) or bug can result in catastrophic damage to the OS; file system, leaving your system in an unusable state. You can override this protection by adding the --allow-run-as-root; option to your cmd line. However, we reiterate our strong advice; against doing so - please do so at your own risk.; ```; Should I directly ignore such warnings ? Any suggestion would be grateful.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/738#issuecomment-513868405:269,detect,detected,269,https://su2code.github.io,https://github.com/su2code/SU2/issues/738#issuecomment-513868405,2,"['detect', 'risk']","['detected', 'risk']"
Safety,"Thank you for letting us know about the update.; We will discuss whether to update or to provide both versions as BC and BCM, as described in the turbulence models page (to avoid any doubt).; If you would like to join us, the meetings take place Wednesdays at 4pm CET https://meet.jit.si/SU2_DevMeeting; By the way, are you aware of any other issues with the implementation, or have you compared the results with other references? (I suppose you are the best person to ask).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1132#issuecomment-743749639:173,avoid,avoid,173,https://su2code.github.io,https://github.com/su2code/SU2/pull/1132#issuecomment-743749639,1,['avoid'],['avoid']
Safety,"Thank you for replying while busy preparing the High Lift Prediction Workshop 5. Sorry, I didn't clearly understand. From what I understand, I can suggest another energy equation calculating method instead of the current SU2 method(reading calculated TKE from inlet boundary condition and using it as an energy equation). Is that right? If not, could you please explain in more detail?. > @sun5k maybe you can try implementing the alternative I suggested of obtaining turbulence kinetic energy at inlets from the turbulence solver instead of assuming that the free stream value is imposed exactly? In the SWBLI case the SST-m versions (without divergence terms in the stress tensor) seem to underpredict the separation region https://su2code.github.io/vandv/swbli/",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-1525805374:58,Predict,Prediction,58,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-1525805374,1,['Predict'],['Prediction']
Safety,"Thank you for the detective work @yiren6 :+1: ; We may need to consider changing the extension for OSX or create a symbolic link during the installation process.; @patelha57 can you try the solution that yieren6 found?. As for the crash, I realize now that you are using the branch from PR #1300, it looks like that memory leak was fixed by @aa-g here https://github.com/su2code/SU2/commit/b2ddd9666b76b80ce5ce485b58dc5f97a27420b8 (at least that line 558 changed).; When using code from a pull request you can have a look at the regression tests https://github.com/su2code/SU2/pull/1300 (bottom of the page) to get an idea if some issues might still be work in progress.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1606#issuecomment-1106869636:18,detect,detective,18,https://su2code.github.io,https://github.com/su2code/SU2/issues/1606#issuecomment-1106869636,1,['detect'],['detective']
Safety,"Thank you for the thorough review @rsanfer! I'll reply to your main questions and some of the smaller ones here to centralize things. > Just a request, if it's possible that you add one or two test cases so the implementation is safe onwards (and, of course, so I can play around with the new features a little bit ). The testcases are the same, no changes there other than the one optional option introduced above. When the hybrid stuff covers most of the code I would add an entire build configuration e.g. BaseMPIOMP and corresponding testcase suite. > * Should this just run ""out of the box"" with a working installation of OpenMP in any machine, or is there anything else _fancy_ needed?. I would leave it to the community to decide what the defaults should be, probably for a lot of new users that don't run on clusters just calling SU2_CFD and not having to worry about mpi would be nice (a lot of the issues on CFD online are mpi related). > * Is the previous behaviour exactly kept, or are there any modifications in the basic, non OpenMP version of code? (Not that I mind, just curious). Other than the algorithmic changes (but mathematically equivalent) introduced to limiters and gradients in #834, yes. > What's the advantage of having one numerics term per thread?. It is a requirement, we need to write data into numerics before using them, multiple threads cannot write to the same location (i.e. the internal structures of CNumerics) therefore one per thread is required. > ...Also, I think I missed the point where the numerics container is extended beyond MAX_TERMS. The allocation of space for one numerics per thread is done above in line 1995 of my 21 Dec 2019 comment: `...MAX_TERMS*omp_get_max_threads()...`.; The instantiation of one numerics per thread is then done by executing the rest of the preprocessing in parallel and instead of using `XYZ_TERM` using `XYZ_TERM+offset` where `offset = thread_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could r",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:229,safe,safe,229,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['safe'],['safe']
Safety,"Thanks @MicK7 I will have a look, my initial thought was to have a simple strategy where within each MPI rank parallelism is extracted via colouring or scatter-to-gather transformations and only one thread per rank participates in the message passing, I have no experience here though so this might be a bad strategy, idk. **Back to business:**; I went silent for a bit because in prototyping a typical residual computation and matrix update loop I made some realisations that made me go back to the drawing board regarding data structures, and eventually back to square 0. . ## Parallel strategy for flux computation; Because significant computation is required to obtain each edge's flux, it does not make sense to attempt a ""point-loop"" strategy (which would double the effort).; However, one can either use colouring to avoid the race conditions that would result from updating the residual of cells i and j, or store the edge fluxes and then, on a second point-loop perform the summation of fluxes for each cell, with the direction being accounted by the same adjacency information used in the point-loop GG gradient computation.; If we consider only the update of residuals the two strategies are fairly equivalent performance wise, the tie breaker is the matrix updates. ## Matrix Updates; By this I mean the `addBlock`, `subBlock` we do (two times each) to update diagonal and off-diagonal blocks for each edge.; Here is a dummy numerics loop that does nothing else but setting blocks in the matrix (with colouring).; ```c++; void testLoop1(const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; double** blk_i, double** blk_j,; SparseMatrix& matrix); {; matrix.setZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; size_t iEdge = edgeIdx[k];; size_t iPoint = connectivity[iEdge].first;; size_t j",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:824,avoid,avoid,824,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['avoid'],['avoid']
Safety,"Thanks @bigfooted, I fixed the conflicts (albeit not very well judging from the broken compilation) and left some more comments some more important than others.; For me the most important ones are those regarding avoiding any and all repetition, reference factors and so on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1204#issuecomment-789223219:213,avoid,avoiding,213,https://su2code.github.io,https://github.com/su2code/SU2/pull/1204#issuecomment-789223219,1,['avoid'],['avoiding']
Safety,"Thanks @talbring,; I moved the preconditioner and matrix-vector product wrapper classes to separate files, these are so light weight that I was thinking of leaving them in one file.; I also moved some inlines to the hpp but I kept the private inlines in the inl file, these are only needed in the cpp and so by including the inl from the cpp (instead of bottom of hpp) we might avoid triggering recompilation of more units when working on implementation details of CSysMatrix.; Finally I would like to move/rename the larger files on a separate PR, that way it will be easier to track changes.; What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/700#issuecomment-503615855:378,avoid,avoid,378,https://su2code.github.io,https://github.com/su2code/SU2/pull/700#issuecomment-503615855,1,['avoid'],['avoid']
Safety,"Thanks Tom !. I made the changes (typo and initializations). I would not choose just ""SU2"" for the Py wrapper name, since there already is a SU2 python folder. By the way this also contains some python driving functions and this might be confusing. The true python wrapper is what you get when you directly interface C++ functionalities with python through SWIG. The previous name of the wrapper was SU2Solver but once again I would avoid it since the true goal of the wrapper is to interface functionalities that could be much deeper than just the solver level. The python wrapper is not just a solver. So to avoid confusion I chose the name WrapSU2. pySU2 would do the job too and this is consistent with the pySU2 folder (used to compile the wrapper). SU2Wrapper ? PyWrapSU2 ? Just keep in mind that ""SU2"" should be part of the name, imagine you have to import two wrapped modules (from different codes) in the same python script I would prefer having : . ********; import pySU2 # wrapper of SU2; import pyOtherCode # wrapper of another code; ********. than having : . ********; import pyWrap # wrapper of SU2 but this is unclear; import theWrapper # wrapper of an other code but this is unclear; ********",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/357#issuecomment-272404829:433,avoid,avoid,433,https://su2code.github.io,https://github.com/su2code/SU2/pull/357#issuecomment-272404829,2,['avoid'],['avoid']
Safety,"Thanks a lot for the comments, Heather. As you said, it seems that the deconstructers LinsysSol.~CSysVector() and StiffMatrix.~CSysMatrix() weren't doing their job. I believe that the problem was not only with the two vectors LinsysSol and LinSysRes, which as you say may be constructed using a 'new' statement. In the case of the StiffMatrix, there is a major difference between calling the constructor of CSysMatrix by using 'new', and calling the StiffMatrix.Initialize() method, for what I see in matrix_structure.cpp. Also, StiffMatrix is a sparse matrix (nDim x nPoint) x (nDim x nPoint), which must be allocated correctly using the Initialize method to avoid carrying around lots of zeros. With regards to the other point, I think that it is interesting to use the Initialize features of the CSysVector and CSysMatrix in the constructor of the class, just as it happens in the rest of the solver classes (see for example solver_direct_mean, line 261, where the Jacobian of the problem is initialized using a Jacobian.Initialize() call in the constructor). As far as I see it, the mesh update problem is nothing but a copy of the linear elasticity problem, so maintaining the parallelism with all the other solvers in the code (and, in particular, with the structural solver) may be interesting. . Moreover, by allocating the memory in the constructor using StiffMatrix.Initialize(nPoint, nPointDomain...) we make sure we can use the linear solvers in parallel by building a compliant sparse matrix. And if we allocate the stiffness matrix in the constructor, it makes sense to also do so with the vectors of the problem. Again, this maintains the similarities with the rest of the solvers. Finally, in my particular case I call the SetVolume_Deformation() function at least as many times as I do with the fluid and the structural solver. The mesh deformation is a third field in the problem, and by initializing the structure at the beginning of the simulation we can reuse the same spaces in m",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-148017482:660,avoid,avoid,660,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-148017482,1,['avoid'],['avoid']
Safety,"Thanks for filing this. Unfortunately, we have not completely implemented the ALE formulation for the incompressible solver to handle dynamic meshes. If this is something you would be interested in helping develop further, please let us know. That being said, we should have proper guards (or error messages) that avoid this kind of memory access error in the incompressible case. We'll look into this right away.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/247#issuecomment-195838721:314,avoid,avoid,314,https://su2code.github.io,https://github.com/su2code/SU2/issues/247#issuecomment-195838721,1,['avoid'],['avoid']
Safety,"Thanks for putting those results together, Samet. For more comparisons, you might also check out the paper by Langtry, et al., ""Predicting 2D Airfoil and 3D Wind Turbine Rotor Performance using a Transition Model for General CFD Codes"" that contains this exact case. Another interesting paper is Potsdam, ""Unstructured Mesh CFD Aerodynamic Analysis of the NREL Phase VI Rotor."" We can also look at the surface streamlines to compare with some of the results in these papers.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-260412407:128,Predict,Predicting,128,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-260412407,1,['Predict'],['Predicting']
Safety,"Thanks for rebases; A couple of notes: ; - the reference to the github issue in the comments may be confusing to others as to which part of that thread is being referenced. To make sure that future developers are aware of import issues, maybe just one line like 'recommended import format compatible with both Python 2.7 and 3', if you feel a comment really is necessary there.; - on the regressions: I know it may seem like small differences, but the fact that they are different with just changes to the python code is very concerning, and in some of the tests the differences are quite large (specifically discadj_euler_py and directidff_euler_py). If they are calling the exact same C++ executables and performing the exact same computations the result should be the same. If this is something going on behind the scenes within the python packages that cannot be avoided, we need to understand what that difference is, and where it is coming from. ; The only explanation I can think of off the top of my head for why the output could be different with only changing python code, is if some function previously imported from a different package is using single-precision instead of double-precision for some arithmetic operation or file io. If what you changed is actually providing GREATER precision that's fantastic, but we need to know for sure either way.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/260#issuecomment-224031436:867,avoid,avoided,867,https://su2code.github.io,https://github.com/su2code/SU2/pull/260#issuecomment-224031436,1,['avoid'],['avoided']
Safety,"Thanks for the changes, @pcarruscag. I like PRs like this with 797 additions and 3220 deletions maintaining functionality :+1: The incompressible part of the FEA problem was, like some other features in the code, 90% ready but never totally finished, so to avoid confusion in users and developers and ease maintenance I think it's better for it to be removed until someone can take over and finalize the implementation.; Let me know when you've had some time to put that testcase, and we can get this merged in.; Cheers,; Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/681#issuecomment-496400629:257,avoid,avoid,257,https://su2code.github.io,https://github.com/su2code/SU2/pull/681#issuecomment-496400629,1,['avoid'],['avoid']
Safety,"Thanks for the post. I think the issue is that ParMETIS support is enabled by default when building with '--enable-mpi' and so that option is not necessary (and may throw and error). Additionally, if the user does not enable MPI, ParMETIS will be disabled. Same for METIS. . If this is causing issues, we can remove them entirely from the set of configure options in order to avoid confusion.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/567#issuecomment-416808134:376,avoid,avoid,376,https://su2code.github.io,https://github.com/su2code/SU2/issues/567#issuecomment-416808134,1,['avoid'],['avoid']
Safety,"Thanks for the replies and suggestions. I am trying to use built-in optimization abilities of SU2 for turbomachinery cases. So far the multi zone issue seems like one of the many problems. I realized this when using a single zone case while trying to avoid previous multi zone problem I encountered, when using v7.0.6, turbomachinery cases create a different kind of solution history file and it seems to interfere with the optimization process. Also, it seems like the optimization side of SU2 is created without considering turbomachinery simulations since the current objective functions are not really useful for turbomachinery optimization, and there are some objective functions that are in config_template.cfg but does not work such as SURFACE_MASSFLOW, SURFACE_TOTAL_PRESSURE and TORQUE. Therefore, it seems like the solution history and objective function problems need to be solved together in order to do optimization on turbomachinery cases with v7.0.6. Even though v7.0.6 turned out very satisfactory just for solving both single and multi zone turbomachinery cases I am trying to see if using an older version like v6.2.0 would change the situation on turbomachinery optimization. It may seem like I am avoiding going in and changing the code but I want to see first if a base version of SU2 can do the job.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1279#issuecomment-835832913:251,avoid,avoid,251,https://su2code.github.io,https://github.com/su2code/SU2/issues/1279#issuecomment-835832913,2,['avoid'],"['avoid', 'avoiding']"
Safety,"Thanks for your reply. 3.0.12 works well in my own machine. But the newest version in HPC is 3.0.10. I have required ICT to install it. Hopefully, it will be done tomorrow. Thanks. Ëé∑Âèñ Outlook for iOS<https://aka.ms/o0ukef>; ________________________________; Âèë‰ª∂‰∫∫: Pedro Gomes ***@***.***>; ÂèëÈÄÅÊó∂Èó¥: Monday, April 25, 2022 8:49:52 PM; Êî∂‰ª∂‰∫∫: su2code/SU2 ***@***.***>; ÊäÑÈÄÅ: Jia, Guangnan ***@***.***>; Author ***@***.***>; ‰∏ªÈ¢ò: Re: [su2code/SU2] Fail to Generating 'SU2_PY/pySU2/_pysu2.so.p/pySU2.cxx' (Issue #1617). This email from ***@***.*** originates from outside Imperial. Do not click on links and attachments unless you recognise the sender. If you trust the sender, add them to your safe senders list<https://spam.ic.ac.uk/SpamConsole/Senders.aspx> to disable email stamping for this address. Should work with swig 3.0.11 onward according to this https://www.swig.org/; (I have 3.0.12 and it's fine); Please confirm if upgrading swig works for you and I will try to put this requirement meson. ‚Äï; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/1617#issuecomment-1108974316>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ANDDBRPFTZJQUMEUKVME6GLVG3ZOBANCNFSM5UI2ADRA>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1617#issuecomment-1108977945:682,safe,safe,682,https://su2code.github.io,https://github.com/su2code/SU2/issues/1617#issuecomment-1108977945,1,['safe'],['safe']
Safety,"Thanks! I would suggest to fix these issues first, in this branch, ASAP. We can also make sure that is is done before the feature_output PR. ; Summarizing we still have the following problems:. 1. SU2_SOL not working correctly in parallel for unsteady. Just one mesh partition is plotted in time.; 2. SU2_CFD crashes when restarting, due to additional lines in the restart file ; 3. The current reg tests are not able to detect this kind of problems ( we should do something for this). Any suggestion/help to fix the listed issues :) ? Of course, if you prefer, we can merge this in as it is, but still we will have those bugs in the develop.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/344#issuecomment-267317372:421,detect,detect,421,https://su2code.github.io,https://github.com/su2code/SU2/pull/344#issuecomment-267317372,1,['detect'],['detect']
Safety,"Thanks, Pedro, I think that's a great idea. As you mention, we would have to work out the logistics as this would require quite a bit of implication from the community, but the extra burden on the release would be compensated by avoiding big ""updating"" operations every now and then. Also as most users only work with the released versions, so it's a way to ensure they always know what updates have happened / which new features are available.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423122949:229,avoid,avoiding,229,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423122949,1,['avoid'],['avoiding']
Safety,"That is how I understand it, but memory allocation is a complex beast.; For example I expect the policy for small and large sizes to be different, maybe the interaction between similar sizes (e.g. from different MPI processes) is more important, because memory is a global resource and the different processes do not request it in a predictable order.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1261#issuecomment-818837883:333,predict,predictable,333,https://su2code.github.io,https://github.com/su2code/SU2/issues/1261#issuecomment-818837883,1,['predict'],['predictable']
Safety,"The changes to the symmetry BC were to improve the accuracy, especially when there are walls perpendicular to the symmetry plane.; It's possible the Jacobians can be improved to be more consistent with the RHS and recover some of the convergence rate.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2379688926:214,recover,recover,214,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2379688926,1,['recover'],['recover']
Safety,"The corners warning is fine. I added the ability to specify corner points for sharp features that the user wants to maintain. For example, in an airfoil test case I want to make sure the sharp trailing edge at node 512 is maintained, so I can manually add; ```; NCORNERS= 1; 1 512; ```; to the end of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:361,detect,detection,361,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,1,['detect'],['detection']
Safety,"The folks at Travis CI have kindly doubled both our ""hard"" timeout and ""silence"" timeout limits up to 140 min. and 20 min., respectively. We should be safely within limits for some time to come. . That being said, rather than relying on the increases, I would really encourage that we find some better approaches for reducing total test time, as we will continue to add more cases. It is not good for our pace of development that we have to wait over an hour to get the results of the tests. I think that a test time of approx. 10-20 min. would be more ideal so that we can iterate much more quickly. I suspect that attacking our compile time would be most helpful. Any ideas and discussion most welcome.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/524#issuecomment-382152114:59,timeout,timeout,59,https://su2code.github.io,https://github.com/su2code/SU2/issues/524#issuecomment-382152114,3,"['safe', 'timeout']","['safely', 'timeout']"
Safety,"The logic when computing the Laplacians (used for 4th order dissipation) is that for points on a physical boundary, only other physical boundaries are considered when adding solution differences.; I think this is to avoid adding very large differences for wall points. However when we have a point at a wall-symmetry intersection, the wall point will receive contributions from the symmetry points since that is also a ""physical boundary"".; That is my hypothesis anyway, anyone care to run some tests? :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1125#issuecomment-742006798:216,avoid,avoid,216,https://su2code.github.io,https://github.com/su2code/SU2/issues/1125#issuecomment-742006798,1,['avoid'],['avoid']
Safety,"The motivation of having it as the default was to make the code as user-friendly as possible (fewer knobs exposed in the config), but options are good of course. I would propose then that we add an option for the reconstruction gradient, something like:; ```; NUM_METHOD_GRAD_RECON= LEAST_SQUARES; ```; to let users decide if they want a separate option for the reconstruction gradients. If it does not appear, then the default is to use the same method as defined by NUM_METHOD_GRAD without a second gradient computation (basically what we have now). The nice thing about that is we can even try out other combos such as WLS+GG for the two different gradients. I will throw an error if users try to use LSQ for the viscous/source gradients, to avoid accuracy issues. What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-533259202:745,avoid,avoid,745,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-533259202,2,['avoid'],['avoid']
Safety,"The naming ""passive scalar' is inappropriate now. Maybe change this to 'species transport' everywhere.; Looks like you can safely do a 'search and replace all' on ""passive scalar"" and ""PASSIVE_SCALAR""",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1762#issuecomment-1249289137:123,safe,safely,123,https://su2code.github.io,https://github.com/su2code/SU2/pull/1762#issuecomment-1249289137,1,['safe'],['safely']
Safety,"The predictor thing is fine, the fluid displacement may start different from the structural but this is corrected in the outer iterations. I think the best solution for the velocity issue (if there is one, but it really looks like there is) would be to include ImplicitNewmark_Relaxation in the corrector step (this sets the solution to the relaxed solution and recomputes velocity and acceleration) and to transfer velocity directly, i.e. without any prediction.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1174#issuecomment-774769502:4,predict,predictor,4,https://su2code.github.io,https://github.com/su2code/SU2/pull/1174#issuecomment-774769502,2,['predict'],"['prediction', 'predictor']"
Safety,"The residuals (and indeed the converged results) change for some cases due to these changes (by very small amounts). Looking at limiter fields there are some differences that justify this. Those differences are present mostly in smooth flow regions, why in this regions?; Because this is where the old edge loops had a lot of logic to avoid divisions by zero, that is not required for the point loop implementation. There was also a change to the epsilon that initializes the min/max calculation (it now comes from the traits of the datatype).; I used the transonic_stator case to check that:; - The computed limiters are not too different, especially near periodic boundaries (for which a change in how min/max neighbor calculation was required).; - The results do not depend on number of ranks / threads. This is the flow field (for reference):; ![image](https://user-images.githubusercontent.com/38071223/72300708-779eac00-365c-11ea-9054-8b83a6ca8fe3.png). This shows the x-mom limiters near the trailing edge for the develop version:; ![image](https://user-images.githubusercontent.com/38071223/72300849-e3811480-365c-11ea-9fc6-3989c59d9997.png). And this for this branch:; ![image](https://user-images.githubusercontent.com/38071223/72300903-07445a80-365d-11ea-8bf0-eba72a2b50af.png). You can tell a slight ""darkening"" close to the blue spots, and also before the small spot close to the wall, before the shock. Near the periodic boundaries there are no visible changes.; I ran the case with 1 rank 1 thread (1/1), 1/4 and 4/8 (32 total), the results are the same (the convergence rate is different due to the behavior of the preconditioner).; [files.zip](https://github.com/su2code/SU2/files/4056576/files.zip). If you would like a specific test, or see some weird behavior in one of your cases let me know, but since only a few regressions changed I will only post comparisons of cases with substantial changes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/834#issuecomment-573929388:335,avoid,avoid,335,https://su2code.github.io,https://github.com/su2code/SU2/pull/834#issuecomment-573929388,1,['avoid'],['avoid']
Safety,"There is no conflict because both here and there the files were moved, to SU2_FSI and FSI_tools respectively.; What there is now is a massive amount of duplication, if you and Nicola want to try and fix that, it would be the ideal outcome for SU2. I made the final changes Tom and I had requested on this PR because it did not seem like this was going anywhere... But if you are still working on it, well do what you think is best, I don't have time to figure out how to get rid of the duplication. ""develop"" needs to work as a staging area, if you have a chunk of work that can be merged, without breaking compilation, testcases, or interfering too much with the work of other folks, then it should be merged ASAP to avoid this kind of situation.; For example refactoring this ""FSIInterface.py"" file into direct and adjoint should have possibly been a PR by itself to set the stage for the rest. Anyway, regarding the initial proposed changes this looks good to me.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/902#issuecomment-743422907:718,avoid,avoid,718,https://su2code.github.io,https://github.com/su2code/SU2/pull/902#issuecomment-743422907,1,['avoid'],['avoid']
Safety,This is now completely general I believe. `geometry->node[iPoint]->GetPoint(index)` always returns the right point either for index 0 or 1 at least in a quad mesh (there are only two neighbours at the corner) and the wrong one equals the normal neighbour. I tried it on a triangular mesh and it worked as well but perhaps it won't always be correct. The worst case is an error equal to the one of setting it to 0.0 and it's just as safe. Setting it to 0.0 is what I did at first but the axis is not a wall in general so it's usually the point with the largest cells and the highest velocities unless it's an Euler case. If there are very few nodes overall on the marker the contribution may not be that small. I suppose looking for the vertices on the axis marker here would be more messy and prone to bugs (and much more work for me),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/927#issuecomment-611625225:432,safe,safe,432,https://su2code.github.io,https://github.com/su2code/SU2/pull/927#issuecomment-611625225,1,['safe'],['safe']
Safety,"This one is all set after a little more cleanup. I left some low-level changes to the EoS models for later. @CatarinaGarbacz @MarcoFossati : we can use a simple directory name, as you suggest. Let's just go with fluid/ since we also treat liquids with the incompressible solver. Bonus: adds a rotating frame calculation test and some extra error checks on CFL adapt params that should help avoid unreported problems with old configs.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1010#issuecomment-640170715:390,avoid,avoid,390,https://su2code.github.io,https://github.com/su2code/SU2/pull/1010#issuecomment-640170715,2,['avoid'],['avoid']
Safety,"Thrust should be -11.12N and torque 0.8329Nm, not accounting for number of blades. Is that closer to what you expect?. The coefficients are computed with a reference velocity based on Mach motion, but the dimensional factor shown in the breakdown file considers the free stream velocity instead... (silly and avoidable bug).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1175#issuecomment-767597032:309,avoid,avoidable,309,https://su2code.github.io,https://github.com/su2code/SU2/issues/1175#issuecomment-767597032,1,['avoid'],['avoidable']
Safety,"To answer the first question, yes, the distance calculations are done based the entire surface of a boundary element. This is done using routines written by @vdweide for the higher order solver. In short, the distance to the wall of a node in the mesh is found by finding the projection of the said node on a boundary element, and the distance is calculated using that information. . I validated this on a host of grids, some of which had sheared elements near the wall, and this procedure seemed to give the right predictions regardless of the quality of the mesh. . Yes, from what I understand, by the end of the ComputeWall_Distance function all the memory, weather it is the vectors or the ADT itself, should be deallocated. I based this code on what Edwin was doing so he might be able to substantiate on why he deallocates the vectors immediately.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/605#issuecomment-435105466:515,predict,predictions,515,https://su2code.github.io,https://github.com/su2code/SU2/pull/605#issuecomment-435105466,1,['predict'],['predictions']
Safety,"Todo list:; - [x] Make sure the code can handle arbitrary many species equtions. Especially the output has to be adapted. Note the MAXNVAR of the ScalarSolver has to adapted to that need as well. Make a suitable Testcase for that.; - [x] Implement weak inlet and outlet BC. The weak approach is used in the turb and mean flow and is most likely conservative opposed to the strong one. Here a simple switch will be put in place to compare both versions.; - [x] Consolidate nVar, nSpecies, ... variable to only use 1 consistently (The choice was `nSpecies` which was already introduced for NEMO and it just makes sense to use the same container); - [x] Make the numerous reviewers happy; - [x] Check inlet profiles for Species solver (have a testcase for that) See #1427 ; - [x] Create Objective functions of Surface avg quantities (Area and Massflow? prob. And a variance-style output to capture mixing); - [x] Avoid redundant operations (pre/post processings) during solver restarts. 156d0c5. What will be done in follow-up PR's:; - Viscous contributions for BC_inlet and outlet which are currently not used (also then for Turb-solver) https://github.com/su2code/SU2/pull/1388#discussion_r752384956; - Axissymmetric source term addtion and testing; - multi-component mixing from #1332 ; - gradient validation between DA and FD",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1388#issuecomment-935901996:910,Avoid,Avoid,910,https://su2code.github.io,https://github.com/su2code/SU2/pull/1388#issuecomment-935901996,3,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,"Unfortunately, I wasn't able to get all of them. I fixed a majority of the calls but couldn't find workarounds all of them. There are 8 left in the following files: . `SU2_PY/change_version_number.py`: There's 2 in here. One is a complicated command with `grep` and pipes and the other is a simple `rm -rf`, but it isn't a security risk since there is no user input into that string. `SU2_PY/SU2/util/pyCppTap.py`: This is in the diff_routine and uses `tapenade`. I have no idea what this does so I didn't touch this one. `SU2/opt/server.py`: There are 4 `scp` calls that I didn't know how to replace. `SU2_PY/compute_polar.py`: There's one left in here which is a complicated `cat` call that I couldn't figure a workaround for. . If you have any suggestions for any of these, I can try and implement them. . Otherwise, once these tests pass, its good to merge.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-533590086:332,risk,risk,332,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-533590086,2,['risk'],['risk']
Safety,"Valgrind does not detect any leaks.; What is probably happening is heap fragmentation, some large temporary arrays are used during parallel output, they are free'd correctly but the OS is not obligated to re-use that space the next time something is allocated. If you want to experiment with modifying some code (to make those arrays persistent) we can show you what to do.; (developers meetings every Wednesday at 4pm CET https://meet.jit.si/SU2_DevMeeting). Cheers",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1261#issuecomment-818806174:18,detect,detect,18,https://su2code.github.io,https://github.com/su2code/SU2/issues/1261#issuecomment-818806174,1,['detect'],['detect']
Safety,"We are actually having a group meeting, cloned and compiled in two machines while discussing SU2 with the whole group, and experienced this one-commit-behind issue. This has all been in the context of brainstorming open-science and reproducibility practices for CFD. . We've continued to discuss it and we wonder if this might be avoided by keeping the Tests as a folder in the main SU2 repo, rather than having a separate repo for Tests. . Is there a reason why you decided to have a separate repository for Tests?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72737918:330,avoid,avoided,330,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72737918,1,['avoid'],['avoided']
Safety,We could also write a script that detects cfg options whose removal does not break the regression ;-),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1236#issuecomment-802804906:34,detect,detects,34,https://su2code.github.io,https://github.com/su2code/SU2/pull/1236#issuecomment-802804906,1,['detect'],['detects']
Safety,"Welcome to SU2 and thank you for fixing these issues :+1: . Some of the files you changed are removed in #902, please revert those changes to avoid merge conflicts.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/983#issuecomment-629117883:142,avoid,avoid,142,https://su2code.github.io,https://github.com/su2code/SU2/pull/983#issuecomment-629117883,1,['avoid'],['avoid']
Safety,What about using weighted least squares for NUM_METHOD_GRAD? (if you don't specify something for NUM_METHOD_GRAD_RECON the method from NUM_METHOD_GRAD is used). Context: Plain least squares will under-predict gradients in stretched meshes whereas GG and WLS are not supposed to.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1090#issuecomment-725309360:201,predict,predict,201,https://su2code.github.io,https://github.com/su2code/SU2/issues/1090#issuecomment-725309360,1,['predict'],['predict']
Safety,"Why are you defining an internal marker? I always try to avoid having undefined faces in my mesh. If you are linking the face your connectivity will be different than when you are not linking the faces. I don't know how Pointwise does it, but that's my guess.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/986#issuecomment-628770758:57,avoid,avoid,57,https://su2code.github.io,https://github.com/su2code/SU2/issues/986#issuecomment-628770758,1,['avoid'],['avoid']
Safety,"Why is it good C++ to use containers (instead of raw arrays):; - Book keeping: No need for verbose allocations / de-allocations.; - Information: The size is carried with the container, the type of data, the allocation strategy (e.g. alignment), etc.; - Correctness: A const method can change the elements of a raw array, because in such cases const does not qualify the data, only the address (pointer) of that data. On the other hand, a const method will imply const containers, on which only const methods can be called, and so on.; - Performance 1: A nested array (**), or nested container (vector<vector>) is NOT a matrix, it is a list of arrays, consequently there is more construction / destruction overhead (more allocations) uncertain performance at runtime, because inner arrays can end up arbitrarily far from each other, you end up needing copies to talk with e.g. blas or mpi...; - Versatility: Above all a container encapsulates data structure details (e.g. if something is a vector or list or map or row-major matrix or column-major matrix or sparse matrix) behind an interface. Which then lets you change the details separately from the code that uses the data. Whenever you pass an array by pointer you are locking yourself to ONE very particular organization of data in memory.; - Performance 2: This encapsulation is not insulation, it is completely transparent to the compiler because any half decent container type will be defined inline. Furthermore... If the compiler sees two pointers it has absolutely no idea if they are pointing to the same thing, or worse if they partially overlap. To legally optimize such code compilers need to introduce a ton of checks and fallback code, on the other hand, defining operations on containers which you know never to overlap provides a clean way to avoid compiler-paranoia.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1225#issuecomment-793832435:1812,avoid,avoid,1812,https://su2code.github.io,https://github.com/su2code/SU2/pull/1225#issuecomment-793832435,1,['avoid'],['avoid']
Safety,Yes I get that now and I am doing it exactly like that. For this one I thought I leave it. I tried to do a rebase of my develop to remove older commits from this PR but then git was telling me it was not able to include all the following commits including merges etc so I aborted. . From now on for any fix I would branch every time anew from my develop (which is a copy of su2code +this PR). I also do the same for my own development and then merge any fix branches I need into that. If later you don't merge those fixes because that part of the code is revamped anyway I will bin that branch and redo it on top of your new structure as that would probably be better anyway and just in case I ever want to propose those own developments to su2code. I will watch and adapt. Hope that's fine for now but let me me if you want me to redo or rebase anything for this PR,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/927#issuecomment-612613571:272,abort,aborted,272,https://su2code.github.io,https://github.com/su2code/SU2/pull/927#issuecomment-612613571,1,['abort'],['aborted']
Safety,"Yes for MARKER_ROUGH, or MARKER_ROUGH_WALL to be clearer.; Or just WALL_ROUGHNESS as you have right now, since it would not really a marker, just the properties of markers (and I've seen some people on CFD online confused with similar naming e.g. MARKER_SHROUD). Regarding the MPI stuff, I had the following idea over lunch:; In CPhysicalGeometry::SetWallDistance we compute the closest distance, and in so doing we also get the mpi rank and markerID associated with the closest vertex.; So, before computing the wall distances you communicate the local marker ids and wall roughness's (via Allgather as you are doing now), with this info you can build a `unordered_map<pair<int,int>, su2double>` to map pairs of <rank,markerID> to the values of roughness.; Now when you loop over the points to compute the distances you can retrieve the roughness from this map instead of from config.; It's almost exactly the same as you have, but avoids using the config as a messenger between routines, and using a stl map should also make the code simpler. In the boundary conditions you can still get the marker roughness via the marker tag as you are doing now, and I guess the wall type (smooth / rough) can be inferred from having 0 (default) roughness (?); With the string+double list specification you also avoid having to specify 0 roughness and SMOOTH wall type for markers where you don't want to use this feature.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-630861158:933,avoid,avoids,933,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-630861158,4,['avoid'],"['avoid', 'avoids']"
Safety,"Yes, I am using periodic boundaries. However, the points are matched without any issue during initialization so I don't think the issue is there. Turbomachinery cases are working but the issue is with MPI where after a certain number of cores a case may encounter segmentation fault. I cannot predict beforehand at what number of cores it will fail, or if it will even fail or not.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/990#issuecomment-630394537:293,predict,predict,293,https://su2code.github.io,https://github.com/su2code/SU2/issues/990#issuecomment-630394537,1,['predict'],['predict']
Safety,"Yes, I'd say that the V&V regression tests should definitely start from the converged solutions that were used to produce the results on the V&V website. . But for cases that do not have V&V documentation, the regression tests are imo merely a way to detect and prevent unwanted changes/side-effects (so, what you said). If they need to be more than that, they should be upgraded to a V&V with proper documentation. For the cases that are not VandV I'd rather have a 'start' + 'restart' regression test, with restarts from the 'start' results. In that way the restart files are always generated from the current code.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1784#issuecomment-1304306759:251,detect,detect,251,https://su2code.github.io,https://github.com/su2code/SU2/pull/1784#issuecomment-1304306759,1,['detect'],['detect']
Safety,"Yes, there are some warnings there. I have mostly avoided the Tecplot ones with ""-Wno-unused-parameter."" We could also contact the developers of those two packages directly (CGNS is now on GitHub).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/441#issuecomment-329835608:50,avoid,avoided,50,https://su2code.github.io,https://github.com/su2code/SU2/pull/441#issuecomment-329835608,1,['avoid'],['avoided']
Safety,"You are proposing the exact opposite of the conclusion of the paper:. ""From the above findings, it is **recommended that all three of these terms be included** when; running hypersonic, or even supersonic, turbulent flow simulations, especially for flows with; shock wave-induced separations."". And they clearly say this:; ""While the full inclusion of these terms does not always result in predictions that agree better; with DNS/experimental data, this is likely caused by the fact that their exclusion cancels out; effects of other flaws in the RANS models employed."". If your strategy is to get a better match with experiments by neglecting physics terms, then you should rethink your strategy.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1851#issuecomment-1520849562:390,predict,predictions,390,https://su2code.github.io,https://github.com/su2code/SU2/issues/1851#issuecomment-1520849562,2,['predict'],['predictions']
Safety,"You can use paths for the inputs and outputs of the code, e.g. RESTART_FILENAME= ./test/restart.dat or MESH_FILENAME= ../mesh.su2; I think it is much safer if you use paths for inputs and change directory to where you want the files written.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1658#issuecomment-1147844675:150,safe,safer,150,https://su2code.github.io,https://github.com/su2code/SU2/issues/1658#issuecomment-1147844675,1,['safe'],['safer']
Safety,"You could modify `CWindowedAverage::addValue` to only ""push back"" more values if it detects a change in current time iteration, otherwise it simple overwrites the last value in the history.; Then you could get rid of the entire logic in `SetUpdate_Averages` simply making it true or false (less logic is the way for less bugs).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1259#issuecomment-817952886:84,detect,detects,84,https://su2code.github.io,https://github.com/su2code/SU2/pull/1259#issuecomment-817952886,2,['detect'],['detects']
Safety,"ZE_SURFACE_DEF= NO ; % Vol; YES=UpwRoe; NO=JST_BC; VISUALIZE_VOLUME_DEF= NO; % YES=JST; NO=see VOLUME_DEF; MUSCL_ADJFLOW= NO; ```; In that branch I added the possibility to run the old or new Euler_Wall BC on `MARKER_EULER `walls (`MARKER_SYM `always uses the the new implementation) using `VISUALIZE_SURFACE_DEF` as a hooked boolean. ; With `VISUALIZE_VOLUME_DEF` one can change which convective scheme is used on the boundary, i.e. what is in the numerics container `CONV_BOUND_TERM`. The Default is `CUpwRoe_Flow` (`ROE`) and I added `CCentJST_Flow_BC` which is the normal `JST` without dissipation. ; The third option `MUSCL_ADJFLOW` has to be left on NO, this is work in progress :) . With the options given above you will use the new Euler wall implementation but using JST without dissipation term as a convective scheme for boundary nodes. This (as I say in point 2. in my above post) basically recovers the old euler wall implementation. . For the OneraM6 case the combination of new Euler + JST_BC recovers the CD & CL results of the old code. Can you also try running `CONV_NUM_METHOD_FLOW= ROE` with the code you labelled as 'SU2 FSI new (new bound condition)' and 'SU2 FSI new (oldbound condition)'. Because by doing so you switch the numerical method in the volume and to the same ROE scheme on the boundary -> just as the current default in the develop. So my current assumption is that it is a matter of convective scheme (on the boundary). ~~I'll try to attach my cases as a zip and two images here.~~; Here the green line represents the current develop if one uses MARKER_EULER or MARKER_SYM. Another info here is: by using the oldEuler wall (i.e. line 1&2) the choice of convective scheme on the boundary is irrelevant for the Euler_wall as the old implementation ""skips"" that step. The red line 4 is the setup I want you to try because this recovers the old results in this case.; ![image](https://user-images.githubusercontent.com/4933860/73058455-fb923880-3e93-11ea-9d49-baf87a47",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-578048838:1239,recover,recovers,1239,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-578048838,1,['recover'],['recovers']
Safety,"[...]; > If either you or @frx-wintermute are interested in complementing the feature by adding an option to prefer system libraries (via pkg-config, no paths because 99.9% of users will not know what to do) instead of the versions shipped with SU2, please go ahead and open a PR. Hello @pcarruscag!. To be honest, my daydream is: I would love to see SU2 shipping nothing in 'externals/' (or just empty subdirectories such as 'externals/meson/' ); then those external dependencies are by default downloaded from external repositories or tar archives. This defaul behavior would be obtained by configuring with the './meson.py' script and then by building with './ninja'. But, if a user wants to build SU2 from source and prefers to use system-wide Meson and Ninja and system-wide versions of the external dependencies, it would be possible to avoid downloading these external dependencies. By running './preconfigure.py' with appropriate options, it would be possible to decide which external dependencies to **not** download. At that point, system-wide Meson and Ninja could be used to build SU2 from source. And the 'meson.build' file would do the following:. * for each required or enabled (at configure time) dependency **\<foo\>**, it would check whether it is found in 'externals/**\<foo\>**/'; if not, it would check whether it can be found as a system-wide installation (perhaps via pkgconfig); if not, it would exit with error; * for each dependency which is not required nor enabled at configure time, it would avoid using it at all. I think this daydream is achievable, and I hope that other people consider it as a useful goal.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1646970778:843,avoid,avoid,843,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1646970778,2,['avoid'],['avoid']
Safety,able-mpi --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test ; -------------------------------------------------------------------------; | ___ _ _ ___ | ; | / __| | | |_ ) Release 6.2.0 'Falcon' | ; | \__ \ |_| |/ / | ; | |___/\___//___| Pre-configuration Script | ; | | ; -........ (I removed the header print here) ... Checking the status of submodules; =====================================================================; Initialize submodule externals/codi using git ... ; Submodule 'externals/codi' (https://github.com/scicompkl/CoDiPack) registered for path 'externals/codi'; Cloning into '/home/eran/applications/SU2/git_noMeson/SU2/externals/codi'...; Submodule path 'externals/codi': checked out '501dcf0305df147481630f20ce37c2e624fb351f'; Found correct version of CoDiPack in externals/codi.; Initialize submodule externals/medi using git ... ; Submodule 'externals/medi' (https://github.com/SciCompKL/MeDiPack) registered for path 'externals/medi'; Cloning into '/home/eran/applications/SU2/git_noMeson/SU2/externals/medi'...; Submodule path 'externals/medi': checked out 'edde14f9ac4026b72b1e130f61c0a78e8652afa5'; Found correct version of MeDiPack in externals/medi. Preparing build environment; =====================================================================; Command: ./bootstrap; Logfile written to bootstrap.log. Running configure in folder SU2_AD using CODI; =====================================================================; Command: ../configure --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test --enable-mpi --enable-codi-reverse. There was an error while running command '../configure --with-cc=mpicc --with-cxx=mpicxx --prefix=/home/eran/applications/SU2/SU2test --enable-mpi --enable-codi-reverse'.; === Error Log ===; /bin/sh: 1: ../configure: not found. ---------------------------------------------; When I copied configure.py from older installations it kept running but then aborted on; missing modules,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/910#issuecomment-598686170:2206,abort,aborted,2206,https://su2code.github.io,https://github.com/su2code/SU2/issues/910#issuecomment-598686170,1,['abort'],['aborted']
Safety,"acency structure.; 5 surface markers.; 10222 boundary elements in index 0 (Marker = aircraft).; 9712 boundary elements in index 1 (Marker = farfield).; 3382 boundary elements in index 2 (Marker = inner_nearfield).; 19738 boundary elements in index 3 (Marker = symmetry).; 3382 boundary elements in index 4 (Marker = outer_nearfield).; Calling ParMETIS...; Traceback (most recent call last):; File ""/home/app/SU2/install/bin/parallel_computation.py"", line 110, in <module>; main(); File ""/home/app/SU2/install/bin/parallel_computation.py"", line 61, in main; options.compute ); File ""/home/app/SU2/install/bin/parallel_computation.py"", line 88, in parallel_computation; info = SU2.run.CFD(config) ; RuntimeError:; Command = mpirun -n 12 /home/app/SU2/install/bin/SU2_CFD config_CFD.cfg; SU2 process returned error '15'; [ubuntu:8553] *** An error occurred in MPI_Wait; [ubuntu:8553] *** on communicator MPI COMMUNICATOR 3 DUP FROM 0; [ubuntu:8553] *** MPI_ERR_TRUNCATE: message truncated; [ubuntu:8553] *** MPI_ERRORS_ARE_FATAL: your MPI job will now abort; --------------------------------------------------------------------------; mpirun has exited due to process rank 9 with PID 8554 on; node ubuntu exiting improperly. There are two reasons this could occur:. 1. this process did not call ""init"" before exiting, but others in; the job did. This can cause a job to hang indefinitely while it waits; for all processes to call ""init"". By rule, if one process calls ""init"",; then ALL processes must call ""init"" prior to termination. 2. this process called ""init"", but exited without calling ""finalize"".; By rule, all processes that call ""init"" MUST call ""finalize"" prior to; exiting or it will be considered an ""abnormal termination"". This may have caused other processes in the application to be; terminated by signals sent by mpirun (as reported here).; --------------------------------------------------------------------------; [ubuntu:08544] 1 more process has sent help message help-mpi-errors.tx",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/159#issuecomment-75485283:1485,abort,abort,1485,https://su2code.github.io,https://github.com/su2code/SU2/issues/159#issuecomment-75485283,1,['abort'],['abort']
Safety,"build\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe; C compiler for the host machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the host machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a defaul",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:4512,Sanity check,Sanity check,4512,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['Sanity check'],['Sanity check']
Safety,closing temporarily for finishing tutorial/anticipating merging with the previously mentioned pull request/bug fix/generally avoiding confusion. Will reopen when those are complete.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/494#issuecomment-364602321:125,avoid,avoiding,125,https://su2code.github.io,https://github.com/su2code/SU2/pull/494#issuecomment-364602321,1,['avoid'],['avoiding']
Safety,"computations are very simple it may not pay-off to vectorize. **Relation with algorithms**; Some form of `gather` and `scatter` is required in unstructured CFD, which means SIMD has a price of admission. Some thought needs to go into designing algorithms that amortize that cost by maximizing the so called FLOP/Byte ratio, and mask the latency of those operations by being able to start computing as soon as the first element of data is available. **What elements should we try to process simultaneously?**; The choice is between multiple geometric primitives (edges/points) or multiple solution primitives (variables). The latter sounds like a sensible idea until we get to areas of the code where different primitives require different treatment, that and the fact that the number of variables might not fit evenly in the number of lanes can lead to very tricky and non-generic code. Nevertheless if the same code were to be applied to e.g. 4 solution variables, this strategy would likely perform better as it avoids the pesky gather/scatter operations.; Processing multiple geometric primitives can make full utilization of whatever register size (important on GPU's), the code is just as readable (as I hope to show), but gather/scatter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:2609,avoid,avoids,2609,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['avoid'],['avoids']
Safety,"discadj_arina2k fails with some mpi error, but it does not fail when I run it on my local machine. Not sure what is going on here. ```; Clearing the computational graph.; [9c7d9f63f200:01637] *** An error occurred in MPI_Allgather; [9c7d9f63f200:01637] *** reported by process [4177330177,1]; [9c7d9f63f200:01637] *** on communicator MPI_COMM_WORLD; [9c7d9f63f200:01637] *** MPI_ERR_TRUNCATE: message truncated; [9c7d9f63f200:01637] *** MPI_ERRORS_ARE_FATAL (processes in this communicator will now abort,; [9c7d9f63f200:01637] *** and potentially your MPI job). ```; There is another case that sometimes fails due to the tight tolerance.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1826#issuecomment-1415450196:499,abort,abort,499,https://su2code.github.io,https://github.com/su2code/SU2/pull/1826#issuecomment-1415450196,1,['abort'],['abort']
Safety,"eckc.exe; C compiler for the host machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the host machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the host machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the host machine: c++ ld.bfd 2.30; Build machine cpu family: x86_64; Build machine cpu: x86_64; Host machine cpu family: x86_64; Host machine cpu: x86_64; Target machine cpu family: x86_64; Target machine cpu: x86_64; Program python3 found: YES (C:\Users\KleineKampfzwergin\AppData\Local\Programs\Python\Python39\python.exe); Pkg-config binary for MachineChoice.HOST is not cached.; None of 'PKG_CONFIG' are defined in the environment, not changing global flags.; Pkg-config binary missing from cross or native file, or env var undefined.; Trying a default Pkg-config fallback at pkg-config; Trying pkg-config binary pkg-config for machine MachineChoice.HOST at ['D:\\Programme\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin\\pkg-config.EXE'",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:4685,Sanity check,Sanity check,4685,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['Sanity check'],['Sanity check']
Safety,"entation) using `VISUALIZE_SURFACE_DEF` as a hooked boolean. ; With `VISUALIZE_VOLUME_DEF` one can change which convective scheme is used on the boundary, i.e. what is in the numerics container `CONV_BOUND_TERM`. The Default is `CUpwRoe_Flow` (`ROE`) and I added `CCentJST_Flow_BC` which is the normal `JST` without dissipation. ; The third option `MUSCL_ADJFLOW` has to be left on NO, this is work in progress :) . With the options given above you will use the new Euler wall implementation but using JST without dissipation term as a convective scheme for boundary nodes. This (as I say in point 2. in my above post) basically recovers the old euler wall implementation. . For the OneraM6 case the combination of new Euler + JST_BC recovers the CD & CL results of the old code. Can you also try running `CONV_NUM_METHOD_FLOW= ROE` with the code you labelled as 'SU2 FSI new (new bound condition)' and 'SU2 FSI new (oldbound condition)'. Because by doing so you switch the numerical method in the volume and to the same ROE scheme on the boundary -> just as the current default in the develop. So my current assumption is that it is a matter of convective scheme (on the boundary). ~~I'll try to attach my cases as a zip and two images here.~~; Here the green line represents the current develop if one uses MARKER_EULER or MARKER_SYM. Another info here is: by using the oldEuler wall (i.e. line 1&2) the choice of convective scheme on the boundary is irrelevant for the Euler_wall as the old implementation ""skips"" that step. The red line 4 is the setup I want you to try because this recovers the old results in this case.; ![image](https://user-images.githubusercontent.com/4933860/73058455-fb923880-3e93-11ea-9d49-baf87a4754e6.png); ![image](https://user-images.githubusercontent.com/4933860/73058476-0351dd00-3e94-11ea-8498-37ccfdb033b0.png). Here the testcase folder if someone wants to use the exact setup; [oneram6test.tar.gz](https://github.com/su2code/SU2/files/4107614/oneram6test.tar.gz)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-578048838:2092,recover,recovers,2092,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-578048838,1,['recover'],['recovers']
Safety,"ers can I use instead?. Thank you!. Best regards,. Avi; ________________________________; From: Pedro Gomes ***@***.***>; Sent: Tuesday, March 23, 2021 1:40 AM; To: su2code/SU2 ***@***.***>; Cc: Avish Suresh Bhambhani Wadhwani ***@***.***>; Author ***@***.***>; Subject: Re: [su2code/SU2] Microsoft MPI not read, WIndows 10 (#1233). Hi,; Apologies for the silence on our side, the truth is most of us do not run SU2 on Windows.; Even the binaries available with each release are created with cross compilation, not built on a Windows machine.; Usually (i.e. on Linux) when meson does not find something it is because pkg-config is not setup to look in the right directories, you can control this with the environment variable PKG_CONFIG_PATH.; If the serial compilation is working fine, and mpi is installed correctly, you can try using the windows equivalent of ""export CC=mpicc"" and ""export CXX=mpicxx"" before calling meson.py, and -Dcustom-mpi=true when calling it. ‚Äî; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsu2code%2FSU2%2Fissues%2F1233%23issuecomment-804498319&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150583134%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=%2BpP5qwT1upuD56kAXXvmDMqq%2B5lTmsMaJ6%2Fgx7gHoyM%3D&reserved=0>, or unsubscribe<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FATHYUQAJN6RB6GCI7QDTE7LTE7POTANCNFSM4ZHARKPQ&data=04%7C01%7Cavibh096%40student.liu.se%7Ce640ef0977004a33b35608d8ed943870%7C913f18ec7f264c5fa816784fe9a58edd%7C0%7C0%7C637520568150593131%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=KJACa6bUpNomvHIrZDe0%2FoMQ3DeJTksfdC5nwoHPTWk%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1233#issuecomment-827688202:1655,safe,safelinks,1655,https://su2code.github.io,https://github.com/su2code/SU2/issues/1233#issuecomment-827688202,2,['safe'],['safelinks']
Safety,"es are definitely validation cases too. We can continue to add test cases to the TestCases repo, knowing that only a subset of those cases belong in the V&V list. 2. An important aspect of the V&V is the convergence of the solution as the mesh is refined. As Jayant knows well, this can help us catch bugs. This means that a well-constructed V&V suite needs to include a series of meshes (of increasing density), the corresponding configuration files, and the actual experimental data (or other numerical data from runs on different solvers). I strongly agree with the suggestions made that (a) the entire V&V suite needs to be run before every major release (with configuration files updated), (b) that this should be linked form the main SU2 page, (c) that the 2014 AIAA paper (and Tom‚Äôs AVIATION 2018 paper) should serve as a starting point, (d) that the NASA TMR website can give us ideas of additional access, and (e) that the SU2 V&V page should be managed within GitHub.com<http://GitHub.com> so the entire community can edit / add to this / these page/s to continue to grow the number of cases and their relevance. Best,. Juan. On Sep 20, 2018, at 3:02 AM, Ruben Sanchez <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, Pedro, I think that's a great idea. As you mention, we would have to work out the logistics as this would require quite a bit of implication from the community, but the extra burden on the release would be compensated by avoiding big ""updating"" operations every now and then. Also as most users only work with the released versions, so it's a way to ensure they always know what updates have happened / which new features are available. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/581#issuecomment-423122949>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxJzh9dwbOM_5DoymCA6lAIqv3biyks5uc2eqgaJpZM4Ww0V4>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423207120:1656,avoid,avoiding,1656,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423207120,1,['avoid'],['avoiding']
Safety,"fic multiplication kernels with manual low level optimisations (unrolling, vectorization through intrinsics, and software prefetching), complex code but encapsulated in a low maintenance area of the code. **General improvements**; - Fusing convective and viscous residual loops, this will NOT be done by super gluing convective and viscous numerics. I do not have a concrete design in mind yet but I hope to be able to do something akin to the *decorator* pattern I mentioned before. I also plan to make the numerics a full-fledged *visitor* to reduce compilation dependencies, currently a change to numerics may affect CVariable CSolver and CNumerics (as mentioned by @clarkpede), CSolver is involved because it is responsible for fetching data, I may move that to CNumerics, which would let them fetch data as needed.; - Lookup accesses to CSysMatrix to avoid linear searches, the small increase in memory usage can be mitigated by sharing these lookup tables/arrays and the sparsity pattern between matrices associated with the same geometry (on the subject of these lookup tables, knowing where the diagonal of a row is should enable more efficient upper/lower multiplications). ## Work items; This is a lot of work and some changes will be significant, I will divide the work in steps, off the top of my head this order seems ok:; - CSysMatrix lookups and any required parallel pragmas put in place.; - Point-loop gradients and limiters, no SIMD (at which point I hope #777 to be finished so the next item does not disrupt it).; - Split CSolvers over multiple files, colour-based parallel residual loops (at this point we have hybrid parallel!).; - Contiguous storage of CGeometry members (to eventually enable vectorization).; - Split CNumerics over files, architecture for fusing convective and viscous loops (the most disruptive change).; - SIMD, of gradients, limiters, and numerics. SIMD in CSysMatrix can be started anywhere after item 1. If you foresee conflicts with your ongoing work let",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539523312:3581,avoid,avoid,3581,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539523312,1,['avoid'],['avoid']
Safety,"formance, here is the effect of color group size on the execution time of the scalar code on one thread:; ![image](https://user-images.githubusercontent.com/38071223/64686801-2e0d3d00-d481-11e9-82a0-c56e5554cd83.png); The hassle-free option of not sorting by color ""never"" recovers the performance of the base algorithm, things are even worse for the SIMD version where even at group size of 8192 with re-sorting the slowdown is 14%. Running the edge-loop version on 4 cores (8192 group + sorting) we get speedups (relative to reference) of **1.98** and **2.04** for the scalar and SIMD versions respectively (yes I quadruple checked).; If you are keeping track of the number two things should surprise you, the first is that there is no difference between scalar and SIMD now (the vector instruction are still there though), the second is that 4 cores give only a 2x speedup. The reason for both is: the implementation is very memory-bound, and so throwing more compute at it, either in the form of more cores or more lanes, does not help much. This is the 4 core summary:. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed** | 2.0 | 2.0 | 3.8 | 2.8 |. I think the point-based versions scale better because they are a bit less memory-bound as they write to the gradient sequentially and they have a bit more compute due to the duplicated computations. **Conclusion**; Computing gradients via point-loops allows simpler and more generic SIMD and SPMD strategies, the resulting implementation seems to do better in the bandwidth-starved conditions typical of modern hardware (3 or more cores per memory channel). However, additional adjacency information is required to support point-based loops. Next I will talk about limiters, almost all concepts are introduced so it will be shorter (promise). As a little appetizer let me tell you we can recover the extra memory and we could be looking at a 2.7x speedup for gradients+limiters.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:15713,recover,recover,15713,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['recover'],['recover']
Safety,"hort array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 = T0.widePermuteLo(T2); C1 = T1.widePermuteLo(T3);; C2 = T0.widePermuteHi(T2); C3 = T1.widePermuteHi(T3);. (Array4d(&bjj[0][k])-C0).store(&bjj[0][k]);; (Array4d(&bjj[1][k])-C1).store(&bjj[1][k]);; (Array4d(&bjj[2][k])-C2).store(&bjj[2][k]);; (Array4d(&bjj[3][k])-C3).store(&bjj[3][k]);. C0.store(&bij[0][k]); C1.store(&bij[1][k]);; C2.store(&bij[2][k]); C3.store(&bij[3][k]);; ```; I am showing this because it represents a readability worst case in terms of manipulating SIMD types, we might end up with one or two of these to get the best performance possible but they will always be encapsulated and deep in kernel-type areas of SU2 that are almost never touched. ## Conclusions; - Over 45% faster CSysMatrix updates by mapping off-diagonal blocks to edges and diagonal blocks to points.; - Colouring is the best strategy for hybrid parallelism of compute-heavy edge loops and matrix updates as it interleaves compute and memory operations.; - AoS storage should be kept to avoid significant loss of performance in compute-light edge loops due to poor locality of SoA storage.; - Major implication of AoS is on point loops where some data needs to be fetched (transposed) into local variables for effective vectorization.; - An intermediate storage scheme, AoSoA, can provide both good locality and vectorization of point loops, however it requires that data be accessed via special iterators and scalar code based on it would have poor performance. Next I will try to estimate how much we can gain for a ""realistic"" numerics class.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:16984,avoid,avoid,16984,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['avoid'],['avoid']
Safety,"i_i[iVar]);; phiMin(jPoint,iVar) = min(phiMin(jPoint,iVar), phi_i[iVar]);; }; }. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; #if SORT_BY_COLOR==1; size_t iEdge = k;; #else; size_t iEdge = edgeIdx[k];; #endif. size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. // i to j vector; double d_ij[3] = {0.0, 0.0, 0.0};. for(size_t iDim=0; iDim<nDim; ++iDim); d_ij[iDim] = 0.5*(coords(jPoint,iDim)-coords(iPoint,iDim));. // projections; double proj_i[nVar], proj_j[nVar];. #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); proj_i[iVar] = proj_j[iVar] = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; proj_i[iVar] += d_ij[iDim]*grad(iPoint,iVar,iDim);; proj_j[iVar] -= d_ij[iDim]*grad(jPoint,iVar,iDim);; }; }. // choose the ""right"" delta based on sign of projection; // and avoid division by zero; double lim_i[nVar], lim_j[nVar];. #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; lim_i[iVar] = phiMax(iPoint,iVar);; lim_j[iVar] = phiMax(jPoint,iVar);; }. const double eps = numeric_limits<double>::epsilon();. // very simple if's are required to get vectorization; // trough vector comparisons and masked blends; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; if(proj_i[iVar] <= 0.0); {; lim_i[iVar] = phiMin(iPoint,iVar);; proj_i[iVar] = min(proj_i[iVar], -eps);; }. if(proj_j[iVar] <= 0.0); {; lim_j[iVar] = phiMin(jPoint,iVar);; proj_j[iVar] = min(proj_j[iVar], -eps);; }; }. #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; lim_i[iVar] = (lim_i[iVar]-phi(iPoint,iVar))/proj_i[iVar];; limiter(iPoint,iVar) = min(limiter(iPoint,iVar), lim_i[iVar]);. lim_j[iVar] = (lim_j[iVar]-phi(jPoint,iVar))/proj_j[iVar];; limiter(jPoint,iVar) = min(limiter(jPoint,iVar), lim_j[iVar]);; }; }. #pragma omp parallel for schedule(dynamic,TARGET_CHU",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:6100,avoid,avoid,6100,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['avoid'],['avoid']
Safety,"ild\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe; C compiler for the build machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the build machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the build machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the build machine: c++ ld.bfd 2.30; None of 'CC' are defined in the environment, not changing global flags.; None of 'CFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity testing C compiler: gcc; Is cross compiler: False.; None of 'CC_LD' are defined in the environment, not changing global flags.; ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:2387,Sanity check,Sanity check,2387,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,1,['Sanity check'],['Sanity check']
Safety,"irst;; size_t jPoint = connectivity[iEdge].second;; ```; Apologies for the macro but it is just to illustrate that if we re-sort edge data after coloring the edge index is the loop index, otherwise the edge indices for each color need to be stored in a separate array.; Note that for each edge loop we first loop over colors, then over same-color edges, it is this inner loop that can run in parallel in chunk sizes that are multiple of the group size considered during coloring. There is some runtime cost on entry to every #omp parallel section, with coloring we enter one such section once by color. I mentioned in the introduction coloring reduces locality and therefore performance, here is the effect of color group size on the execution time of the scalar code on one thread:; ![image](https://user-images.githubusercontent.com/38071223/64686801-2e0d3d00-d481-11e9-82a0-c56e5554cd83.png); The hassle-free option of not sorting by color ""never"" recovers the performance of the base algorithm, things are even worse for the SIMD version where even at group size of 8192 with re-sorting the slowdown is 14%. Running the edge-loop version on 4 cores (8192 group + sorting) we get speedups (relative to reference) of **1.98** and **2.04** for the scalar and SIMD versions respectively (yes I quadruple checked).; If you are keeping track of the number two things should surprise you, the first is that there is no difference between scalar and SIMD now (the vector instruction are still there though), the second is that 4 cores give only a 2x speedup. The reason for both is: the implementation is very memory-bound, and so throwing more compute at it, either in the form of more cores or more lanes, does not help much. This is the 4 core summary:. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed** | 2.0 | 2.0 | 3.8 | 2.8 |. I think the point-based versions scale better because they are a bit less memory-bound as they write ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:14076,recover,recovers,14076,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['recover'],['recovers']
Safety,"it ""a"" to look at some assembly, honestly sliced bread has nothing on perf. NOTE: By and large Perf is not an intrusive tool, as such the accuracy of the measurements is limited i.e. it is probably not a good idea to draw conclusion about <1% variations. Moving on, I took the top level percentages only, normalized by that of CFluidIteration::Iterate (to exclude pre-processing time) and multiplied the results from the total ""iteration time"" from the history file. Doing that for before and after results allowed computing individual speedup factors for each important routine (in terms of time, otherwise they are all special and important in their own way) e.g. gradients, limiters, upwind/viscous residuals, etc.; ![image](https://user-images.githubusercontent.com/38071223/63292708-30cfa480-c2be-11e9-8d4a-5feb3dc61abf.png). Here is the data by the way: [results.xlsx](https://github.com/su2code/SU2/files/3517492/results.xlsx). As predicted the linear solvers stay the same and routines that are light see more speedup than their arithmetic-intensive friends.; What is surprising to me is how intensive the convective residuals appear to be with only a 7% improvement, so surprising in fact, I do not think the above paints the full picture. Maybe the outlet bandwidth bottleneck (into the Jacobian matrix) is more important.; To put that do the test I switched to Euler-explicit time marching and repeated the measurements:; ![image](https://user-images.githubusercontent.com/38071223/63293351-d8010b80-c2bf-11e9-8135-2502eac1128e.png); Better, but not by much, which means upwind and viscous residuals computations might gain a lot from vectorization (SIMD). And like @economon mentioned even more if they are somehow fused together.; It also means the writes to CSysMatrix are relatively expensive, I think there are two-three reasons for it.; - We do a linear search on each Add/SubtractBlock - This could be replaced by a map.; - The Jacobian contributions are first written into a tempor",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-522730951:3946,predict,predicted,3946,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-522730951,2,['predict'],['predicted']
Safety,"kc.exe; C compiler for the build machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the build machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the build machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the build machine: c++ ld.bfd 2.30; None of 'CC' are defined in the environment, not changing global flags.; None of 'CFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity testing C compiler: gcc; Is cross compiler: False.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: gcc D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.c -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; --",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:2560,Sanity check,Sanity check,2560,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['Sanity check'],['Sanity check']
Safety,"l Strategy; The strategy now is to start a parallel section in CSysSolve::Solve that covers building the preconditioner and solving the linear system.; Linear algebra routines called within this section have _worksharing_ constructs instead of _parallel_ ones, i.e. the work is distributed by however many threads arrive to that routine. This also makes the routines safe to call in serial.; The only ""dangerous"" things to do in parallel are to: manage memory for a shared object (multiple threads call `new` but there is only one shared pointer on which to call `delete`); writing to the same memory locations concurrently.; I tried to make the first issue debugable by asserting that the initialization routines of CSysMatrix and CSysVector are only called by the master thread.; For the second issue I made the associated classes as const-correct as possible, that should at least make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:1441,risk,risk,1441,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['risk'],['risk']
Safety,"ld; Build type: native build; None of 'PKG_CONFIG_PATH' are defined in the environment, not changing global flags.; None of 'PKG_CONFIG_PATH' are defined in the environment, not changing global flags.; Project name: SU2; Project version: 7.1.1 ""Blackbird""; None of 'CC' are defined in the environment, not changing global flags.; None of 'CFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity testing C compiler: gcc; Is cross compiler: False.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: gcc D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.c -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe; C compiler for the build machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the build machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\b",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:1457,Sanity check,Sanity check,1457,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['Sanity check'],['Sanity check']
Safety,"look, I used a conservative number based on:; For the Roe scheme 4 matrices are generated (Jacobian i, Jacobian j, P tensor, P^-1 tensor), each coefficient of those matrices requires a reasonable number of floating point ops, and two of those matrices are indeed multiplied by each other.; So lets say 5 matrix-matrix multiplications are representative, this should be a conservative estimate as I am not considering the eventual fusion of convective and diffusive discretizations. **The vectorized code is 1.5 times faster.**; This is a fair 1.5 as the code is running on 4 fast cores (parallel via colouring for the reasons I explained previously) and 2 memory channels (scalar code can eventually saturate the memory bandwidth too, but it would take an unreasonable ratio of cores to channels to do so).; Furthermore the scalar code I am considering is writing to CSysMatrix with all the mapping and vectorized writes I mentioned before, before you get all compound interest and take this 1.5 with the 1.47 from CSysMatrix, the speedup relative to code without mapping and vector writes is 1.85.; I restate that this does not require changes to the data layout, again for reasons previously mentioned. ## SpMv - Sparse matrix-vector multiplication; With all these speedups the linear solvers will start taking well over 50% of the time, and so it is desirable to make some improvements there too.; Sadly SpMv is as bandwidth bound as it gets, 1 FMA per 8 bytes, nonetheless I implemented some number-of-variable-specific kernels (for nVar=4 and nVar=5) and I can get about **1.12** speedup (same realistic core to channel conditions). I am not going to dump that code here because it is not too nice to look at (it uses intrinsics) but again that would be something hidden away in CSysMatrix that most people would not need to look at, and there would be a safe generic fall-back for arbitrary number of variables. I think I will do the estimated global speedup together with the summary/proposal.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539177957:4278,safe,safe,4278,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539177957,2,['safe'],['safe']
Safety,"m_j = phiMax(jPoint,iVar);. const double eps = numeric_limits<double>::epsilon();. if(proj_i <= 0.0); {; lim_i = phiMin(iPoint,iVar);; proj_i = min(proj_i, -eps);; }. if(proj_j <= 0.0); {; lim_j = phiMin(jPoint,iVar);; proj_j = min(proj_j, -eps);; }. lim_i = (lim_i-phi(iPoint,iVar))/proj_i;; limiter(iPoint,iVar) = min(limiter(iPoint,iVar), lim_i);. lim_j = (lim_j-phi(jPoint,iVar))/proj_j;; limiter(jPoint,iVar) = min(limiter(jPoint,iVar), lim_j);; }; }. for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; for(size_t iVar=0; iVar<nVar; ++iVar); {; double lim = limiter(iPoint,iVar);; limiter(iPoint,iVar) = lim*(lim+2)/(lim*lim+lim+2);; }; }; }; ```; Something in the code above is a bit different from the implementation in SU2, namely:; ```C++; double lim_i = phiMax(iPoint,iVar);; if(proj_i <= 0.0) {; lim_i = phiMin(iPoint,iVar);; proj_i = min(proj_i, -eps);; }; ```; This is the bit of code that selects the right delta based on the sign of the projection and avoids division by zero, this less readable version does the same with one branch instead of three, simplifying ""if"" statements is essential for vectorization, so to make the comparison fair I used the same strategy in the scalar code. To make this post shorter I will show the SIMD and parallel version of the code right away. Trying to process multiple edges instead of multiple variables has all the problems I mentioned for the gradients, so again we use the trick of templating on the number of variables.; ```C++; template<size_t nVar>; void computeLimiters_impl(size_t nPoint,; size_t nDim,; const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; const Matrix& coords,; const Matrix& phi,; const VectorOfMatrix& grad,; Matrix& phiMax,; Matrix& phiMin,; Matrix& limiter); {; // initialize; #pragma omp parallel for schedule(dynamic,TARGET_CHUNK_SIZE); for(size_t iPoint=0; iPoint<nPoint; ++iPoint); {; #pragma omp simd; for(size_t iVar=0; iVar<nVar; ++iVar); {; phiM",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:3008,avoid,avoids,3008,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['avoid'],['avoids']
Safety,"meson.build does indeed look short and clean. Tried this on mac, and hit the following error (I guess the OS is more picky?):. ERROR: Could not detect Ninja v1.5 or newer. Any issue with updating to a newer ninja version in the bootstrap? . Also, for older git versions (like mine apparently), you may need to add the --init and --recursive flags to 'git submodule update'",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/685#issuecomment-495097393:144,detect,detect,144,https://su2code.github.io,https://github.com/su2code/SU2/issues/685#issuecomment-495097393,1,['detect'],['detect']
Safety,"nd of my mesh. It's not necessary, though, and AMG performs ridge detection to identify any features anyway. I assume since it built and (kinda) ran that you managed to fix your python setup through your aliases?. What was the specific error that you got? I probably should have also mentioned that I've changed a lot of options since updating from Vic's old code. Here are the list of required options (values from my test case):; ```; % Type of sensor used for adaptation; % Options include GOAL (adjoint-based), MACH, PRES; PYADAP_SENSOR= GOAL; % Objective function used for goal-oriented adaptation; OBJECTIVE_FUNCTION= LIFT; % Maximum cell size for adaptation; PYADAP_HMAX= 500.0; % Minimum cell size for adaptation; PYADAP_HMIN= 1e-9; % Gradation factor (typically 1.2-1.8); PYADAP_HGRAD= 1.8; % Norm used for adaptation; % 1.0 or 2.0 recommended for inviscid flows; % 4.0 recommeneded for viscid; ADAP_NORM= 4.0; % Approximate mesh size (NPOI) at each level; PYADAP_COMPLEXITY= (30000, 60000, 120000); % Number of adaptations performed at each level; PYADAP_SUBITE= (3, 3, 3); ```; Some optional options:; ```; % Numerical method for Hessian reconstruction in goal-oriented adaptation; % Currently only Green-Gauss; NUM_METHOD_HESS= GREEN_GAUSS; % Value for ITER for the flow solver at each level; PYADAP_FLOW_ITER= (2999, 4999, 6999); % Value for ITER for the adjoint solver at each level; PYADAP_ADJ_ITER= (2999, 4999, 6999); % Value for CFL_NUMBER for the adjoint solver at each level; PYADAP_CFL= (10.0, 15.0, 20.0); % Background mesh containing fine surface representation; % Can be either a .su2 or .meshb (GMF) file; % If not specified, the baseline mesh is used; PYADAP_BACK= rae2822_euler_40960_split.meshb; % Invert the background mesh orientation; % Sometimes required for 3D meshes, since AMG doesn't perform; % a check that the orientation of the background and foreground; % meshes match; PYADAP_INV_BACK= NO; % Don't use ridge detection if corners specified; PYADAP_RDG= NO; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619412341:2244,detect,detection,2244,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619412341,1,['detect'],['detection']
Safety,"ning test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.exe; C++ compiler for the build machine: c++ (gcc 8.1.0 ""c++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C++ linker for the build machine: c++ ld.bfd 2.30; None of 'CC' are defined in the environment, not changing global flags.; None of 'CFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity testing C compiler: gcc; Is cross compiler: False.; None of 'CC_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: gcc D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.c -o D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe -pipe; Sanity check compile stdout:; ; -----; Sanity check compile stderr:; ; -----; Running test binary command: D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckc.exe; C compiler for the host machine: gcc (gcc 8.1.0 ""gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0""); C linker for the host machine: gcc ld.bfd 2.30; None of 'AR' are defined in the environment, not changing global flags.; None of 'CXX' are defined in the environment, not changing global flags.; None of 'CXXFLAGS' are defined in the environment, not changing global flags.; None of 'LDFLAGS' are defined in the environment, not changing global flags.; None of 'CPPFLAGS' are defined in the environment, not changing global flags.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity testing C++ compiler: c++; Is cross compiler: False.; None of 'CXX_LD' are defined in the environment, not changing global flags.; Sanity check compiler command line: c++ D:\Programme\SU2-7.1.1\build\meson-private\sanitycheckcpp.cc -o D:\Programme\SU2-7.1.1\bui",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/888#issuecomment-821840286:3584,Sanity check,Sanity check,3584,https://su2code.github.io,https://github.com/su2code/SU2/issues/888#issuecomment-821840286,2,['Sanity check'],['Sanity check']
Safety,"onstructor of CSysMatrix by using 'new', and calling the StiffMatrix.Initialize() method, for what I see in matrix_structure.cpp. Also, StiffMatrix is a sparse matrix (nDim x nPoint) x (nDim x nPoint), which must be allocated correctly using the Initialize method to avoid carrying around lots of zeros. With regards to the other point, I think that it is interesting to use the Initialize features of the CSysVector and CSysMatrix in the constructor of the class, just as it happens in the rest of the solver classes (see for example solver_direct_mean, line 261, where the Jacobian of the problem is initialized using a Jacobian.Initialize() call in the constructor). As far as I see it, the mesh update problem is nothing but a copy of the linear elasticity problem, so maintaining the parallelism with all the other solvers in the code (and, in particular, with the structural solver) may be interesting. . Moreover, by allocating the memory in the constructor using StiffMatrix.Initialize(nPoint, nPointDomain...) we make sure we can use the linear solvers in parallel by building a compliant sparse matrix. And if we allocate the stiffness matrix in the constructor, it makes sense to also do so with the vectors of the problem. Again, this maintains the similarities with the rest of the solvers. Finally, in my particular case I call the SetVolume_Deformation() function at least as many times as I do with the fluid and the structural solver. The mesh deformation is a third field in the problem, and by initializing the structure at the beginning of the simulation we can reuse the same spaces in memory along the whole of it, given that (at least in unsteady cases) the mesh update routines may be called several times. This way we avoid to be continuously allocating/deallocating memory. Also, this is useful to have a more accurate measure of the amount of memory we will be using along the simulation right at the beginning of the calculation - although peaks of memory are unavoidable.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/200#issuecomment-148017482:2136,avoid,avoid,2136,https://su2code.github.io,https://github.com/su2code/SU2/pull/200#issuecomment-148017482,1,['avoid'],['avoid']
Safety,"opt/xcat/sbin; PATH: /usr/lib64/qt-3.3/bin; PATH: /opt/pbs/default/bin; PATH: /opt/pbs/tools/bin; PATH: /usr/lpp/mmfs/bin/; PATH: /usr/local/bin; PATH: /bin; PATH: /usr/bin; PATH: /usr/local/sbin; PATH: /usr/sbin; PATH: /sbin; PATH: /gshare/soft/init; PATH: /gshare/soft/scripts; PATH: .; PATH: /gshare/soft/init; PATH: /gshare/soft/scripts; PATH: . ## ----------- ##; ## Core tests. ##; ## ----------- ##. configure:2465: checking build system type; configure:2479: result: x86_64-unknown-linux-gnu; configure:2499: checking host system type; configure:2512: result: x86_64-unknown-linux-gnu; configure:2532: checking target system type; configure:2545: result: x86_64-unknown-linux-gnu; configure:2587: checking for a BSD-compatible install; configure:2655: result: /usr/bin/install -c; configure:2666: checking whether build environment is sane; configure:2721: result: yes; configure:2872: checking for a thread-safe mkdir -p; configure:2911: result: /bin/mkdir -p; configure:2918: checking for gawk; configure:2934: found /bin/gawk; configure:2945: result: gawk; configure:2956: checking whether make sets $(MAKE); configure:2978: result: yes; configure:3075: checking whether make supports nested variables; configure:3092: result: yes; configure:3117: checking for style of include used by make; configure:3145: result: GNU; configure:3196: result: >>> MPI support disabled by default <<<; configure:3269: checking for g++; configure:3285: found /usr/bin/g++; configure:3296: result: g++; configure:3323: checking for C++ compiler version; configure:3332: g++ --version >&5; g++ (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4); Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. configure:3343: $? = 0; configure:3332: g++ -v >&5; Using built-in specs.; Target: x86_64-redhat-linux; Configured with: ../configure --prefix=/usr --mandir=/usr/share/man ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/250#issuecomment-205167006:2100,safe,safe,2100,https://su2code.github.io,https://github.com/su2code/SU2/issues/250#issuecomment-205167006,2,['safe'],['safe']
Safety,"ry_plane) and add the following settings:; ```; % Surf; YES=oldEuler; NO=NewEuler; VISUALIZE_SURFACE_DEF= NO ; % Vol; YES=UpwRoe; NO=JST_BC; VISUALIZE_VOLUME_DEF= NO; % YES=JST; NO=see VOLUME_DEF; MUSCL_ADJFLOW= NO; ```; In that branch I added the possibility to run the old or new Euler_Wall BC on `MARKER_EULER `walls (`MARKER_SYM `always uses the the new implementation) using `VISUALIZE_SURFACE_DEF` as a hooked boolean. ; With `VISUALIZE_VOLUME_DEF` one can change which convective scheme is used on the boundary, i.e. what is in the numerics container `CONV_BOUND_TERM`. The Default is `CUpwRoe_Flow` (`ROE`) and I added `CCentJST_Flow_BC` which is the normal `JST` without dissipation. ; The third option `MUSCL_ADJFLOW` has to be left on NO, this is work in progress :) . With the options given above you will use the new Euler wall implementation but using JST without dissipation term as a convective scheme for boundary nodes. This (as I say in point 2. in my above post) basically recovers the old euler wall implementation. . For the OneraM6 case the combination of new Euler + JST_BC recovers the CD & CL results of the old code. Can you also try running `CONV_NUM_METHOD_FLOW= ROE` with the code you labelled as 'SU2 FSI new (new bound condition)' and 'SU2 FSI new (oldbound condition)'. Because by doing so you switch the numerical method in the volume and to the same ROE scheme on the boundary -> just as the current default in the develop. So my current assumption is that it is a matter of convective scheme (on the boundary). ~~I'll try to attach my cases as a zip and two images here.~~; Here the green line represents the current develop if one uses MARKER_EULER or MARKER_SYM. Another info here is: by using the oldEuler wall (i.e. line 1&2) the choice of convective scheme on the boundary is irrelevant for the Euler_wall as the old implementation ""skips"" that step. The red line 4 is the setup I want you to try because this recovers the old results in this case.; ![image](",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-578048838:1134,recover,recovers,1134,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-578048838,1,['recover'],['recovers']
Safety,"some validation cases and written tutorials and; having this in main repository will ease the process of adding/modifying; the docs to a simple pull request. I also have a suggestion regarding the Test Cases and Tutorial files. I; apologize if this is the wrong place or this has been discussed already,; but still will give it a try:; - Test cases folder from SU2/su2code repository shall be moved to the; SU2/TestCases repository. Rationale: this makes one repository to store the; test case *.cfg files and mesh files.; - There shall be a TestCases/Mesh folder to store all the meshes needed for; Test Cases files, without subdivisions for RANS, Euler etc subfolders.; Considering that multiple test cases use the same mesh and all the mesh; files are distinct, this solution generates one place to store all the mesh; files. Should a user perform a test case, he/she will find the mesh by name; referenced in the *.cfg file instead searching thru multiple folders. This; will also help avoiding unnecessary copies of mesh files.; - The same should be done for Tutorial files: Tutorial/Mesh folder for; storing meshes (duplicating these few files from TestCases/Mesh should not; be a problem IMO, but will really help a new user to get up to speed with; SU2); - I have no clear opinion on where the Tutorial files folder should be; stored. But considering moving written tutorials to main repository i think; that tutorial files should also be stored in main SU2/su2code repository. Best regards and Happy New Year; Jƒôdrzej. 2017-12-30 23:45 GMT+01:00 Tim Albring <notifications@github.com>:. > What do you think of moving the written tutorials also to the main; > repository ? Then we can have links in the wiki to the markdown files like; > this (the link will be much shorter if the files are in the master branch):; > https://github.com/su2code/SU2/blob/0e36facc031aaf6b411fd30a0aab80; > 29ebe325d8/Tutorials/Inviscid_Bump/Inviscid_Bump.md; >; > ‚Äî; > You are receiving this because you are sub",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/485#issuecomment-354736415:1306,avoid,avoiding,1306,https://su2code.github.io,https://github.com/su2code/SU2/pull/485#issuecomment-354736415,2,['avoid'],['avoiding']
Safety,"t the initialization routines of CSysMatrix and CSysVector are only called by the master thread.; For the second issue I made the associated classes as const-correct as possible, that should at least make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear preconditioners. For now the objective is ""just"" not to loose performance while gaining flexibility.; - The performance of MPI+threads with 1 thread per rank will be worse than just MPI (no",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:2162,safe,safe,2162,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['safe'],['safe']
Safety,"tColIterator(jPoint);. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += (gradI++)*d_ij[iDim];; phiR -= (gradJ++)*d_ij[iDim];; }; ...; ```; to get better assembly; ```asm; .L7:; vmovapd ymm3, ymm13; vmovapd ymm2, YMMWORD PTR [rbp-400]; add rax, 32; vgatherqpd ymm0, QWORD PTR [rcx+ymm1*8], ymm3; vpaddq ymm1, ymm1, ymm11; vmovapd YMMWORD PTR [rbp-272], ymm0; vmovapd YMMWORD PTR [rbp-240], ymm0; vfmadd132pd ymm0, ymm2, YMMWORD PTR [rax-32]; vmovdqa YMMWORD PTR [rbp-208], ymm1; vmovapd YMMWORD PTR [rbp-400], ymm0; cmp rax, rbx; jne .L7; ```; which makes the vectorized code perform just as well as the scalar code, iterators could also be used for the other variables but that would start to hurt readability without improving the performance much. _Note: There is also a chance the compiler (gcc) is not doing this kind of optimization because of the way I wrote the code..._. **So we need AoS to avoid losing performance in lightweight numerics classes.**. Before we look into the impact of not using SoA in the gradient and limiters routines let me tell you there is a way to have the best of both worlds, enter the *_array of structures of arrays_* or as I like to call it zig zag storage, aka a right mess.; Imagine an AoS of short arrays of SIMD length, e.g. `{ {u0 u1 u2 u3} {v0 ... v3} {w0 ... w3} {u4 u5 u6 u7} ... }` with that it is possible to fully vectorize point loops as the first index (iPoint) is contiguous in groups of SIMD length and when looping along variables and dimensions in edge loops the stride is small enough (equal to SIMD length) to trigger hardware prefetching.; The catch is that we need even more integer arithmetic and so we really need iterators to amortise that cost, there is also the drawback that scalar usage of such a container would be terrible. **For these reasons I think we should sacrifice ultimate performance and keep node data in AoS storage.**. The major impact on",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:12656,avoid,avoid,12656,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['avoid'],['avoid']
Safety,"thanks! should I close issue,.. or will someone take it up and code auto FFD box number detection?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/684#issuecomment-495213847:88,detect,detection,88,https://su2code.github.io,https://github.com/su2code/SU2/issues/684#issuecomment-495213847,1,['detect'],['detection']
Safety,"the_Command ); File ""/opt/su2/SU2v7_adap/bin/SU2/run/interface.py"", line 292, in run_command; raise exception(message); RuntimeError: Path = /work/projects/mesh_adapt_testing/A000i_adap/2_cfd/adap/ini/,; Command = mpirun --use-hwthread-cpus -n 40 /opt/su2/SU2v7_adap/bin/SU2_CFD config_CFD.cfg; SU2 process returned error '254'; cmap[28922] == -1; cmap[28853] == -1; cmap[28858] == -1; cmap[28966] == -1; cmap[28989] == -1; cmap[28943] == -1; cmap[28915] == -1; cmap[28950] == -1; cmap[28923] == -1; cmap[28871] == -1; cmap[28941] == -1; cmap[28887] == -1; cmap[28889] == -1; cmap[37] == -1; cmap[32342] == -1; cmap[24652] == -1; cmap[50507] == -1; cmap[51850] == -1; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun detected that one or more processes exited with non-zero status, thus causing; the job to be terminated. The first process to do so was:. Process name: [[57069,1],11]; Exit code: 254; --------------------------------------------------------------------------; ```. When I check the `log.out`, I see that it occurs when calling ParMETIS (`log.err` is empty):; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 7860157 grid points before partitioning.; 11486658 volume elements before partitioning.; 3 surface markers.; 32148 boundary elements in index 0 (Marker = BODY).; 76160 boundary elements in index 1 (Marker = FARFIELD).; 291440 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency structure.; Calling ParMETIS...; ```. I figured that that this might not be an AMG issue but a 7.0.3 build issue, so I tried running `mpirun --use-hwthread-cpus",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754504570:2347,detect,detected,2347,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754504570,1,['detect'],['detected']
Safety,"ture of a future release is going in the direction of what you need. Compiled libraries would be easy to handle via pkg config. . Ah, I did not understand that this is something you were already working on and were asking me to test, I thought you were suggesting to use develop to install the software on our production cluster. I should not have assumed that, it's just something that is unfortunately quite frequent in the field of scientific software (just use the head of the git repo). I did not have any clone of the repo, so did not see that script (only the one in `legacy`) initially. . ```; $ ./preconfigure.py --help; usage: preconfigure.py [-h] [--with-own-meson] [--no-codi] [--no-medi]; [--no-opdi] [--no-mpp] [--no-coolprop] [--no-mel]; [--no-mlpcpp]. optional arguments:; -h, --help show this help message and exit; --with-own-meson download own copies of Meson and Ninja; --no-codi do not download own copy of CoDiPack; --no-medi do not download own copy of MeDiPack; --no-opdi do not download own copy of OpDiLib; --no-mpp do not download own copy of Mutationpp; --no-coolprop do not download own copy of CoolProp; --no-mel do not download own copy of MEL; --no-mlpcpp do not download copy of MLpCpp; ``` . It seems like to go in the right direction. Is there a plan to provide options to specify how to find installed copies of those ? Something like `--medi=/path/to/installed/medi` and such ? pkgconfig or other auto-detection mechanisms usually work, but sometimes it doesn't, and explicit workarounds sometimes help. . I also don't see other packages that end up in externals, such as `metis`, `parmetis`, `autotools`, `catch2`. I am not sure how those are used (or if they are used), but I noticed folders for them in the `externals` folder. Is there a plan to allow using external versions of those ?. > But your choices of words sound a bit unfriendly so I honestly don't care, we can also close the issue until the next release. My apologies, I misunderstood your request.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1645726352:1490,detect,detection,1490,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1645726352,1,['detect'],['detection']
Safety,"we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writes to 2 locations (gather / scatter access pattern, not to be confused with the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditions, i.e. each endpoint is referenced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main memory and forces cache coherency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** r",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:4118,risk,risk,4118,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['risk'],['risk']
Security," Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. Name : lapack; Version : 3.9.0-2; Description : Linear Algebra PACKage; Architecture : x86_64; URL : https://www.netlib.org/lapack; Licenses : custom; Groups : None; Provides : None; Depends On : blas; Optional Deps : None; Required By : arpack qrupdate suitesparse; Optional For : None; Conflicts With : None; Replaces : None; Installed Size : 7.03 MiB; Packager : Antonio Rojas <arojas@archlinux.org>; Build Date : Sun 24 Nov 2019 04:13:58 PM IST; Install Date : Sat 22 Feb 2020 01:05:19 PM IST; Install Reason : Installed as a dependency for another package; Install Script : No; Validated By : Signature. Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. ```. I tried it without enabling openblas, it did move forward but broke further later in the build with a ridiculously long error message. For the sake of readability I am attaching a [logfile](https://github.com/su2code/SU2/files/4652822/su2_build_NoOpenBlas.log) here. For obvious reasons I",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631053271:1557,Validat,Validated,1557,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631053271,1,['Validat'],['Validated']
Security," case, we would have something along the lines of: . a) NACA0012; i) 113 x 33; ii) 225 x 65 ; iii) 449 x 129; iv) ... This way we have a family of meshes and configuration files that are specifically built for the purpose of validating the code and comparing with other solvers. I might be useful to compress meshes that are larger than a certain size (say 10MB). We should also put a limit on the size of a single mesh that the repository can handle (say 50MB?). . Within the home directory, the README file should list all the cases in the repository, who the custodian of the test case is (person with meshes in case the meshes are too large), and which version it was last run on. . I thought about splitting it up into Verification cases and Validation cases, but I thought it would be more informative and intuitive to split up according to the physics of the simulations. My thinking might be limited because that's how I have seen the TestCases folder organized, so any other suggestions are welcome. I think it is imperative that this is accompanied with a section on the SU2 website that showcases just the results of the validation test cases (grid convergence studies, residual reductions etc) and links to the v&v repo appropriately. This way, if people are just inquisitive about SU2's performance, they can get a quick snapshot of the results, without the need to run the cases themselves. . I also wanted to broach the topic of convergence here. Would it be a good idea to standardize the termination criteria wherever possible? For example, in the NACA0012 case we can ensure that residuals are reduced by 8 orders of magnitude for all meshes. Or for the ONERAM6, we use Cauchy convergence and make sure the C_L is converged to 6 orders of magnitude. This would have to be flexible since the same level of convergence might not apply to all the cases in the repository. But for within a test case, I think it would be good to use the same convergence criteria for a family of meshes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426026053:1757,validat,validation,1757,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426026053,2,['validat'],['validation']
Security," committed to the develop branch.; > > * When a developer wants to implement something new, they create a new branch from develop, implement their thing, and merge it again with develop. You see that happening here, in the top of the page you see; > > ; > > > [pcarruscag](https://github.com/pcarruscag) wants to merge 2 commits into [develop](https://github.com/su2code/SU2/tree/develop) from [supersonic_profile](https://github.com/su2code/SU2/tree/supersonic_profile); > > ; > > ; > > You see in the section _Files Changed_ the changes compared to the current develop branch. This shows that this branch is up to date with current develop, only the new changes for the inlet profile show up.; > > I did not go through the code yet, but when you run it without having an inlet.dat file present, it should create one for you filled with a uniform profile. When you then use this file unaltered, does that work?; > ; > Hi, I got how the branches work. In this case, I first downloaded the 'develop' branch to make sure everything is consitent with Pedro, and then I downloaded and replaced the 6 new committed files that related to the supersonic inlet profile development. The code should be totally the same at this point. And I did a flat plate test, which actually I need to fill a uniform profile, since the code would only generated an empty one. However, a segment error still occurs, and I attched the error file with Valgrind output. The test files are on the above conversations so that you may also take a try. Thanks for the help! [error.txt](https://github.com/user-attachments/files/16323710/error.txt). From the error, I think The SU2_CFD encountered an invalid memory read operation during an attempt to read the inletUNI.dat file, causing the program to crash with a segment error (SIGSEGV). The specific error occurs in the CConfig::GetInletPtotal function, which seems attempts to access memory that has not been properly initialized or allocated. Any ideas? @pcarruscag @bigfooted",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241548890:2323,access,access,2323,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241548890,1,['access'],['access']
Security," make someone think twice before changing a member variable of those classes. The risk is still there for input variables as an algorithm development aspect... For example `MatrixVectorProductTransposed` cannot be made thread-parallel as simply/naively as its normal counterpart. ### Communication Model; The MPI + Threads communication model is very simple, currently only the master thread calls MPI routines (including `Error`), this requires thread barriers before and after the communication to make sure the correct values are passed and _seen_ by all threads.; We can test other alternatives in the future but at the moment this does not seem to be a significant bottleneck.; _Worksharing_ constructs have implicit barriers at completion, for CSysVector routines I used `nowait` modifiers, it is safe to call those routines in sequence since the loop sizes, and static work scheduling specifications are identical.; However, routines that access a CSysVector in a different way, should have an explicit barrier before using the vector (or risk having undefined behaviour). You will see these barriers on entry to matrix-vector product, and every `ComputeXXXPreconditioner` (if you don't, let me know xD). I think those routines are large enough to amortise the cost of this. ### Performance; Disclaimer:; - We are talking about linear solvers only, **you will not see a global improvement yet**.; - The large global improvements from ""hybridization"" will come from the multigrid behaving better on less decomposed domains, and from the ability to independently tune the number of cores used in the linear preconditioners. For now the objective is ""just"" not to loose performance while gaining flexibility.; - The performance of MPI+threads with 1 thread per rank will be worse than just MPI (no free lunches). With this [small case](https://github.com/su2code/SU2/files/3933059/small_case.zip) using 8 cores off a machine with two 2650v4 CPU, Intel MPI 2018 + GCC 8.2, the hybrid (2 ranks of 4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/830#issuecomment-562646766:2305,access,access,2305,https://su2code.github.io,https://github.com/su2code/SU2/pull/830#issuecomment-562646766,2,['access'],['access']
Security," new way of going about CNumerics, these are my design requirements for ""CNewNumerics"":; - Thread-safe (consequently const-correct), a single object must be safe to use by multiple threads.; - Minimal indirection, the polymorphic overhead will be reduced to a single call (ComputeResidual), all auxiliary functions (like the ones that live in CNumerics) will be forcefully inlined, no useless copies of data (no more numerics->SetBlaBla).; - Compile time nDim/nVar, which will: a) avoid heap allocations; b) allow effective loop-unrolling (also during the writes to CSysMatrix).; - Allow low-overhead composition, e.g. have one CRoe for Euler and one CRoeVisc for NS to fuse convective and viscous residuals (without copy pasting code).; - A lot more readable, those cryptic V_i[iDim+1] need to go (somehow...). To achieve all this, the ""CNewNumerics"" will work as a template (obvs) decorator/visitor.; A visitor in the sense that the solver calls the numerics and gives it (read-only) access to all its data, the object pulls whatever it needs directly and there is no need for numerics->SetBlaBla.; A template decorator in the sense that the class can be augmented simply by inheriting from another, along the lines of `class CRoeVisc : public CRoe, public CVisc` (to allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not port all methods in one go xD). The template machinery to support this is actually not too crazy:; ```c++; #include <array>; #include <cmath>. // An example type to use instead of the container that stores solution data for all vertices.; struct SolutionContainer; {; std::array<double,3> velocity;; std::array<",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:1295,access,access,1295,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['access'],['access']
Security," of the directories would have sub-directories for different mesh sizes, with configuration files for each mesh level that have optimized parameters for best results. So for example if we are talking about the NACA0012 case, we would have something along the lines of: . a) NACA0012; i) 113 x 33; ii) 225 x 65 ; iii) 449 x 129; iv) ... This way we have a family of meshes and configuration files that are specifically built for the purpose of validating the code and comparing with other solvers. I might be useful to compress meshes that are larger than a certain size (say 10MB). We should also put a limit on the size of a single mesh that the repository can handle (say 50MB?). . Within the home directory, the README file should list all the cases in the repository, who the custodian of the test case is (person with meshes in case the meshes are too large), and which version it was last run on. . I thought about splitting it up into Verification cases and Validation cases, but I thought it would be more informative and intuitive to split up according to the physics of the simulations. My thinking might be limited because that's how I have seen the TestCases folder organized, so any other suggestions are welcome. I think it is imperative that this is accompanied with a section on the SU2 website that showcases just the results of the validation test cases (grid convergence studies, residual reductions etc) and links to the v&v repo appropriately. This way, if people are just inquisitive about SU2's performance, they can get a quick snapshot of the results, without the need to run the cases themselves. . I also wanted to broach the topic of convergence here. Would it be a good idea to standardize the termination criteria wherever possible? For example, in the NACA0012 case we can ensure that residuals are reduced by 8 orders of magnitude for all meshes. Or for the ONERAM6, we use Cauchy convergence and make sure the C_L is converged to 6 orders of magnitude. This would hav",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426026053:1372,Validat,Validation,1372,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426026053,1,['Validat'],['Validation']
Security," that the v&v results will be unlikely to; be changed. One thing we can do to reduce that risk further would be to; introduce regression tests that compare solution files rather than the; terminal output alone. I can take a stab at that if there's no other; volunteers- probably only needs to be a couple of critical tests, the file; diff may be slightly more expensive than currently, but given the increase; in test precision and detail I think it would be worth it. H. On Thu, Sep 20, 2018, 1:46 PM erangit <notifications@github.com> wrote:. > Hi All; > I‚Äôm a bit worried about the logistics related to checking this v&v data; > base for every new release.; > Unlike the tutorials, these cases, by their nature will be large and will; > require long integrations(the 2D cases might not fall on this category).; > This means also that significant computational resources will be required; > for this evaluation (about twice a year for a growing list of cases). Is it; > practical?; > The only way that I think that it might work is that each contributor will; > be responsible for checking the casesthat he has introduced, before each; > release. Being a voluntary institution, this can not be enforced (and we do; > not want to enforce). How about trying to be less demanding:; > In each validation case there will be a statement about the last version; > that it was checked with and the responsible contributor. Each contributor; > will receive a recommendation to check his cases before a new release, and; > will be able to do that and update the OK label also after the release.; > Less waterproof but might be more workable.; > What do you think?; > Eran; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/581#issuecomment-423273117>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AE7akEt5omvVYLjMzzdaTQ6jgPza0N4wks5uc9R-gaJpZM4Ww0V4>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423283690:1689,validat,validation,1689,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423283690,1,['validat'],['validation']
Security," to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familiar with canonical CFD flows that are used in these cases. But it; > would be great to have other cases, such as Turbo-machinary or FSI cases,; > that show the full breadth of SU2's abilities. This is by no means an; > exhaustive list:; >; > 1. Zero Gradient Flat Plate; > 2. 2D and 3D Bump in Channel; > 3. Asymmetric Diffuser; > 4. Backward facing step; > 5. Unsteady Square cylinder; > 6. NACA0012; > 7. NACA4412 Trailing Edge Seperation; > 8. Joukowski Airfoil; > 9. 30P30N High Lift airfoil; > 10. ONERAM6 Wing; > 11. NASA CRM; > 12. Subsonic and Supersonic Jets; >; > It would be ideal for these test cases to have either high-fidelity data; > (wind tunnel tests, or LES/DNS data), and/or published results of oth",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:1744,validat,validation,1744,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,1,['validat'],['validation']
Security," where; > it makes sense (as described by Clark and in the Stack Exchange discussion); > I would advocate for using it moving forward. There may also be some; > issues that arise multiple times in existing code where a retroactive; > application of unit testing may also make sense. I am copying Pat Miller,; > formerly with DoE, who may have more experience on whether such unit; > testing approaches were useful/worth the investment in some major codes he; > worked on.; >; > Best,; >; > Juan; >; >; > On Jun 4, 2019, at 2:14 PM, Clark Pederson <notifications@github.com>; > wrote:; >; > I propose adding a unit-testing framework and unit-tests to SU2. After; > chatting with @economon <https://github.com/economon>, I've decided to; > move the discussion here to get additional input.; > What is unit testing?; >; > For those not familiar with unit testing, unit testing allows the testing; > of small bits of behavior, ideally using isolated bits of code. It is not; > intended to replace validation testing or formal verification tests.; > Instead, it serves a unique purpose. Consider the three following use cases:; >; > - You're developing a new feature, and you want to test it to see if; > it works. You could do a full simulation, but that takes a lot of time and; > computing power. You want to check if your new behavior behaves as you; > suspect before you throw a lot of resources at it.; > - You submit a PR and discover that one of the regression tests has; > failed. But...why? You know that something is broken, but its hard to track; > down what broke. You want more granular test coverage that can demonstrate; > what broke.; > - You are fixing a very small bug. You know that you should prove that; > your bug fix worked, but it doesn't seem logical to dedicate an entire; > validation case to one small bug fix. You want to write a small test for a; > small fix.; >; > In all of these cases, unit testing fills a unique role. Unit testing; > increases time spent in development",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:2192,validat,validation,2192,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['validat'],['validation']
Security,"""But wait there's more""; - Debugging, profiling, logging: The access methods of containers can do bound-checking for debugging, they can be instrumented to measure how much data is used, or to log every imaginable type of information. Raw arrays will have you run to valgrind or address sanitizers and then good luck if the only example where you are able to reproduce a bug is too large and you need to wait one hour per test.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1225#issuecomment-793847909:62,access,access,62,https://su2code.github.io,https://github.com/su2code/SU2/pull/1225#issuecomment-793847909,2,"['access', 'sanitiz']","['access', 'sanitizers']"
Security,"(I was not expecting this many comments so quickly, thanks guys!). First let me clarify the intent.; I do not propose replacing the routines that deal with CSysMatrix, or change its format, all that (Krylov solvers, sparse approximate factorizations, etc.) is relatively independent from what I have in mind.; Nevertheless being able to use PETSc or HYPRE would be interesting as it would give us access to AMG, and @talbring 's branch feature_template_linear_solver would make such an integration compatible with AD.; What I would like is to have a ""CMatrixDense"" class, to give concrete examples:; - For RBF interpolation the guy who worked on it before me implemented his own Cholesky and LU factorizations, matrix-matrix, matrix-vector routines, etc.; - @jayantmukho recently needed some eigenvector decomposition's for the uncertainty quantification feature.; - I imagine in some other places of the code similar routines were needed, for example small matrix inversion when computing gradients by weighted least squares (indeed what I need now is a QR decomposition). And, as an added bonus, I think some other areas of the code could be simplified / optimized by adopting a dense matrix format, for example:; - This snipped from the viscous numerics refactoring`for (iDim = 0; iDim < nDim; iDim++) {; TauElem[iDim] = 0.0;; for (jDim = 0; jDim < nDim; jDim++); TauElem[iDim] += tau[iDim][jDim]*UnitNormal[jDim];; }` would simply become `TauElem=tau*UnitNormal`; - Cumbersome allocations like `tau_jacobian_i = new su2double* [nDim];; for (iDim = 0; iDim < nDim; iDim++) {; tau_jacobian_i[iDim] = new su2double [nVar];; }` become `Matrix tau_jacobian_i(nDim,nVar);` and the cleanup is dealt with by the destructor of the object automatically. Now to answer some questions.; @juanjosealonso @erangit LAPACK and BLAS are indeed the standard, so much so that most (all?) newer libraries will call their routines behind the scenes.; However they considerably simplify the user interface by encapsulat",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459653772:397,access,access,397,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459653772,2,['access'],['access']
Security,") arrays of jPoint's, arrays of iEdge's, and arrays of directions, and as we know either those are contiguous or we take a huge performance hit.; If all points had the same number of neighbors we could store the adjacency in LIL (list of lists) format, essentially a column-major matrix, but that is not true for hybrid meshes and so we would possibly waste a lot of memory.; The solution is to use a Block-CSR format (like in CSysMatrix) where the blocks are the vectors we want and instead of one row per point we have one row per SIMD group. But even within a SIMD-sized group points can have different number of neighbors...; The solution for that is padding, within each group the number of neighbors is rounded up, shorter rows are then padded with valid data, e.g. jPoint=iPoint, direction=0, and iEdge repeated. This concept of padding is important for something else, you may have noticed that the SIMD point-loops I showed make no provisions for values of nPoint that are not multiples of SIMDLEN, that is because the containers already took care of that by rounding up the number of columns, and so that seemingly out-of-bounds access is safe (ain't encapsulation great). Padding also aligns the start of each column, thus it is a generally good thing to have (on large dimensions) whether used or not. Here is a relative performance recap before we talk bout parallelization. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed** | 1.0 | 2.2 | 0.83 | 1.35 |. **Parallel execution**. I will start at the end for this, all it takes to parallellize the points loops with OpenMP is to take this:; ```C++; for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); ```; And add some pixie dust; ```C++; #pragma omp parallel for schedule(dynamic,128); for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); ```; This means each thread gets chunks of 128 loop iterations (512 points) to work on, assigned in a dynamic way, the 4 core sp",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:11634,access,access,11634,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['access'],['access']
Security,"**SOLVED** see edit. Hello! I seem to remember that it used to be possible to get angle of attack in the history file? Is this still possible? I would like to be able to just pull the angle of attack out of the history file, along with the aero coeffs.; Context:; I have looked through the custom output document and the reference config file, and (perhaps I am secretly blind), but there does not seem to be a simple output group for it.; Reason I need it: performing analysis for fixed Cl, so angle of attack is useful information. At the moment I am getting probed data:; ```; CUSTOM_OUTPUTS='m_vel_x : Macro{VELOCITY_X};\; m_vel_y : Macro{VELOCITY_Y};\; vel_x1: Probe{$m_vel_x}[-15, -15];\; vel_y1: Probe{$m_vel_y}[-15, -15]'; ```; And just getting the tan(y/x) of the probed values for angle. This works well enough.; The other option I have is stripping the angle of attack out of the forced breakdown file, would prefer to not do, but can. EDIT:. **It can be pulled out of line 2 of flow.meta**",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2138#issuecomment-1780159397:91,attack,attack,91,https://su2code.github.io,https://github.com/su2code/SU2/issues/2138#issuecomment-1780159397,8,['attack'],['attack']
Security,"- The meshes are available here: https://github.com/su2code/VandV/tree/master/rans/dsma661; - The config files for the GG + LSQ results are here: [dsma661_configs.zip](https://github.com/su2code/SU2/files/3842634/dsma661_configs.zip). - I did not run the other solvers myself. Those are results from the NASA TMR website. I don't have access to those solvers unfortunately. . - Yeah the non-monotonic variation worried me as well. But all the simulations were converged to a density residual of -13. (all of them have over 6 orders of residual reduction). The residuals for the GG+LSQ results shown here:; ![res_SA](https://user-images.githubusercontent.com/30271435/68789548-8a641880-05fa-11ea-8885-4e024fe84eda.png); I tried a few re-runs of that finest mesh with a couple of different options. I reduced the maximum CFL to ~30 from 1000 and it still gave the same result. I reduced the number of cores I was running on from 80 to 20 and that had no effect either. As soon as I ran without the `NUM_METHOD_GRAD_RECON= LEAST_SQUARES` option, it got a C_L of about 0.159402 which would be more in line with the other solvers. @economon I haven't tried a high fixed CFL. Let me check that behavior and report back.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-553524258:335,access,access,335,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-553524258,1,['access'],['access']
Security,"/Python3.7/amgio_py.i; x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.7m -c ./sources/Python3.7/amgio_py.c -o build/temp.linux-x86_64-3.7/./sources/Python3.7/amgio_py.o -std=c99 -Wno-unused-variable -Wno-unused-result -O3; ./sources/Python3.7/amgio_py.c:2:10: fatal error: Python.h: No such file or directory; #include ""Python.h""; ^~~~~~~~~~; compilation terminated.; error: command 'x86_64-linux-gnu-gcc' failed with exit status 1; ```; Shall I remove python2.7 as well?; Thanks. During compilation the following warning appears:; ```; cc1: warning: command line option ‚Äò-Wno-non-virtual-dtor‚Äô is valid for C++/ObjC++ but not for C; ../externals/AMGIO/sources/libmeshb7.c: In function ‚ÄòGmfGetLinTab‚Äô:; ../externals/AMGIO/sources/libmeshb7.c:1391:35: warning: format ‚Äò%lld‚Äô expects argument of type ‚Äòlong long int *‚Äô, but argument 3 has type ‚Äòint64_t * {aka long int *}‚Äô [-Wformat=]; safe_fscanf(msh->hdl, ""%lld"", &IntTab[ (*IntCpt)++ ], msh->err);; ^ ~~~~~~~~~~~~~~~~~~~~~~; ../externals/AMGIO/sources/libmeshb7.c:475:23: note: in definition of macro ‚Äòsafe_fscanf‚Äô; if( fscanf(hdl, format, ptr) != 1 ) \; ^~~~~~; ../externals/AMGIO/sources/libmeshb7.c: In function ‚ÄòGmfSetLinTab‚Äô:; ../externals/AMGIO/sources/libmeshb7.c:1462:35: warning: format ‚Äò%lld‚Äô expects argument of type ‚Äòlong long int‚Äô, but argument 3 has type ‚Äòint64_t {aka long int}‚Äô [-Wformat=]; fprintf(msh->hdl, ""%lld "", LngTab[ LngCpt++ ]);; ~~~^ ~~~~~~~~~~~~~~~~~~; ; %ld; ```; Moreover later on the script (even if it asks me for permissions, and I provide the password):; ```. Installing _amgio.; Installation failed due to insufficient permissions.; Attempting to use polkit to gain elevated privileges...; Installing _amgio.; Installing pyAMG for Linux.; pyAMG installation failed. ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619345758:2432,password,password,2432,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619345758,1,['password'],['password']
Security,"; phiR = phi.getVec(jPoint,iVar) + limiter.getVec(jPoint,iVar)*phiR;. FltVec flux = (phiL+phiR)*0.5;. for(size_t k=0; k<SIMDLEN; ++k) {; residual(iPoint[k],iVar) += flux[k];; residual(jPoint[k],iVar) -= flux[k];; }; }; ```; Note that at the end of the loop we need to de-swizzle the flux to update the multiple indexes references by iPoint and jPoint, which are now short arrays of integers (this operation can be moved to the container, akin to `getVec` but I show it here for clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13:; vpmuludq ymm0, ymm4, ymm1; vmovq xmm15, rax; vmovapd ymm6, ymm11; mov rdx, rax; vpbroadcastq ymm15, xmm15; sal rdx, 5; add rax, 1; vpaddq ymm0, ymm0, ymm2; vpsllq ymm0, ymm0, 32; vpaddq ymm0, ymm5, ymm0; vmovdqa YMMWORD PTR [rbp-240], ymm0; vpaddq ymm0, ymm3, ymm0; vmo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:8678,access,access,8678,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,4,['access'],"['access', 'accesses']"
Security,"<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; phiR -= grad.getVec(jPoint,iVar,iDim)*d_ij[iDim];; }. phiL = phi.getVec(iPoint,iVar) + limiter.getVec(iPoint,iVar)*phiL;; phiR = phi.getVec(jPoint,iVar) + limiter.getVec(jPoint,iVar)*phiR;. FltVec flux = (phiL+phiR)*0.5;. for(size_t k=0; k<SIMDLEN; ++k) {; residual(iPoint[k],iVar) += flux[k];; residual(jPoint[k],iVar) -= flux[k];; }; }; ```; Note that at the end of the loop we need to de-swizzle the flux to update the multiple indexes references by iPoint and jPoint, which are now short arrays of integers (this operation can be moved to the container, akin to `getVec` but I show it here for clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:8427,access,accessing,8427,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['access'],['accessing']
Security,"> 1.How does this relate to my new PR #921? Should I close that one, since the shape optimization is going to be overhauled anyways?. @clarkpede this is going to take a while to implement (on the order of months). In the mean time, it would still be good to fix the issue you bring up in #921, if it is an easy fix. If you think the fix is going to be on the same order of time, then might not be worth investing the effort if it is going to get overhauled anyway. . As for the post-processed objective functions, I am planning on fully incorporating #913 into this work so that any variables that can be defined using the expression language, can be used as an objective function. According to that PR, the post-processing has been auto-differentiated as well, so getting gradients should be automatic as well. . @talbring I agree with all of your points. I especially want to extract the FFD functionality and expose CGeometry and CConfig functions to python. I haven't used swig before so I need to do some homework. And yes, this PR is called Shape Optimization overhaul but I am hoping the changes made here are general enough that they can be used in a plethora of other situations. If I end up being myopic in any of the refactoring, please point it out :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/923#issuecomment-607953901:912,expose,expose,912,https://su2code.github.io,https://github.com/su2code/SU2/pull/923#issuecomment-607953901,1,['expose'],['expose']
Security,"> ; > ; > Thanks for that @dkavolis, I will put all that in a memory allocation toolbox as it may be useful somewhere else. Where in boost did you get it from so I can reference it?; > We will need a volunteer to test it on Mac and Win32, I do not have access to any of those platforms.; > ; > Is the aligned_alloc from stdlib OK for Win64?. `std::aligned_alloc` is C++17 addition but MSVC does not have it (https://developercommunity.visualstudio.com/solutions/473365/view.html), it didn't work with MinGW as well. Have a look at https://github.com/boostorg/align, in `detail` folder. On windows, the aligned memory has to be freed by `_aligned_free` instead of `free` due to old runtime implementation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/813#issuecomment-554401239:253,access,access,253,https://su2code.github.io,https://github.com/su2code/SU2/pull/813#issuecomment-554401239,1,['access'],['access']
Security,"> > Fixed it! I think we can start with flat plate and maybe BFS. It might take a week or so for me to get anything done though.; > ; > Sorry but it still says ""Error 404 page not found"". Maybe I cannot access it. Can you share the title please?; > ; > A colleague of mine is working on the verification too on the flatplate, we will soon share the results and we will build on top of these ones. Evaluation of the SST-SAS Model, L. Davidson. I can also start working on BFS if you think you got the flatplate covered or we both can work on flatplate to cross check each other. What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2449602321:203,access,access,203,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2449602321,1,['access'],['access']
Security,"> > Hi @ShukaiWang1110, In SU2, we have different branches:; > > ; > > * The _master_ branch are official releases. They get a version number and are also released with precompiled executables. This is for instance ""SU2 v.8.0""; > > * A new master branch is created from the latest _develop_ branch. Developers are usually working with the develop branch to have access to the latest implementations. New implementations are committed to the develop branch.; > > * When a developer wants to implement something new, they create a new branch from develop, implement their thing, and merge it again with develop. You see that happening here, in the top of the page you see; > > ; > > > [pcarruscag](https://github.com/pcarruscag) wants to merge 2 commits into [develop](https://github.com/su2code/SU2/tree/develop) from [supersonic_profile](https://github.com/su2code/SU2/tree/supersonic_profile); > > ; > > ; > > You see in the section _Files Changed_ the changes compared to the current develop branch. This shows that this branch is up to date with current develop, only the new changes for the inlet profile show up.; > > I did not go through the code yet, but when you run it without having an inlet.dat file present, it should create one for you filled with a uniform profile. When you then use this file unaltered, does that work?; > ; > Hi, I got how the branches work. In this case, I first downloaded the 'develop' branch to make sure everything is consitent with Pedro, and then I downloaded and replaced the 6 new committed files that related to the supersonic inlet profile development. The code should be totally the same at this point. And I did a flat plate test, which actually I need to fill a uniform profile, since the code would only generated an empty one. However, a segment error still occurs, and I attched the error file with Valgrind output. The test files are on the above conversations so that you may also take a try. Thanks for the help! [error.txt](https://github.com/user",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241548890:362,access,access,362,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241548890,1,['access'],['access']
Security,"> > Hi @rois1995 any progress? Would be very interesting to add this to develop, looking forward to using it actually.; > ; > Hi @bigfooted, unfortunately I do not have enough time/computational power to perform a proper validation. I only tried something with a NACA0021 at 17 deg and 60 deg and they were promising, at least for the DDES implementation. The SAS ones are not that good. I'll upload some post-processing as soon as I have the time to do so. Hi @rois1995, I believe there is an error or a typo in the Babu's paper in the Q_SAS source term and in turn in your implementation, which may be the reason for the poor performance in SAS results. . ![image](https://github.com/user-attachments/assets/5791d344-967a-4cc5-b512-457b7fe61435). This term changes units depending on the output of the max function, which doesn't make any sense. I believe the terms in the max function should be divided by omega^2 and k^2 instead of omega and k, respectively. Which is exactly how it is done in [https://resolver.tudelft.nl/uuid:5d23e2a6-5675-450d-bf3d-1dd40d736cae](url). I will try some of the benchmark cases in these papers when I have the time. Let me know what you think.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2447067474:221,validat,validation,221,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2447067474,1,['validat'],['validation']
Security,"> > I find your work really interesting. I've been studying the internal flow field in compressors and have had good results using SU2's SA_EDDES for calculating the cantilevered stator with a tip clearance. If you need help with code verification, I'd be glad to assist.; > ; > Hi @Linnnnnn23, every help on the validation/verification is gladly accepted! Let me know if you need anything by my side.; Thank you for your response. Firstly, I would like to know what Verification and Validation (V&V) work has been conducted on the SST-based DDES (Delayed Detached Eddy Simulation) model to date. Secondly, we can provide a compressor cascade validation, with an inlet Mach number of 0.4, a Reynolds number of approximately 500,000, and a spanwise height of about 20% of the chord length, ensuring that the vortices resolved by DDES can develop in three dimensions. Thirdly, as I am a rookie to GitHub, I have not yet found out how to download your pull request code. For further communication, you can contact me via email at linnnnnn2308@gmail.com",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2072057976:313,validat,validation,313,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2072057976,5,"['Validat', 'validat']","['Validation', 'validation']"
Security,"> > I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .; > ; > There is the geometry toolbox for dot product and normal: https://github.com/su2code/SU2/blob/master/Common/include/toolboxes/geometry_toolbox.hpp just look in the code for examples, in vscode you can search for GeometryToolbox::DotProduct or GeometryToolbox::Norm. The problem is more related to the finding of the wall-normal for a point within the volume mesh, not to the computations that it will be involved in.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1429614350:187,access,access,187,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1429614350,1,['access'],['access']
Security,"> > even if the attackers will succeed in compromising your workflow, they won‚Äôt be able to do much.; > ; > But if an attacker compromises the workflow then (s)he will be able to change the permissions too, no ?. Yes, AFAIK. That is why it is recommended to Pin by SHA",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1661#issuecomment-1174043432:16,attack,attackers,16,https://su2code.github.io,https://github.com/su2code/SU2/pull/1661#issuecomment-1174043432,2,['attack'],"['attacker', 'attackers']"
Security,"> @alecappiello develop is updated with a fix for the thread sanitizer issue, it should fix your CI pipeline once you merge it into your branch. Thanks a lot! I've just done it and tsan tests are indeed not failing anymore!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2158#issuecomment-2003325587:61,sanitiz,sanitizer,61,https://su2code.github.io,https://github.com/su2code/SU2/pull/2158#issuecomment-2003325587,1,['sanitiz'],['sanitizer']
Security,"> @patelha57, I want to express my gratitude for your contribution. Your efforts are truly appreciated. However, I wanted to share some of my observations regarding the implementation, with all due respect.; > ; > In my humble opinion (IMHO), there seem to be a few flaws in the current implementation, particularly when it comes to setting the Mach number and Reynolds number. It appears that SU2 offers different fluid models, and in order to access the speed of sound for the far field, the following line of code may be more appropriate:; > ; > ```c++; > Mach2Vel_FreeStream = auxFluidModel->GetSoundSpeed();; > ```; > ; > rather than using:; > ; > ```c++; > su2double SoundSpeed = sqrt(Gamma * Gas_Constant * Temperature);; > ```; > ; > Perhaps these concerns can be addressed in the review of your PR. Similarly, I noticed that changing the Reynolds number doesn't seem to have any effect. It should modify certain variables, which are likely addressed in this section of the code: [link to the relevant code](https://github.com/su2code/SU2/blob/c435309e2a4ffd992b89c5b3bb252cb4af9fa990/SU2_CFD/src/solvers/CEulerSolver.cpp#L909-L928). Additionally, it would be helpful to include a check to warn the user if the initialization is based on thermodynamic quantities.; > ; > Once again, I want to express my deep appreciation for your contributions. Hey @kursatyurt, thanks for the input! I absolutely agree about the speed of sound change that you suggested, so I will address it in my PR. I will also double check about the Reynolds number update. Haven't used that function before so not sure what the issue is. . It would be great to get additional input on that PR so please review if you get the chance.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2045#issuecomment-1581591610:445,access,access,445,https://su2code.github.io,https://github.com/su2code/SU2/pull/2045#issuecomment-1581591610,1,['access'],['access']
Security,"> Fixed it! I think we can start with flat plate and maybe BFS. It might take a week or so for me to get anything done though. Sorry but it still says ""Error 404 page not found"". Maybe I cannot access it. Can you share the title please?. A colleague of mine is working on the verification too on the flatplate, we will soon share the results and we will build on top of these ones.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2447207964:194,access,access,194,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2447207964,1,['access'],['access']
Security,"> Great! I did not run flamelet + CHT in a full optimization loop, yet. My next step is to validate gradients and add a regression test for the adjoint of flamelet + CHT.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1917#issuecomment-1447237033:91,validat,validate,91,https://su2code.github.io,https://github.com/su2code/SU2/pull/1917#issuecomment-1447237033,1,['validat'],['validate']
Security,"> Hi @ShukaiWang1110, In SU2, we have different branches:; > ; > * The _master_ branch are official releases. They get a version number and are also released with precompiled executables. This is for instance ""SU2 v.8.0""; > * A new master branch is created from the latest _develop_ branch. Developers are usually working with the develop branch to have access to the latest implementations. New implementations are committed to the develop branch.; > * When a developer wants to implement something new, they create a new branch from develop, implement their thing, and merge it again with develop. You see that happening here, in the top of the page you see; > ; > > [pcarruscag](https://github.com/pcarruscag) wants to merge 2 commits into [develop](https://github.com/su2code/SU2/tree/develop) from [supersonic_profile](https://github.com/su2code/SU2/tree/supersonic_profile); > ; > You see in the section _Files Changed_ the changes compared to the current develop branch. This shows that this branch is up to date with current develop, only the new changes for the inlet profile show up.; > ; > I did not go through the code yet, but when you run it without having an inlet.dat file present, it should create one for you filled with a uniform profile. When you then use this file unaltered, does that work?. Hi, I got how the branches work. In this case, I first downloaded the 'develop' branch to make sure everything is consitent with Pedro, and then I downloaded and replaced the 6 new committed files that related to the supersonic inlet profile development. The code should be totally the same at this point. And I did a flat plate test, which actually I need to fill a uniform profile, since the code would only generated an empty one. However, a segment error still occurs, and I attached the error file with Valgrind output. After eliminating the difference of different branches(versions), I guess you may have the same error? The test files are on the above conversations so that you m",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241546869:354,access,access,354,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241546869,1,['access'],['access']
Security,"> Hi @rois1995 any progress? Would be very interesting to add this to develop, looking forward to using it actually. Hi @bigfooted, unfortunately I do not have enough time/computational power to perform a proper validation. I only tried something with a NACA0021 at 17 deg and 60 deg and they were promising, at least for the DDES implementation. The SAS ones are not that good. I'll upload some post-processing as soon as I have the time to do so.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-1983515044:212,validat,validation,212,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-1983515044,1,['validat'],['validation']
Security,"> I don't known how the process to find the alpha that gives you a given CL works, but could the derivative not be obtained from this process? i.e. you could avoid the FD step entirely. It is a simple proportional controller that will change the angle of attack after a number of iterations depending on the difference between the current CL and the target CL. . So if the the option `ITER_DCL_DALPHA = 0` then it will do exactly what you suggest. It calculates the derivative based on the last update. The only problem with that is, there is no guarantee that the simulation at the previous update was converged, so the derivative might be incorrect. . But you are correct, I could just do a really tiny update (order of delta AoA ~10^-6) at the end and calculate the finite difference using that value. Let me try that and see if the gradients it calculates are reasonable, or if the update is too small and it gets clouded by numerical errors.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539606698:255,attack,attack,255,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539606698,2,['attack'],['attack']
Security,"> I find your work really interesting. I've been studying the internal flow field in compressors and have had good results using SU2's SA_EDDES for calculating the cantilevered stator with a tip clearance. If you need help with code verification, I'd be glad to assist. Hi @Linnnnnn23, every help on the validation/verification is gladly accepted! Let me know if you need anything by my side.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2071759773:304,validat,validation,304,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2071759773,2,['validat'],['validation']
Security,"> I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp . There is the geometry toolbox for dot product and normal:; https://github.com/su2code/SU2/blob/master/Common/include/toolboxes/geometry_toolbox.hpp; just look in the code for examples, in vscode you can search for GeometryToolbox::DotProduct or GeometryToolbox::Norm",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1426019269:185,access,access,185,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1426019269,1,['access'],['access']
Security,"> I just found a heap buffer overflow in the interface code, mentioning it here in case it is related [#2246 (comment)](https://github.com/su2code/SU2/pull/2246#issuecomment-2034404720). I ran your test case with the fixes from #2246 and the address sanitizer, it still shows the behaviour that you describe and the address sanitizer did not detect anything else. So it's probably not related to the aforementioned overflow.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2255#issuecomment-2042496683:250,sanitiz,sanitizer,250,https://su2code.github.io,https://github.com/su2code/SU2/issues/2255#issuecomment-2042496683,2,['sanitiz'],['sanitizer']
Security,"> I think generalizing the inlet option to read more values would be good. I worked on trying to create a new inlet and it got complicated pretty quickly. The main issue I run into is in COptionInlet in SetValues. To add mass fractions, we need to know the number of species which can vary, so this would need access to config. Just adding an ""INLET_GAS_COMPOSITION"" field lets us use the same supersonic inlet bc (no additional repeated code) but with just one extra get function to pull from config. It feels a little hacky... but seems to save a lot of additional repeated code.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1374304203:310,access,access,310,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1374304203,1,['access'],['access']
Security,"> In theory mass flow outlets and your periodic mass flow fall in the same category of fixed-Cl. I thought about that as well. If I get the streamwise periodic massflow to work that should be equivalent for massflow outlets. After all, quite a few ideas were taken from that implementation. Maybe a question to @economon in that regard (I surely asked that already but cannot remember :brain: :hammer: ): Did you make a gradient validation for massflow-outlets back in the day? If yes, do you remember whether that went well, or did you see some imperfection that wasn't there for pressure-outlets?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1030102871:429,validat,validation,429,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1030102871,1,['validat'],['validation']
Security,"> Nice! By the way, did you use some scripts for going through all the files and returning 'bad' naming conventions?. No, now I am just going through it by hand probably some linters are available to at least detect them. Actually, I am a bit confused as it is not so clear in the guide. It looks like the beginning of the project was just abbreviated from the Google style guide and was not enforced. Enforcing function names in UpperCamelCase and leaving variable names to the developer seems reasonable. > Can you explain the snake/camel terminology? :). Let's say we have a variable we want to name as `number of nodes per mesh` there are 2 common choices as . ```cpp; number_of_nodes_per_mesh = 42;; numberOfNodesPerMesh = 42;; ```; The first case is called the [snake case](https://en.wikipedia.org/wiki/Snake_case) and the second one is the [camel case ](https://en.wikipedia.org/wiki/Camel_case). Snake case is generally used in Python as [PEP8](https://peps.python.org/pep-0008/) suggests. . > Please revert the python accessor changes. I merged develop many of them vanished, should I revert the remaining ones?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1981#issuecomment-1482062542:1028,access,accessor,1028,https://su2code.github.io,https://github.com/su2code/SU2/pull/1981#issuecomment-1482062542,2,['access'],['accessor']
Security,"> Recently I was looking around the 3rd Annual SU2 conference web page(#1683), and I came across a presentation that seemed to be related to this PR.; > ; > [SU2conference](https://su2foundation.org/su2conference2022/) : Day2 The title: Implementation of Œ≥-Re Œ∏ transition model within SU2: model validation and the presenter is Andrea Rausa.; > ; > I'd like to see the presentation above the presentation. The 2nd SU2 conference presentation video was uploaded. So, Is the 3rd SU2 conference video going to be uploaded?. Hi @sun5k, I'm sorry but I've just seen this message. I have uploaded a link to the presentation to my pull request. If you need anything then feel free to ask.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1751#issuecomment-1276056772:297,validat,validation,297,https://su2code.github.io,https://github.com/su2code/SU2/pull/1751#issuecomment-1276056772,1,['validat'],['validation']
Security,"> Thank you Max, can you also add the right hash to meson_scripts/init.py and to preconfigure.py around line 290. Done.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1210#issuecomment-785813580:44,hash,hash,44,https://su2code.github.io,https://github.com/su2code/SU2/pull/1210#issuecomment-785813580,1,['hash'],['hash']
Security,"> The ""int"" in ""intIndexBased"" is for internal then? Because its type is also int, easy mistake to make xD. Yes.. The name was the first one I gave that routine. It somehow made it through.. Now that I had to type it several times I'd love to have it changed. But anyway.. I'm a bit puzzled that it seems to be so easy but maybe it's just as simple as you said - new approach inside `CDiscAdjSolver` and old in `CDiscAdjFEASolver` (if I got that correctly?). That would come in handy for all further developments. Let's wait for the validation. I'll also do one with this branch for the CHT adjoints tomorrow, just to be sure.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542360883:533,validat,validation,533,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542360883,2,['validat'],['validation']
Security,"> The fixed-Cl mode is not active during adjoints, the AOA is just taken from the metadata. I.e. you would propose to try to disable the delta-pressure udpdate during the adjoint for prescribed massflow? In my understanding that would result in an inconsistent gradient -> which might work good enough for optimizations but in a gradient validation I would expect significant deviations. > If something is determined iteratively, then I think it is a solution variable, [...]. So it is settled then -> I will try to give pressure-drop the same treatment as regular solution variables as mentioned in point 2. of the PR description.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1030096530:338,validat,validation,338,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1030096530,1,['validat'],['validation']
Security,"> What if you start with the ""perturbed value"" of AoA and then set it to the correct value for the FD step?. Mhmm, I am just thinking this through. At the end of the fixed_cl part, the flow is converged to the `TARGET_CL` and is at some angle of attack `alpha`. If I wanted to start from the perturbed value and set it to the final value of `alpha`, I would have to first, converge it to the perturbed value (`alpha + 0.001`), and then perform the finite difference step back to `alpha`. This would take approximately twice the number of `ITER_DCL_DALPHA` to perform. Which isn't the end of the world, but I would like to avoid if possible. Is there a cleverer way of doing this that I am not thinking off? The problem is that we don't know the final `alpha` until the fixed_cl simulation converges.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/780#issuecomment-539575775:246,attack,attack,246,https://su2code.github.io,https://github.com/su2code/SU2/pull/780#issuecomment-539575775,1,['attack'],['attack']
Security,"> You should be able to use CConfig::SetFinestMesh in CDriver::Geometrical_Preprocessing_FVM to initialize this to the coarsest grid that was produced.; > ; > The threshold to stop agglomeration should stay. But you can expose it as a config option if you want. Your suggestion is also valid, but in my opinion it would be more coherent, in terms of code structure, to reduce the finest mesh level whenever we modify the number of multigrid levels. So in CMultiGridGeometry::CMultiGridGeometry add this line of code; `config->SetFinestMesh(iMesh-1);`; after reducing the number of MGLevels. > The threshold to stop agglomeration should stay. But you can expose it as a config option if you want.; I can do that.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1362#issuecomment-908181097:220,expose,expose,220,https://su2code.github.io,https://github.com/su2code/SU2/pull/1362#issuecomment-908181097,2,['expose'],['expose']
Security,"> even if the attackers will succeed in compromising your workflow, they won‚Äôt be able to do much. But if an attacker compromises the workflow then (s)he will be able to change the permissions too, no ?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1661#issuecomment-1149557138:14,attack,attackers,14,https://su2code.github.io,https://github.com/su2code/SU2/pull/1661#issuecomment-1149557138,2,['attack'],"['attacker', 'attackers']"
Security,"> in the viscous forces case, it should be ok to move the ""if Domain"" up and avoiding computations on halo points. Corrected in commit f6f986ec256a1c47199703ef6540145506dbbdc3 in #1362 similar to that, moving the code depending on the nearest neighbor access (i.e. YPlus calculation) down into an ""if Domain"" block. Note however that after this change YPlus is not computed on halo cells any more, which might be problematic e.g. for [CTurbSSTSolver::SetTurbVars_WF](https://github.com/su2code/SU2/blob/5655d91d7da192ad0b2a231f9ab5334c2235c10a/SU2_CFD/src/solvers/CTurbSSTSolver.cpp#L494).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1430#issuecomment-966266235:252,access,access,252,https://su2code.github.io,https://github.com/su2code/SU2/issues/1430#issuecomment-966266235,1,['access'],['access']
Security,"> the off-PR comments can be integrated in this PR to clear that up a bit. If not that is OK as well. It's more than OK, the CHT implementation suffers a bit from being a single person's project.. you're very welcome to have a look over it! :-). > Can you add that option to the config_template.cfg together with that description, the valid inputs and the default. Actually I'm hesitating a bit adding it to the config template right now. I'd prefer to have `DIRECT_TEMPERATURE_ROBIN_HEATFLUX` as the default and ""hide"" the rest as developer's options for the moment.; The reason simply is that those different methods need to checked and validated against each other before we make them public.; E.g. I figured that for the incompressible CHT test case from the repo, there is a severe gap between the heatfluxes obtained from the ""averaged"" approach and the direct one, see below. ![heatflux_convergence](https://user-images.githubusercontent.com/22639394/72885197-bb9e4a80-3d07-11ea-9fad-a4d709dc511e.png). That needs to be cleared up first...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/839#issuecomment-577108935:639,validat,validated,639,https://su2code.github.io,https://github.com/su2code/SU2/pull/839#issuecomment-577108935,2,['validat'],['validated']
Security,"@; *GomerOfDoom <https://github.com/GomerOfDoom>*. *Then it makes sense why I am having this trouble. Thank you for letting me; know. This helps a lot. I will try to figure this one out atleast for my; case, what I can do. Appreciate your response! *. On Mon, Mar 16, 2020 at 7:36 PM Paul <notifications@github.com> wrote:. > I can also confirm that there is an issue with the *binary* Paraview; > output for large files. The code appears to write out the .vtu file just; > fine, but Paraview throws errors when attempting to open it. This does not; > occur for ASCII format Paraview files or smaller binary Paraview files. The; > case I am working on consists of a 180 million cell mesh.; >; > Also, @monika1387 <https://github.com/monika1387> , please note that the; > DG-FEM LES capability is *not* currently fully validated, and may be; > unstable in certain circumstances. Use this at your own risk. We are; > working on fixes for the DG solver, but they are still a ways away from; > being finished.; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/787#issuecomment-599805153>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ALJ3OXCKD44SRSZPDWKSDM3RH2ZZFANCNFSM4IT7MM2A>; > .; >. -- ; *Thank you,*. *Monika Chauhan *. *Graduate Research Assistant, Doctoral Program*. *Aerospace and Ocean Engineering Dept, Virginia Tech,Blacksburg, VA 24061*; *Cell# 540-998-5012*",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-599807771:818,validat,validated,818,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-599807771,1,['validat'],['validated']
Security,"@AmauryBilocq Initial tests do show that Giles BC is giving errors however, the Riemann is working just fine. Unfortunately, I do not have access to my workstation these days and cannot deep-dive into the problem. Possibly, next week I will be able to give you a more detailed view of the problem. @pcarruscag If you are able to find some leads in the meantime do let me know. Thanks !",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1429#issuecomment-1025414575:139,access,access,139,https://su2code.github.io,https://github.com/su2code/SU2/issues/1429#issuecomment-1025414575,1,['access'],['access']
Security,"@BeckettZhou I think that's a good idea. Just to make sure I understand the BANC model: for cases that have large mesh sizes, we provide configuration files, and visualization of the results (comparisons to higher fidelity data and/or to other solvers). If someone would like to run the case for themselves, they would contact the custodian and the custodian is obligated to provide the meshes. The next step would be to start the github repo. @economon Is it possible to start the repo under the su2code umbrella? Is that something you could start and people can start compiling validation test cases, and their results?. Cheers, ; Jayant",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-425961143:580,validat,validation,580,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-425961143,1,['validat'],['validation']
Security,"@FlorianDm When I was working on the feature_axi to attempt what you have done, I unsed this reference, which should match the incompressible version exactly.; [AxiSymm_1.pdf](https://github.com/su2code/SU2/files/5482565/AxiSymm_1.pdf); [AxiSymm_2.pdf](https://github.com/su2code/SU2/files/5482567/AxiSymm_2.pdf). @jtneedels Has ran/is running a laminar viscous wedge with your formulation of axisymmetric and 3D to do some verification. We have also tried to run the NASA TMR axisymmetric Validation cases, but they are proving to be quite difficult. Hope this is useful to the discussion.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-721231212:490,Validat,Validation,490,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-721231212,1,['Validat'],['Validation']
Security,@TobiKattmann The validation looks perfect. Happy that it works now.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/766#issuecomment-533541630:18,validat,validation,18,https://su2code.github.io,https://github.com/su2code/SU2/pull/766#issuecomment-533541630,1,['validat'],['validation']
Security,@WallyMaier oh great I think this book was cited in the publication but I couldn't get access to it,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-721247348:87,access,access,87,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-721247348,1,['access'],['access']
Security,"@WallyMaier thank you. Interesting... 1. This reference reminded me to add the contribution of the turbulence kinetic energy (+2/3 v rho k) in the energy equation source (see page 10 equation 2.30, pdf page 37), so that's done. 2. This reference will be helpful If I get to do the axysimmetry source terms for k and omega (by comparing equations 2.31 and 2.31 to equations B.2 and B.3) but that will be in a separate PR. In fact I am getting good results for RANS already (although no time for a thorough validation). 3. In that reference they have also done what I did before and pulled out the primitive derivatives and neglected the viscosity gradient and then came up with the same axisymmetry momentum source terms so that is comforting. However, their energy source terms are different and that made me think. What we have now is according to the first reference, so it should be fine unless there is an error in it. I find it suspicious that both aux derivatives are wrt y and none wrt x given the that we have one wrt x and one wrt y in the momentum equation... Could it be `AxiAuxVar_Grad_i[2][0]` instead of `AxiAuxVar_Grad_i[2][1]` ? The impact on results is almost unnoticeable for my case. Otherwise we are done here I think. @pcarruscag thanks for taking the time to review!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1106#issuecomment-731141665:505,validat,validation,505,https://su2code.github.io,https://github.com/su2code/SU2/pull/1106#issuecomment-731141665,1,['validat'],['validation']
Security,"@alecappiello develop is updated with a fix for the thread sanitizer issue, it should fix your CI pipeline once you merge it into your branch",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2158#issuecomment-2000417122:59,sanitiz,sanitizer,59,https://su2code.github.io,https://github.com/su2code/SU2/pull/2158#issuecomment-2000417122,1,['sanitiz'],['sanitizer']
Security,"@danielmayer @EvertBunschoten @Cristopher-Morales I ran the scripts that we have for the species transport validation (from @TobiKattmann). Primal restart, adjoint restart and the comparison between adjoint and finite difference gradients all seem to work fine for the current PR. I will add some additional regression tests this week to make sure we do not break anything while polishing the code (specifically adding an axisymmetric case and a CHT case).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1826#issuecomment-1356751936:107,validat,validation,107,https://su2code.github.io,https://github.com/su2code/SU2/pull/1826#issuecomment-1356751936,1,['validat'],['validation']
Security,"@drewkett, in version 7.0.3 the hybrid solver should work better, it auto detects if it is not able to get enough parallelization and switches to an alternative approach (there is a warning message when this happens).; The alternative approach (which at least on hex-dominant grids is not worse) can also be forced with `EDGE_COLORING_GROUP_SIZE= 0`. I've been daily driving this version of the code for the past month without issues, if you find any do let us know. Also, to some extent I replicated these findings of SU2 slowing down when using ethernet interconnects, the machines I have access to with this kind of network are shared so I did not try to benchmark (as repeatability is an issue) but it does slow down quite a bit as soon as more than one node is involved.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/894#issuecomment-606535236:591,access,access,591,https://su2code.github.io,https://github.com/su2code/SU2/issues/894#issuecomment-606535236,1,['access'],['access']
Security,"@economon I was envisioning something similar to the TestCases folder. With v&v cases grouped according to what they are testing. Something along the lines of: . 1) Inviscid Simulations: ; a) 2D Inviscid bump; b) 2D oblique shocks interaction; c) ...; 2) RANS simulations: ; a) Flatplate; b) NACA0012; c) ...; 3) Unsteady simulations:; a) Square Cylinder; b) ...; 4) Turbomachinary: ; a) ... And so on. Each of the directories would have sub-directories for different mesh sizes, with configuration files for each mesh level that have optimized parameters for best results. So for example if we are talking about the NACA0012 case, we would have something along the lines of: . a) NACA0012; i) 113 x 33; ii) 225 x 65 ; iii) 449 x 129; iv) ... This way we have a family of meshes and configuration files that are specifically built for the purpose of validating the code and comparing with other solvers. I might be useful to compress meshes that are larger than a certain size (say 10MB). We should also put a limit on the size of a single mesh that the repository can handle (say 50MB?). . Within the home directory, the README file should list all the cases in the repository, who the custodian of the test case is (person with meshes in case the meshes are too large), and which version it was last run on. . I thought about splitting it up into Verification cases and Validation cases, but I thought it would be more informative and intuitive to split up according to the physics of the simulations. My thinking might be limited because that's how I have seen the TestCases folder organized, so any other suggestions are welcome. I think it is imperative that this is accompanied with a section on the SU2 website that showcases just the results of the validation test cases (grid convergence studies, residual reductions etc) and links to the v&v repo appropriately. This way, if people are just inquisitive about SU2's performance, they can get a quick snapshot of the results, without the need ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426026053:850,validat,validating,850,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426026053,2,['validat'],['validating']
Security,"@economon for prototyping, the changes proposed in #753 allow a container to be added to CVariable as a public member and thus directly accessible everywhere (one can even allocate only in some derived constructors, with no risk of leaking memory). For release-quality code I think encapsulation is desirable, that being said I'm not above declaring the client solver a friend of the specific CVariable it uses (also with the changes introduced, there would be a way to access member variables directly without moving them to base CVariable).; I like encapsulation not because of OOP principles but because of `GetVelocity(iDim)` instead of `GetPrimitive(iDim+1)`. As for overhead I think it is 0 as long as methods are inline: [example](https://gcc.godbolt.org/z/QXoExF); But in all honesty I also chose to change the CVariable interface as little as possible to make my life easier.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-520226075:136,access,accessible,136,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-520226075,2,['access'],"['access', 'accessible']"
Security,"@economon that is what I propose for AUSM+up(2) and SLAU(2). Unfortunately their predecessor AUSM does not fit into the same generic form and so it will not have access to these numerical Jacobians. On the subject of accurate Jacobians, IMO matrix free is definitely the way to go (not just because of storage but because it would possibly require changing the edge loops, I did something similar in the past and it got messy).; Using forward AD to linearize the entire iteration and create some sort of Newton-nonlinear-GMRES monster solver preconditioned by the current 1st order Jacobians would indeed be interesting... I have no feeling for potential speed-up though.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-504050203:162,access,access,162,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-504050203,1,['access'],['access']
Security,"@gbaty, a few comments basedon experience solely in py2.7 --. pattern 1; this is in place to save the need for additional import lines in user scripts. namely package1.p1m1.\* would not be accessible without import package1.p1m1. since in the grand scheme of things the SU2 python package is a small package, i think it's important for the whole python package to be accessible with one import SU2. So would hesitate to delete all imports without understanding how the sub (and subsub) modules would be accessed. pattern 2; this is aliasing a submodule that is commonly used to a higher module tier. this can be removed if it's too messy. the .p1m1 syntax is fine since this isn't exposed to the user. pattern 3; same aliasing idea as pattern 2, except aliasing a commonly used object to another module branch. absolute imports are great, i'm cool with this. pattern 4; sounds fine, i think this only shows up in one or two places right? if it's in multiple places i'd be concerned about a lot of repeated code and would try to make an import helper function.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/246#issuecomment-201176278:189,access,accessible,189,https://su2code.github.io,https://github.com/su2code/SU2/issues/246#issuecomment-201176278,4,"['access', 'expose']","['accessed', 'accessible', 'exposed']"
Security,"@hlkline That's a good point about the regression tests ensuring that the v&v results will be unlikely to change. If we have the same residuals for all the test cases, it isn't a stretch to say that the final results of the v&v cases will stay the same. But sometimes the test values for the regression tests are changed during development and then we lose the guarantee. . From the viewpoint of being rigorous, I agree with the suggestion to run the v&v cases before a major release like 7.0 and also with @erangit on keeping track of the last version that they were run for. I am unsure about holding the people who add the test cases responsible for re-running them. Circumstances change, and access to resources change. That may make it hard for people to run the v&v cases. . I also think it is a good idea to have the effort be collaborative so people can add cases. My concern is about size limits that github has on repositories. Some of the mesh files are going to be massive, especially given that we want to perform grid convergence studies. We will soon be over the size limit. I am not sure about how to get around that. Suggestions would be great!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423291806:696,access,access,696,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423291806,1,['access'],['access']
Security,"@jayantmukho Thanks for taking the lead on that. This is long overdue ... I already talked to some people about that and the conclusion was often that we should get rid of the current python framework and rely solely on the in-memory python wrapper functionalities. From what I can tell this is also what you would suggest. I have some additional things to add here:. - We should keep in mind other things than ""just"" shape optimization problems.; - The surface parameterization should be more or less independent of all the other things, so that we can easily integrate other tools/methods. In a first step it might be a good idea to just put all the FFD stuff into a separate (c++) library with a python interface.; - As you already mentioned, I am currently working on a more general way of defining output fields and in particular also objective functions in #913. I will add more information to this PR soon. The new python implementation should, in theory, not need to know about the specific objective function, but rather just asks for the value and the (surface) gradient. ; - We have to expose more c++ classes/functions to python. Especially the config and the geometry. . Maybe I will add more stuff/ideas, but thats it for now. @clarkpede : We will probably keep most of the postprocessing stuff in c++, so don't worry about that at the moment.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/923#issuecomment-607708376:1097,expose,expose,1097,https://su2code.github.io,https://github.com/su2code/SU2/pull/923#issuecomment-607708376,1,['expose'],['expose']
Security,@joshkellyjak I updated the [container documentation](https://su2code.github.io/docs_v7/Container-Development/) and included details on the thread sanitizer,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2011#issuecomment-1680241131:147,sanitiz,sanitizer,147,https://su2code.github.io,https://github.com/su2code/SU2/pull/2011#issuecomment-1680241131,1,['sanitiz'],['sanitizer']
Security,"@joshkellyjak The memory access violation described [here](https://github.com/su2code/SU2/pull/2246#issuecomment-2034404720) does not occur unconditionally, it depends on the test case. The iterations of the inner loop for `jSpan == 0` and `jSpan == nSpanDonor - 1` (that we removed in the fix) only have an effect if the if-conditions in the loop body evaluate to `true`. I checked this for the serial test cases in the test file's ""turbomachinery"" section. - `aachen_turbine_restart`: iterations both with `jSpan == 0` and `jSpan == nSpanDonor - 1` have an effect, the latter trigger the memory access violations; - `jones_turbocharger_restart`: some iterations with `jSpan == 0` have an effect, but iterations for larger `jSpan` usually overwrite the results; also, the case `jSpan == 0` does not trigger the memory access violation; - `axial_stage2D`: the problematic code is not executed by this test case; - `transonic_stator_restart`: the problematic code is not executed by this test case. I think these observations point to why only the Aachen test case had address sanitizer findings, and why only the results of the Aachen test case were affected by the attempted fix. The other test cases basically ""do not care"" whether we do the extra iterations. @alecappiello Regarding your earlier question about the restart file. Restart files are to some extent specific to the version of SU2 they were obtained with, in the sense that newer versions of SU2 can behave differently if they use an old restart file. I was wondering if this is the case here, too. If the memory access violation had manifested itself in the restart file, a version of SU2 with the memory access violation fixed could give different results. The observations above point to why only the Aachen test case is affected.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2276#issuecomment-2127703507:25,access,access,25,https://su2code.github.io,https://github.com/su2code/SU2/issues/2276#issuecomment-2127703507,6,"['access', 'sanitiz']","['access', 'sanitizer']"
Security,@juanjosealonso Thanks for your response. I would definitely want to have a look at SUmb. If there is some documentation with the code and any published work that shows its capability will also help. > Both @vdweide and I can provide you with access to the appropriate routines / functions in SUmb. Please do provide me the access.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/791#issuecomment-533796609:243,access,access,243,https://su2code.github.io,https://github.com/su2code/SU2/issues/791#issuecomment-533796609,2,['access'],['access']
Security,"@koodlyakshay I was looking at the ADT modifications that you mention.; Do I understand correctly that the roughness height does not influence the wall distance calculation itself? But that you simply need to know what is the roughness height associated with the closest wall point? If this is the case you can probably just use the markerId returned by the wall distance function?; As for mpi aspects, each rank sees the same ADT and I recall that we do have mechanisms to access global marker information.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/877#issuecomment-595197305:474,access,access,474,https://su2code.github.io,https://github.com/su2code/SU2/pull/877#issuecomment-595197305,2,['access'],['access']
Security,"@mheimgartner first of all congrats to this openend PR. For the builds in the tests, compiler warnings are treated like errors. I.e. the code compiles and works on your side but the test-builds won't if certain warnings are present (like unused variables). ; For more information where to look, see the `Details` button next to the individual builds. Click and wait a moment ... that will automatically scroll down for you. ; The failing builds will be for the same code bits probably, so looking at BaseNoMPI for the start should suffice. To look in the `Details` and change code from there might be tedious so you can see the warnings locally by setting `./meson.py <your build folder> ... --warnlevel=3 ...`. Work through the warnings until there are none left -> commit the changes and push. That will probably calm the compiler-warnings-are-errors gods and grant you access to the regression test",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1332#issuecomment-885546022:872,access,access,872,https://su2code.github.io,https://github.com/su2code/SU2/pull/1332#issuecomment-885546022,1,['access'],['access']
Security,"@patelha57, I want to express my gratitude for your contribution. Your efforts are truly appreciated. However, I wanted to share some of my observations regarding the implementation, with all due respect. In my humble opinion (IMHO), there seem to be a few flaws in the current implementation, particularly when it comes to setting the Mach number and Reynolds number. It appears that SU2 offers different fluid models, and in order to access the speed of sound for the far field, the following line of code may be more appropriate:. ```cpp; Mach2Vel_FreeStream = auxFluidModel->GetSoundSpeed();; ```. rather than using:. ```cpp; su2double SoundSpeed = sqrt(Gamma * Gas_Constant * Temperature);; ```. Perhaps these concerns can be addressed in the review of your PR. Similarly, I noticed that changing the Reynolds number doesn't seem to have any effect. It should modify certain variables, which are likely addressed in this section of the code: [link to the relevant code](https://github.com/su2code/SU2/blob/c435309e2a4ffd992b89c5b3bb252cb4af9fa990/SU2_CFD/src/solvers/CEulerSolver.cpp#L909-L928). Additionally, it would be helpful to include a check to warn the user if the initialization is based on thermodynamic quantities. Once again, I want to express my deep appreciation for your contributions.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2045#issuecomment-1579449075:436,access,access,436,https://su2code.github.io,https://github.com/su2code/SU2/pull/2045#issuecomment-1579449075,1,['access'],['access']
Security,"@pcarruscag Hi Pedro, just still want to make sure one thing, does the function the function 'LoadInletProfile' in CSolver.cpp needed to be changed? Since you didn't commit it. From the Valgrind output, a segment error occurred while reading the inletUNI.dat file. This is usually because the memory address attempted to be accessed is 0x0, which means there is a null pointer reference. The segment error occurs in the CConfig::GetInlet_Ptotal function and is due to accessing a null pointer. Maybe you can give me some suggestions and there's no need to change the version at this moment. Thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241393846:324,access,accessed,324,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241393846,2,['access'],"['accessed', 'accessing']"
Security,"@pcarruscag I am installing this on a cluster with no internet access. So, I followed the advice from @talbring and I downloaded the codipack, medipack, meson and ninja on my local computer (with internet access). I then replaced the directories in the externals folder in the cluster with the downloaded directories. The local computer runs Ubuntu and used python3 to download the libraries. I hope this is okay. Regards; Suman",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620554072:63,access,access,63,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620554072,2,['access'],['access']
Security,@pcarruscag I can change one of the existing testcases to have a validation,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1500#issuecomment-1016864662:65,validat,validation,65,https://su2code.github.io,https://github.com/su2code/SU2/pull/1500#issuecomment-1016864662,1,['validat'],['validation']
Security,"@pcarruscag I updated the jacobian. Regarding the flux, I am a bit confused as well. The paper referenced above says flux implemented is a higher-order scheme that employs the SLIP scheme's limiter. That being said, I do not have access to Blazek's book at the moment.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/705#issuecomment-501025544:230,access,access,230,https://su2code.github.io,https://github.com/su2code/SU2/pull/705#issuecomment-501025544,1,['access'],['access']
Security,"@rsanfer , @oleburghardt , I think I fixed it, I'll do further validation tomorrow, but the reference derivative is very close to the regression value. The ""int"" in ""intIndexBased"" is for internal then? Because its type is also int, easy mistake to make xD.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/803#issuecomment-542234952:63,validat,validation,63,https://su2code.github.io,https://github.com/su2code/SU2/pull/803#issuecomment-542234952,1,['validat'],['validation']
Security,"@rsanfer I'm using a test case from Ref [1], which doesn't exactly match the test case matching the figure I gave from Ref [2]. In Ref [1], they ran a whole ensemble of tests at various resolutions, corrections, and inflow/initial conditions. Some of the tests involved laminar separation, while others involved turbulent separation. I did not pick one of the Re = 50,000 cases because those cases involve laminar separation. Travin *et. al.* used a special nonuniform initial condition to promote laminar separation, which I viewed as overly complicated for the purposes of these tests. Instead, I picked a turbulent separation case at Re = 1.4 x 10^5 (roughly matching TS1 from Ref [1]). If you want more details/grids/cfg files, I can certainly provide them. Yes, I used the unsteady compressible solver. But I'm unsure if the circular cylinder case provides a good test case for the unsteady incompressible solver. I did very little with this test case in terms of a proper validation. The references I listed went to great lengths to ensure that the numerical results were consistent with experiments. It seems like a challenging test case. There were a lot of improvements I should have made if I were also trying to get consistent results. For example, my spanwise length was too short, and I didn't look into the impact of the rotation correction for the SA model. I skipped these improvements in the interest of time, since I wasn't aiming for validation, but rather a simple acceptance test.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/552#issuecomment-403850762:978,validat,validation,978,https://su2code.github.io,https://github.com/su2code/SU2/pull/552#issuecomment-403850762,4,['validat'],['validation']
Security,@salvovitale: just added write access for the developer team. Please try again when you have a moment.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/416#issuecomment-327304618:31,access,access,31,https://su2code.github.io,https://github.com/su2code/SU2/issues/416#issuecomment-327304618,1,['access'],['access']
Security,"@talbring I am successful with configuring SU2 using meson.py. However, while installing using ninja I get the following error. [100/846] Compiling C++ object 'externals/tecio/teciompisrc/c3ca80e@@teciompi@sta/ClassicZoneWriterAbstract.cpp.o'.; FAILED: externals/tecio/teciompisrc/c3ca80e@@teciompi@sta/ClassicZoneWriterAbstract.cpp.o ; icpc -Iexternals/tecio/teciompisrc/c3ca80e@@teciompi@sta -Iexternals/tecio/teciompisrc -I../externals/tecio/teciompisrc -Iexternals/tecio/teciompisrc/../ -I../externals/tecio/teciompisrc/../ -Iexternals/tecio/teciompisrc/./ -I../externals/tecio/teciompisrc/./ -I/app/intel/intel2018/impi/2018.3.222/intel64/include -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fPIC -Wno-unused-parameter -Wno-empty-body -Wno-format-security -Wno-deprecated-declarations -Wno-non-virtual-dtor -fpermissive -DUSEENUM -DTECIOMPI -DTHREED -DMAKEARCHIVE -DNO_ASSERTS -DNO_THIRD_PARTY_LIBS -DTP_PROJECT_USES_BOOST -DBOOST_ALL_NO_LIB -DLINUX -DLINUX64 -MD -MQ 'externals/tecio/teciompisrc/c3ca80e@@teciompi@sta/ClassicZoneWriterAbstract.cpp.o' -MF 'externals/tecio/teciompisrc/c3ca80e@@teciompi@sta/ClassicZoneWriterAbstract.cpp.o.d' -o 'externals/tecio/teciompisrc/c3ca80e@@teciompi@sta/ClassicZoneWriterAbstract.cpp.o' -c ../externals/tecio/teciompisrc/ClassicZoneWriterAbstract.cpp; icpc: command line warning #10006: ignoring unknown option '-Wno-empty-body'; In file included from /usr/local/include/boost/type_traits/is_complete.hpp(15),; from /usr/local/include/boost/type_traits/is_convertible.hpp(17),; from ../externals/tecio/teciompisrc/../boost/iterator/interoperable.hpp(13),; from ../externals/tecio/teciompisrc/../boost/iterator/iterator_facade.hpp(11),; from /usr/local/include/boost/range/iterator_range_core.hpp(27),; from /usr/local/include/boost/range/iterator_range.hpp(13),; from ../externals/tecio/teciompisrc/../boost/assign/list_of.hpp(20),; from ../externals/tecio/teciompisrc/../boost/assign.hpp(20),; from ../externals/tecio/teciompisrc/fileStuff.h(7),; from .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-619968113:752,secur,security,752,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-619968113,1,['secur'],['security']
Security,"@talbring I have found other issues now (disabled tecio,cgns). [87/331] Compiling C++ object 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o'.; FAILED: SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o; icpc -ISU2_CFD/src/37e1b17@@SU2_CFD@exe -ISU2_CFD/src -I../SU2_CFD/src -I../externals/CLI11 -I../externals/metis/include -I../externals/metis/GKlib -I../externals/metis/libmetis -I../externals/parmetis/include -I../externals/parmetis/libparmetis -ICommon/src/./ -I../Common/src/./ -I/app/intel/intel2018/impi/2018.3.222/intel64/include -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fPIC -Wno-unused-parameter -Wno-empty-body -Wno-format-security -Wno-deprecated-declarations -Wno-non-virtual-dtor -DNDEBUG -DHAVE_MPI -DHAVE_METIS -DHAVE_PARMETIS -MD -MQ 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -MF 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o.d' -o 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -c ../SU2_CFD/src/output/CHeatOutput.cpp; icpc: command line warning #10006: ignoring unknown option '-Wno-empty-body'; ../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/allocation_toolbox.hpp(79): **error: the global scope has no ""aligned_alloc""; ptr = ::aligned_alloc(alignment, size);**; ^; detected during:; instantiation of ""void container_helpers::AccessorImpl<Index_t, Scalar_t, Store, AlignSize, 0UL, 0UL>::m_allocate(size_t={unsigned long}, Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL]"" at line 411 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""size_t={unsigned long} C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::m_resize(Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL, StaticRows=0UL, StaticCols=0UL]"" at line 445 of ""../SU2_CFD/src/output/../../../Common/include/geo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620066614:658,secur,security,658,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620066614,1,['secur'],['security']
Security,"@talbring Yes, I do. I can't uninstall it since it breaks other packages. @pcarruscag Yeah same for me. You can see it here:; ```; slimshady@arch-linux-hp-probook-g3-450: ~$ mpicc -v; mpicc for MPICH version 3.3.2; Using built-in specs.; COLLECT_GCC=gcc; COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.1/lto-wrapper; Target: x86_64-pc-linux-gnu; Configured with: /build/gcc/src/gcc/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-pkgversion='Arch Linux 9.2.1+20200130-2' --with-bugurl=https://bugs.archlinux.org/ --enable-languages=c,c++,ada,fortran,go,lto,objc,obj-c++,d --enable-shared --enable-threads=posix --with-system-zlib --with-isl --enable-__cxa_atexit --disable-libunwind-exceptions --enable-clocale=gnu --disable-libstdcxx-pch --disable-libssp --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu --enable-gnu-indirect-function --enable-multilib --disable-werror --enable-checking=release --enable-default-pie --enable-default-ssp --enable-cet=auto gdc_include_dir=/usr/include/dlang/gdc; Thread model: posix; gcc version 9.2.1 20200130 (Arch Linux 9.2.1+20200130-2) ; ```; I did what you suggested and here is how my meson.build file looks.; ```; # If custom mpi mode is enabled, include and library pathes for MPI have to be set manually to env variables; if get_option('custom-mpi'); mpi_dep = []; mpi = true; # Otherwise they are automatically determined; else; mpi_dep = [dependency('mpich', required : get_option('with-mpi'))]; # mpi_dep = [dependency('mpi', language:'c', required : get_option('with-mpi')),; # dependency('mpi', language:'cpp', required : get_option('with-mpi'))]; #if mpi_dep[0].found() or mpi_dep[1].found(); # mpi = true; #endif; endif; ```; My SU2 build was successful but there were a couple of warnings.; Also, instead of 870 there were only 772 files in total. Is that okay?; ```; slimshady@",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-633139474:961,hash,hash-style,961,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-633139474,2,['hash'],['hash-style']
Security,"@vdweide, of relevance to performance I used -O3 -march=native -DNDEBUG. That last one disables the assertions the container class performs to detect out of bounds accesses.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524534304:164,access,accesses,164,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524534304,1,['access'],['accesses']
Security,"A little gradient validation using the added Testcase (comp euler, 150 timesteps, pitching airfoil, FFD points as DV, Efficiency obj function). . ![gradient](https://user-images.githubusercontent.com/31306376/65078088-96d24900-d99c-11e9-9fef-1fd1a73dd759.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/766#issuecomment-532394741:18,validat,validation,18,https://su2code.github.io,https://github.com/su2code/SU2/pull/766#issuecomment-532394741,1,['validat'],['validation']
Security,"Access the solution files? I'm not sure if that is possible, the runners are not persisted after the tests. But updating the results based on the test logs is fine.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2024#issuecomment-1540286746:0,Access,Access,0,https://su2code.github.io,https://github.com/su2code/SU2/pull/2024#issuecomment-1540286746,1,['Access'],['Access']
Security,Access to the global to local should be via a function to avoid unintentional insertion.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1110#issuecomment-762154711:0,Access,Access,0,https://su2code.github.io,https://github.com/su2code/SU2/issues/1110#issuecomment-762154711,1,['Access'],['Access']
Security,"After some investigation I think the problem is related to how rpath was handled differently in OSX and Linux. There is a post on stackoverflow: . [https://stackoverflow.com/questions/19123623/python-runtime-library-dirs-doesnt-work-on-mac; ]([Python runtime_library_dirs doesn't work on Mac](https://stackoverflow.com/questions/19123623/python-runtime-library-dirs-doesnt-work-on-mac)); Quote: ; ```; All of the libraries you're linking against must have install names that begin with ""@rpath/"". For example, if a library is called ""libFoo.dylib"", its install name should be ""@rpath/libFoo.dylib"". You can use ""install_name_tool -id"" to change the install name of a library.; ```; There on I followed this link trying to change the rpath for _pysu2.dylib:. https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x. However, I noticed that _pysu2.dylib does not have a field called ""LC_RPATH"". Some posts suggested to create a link image under system folder /usr/lib which is not possible for OSX even disabled Mac System Integrity Protection as the /usr/lib directory is read only.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1606#issuecomment-1110617329:1083,Integrity,Integrity,1083,https://su2code.github.io,https://github.com/su2code/SU2/issues/1606#issuecomment-1110617329,1,['Integrity'],['Integrity']
Security,"Agreed, thanks for fixing those security issues. I know it is more work, but it is important. Extra fixes added to PRs like this help improve the code quickly.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-533583473:32,secur,security,32,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-533583473,1,['secur'],['security']
Security,"All, . Regarding the steady test cases, Embraer folks published a paper of their efforts to validate SU2 using the DPW and HLPW geometries (https://doi.org/10.2514/6.2018-2845 <https://doi.org/10.2514/6.2018-2845>) in the last AVIATION. I think that they will be happy to contribute with the meshes and config files. . Also, I can contribute with some unsteady cases. I think that the Backward Facing Step and the Tandem Cylinder test cases are a good start. Best,. Eduardo; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/issues/581#issuecomment-423207120>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AJVmCdByjE1ogiSKp7fIos58GcRe-Rdlks5uc6e0gaJpZM4Ww0V4>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423260699:92,validat,validate,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423260699,1,['validat'],['validate']
Security,"All,. I looked a bit more through Eigen and, indeed, the performance is pretty impressive and generally better than MKL and Atlas (the self-tuned implementation of LAPACK) ant most/all matrix sizes. I agree with comments made by @pcarruscg that having a standard for matrix operations throughout the source would clean up /simplify the code considerably and, since it does not seem to impact the AD approach, it should be pursued. It sounds like a quick test branch like @vdweide is suggesting makes sense. A quick driver code to test the performance of the Eigen routines vs MKL makes sense too. The only thing that @vdweide should comment on is how much work it would be to change the LAPACK/BLAS based implementation in the DG-FEM solver to the interface that Eigen exposes. Best,. Juan. On Feb 1, 2019, at 4:19 AM, Edwin van der Weide <notifications@github.com<mailto:notifications@github.com>> wrote:. Would it be an idea to create a branch to test things out and make a decision based on the results? It would be interesting to see the performance for e.g. the dense matrix multiplications in the DG-solver compared to Intel's MKL. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/643#issuecomment-459705131>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxM1gm0iy_FeGBMFzxVQnYFFzEHt4ks5vJDDlgaJpZM4adbAo>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459845576:769,expose,exposes,769,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459845576,2,['expose'],['exposes']
Security,"All,. Thanks for getting this going. My two cents:. 1. Indeed, while these V&V cases and the TestCases directory / repo are not identical, there is some overlap‚Ä¶some of the TestCases are definitely validation cases too. We can continue to add test cases to the TestCases repo, knowing that only a subset of those cases belong in the V&V list. 2. An important aspect of the V&V is the convergence of the solution as the mesh is refined. As Jayant knows well, this can help us catch bugs. This means that a well-constructed V&V suite needs to include a series of meshes (of increasing density), the corresponding configuration files, and the actual experimental data (or other numerical data from runs on different solvers). I strongly agree with the suggestions made that (a) the entire V&V suite needs to be run before every major release (with configuration files updated), (b) that this should be linked form the main SU2 page, (c) that the 2014 AIAA paper (and Tom‚Äôs AVIATION 2018 paper) should serve as a starting point, (d) that the NASA TMR website can give us ideas of additional access, and (e) that the SU2 V&V page should be managed within GitHub.com<http://GitHub.com> so the entire community can edit / add to this / these page/s to continue to grow the number of cases and their relevance. Best,. Juan. On Sep 20, 2018, at 3:02 AM, Ruben Sanchez <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, Pedro, I think that's a great idea. As you mention, we would have to work out the logistics as this would require quite a bit of implication from the community, but the extra burden on the release would be compensated by avoiding big ""updating"" operations every now and then. Also as most users only work with the released versions, so it's a way to ensure they always know what updates have happened / which new features are available. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://git",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423207120:198,validat,validation,198,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423207120,2,"['access', 'validat']","['access', 'validation']"
Security,"Also, we're happy to give regular contributors direct access to the repository (easier to collaborate and participate in reviews, etc.). Just let me know if you would like to be added.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/935#issuecomment-613544012:54,access,access,54,https://su2code.github.io,https://github.com/su2code/SU2/pull/935#issuecomment-613544012,1,['access'],['access']
Security,"And a few other changes in constants. I am absolutely fine with that but I do not have bandwidth to update all the regression tests, re-run validation tests, etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1551#issuecomment-1059529142:140,validat,validation,140,https://su2code.github.io,https://github.com/su2code/SU2/issues/1551#issuecomment-1059529142,1,['validat'],['validation']
Security,"Antonio,. We will see if this check passes with corrections to .py files, but the mesh file is sitting in a pull request in TestCases repository. I could not add to that repository as part of this pull request. I have a feeling both checks are going to fail unless they can access each other. Jason",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/445#issuecomment-337577313:274,access,access,274,https://su2code.github.io,https://github.com/su2code/SU2/pull/445#issuecomment-337577313,1,['access'],['access']
Security,"Any further comments on this ? Otherwise I assume that there is no objection and I will merge it in today. Btw. as you might have seen, I enabled codacy for the project in order to check the code for security, errors and code style.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/709#issuecomment-502652486:200,secur,security,200,https://su2code.github.io,https://github.com/su2code/SU2/pull/709#issuecomment-502652486,1,['secur'],['security']
Security,"As we mentioned in the dev meeting where you exposed the problem, the implementation is not good for strongly coupled flows, and I would guess that it is worse for diffusion than convection (because diffusion is elliptic).; I suspect the main problem is that the linear system does not contain information from the other side of the interface, meaning the solution of the two domains is effectively decoupled.; You could try running the case at much lower CFL (below 1) even with an explicit method.; It is also possible that the current treatment could be improved, since it is an example of multiplicative Schwartz decomposition, maybe there is an ""optimal"" way of implementing that from a physics point of view. Just speculating here, but maybe it would help treating the interface as an outlet if flow is going out, and as an inlet if flow is coming in.; On the numerics side, you can also try hacking the MZ driver to use something more stable than block-Gauss-Seidel (e.g. some quasi-Newton thing for the interface). But those are all band-aids IMO, if you want a robust fluid-fluid interface you need the coupling to be present in the linear system. The simplest way to do that is to have an internal boundary and treat the problem as single zone.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1414#issuecomment-951848509:45,expose,exposed,45,https://su2code.github.io,https://github.com/su2code/SU2/issues/1414#issuecomment-951848509,2,['expose'],['exposed']
Security,"Attaching some results for the RAE2822 of the pressure field zoomed in right near the shock on the upper surface. The results do change (lift and drag by a couple percent) mostly due to a change in shock position it seems. The pressure field also shows the same behavior referenced above when the term is included. Unfortunately, we do not have much data to compare with here, since this case is not on the TMR. The integrated quantities above for the bump problem do not appear to be too sensitive to it either way, but the pressure field does indeed show the same discrepancies. In general, I have not been able to find any strong arguments for or against including the term in literature/codes. Although it is prescribed by the theory, some folks mention it is sometimes dropped (TMR also says it is sometimes ignored unless supersonic), or it gets dropped without mention at all. It is certainly affecting the pressure distribution, so we should take that into consideration. It is possible that there is some other bug that gets exposed by its inclusion, but I did not come across anything yet. As we know the SA model does not exhibit this behavior, I lean toward removing it. I'm all ears if you have any other insight. <img width=""1313"" alt=""Screen Shot 2019-10-25 at 2 47 16 PM"" src=""https://user-images.githubusercontent.com/4896083/67607461-615a1180-f739-11e9-9d68-9c5d15fb0acc.png"">; <img width=""1312"" alt=""Screen Shot 2019-10-25 at 2 47 06 PM"" src=""https://user-images.githubusercontent.com/4896083/67607471-68811f80-f739-11e9-82bd-ac1c23b4caad.png"">",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/797#issuecomment-546529544:1034,expose,exposed,1034,https://su2code.github.io,https://github.com/su2code/SU2/issues/797#issuecomment-546529544,1,['expose'],['exposed']
Security,"Awesome, close to 1.5 was what I saw on the skylake architecture too (albeit the consumer version).; Thanks for testing again, without the DNDEBUG flag every access to CVariable is an if statement basically. That flag is now set by default when building with meson.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-524806934:158,access,access,158,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-524806934,1,['access'],['access']
Security,"By the way, I have another set up updates for you guys to consider that are; beyond the scope of this pull request. Let me know if you are waiting on me; to close the pull request or if you can do that. I put the recommended changes for the structure of config.py file in a gist; https://gist.github.com/spendres/7bbe6eb60fac1f2f148a that separates the; low level config errors validation. I also created a few unit test cases to; allow a controlled build up of regex checks without risk of breaking; previous bug fixes. Let me know. Steve. On Sat, Jan 10, 2015 at 11:34 PM, Steven Endres spendres@gmail.com wrote:. > thanks for the commands; > ; > On Sat, Jan 10, 2015 at 11:54 AM, Trent Lukaczyk <notifications@github.com; > ; > > wrote:; > > ; > > so now the file is being committed as deleted... please roll back to this; > > commit; > > spendres@6cbddbe; > > https://github.com/spendres/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520; > > ; > > here are the commands you can use --; > > Reset the index to the desired tree; > > ; > > git reset 6cbddbe; > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520; > > Move the branch pointer back to the previous HEAD; > > ; > > git reset --soft HEAD@{1}; > > ; > > git commit -m ""Revert to 6cbddbe; > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520; > > ""; > > Update working copy to reflect the new commit; > > ; > > git reset --hard; > > ; > > ‚Äî; > > Reply to this email directly or view it on GitHub; > > https://github.com/su2code/SU2/pull/144#issuecomment-69462490.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/144#issuecomment-69498342:378,validat,validation,378,https://su2code.github.io,https://github.com/su2code/SU2/pull/144#issuecomment-69498342,1,['validat'],['validation']
Security,"Can someone validate the Conjugate Heat Transfer test case? Perhaps @oleburghardt ? I included the CHT_WALL_INTERFACE in the list of markers that are used for the wall distance computation, but that was not present in the original implementation. I can run the test case, but I don't know what to validate the case against.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/605#issuecomment-435402614:12,validat,validate,12,https://su2code.github.io,https://github.com/su2code/SU2/pull/605#issuecomment-435402614,2,['validat'],['validate']
Security,Can you run it through valgrind or address sanitizer (with debug symbols) to give us more info about where the segfault occurs?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-623657896:43,sanitiz,sanitizer,43,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-623657896,1,['sanitiz'],['sanitizer']
Security,"Could be a data race, thanks for reporting @kursatyurt. Last I ran the thread sanitizer during the CoDiPack 2 update, nothing came up at the time. The failing test is the recently added `pywrapper_CFD_AD_MeshDisp`. I'll look into it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1980#issuecomment-1480981399:78,sanitiz,sanitizer,78,https://su2code.github.io,https://github.com/su2code/SU2/issues/1980#issuecomment-1480981399,1,['sanitiz'],['sanitizer']
Security,"Dear @WenyinWei: presently Mutation is already fully linked to SU2 and is not only something that will allow to deal nicely with chemical reactions, but it presently also used to get all the species/mixture thermochemical properties (including ions and free electrons) and to address thermal non equilibrium (i.e. multiple-temperatures) by incorporating characteristic vibrational and electronic temperatures for various species. We still have not pushed the latest developments in NEMO-TNE2 since we are finalizing some verification and validation test cases and producing appropriate documentation to be added on the SU2 webpage. @srcopela already created a nice substrate for all these features now we are trying to put this up to speed with the latest SU2 versions and capabilities and go beyond that with additional capabilities. Introducing MHD is definitely something on our roadmap, but something that will come after we have completed our merging of TNE2+NEMO and we have one solid feature with thermochemical nonequilibrium.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/741#issuecomment-515662933:538,validat,validation,538,https://su2code.github.io,https://github.com/su2code/SU2/issues/741#issuecomment-515662933,1,['validat'],['validation']
Security,"Dear @fpalacios and @economon,. I would like to add the su2perio fortran program to the MeshTools repository. Could you please give me access to it? I tried to push it, but apparently I do not have the right to push on that repository. Regards. Salvo",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/416#issuecomment-326982841:135,access,access,135,https://su2code.github.io,https://github.com/su2code/SU2/issues/416#issuecomment-326982841,1,['access'],['access']
Security,"Dear Jyothi,. This error message indicates that you have specified the AOA option (angle of attack) option twice in your cfg file. Check if this is indeed the case and remove one. Regards,. Edwin",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/417#issuecomment-318047362:92,attack,attack,92,https://su2code.github.io,https://github.com/su2code/SU2/issues/417#issuecomment-318047362,1,['attack'],['attack']
Security,"Dear all, ; I have added a pdf file here that includes some test case results obtained with our BC transition model. These zero pressure gradient and variable pressure gradient flat plate test cases are very popular for model validation. I have also included Eppler E387 airfoil results. I would appreciate if you have any 3-D test case and share it with me.; Looking forward to hear your feedback. ; Sincerely,; Samet. [BC_model_TestCaseResults.pdf](https://github.com/su2code/SU2/files/562425/BC_model_TestCaseResults.pdf)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-257360833:226,validat,validation,226,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-257360833,2,['validat'],['validation']
Security,Discussion #2213 is about fixes for the address sanitizer detections in the `harmonic_balance` and `hb_rans_preconditioning` test cases (see https://github.com/su2code/SU2/actions/runs/8422887468/job/23065483005?pr=2246).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2018520875:48,sanitiz,sanitizer,48,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2018520875,1,['sanitiz'],['sanitizer']
Security,Do you have a testcase that demonstrates this implementation? Can you reproduce and compare to the validation plots published by Xiao He? I think you have shared some similar results with us before.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2354#issuecomment-2341330478:99,validat,validation,99,https://su2code.github.io,https://github.com/su2code/SU2/pull/2354#issuecomment-2341330478,1,['validat'],['validation']
Security,Done. These options are all now exposed to the user in the configuration file directly (v3.2.9).,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/107#issuecomment-102170781:32,expose,exposed,32,https://su2code.github.io,https://github.com/su2code/SU2/issues/107#issuecomment-102170781,1,['expose'],['exposed']
Security,"Dr. Economon,; It turns out that the latest version of the SU2 prints the outputs that I needed (Cfx Cfy and Cfz). So, I created the surface streamlines, along with pressure coefficient distributions for comparison, and you can find it in the attached document . There are also some results from other studies in the literature in the attached document. ; It seems to me that, the NREL case may not be the best case for validating our model. Comparing the results in the literature, none of the surface streamlines agree well with eachother. In the absence of experimental data, it is difficult to tell which one is more reasonable. I would be happy if you would also comment on these results.; Also, I wonder what the next step is. Is there anything else that you require us to do before merging the model into the master code? I think if the transition model was released officially, the community may apply the transition model to different test cases that we may not heard of or the proprietary ones. . Samet; [BC_Transition_NREL_PhaseVI.pdf](https://github.com/su2code/SU2/files/603139/BC_Transition_NREL_PhaseVI.pdf)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/326#issuecomment-261886757:420,validat,validating,420,https://su2code.github.io,https://github.com/su2code/SU2/pull/326#issuecomment-261886757,1,['validat'],['validating']
Security,"Everything looks good here with the ADT search. Merging this into the develop branch. Two notes:; 1. I switched MPI_Allgatherv() to SU2_MPI:Allgather() temporarily until we can properly treat the wrapper. This will be easy to change. The code is slightly less pretty, but same results.; 2. Scaling results look very good out to 96 cores and can be ~100x faster than the brute force search. I'll run on O(1000) cores as soon as I have access again to make sure there aren't any hidden problems at scale.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/288#issuecomment-230977816:434,access,access,434,https://su2code.github.io,https://github.com/su2code/SU2/pull/288#issuecomment-230977816,1,['access'],['access']
Security,"First off, I love the changes. A cleanup of COuput and greater output flexibility were much needed. So let me see if I understand this code. Say that I, as a developer, want to add a new variable to the volume output. For example, I want the production of turbulent kinetic energy from the SST model during a compressible simulation. As a user, I can always add new outputs by adding new field names to the config file. But production isn't one of the (currently) available config-file options. So I would have to code it. First, I would obviously make sure that the production is properly stored in the turbulence variable class, with an accessor like `GetTurbProduction()`. Second, in `CFlowCompOutput::LoadVolumeData`, I would add to the appropriate place:. ```cpp; SetVolumeOutputValue(""PRODUCTION"", iPoint, Node_Turb->GetTurbProduction());; ```. Third, I would add `PRODUCTION` as a cfg input by adding the following line to `CFlowCompOutput::SetVolumeOutputFields`:. ```cpp; AddVolumeOutput(""PRODUCTION"", ""Turb_Production"", ""PRIMITVE""); ```. I could also split off production into its own output group by changing `PRIMITVE` to any other name. This name does not have to be registered anywhere else. In other words, I can change `PRIMITVE` to `SST_NUMERICS` and the only other place I need to put `SST_NUMERICS` is my cfg file. Finally, I could add either of the two following lines to my cfg file:; ```; VOLUME_OUTPUT= (COORDINATES, SOLUTION, PRODUCTION) ; VOLUME_OUTPUT= (COORDINATES, SOLUTION, SST_NUMERICS); ``` . Is this example correct? If not, what am I misunderstanding? What am I missing?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/724#issuecomment-514031723:639,access,accessor,639,https://su2code.github.io,https://github.com/su2code/SU2/pull/724#issuecomment-514031723,1,['access'],['accessor']
Security,"From the SU2 paper, talking about ""guiding principles"":. <img width=""574"" alt=""Screen Shot 2019-10-09 at 3 26 46 PM"" src=""https://user-images.githubusercontent.com/19416354/66525312-edb5d480-eaa9-11e9-9c0f-158b3941b407.png"">. I particularly like. > Full documentation, including a comprehensive set of tutorials. (""including"" implying that the tutorials are a subset of the documentation), and . > expose the full set of options [...] to the practitioner. This conflicts with our ""operating principle"", laid out on the tutorials page:. > Rather than writing a long manual on all available (and constantly evolving) configuration options available in SU2[...]. The Guide to V7 is a good start, but I think at the bare minimum (since I agree that full documentation would be a huge task, though one that's apparently promised on a paper we link on our homepage), we should provide more information about the existing options beyond forcing the user to scroll through config_template.cfg or dig through the tutorials.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/775#issuecomment-540239931:398,expose,expose,398,https://su2code.github.io,https://github.com/su2code/SU2/issues/775#issuecomment-540239931,2,['expose'],['expose']
Security,"Good Morning,. I'm from Chair of Thermal Engineering of Pozna≈Ñ University of Technology.; In August 2017 my colleague and I attended SU2 Summer School in; Kaiserslautern and met the Sci-Comp team developing the SU2. I think moving the main tutorials to the main repository is a good idea. We; declared to contribute some validation cases and written tutorials and; having this in main repository will ease the process of adding/modifying; the docs to a simple pull request. I also have a suggestion regarding the Test Cases and Tutorial files. I; apologize if this is the wrong place or this has been discussed already,; but still will give it a try:; - Test cases folder from SU2/su2code repository shall be moved to the; SU2/TestCases repository. Rationale: this makes one repository to store the; test case *.cfg files and mesh files.; - There shall be a TestCases/Mesh folder to store all the meshes needed for; Test Cases files, without subdivisions for RANS, Euler etc subfolders.; Considering that multiple test cases use the same mesh and all the mesh; files are distinct, this solution generates one place to store all the mesh; files. Should a user perform a test case, he/she will find the mesh by name; referenced in the *.cfg file instead searching thru multiple folders. This; will also help avoiding unnecessary copies of mesh files.; - The same should be done for Tutorial files: Tutorial/Mesh folder for; storing meshes (duplicating these few files from TestCases/Mesh should not; be a problem IMO, but will really help a new user to get up to speed with; SU2); - I have no clear opinion on where the Tutorial files folder should be; stored. But considering moving written tutorials to main repository i think; that tutorial files should also be stored in main SU2/su2code repository. Best regards and Happy New Year; Jƒôdrzej. 2017-12-30 23:45 GMT+01:00 Tim Albring <notifications@github.com>:. > What do you think of moving the written tutorials also to the main; > repository ? Then",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/485#issuecomment-354736415:321,validat,validation,321,https://su2code.github.io,https://github.com/su2code/SU2/pull/485#issuecomment-354736415,2,['validat'],['validation']
Security,"Good point about making the eigen-functions static. That makes it a lot more accessible in other parts of the code. Will include that in the changes along with the option name changes. . I like the idea about the static allocation, but I foresee a problem that you actually mention. If I convert the variables to be statically defined, I would have to make the eigen-functions accept statically defined arrays. Since most arrays in SU2 are dynamically allocated, this would cause some compatibility issues. . In general, I see the value in making a math library associated with matrix operations. Maybe you could pitch the idea in an issue and get feedback on it?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/570#issuecomment-433963723:77,access,accessible,77,https://su2code.github.io,https://github.com/su2code/SU2/pull/570#issuecomment-433963723,2,['access'],['accessible']
Security,"Good to hear about the progress. In the mean time, I have had a look at the wall model implementation for RANS in your implementation and the current develop. I have a working version validated for SA and SST in the branch 'fix_wallfunctions', which was branched from develop.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1120#issuecomment-782819100:184,validat,validated,184,https://su2code.github.io,https://github.com/su2code/SU2/pull/1120#issuecomment-782819100,1,['validat'],['validated']
Security,"Great idea! Below are some links to databases that I know of. I'd be happy to contribute. . (Some) CFD companies run very large regression tests that can take a long time to complete. Typically, you do not put validation test cases in a regression test (and run it up to convergence) because it will just take too long. A regression test should be <30s or so. ; At a certain point there *will* be validation test cases that will take a couple of weeks to run. If you want to make sure that the validation tests are up-to-date and will run with the current version, create a regression test for it: create a coarse mesh setup for it and run it for only 10 iterations and check the residuals. ; Having said that, it will be nice if there is a general 'run' script that will run all subcases of a single validation case to construct the entire validation and validate the final results with the known/stored solutions.; -nijso. ercoftac database:; http://cfd.mace.manchester.ac.uk/ercoftac/index.html; nparc database:; https://www.grc.nasa.gov/WWW/wind/valid/archive.html; cfl3d V&V database:; https://cfl3d.larc.nasa.gov/Cfl3dv6/cfl3dv6_testcases.html; V&V database for turbulence models:; https://turbmodels.larc.nasa.gov/; drag prediction workshop:; https://aiaa-dpw.larc.nasa.gov/; some cfd-online V&V links: ; https://www.cfd-online.com/Wiki/Validation_and_test_cases; https://www.cfd-online.com/Links/refs.html#validation; reacting flow database:; https://www.sandia.gov/TNF/abstract.html",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426239437:210,validat,validation,210,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426239437,7,['validat'],"['validate', 'validation']"
Security,"Great!; I see, I will propose different times for the meetings on the Slack channel (https://join.slack.com/t/su2devteam/shared_invite/zt-af0uuqf8-8XNExKMV9G~UVsnkvi5uVA), even for some folks in the US it is very early.; Join the channel if you would like and you can help to pick better times, we want all aspects of SU2 to be accessible worldwide.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1329#issuecomment-883448046:328,access,accessible,328,https://su2code.github.io,https://github.com/su2code/SU2/pull/1329#issuecomment-883448046,1,['access'],['accessible']
Security,"Guys, we cannot simply change defaults like that, update regressions, and call it a day... Even fixing #1551 is a major change that should warrant a major version update. We want SU2 users to be able to rely and trust the code we release...; That is why I suggested that this PR should be used only to change the way of specifying SST options, and introduce simple ones like the V and KL modifications. Then the validation work for SST 2003 (with and w/o modification) would be done in #1557.; But ok, let me look at this and propose a way forward that gets in develop ASAP, **please don't start updating regressions**.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1560#issuecomment-1084549672:412,validat,validation,412,https://su2code.github.io,https://github.com/su2code/SU2/pull/1560#issuecomment-1084549672,2,['validat'],['validation']
Security,"Hello @talbring. Thank you for the suggestion. After downloading the submodules manually, should I run meson.py or a different script? And when you mean the root folder, do you mean ""externals"" folder or the system's root folder? If you mean the latter, then I don't have root access. Is this necessary for installation? ; Regards; Suman",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-619940115:277,access,access,277,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-619940115,1,['access'],['access']
Security,"Hello Charanya, Tobi,. I've finally performed some validation runs trying to tackle the Boundary condition issue which was recognized by @TobiKattmann as the source of discrepancy in unsteady Euler simulations between the old version and the new version. My validation test case relies on the ONERA M6 model I originally used to point out the issue. The test consists in imposing a deformation of the wing boundary which resembles a bending mode of the wing (starting from an already converged steady state). Such input deformation is provided in time in the shape of a blended-step. For the considered mode, forces are recorded in the fashion of the popular (within an aeroelastic context) Generalized Aerodynamic Force (GAF) coefficient in time. A Fourier Transform allows me to recast the GAF in the frequency domain where I can compare the same value with the ones extracted by the Doublet Lattice Method on a geometrically equivalent panel mesh. Simulation is performed at mach 0.8(~ V_inf = 272.3 m/s ) and AoA = 0. In the figure here you can see the time domain GAF vs time as calculated by old SU2 (v 6.0.1), new SU2 (v6.2.0) enforcing the old boundary condition as suggested previously by @cvencro and new SU2 with the new boundary condition. . ![Time](https://user-images.githubusercontent.com/23583209/72831582-75070c80-3c83-11ea-94fc-06ebbffe9f18.jpg). You can notice how at approx 0.0023 sec the blended step is fully developed. Now, despite some small differences between the old SU2 version and the new with enforced old boundary conditions (that are due, among other things, to small changes in the mesh deformation algorithm that I have noticed) you can notice the big difference in the application of the two boundary conditions. . I also attach a couple zooms of the signal: first at time 0 which gives the GAF for the steady initial simulation and second for the converged values. It can be seen how (even if less important) some discrepancies are found here as well.; ![Time_zoom]",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-576826669:51,validat,validation,51,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-576826669,2,['validat'],['validation']
Security,"Hello Tobi, Charanya, ; I run the simulation with my FSI framework including @economon modifications as suggested by @TobiKattmann. Unfortunately the simulation crashed due to server problems before it was complete but the partial results give us some preliminary information.; ![Comparison](https://user-images.githubusercontent.com/23583209/83328161-42989c00-a281-11ea-8b52-39b1967c1f69.jpg). The figure proposes the same time domain GAF comparison shown in https://github.com/su2code/SU2/issues/828#issuecomment-576826669.; The blue line is the GAF for the bending mode of the ONERA M6 as calculated with the new (at the time) BC. The red line is calculated enforcing the old boundary conditions as suggested by @cvencro and which proved to be a successful approach in retrieving the validated old results. Here in green I add the solution run with Tom's fix of the BC as discussed with Tobi. You can notice how this new version, while featuring a response similar to the reference response, shows a filtering of the higher frequency dynamics. Can't do yet the Fourier transform of the signal to quantitatively asses at which frequency the results start diverging from the reference, so I don't know how much this discrepancy is, in effect, relevant. ; We are talking about really high frequency dynamics which may be due to the numerical scheme. Certainly, it would be interesting to understand the cause of that.; ; Best,; Rocco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-636327003:787,validat,validated,787,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-636327003,1,['validat'],['validated']
Security,"Hello Tom,. Thanks for responding. I have been trying to recreate the problem on smaller meshes, but so far, no luck. However, I am seeing a problem that may be _related_ on a smaller mesh. This is occurring with the latest commit (c093a62a2b) of develop:. When compiled with mpi and buildtype of either release or debug, when attempting to restart a DDES, I am getting the following:. 1) Compiled in release mode: segmentation faults following ""initialize jacobian structure (SA model)""; 2) Compiled in debug mode: ; ```; | Total Time| 1| 1| s| 1|; | Time Step| 1.25e-06| 1| s| 1.25e-06|; +------------------------------------------------------------------------------+; Initialize Jacobian structure (Navier-Stokes). MG level: 0.; Initialize Jacobian structure (SA model).; SU2_CFD_MPI_DEBUG: ../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp:294: const Scalar_t& container_helpers::AccessorImpl<Index_t, Scalar_t, StorageType::ColumnMajor, AlignSize, 0, 1>::operator()(Index_t) const [with Index_t = long unsigned int; Scalar_t = double; long unsigned int AlignSize = 64]: Assertion `i>=0 && i<m_rows' failed.; ```; This problem appears on a relatively small (~7 million cell) mesh of the same geometry as the larger one I mentioned in my initial post. Running the simulation in serial mode runs successfully and does not produce any errors. I have put the RANS result, mesh, and DDES configure file and restart files on a shared folder:. https://drive.google.com/open?id=1IDpK_0xYktI-lbG-ozre9Sf_3ksC7xtt. Any/all help is greatly appreciated. -Paul",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/949#issuecomment-620295725:920,Access,AccessorImpl,920,https://su2code.github.io,https://github.com/su2code/SU2/issues/949#issuecomment-620295725,1,['Access'],['AccessorImpl']
Security,"Hello,. So, as promised I add the complete results of the simulation which I re-run in the meanwhile (please zoom the image for better details).; ![Comparison](https://user-images.githubusercontent.com/23583209/83864373-efad6180-a724-11ea-9b87-321ac14834b3.jpg). Same as the previous post, the blue line is the GAF for the bending mode of the ONERA M6 as calculated with the new (at the time) BC. The red line is calculated enforcing the old boundary conditions as suggested by @cvencro and which proved to be a successful approach in retrieving the validated old results. In black the solution run with Tom's fix of the BC as discussed with Tobi. In this case I scaled the response with the dynamic pressure as did in https://github.com/su2code/SU2/issues/828#issuecomment-576826669. I've also made a zoom of the signal at the beginning (when I introduce the blended step in time on the moving boundary) and at the end when all the dynamics is over. As you can see, as previously mentioned, Tom's fix appears to filter some high frequency dynamics but for the rest the trend is very similar to the reference one. In the end , when the steady value is reached, Tom's fix converges to the same value of the blue signal with the bugged BC. It is true anyway that the difference with the reference is very small, which is something we already knew. Best,; Rocco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-639402407:550,validat,validated,550,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-639402407,1,['validat'],['validated']
Security,"Hey @EduardoMolina ,; Yes, I guess it would be good if you can test if this actually fixes your validation Testcase. Maybe also adding the case as regression/validation case could be an idea as there is currently none to my knowledge. ; MfG, Tobi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/740#issuecomment-515225353:96,validat,validation,96,https://su2code.github.io,https://github.com/su2code/SU2/pull/740#issuecomment-515225353,2,['validat'],['validation']
Security,"Hey @sun5k . I think that discussion sums it up quite well. I had some trouble with high n values at the start of the simulation, as small n values still resulted in a small production addition, and thus increased the n values again. But I think I am able to control it. I will update the code today and work on some validation cases.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1765#issuecomment-1333681411:317,validat,validation,317,https://su2code.github.io,https://github.com/su2code/SU2/pull/1765#issuecomment-1333681411,1,['validat'],['validation']
Security,"Hey Sun5k! . I am a master student on the University of Twente, based in the Netherlands. I am also starting to work on the implementation of the Langtry and Menter model into the current version of SU2 for my master thesis (although I have not set-up my own branch yet). The goal would be to validate and hopefully work on some application to test and verify the results compared to other work done in literature and the latest AIAA transition modeling workshop (https://transitionmodeling.larc.nasa.gov/workshop_i/). . I would love to know what your plans are with this model and on what timeframe you are working. As we are both working on this topic, it might be beneficial to combine our efforts? If you would like to discuss this, you can send me an email at r.roos@student.utwente.nl. Kind regards,; Richard",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1496#issuecomment-1016550498:293,validat,validate,293,https://su2code.github.io,https://github.com/su2code/SU2/pull/1496#issuecomment-1016550498,1,['validat'],['validate']
Security,"Hey,. @cvencro and I were discussing this issue quite a bit this morning and here an attempt of a summary:. We are looking at the following cases:; 1. 3D Onera m6, compressible euler, including euler_wall and sym_plane ; a. steady state; b. unsteady (no pitching, deforming); 2. 2D NACA64A010, compressible euler, including euler_wall; a. unsteady (no pitching/ deformation); b. pitching (with rigid and with deforming mesh -> used for the gradient validation of @cvencro 's post ). We are rather certain that the differences between the code-versions are due to the new euler_wall boundary which was introduced in #740 (by me :) ). @cvencro did a test where the old euler_wall was simply pasted into the newer function body (which currently directly calls the sym_plane boundary) -> that recovered the results obtained with the 'older' version. The steady state results (onera m6) show that both codes deliver the same results (of course with some minor differences). So far so good. Unsteady cases are a bit trickier: the latest 2D results of @RoccoBombardieri show pretty much no difference including the first timesteps. The onera m6 case in contrast converges to the same (steady-state) results for both code version eventually but their initial transient phase differs quite significantly. . A possible explanation for the different initial transient phase: In both implementations a ""reflected state"" is constructed where the normal component of the velocity is subtracted [once in the older code version & twice in the newer version]. I.e. subtracting the normal component of velocity twice means mirroring the velocity along the symmetry plane. The newer code version is a bit ""stronger"" in enforcing the boundary conditions which could lead to the reduced oscillation in CD and CL. If we agree that both code versions produce physically correct results for steady cases and unsteady cases that were integrated long enough in time to get rid of the influence of the initial condition ... then",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-563314747:449,validat,validation,449,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-563314747,2,['validat'],['validation']
Security,"Hi @ShukaiWang1110,; In SU2, we have different branches:. - The _master_ branch are official releases. They get a version number and are also released with precompiled executables. This is for instance ""SU2 v.8.0""; - A new master branch is created from the latest _develop_ branch. Developers are usually working with the develop branch to have access to the latest implementations. New implementations are committed to the develop branch. ; - When a developer wants to implement something new, they create a new branch from develop, implement their thing, and merge it again with develop. You see that happening here, in the top of the page you see. > [pcarruscag](https://github.com/pcarruscag) wants to merge 2 commits into [develop](https://github.com/su2code/SU2/tree/develop) from [supersonic_profile](https://github.com/su2code/SU2/tree/supersonic_profile). You see in the section _Files Changed_ the changes compared to the current develop branch. This shows that this branch is up to date with current develop, only the new changes for the inlet profile show up. . I did not go through the code yet, but when you run it without having an inlet.dat file present, it should create one for you filled with a uniform profile. When you then use this file unaltered, does that work?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241531458:345,access,access,345,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241531458,1,['access'],['access']
Security,"Hi @bmunguia ,; thanks for the fast reply, I'm sorry, the Python version was 3.6. I installed the 3.7.5, and made sure to reconfigure (had an issue with the gnome-terminal, but solved).; I re-compiled everything, but unfortunately the error persists, so I checked .local/python3.7.5./site-packages/pyamg but no _amgio extension was there.; When I move in external/AMGIO/su2io/ and run :; `python3 setup.py build_ext && python3 setup.py install`; An error occours:; ```; running build_ext; building '_amgio' extension; swigging ./sources/Python3.7/amgio_py.i to ./sources/Python3.7/amgio_py_wrap.c; swig -python -o ./sources/Python3.7/amgio_py_wrap.c ./sources/Python3.7/amgio_py.i; x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.7m -c ./sources/Python3.7/amgio_py.c -o build/temp.linux-x86_64-3.7/./sources/Python3.7/amgio_py.o -std=c99 -Wno-unused-variable -Wno-unused-result -O3; ./sources/Python3.7/amgio_py.c:2:10: fatal error: Python.h: No such file or directory; #include ""Python.h""; ^~~~~~~~~~; compilation terminated.; error: command 'x86_64-linux-gnu-gcc' failed with exit status 1; ```; Shall I remove python2.7 as well?; Thanks. During compilation the following warning appears:; ```; cc1: warning: command line option ‚Äò-Wno-non-virtual-dtor‚Äô is valid for C++/ObjC++ but not for C; ../externals/AMGIO/sources/libmeshb7.c: In function ‚ÄòGmfGetLinTab‚Äô:; ../externals/AMGIO/sources/libmeshb7.c:1391:35: warning: format ‚Äò%lld‚Äô expects argument of type ‚Äòlong long int *‚Äô, but argument 3 has type ‚Äòint64_t * {aka long int *}‚Äô [-Wformat=]; safe_fscanf(msh->hdl, ""%lld"", &IntTab[ (*IntCpt)++ ], msh->err);; ^ ~~~~~~~~~~~~~~~~~~~~~~; ../externals/AMGIO/sources/libmeshb7.c:475:23: note: in definition of macro ‚Äòsafe_fscanf‚Äô; if( fscanf(hdl, format, ptr) !",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-619345758:828,secur,security,828,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-619345758,2,['secur'],['security']
Security,"Hi @cvencro , I think it would be good to add that Testcase to the regression tests to 'guard' the code. ; I actually wanted to do that real quick but it guess that with `SINGLEZONE_DRIVER` one cannot access `TIME_ITER`, only `EXT_ITER` with the` .test_iter` variable of the python Testcase class. Not sure if that is addressed in #724 , maybe @rsanfer or @talbring can give a quick info as this is probably affecting all unsteady regression tests. . Concerning the Testcase repo: You can simply open a PR for the develop branch of the Testcase repo, and refer to the corresponding PR here (and vice versa). As far as I know the Testcase repo is not protected, i.e. you can merge without any check. And as it is just one added mesh and no other change you could do it right now from my point of view. Another point: What about the rotating_frame for incompressible flow? If it is untested I would like an error catch in place that this feature can't be used out of the box.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/767#issuecomment-527167827:201,access,access,201,https://su2code.github.io,https://github.com/su2code/SU2/pull/767#issuecomment-527167827,2,['access'],['access']
Security,"Hi @dkavolis,; It seems like you know your stuff about build systems and associated best practices, it would be great if you could open a PR with the fixes for this, I'd be happy to test the MKL stuff on the systems I have access to.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/823#issuecomment-558107370:223,access,access,223,https://su2code.github.io,https://github.com/su2code/SU2/issues/823#issuecomment-558107370,1,['access'],['access']
Security,"Hi @jatrin - glad to hear that the incompressible RANS solver is working well for you! . Thanks for the feature request. We have worked on this a little in the past, although there is no general method to expose any desired option for multipoint yet. However, in the past, we implemented the same concept for mass flow outlets with the incompressible solver. You might check the commit here to see the changes, and perhaps you can apply them to your own situation: . https://github.com/su2code/SU2/commit/541cae41c2ed5dc47ff1ce8a5ee5f7aff9c5fbf1#diff-e344798f2c0e495f61cf1e9a773e4257",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/912#issuecomment-600274648:205,expose,expose,205,https://su2code.github.io,https://github.com/su2code/SU2/issues/912#issuecomment-600274648,1,['expose'],['expose']
Security,"Hi @metuaee<https://github.com/metuaee>, further to @economon, I can add that we are presents working on a branch called NEMO (NonEquilibrium MOdels) that will deal with this type of aspects natively through a proper link with the library Mutation++. We plan to make it available soon through GitHub after some verification and validation steps are finalized.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/731#issuecomment-512577363:328,validat,validation,328,https://su2code.github.io,https://github.com/su2code/SU2/issues/731#issuecomment-512577363,1,['validat'],['validation']
Security,"Hi @rois1995 , I'd like to help with validation/verification if I can. Let me know if you are interested. You can contact me at berkecancfd@gmail.com.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2150#issuecomment-2434640466:37,validat,validation,37,https://su2code.github.io,https://github.com/su2code/SU2/pull/2150#issuecomment-2434640466,1,['validat'],['validation']
Security,"Hi @rois1995. The LM model code under the development clearly has some problems. I've not finished yet all validation cases for commonly used. So, I can't help with the E387 profile problem. but, I think I can give some helpful comments. . Check the numerical scheme which you used. like Roe and L2Roe, AUSM and SLAU. In my case, I didn't think to use the low dissipation scheme because I thought the code was wrong. I upload the configure file for the T3A flat plate case, which I used.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1111261534:107,validat,validation,107,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1111261534,2,['validat'],['validation']
Security,"Hi All; I‚Äôm a bit worried about the logistics related to checking this v&v data base for every new release.; Unlike the tutorials, these cases, by their nature will be large and will require long integrations(the 2D cases might not fall on this category). This means also that significant computational resources will be required for this evaluation (about twice a year for a growing list of cases). Is it practical?; The only way that I think that it might work is that each contributor will be responsible for checking the casesthat he has introduced, before each release. Being a voluntary institution, this can not be enforced (and we do not want to enforce). How about trying to be less demanding:; In each validation case there will be a statement about the last version that it was checked with and the responsible contributor. Each contributor will receive a recommendation to check his cases before a new release, and will be able to do that and update the OK label also after the release.; Less waterproof but might be more workable.; What do you think?; Eran",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423273117:712,validat,validation,712,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423273117,1,['validat'],['validation']
Security,"Hi Antonio,; the forum is a brand new feature, so it's normal you hadn't heard about it! :) In fact, mine was one of the very first posts. So that's precisely why we are putting it together, so all developers have access to the discussion there. I think moving this discussion there would be a good starting point (and a good way to encourage its use :D).; Ruben",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/528#issuecomment-392070338:214,access,access,214,https://su2code.github.io,https://github.com/su2code/SU2/pull/528#issuecomment-392070338,1,['access'],['access']
Security,"Hi Florian, great work, and important to have. The transonic bump case seems to have enough data available for proper validation. ; What are you unsure about? The actual derived source terms? If you have a document with your derivation of the source terms that would help in checking if it is correct.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1095#issuecomment-713412778:118,validat,validation,118,https://su2code.github.io,https://github.com/su2code/SU2/pull/1095#issuecomment-713412778,1,['validat'],['validation']
Security,"Hi Jayant; Thanks for being so prompt and fast in handling this very important issue.; I‚Äôm currently in vacation at Scotland so I‚Äôll be brief and just add few; comments:; a. As you wrote, validation is very different from test cases. Mesh,; configuration and solutions should be optimized for accuracy, experiment; reproduction and performance.; b. I think it is important to start the validation project, create a link; from the main SU2 web page to it, and than let it grow with the existing; mechanism of community contributions with approvals. Your list is very fine; for beginning. However I think we should strive to enrich it with 3D and; time dependent cases. I hope to be able to be in the loop and contribute to this important venue; Best; Eran; On Wed, Sep 19, 2018 at 8:26 PM Jayant Mukhopadhaya <; notifications@github.com> wrote:. > Hey everyone,; >; > Following the discussions at the SU2 Developers meeting this week, I; > wanted to start a conversation about compiling a comprehensive set of V&V; > cases for SU2 that can showcase it's performance in comparison to other; > solvers.; >; > I think the the NASA TMR website; > <https://turbmodels.larc.nasa.gov/index.html> is a good model to base it; > on. The idea would be to present the V&V case, provide working; > configuration and mesh files, and provide results comparing performance to; > other solvers and to higher fidelity data (when available). This allows; > people to see the performance of SU2 and replicate it, if need be.; >; > The first step would be compiling a list of cases that should be covered.; > The SU2 2014 SciTech paper; > <https://su2code.github.io/documents/SU2_AIAA_SciTech2014.pdf> would be a; > good starting point as it already had a couple of validation cases. This; > list can be bolstered with some of the NASA TMR cases, and with grid; > convergence studies. I would like to propose an initial list that the; > community can talk through and make changes as we see fit. I am mostly only; > familia",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423070900:188,validat,validation,188,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423070900,2,['validat'],['validation']
Security,"Hi Lorena,. Sorry for the delay getting back to you. You are right, and the TestCases repository is starting to be huge, mainly because of the stuff that GitHub generates to track the files. Easy to maintain/access alternatives are very welcome. Some releases ago, the grids were in another place (or lab server) and in Github we only had the config files, unfortunately we checked that for some users it was frustrating to download the config files and then go to another place to download the grids. From our practical point of view, the current setting is ideal to run the regression tests. But we are open to any change that benefits the SU2 users/developers community. . Now, it is very easy to download and modify the TestCases (keep in mind that the options in the config files change frequently) but, the price to pay is a large GitHub repository that it is difficult to download if you don‚Äôt have a good internet connection. Anyway, I think you are coming to Stanford in one week, it would be great to chat with you. We would love to have you and your group as a SU2 developer/user. Looking forward to meeting you and thanks for testing SU2. Best; Francisco. ## . Dr. Francisco Palacios; Engineering Research Associate at Stanford University; AIAA Senior Member, SIAM Member, and SU2 lead developer; Editorial Board Member for Scientific Report (Nature Publishing Group); Intel Parallel Computing Center. Personal webpage: http://adl.stanford.edu/people/fpalacios.html; SU2 webpage: http://su2.stanford.edu/. Department of Aeronautics and Astronautics; Durand Building. Room 357; Stanford University; Stanford CA 94305; United States. On Feb 3, 2015, at 1:32 PM, Lorena A. Barba notifications@github.com wrote:. > And why is your Test repo so large?; > Perhaps some data files would be happier living elsewhere?; > ; > I'm thinking that if your Tests load large mesh files, for example, these mesh files could be placed in a data repository (like Figshare, Data Dryad, Zenodo), and your confi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72909446:208,access,access,208,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72909446,1,['access'],['access']
Security,"Hi Pedro,. SU2 Testcase repo has 3 supersonic TestCases under euler folder (wedge, biparabolic and bluntbody), they all go well without initialization (you may be already aware of these euler cases). But I do not have any specific supersonic case for RANS or Laminar flow problems (some of them ideally be like nozzle flow or SHOCK-BL interaction).; May be need to have a look at NASA CFD site for validation and verification cases. Best; Amit",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/691#issuecomment-500152158:398,validat,validation,398,https://su2code.github.io,https://github.com/su2code/SU2/pull/691#issuecomment-500152158,1,['validat'],['validation']
Security,"Hi Steve,. I think that all your contributions are very interesting, so please feel free to create a pull request. Only one comment, please be sure that you pull to the develop branch (not the master). We only use the master branch for releasing the code. Thanks again!. Best; Francisco. On Jan 11, 2015, at 7:34 AM, Steven Endres notifications@github.com wrote:. > By the way, I have another set up updates for you guys to consider that are ; > beyond the scope of this pull request. Let me know if you are waiting on me ; > to close the pull request or if you can do that. ; > ; > I put the recommended changes for the structure of config.py file in a gist ; > https://gist.github.com/spendres/7bbe6eb60fac1f2f148a that separates the ; > low level config errors validation. I also created a few unit test cases to ; > allow a controlled build up of regex checks without risk of breaking ; > previous bug fixes. ; > ; > Let me know ; > ; > Steve ; > ; > On Sat, Jan 10, 2015 at 11:34 PM, Steven Endres spendres@gmail.com wrote: ; > ; > > thanks for the commands ; > > ; > > On Sat, Jan 10, 2015 at 11:54 AM, Trent Lukaczyk <notifications@github.com ; > > ; > > > wrote: ; > > > ; > > > so now the file is being committed as deleted... please roll back to this ; > > > commit ; > > > spendres@6cbddbe ; > > > https://github.com/spendres/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > ; > > > here are the commands you can use -- ; > > > Reset the index to the desired tree ; > > > ; > > > git reset 6cbddbe ; > > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > Move the branch pointer back to the previous HEAD ; > > > ; > > > git reset --soft HEAD@{1} ; > > > ; > > > git commit -m ""Revert to 6cbddbe ; > > > https://github.com/su2code/SU2/commit/6cbddbe59cf5da89e89321b72ae20ab289a66520 ; > > > "" ; > > > Update working copy to reflect the new commit ; > > > ; > > > git reset --hard ; > > > ; > > > ‚Äî ; > > > Reply to this email directly or vie",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/144#issuecomment-69612161:764,validat,validation,764,https://su2code.github.io,https://github.com/su2code/SU2/pull/144#issuecomment-69612161,1,['validat'],['validation']
Security,"Hi Tim,. Thanks!. I totally agree on the fact that Python-related functionalities could be in a separate file for code clarity. Anyway, considering only the C++ structure, those functionalities are still members of the CDriver (and all child classes). So if you are OK with the fact that having members of the same C++ class in different cpp files, I am OK too. . However, if you mean creating a new class for the Python wrapper (like CPyWrapper or whatever), and leave the CDriver ""clean"", this might be more tricky. Indeed, since the wrapper has to be a top-level class, it is better to have access to all the other main classes (config, geometry, solver, ...) and the CDriver was the perfect candidate (it instanciates all of them). So now if we create a new top-level class next to the CDriver, the direct link with all those classes is lost. Basically we will have to create accessors like CDriver::GetConfig(), CDriver::GetGeometry(), ... that will return the different containers to be used by the wrapper. Obviously this is possible but not in a short time, besides this might be a significant change in the top-level code structure. We could also think about exposing thoses CConfig, CGeometry, ... classes to Python in addition to just the driver, I already made some local tests and it worked great but this approach is less user-friendly. David",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/488#issuecomment-352045091:594,access,access,594,https://su2code.github.io,https://github.com/su2code/SU2/pull/488#issuecomment-352045091,4,['access'],"['access', 'accessors']"
Security,"Hi Tobi,. If the old results can exactly be recovered for the 3D case discussed, then I recommend updating the code with the changes you've made for the JST convective residual as default since those were the original results and they have also been validated in @RoccoBombardieri 's study. I've just tried the branch `testing_symmetry_plane` with the recommended settings for the NACA0012 pitching airfoil case. With the JST convective residual calculation, the results still appear to be different on initial look. Something still appears to be not right when grid motion is included. Can you please also look into this and try the pitching NACA0012 using the case zip I'd attached in my earlier post?. Thanks,; Charanya",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-578083725:250,validat,validated,250,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-578083725,1,['validat'],['validated']
Security,"Hi everyone, I am working on implementing my changes on top of the accepted transition model implementation. I already created a new branch here in the SU2 repository and I am validating the results. . However, I do not think I can modify this pull request to make it point to the new branch. The only thing I can do is open another pull request from the new branch. Should we close this pull request?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1788#issuecomment-1305309880:176,validat,validating,176,https://su2code.github.io,https://github.com/su2code/SU2/pull/1788#issuecomment-1305309880,1,['validat'],['validating']
Security,"Hi guys~ . Here is sharing the status of the LM model. V&V cases: T3A, T3A-, NLF. Flow conditions are the reference from: https://doi.org/10.2514/6.2022-3679. The grids of T3A and NLF cases are provided by [TMW](https://transitionmodeling.larc.nasa.gov/workshop_i/)(Transition Model Workshop). And I made the grid of T3A- myself. To validate the LM model, the simulation results of SU2 are compared with the results of Fluent19.0 with a similar numerical setting. Here is the numerical scheme : . <html xmlns:m=""http://schemas.microsoft.com/office/2004/12/omml""; xmlns=""http://www.w3.org/TR/REC-html40"">. <head>. <meta name=ProgId content=PowerPoint.Slide>; <meta name=Generator content=""Microsoft PowerPoint 15"">. <!--tr; 	{mso-height-source:auto;}; col; 	{mso-width-source:auto;}; td; 	{padding-top:1.0px;; 	padding-right:1.0px;; 	padding-left:1.0px;; 	mso-ignore:padding;; 	color:windowtext;; 	font-size:18.0pt;; 	font-weight:400;; 	font-style:normal;; 	text-decoration:none;; 	font-family:Arial;; 	mso-generic-font-family:auto;; 	mso-font-charset:0;; 	text-align:general;; 	vertical-align:bottom;; 	border:none;; 	mso-background-source:auto;; 	mso-pattern:auto;}; .oa1; 	{border:1.0pt solid black;; 	vertical-align:top;; 	padding-bottom:3.6pt;; 	padding-left:7.2pt;; 	padding-top:3.6pt;; 	padding-right:7.2pt;}; .oa2; 	{border:1.0pt solid black;; 	text-align:center;; 	vertical-align:top;; 	padding-bottom:3.6pt;; 	padding-left:7.2pt;; 	padding-top:3.6pt;; 	padding-right:7.2pt;}; -->. </head>. <body>; <!--StartFragment-->. ¬† | Fluent | SU2; -- | -- | --; Flux | Roe-FDS | L2ROE; Gradient | Least Squares Cell Based | WEIGHTED_LEAST_SQUARES; Spatial Discretization Flow | Third-order MUSCL | MUSCL_FLOW; Spatial Discretization Turbulence | First-order Upwind | MUSCL_NO. <!--EndFragment-->; </body>. </html>; The CFL number is set constant value. Some high-resolution grid-level results are missed because I don't have enough computational resources.; Here is Result. T3A : . ![image](https://use",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1194936824:333,validat,validate,333,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1194936824,1,['validat'],['validate']
Security,"Hi, I was about to open a pull request with the same exact implementation. I can help with the review and validation cases.; I am running test for an inviscid supersonic flow past a diamond airfoil and I am about to run some test on the RANS ONERA M6 wing.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2006#issuecomment-1500021072:106,validat,validation,106,https://su2code.github.io,https://github.com/su2code/SU2/pull/2006#issuecomment-1500021072,1,['validat'],['validation']
Security,"Hi,; I like this idea of self registering classes for our factories, although the instantiation logic is seldom as linear as converting a name to a type... Maybe you could refactor just one of our factories to give us a better idea of what it could look like?. This issue of ""modularizing"" pieces of the code is central to the refactoring of the optimization framework, which will require significant chunks of the code to be exposed to python, so by all means get involved in that (join #refactor_optimization on SU2 Slack and the developer meetings, Wednesdays at 4pm CET). Personally I think this flavour of extensibility is small fish compared to other structural problems we are currently addressing (duplication, code bloat, performance, robustness, etc.) and in my opinion addressing those issues will make it easier to extend the code in this manner, not harder.; Also from the pure C++ side I see no problem with having to modify the code... In so doing the new code is automatically under the same open source license, which to me is as good thing. A couple of practical considerations:; - About your examples, we want fewer drivers, not more. The methods of CVariable, CPoint, and co. need to be inline if the code is to have any semblance of performance.; - I think the majority of the code should still be statically linked, even if some parts of it can be extended by means of custom dynamic libraries, because that will just be less problematic for folks who build from source but are not developers. > The design I described above doesn't take into account C++ templates as I don't see them used that frequently (Is that a thing?). It is becoming a thing yes absolutely, although not at the very highest levels of abstraction. > Please, Please, we have to stop using raw pointers like that. It's being done... It takes time and not many people are comfortable doing this kind of refactoring (consider it an invitation :) ).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-668153867:426,expose,exposed,426,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-668153867,1,['expose'],['exposed']
Security,Hm that seems to be an issue with python 3.5. Do you have access to python3.7? Otherwise manually extract the archive file by going to folder externals/tecio/ and using the command; ```; tar xzf boost.tar.gz ; ```; Then try to rerun meson.py again.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1019#issuecomment-640555096:58,access,access,58,https://su2code.github.io,https://github.com/su2code/SU2/issues/1019#issuecomment-640555096,1,['access'],['access']
Security,"I also just made a gradient validation with the species variance OF ... will have the small additions in a follow up PR.; Small and easy case but with SST and 2 species transport equations; ```; SURFACE_SPECIES_VARIANCE gradient ; +-----------+-------------------+-------------------+-------------------+-------------------+-------------+; | DV number | DA gradient | FD gradient | absolute diff | relative diff [%] | sign change |; +-----------+-------------------+-------------------+-------------------+-------------------+-------------+; | 0 | -0.0015565547 | -0.0015568653 | 0.0000003106 | 0.0199523955 | 0 |; | 1 | -0.0002704356 | -0.0002704940 | 0.0000000584 | 0.0215893397 | 0 |; | 2 | 0.0005546628 | 0.0005546735 | -0.0000000107 | -0.0019320096 | 0 |; | 3 | 0.0008743823 | 0.0008743497 | 0.0000000325 | 0.0037214309 | 0 |; | 4 | 0.0008629093 | 0.0008627899 | 0.0000001194 | 0.0138354969 | 0 |; | 5 | -0.0015565547 | -0.0015568653 | 0.0000003106 | 0.0199522614 | 0 |; | 6 | -0.0002704356 | -0.0002704940 | 0.0000000584 | 0.0215901515 | 0 |; | 7 | 0.0005546628 | 0.0005546735 | -0.0000000107 | -0.0019318288 | 0 |; | 8 | 0.0008743823 | 0.0008743497 | 0.0000000325 | 0.0037199429 | 0 |; | 9 | 0.0008629093 | 0.0008627899 | 0.0000001194 | 0.0138353462 | 0 |; +-----------+-------------------+-------------------+-------------------+-------------------+-------------+. ```. I only consider the y-direction of the points and and fixed the first two ""columns"" to have a smooth transition. Additionally during deformation i have the outlet as MARKER_SYM for smooth Volume mesh morphing , i.e. only the wall is in DV_MARKER. This Gradient validation was brought to you by: FADO :); ![image](https://user-images.githubusercontent.com/31306376/144081781-2c02eae0-f135-4235-8ebf-bc6c83c65345.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1388#issuecomment-982771284:28,validat,validation,28,https://su2code.github.io,https://github.com/su2code/SU2/pull/1388#issuecomment-982771284,2,['validat'],['validation']
Security,"I believe the viscous components of a lot of bcs are commented out and can probably be removed at this point. I'm not even sure if they are formulated properly for NEMO problems. I think BC_Inlet can be removed. Or all the commented code can be removed with just an error message. Regarding the outlet boundaries, supersonic outlet does seem to be redundant. However, many validation cases use a supersonic outlet, regardless of boundary layers (ASWBLI), so it may be fine to keep.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1862#issuecomment-1368248064:373,validat,validation,373,https://su2code.github.io,https://github.com/su2code/SU2/pull/1862#issuecomment-1368248064,1,['validat'],['validation']
Security,"I built the code with mpich once and I believe what I did (cannot access the machine atm) was replace; ```; mpi_dep = [dependency('mpi', language:'c', required : get_option('with-mpi')),; dependency('mpi', language:'cpp', required : get_option('with-mpi'))]; if mpi_dep[0].found() or mpi_dep[1].found(); mpi = true; endif; ```; by; ```; mpi_dep = [dependency('mpich', required : get_option('with-mpi'))]; ```; in meson.build.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1000#issuecomment-633079695:66,access,access,66,https://su2code.github.io,https://github.com/su2code/SU2/issues/1000#issuecomment-633079695,1,['access'],['access']
Security,"I can also confirm that there is an issue with the *binary* Paraview output for large files. The code appears to write out the .vtu file just fine, but Paraview throws errors when attempting to open it. This does not occur for ASCII format Paraview files or smaller binary Paraview files. The case I am working on consists of a 180 million cell mesh. Also, @monika1387 , please note that the DG-FEM LES capability is *not* currently fully validated, and may be unstable in certain circumstances. Use this at your own risk. We are working on fixes for the DG solver, but they are still a ways away from being finished.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/787#issuecomment-599805153:439,validat,validated,439,https://su2code.github.io,https://github.com/su2code/SU2/issues/787#issuecomment-599805153,1,['validat'],['validated']
Security,"I can share that version of the code.. but beware, just as Edwin mentions, it is nasty looking and hard to compile (there are intrinsics and all sorts of architecture-specific changes). But, interesting to look at, of course. There you will see that we basically moved up all of the CVariable data (reordered contiguously) and methods to the solver to eliminate the extra layer of indirection, while still keeping access for outside classes, i.e. something like solver[FLOW_SOL]->node[iPoint]->GetPressure() becomes solver[FLOW_SOL]->GetPressure(iPoint). Since you mentioned it, another target is the CNumerics classes. The flexibility is nice, but does it really need an entire set of classes with getters/setters/virtual functions? I think that most of the ComputeResidual() functions could be moved up as methods in the solver classes as well to make more efficient residual kernel loops. In the early days, we thought completely removing CVariable and CNumerics would be very intrusive to change and would hurt flexibility. While the former is still true (although certainly doable), the latter does not seem to me as high of a priority any longer. Over the years, I don't think that folks have really modified the CNumerics classes all that often (once you have implemented the Roe method, it is more or less done). In addition, the CVariable and CNumerics child classes all live almost entirely within their own solvers, so we aren't taking much advantage of code reuse to justify having them as separate classes. For instance, if we just copied the relevant ComputeResidual() routines up into their solvers from numerics, we would have very little code duplication in the end, which is an indicator that we may not really need the extra baggage.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-513292350:414,access,access,414,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-513292350,1,['access'],['access']
Security,I can write the probe location for debugging purposes.; The probes have access to the same things as the custom outputs and they only output one scalar.; So if someone wants to probe the entire flow field they need to define one probe per variable.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1909#issuecomment-1418292228:72,access,access,72,https://su2code.github.io,https://github.com/su2code/SU2/pull/1909#issuecomment-1418292228,1,['access'],['access']
Security,"I do have them:; ```; slimshady@arch-linux-hp-probook-g3-450: ~$ sudo pacman -S --needed meson ninja; [sudo] password for slimshady: ; warning: meson-0.53.2-1 is up to date -- skipping; warning: ninja-1.10.0-1 is up to date -- skipping; there is nothing to do; slimshady@arch-linux-hp-probook-g3-450: ~$ ; ```. How do I use them to build it? Sorry if this is a noob question, haha",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631274168:109,password,password,109,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631274168,1,['password'],['password']
Security,"I don't have access to a cluster to test this on. However, I usually will install Anaconda Python (3) in my home directory when I do run on clusters just to have complete control over the entire Python environment. I think for scientific/engineering computing this is generally a better strategy than relying on the system Python. . On another note, any hints on why these tests are failing?. ```; /home/travis/build/su2code/SU2/TestCases/optimization_euler/steady_naca0012; naca0012_geo: FAILED; ```. ```; execution command: SU2_GEO inv_NACA0012_adv.cfg > inv_NACA0012_adv.log; ERROR: The code was not able to get to the ""OBJFUN"" section.; ERROR: The SU2_GEO values could not be found.; ```. ```; /home/travis/build/su2code/SU2/TestCases/rans/naca0012; Error in test_vals!; turb_naca0012_sst_restart_mg: FAILED; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/424#issuecomment-321769609:13,access,access,13,https://su2code.github.io,https://github.com/su2code/SU2/pull/424#issuecomment-321769609,1,['access'],['access']
Security,"I don't think the fix is as simple as it seems.; Indeed looking back at how we developed the CGNS reader, It was originally meant to read multiple zone in a single file. But during development, someone decided to restrict the reader to only one zone per file (and I don't know if it was validated). So now we are seating in the middle. If we replace line 169 of CGNSFVMMeshReader :; <pre>; if ( nzones > 1 ) {; SU2_MPI::Error(string(""CGNS reader currently expects only 1 zone per CGNS file."") +; string(""Multizone problems can be run with separate CGNS files for each zone.""), CURRENT_FUNCTION);; }; </pre>; by; <pre>; if ( cgnsZone > nzones) {; cgnsZone = 1;; }; </pre>. we can easily support multiple zone in one file. To support one CGNS zone per file, I guess that user should provide either the index in the cgns file of the zone we want to read or even better its name and not rely on SU2 numbering of zones. I think that supporting multiple mesh zones in the same file at the same time as one zone per mesh file should be possible as long as enough information is provided by the user. In this case, I am wondering how the option MULTIZONE_MESH and MULTIZONE option are interacting in the related issue. When MULTIZONE_MESH is set to NO do we expect one mesh file per zone ?; And in this case we can force CGNS Reader to read only the first Zone. In a more generic way something like this should be possible:; MULTIZONE=YES; CONFIG_LIST= (zone_1.cfg, zone_2.cfg, zone_3.cfg); CGNSZONENAMES = (""FluidRotor"", ""Solid"", ""FluidStator"") # To let CGNS pick the right zone in the file and if it not found the first zone can be used (current SU2 behavior). CGNSZONENAMES could also be set in each config file.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1566#issuecomment-1073204565:287,validat,validated,287,https://su2code.github.io,https://github.com/su2code/SU2/pull/1566#issuecomment-1073204565,2,['validat'],['validated']
Security,I finally managed to install this branch on my windows PC and can confirm that I can now access the vtu files on Paraview version 5.8.0.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1055#issuecomment-669275669:89,access,access,89,https://su2code.github.io,https://github.com/su2code/SU2/pull/1055#issuecomment-669275669,1,['access'],['access']
Security,"I had a chat with @pcarruscag in the meantime. Summary of the recent changes:; - All the non-FEM classes derived from CPrimalGrid (CLine, CTriangle etc) declared the static members for the connectivity themselves. So they all had to override the virtual getter functions for the connectivity themselves, resulting in a lot of code duplication. -> Now we have an intermediate class `CPrimalGridWithConnectivity<Connectivity>` that overrides them once, accessing the static members of `Connectivity` = `CLineConnectivity`, `CTriangleConnectivity` etc.; - `type*` array -> `std::vector<type>`. As a special case for a fixed-size boolean array, `std::bitset`.; - removed unused variables and functions",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1352#issuecomment-903237756:451,access,accessing,451,https://su2code.github.io,https://github.com/su2code/SU2/pull/1352#issuecomment-903237756,1,['access'],['accessing']
Security,"I have a question: for each point in the mesh I am trying to compute the dot product between the velocity vector and the normal to the wall of the nearest point on the wall. How do I access such information? I've found that in the CPoint class I have the ClosestWall_Elem variable which stores the index of the closest element on a wall. However, when I try to assess the information with a number of cores greater than 2, it crashes. Moreover, to recover the normal of the element I perform a mean of the normals on the nodes of that element. Is there a structure that has the normals saved for each element of the primal grid? The part that I am referring to is from line 208 in CTransLMSolver.cpp .",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035:183,access,access,183,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1410785035,1,['access'],['access']
Security,"I noticed that the output phase values for WRT_PERFORMANCE= YES are currently off due to the number of output phases not being correctly tracked (we call the SetResultsFiles in the Iteration class most of the time, and the one in the driver with the timing only at the end of the run). @talbring, did you already have something in mind for this? Otherwise, I can think of a cleaner way to handle those performance benchmarks. I think it would be good to start printing that information by default too potentially. A good place might be within the MPI structure, since it is accessible everywhere and we can also hide the timer ifdefs for MPI.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/798#issuecomment-543913612:574,access,accessible,574,https://su2code.github.io,https://github.com/su2code/SU2/pull/798#issuecomment-543913612,1,['access'],['accessible']
Security,"I reran the thread sanitizer analysis and it didn't detect any data races. The deviations are small, so I'm with @pcarruscag that this is probably inherent non-determinism. I relaxed the tolerances in #1984.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1980#issuecomment-1483122833:19,sanitiz,sanitizer,19,https://su2code.github.io,https://github.com/su2code/SU2/issues/1980#issuecomment-1483122833,1,['sanitiz'],['sanitizer']
Security,"I think I don't have the authority to merge, it says: ""This pull request can be automatically merged by project collaborators""; and ""Only those with [write access](https://docs.github.com/articles/what-are-the-different-access-permissions) to this repository can merge pull requests.""",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1954#issuecomment-1576156464:156,access,access,156,https://su2code.github.io,https://github.com/su2code/SU2/pull/1954#issuecomment-1576156464,2,['access'],"['access', 'access-permissions']"
Security,"I think I implemented all the modifications you suggested. I am sorry you see all the commits in between, unfortunately due to Covid I work outside of office and I actually use Github to push the modified code to the office PC. I was actually working on a separate branch but, for reason that I do not understand, all the commits have been moved in the merging process... sorry about that. I am still learning git. In particular the modifications are:. - The functions related to static mesh deformation have been removed. I only included some new lines in the python wrapper ; that overwrite the initial velocities to zero and push back the solution.; - I now use the BC_Sym_Plane of the FEA solver for the deformation at the symmetry plane. I had to add a flag that avoids ; accessing LinSysReact in case of mesh deformation, as this is not initialised in that context.; - GetnMarker_Match_Deform_Mesh is not present anymore; - The marker has been renamed from MATCH_DEFORM_MESH to DEFORM_MESH_SYM_PLANE. All the functions have also ; been renamed accordingly; - I included the SU2 header in all the new files, changing the version number to 7.0.8. I did not modify the version number of ; the files that were already present in SU2 prior to this PR. I think the merging process should take care of that, am I wrong?; - The python functions that were separated in x,y,z component now give back an array and are merged into one function only; - The descriptions for the methods have been added; - The test case has been removed. I actually prepared a tutorial and all the appropriate files will be placed in the tutorial and ; website repos. I will now perform a PR for those repos so that you can see the material. Again thank you very much and sorry for the mess with the ""internal"" commits. . Please let me know if you think I missed something",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1124#issuecomment-742471972:777,access,accessing,777,https://su2code.github.io,https://github.com/su2code/SU2/pull/1124#issuecomment-742471972,2,['access'],['accessing']
Security,"I thought of doing an SST but was not long enough that it gave me error with divergence. I have been setting up my SST case as per the tutorial example of NACA0012. However, I do not happen to see any entry with regards to eddy frequency etc. (usually required by SST) in the config file. Any guidance will be great.; Thanks; Jehan; From: Heather Kline notifications@github.com; To: su2code/SU2 SU2@noreply.github.com ; Sent: Tuesday, May 12, 2015 11:43 AM; Subject: [SU2] Feature deallocation (#174). Bringing this branch up to date with current develop branch. ; Various deallocation changes; Some regression tests fail but all run. (previously was not the case); You can view, comment on, or merge this pull request online at:; ¬†¬†https://github.com/su2code/SU2/pull/174; Commit Summary; - Updated GetEngine_Properties; - Fix to the last commit; - Small bug; - Merge branch 'develop' into feature_MPI; - merging; - SU2_SOL and SU2_CFD are working; - Preliminary, but complete, implementation of SU2_DEF; - More updates; - Working version; - Complete implementation (validate); - Working version of SU2_DEF; - Final push before moving to the develop branch; - New MPI (removing SU2_PRT); - Merged in Ben's ParMETIS integration and fixed some conflicts.; - Merge branch 'benkirk-parmetis_integration' into feature_MPI; - ParMETIS geometry routines have been copied over but are not activated yet.; - Small change to ParMETIS include.; - ParMETIS can now be activated for testing (PARMETIS=YES in config).; - Updated MG; - Updated EA subrotuine; - Small fix; - Fixing memory leak; - Fixing memory leaks; - Dev release v.3.2.6; - Increasing MAX_NUMBER_MARKER; - Working version with ParMETIS. Fixed bug in global index. Now clean up and testing...; - Cleaned version of ParMETIS routines with better console output during partitioning.; - Small bug in initial element division.; - Made arrays in ParMETIS call dynamic.; - Fixed compiler warnings and added MPI directives so that the pure serial code wor",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:1396,validat,validate,1396,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,2,['validat'],['validate']
Security,I updated the code based on your comments. I have to rerun the validation test case that I have to see if it still matches with the experimental data. I also have to check the compressible vs incompressible implementation.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1204#issuecomment-789202354:63,validat,validation,63,https://su2code.github.io,https://github.com/su2code/SU2/pull/1204#issuecomment-789202354,1,['validat'],['validation']
Security,"I would love to change the branch, if I really knew how to. Should I create a new Pull Request?; I am in the process of rerunning my isothermal validation cases with the updated code. As soon as I can get a stable config+mesh, I will send them over to you for a regression test!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/71#issuecomment-56638023:144,validat,validation,144,https://su2code.github.io,https://github.com/su2code/SU2/pull/71#issuecomment-56638023,1,['validat'],['validation']
Security,"I'll try and find some time to have a look at this today. I think the issue is in the `jSpan == nSpanDonor - 1`. The final value in both the donor and target arrays are 1D values, the values at nSpanDonor - 2 are the values at the shroud. I think the original proposed fix is still needed here as further down you have an array accessing a postion of `kSpan + 1` which iirc resulted in the memory access violation. I think what has happened here is the Aachen case triggers this condition, and results in an error in the calculation of the coefficient for the linear interpolation. When we fixed it, we changed the simulation enough that it throws the residuals off as the computational problem is inherently different. A good test for this would be to extract the values at the interface from the turbomachinery special output with and without this change to see if this is the case. When we were first designing this case @alecappiello had an issue getting the results in one of the zones to agree with experimental results, this could be why?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2276#issuecomment-2134790783:328,access,accessing,328,https://su2code.github.io,https://github.com/su2code/SU2/issues/2276#issuecomment-2134790783,2,['access'],"['access', 'accessing']"
Security,"I'll try to break down each request to make it clearer. Request: Use nomenclature consistent with the C++ interface (point instead of node, etc.); Reason: People who know the C++ interface will know how to use the python wrapper straight away, people who learn how to use the python wrapper will be able to understand the C++ implementation (without needing a translation layer in their mind all the time). Request: Return connectivity/adjacency as local indices instead of global; Reason: This is the natural way of referencing data in an MPI code, local indices correspond directly to data stored in the partition thereby making it more efficient to access (without global-to-local conversions, which are much more expensive than local-to-global). Furthermore, the local ordering strategy improves the efficiency of loops (over edges, neighboring points, etc.). Request: Do not apply unnecessary ""transformations"" to the connectivity/adjacency as part of the API; Reason: Increases the maintenance burden and makes for a less versatile API. By returning the local indices that form a marker or element, it is trivial to retrieve any other data for those indices (the ""transformation""). For example, the solution at those points, the point coordinates, whether the points are halo or domain points, the global indices, etc.; This way, by adding a **single** function to the API e.g. get the global index of a point of element, the functionality of the API grows a lot more because the user can apply the function to **any** connectivity/adjacency function. Request: Do not offer too many overloads of the same function; Reason: Increases the maintenance burden and it's returning the data in structures that are not very efficient, namely vector of vectors. It is much easier to offer domain-wide data access on the python side, as a very small function that can be part of wrapper utilities (i.e. live only in python but not c++). It may even be more efficient since you make a numpy array/matrix in",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1300#issuecomment-1402197827:652,access,access,652,https://su2code.github.io,https://github.com/su2code/SU2/pull/1300#issuecomment-1402197827,2,['access'],['access']
Security,"I'll weigh in with a more in depth answer on a second email, but yes I've; found great value in being able to have a good set of unit tests. Particularly when you don't have good acceptance tests (hard in a fast; moving research code), it gives a developer confidence that new changes; aren't being fundamental assumptions in the code. It lets sub module; developers build ""armor"" around those assumptions. It is a bit of a cultural thing. People who want robust bits write more.; Some people wire less. At the bank I once worked at, unit tests were required for every module.; Some people wrote code that tested almost nothing. And it would get; through code review that way. Eventually, I added coverage analysis to the check in that exposed this; practice that gave a false assurance that things were ok. More when I can think a bit more on this and get to a real keyboard!. Pat. On Wed, Jun 5, 2019 at 1:50 PM Juan Jose Alonso <jjalonso@stanford.edu>; wrote:. > Clark,; >; > Thanks for putting this idea out there. In my experience, unit testing; > has been an intrinsic part of the the modus operandi in many multi-physics; > codes at DoE and has been well worth the additional effort. In cases where; > it makes sense (as described by Clark and in the Stack Exchange discussion); > I would advocate for using it moving forward. There may also be some; > issues that arise multiple times in existing code where a retroactive; > application of unit testing may also make sense. I am copying Pat Miller,; > formerly with DoE, who may have more experience on whether such unit; > testing approaches were useful/worth the investment in some major codes he; > worked on.; >; > Best,; >; > Juan; >; >; > On Jun 4, 2019, at 2:14 PM, Clark Pederson <notifications@github.com>; > wrote:; >; > I propose adding a unit-testing framework and unit-tests to SU2. After; > chatting with @economon <https://github.com/economon>, I've decided to; > move the discussion here to get additional input.; > What is uni",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:736,expose,exposed,736,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['expose'],['exposed']
Security,"I've been testing this a bit this afternoon, things look ok.; We can revisit the accessor functions for the entire domain once we can return the container by reference instead of copying the data first.; We can also look into code-generating accessors for markers for whatever volume accessors we define, once the names stabilize a bit, there are some inconsistencies in the naming of the old python wrapper functions. This needs regression tests now.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1300#issuecomment-1426926772:81,access,accessor,81,https://su2code.github.io,https://github.com/su2code/SU2/pull/1300#issuecomment-1426926772,3,['access'],"['accessor', 'accessors']"
Security,"I've thought about this a bit, and I think the best way forward for this BC is to assume thermal equilibirum in the subsonic flow. In that case the ongoing characteristic for total density can be used to solve for the full thermodynamic state. I think this probably is consistent with use cases such as fuel injection in scramjets, where the injected fluid would be in thermodynamic equilibrium.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1882#issuecomment-1399418401:308,inject,injection,308,https://su2code.github.io,https://github.com/su2code/SU2/pull/1882#issuecomment-1399418401,2,['inject'],"['injected', 'injection']"
Security,"I../externals/metis/libmetis -I../externals/parmetis/include -I../externals/parmetis/libparmetis -ICommon/src/./ -I../Common/src/./ -I/app/intel/intel2018/impi/2018.3.222/intel64/include -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fPIC -Wno-unused-parameter -Wno-empty-body -Wno-format-security -Wno-deprecated-declarations -Wno-non-virtual-dtor -DNDEBUG -DHAVE_MPI -DHAVE_METIS -DHAVE_PARMETIS -MD -MQ 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -MF 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o.d' -o 'SU2_CFD/src/37e1b17@@SU2_CFD@exe/output_CHeatOutput.cpp.o' -c ../SU2_CFD/src/output/CHeatOutput.cpp; icpc: command line warning #10006: ignoring unknown option '-Wno-empty-body'; ../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/allocation_toolbox.hpp(79): **error: the global scope has no ""aligned_alloc""; ptr = ::aligned_alloc(alignment, size);**; ^; detected during:; instantiation of ""void container_helpers::AccessorImpl<Index_t, Scalar_t, Store, AlignSize, 0UL, 0UL>::m_allocate(size_t={unsigned long}, Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL]"" at line 411 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""size_t={unsigned long} C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::m_resize(Index_t, Index_t) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=StorageType::RowMajor, AlignSize=64UL, StaticRows=0UL, StaticCols=0UL]"" at line 445 of ""../SU2_CFD/src/output/../../../Common/include/geometry/../toolboxes/C2DContainer.hpp""; instantiation of ""C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols> &C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols>::operator=(const C2DContainer<Index_t, Scalar_t, Store, AlignSize, StaticRows, StaticCols> &) [with Index_t=unsigned long, Scalar_t=su2double={double}, Store=Storage",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620066614:1336,Access,AccessorImpl,1336,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620066614,1,['Access'],['AccessorImpl']
Security,"If you are interested, @vdweide spent considerable time between 2003 and 2008 writing a multiblock-structured turbo machinery code called SUmb, as part of the DoE ASCI program. SUmb, although written in Fortran90/95, had all of the interpolation capabilities that you need for turbo machinery computations when radial inlet / outflow profiles (Tt, Pt, flow angles, static pressure, etc.) are given as inputs on a radial grid whose spacing does not match that of the actual computational grid. You may consider creating some interpolation functions (with all the safeguards and error codes) in C++ based on the SUmb code (which was structured in a C++-like way) or at least take inspiration from that approach to identify interpolation utilities / libraries in C++ that could be used for the same purpose. Both @vdweide and I can provide you with access to the appropriate routines / functions in SUmb. On Sep 20, 2019, at 3:30 PM, Aman uz zaman Baig <notifications@github.com<mailto:notifications@github.com>> wrote:. @clarkpede<https://github.com/clarkpede> Thanks for your response! My work in focused on Turbomachinery and very frequently we need to have inlet profiles. I hope my work will give a neater, cleaner way of making this possible, though I also used python scripts in the past. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/791?email_source=notifications&email_token=AA5FFRDZYQ56RTPMG7RHC6DQKVFJ5A5CNFSM4IYRTZJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7IBREI#issuecomment-533731473>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA5FFRCUZWNCGUIGYDSADO3QKVFJ5ANCNFSM4IYRTZJA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/791#issuecomment-533740827:846,access,access,846,https://su2code.github.io,https://github.com/su2code/SU2/issues/791#issuecomment-533740827,1,['access'],['access']
Security,"If you look at the testing history, commit 4f5f3ed doesn't pass the regression tests, while commit 8551cac does. Only two tests are failing on 4f5f3ed: `discadj_topol_optim` and `discadj_fsi_airfoil`. The difference between the two commits is a simple change. I changed the `SU2_MPI::Error` routine to give a return status of `EXIT_FAILURE` instead of `0`. Since `0` is conventionally defined as a successful program exit, returning `EXIT_FAILURE` makes more sense than returning `0` when `SU2_MPI::Error` is called. So why did that change cause the regression tests to fail? My suspicion is that these two tests have been exiting with an error for some time, but these regressions were not picked up by Travis since SU2 kept on returning `0` (i.e. success). Changing the exit code of `SU2_MPI::Error` doesn't cause any errors, but it will expose errors that are (sometimes silently) occurring. @pcarruscag I think you added these tests. Any idea why they're failing?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/649#issuecomment-462951152:840,expose,expose,840,https://su2code.github.io,https://github.com/su2code/SU2/pull/649#issuecomment-462951152,2,['expose'],['expose']
Security,Impressive! Can you share some info on your implementation? What about the CFL values and the computational time?. One more thing: in another PR (if I recall correctly it was the one for the dimensionless limits to SST) you mentioned the VFE2 test-case. Do you have access to shareable CAD files and meshes?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2380723033:266,access,access,266,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2380723033,1,['access'],['access']
Security,"It is possible that while the master rank is writing the template file and throwing the error, another rank starts trying to access the profile data (which was not read) and then segfaults.; Try putting a barrier so that ranks don't escape while the template is being written.; ```; if (profile_file.fail()) {; MergeProfileMarkers();; WriteMarkerProfileTemplate();; // barrier here; } else {; ReadMarkerProfile();; }; ```",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1767#issuecomment-1264692237:125,access,access,125,https://su2code.github.io,https://github.com/su2code/SU2/issues/1767#issuecomment-1264692237,1,['access'],['access']
Security,"It turns out using convective BCs drastically changes the global flow pattern. Here you can see a comparison of pressures between a simulation with isothermal wall (top, 300 K) and convective BC (bottom, 300K, 20). Only the BCs in the conical part on the right side are different. Numerical settings and further BCs are identical.; https://github.com/su2code/SU2/assets/42602495/ba378660-ddd3-417c-a75e-f5ab54542697. Here you can see the difference in temperature.; https://github.com/su2code/SU2/assets/42602495/a6fcd09d-a065-46a5-b04a-60052fe35ed4. The difference means, that in one simulation (isothermal wall, top) I get strong, periodic oscillations, while in the other one (with convection) the oscillations are dampened out almost immediately. Is there a SU2 unit test case for the validation of the convective boundary condition I can run?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1872#issuecomment-1568222231:789,validat,validation,789,https://su2code.github.io,https://github.com/su2code/SU2/issues/1872#issuecomment-1568222231,1,['validat'],['validation']
Security,"It's not correct. You need to follow the pattern from CGeometry::ComputeWallDistance; First you collect all the normals that are local to the rank; Then you collect the normals across all ranks (using the NDFlatner), then you access this information by (ClosestRank, ClosestMarker, ClosestVertex); You cannot access the local information directly because ClosestMarker and ClosestVertex may refer to a different rank.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1901#issuecomment-1429997290:226,access,access,226,https://su2code.github.io,https://github.com/su2code/SU2/pull/1901#issuecomment-1429997290,2,['access'],['access']
Security,"It's probably a small fix, but better if @WallyMaier or @jtneedels look into this and fix it, since they are more capable of setting up the compressible test case for verification/validation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1639#issuecomment-1131558712:180,validat,validation,180,https://su2code.github.io,https://github.com/su2code/SU2/issues/1639#issuecomment-1131558712,1,['validat'],['validation']
Security,"Just one thought on this. I think it would be nice to run the validation suite for every release, that would force us to keep the configurations up to date, and provide an extra level of quality assurance. Most of the cases will be too expensive for travis but hopefully the computational burden can be spread over the community.; Cheers,; Pedro",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-423119881:62,validat,validation,62,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-423119881,1,['validat'],['validation']
Security,Maybe a little bit of non determinism because of atomic adjoint updates. @jblueh by chance did you run thread sanitizer after the codi 2 update?,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1980#issuecomment-1479902415:110,sanitiz,sanitizer,110,https://su2code.github.io,https://github.com/su2code/SU2/issues/1980#issuecomment-1479902415,1,['sanitiz'],['sanitizer']
Security,"Maybe we could define the NO_OPTINAL_CONST based on the MPI Version. https://stackoverflow.com/questions/17772906/why-does-mpi-send-accept-void-source. Gives a hint as to when the transition was made. On Tue, 2017-11-21 at 19:53 +0000, Tim Albring wrote:. @talbring commented on this pull request. ________________________________. In .travis.yml<https://github.com/su2code/SU2/pull/473#discussion_r152384146>:. > @@ -20,7 +20,7 @@ branches:. env:; global:; - CXXFLAGS=""-O3 -Wall -Wextra -Wno-unused-parameter -Wno-empty-body -Wno-format-security""; + CXXFLAGS=""-O3 -Wall -Wextra -Wno-unused-parameter -Wno-empty-body -Wno-format-security -DMEDI_NO_OPTIONAL_CONST"". The problem is that depending on the actual MPI implementation (so for example MPICH, openmpi etc.) send buffer arguments might be declared as const or not. Unfortunately, there is no (easy) way to get that information automatically. It might be even different between versions of openmpi (on travis it is v1.6.5 and its necessary, locally I have v3.x, and its not)... so for now it is trial and error whether this is necessary or not. Maybe I can find that information somewhere, then I will provide it in the wiki. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/pull/473#discussion_r152384146>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AMWwAeCRxzq9FO4-6pkSHTDnihbtByhvks5s4yoygaJpZM4QmNie>. --. Max Sagebaum Chair for Scientific Computing, TU Kaiserslautern, Bldg/Geb 34, Paul-Ehrlich-Strasse, 67663 Kaiserslautern, Germany Phone: +49 (0)631 205 5638 Fax: +49 (0)631 205 3056 Email: max.sagebaum@scicomp.uni-kl.de URL: www.scicomp.uni-kl.de",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/473#issuecomment-346273506:538,secur,security,538,https://su2code.github.io,https://github.com/su2code/SU2/pull/473#issuecomment-346273506,2,['secur'],['security']
Security,"My proposal the other day seems to have put you in quite the mood...; Do you also get a ton of ""-1 converted to unsigned short""? Or is that just me?; I'll see what I can do about the rest. > I do not have access to a Mac, so I didn't test if on OSX. I tried clang 6 and clang 10, and had to stupefy the code because of the former, should be ok on Mac",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1082#issuecomment-703062023:205,access,access,205,https://su2code.github.io,https://github.com/su2code/SU2/pull/1082#issuecomment-703062023,1,['access'],['access']
Security,"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2132#issuecomment-1967081745:425,secur,security,425,https://su2code.github.io,https://github.com/su2code/SU2/pull/2132#issuecomment-1967081745,2,['secur'],['security']
Security,"Ok, SIMD update, with #753, #959, and #966 we now have a unified storage type for the data we need in CNumerics. This means that we (I) only need to implement ""SIMD accessor methods"" (i.e. that return a SIMD type instead of a su2double) for one class (C2DContainer and co.). I think to do SIMD right we need a new way of going about CNumerics, these are my design requirements for ""CNewNumerics"":; - Thread-safe (consequently const-correct), a single object must be safe to use by multiple threads.; - Minimal indirection, the polymorphic overhead will be reduced to a single call (ComputeResidual), all auxiliary functions (like the ones that live in CNumerics) will be forcefully inlined, no useless copies of data (no more numerics->SetBlaBla).; - Compile time nDim/nVar, which will: a) avoid heap allocations; b) allow effective loop-unrolling (also during the writes to CSysMatrix).; - Allow low-overhead composition, e.g. have one CRoe for Euler and one CRoeVisc for NS to fuse convective and viscous residuals (without copy pasting code).; - A lot more readable, those cryptic V_i[iDim+1] need to go (somehow...). To achieve all this, the ""CNewNumerics"" will work as a template (obvs) decorator/visitor.; A visitor in the sense that the solver calls the numerics and gives it (read-only) access to all its data, the object pulls whatever it needs directly and there is no need for numerics->SetBlaBla.; A template decorator in the sense that the class can be augmented simply by inheriting from another, along the lines of `class CRoeVisc : public CRoe, public CVisc` (to allow fusing residual and Jacobian contributions).; All this needs to be done with templates for the ""minimal indirection"" requirement. Which means for each numerical method we will have 4 explicit template instantiations (Euler2D, Euler3D, (RA)NS2D, (RA)NS3D) but in the end these are still polymorphic objects that will be instantiated by some factory function (i.e. it will look clean, especially because I will not por",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-622941617:165,access,accessor,165,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-622941617,2,['access'],['accessor']
Security,"Ok, now `CPoint` stores information on the closest wall element location in vectors `ClosestWall_{Rank,Zone,Marker,Elem}`. `CPoint::SetWallRoughness` performs the lookup, inserting the location into the map (rank,zone,marker)->(roughness) that is provided to `CPoint::SetWallRoughness` as an argument of a new templated type `NdFlattener`. I wrote the new file `Common/include/ndflattener.hpp` some time ago and I think it is a nice generalization of the. > custom type with interface (rank, [zone,] marker). you're referring to. In short, it allows to. - serialize pointer-to-pointer-to... arrays into 1D arrays, as many as there are indices. The array corresponding to the last index stores the data and the others store indices.; - And to `MPI_Allgatherv` them, adding a new index for the rank. Using it detaches a bit from the original goal of this PR (which was to fix some illegal reads reported by valgrind, because the wrong array of roughnesses was accessed) but I think it's a useful structure. Probably I should also add some tests.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1286#issuecomment-841123844:958,access,accessed,958,https://su2code.github.io,https://github.com/su2code/SU2/pull/1286#issuecomment-841123844,1,['access'],['accessed']
Security,"On it, I've disabled the Jacobian contributions in my branch. Initial tests look primising, but I'll need a longer-running test to validate it on my case. Will update once the case has finished.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1872#issuecomment-1644093214:131,validat,validate,131,https://su2code.github.io,https://github.com/su2code/SU2/issues/1872#issuecomment-1644093214,1,['validat'],['validate']
Security,"Pardon the intrusion good sir, I noticed the truncated residual and co. could also be an issue for the NEMO folks.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1194#issuecomment-777383469:11,intrusion,intrusion,11,https://su2code.github.io,https://github.com/su2code/SU2/pull/1194#issuecomment-777383469,1,['intrusion'],['intrusion']
Security,"R [rsi+rdx]; vfmadd213pd ymm0, ymm15, YMMWORD PTR [rbp-336]; vmovapd YMMWORD PTR [rbp-336], ymm0; cmp rbx, rax; jne .L13; ```; the meat of which is `vgatherqpd` (`getVec`) and `vfmadd213pd` fused-multiply-add to update `phiL`, everything else is integer arithmetic which in the scalar version gets factored out of the inner loop so that the resulting assembly looks much simpler:; ```asm; .L15:; vmovsd xmm5, QWORD PTR [rsp-40+rax*8]; vfmadd231sd xmm0, xmm5, QWORD PTR [r15+rax*8]; add rax, 1; cmp rcx, rax; jne .L15; ```; I think the reason for this is that there are plenty of integer registers (64bit) to keep memory locations (rsp, rax, r15 in the above) but there are only 16 ymm registers (256bit). In any case we need to give the compiler a hand, the calculation we need is; `index = iPoint*nVar*nDim + iVar*nDim + iDim` where iPoint is an array of ints; Note that as we loop by nDim and then by nVar all we need is to compute `iPoint*nVar*nDim` outside the loops and then add 1 on each access (which is more or less what the compiler does for the scalar code), in other words we need an **iterator**, something silly like; ```c++; template<size_t VecLen, size_t Incr = VecLen>; class GatherIterator; {; private:; using IntVec = Array<size_t,VecLen>;; using FltVec = Array<double,VecLen>;. IntVec offsets_;; const double* data_;; public:; GatherIterator() = delete;; GatherIterator(const double* data, IntVec offsets) : offsets_(offsets), data_(data) {}. STRONGINLINE FltVec operator()() const { return FltVec(data_,offsets_); }. STRONGINLINE FltVec operator++(int) {; auto ret = (*this)(); offsets_ += Incr; return ret;; }; };; ```; so silly in fact, it only moves forward, we use it in our loop like so; ```c++; ...; auto gradI = grad.getColIterator(iPoint);; auto gradJ = grad.getColIterator(jPoint);. for(size_t iVar=0; iVar<nVar; ++iVar); {; FltVec phiL = 0.0;; FltVec phiR = 0.0;. for(size_t iDim=0; iDim<nDim; ++iDim); {; phiL += (gradI++)*d_ij[iDim];; phiR -= (gradJ++)*d_ij[iDim];; };",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:10879,access,access,10879,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['access'],['access']
Security,"Recently I was looking around the 3rd Annual SU2 conference web page(#1683), and I came across a presentation that seemed to be related to this PR. . [SU2conference](https://su2foundation.org/su2conference2022/) : Day2 ; The title: Implementation of Œ≥-Re Œ∏ transition model within SU2: model validation and the presenter is Andrea Rausa. . I'd like to see the presentation above the presentation. The 2nd SU2 conference presentation video was uploaded. So, Is the 3rd SU2 conference video going to be uploaded?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1751#issuecomment-1262591493:292,validat,validation,292,https://su2code.github.io,https://github.com/su2code/SU2/pull/1751#issuecomment-1262591493,1,['validat'],['validation']
Security,"Right... I've finally fix this. The manual/offline build with meson will work in the next version.; For completeness, there is another way to work ""offline"", on a machine with internet access clone the SU2 repo using `git clone`, then run meson which will initialize the submodules, finally copy **everything** to the offline machine.; If this machine **has git** installed, it will detect that the submodules are present.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1335#issuecomment-1000842111:185,access,access,185,https://su2code.github.io,https://github.com/su2code/SU2/issues/1335#issuecomment-1000842111,1,['access'],['access']
Security,"Seems correct to me,; Thanks guys,; Francisco. Ps.- note that the bottom line of the original change was to add extra info at the end of the solution file like the angle of attack after a fix cl simulation or current solver iter. Sent from my iPhone. > On Dec 13, 2016, at 9:40 AM, Antonio Rubino <notifications@github.com> wrote:; > ; > This is a temporary fix for #341 for the problems in the develop and SU2_SOL related to the unsteady post-processing. Thanks to @LaSerpe suggestion for the bug fix!; > ; > Please, have a look if this solves all the issues and add anything necessary to this PR, so that we could merge it in ASAP.; > ; > Antonio; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/su2code/SU2/pull/344; > ; > Commit Summary; > ; > Fix bug for unsteady SU2_SOL postprocessing; > Small change; > Small change in travis cfg; > File Changes; > ; > M .travis.yml (4); > M SU2_CFD/src/solver_structure.cpp (52); > Patch Links:; > ; > https://github.com/su2code/SU2/pull/344.patch; > https://github.com/su2code/SU2/pull/344.diff; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/344#issuecomment-266816485:173,attack,attack,173,https://su2code.github.io,https://github.com/su2code/SU2/pull/344#issuecomment-266816485,1,['attack'],['attack']
Security,Seems that 'shell=True' is a security risk. Any way to easily fix that by using different options with the system call? We could do a search and replace for the others already in the Python framework.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-533370188:29,secur,security,29,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-533370188,1,['secur'],['security']
Security,"Should we use the branching methodology that we use for the SU2 repository? In the sense that we create a develop branch, create branches for any cases we want to add, submit pull requests that can be reviewed by the rest of the community etc. . I like the idea from @bigfooted, of having some regression testing that can run the simulation for a couple of iterations and check residuals (identical to what we do for the TestCases). This might be redundant to the actual regression tests that are done in SU2, but would be an easy first check on weather a particular validation case needs to be run again. Ideally, this would be run before any major version releases, as we discussed earlier. . I can also start working on creating a section on the website for the results of the validation cases. I'll eventually upload a sample validation case with corresponding results that people can model their efforts on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426808018:567,validat,validation,567,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426808018,3,['validat'],['validation']
Security,"So now that the Fluid-only version is reporting correct gradients for prescribed massflow due to the introduced adjoint equation for pressure drop -> the next problem seems to arrive: As of now I did not manage to get validated gradients for a CHT setup. I wonder whether sth additional is necessary there. But as the changes were introduced in the CDiscAdjSolver and CDiscFluidIteration ,always with using proper conditional to assure that the respective code is only excecuted when really needed, I am not sure if the mistake is not somewhere else. Why cant shit just work :disappointed: . btw: for prescribed pressure drop I get nice validated gradients for avgTemp, Drag, massflow",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1031698826:218,validat,validated,218,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1031698826,2,['validat'],['validated']
Security,"Some updates:. - Python wrapper functionalities have been moved into a dedicated python_wrapper_structure.cpp file for code clarity.; - The data structures for the customized values at boundaries have been removed from the CPoint class. Data structures are stored in the geometry class, they are initialized only when customization is set ON and only for involved vertices. There was no restriction to put the data structures in the solver class, except that when multi-grids needs to be updated (required for non uniform field), the geometry class needed an access to the solver class, which is not the case since everything that is in the Common structure seems to be independent of what it is in SU2_CFD, and I wanted to keep that. Those data structures should not be seen as true PDE-related variables, they should be seen as a generic support for boundary customization.; - CHT related labels have been removed and replaced by ""Python customizable"" in order to not introduce any confusion with the native CHT development. The basic purpose of this work is to enable existing boudary conditions to be customized from Python and not to develop a CHT interface. CHT is just an example of application (since only the HEAT_FLUX and ISOTHERMAL walls are customizable for now).; - Based on the previous point, no new specific boundary condition was introduced. For now, I keep the idea to just modify (one single line) the existing boundary conditions to take into account the customization. New dedicated boundary conditions (for example BC_HEAT_FLUX_CUSTOM or BC_ISOTHERMAL_CUSTOM) would be a 99% copy of the originals... Dedicated boundary conditions for native CHT development can still be defined independently (no condlfict). Cheers,. David",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/488#issuecomment-355928565:559,access,access,559,https://su2code.github.io,https://github.com/su2code/SU2/pull/488#issuecomment-355928565,1,['access'],['access']
Security,"Sorry for the late response. I had to try out a few things. @GomerOfDoom, this is the output of `pacman -Qi blas lapack openblas`; I think it is relevant to this issue that i mention, I had installed openblas which replaced blas while trying to meet the pre-install requirements.; ```; slimshady@arch-linux-hp-probook-g3-450: UserPackages$ pacman -Qi blas lapack openblas; Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. Name : lapack; Version : 3.9.0-2; Description : Linear Algebra PACKage; Architecture : x86_64; URL : https://www.netlib.org/lapack; Licenses : custom; Groups : None; Provides : None; Depends On : blas; Optional Deps : None; Required By : arpack qrupdate suitesparse; Optional For : None; Conflicts With : None; Replaces : None; Installed Size : 7.03 MiB; Packager : Antonio Rojas <arojas@archlinux.org>; Build Date : Sun 24 Nov 2019 04:13:58 PM IST; Install Date : Sat 22 Feb 2020 01:05:19 PM IST; Install Reason : Installed as a dependency for another package; Install Script : No; Validated By : Signature. Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631053271:948,Validat,Validated,948,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631053271,1,['Validat'],['Validated']
Security,"Sorry took a while to get around to it but here are the results from the validation cases that were requested. Turns out, this change is minimal in its effect to the overall simulation (at least for the two cases I have run). ## Flatplate; For the flatplate case, there was no difference in the C_D calculation so the lines mesh convergence were on top of each other. But while I was doing that, I was playing around with the solver parameters and there was an interesting difference between simulations run with `WEIGHTED_LEAST_SQUARES` and those run with `GREEN_GAUSS`. I have included them here:. ![force_convergence_flatplate_SA](https://user-images.githubusercontent.com/30271435/76541252-83320780-6440-11ea-9678-bd3a10e47436.png); ![force_convergence_flatplate_SST](https://user-images.githubusercontent.com/30271435/76541258-84633480-6440-11ea-9624-93bde157fbb8.png). This shows interesting parallels between `WEIGHTED_LEAST_SQUARES` results and CFL3D results vs `GREEN_GAUSS` and FUN3D. Also interesting the SU2 with both gradient methods converges to a slightly different C_f value than CFL3D and FUN3D. Not really connected with this PR but interesting results that can be uploaded to the VandV section of the website. . ## RAE 2822. Luckily I have been working on the RAE2822 as a validation case so I already had a family of grids that worked for this case. Again seems like the change didn't make much of a difference. dev_SST refers to the current SST implementation in develop. SST refers to the results from this PR. ![force_convergence_rae2822_SST](https://user-images.githubusercontent.com/30271435/76541879-76fa7a00-6441-11ea-911d-29ccffc81677.png). Consequently, the C_P plots are also identical; ![cp_rae2822_SST](https://user-images.githubusercontent.com/30271435/76543047-28e67600-6443-11ea-8a8e-6ca8ff62098d.png)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/905#issuecomment-598280668:73,validat,validation,73,https://su2code.github.io,https://github.com/su2code/SU2/pull/905#issuecomment-598280668,2,['validat'],['validation']
Security,"TRONGINLINE void SparseMatrix::updateBlocks(size_t edge,; size_t row, size_t col, const double* blk_i, const double* blk_j); {; size_t bii = diagMap[row], bij = edgeMap[edge].first,; bjj = diagMap[col], bji = edgeMap[edge].second;. #pragma omp simd; for(size_t k=0; k<blkSz; ++k); {; coeffs[bii+k] += blk_i[k]; coeffs[bij+k] = +blk_j[k];; coeffs[bji+k] = -blk_i[k]; coeffs[bjj+k] -= blk_j[k];; }; }; ```; This is **47% faster**, which for a memory bound task is massive!; Yes, this does increase the memory footprint a bit (makes CSysMatrix 4% larger for a 3D problem) but I can get that back by sharing sparsity patterns and maps across turbulence and bulk flow (I think @talbring was already working on this in the template linear solver branch he had started). We could also parallelize the matrix updates without colouring by setting only the off-diagonal coefficients and then setting the diagonal entries to the column sum.; It turns out that this is worse (by about 10%), maybe if the matrix were symmetric (row sum) but a column sum accesses blocks very far apart. Also we want to interleave compute and load/stores as much as possible to allow the CPU pipelining magic to mask the latency of the latter (even if it looks like you can only write the block after it is computed, CPU's have all kinds of buffers that allow the next loop iteration to begin while data is in flight). **Therefore colouring is the way to go.**. _Note: With vectorized numerics we insert blocks for 4 or 8 edges into the matrix at a time, the data for those inserts will be in a slightly weird format, which will make `SparseMatrix::updateBlocks` a bit harder on the eye, more on that later._. ## MUSCL Reconstruction; The MUSCL reconstruction, characteristic of upwind schemes, is the simplest building block to show the (negative) implications of storing the data as structures of arrays (SoA) on the performance of some operations.; Here is the most basic numerics you can think of, reconstruct and average (the d",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:4950,access,accesses,4950,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['access'],['accesses']
Security,"Thank you @TobiKattmann for your feedback. The idea behind this new regression test config file is as follows:; We should have a test case that triggers the negative part of the SA model. Depending on the flow conditions, geometry and CFD parameters it might be triggered or not. With the previous config file, it was not. ; I think there is already a regression test in SU2 that triggers the negative SA, the `turb_oneram6_nk`. However, I decided to stick to rae2822 airfoil as it is a simpler (faster) case. In order to force the negative part of the SA for the rae2822 in a reasonable amount of iterations for a regression test, I increased the angle of attack. I have removed the multigrid as it might not be stable, but I have not tested though. Anyway, with the current configuration, e.g., convective scheme, CFL number, etc, the solution is not stable and diverges after some iterations, around 15. In that sense, I reduced the number of iterations from 20 to 10. In my opinion, a diverging regression test is not a problem at all as it might not be used as a tutorial, only to verify the integrity of the commit. ""The solution should always diverge to the same results"". If the regression test should converge, let me know and I will update the config file :)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1559#issuecomment-1067926363:657,attack,attack,657,https://su2code.github.io,https://github.com/su2code/SU2/pull/1559#issuecomment-1067926363,4,"['attack', 'integrity']","['attack', 'integrity']"
Security,"Thank you Max, can you also add the right hash to meson_scripts/init.py and to preconfigure.py around line 290.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1210#issuecomment-785777231:42,hash,hash,42,https://su2code.github.io,https://github.com/su2code/SU2/pull/1210#issuecomment-785777231,1,['hash'],['hash']
Security,"Thank you very much, Pedro!; Kind regards. On Tue, Oct 24, 2023 at 9:09‚ÄØAM Pedro Gomes ***@***.***>; wrote:. > Yes that makes sense, we are probably missing some validation on markers; > not appearing on incompatible boundary conditions.; >; > ‚Äî; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/2109#issuecomment-1777083598>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AHGXZUQ652XHGRI7S7C7D7DYA6VYBAVCNFSM6AAAAAA3QKLVDWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONZXGA4DGNJZHA>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2109#issuecomment-1779772698:162,validat,validation,162,https://su2code.github.io,https://github.com/su2code/SU2/pull/2109#issuecomment-1779772698,1,['validat'],['validation']
Security,"Thanks @pcarruscag for making this PR a lot better. @bigfooted @danielmayer @mheimgartner ; To layout future steps as discussed after this merge: ; 1. Merge these changes into feature_flamelet (and then feature_multicomp). Therefore the `CScalar*` things that are currently present in these branches will be renamed to CLegacyScalar* to not overwrite files. This has the advantage that those branches are kept up-to-date with develop.; 2. Implement a rudimentary (passive) CSpeciesSolver (specifically does not contain multicomponent mixing from #1332 ) and merge that. Finding a good (validation) Testcase would be great here.; 3. Extend the CSpeciesSolver by #1332 mixing models. Either by cutting away all the flamelet specific parts or by porting the additions to a new PR.; 4. Make feature_flamelet switch to the new structure. This is an in-place change as both implementations are then present but just one will be kept. This will shrink the PR size of #1223 by quite a bit . Additionally the heat and radiation solver should be ported into this new structure, but that is independent work.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1330#issuecomment-925066101:586,validat,validation,586,https://su2code.github.io,https://github.com/su2code/SU2/pull/1330#issuecomment-925066101,1,['validat'],['validation']
Security,"Thanks Ruben! Sorry, but I did not even know there was a forum (and also with these topics) by the Dev-society. I would suggest better a meeting and maybe posting on github projects the next steps so that all developers can get information about it. I would keep the conversation on github projects (if possible) so that is accessible to everybody. I'll shortly contact you in private to organize a meeting thanks!",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/528#issuecomment-392065213:324,access,accessible,324,https://su2code.github.io,https://github.com/su2code/SU2/pull/528#issuecomment-392065213,1,['access'],['accessible']
Security,"Thanks for checking, I'll try to get access to a machine with CentOS 8.; But that error seems to come from somewhere deep in the MPI... so not sure how much we can do about it. In the meantime you can always try different MPI version maybe 3.1.4?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-623655467:37,access,access,37,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-623655467,1,['access'],['access']
Security,"Thanks for filing this. Unfortunately, we have not completely implemented the ALE formulation for the incompressible solver to handle dynamic meshes. If this is something you would be interested in helping develop further, please let us know. That being said, we should have proper guards (or error messages) that avoid this kind of memory access error in the incompressible case. We'll look into this right away.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/247#issuecomment-195838721:340,access,access,340,https://su2code.github.io,https://github.com/su2code/SU2/issues/247#issuecomment-195838721,1,['access'],['access']
Security,"Thanks for getting everything cleaned up, @ScottImlay. I really would like to get this merged soon, as I think it is a great contribution. My main concern remains the size of the files that are now included due to the boost library. The externals/tecio directory has increased in size from 3.6 MB to 172 MB, and 166 MB of that is boost. Perhaps we can consider downloading this code on-the-fly during the configure process, or have a script access it as a submodule similar to CoDiPack via preconfigure.py. Open to ideas here.. any thoughts?. Lastly, if we are shipping boost source, we should add their license to the distribution by including this file in externals/tecio/boost/ : https://www.boost.org/LICENSE_1_0.txt",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/558#issuecomment-426809515:441,access,access,441,https://su2code.github.io,https://github.com/su2code/SU2/pull/558#issuecomment-426809515,1,['access'],['access']
Security,"Thanks for sharing the progress on the container in #753 . You may already be going in this direction, but another idea to consider is making CVariable a pure data structure (basically a c-style struct with your new containers) with no methods. This could be interesting for 2 reasons: 1) we remove a level of indirection without the Getters/Setters and operate directly on the data, and 2) this breaks the current cycle we are stuck in where we need to add a new virtual function to the base class every time one of the child CVariable classes adds new data that it must access with Get()/Set(). . Adding new data to the child classes for each solver becomes trivial if it is just a data structure. A pure data structure and an object with polymorphism will always be at odds - we should choose the best for each situation.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/716#issuecomment-518900363:572,access,access,572,https://su2code.github.io,https://github.com/su2code/SU2/issues/716#issuecomment-518900363,1,['access'],['access']
Security,"Thanks for spending the time on this, @petebachant. I just fixed a couple of bugs in the python scripts in another PR, but I don't think they will affect this too much. Btw, do you have access to a sizable distributed machine with Python 3+ installed for testing? It would be great to know if this is working in a production environment, while keeping backward compatibility with Python 2+, since it can sometimes be hard to get new Python installations on clusters.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/424#issuecomment-321731944:186,access,access,186,https://su2code.github.io,https://github.com/su2code/SU2/pull/424#issuecomment-321731944,1,['access'],['access']
Security,"Thanks for that @dkavolis, I will put all that in a memory allocation toolbox as it may be useful somewhere else. Where in boost did you get it from so I can reference it?; We will need a volunteer to test it on Mac and Win32, I do not have access to any of those platforms. Is the aligned_alloc from stdlib OK for Win64?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/813#issuecomment-554393825:241,access,access,241,https://su2code.github.io,https://github.com/su2code/SU2/pull/813#issuecomment-554393825,1,['access'],['access']
Security,"Thanks for the contribution! This is a much needed change. I wanted to perform a refactoring like this myself. The viscous (or turbulent) stress calculation is repeated many times in the code. Changing that calculation (e.g. adding QCR or UQ) currently requires changing many files. In my humble opinion, the stress tensor calculation should have its own class at the lowest level of the code, like the gas model (e.g. ideal gas) or the viscosity calculation (e.g. Sutherland's law). `CNumerics` classes need access to it, and `CNumerics` is meant to have minimal dependencies. But the stress isn't really ""numerics."" Its part of the underlying equations we're trying to solve. Changing the stress tensor isn't the same flavor as changing from JST to Roe. Because the stress is part of the underlying equations, it is sometimes needed in the `CSolver` classes. Previously, I've seen the stress tensor used in `CNSSolver` boundary conditions and axisymmetric source terms. That may still be true in the current version of the code. The best way to make sure that both `CSolver` and `CNumerics` have access to it is to make it an independent class. Unless, of course, we want to be manually setting the six tensor elements in `CNumerics`, like we do with primitive variables. I don't like that alternative.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1127#issuecomment-742531842:509,access,access,509,https://su2code.github.io,https://github.com/su2code/SU2/pull/1127#issuecomment-742531842,2,['access'],['access']
Security,"Thanks for the fix! One more small request... can you please push this to our new 'develop' branch instead? We are switching up our branching strategy to make for a better experience, and will be using the develop branch for staging and testing before pushing code releases to the master. Also, Sean had mentioned that you have done some nice isothermal validations. If you are interested, we would be happy to make a regression test based on one of your test cases (to ensure that these features remain well-tested in SU2). If you provide a config/mesh, we can make the regression test for you very quickly.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/71#issuecomment-56557046:354,validat,validations,354,https://su2code.github.io,https://github.com/su2code/SU2/pull/71#issuecomment-56557046,1,['validat'],['validations']
Security,"The PR looks good but more to @talbring 's point, do we want to conserve a vanilla SST implementation for validation purposes? . I thought about this when I was trying to incorporate some improvements to the SST model that were published in a [2003 paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.460.2814&rep=rep1&type=pdf) by Menter et al. These are small changes in the coefficients but I wasn't sure if I should make the changes to the base SST model or make a new one.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/765#issuecomment-523979583:106,validat,validation,106,https://su2code.github.io,https://github.com/su2code/SU2/pull/765#issuecomment-523979583,1,['validat'],['validation']
Security,The address sanitizer records are clean with this fix :+1:,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2034724087:12,sanitiz,sanitizer,12,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2034724087,1,['sanitiz'],['sanitizer']
Security,"The address sanitizer reports a heap buffer overflow for [this](https://github.com/su2code/SU2/blob/e33871a2c22dd1eefb3a023ea28369b1ca249b3f/SU2_CFD/src/interfaces/CInterface.cpp#L314) piece of code. I presume the issue is the access `SpanValuesDonor[kSpan + 1]` in the case that `kSpan == nSpanDonor - 1` so that `kSpan` references the last array entry already. Below is a stripped-down version of the corresponding code.; ```; ...; for (jSpan = 0; jSpan < nSpanDonor; jSpan++) {; ...; if (...); kSpan = jSpan;; ...; }; ... SpanValuesDonor[kSpan + 1] ...; ```. Is someone familiar with the `CInterface` code and could make recommendations for a fix?. Below is the address sanitizer report, see also [here](https://github.com/su2code/SU2/actions/runs/8536216515/job/23386086770?pr=2246#step:7:2062). ```; ==2308==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60f0008c96a0 at pc 0x558b6435ae51 bp 0x7ffc1cebf680 sp 0x7ffc1cebf670; READ of size 8 at 0x60f0008c96a0 thread T0; #0 0x558b6435ae50 in CInterface::PreprocessAverage(CGeometry*, CGeometry*, CConfig const*, CConfig const*, unsigned short) ../SU2_CFD/src/interfaces/CInterface.cpp:314; #1 0x558b6373d23a in CDriver::PreprocessTurbomachinery(CConfig**, CGeometry****, CSolver*****, CInterface***, bool) ../SU2_CFD/src/drivers/CDriver.cpp:2725; #2 0x558b63770d76 in CDriver::CDriver(char*, unsigned short, int, bool) ../SU2_CFD/src/drivers/CDriver.cpp:250; #3 0x558b637f54c2 in CMultizoneDriver::CMultizoneDriver(char*, unsigned short, int) ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:35; #4 0x558b63615b53 in main ../SU2_CFD/src/SU2_CFD.cpp:135; #5 0x7f0d8c503082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082); #6 0x558b6367005d in _start (/github/workspace/install/bin/SU2_CFD+0x63405d). 0x60f0008c96a0 is located 0 bytes to the right of 176-byte region [0x60f0008c95f0,0x60f0008c96a0); allocated by thread T0 here:; #0 0x7f0d8ed00787 in operator new[](unsigned long) ../../../../src/libsanitizer/asan/asan_new_del",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2034404720:12,sanitiz,sanitizer,12,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2034404720,3,"['access', 'sanitiz']","['access', 'sanitizer']"
Security,"The changes do fix #2241, thread sanitizer builds and tests execute without crashing. The workaround is only needed until a corresponding fix in the github runner is deployed, which will take around a week (https://github.com/actions/runner-images/issues/9491#issuecomment-1999433974). We could merge this now and roll it back later. @pcarruscag",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2242#issuecomment-1999760885:33,sanitiz,sanitizer,33,https://su2code.github.io,https://github.com/su2code/SU2/pull/2242#issuecomment-1999760885,1,['sanitiz'],['sanitizer']
Security,"The folks at Travis CI have kindly doubled both our ""hard"" timeout and ""silence"" timeout limits up to 140 min. and 20 min., respectively. We should be safely within limits for some time to come. . That being said, rather than relying on the increases, I would really encourage that we find some better approaches for reducing total test time, as we will continue to add more cases. It is not good for our pace of development that we have to wait over an hour to get the results of the tests. I think that a test time of approx. 10-20 min. would be more ideal so that we can iterate much more quickly. I suspect that attacking our compile time would be most helpful. Any ideas and discussion most welcome.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/524#issuecomment-382152114:616,attack,attacking,616,https://su2code.github.io,https://github.com/su2code/SU2/issues/524#issuecomment-382152114,1,['attack'],['attacking']
Security,"The motivation of having it as the default was to make the code as user-friendly as possible (fewer knobs exposed in the config), but options are good of course. I would propose then that we add an option for the reconstruction gradient, something like:; ```; NUM_METHOD_GRAD_RECON= LEAST_SQUARES; ```; to let users decide if they want a separate option for the reconstruction gradients. If it does not appear, then the default is to use the same method as defined by NUM_METHOD_GRAD without a second gradient computation (basically what we have now). The nice thing about that is we can even try out other combos such as WLS+GG for the two different gradients. I will throw an error if users try to use LSQ for the viscous/source gradients, to avoid accuracy issues. What do you think?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/790#issuecomment-533259202:106,expose,exposed,106,https://su2code.github.io,https://github.com/su2code/SU2/pull/790#issuecomment-533259202,2,['expose'],['exposed']
Security,The new repo is live here: https://github.com/su2code/VandV (GitHub didn't like '&' in the title). All members of the developer team on GitHub should have read/write/push access.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426799490:171,access,access,171,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426799490,1,['access'],['access']
Security,The primal elements are stored in the CGeometry class in the array CPrimalGrid*\* elem (geometry_structure.hpp:114) which is of length nElem (which can be accessed with GetnElem()). For future questions: please use the forum at http://www.cfd-online.com/Forums/su2/ otherwise we are going to have a lot of open issues here on github ...,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/309#issuecomment-248893613:155,access,accessed,155,https://su2code.github.io,https://github.com/su2code/SU2/issues/309#issuecomment-248893613,1,['access'],['accessed']
Security,"The solver with the closest functionality to what you are trying to do is the elasticity solver, it may be worth having a look there. But in a nutshell there the variables we want to differentiate are held by (members of) the discrete adjoint solver, they are reset before being registered as inputs to clear the derivative information, and it is important that they are left alone during the recording phase.; You will see that the adjoint iteration class for this solver then needs to update the numerics classes (in SetDependencies), at least for the source term the SA coefficients are set in the constructor of the corresponding numerics so maybe this step is missing?; The key point is that whenever a coefficient is used you need to be able to trace its value back to the original variable you registered.; Also the derivatives should be extracted in the same order they were registered, and you cannot access them multiple times by calling ""GetDerivative"" on them repeatedly (not 100% sure if this restriction still exists after the update of CoDi).; If none of this makes sense point me to branch you are working on.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/679#issuecomment-491910935:910,access,access,910,https://su2code.github.io,https://github.com/su2code/SU2/issues/679#issuecomment-491910935,2,['access'],['access']
Security,"The test case seems to work, I only see small differences in the last digit w.r.t the results I computed on my workstation, which is ok from my side. How can I access the results computed by GitHub?",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2024#issuecomment-1539739715:160,access,access,160,https://su2code.github.io,https://github.com/su2code/SU2/pull/2024#issuecomment-1539739715,1,['access'],['access']
Security,"There are two causes for the failed test: your branch is currently failing the compute_polar test case, and an unrelated issue involving time-outs that is effected tests for everyone. . You can click the 'details' link to the right of the failed test in section just below the comments, or click on the red x next to any failed test. This takes you to the travis page, where through following through the links you can find which tests failed, and access the test logs. . The tests with exclamation points on the travis page are the ones that are failing due to other issues, and for now I would suggest focusing on the compute_polar test case.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/520#issuecomment-376704607:448,access,access,448,https://su2code.github.io,https://github.com/su2code/SU2/pull/520#issuecomment-376704607,1,['access'],['access']
Security,"There might be a problem here: If I understood correctly once you login to Gritter using your GitHub account, it opens all the git access that you have to all the community that is in the Gritter group.; I have, and probably other people also do, access to GitHub locations (other than SU2) which are not open for the public (like Github of commercial companies). In the Gritter login page, I could see all these locations but could not remove those that are not SU2 related.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/645#issuecomment-515093449:131,access,access,131,https://su2code.github.io,https://github.com/su2code/SU2/issues/645#issuecomment-515093449,2,['access'],['access']
Security,"There's no using the develop branch. Develop software don't make their way in our module systems, we only install releases, with tarbals of the sources and checksums of those tarballs, as we aim for reproducibility. . We have a large number of build tools, including pkgconfig, cmake, meson, ninja, bazel, autoconf, etc. We use EasyBuild to wrap things up and generate modules.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2086#issuecomment-1645653439:156,checksum,checksums,156,https://su2code.github.io,https://github.com/su2code/SU2/issues/2086#issuecomment-1645653439,1,['checksum'],['checksums']
Security,"Things done:; - Create CScalarSolver/Variable classes that now sits between CSolver/Variable and CTurbSolver/Variable; - Move variables/methods to CScalar-land for which one can reasonably assume that they will be useful for future children of the CScalar-family; - That implies, that the rest remains in Turbulence land mostly(!) untouched; - Mostly, because I renamed (Set)TurbVar[-,Gradient] variables/methods in CNumerics which result in changing that all over turb_diff/conv/sources. They hear by the name (Set)ScalarVar* now; And that's it for now. I added some personal comments in the code here and there that will be removed. Next up (coming to a PR near you soon):; - add CSpeciesSolver/Variable with appropriate Upwind/Viscous_Residual and Boundary conditions; - The first step will be a truly Passive Species transport but then ...; - ...introduce the mixture properties of @mheimgartner from #1332 i.e. make the transport equation 'active'. This comes along with some more necessary changes to CConfig. I am not sure yet what is the best order of tackling that. We'll see...; - @mheimgartner work concentrates on 1 additional transport equation. The idea is of course to make it as general as possible but it might be wiser to just go with 1 for the beginning.; - For that setup (2 components mixing) we'll want to get validated gradients going; - The more general way will be needed to merge with @danielmayer #1223 but that would be the step after the above mentioned. @bigfooted that i what I currently have in mind but feel free to chime in here.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1330#issuecomment-905608752:1332,validat,validated,1332,https://su2code.github.io,https://github.com/su2code/SU2/pull/1330#issuecomment-905608752,1,['validat'],['validated']
Security,"This PR is ready for merging. The Codacy failure is for a os.system() call that introduces a security vulnerability that I am not sure how to fix. There are a lot of os.system() calls in the code already, but since I introduced one more, it is failing. . Any help in fixing the issue would be fantastic. If this is not a big deal, I can merge the PR",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-532759515:93,secur,security,93,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-532759515,1,['secur'],['security']
Security,"This bug pops up because the periodic mesh reconstruction (in `SU2_MSH`) doesn't always create a valid mesh in 3D. Some points disappear, and some points are duplicated. When `SU2_CFD` (specifically, `CPhysicalGeometry`) tries to get the number of points in the domain, it calculates the wrong number because some of those points are duplicated. That leads to segfaults, because the output routine thinks the extra (missing) points belong to another processor. I've got a little toy problem with a simple periodic cube. It's easy to see on the simple 4x4x4 (+ periodic) problem that 3 nodes disappear, and 3 nodes are duplicated. I've never observed this problem in any of the 2D test cases I ran. As to why `SU2_MSH` is missing some points and duplicating others, I'm not sure. I tried running Valgrind to check for uninitialized variables or illegal memory access, but nothing there. I'll have to look more into the problem. The `su2_periodic.f90` script mentioned in #416 seems to be a workaround. I don't run into any problems when I use that script.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/431#issuecomment-337056131:859,access,access,859,https://su2code.github.io,https://github.com/su2code/SU2/issues/431#issuecomment-337056131,2,['access'],['access']
Security,"This looks great - I notice that there's a couple of things in the doxygen file in su2code/Documentation/Doxygen/Doxyfile that might be helpful here (setting project name, there may be other things). I wonder if these two files could be merged? Perhaps we should remove su2code/Documentation/Doxygen?. For potential volunteers: all the warnings I see right now seem to come from inputs/outputs not included in the comments description - correcting this should be relatively accessible to folks just getting started, and I'd also encourage anyone who has introduced a new function recently to check and see if the comment block above the function declaration in the .hpp file is filled in. ; Other doxygen info: I recall that the last time I worked with doxygen, some warnings went away once graphviz was installed on my local machine. Sorry that I can't commit 100% to volunteering for this right now; but I might chip away at things once in a while.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/373#issuecomment-278573631:474,access,accessible,474,https://su2code.github.io,https://github.com/su2code/SU2/pull/373#issuecomment-278573631,1,['access'],['accessible']
Security,"To answer the first question, yes, the distance calculations are done based the entire surface of a boundary element. This is done using routines written by @vdweide for the higher order solver. In short, the distance to the wall of a node in the mesh is found by finding the projection of the said node on a boundary element, and the distance is calculated using that information. . I validated this on a host of grids, some of which had sheared elements near the wall, and this procedure seemed to give the right predictions regardless of the quality of the mesh. . Yes, from what I understand, by the end of the ComputeWall_Distance function all the memory, weather it is the vectors or the ADT itself, should be deallocated. I based this code on what Edwin was doing so he might be able to substantiate on why he deallocates the vectors immediately.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/605#issuecomment-435105466:386,validat,validated,386,https://su2code.github.io,https://github.com/su2code/SU2/pull/605#issuecomment-435105466,1,['validat'],['validated']
Security,"To get this PR going, I have reverted the proposed fix c97610b02bc1281eb766847e7ef5ed7ac451dfb9 for now and excluded the Aachen turbine test case from address sanitizer testing. I'll create an issue about this.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2246#issuecomment-2100356516:159,sanitiz,sanitizer,159,https://su2code.github.io,https://github.com/su2code/SU2/pull/2246#issuecomment-2100356516,1,['sanitiz'],['sanitizer']
Security,"Todo list:; - [x] Make sure the code can handle arbitrary many species equtions. Especially the output has to be adapted. Note the MAXNVAR of the ScalarSolver has to adapted to that need as well. Make a suitable Testcase for that.; - [x] Implement weak inlet and outlet BC. The weak approach is used in the turb and mean flow and is most likely conservative opposed to the strong one. Here a simple switch will be put in place to compare both versions.; - [x] Consolidate nVar, nSpecies, ... variable to only use 1 consistently (The choice was `nSpecies` which was already introduced for NEMO and it just makes sense to use the same container); - [x] Make the numerous reviewers happy; - [x] Check inlet profiles for Species solver (have a testcase for that) See #1427 ; - [x] Create Objective functions of Surface avg quantities (Area and Massflow? prob. And a variance-style output to capture mixing); - [x] Avoid redundant operations (pre/post processings) during solver restarts. 156d0c5. What will be done in follow-up PR's:; - Viscous contributions for BC_inlet and outlet which are currently not used (also then for Turb-solver) https://github.com/su2code/SU2/pull/1388#discussion_r752384956; - Axissymmetric source term addtion and testing; - multi-component mixing from #1332 ; - gradient validation between DA and FD",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1388#issuecomment-935901996:1298,validat,validation,1298,https://su2code.github.io,https://github.com/su2code/SU2/pull/1388#issuecomment-935901996,2,['validat'],['validation']
Security,"Tom, I noticed that in under SU2_PY you have a parse_config.py that takes the cpp and hpp files and parses the data and returns it to the python UI. What is the data structure for this, is this like a data dictionary, key, value pair? can you give me the data structure for this so that I can reuse this in the web app. . Also may be provide me sample datastructure so that I can test it out in the weblayer. Having this in a weblayer is good idea, we can deploy this weblayer so that anyone accessing the web app can use this to create this configuration and use it as a starter.. I can implement a bottle application in python and deploy it in heroku and it can be used across. Thanks for your help. Krishna",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/172#issuecomment-126140571:492,access,accessing,492,https://su2code.github.io,https://github.com/su2code/SU2/pull/172#issuecomment-126140571,1,['access'],['accessing']
Security,"Tom,. Ok. So 3 Gb and 4 sec to write on 72 cores is about 10.6Mb / sec / core. Since not each core has access to a separate I/O node (assume 8 cores / processor), that would give upwards of 80 Mb / sec / node which is quite respectable. The reading seems a bit slower, but it is indeed a major improvement. Later in time we should do some tests for much larger files to make sure we get some level of scalability. Best,. Juan. On Mar 3, 2017, at 10:40 AM, Thomas D. Economon <notifications@github.com<mailto:notifications@github.com>> wrote:. Juan,. Don't know those numbers yet for the aggregate bandwidth with Lustre or how many I/O nodes are available for this cluster. Will have to do a detailed analysis eventually. For reference, this RANS case at 27 million grid points (not cells) results in a 3 GB restart file (binary). I'll take the two orders of magnitude improvement :). Tom. ‚Äî; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/pull/379#issuecomment-284035130>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADpSxLewYDD1YDs9b-b3gf61tw7hQLMcks5riF6TgaJpZM4MMhev>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/379#issuecomment-284049783:103,access,access,103,https://su2code.github.io,https://github.com/su2code/SU2/pull/379#issuecomment-284049783,1,['access'],['access']
Security,"True. I was thinking more from the user point-of-view, to be sure people little little experience can use SU2 easier. Similar to something Tim has already started in the Docs page. The idea here is just to be sure new features are easily usable/accessible for people unfamiliar.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/799#issuecomment-541832531:245,access,accessible,245,https://su2code.github.io,https://github.com/su2code/SU2/pull/799#issuecomment-541832531,2,['access'],['accessible']
Security,"Unfortunately, I wasn't able to get all of them. I fixed a majority of the calls but couldn't find workarounds all of them. There are 8 left in the following files: . `SU2_PY/change_version_number.py`: There's 2 in here. One is a complicated command with `grep` and pipes and the other is a simple `rm -rf`, but it isn't a security risk since there is no user input into that string. `SU2_PY/SU2/util/pyCppTap.py`: This is in the diff_routine and uses `tapenade`. I have no idea what this does so I didn't touch this one. `SU2/opt/server.py`: There are 4 `scp` calls that I didn't know how to replace. `SU2_PY/compute_polar.py`: There's one left in here which is a complicated `cat` call that I couldn't figure a workaround for. . If you have any suggestions for any of these, I can try and implement them. . Otherwise, once these tests pass, its good to merge.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-533590086:323,secur,security,323,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-533590086,2,['secur'],['security']
Security,"We should not roll out a new version of SST without having substantial coverage. I think with this PR we can:; - Validate SST-2003m, flatplate and maybe channel bump, NACA0012.; - Assess the changes required in the code, they are fairly subtle so we could consider having the 2 version, SST and 2003m as a ""variant"" specified like @suargi suggests for SA.; - Assess the ""damage"" in the regressions, how many restarts need re-doing etc.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1557#issuecomment-1060767999:113,Validat,Validate,113,https://su2code.github.io,https://github.com/su2code/SU2/pull/1557#issuecomment-1060767999,1,['Validat'],['Validate']
Security,"What permissions? If it's access to SU2 we give it to everyone. I'll invite Blanca, then let's let the first author open the PR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1684#issuecomment-1165581596:26,access,access,26,https://su2code.github.io,https://github.com/su2code/SU2/pull/1684#issuecomment-1165581596,1,['access'],['access']
Security,"When you create a token, you need to click 'workflow' as one of the allowed actions. ; Go to Settings -> Developer Settings -> Personal Access Tokens (classic); and then choose 'generate new token' and in the scope, you need to select 'workflow' in addition to whatever else is necessary.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1886#issuecomment-1381621210:136,Access,Access,136,https://su2code.github.io,https://github.com/su2code/SU2/pull/1886#issuecomment-1381621210,1,['Access'],['Access']
Security,Why is this being accessed out of bounds? Instead of adding a potentially confusing default behavior we should not access a marker that doesnt exist.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2281#issuecomment-2110296430:18,access,accessed,18,https://su2code.github.io,https://github.com/su2code/SU2/pull/2281#issuecomment-2110296430,2,['access'],"['access', 'accessed']"
Security,With commit [1836f11](https://github.com/su2code/SU2/pull/1536/commits/1836f111c0759eb50946ba6b68ac281ef4b1b717) the gradients (for massflow prescribed in the primal) can now be validated really well (tested for AvgTemp and PRESSURE_DROP OF's). . BUT only for serial execution ... for multiple processes the adjoint diverges after a few iterations. I need to give that parallel treatment another thought.; UPDATE: With [ce164a2](https://github.com/su2code/SU2/pull/1536/commits/ce164a232d6c0f845784f37e45336f7276746d61) also the parallel execution works fine. Please read my explanation attempt in the commit message (in case you are interested) and let me know what you think,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1030848657:178,validat,validated,178,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1030848657,1,['validat'],['validated']
Security,"With the address sanitizer it gets stuck writing the binary restart file. When I terminate, I get:; ^CTraceback (most recent call last):; File ""/usr/local/bin/parallel_computation.py"", line 110, in <module>; main(); File ""/usr/local/bin/parallel_computation.py"", line 57, in main; options.compute ); File ""/usr/local/bin/parallel_computation.py"", line 88, in parallel_computation; info = SU2.run.CFD(config); File ""/usr/local/bin/SU2/run/interface.py"", line 112, in CFD; run_command( the_Command ); File ""/usr/local/bin/SU2/run/interface.py"", line 280, in run_command; return_code = proc.wait(); File ""/usr/lib64/python2.7/subprocess.py"", line 1099, in wait; pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0); File ""/usr/lib64/python2.7/subprocess.py"", line 125, in _eintr_retry_call; return func(*args). I thought SU2 exclusively used python3? It registers as compiled with python3 (Program python3 found: YES (/bin/python3)).",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/971#issuecomment-623683360:17,sanitiz,sanitizer,17,https://su2code.github.io,https://github.com/su2code/SU2/issues/971#issuecomment-623683360,1,['sanitiz'],['sanitizer']
Security,"Yes it is inconsistent that's why it would need validation, the worst-case scenario is when your design variable is the thing the primal solver is manipulating to implement the fixed mode.; For example I'm pitching the wing (geometric AOA let's call it) the adjoint gives me a value for dCL / dalpha, but in practice this value is 0 because the primal solver does not allow the CL to change.; But doing the above would be dumb right, the validation question is what happens to the derivatives of other outputs? Is dCD / dalpha correct? I imagine this depends on the relation between CD and CL in this case.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1536#issuecomment-1030108842:48,validat,validation,48,https://su2code.github.io,https://github.com/su2code/SU2/pull/1536#issuecomment-1030108842,2,['validat'],['validation']
Security,"Yes that makes sense, we are probably missing some validation on markers not appearing on incompatible boundary conditions.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2109#issuecomment-1777083598:51,validat,validation,51,https://su2code.github.io,https://github.com/su2code/SU2/pull/2109#issuecomment-1777083598,1,['validat'],['validation']
Security,"You are right. Even though we compute these quantities inside the solver, they have not been added to the output classes yet. This should be straightforward though now in the new structure. Take a look at CFlowOutput::SetAerodynamicCoefficients(), for example, and try to pattern match to add these along with the others since we already have a ```solver->GetTotal_CQ()``` routine (and CT and CMerit) to access the computed value. Probably also need to add to the AddAerodynamicCoefficients() routine.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/957#issuecomment-621662776:404,access,access,404,https://su2code.github.io,https://github.com/su2code/SU2/issues/957#issuecomment-621662776,1,['access'],['access']
Security,"You can now access any output, please look at the examples in TestCases/pywrapper",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2263#issuecomment-2056876262:12,access,access,12,https://su2code.github.io,https://github.com/su2code/SU2/issues/2263#issuecomment-2056876262,1,['access'],['access']
Security,"You can use the --prefix option (most ""build from source"" software works; like that).; Do you know of a portable way to determine the user name?. On Mon, 11 May 2020, 21:04 Max Le, <notifications@github.com> wrote:. >; > -; >; > When installing SU2 from fresh or recompiling to update changes, the; > installation process always requires root permission to finish. The reason; > is that the binaries are installed in /usr/local/bin, which needs root; > access. The installation went well, it is just that I don't feel like; > entering root password everytime.; > -; >; > A way to go around this would be to have the binaries installed in the; > bin folder in the home folder, so on Linux that would be /home/user/bin.; > Even better, we can have it creates a separate SU2bin folder, where only; > the binaries from SU2 will be stored. Of course, doing this would change; > the environmental variables as well.; > -; >; > What do you all think? Is this too much hassle?; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/979>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJCOXN3VS6AOUOBHLOHSCULRRBK6DANCNFSM4M6GX6DA>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/979#issuecomment-626952122:453,access,access,453,https://su2code.github.io,https://github.com/su2code/SU2/issues/979#issuecomment-626952122,2,"['access', 'password']","['access', 'password']"
Security,You have to restrict third-party access in the options of the other project (https://help.github.com/en/articles/enabling-oauth-app-access-restrictions-for-your-organization),MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/645#issuecomment-515101184:33,access,access,33,https://su2code.github.io,https://github.com/su2code/SU2/issues/645#issuecomment-515101184,2,['access'],"['access', 'access-restrictions-for-your-organization']"
Security,You should be able to use CConfig::SetFinestMesh in CDriver::Geometrical_Preprocessing_FVM to initialize this to the coarsest grid that was produced. The threshold to stop agglomeration should stay. But you can expose it as a config option if you want.,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1362#issuecomment-907033127:211,expose,expose,211,https://su2code.github.io,https://github.com/su2code/SU2/pull/1362#issuecomment-907033127,1,['expose'],['expose']
Security,"_t iPoint=0; iPoint<nPoint; ++iPoint); {; for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) = 0.0;. for(size_t iNeigh=0; iNeigh<adj.nNeighbor(iPoint); ++iNeigh); {; size_t jPoint = adj.jPoint(iPoint,iNeigh);; size_t iEdge = adj.iEdge(iPoint,iNeigh);; double dir = adj.dir(iPoint,iNeigh);. for(size_t iVar=0; iVar<nVar; ++iVar); {; double phi_ave = 0.5*(phi(iPoint,iVar)+phi(jPoint,iVar));. for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) += phi_ave*dir*area(iEdge,iDim);; }; }. for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad(iPoint,iVar,iDim) /= volume[iPoint];; }; }; ```; The `Adjacency` class stores for each point: the surrounding neighbor points (this is available in SU2), the neighbor edges, and the direction (in or out, -1 or 1) of the area vector relative to the point.; The speedup is **0.83** (i.e. not a speedup), that is actually not that bad considering the same computation is repeated for each edge, the reason it is not that bad is the sequential access to the gradient. Note that this loop is one #pragma away from parallelization. The SIMD version of this code is:; ```C++; void computeGradients(size_t nPoint,; size_t nVar,; size_t nDim,; const Adjacency<4>& adj,; const Matrix& area,; const Vector& volume,; const Matrix& phi,; VectorOfMatrix& grad); {; const size_t SIMDLEN = 4;. for(size_t iPoint=0; iPoint<nPoint; iPoint+=SIMDLEN); {; for(size_t iVar=0; iVar<nVar; ++iVar); for(size_t iDim=0; iDim<nDim; ++iDim); grad.setVec(iPoint,iVar,iDim,Array<double,SIMDLEN>(0.0));. for(size_t iNeigh=0; iNeigh<adj.nNeighbor_vec(iPoint); ++iNeigh); {; auto jPoint = adj.jPoint_vec(iPoint,iNeigh);; auto iEdge = adj.iEdge_vec(iPoint,iNeigh);; auto dir = adj.dir_vec(iPoint,iNeigh);. for(size_t iVar=0; iVar<nVar; ++iVar); {; auto phi_ave = (phi.getVec(iPoint,iVar)+; phi.getVec(jPoint,iVar))*0.5;. for(size_t iDim=0; iDim<nDim; ++iDim); grad.addVec(iPoint,iVar,iDim,; phi_ave*dir*area.g",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:5023,access,access,5023,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,2,['access'],['access']
Security,"cally equivalent) introduced to limiters and gradients in #834, yes. > What's the advantage of having one numerics term per thread?. It is a requirement, we need to write data into numerics before using them, multiple threads cannot write to the same location (i.e. the internal structures of CNumerics) therefore one per thread is required. > ...Also, I think I missed the point where the numerics container is extended beyond MAX_TERMS. The allocation of space for one numerics per thread is done above in line 1995 of my 21 Dec 2019 comment: `...MAX_TERMS*omp_get_max_threads()...`.; The instantiation of one numerics per thread is then done by executing the rest of the preprocessing in parallel and instead of using `XYZ_TERM` using `XYZ_TERM+offset` where `offset = thread_id * MAX_TERMS`.; I think someone mentioned this (maybe Tim) that we could revisit the ownership relations of the numerics classes, i.e. allocate them as members of their respective solvers, which if we do, we can think of having a purpose built container that automates the per-thread creation and access. > Why are they redefined each time inside the loop?; > Is this for efficiency reasons?. Referring to variables being declared inside loops. One stylist reason is that declaring everything at the top of a function is the C way of doing things, the C++ people whose books/blogs I've read and talks I've watched, recommend keeping namespaces (the inside of the loop being one) as clean as possible.; The only reason not to do this is if you explicitly want re-use, in the case of trivial types this does not improve efficiency, and in the context of OpenMP code it can create issues. Just like we need one numerics per thread, if we declare variables outside a parallel loop the default OpenMP behaviour is to consider them shared, and concurrent writes to shared locations = gdb and many bad words xD.; **EDIT:** I should mention here that if the parallel region is started before the variable declarations they beco",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:2224,access,access,2224,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['access'],['access']
Security,"ch request to make it clearer. Request: Use nomenclature consistent with the C++ interface (point instead of node, etc.); Reason: People who know the C++ interface will know how to use the python wrapper straight away, people who learn how to use the python wrapper will be able to understand the C++ implementation (without needing a translation layer in their mind all the time). Request: Return connectivity/adjacency as local indices instead of global; Reason: This is the natural way of referencing data in an MPI code, local indices correspond directly to data stored in the partition thereby making it more efficient to access (without global-to-local conversions, which are much more expensive than local-to-global). Furthermore, the local ordering strategy improves the efficiency of loops (over edges, neighboring points, etc.). Request: Do not apply unnecessary ""transformations"" to the connectivity/adjacency as part of the API; Reason: Increases the maintenance burden and makes for a less versatile API. By returning the local indices that form a marker or element, it is trivial to retrieve any other data for those indices (the ""transformation""). For example, the solution at those points, the point coordinates, whether the points are halo or domain points, the global indices, etc.; This way, by adding a **single** function to the API e.g. get the global index of a point of element, the functionality of the API grows a lot more because the user can apply the function to **any** connectivity/adjacency function. Request: Do not offer too many overloads of the same function; Reason: Increases the maintenance burden and it's returning the data in structures that are not very efficient, namely vector of vectors. It is much easier to offer domain-wide data access on the python side, as a very small function that can be part of wrapper utilities (i.e. live only in python but not c++). It may even be more efficient since you make a numpy array/matrix instead of lists of lists.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1300#issuecomment-1402197827:1803,access,access,1803,https://su2code.github.io,https://github.com/su2code/SU2/pull/1300#issuecomment-1402197827,2,['access'],['access']
Security,"double** blk_j,; SparseMatrix& matrix); {; matrix.setZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorStart[color+1]; ++k); {; size_t iEdge = edgeIdx[k];; size_t iPoint = connectivity[iEdge].first;; size_t jPoint = connectivity[iEdge].second;. matrix.addBlock(iPoint, iPoint, blk_i);; matrix.addBlock(iPoint, jPoint, blk_j);. matrix.subBlock(jPoint, jPoint, blk_j);; matrix.subBlock(jPoint, iPoint, blk_i);; }; }; ```; This and a few more memory reads is why we can't have nice things, i.e. massive speedups with vectorization. Believe it or not this loop sets ~75% of the maximum speed at which the residual edge loop can run (bandwidth bottleneck).; Don't be sad though, we can make a few things about it better:; - We can store the blocks we insert contiguously so the writes can be vectorized (this would be done using a container so that we still have `(i,j)` access syntax);; - On each insertion we have to first look for the block by traversing the `colInd` (column index) array, we can instead map the diagonal blocks to the corresponding points and the off-diagonal blocks to the edge (remember we insert ""by the edge"").; - We can fuse numerics (possibly using the [decorator](https://en.wikipedia.org/wiki/Decorator_pattern) pattern) so that we write to the matrix only once per iteration, which means we only need to clear the diagonal blocks and not the entire matrix because we can **set** the off-diagonals instead of **updating** them. Assuming these modification our dummy loop becomes; ```c++; void testLoop2(const vector<size_t>& colorStart,; const vector<size_t>& edgeIdx,; const vector<pair<size_t,size_t> >& connectivity,; const double* blk_i, const double* blk_j,; SparseMatrix& matrix); {; matrix.setDiagZero();. for(size_t color=0; color<colorStart.size()-1; ++color); #pragma omp parallel for schedule(dynamic,CHUNK_SIZE); for(size_t k=colorStart[color]; k<colorSta",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:2659,access,access,2659,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['access'],['access']
Security,"e could be simplified / optimized by adopting a dense matrix format, for example:; - This snipped from the viscous numerics refactoring`for (iDim = 0; iDim < nDim; iDim++) {; TauElem[iDim] = 0.0;; for (jDim = 0; jDim < nDim; jDim++); TauElem[iDim] += tau[iDim][jDim]*UnitNormal[jDim];; }` would simply become `TauElem=tau*UnitNormal`; - Cumbersome allocations like `tau_jacobian_i = new su2double* [nDim];; for (iDim = 0; iDim < nDim; iDim++) {; tau_jacobian_i[iDim] = new su2double [nVar];; }` become `Matrix tau_jacobian_i(nDim,nVar);` and the cleanup is dealt with by the destructor of the object automatically. Now to answer some questions.; @juanjosealonso @erangit LAPACK and BLAS are indeed the standard, so much so that most (all?) newer libraries will call their routines behind the scenes.; However they considerably simplify the user interface by encapsulating the aforementioned construction/destruction and by exposing natural ways of manipulating the matrices, e.g. access entire rows, columns, blocks, etc.; Another issue with using BLAS routines is that we then need to provide a portable version that can be differentiated with CoDi or to implement the exact differentiation (similar to what is done in the ""solve_b"" routines). @vdweide that is not an issue with Eigen because everything is templated and therefore compatible with any type or class that overloads the appropriate arithmetic operators.; I have used it for over 2 years and I can attest to its compatibility with AD tools (I've tried 3), and speed when linked with a BLAS library, their native implementations are also very good, peeking inside their code... you can tell they know what they are doing. P.S. I feel this post needs a disclaimer, I am not affiliated in any way to Eigen, my motivation is not to promote their work (but I obviously think they deserve it). I genuinely think adopting an algebra library (that is compatible with AD) would greatly simplify our work and further drop the entry barrier to new",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/643#issuecomment-459653772:2113,access,access,2113,https://su2code.github.io,https://github.com/su2code/SU2/issues/643#issuecomment-459653772,2,['access'],['access']
Security,"e counts.; I will not hazard an estimate for this. ## Proposed changes (Summary); **Hybrid parallel**; - Gradients (GG) and limiters converted to point loops (embarrassing parallel, no edge colouring needed).; - Residual loops parallelized with edge colouring, if anyone has suggestions regarding algorithms send them my way, so far I only tested greedy colouring on edge groups to preserve spatial locality (this aspect is absolutely fundamental).; - Matrix multiplication, BCSR format is also embarrassing parallel.; - Linear preconditioners, additive decomposition within each MPI rank over a number of threads that need not be the same as that used for other areas. **SIMD**; - For gradients, limiters, and numerics a SIMD-friendly type will be used, by and large the high level code will look the same (see my examples above) but multiple points/edges will be processed simultaneously.; - No changes will be required to the data layout of CVariable, which means there will be no penalty to scalar code, new overloads for accessor methods will be required to set/get SIMD-arrays of data instead of scalars.; - The geometric properties and graph information associated with CGeometry will require the same contiguous storage treatment received by CVariable.; - Linear algebra, dimension-specific multiplication kernels with manual low level optimisations (unrolling, vectorization through intrinsics, and software prefetching), complex code but encapsulated in a low maintenance area of the code. **General improvements**; - Fusing convective and viscous residual loops, this will NOT be done by super gluing convective and viscous numerics. I do not have a concrete design in mind yet but I hope to be able to do something akin to the *decorator* pattern I mentioned before. I also plan to make the numerics a full-fledged *visitor* to reduce compilation dependencies, currently a change to numerics may affect CVariable CSolver and CNumerics (as mentioned by @clarkpede), CSolver is involved bec",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539523312:2456,access,accessor,2456,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539523312,1,['access'],['accessor']
Security,"easier implementation experience. Certainly, this is not the only consideration but it should be taken into account. Currently, resulting from the significant contributions of the members of this developers group, SU2 implementation works like a charm. I think we should strive to conserve this feature, especially if we aim at attracting more users and developers into the community. (...). >@vdweide; >(...) @bmunguia and @EduardoMolina, what type of application did you have in mind for PETSc? The only thing I can think of is a full Newton solver. And no matter how much I like PETSc, @juanjosealonso and @erangit have a point here. Looks like I start to belong to the group of old conservatives as well.... >@economon ; >(...) If you really would like to give PETSc a shot, I recommend talking with @anilvar who had an interface for connecting it to SU2 in one of our branches. >@pcarruscag; >(...) being able to use PETSc or HYPRE would be interesting as it would give us access to AMG, and @talbring 's branch feature_template_linear_solver would make such an integration compatible with AD. (...). >@EduardoMolina; >(...) When Brian (@bmunguia ) and I mentioned PETSc, it was an idea to try a different Newton-Krylov (with preconditioner) library in order to improve the convergence of SU2.; Since the slow convergence of the SU2-FV is the main feedback that I received from other users from industry and academia, I think it worth try an external library and evaluate the performance. (...). >@pcarruscag ; >(...) That is something I am also interested in as for some of my structural cases the current linear solvers simply do not converge. (...). >@economon ; >I would add one practical comment for consideration: it is worth checking whether the main restriction we have is related to approximations in the Jacobian that limit the effective CFL we can use or whether the convergence of the linear solver itself is a problem (speed or complete lack of convergence). A quick test without re",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460853218:2446,access,access,2446,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460853218,2,['access'],['access']
Security,"economon>, I've decided to move the discussion here to get additional input. What is unit testing?. For those not familiar with unit testing, unit testing allows the testing of small bits of behavior, ideally using isolated bits of code. It is not intended to replace validation testing or formal verification tests. Instead, it serves a unique purpose. Consider the three following use cases:. * You're developing a new feature, and you want to test it to see if it works. You could do a full simulation, but that takes a lot of time and computing power. You want to check if your new behavior behaves as you suspect before you throw a lot of resources at it.; * You submit a PR and discover that one of the regression tests has failed. But...why? You know that something is broken, but its hard to track down what broke. You want more granular test coverage that can demonstrate what broke.; * You are fixing a very small bug. You know that you should prove that your bug fix worked, but it doesn't seem logical to dedicate an entire validation case to one small bug fix. You want to write a small test for a small fix. In all of these cases, unit testing fills a unique role. Unit testing increases time spent in development, but decreases the amount of time spent in bug-fixing and maintaining. For more information, see this relevant Stack Exchange question.<https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>. What do I propose?. My research group at UT Austing has implemented a unit testing framework on our branch, which we're happy with. Some choices were arbitrary, and some choices were made based on our development environment. Those choices may be different for other groups. Here's what we have done:. The unit testing framework is compiled and run using autotools. For more information on autotool's setup, see their documentation<https://www.gnu.org/software/automake/manual/html_node/Tests.html>. Since autotools is t",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:1947,validat,validation,1947,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,2,['validat'],['validation']
Security,"fic multiplication kernels with manual low level optimisations (unrolling, vectorization through intrinsics, and software prefetching), complex code but encapsulated in a low maintenance area of the code. **General improvements**; - Fusing convective and viscous residual loops, this will NOT be done by super gluing convective and viscous numerics. I do not have a concrete design in mind yet but I hope to be able to do something akin to the *decorator* pattern I mentioned before. I also plan to make the numerics a full-fledged *visitor* to reduce compilation dependencies, currently a change to numerics may affect CVariable CSolver and CNumerics (as mentioned by @clarkpede), CSolver is involved because it is responsible for fetching data, I may move that to CNumerics, which would let them fetch data as needed.; - Lookup accesses to CSysMatrix to avoid linear searches, the small increase in memory usage can be mitigated by sharing these lookup tables/arrays and the sparsity pattern between matrices associated with the same geometry (on the subject of these lookup tables, knowing where the diagonal of a row is should enable more efficient upper/lower multiplications). ## Work items; This is a lot of work and some changes will be significant, I will divide the work in steps, off the top of my head this order seems ok:; - CSysMatrix lookups and any required parallel pragmas put in place.; - Point-loop gradients and limiters, no SIMD (at which point I hope #777 to be finished so the next item does not disrupt it).; - Split CSolvers over multiple files, colour-based parallel residual loops (at this point we have hybrid parallel!).; - Contiguous storage of CGeometry members (to eventually enable vectorization).; - Split CNumerics over files, architecture for fusing convective and viscous loops (the most disruptive change).; - SIMD, of gradients, limiters, and numerics. SIMD in CSysMatrix can be started anywhere after item 1. If you foresee conflicts with your ongoing work let",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-539523312:3555,access,accesses,3555,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-539523312,1,['access'],['accesses']
Security,"here to get additional input.; > What is unit testing?; >; > For those not familiar with unit testing, unit testing allows the testing; > of small bits of behavior, ideally using isolated bits of code. It is not; > intended to replace validation testing or formal verification tests.; > Instead, it serves a unique purpose. Consider the three following use cases:; >; > - You're developing a new feature, and you want to test it to see if; > it works. You could do a full simulation, but that takes a lot of time and; > computing power. You want to check if your new behavior behaves as you; > suspect before you throw a lot of resources at it.; > - You submit a PR and discover that one of the regression tests has; > failed. But...why? You know that something is broken, but its hard to track; > down what broke. You want more granular test coverage that can demonstrate; > what broke.; > - You are fixing a very small bug. You know that you should prove that; > your bug fix worked, but it doesn't seem logical to dedicate an entire; > validation case to one small bug fix. You want to write a small test for a; > small fix.; >; > In all of these cases, unit testing fills a unique role. Unit testing; > increases time spent in development, but decreases the amount of time spent; > in bug-fixing and maintaining.; >; > For more information, see this relevant Stack Exchange question.; > <https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>; > What do I propose?; >; > My research group at UT Austing has implemented a unit testing framework; > on our branch, which we're happy with. Some choices were arbitrary, and; > some choices were made based on our development environment. Those choices; > may be different for other groups. Here's what we have done:; >; > The unit testing framework is compiled and run using autotools. For more; > information on autotool's setup, see their documentation; > <https://www.gnu.org/software/aut",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:2996,validat,validation,2996,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['validat'],['validation']
Security,"hort array of matrices, the result of that is code like the above that explicitly manipulates the lanes of our SIMD type, such code can be completely hidden inside CSysMatrix which is good because a 4x4 vectorized transpose and matrix update looks like this; ```c++; // block j, subs from jj and goes to ij; T0 = blk_j[ k ].unpackLo(blk_j[k+1]); T1 = blk_j[ k ].unpackHi(blk_j[k+1]);; T2 = blk_j[k+2].unpackLo(blk_j[k+3]); T3 = blk_j[k+2].unpackHi(blk_j[k+3]);. C0 = T0.widePermuteLo(T2); C1 = T1.widePermuteLo(T3);; C2 = T0.widePermuteHi(T2); C3 = T1.widePermuteHi(T3);. (Array4d(&bjj[0][k])-C0).store(&bjj[0][k]);; (Array4d(&bjj[1][k])-C1).store(&bjj[1][k]);; (Array4d(&bjj[2][k])-C2).store(&bjj[2][k]);; (Array4d(&bjj[3][k])-C3).store(&bjj[3][k]);. C0.store(&bij[0][k]); C1.store(&bij[1][k]);; C2.store(&bij[2][k]); C3.store(&bij[3][k]);; ```; I am showing this because it represents a readability worst case in terms of manipulating SIMD types, we might end up with one or two of these to get the best performance possible but they will always be encapsulated and deep in kernel-type areas of SU2 that are almost never touched. ## Conclusions; - Over 45% faster CSysMatrix updates by mapping off-diagonal blocks to edges and diagonal blocks to points.; - Colouring is the best strategy for hybrid parallelism of compute-heavy edge loops and matrix updates as it interleaves compute and memory operations.; - AoS storage should be kept to avoid significant loss of performance in compute-light edge loops due to poor locality of SoA storage.; - Major implication of AoS is on point loops where some data needs to be fetched (transposed) into local variables for effective vectorization.; - An intermediate storage scheme, AoSoA, can provide both good locality and vectorization of point loops, however it requires that data be accessed via special iterators and scalar code based on it would have poor performance. Next I will try to estimate how much we can gain for a ""realistic"" numerics class.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:17372,access,accessed,17372,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['access'],['accessed']
Security,"ignment, size_t size) noexcept; ^; [111/846] Compiling C++ object 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysSolve.cpp.o'.; FAILED: Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysSolve.cpp.o ; c++ -ICommon/src/9e112f9@@SU2Common@sta -ICommon/src -I../Common/src -I../externals/CLI11 -I../externals/cgns/adf -Iexternals/cgns/./ -I../externals/cgns/./ -I../externals/metis/include -I../externals/metis/GKlib -I../externals/metis/libmetis -I../externals/parmetis/include -I../externals/parmetis/libparmetis -Iexternals/tecio/teciompisrc/../ -I../externals/tecio/teciompisrc/../ -Iexternals/tecio/teciompisrc/./ -I../externals/tecio/teciompisrc/./ -I/app/mpich-3.2.1/include -fdiagnostics-color=always -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fPIC -Wl,-rpath -Wl,/app/mpich-3.2.1/lib -Wl,--enable-new-dtags -Wl,-rpath -Wl,/app/mpich-3.2.1/lib -Wl,--enable-new-dtags -Wno-unused-parameter -Wno-empty-body -Wno-format-security -Wno-deprecated-declarations -Wno-non-virtual-dtor -DHAVE_CGNS -DNDEBUG -DHAVE_MPI -DHAVE_METIS -DHAVE_PARMETIS -DHAVE_TECIO -DTECIOMPI -MD -MQ 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysSolve.cpp.o' -MF 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysSolve.cpp.o.d' -o 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysSolve.cpp.o' -c ../Common/src/linear_algebra/CSysSolve.cpp; In file included from ../Common/src/linear_algebra/../../include/geometry/../toolboxes/C2DContainer.hpp:30:0,; from ../Common/src/linear_algebra/../../include/geometry/../toolboxes/graph_toolbox.hpp:30,; from ../Common/src/linear_algebra/../../include/geometry/CGeometry.hpp:61,; from ../Common/src/linear_algebra/CSysSolve.cpp:33:; ../Common/src/linear_algebra/../../include/geometry/../toolboxes/allocation_toolbox.hpp: In function ‚ÄòT* MemoryAllocation::aligned_alloc(size_t, size_t)‚Äô:; ../Common/src/linear_algebra/../../include/geometry/../toolboxes/allocation_toolbox.hpp:79:9: error: ‚Äò::aligned_alloc‚Äô has not been declared; ptr = ::aligned_alloc(alig",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620486002:3006,secur,security,3006,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620486002,1,['secur'],['security']
Security,"ike we need one numerics per thread, if we declare variables outside a parallel loop the default OpenMP behaviour is to consider them shared, and concurrent writes to shared locations = gdb and many bad words xD.; **EDIT:** I should mention here that if the parallel region is started before the variable declarations they become local and all is well, with the exception of class members, those will be shared most of the time (this is where const correctness can give some peace of mind). > Also, just an additional (hopefully constructive) comment: I find all of these developments great, and I honestly think that you are doing an amazing job on performance and overall code improvement. However, as a non-C++-master myself, I'm just a little concerned of whether some advanced programming may become an entrance barrier to new additions to the community. As I wrote in the preamble of #789:; ""But please participate even if you never heard of these topics, your opinion about readability and ""developability"" of the code is important! I think the code-style should be accessible to people starting a PhD (after they read a bit about C++...).""; I try to encapsulate and hide the tricky bits as much as possible to make the code as readable as possible, whether I am succeeding or not is for the community to decide, in all these PR's I've been pointing to the areas I think are trickier, if someone, anyone, feels they are absolutely incomprehensible please say something... either here, or trough slack, or by email (I think it shows in the commits) (I understand not everyone is keen on github exposure). > I'm aware that you have been doing very well at documenting the code and the various PRs, but I'd say we should try to find an strategy to ease the learning curve on potential new developers (maybe some developer tutorials? a collection of the comments/discussions on the PRs moved to the wiki? a list of links/useful resources?). I agree with documentation of broad design decisions, tha",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/843#issuecomment-577684728:3892,access,accessible,3892,https://su2code.github.io,https://github.com/su2code/SU2/pull/843#issuecomment-577684728,2,['access'],['accessible']
Security,"ilation. I still get this error. [107/846] Compiling C++ object 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysVector.cpp.o'.; FAILED: Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysVector.cpp.o ; c++ -ICommon/src/9e112f9@@SU2Common@sta -ICommon/src -I../Common/src -I../externals/CLI11 -I../externals/cgns/adf -Iexternals/cgns/./ -I../externals/cgns/./ -I../externals/metis/include -I../externals/metis/GKlib -I../externals/metis/libmetis -I../externals/parmetis/include -I../externals/parmetis/libparmetis -Iexternals/tecio/teciompisrc/../ -I../externals/tecio/teciompisrc/../ -Iexternals/tecio/teciompisrc/./ -I../externals/tecio/teciompisrc/./ -I/app/mpich-3.2.1/include -fdiagnostics-color=always -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fPIC -Wl,-rpath -Wl,/app/mpich-3.2.1/lib -Wl,--enable-new-dtags -Wl,-rpath -Wl,/app/mpich-3.2.1/lib -Wl,--enable-new-dtags -Wno-unused-parameter -Wno-empty-body -Wno-format-security -Wno-deprecated-declarations -Wno-non-virtual-dtor -DHAVE_CGNS -DNDEBUG -DHAVE_MPI -DHAVE_METIS -DHAVE_PARMETIS -DHAVE_TECIO -DTECIOMPI -MD -MQ 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysVector.cpp.o' -MF 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysVector.cpp.o.d' -o 'Common/src/9e112f9@@SU2Common@sta/linear_algebra_CSysVector.cpp.o' -c ../Common/src/linear_algebra/CSysVector.cpp; In file included from ../Common/src/linear_algebra/CSysVector.cpp:31:0:; ../Common/src/linear_algebra/../../include/toolboxes/allocation_toolbox.hpp: In function ‚ÄòT* MemoryAllocation::aligned_alloc(size_t, size_t)‚Äô:; ../Common/src/linear_algebra/../../include/toolboxes/allocation_toolbox.hpp:79:9: error: ‚Äò::aligned_alloc‚Äô has not been declared; ptr = ::aligned_alloc(alignment, size);; ^; ../Common/src/linear_algebra/../../include/toolboxes/allocation_toolbox.hpp:79:9: note: suggested alternative:; ../Common/src/linear_algebra/../../include/toolboxes/allocation_toolbox.hpp:61:11: note: ‚ÄòMemoryAllocation::aligned_alloc‚Äô; inline T* aligned_alloc(siz",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/955#issuecomment-620486002:999,secur,security,999,https://su2code.github.io,https://github.com/su2code/SU2/issues/955#issuecomment-620486002,1,['secur'],['security']
Security,"ive one will also not be zero, therefore it is correct to always evaluate both ratios.; This algorithm only needs min and max neighbors as small local variables instead of large global ones due to the way those values are determined. This is where the memory from the extra adjacency information is recovered. Like @economon said, fusing the gradient kernel with the limiter kernel is trivial with these point loops, and I do not think it affects readability much since one can clearly tell ""what is what"" (I will not put it here but it really is a matter of copy paste), including the boundaries could be a bit more challenging, but I will give performance number nevertheless. **Performance summary**. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.25 | 2.0 |; | **Speed 4 cores** | 2.45 | 2.7 | 4.5 | 7.0 |. The basic point version does not lose to edge based because, contrary to gradients, it does not require duplication of computations while benefiting from sequential access to gradients.; Again the point-based implementation does really well in parallel, limiters are more compute intensive and so the scaling is almost perfect.; For reference, limiters are 1.9 times more expensive to compute than gradients with the reference edge version. With point loops, SIMD, and in parallel, gradients and limiters cost the same. If we consider the combined cost of gradients and limiters, and compare the scalar ""edge+edge"" with the SIMD ""point+point"" and ""fused point"" we get:. | G+L Approach | Edge+Edge | Point+Point | Fused Point |; | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.85 |; | **Speed 4 cores** | 2.3 | 5.35 | 6.1 |. Fusing point loops only gives a 14% improvement vs separate loops due to the difference in gathered data, only one gather is amortized and the remaining memory accesses are very efficient.; Nevertheless if it can be done nicely while accounting for ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:10609,access,access,10609,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['access'],['access']
Security,"m : size_t {Size = N};; enum : size_t {Align = N*sizeof(T)};; private:; // fixed size and aligned array of internal data, naturally maps to a SIMD register; alignas(Align) T vals_[N];; /*; * Some helper methods go here; */; public:; // **** CONSTRUCTORS **** //; // We want to be able to construct this type from single scalars,; // a memory location from which we LOAD data,; // or a memory location and some offsets from which we GATHER data.; // In addition to the ""normal"" constructors. // scalar broadcasting ctor; STRONGINLINE Array(T x) {bcast(x);}. // loading ctor; STRONGINLINE Array(const T* ptr); {; #pragma omp simd aligned(ptr:Align); FOREACH vals_[k] = ptr[k];; }; // gathering ctor; template<class U>; STRONGINLINE Array(const T* base_ptr, const U& offsets); {; #pragma omp simd; FOREACH vals_[k] = base_ptr[offsets[k]];; }; /*; * Other traditional constructors (default, copy-ctor, move-ctor, etc) go here; */. // **** ACCESSORS **** //; STRONGINLINE T& operator[] (size_t k) {return vals_[k];}; STRONGINLINE T operator[] (size_t k) const {return vals_[k];}. // **** MATH OPERATORS **** //; STRONGINLINE Array& operator= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] = rhs.vals_[k];; return *this;; }. STRONGINLINE Array& operator+= (const Array& rhs); {; #pragma omp simd; FOREACH vals_[k] += rhs.vals_[k];; return *this;; }; STRONGINLINE Array operator+ (const Array& rhs) const { return Array(*this)+=rhs; }; ; /*; * Many other operators go here.; */; };. // Common math function overloads; template<class T>; STRONGINLINE T vmax(const T& a, const T& b); {; T res;; #pragma omp simd; for(size_t k=0; k<T::Size; ++k); res[k] = (a[k]>b[k])? a[k] : b[k];; return res;; }. #undef FOREACH; ```; There are other (better) ways to do this, for example using [x86 intrinsics](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=2273,2273,2436,2943,2436,2943,610,1788,2942) (in header `<x86intrin.h>`), register types instead of arrays, and a boat load of templa",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530328194:7839,ACCESS,ACCESSORS,7839,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530328194,1,['ACCESS'],['ACCESSORS']
Security,"nd max neighbors as small local variables instead of large global ones due to the way those values are determined. This is where the memory from the extra adjacency information is recovered. Like @economon said, fusing the gradient kernel with the limiter kernel is trivial with these point loops, and I do not think it affects readability much since one can clearly tell ""what is what"" (I will not put it here but it really is a matter of copy paste), including the boundaries could be a bit more challenging, but I will give performance number nevertheless. **Performance summary**. | Code | Edge | Edge, SIMD on vars | Point | Point, SIMD on points |; | ---- | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.25 | 2.0 |; | **Speed 4 cores** | 2.45 | 2.7 | 4.5 | 7.0 |. The basic point version does not lose to edge based because, contrary to gradients, it does not require duplication of computations while benefiting from sequential access to gradients.; Again the point-based implementation does really well in parallel, limiters are more compute intensive and so the scaling is almost perfect.; For reference, limiters are 1.9 times more expensive to compute than gradients with the reference edge version. With point loops, SIMD, and in parallel, gradients and limiters cost the same. If we consider the combined cost of gradients and limiters, and compare the scalar ""edge+edge"" with the SIMD ""point+point"" and ""fused point"" we get:. | G+L Approach | Edge+Edge | Point+Point | Fused Point |; | ---- | ---- | ---- | ---- |; | **Speed 1 core** | 1.0 | 1.75 | 1.85 |; | **Speed 4 cores** | 2.3 | 5.35 | 6.1 |. Fusing point loops only gives a 14% improvement vs separate loops due to the difference in gathered data, only one gather is amortized and the remaining memory accesses are very efficient.; Nevertheless if it can be done nicely while accounting for boundaries (which may have to be handled outside the loop) it could allow some memory savings for the discrete adjoint.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-530593912:11447,access,accesses,11447,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-530593912,2,['access'],['accesses']
Security,"ns. . I also attach a couple zooms of the signal: first at time 0 which gives the GAF for the steady initial simulation and second for the converged values. It can be seen how (even if less important) some discrepancies are found here as well.; ![Time_zoom](https://user-images.githubusercontent.com/23583209/72832115-869ce400-3c84-11ea-93cb-dffeba31878c.jpg); ![Time_zoom2](https://user-images.githubusercontent.com/23583209/72832121-8a306b00-3c84-11ea-8303-b55888b8fb38.jpg). To check which one of the two time evolution is physically representative you can observe the GAF in the frequency domain. The following figure plots module of the Fourier transform of the preceding signals together with the DLM reference as a function of the reduced frequency (proportional to omega/V_inf). ; ![Frequency](https://user-images.githubusercontent.com/23583209/72832220-be0b9080-3c84-11ea-99da-3bfc5d31aa5b.jpg). Old SU2 has been validated vs DLM in another test which I don't show here for sake of brevity and differences with respect to DLM are justified by the thickness of the ONERA M6 and high speed. It can be seen how new SU2 with old boundary conditions gives back an almost identical result to old SU2 (my reference). Anyway for the new boundary conditions values are too distant from the reference.; Little note: the Module of the GAF in frequency domain at K=0 is proportional to the difference of the value of the gaf in time domain between t=0 and t=infinite: namely GAF(t=infinite) - GAG(t=0). The same value sums other coefficients due to the unsteadiness of the signal at K different than 0. We can see how for both the boundary conditions the value approximates the original one (as we already pointed out at the beginning, noticing that both steady and converged values were very very similar for the two boundary conditions) Anyway, by increasing the frequency, we notice that differences increase rapidly pointing out the problem must be somehow related to the rate of unsteadiness of the ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-576826669:2666,validat,validated,2666,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-576826669,1,['validat'],['validated']
Security,"r clarity). **With SoA (aka column major storage) this code is 1.5 times slower than the scalar version.**. The reason for that is poor locality (of the spacial variety), as we loop through the number of variables and dimensions we are accessing the data in strides of nPoint, as the contiguous index is the first one so that we can perform vector read/writes when computing gradients and limiters.; With the scalar version the data for each point is contiguous which means on the first access we get whatever extra data is on the same cache line for free and subsequent accesses will be hardware prefetched since the stride is small (1 in this case). We lose all this with SoA storage. If we go back to arrays of structures (AoS, aka row major storage, basically what we have in #753) performance is only 9% worse (the code is identical). Those 9% are mostly due to increased integer arithmetic in the accesses to the data, on each call to `getVec` we resolve 4/8 row/column pairs into 1D indexes, while this calculation is vectorized, it seems to be less optimizable by compilers, for example this; ```c++; for(size_t iDim=0; iDim<nDim; ++iDim); phiL += grad.getVec(iPoint,iVar,iDim)*d_ij[iDim];; ```; gets compiled into this monstrosity; ```asm; .L13:; vpmuludq ymm0, ymm4, ymm1; vmovq xmm15, rax; vmovapd ymm6, ymm11; mov rdx, rax; vpbroadcastq ymm15, xmm15; sal rdx, 5; add rax, 1; vpaddq ymm0, ymm0, ymm2; vpsllq ymm0, ymm0, 32; vpaddq ymm0, ymm5, ymm0; vmovdqa YMMWORD PTR [rbp-240], ymm0; vpaddq ymm0, ymm3, ymm0; vmovdqa YMMWORD PTR [rbp-208], ymm0; vpaddq ymm0, ymm15, ymm0; vmovdqa YMMWORD PTR [rbp-176], ymm0; vgatherqpd ymm15, QWORD PTR [rdi+ymm0*8], ymm6; vmovapd ymm0, YMMWORD PTR [rsi+rdx]; vfmadd213pd ymm0, ymm15, YMMWORD PTR [rbp-336]; vmovapd YMMWORD PTR [rbp-336], ymm0; cmp rbx, rax; jne .L13; ```; the meat of which is `vgatherqpd` (`getVec`) and `vfmadd213pd` fused-multiply-add to update `phiL`, everything else is integer arithmetic which in the scalar version gets factored",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-535977206:9094,access,accesses,9094,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-535977206,2,['access'],['accesses']
Security,"r routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writes to 2 locations (gather / scatter access pattern, not to be confused with the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditions, i.e. each endpoint is referenced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main memory and forces cache coherency) or it needs to acquire a *lock* for the point it is writing to, if it fails to acquire the *lock* (because another thread has it) it needs to wait. None of these is without drawbacks.; - **Coloring** reduces temporal locality, edges are sorted in increasing order of the point indices to reduce cache misses, this means small groups of contiguous edges will share the same ""iPoint"", coloring single edges destroys this. Furthermore coloring either requires edges to be re-sorted by color, or if the edge indices of each color are instead kept in arrays, performance will suffer due to increased indirection which confounds the hardware pre-f",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:4531,access,access,4531,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['access'],['access']
Security,"rth the additional effort. In cases where it makes sense (as described by Clark and in the Stack Exchange discussion) I would advocate for using it moving forward. There may also be some issues that arise multiple times in existing code where a retroactive application of unit testing may also make sense. I am copying Pat Miller, formerly with DoE, who may have more experience on whether such unit testing approaches were useful/worth the investment in some major codes he worked on. Best,. Juan. On Jun 4, 2019, at 2:14 PM, Clark Pederson <notifications@github.com<mailto:notifications@github.com>> wrote:. I propose adding a unit-testing framework and unit-tests to SU2. After chatting with @economon<https://github.com/economon>, I've decided to move the discussion here to get additional input. What is unit testing?. For those not familiar with unit testing, unit testing allows the testing of small bits of behavior, ideally using isolated bits of code. It is not intended to replace validation testing or formal verification tests. Instead, it serves a unique purpose. Consider the three following use cases:. * You're developing a new feature, and you want to test it to see if it works. You could do a full simulation, but that takes a lot of time and computing power. You want to check if your new behavior behaves as you suspect before you throw a lot of resources at it.; * You submit a PR and discover that one of the regression tests has failed. But...why? You know that something is broken, but its hard to track down what broke. You want more granular test coverage that can demonstrate what broke.; * You are fixing a very small bug. You know that you should prove that your bug fix worked, but it doesn't seem logical to dedicate an entire validation case to one small bug fix. You want to write a small test for a small fix. In all of these cases, unit testing fills a unique role. Unit testing increases time spent in development, but decreases the amount of time spent in bug-fi",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:1179,validat,validation,1179,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,2,['validat'],['validation']
Security,"s : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. Name : lapack; Version : 3.9.0-2; Description : Linear Algebra PACKage; Architecture : x86_64; URL : https://www.netlib.org/lapack; Licenses : custom; Groups : None; Provides : None; Depends On : blas; Optional Deps : None; Required By : arpack qrupdate suitesparse; Optional For : None; Conflicts With : None; Replaces : None; Installed Size : 7.03 MiB; Packager : Antonio Rojas <arojas@archlinux.org>; Build Date : Sun 24 Nov 2019 04:13:58 PM IST; Install Date : Sat 22 Feb 2020 01:05:19 PM IST; Install Reason : Installed as a dependency for another package; Install Script : No; Validated By : Signature. Name : openblas; Version : 0.3.8-1; Description : An optimized BLAS library based on GotoBLAS2 1.13 BSD; Architecture : x86_64; URL : https://www.openblas.net/; Licenses : BSD; Groups : None; Provides : blas=3.8.0; Depends On : gcc-libs; Optional Deps : None; Required By : lapack; Optional For : None; Conflicts With : blas; Replaces : None; Installed Size : 17.73 MiB; Packager : Felix Yan <felixonmars@archlinux.org>; Build Date : Wed 12 Feb 2020 01:42:30 PM IST; Install Date : Mon 18 May 2020 06:28:46 PM IST; Install Reason : Explicitly installed; Install Script : No; Validated By : Signature. ```. I tried it without enabling openblas, it did move forward but broke further later in the build with a ridiculously long error message. For the sake of readability I am attaching a [logfile](https://github.com/su2code/SU2/files/4652822/su2_build_NoOpenBlas.log) here. For obvious reasons I think this is because of the `-Denable-pywrapper=true` flag. What is the problem here? I want to build SU2 with all these options available. I am also thinking maybe I should install mpich instead of openmpi to use mpi features.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/991#issuecomment-631053271:2158,Validat,Validated,2158,https://su2code.github.io,https://github.com/su2code/SU2/issues/991#issuecomment-631053271,1,['Validat'],['Validated']
Security,"seems to be a file from UCX, so it's a virtual machine issue I think? If you run SU2 from inside a virtual machine, you have to make sure that the vm has access to more than 2 nodes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2316#issuecomment-2221484343:154,access,access,154,https://su2code.github.io,https://github.com/su2code/SU2/issues/2316#issuecomment-2221484343,1,['access'],['access']
Security,"shell = false doesn't seem to work in this particular case (symbolic linking) but it might in others. There seem more secure ways to run commands but they need case by case treatment. As in the solution for a `cp` command is different from a `ln -s` command. . We can also replace the `os.system` calls with other python functions (for example `os.symlink` for symbolic linking). . Either way, it wont be a simple search and replace. There seem to be about 25 `os.system` calls across the python scripts. Let me try and replace them.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/781#issuecomment-533410018:118,secur,secure,118,https://su2code.github.io,https://github.com/su2code/SU2/pull/781#issuecomment-533410018,2,['secur'],['secure']
Security,"t normal (and a tangent to this normal) the current implementation of BC_Sym cannot be ""exploited"" to serve as an ""inviscid (slip) wall"" for non-straight markers. Using `MARKER_EULER= ( sym )` is not correct either as the gradients of the velocity components (used in the viscous stress tensor of the momentum equations) are not computed correctly for the reflected state. Although using MARKER_EULER in the current develop will give you the same results as the master (or older develop before #657 ) with MARKER_SYM (... as it uses the same implementation). If you pull the ""Preprocessing"" part from the develop Sym_BC into the loop over all vertices of the boundary marker, the unit normal (and tangential) gets recomputed for each vertex. That gives you results which should be a lot closer to what happens in the master. Plus handling the velocity gradient correctly. From my point of view this would be the correct way.; Apply this patch in the root of the latest develop code using `patch -p1 < SymAsInviscidSlipWall.diff` to get the code I mean. [SymAsInviscidSlipWall.diff.txt](https://github.com/su2code/SU2/files/3417354/SymAsInviscidSlipWall.diff.txt). The implementation of the Symmetry_BC could serve double as 'Inviscid (slip) wall' (which is prescribed in the NASA documents) for viscous flow if the 'Preprocessing' part gets recomputed for each boundary vertex. But how to integrate that best is s.th. to discuss. One could just pull it in at some higher computational cost, put a conditional together with a boolean (e.g. SYMMETRY_AS_SLIP_WALL= YES) or fixing and using MARKER_EULER for that case. I hope that clarifies what happens with that boundary. Please let me know if that works for you and fixes the issue. When I fixed the Regression Testcases for #657 i think that this one was not part of it, right? Maybe this validation case goes into the su2code/VandV repo :) . Cheers,Tobi. Edit: I think we can all agree, that it is Toms fault due to his requested changes in the PR üòâ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/735#issuecomment-513801538:2752,validat,validation,2752,https://su2code.github.io,https://github.com/su2code/SU2/issues/735#issuecomment-513801538,1,['validat'],['validation']
Security,"the desired python version with `CONFIGURE_OPTS=--enable-shared pyenv install <version>`. To recap, a ""workflow for newbies"" which appears to be working for me is. 1. install pyenv either from [source](https://github.com/pyenv/pyenv#installation) or from your distibution repositories, if available. IMPORTANT: make sure the environment variables are correctly set and `pyenv init` is added to your shell, as per the installation instructions.; 2. install the desired python version (for example 3.7.8), enabling shared libraries: ; `CONFIGURE_OPTS=--enable-shared pyenv install 3.7.8`; 3. clone/download the [feature_adap](https://github.com/su2code/SU2/tree/feature_adap) branch of SU2;; 4. in the SU2 folder, configure meson ; `./meson.py build` ; and make sure to update the environment variables in your `.bashrc` as indicated by meson's output.; 5. use ninja to build and install SU2 ; `./ninja -C build install`;; if you run into a permission error, specify an installation directory passing the `--prefix` option to meson, as explained [here](https://www.cfd-online.com/Forums/su2-installation/227676-su-installation-failed-due-insufficient-permissions.html). These passages, at least for me, result in a running SU2 with mesh adaptation, although I have made no tests on running actual simulations. That being said, the involvement of pyenv is due to the fact that the provided python wheel for pyamg is for python 3.7 only. If I understand correctly, the library itself is proprietary, sadly, so I assume @bmunguia has access either to the source files or to someone who can package them. Depending on the actual compatibility of the code, it would be nice if the wheel was updated to the latest python version, or at least the dependency on 3.7.* was removed. . @chesiv you can also try checking the logs in the `log.err` and `log.out` files to see if anything has gone wrong. Keep in mind all SU2 output is redirected to them, so you might not get any useful information on your terminal.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-751823130:2450,access,access,2450,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-751823130,1,['access'],['access']
Security,"tructure better. ### The interface; These numerics classes are still abstract and so the outside world only needs to known about their interface:; ```c++; class CNumericsSIMD {; public:; virtual void ComputeFlux(...) const = 0;; };; ```; Any class that wants to be a simd numerics needs to inherit from this base and in so doing is forced to implement `ComputeFlux` (because it is pure virtual). ### Static decorator pattern; Now, in this structure we don't have convective and viscous classes separate. Instead, we have convective schemes that can be ""decorated"" with viscous fluxes. For example:; ```c++; template<int nDim>; class CCompressibleViscousFlux : public CNumericsSIMD {; protected:; void viscousTerms(...) const {...}; };; ```; Here note that this class template is derived from CNumericsSIMD but it does not implement `ComputeFlux`, thus it cannot be instantiated by itself. The idea is that convective schemes can use these viscous fluxes as base class (thereby linking them to CNumericsSIMD) to access the `viscousTerms` method (when we don't want viscous terms we just use a dummy viscous class).; Note also the template parameter `nDim`, this is because we want to create specific versions of the numerical schemes for 2D and 3D (we ""want"" this because it allows static allocation and unrolling loops perfectly). Then convective classes also need to be class templates so that we can programatically change their base class:; ```c++; template<class Base>; class MyConvectiveScheme : public Base {; public:; void ComputeFlux(...) const {; // do my own thing; Base::viscousTerms(...);; // update the linear system with the result; }; };; ```; Now to create an instance of this class template we do for example:; ```c++; auto obj = new MyConvectiveScheme< CCompressibleViscousFlux<2> >(...);; ```; which would create an object for 2D problems with viscous terms. And so we need at least 4 instantiations of these class templates, 2D/3D with or without viscous terms, and this is done in",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721:1100,access,access,1100,https://su2code.github.io,https://github.com/su2code/SU2/pull/1022#issuecomment-699618721,1,['access'],['access']
Security,"tter cannot be avoided. ### Intro to SPMD; This one is simpler, in a nutshell multiple threads operate on the sub domain of an MPI rank.; The typical implementation has each thread executing a chunk of an edge or cell loop. **Why should we care about SPMD?**; Reduce the communication overhead resulting from domain decomposition and improve load balancing, important for strong scaling.; Some algorithms are more efficient that way, e.g. the ADT (as mentioned by Edwin), the current MG also seems to work better on fewer partitions, and additive versions of preconditioners like the ILU or LU-SGS lose effectiveness with number of partitions.; Optimum hardware utilization, for routines that are bandwidth-bound it may be beneficial to use all threads available, while for compute-bound or ""algorithm-bound"" ones this may not be the case. **Relation with algorithms**; A typical edge loop reads from 2 locations and writes to 2 locations (gather / scatter access pattern, not to be confused with the instructions) processing multiple edges at the same time can therefore result in race conditions where multiple threads try to update the data of the same point.; There are 3 ways to address this:; - **Coloring**: Edges are colored (grouped) such that edges of the same color have no risk of race conditions, i.e. each endpoint is referenced only once per color (this definition gives you the basis of a greedy algorithm to color edges).; - **Scatter to gather transformations**: Edge quantities (e.g. fluxes) are computed and stored on one pass (i.e. we read from 2 locations and write to 1), on a second pass, over points, we reduce (e.g. sum) the edge quantities for each point, again a gather access pattern. It may also be possible to convert the entire algorithm to a loop over points instead of edges.; - **Atomic operations or locks**: Here when a thread wants to write to a memory location it either needs to do so atomically (this is essentially an operations that always goes through main ",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/789#issuecomment-529662724:3790,access,access,3790,https://su2code.github.io,https://github.com/su2code/SU2/issues/789#issuecomment-529662724,2,['access'],['access']
Security,"update: validated with the incompressible solver with SA and SST, will add that as a validation and tutorial. To do: validation with a compressible test case.; Future work: validation for heated walls. Less data is available for validation. Let me know if you have a good test case.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1204#issuecomment-811858115:8,validat,validated,8,https://su2code.github.io,https://github.com/su2code/SU2/pull/1204#issuecomment-811858115,5,['validat'],"['validated', 'validation']"
Testability, (78) ; - M Common/include/linear_solvers_structure.inl (15) ; - M Common/include/matrix_structure.hpp (95) ; - M Common/include/matrix_structure.inl (17) ; - M Common/include/option_structure.hpp (1228) ; - M Common/include/primal_grid_structure.hpp (65) ; - M Common/include/primal_grid_structure.inl (37) ; - M Common/include/su2mpi.hpp (29) ; - M Common/include/vector_structure.hpp (20) ; - M Common/include/vector_structure.inl (13) ; - M Common/lib/Makefile.am (28) ; - M Common/lib/Makefile.in (36) ; - M Common/src/config_structure.cpp (2907) ; - M Common/src/dual_grid_structure.cpp (29) ; - M Common/src/geometry_structure.cpp (16033) ; - M Common/src/grid_adaptation_structure.cpp (374) ; - M Common/src/grid_movement_structure.cpp (2754) ; - M Common/src/linear_solvers_structure.cpp (330) ; - M Common/src/matrix_structure.cpp (371) ; - M Common/src/primal_grid_structure.cpp (45) ; - M Common/src/su2mpi.cpp (41) ; - M Common/src/vector_structure.cpp (46) ; - D Doxygen/Doxyfile (2368) ; - M INSTALL (2) ; - D Logo/logo_su2.jpg (0) ; - D Logo/su2_eagle.png (0) ; - M Makefile.am (32) ; - M Makefile.in (53) ; - D MeshTools/Matlab/MergeSU2.m (77) ; - D MeshTools/Matlab/ReadSU2.m (160) ; - D MeshTools/Matlab/WriteSU2.m (91) ; - D MeshTools/Matlab/angle2dcm.m (28) ; - D MeshTools/Matlab/example_MergeMeshes.m (38) ; - D MeshTools/Matlab/getElemTypeInfo.m (52) ; - D MeshTools/Matlab/mesh_bipara_1.su2 (38465) ; - D MeshTools/Matlab/mesh_bipara_2.su2 (3248) ; - D MeshTools/Matlab/plotElem.m (45) ; - D MeshTools/Matlab/plotFace.m (60) ; - D MeshTools/Matlab/plotMarkers.m (64) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.linux_x86_64 (33) ; - D MeshTools/PointwiseSU2plugin/FLAGS.macosx (112) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win (14) ; - D MeshTools/PointwiseSU2plugin/FLAGS.win32 (33) ; - D MeshTools/PointwiseSU2plugin/Makefile (304) ; - D MeshTools/PointwiseSU2plugin/PluginSDK.sln (64) ; - D MeshTools/PointwiseSU2plugin/Plu,MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/174#issuecomment-101443812:12324,Log,Logo,12324,https://su2code.github.io,https://github.com/su2code/SU2/pull/174#issuecomment-101443812,1,['Log'],['Logo']
Testability," ,. thank you very much for your comments. I haven't found any suggestion in literature to clip to only positive values the cross-diffusion term in the w-equation. I understand that it might be more robust, but it is not the standard implementation of the SST model, which is the first thing that we need to achieve. Only then we can build on top of that to improve the robustness of SU2. Nevertheless, I tried the SWBLI test case and I compared the results across 6 different combinations:. 1- develop branch, no changes; 2- develop branch, changes to Supersonic_inlet profile as suggested in #1851 ; 3- my branch, with original CDkw implementation (should give exactly the same result as develop+modified BC); 3- my branch, with original CDkw implementation and using boundary conditions from TMR; 4- my branch, with original CDkw implementation and using your suggestions for lower limits for k and w.; 5- my branch, allowing negative values of CDkw; 6- my branch, allowing negative values of CDkw and using boundary conditions from TMR; 7- my branch, allowing negative values of CDkw and using your suggestions for lower limits for k and w.; 8- my branch, allowing negative values of CDkw, using boundary conditions from TMR and using your suggestions for lower limits for k and w. When my branch is used, then the changes to the supersonic inlet BC are already in place. I haven't achieved convergence with 1, 2 and 3. More precisely, 1 diverged right away (after 30 iterations), while 2 and 3 gave ""FGMRES - Orthogonalization Failed"" after 900ish iterations. Here you can see the residuals for the different combinations. ![OrigCDkw](https://github.com/user-attachments/assets/18836f37-5fa5-4523-bee2-8f0c420d4080). ![NegCDkw](https://github.com/user-attachments/assets/4ba446a0-f77d-4f06-bcc2-cdd499839f82). Unfortunately I will be busy with the AIAA Conference next week, thus I don't know how much I will be able to work on this. The next test case will be the 2D airfoil near-wake from TMR.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2329#issuecomment-2252804531:1973,test,test,1973,https://su2code.github.io,https://github.com/su2code/SU2/pull/2329#issuecomment-2252804531,1,['test'],['test']
Testability," -1; cmap[28853] == -1; cmap[28858] == -1; cmap[28966] == -1; cmap[28989] == -1; cmap[28943] == -1; cmap[28915] == -1; cmap[28950] == -1; cmap[28923] == -1; cmap[28871] == -1; cmap[28941] == -1; cmap[28887] == -1; cmap[28889] == -1; cmap[37] == -1; cmap[32342] == -1; cmap[24652] == -1; cmap[50507] == -1; cmap[51850] == -1; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun detected that one or more processes exited with non-zero status, thus causing; the job to be terminated. The first process to do so was:. Process name: [[57069,1],11]; Exit code: 254; --------------------------------------------------------------------------; ```. When I check the `log.out`, I see that it occurs when calling ParMETIS (`log.err` is empty):; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 7860157 grid points before partitioning.; 11486658 volume elements before partitioning.; 3 surface markers.; 32148 boundary elements in index 0 (Marker = BODY).; 76160 boundary elements in index 1 (Marker = FARFIELD).; 291440 boundary elements in index 2 (Marker = SYMMETRY).; Executing the partitioning functions.; Building the graph adjacency structure.; Calling ParMETIS...; ```. I figured that that this might not be an AMG issue but a 7.0.3 build issue, so I tried running `mpirun --use-hwthread-cpus -n 40 /opt/su2/SU2v7_adap/bin/SU2_CFD inv_test.cfg` on its own and also got a similar error:; ```; ------------------- Geometry Preprocessing ( Zone 0 ) -------------------; Three dimensional problem.; 7860157 grid points before partitioning.; 11486658 volume elements before partitioning.; 3 surface markers.; 32148 boundary elements in inde",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/948#issuecomment-754504570:2685,log,log,2685,https://su2code.github.io,https://github.com/su2code/SU2/issues/948#issuecomment-754504570,1,['log'],['log']
Testability," PR. And‚Ä¶ do not worry too much (or at all)... we are doing this for free and for fun! As you know, after a major release we always find this kind of small bugs. The big picture is that thanks to you we all enjoy an awesome multipoint optimization capability! Thanks!. Best,; Francisco. > On Mar 25, 2018, at 6:04 PM, Heather Kline <notifications@github.com> wrote:; > ; > @hlkline commented on this pull request.; > ; > In SU2_PY/SU2/eval/design.py <https://github.com/su2code/SU2/pull/519#discussion_r176962282>:; > ; > > @@ -364,7 +364,7 @@ def obj_df(dvs,config,state=None):; > # For multiple objectives are evaluated one-by-one rather than combined; > # MARKER_MONITORING should be updated to only include the marker for i_obj; > # For single objectives, multiple markers can be used ; > - config['MARKER_MONITORING'] = marker_monitored[i_obj]; > + if (n_obj>1): config['MARKER_MONITORING'] = marker_monitored[i_obj]; > @fpalacios <https://github.com/fpalacios> yes, I commented a bit too quickly; I do see the behavior that you mention. I think the line previously mentioned helps with getting the value of the objective but not the gradient.; > While I was testing this on my end I also noticed that there is an issue if you list the same objective multiple times (for example, if you wanted to weight the drag contribution from one surface more than another), where since it has the same key the previous dict entry is overwritten. Do you mind if I add an error catching that to your PR?; > ; > I am taking a look back through it but so far I think your solution will be good - and better to fix the performance in master now and worry about elegant improvements in the develop branch.; > ; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/su2code/SU2/pull/519#discussion_r176962282>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AccuRlzQ3wEuDogzT35DALgoNbrSv32Xks5tiD64gaJpZM4S4O1W>.; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/519#issuecomment-376023020:1223,test,testing,1223,https://su2code.github.io,https://github.com/su2code/SU2/pull/519#issuecomment-376023020,1,['test'],['testing']
Testability," You want to check if your new behavior behaves as you; > suspect before you throw a lot of resources at it.; > - You submit a PR and discover that one of the regression tests has; > failed. But...why? You know that something is broken, but its hard to track; > down what broke. You want more granular test coverage that can demonstrate; > what broke.; > - You are fixing a very small bug. You know that you should prove that; > your bug fix worked, but it doesn't seem logical to dedicate an entire; > validation case to one small bug fix. You want to write a small test for a; > small fix.; >; > In all of these cases, unit testing fills a unique role. Unit testing; > increases time spent in development, but decreases the amount of time spent; > in bug-fixing and maintaining.; >; > For more information, see this relevant Stack Exchange question.; > <https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>; > What do I propose?; >; > My research group at UT Austing has implemented a unit testing framework; > on our branch, which we're happy with. Some choices were arbitrary, and; > some choices were made based on our development environment. Those choices; > may be different for other groups. Here's what we have done:; >; > The unit testing framework is compiled and run using autotools. For more; > information on autotool's setup, see their documentation; > <https://www.gnu.org/software/automake/manual/html_node/Tests.html>.; > Since autotools is the build system for SU2, this involves minimal changes.; >; > Using automake, the build process for building unit tests becomes:; >; > '''; > ./bootstrap; > ./configure; > make; > make check; > '''; >; > We use Boost's unit testing framework; > <https://www.boost.org/doc/libs/1_70_0/libs/test/doc/html/index.html>.; > This provides a convenient set of macros for instatiating tests, grouping; > tests into suites, and running checks. This choice was based on what is; > avail",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:3428,test,tests-for-scientific-research-codes,3428,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,4,['test'],"['testing', 'tests-for-scientific-research-codes']"
Testability," are first added to; > document the related existing behavior. These tests serve to check that the; > existing behavior isn't damaged by the new code. Then new tests are added; > to prove that the new behavior is working correctly. For bug fixes, the; > process is simpler. A test is added to confirm that something is not; > behaving as expected. Then the code is fixed to make the test pass.; > What frameworks are available?; >; > For a unit testing framework, here are the most popular options, with the; > following pros and cons:; > Roll-your-own; >; > - Requires no external dependencies; > - The most flexible option; > - Involves the most work to setup; > - Will lack some of the more advances features of mature unit-testing; > frameworks.; >; > Boost Test; >; > - Can be header only, statically linked, or dynamically linked; > - If statically or dynamically linked, then Boost is not very; > lightweight; > - Easy to add if you're already using Boost; >; > Google Test; >; > - Most common unit-testing framework; > - Can be easily combined with Google's powerful GMock mocking library; > - Compiling and linking can be somewhat painful; >; > Catch2; >; > - Used by FEniCS; > - Makes unit tests easily readable with lots of syntactic sugar.; > - Has a very simple syntax; > - Is header-only; > - Requires C++11 compilation; > - Not as feature rich as Google Test or Boost Test; >; > Questions; >; > - How do developers feel about adding unit tests to SU2?; > - If a unit-testing framework were added to SU2, would you actually; > use it?; > - Do developers have a preference (or experience with) any of the unit; > testing frameworks?; > - Should unit tests be expected when submitting PRs?; >; > ‚Äî; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/issues/698?email_source=notifications&email_token=AA5FFRG5U3Z55N4W2XWQED3PY3LJ5A5CNFSM4HTDQXQKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW4",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:5795,Test,Test,5795,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,8,"['Test', 'mock', 'test']","['Test', 'mocking', 'testing', 'tests']"
Testability," case, we would have something along the lines of: . a) NACA0012; i) 113 x 33; ii) 225 x 65 ; iii) 449 x 129; iv) ... This way we have a family of meshes and configuration files that are specifically built for the purpose of validating the code and comparing with other solvers. I might be useful to compress meshes that are larger than a certain size (say 10MB). We should also put a limit on the size of a single mesh that the repository can handle (say 50MB?). . Within the home directory, the README file should list all the cases in the repository, who the custodian of the test case is (person with meshes in case the meshes are too large), and which version it was last run on. . I thought about splitting it up into Verification cases and Validation cases, but I thought it would be more informative and intuitive to split up according to the physics of the simulations. My thinking might be limited because that's how I have seen the TestCases folder organized, so any other suggestions are welcome. I think it is imperative that this is accompanied with a section on the SU2 website that showcases just the results of the validation test cases (grid convergence studies, residual reductions etc) and links to the v&v repo appropriately. This way, if people are just inquisitive about SU2's performance, they can get a quick snapshot of the results, without the need to run the cases themselves. . I also wanted to broach the topic of convergence here. Would it be a good idea to standardize the termination criteria wherever possible? For example, in the NACA0012 case we can ensure that residuals are reduced by 8 orders of magnitude for all meshes. Or for the ONERAM6, we use Cauchy convergence and make sure the C_L is converged to 6 orders of magnitude. This would have to be flexible since the same level of convergence might not apply to all the cases in the repository. But for within a test case, I think it would be good to use the same convergence criteria for a family of meshes.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/581#issuecomment-426026053:1768,test,test,1768,https://su2code.github.io,https://github.com/su2code/SU2/issues/581#issuecomment-426026053,4,['test'],['test']
Testability," choice was based on what is available in our development setup. We have integrated our unit tests into our Travis CI regression testing. Every time we push commits or submit a pull request, the unit tests are run and checked. What is my vision for unit testing in SU2?. I am not proposing that we start trying to get 100% code coverage with pre-existing code. That would not provide a good return on investment. Instead, I see people adding unit tests as they write new code and as they find bugs. For each new behavior added to SU2, tests are first added to document the related existing behavior. These tests serve to check that the existing behavior isn't damaged by the new code. Then new tests are added to prove that the new behavior is working correctly. For bug fixes, the process is simpler. A test is added to confirm that something is not behaving as expected. Then the code is fixed to make the test pass. What frameworks are available?. For a unit testing framework, here are the most popular options, with the following pros and cons:. Roll-your-own. * Requires no external dependencies; * The most flexible option; * Involves the most work to setup; * Will lack some of the more advances features of mature unit-testing frameworks. Boost Test. * Can be header only, statically linked, or dynamically linked; * If statically or dynamically linked, then Boost is not very lightweight; * Easy to add if you're already using Boost. Google Test. * Most common unit-testing framework; * Can be easily combined with Google's powerful GMock mocking library; * Compiling and linking can be somewhat painful. Catch2. * Used by FEniCS; * Makes unit tests easily readable with lots of syntactic sugar.; * Has a very simple syntax; * Is header-only; * Requires C++11 compilation; * Not as feature rich as Google Test or Boost Test. Questions. * How do developers feel about adding unit tests to SU2?; * If a unit-testing framework were added to SU2, would you actually use it?; * Do developers hav",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:4277,test,testing,4277,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,2,['test'],['testing']
Testability," commit (use ""git add"" and/or ""git commit -a""). Jairos-Mac-mini:SU2 jaspe$ git commit -am ""This is an update of .travis.yml; for feature_force_read_target_on_AD."". [feature_force_read_target_on_AD 3f2115373] This is an update of; .travis.yml for feature_force_read_target_on_AD. 1 file changed, 2 insertions(+), 2 deletions(-); After that, I issued git push origin feature_force_read_target_on_AD, and; got the error message:. To https://github.com/su2code/SU2.git. ! [rejected] feature_force_read_target_on_AD ->; feature_force_read_target_on_AD (fetch first). error: failed to push some refs to 'https://github.com/su2code/SU2.git'. hint: Updates were rejected because the remote contains work that you do. hint: not have locally. This is usually caused by another repository pushing. hint: to the same ref. You may want to first integrate the remote changes. hint: (e.g., 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details.; I issued then git pull origin develop, to merge changes in remote to my; local branch, successfully , but a new git push origin; feature_force_read_target_on_AD, produced the same error message.; Would be the first commit command enough?. With kind regards,. Jairo. On Tue, Oct 30, 2018 at 7:25 PM Thomas D. Economon <notifications@github.com>; wrote:. > Hi @jaspe55 <https://github.com/jaspe55> - thanks for the first; > contribution!; >; > Can you please switch the email and branch name in .travis.yml back to; > su2code-dev@lists.stanford.edu and develop, respectively? That should get; > the tests running so we can give this a proper review (should be quick; > given the small change).; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/su2code/SU2/pull/600#issuecomment-434492415>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/Ac180sVTNXVIdfr1Oo3wVM2qGfepSGfIks5uqNHngaJpZM4X34F2>; > .; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/600#issuecomment-434929137:1983,test,tests,1983,https://su2code.github.io,https://github.com/su2code/SU2/pull/600#issuecomment-434929137,1,['test'],['tests']
Testability," commits or submit a pull request, the unit tests are run and checked. What is my vision for unit testing in SU2?. I am not proposing that we start trying to get 100% code coverage with pre-existing code. That would not provide a good return on investment. Instead, I see people adding unit tests as they write new code and as they find bugs. For each new behavior added to SU2, tests are first added to document the related existing behavior. These tests serve to check that the existing behavior isn't damaged by the new code. Then new tests are added to prove that the new behavior is working correctly. For bug fixes, the process is simpler. A test is added to confirm that something is not behaving as expected. Then the code is fixed to make the test pass. What frameworks are available?. For a unit testing framework, here are the most popular options, with the following pros and cons:. Roll-your-own. * Requires no external dependencies; * The most flexible option; * Involves the most work to setup; * Will lack some of the more advances features of mature unit-testing frameworks. Boost Test. * Can be header only, statically linked, or dynamically linked; * If statically or dynamically linked, then Boost is not very lightweight; * Easy to add if you're already using Boost. Google Test. * Most common unit-testing framework; * Can be easily combined with Google's powerful GMock mocking library; * Compiling and linking can be somewhat painful. Catch2. * Used by FEniCS; * Makes unit tests easily readable with lots of syntactic sugar.; * Has a very simple syntax; * Is header-only; * Requires C++11 compilation; * Not as feature rich as Google Test or Boost Test. Questions. * How do developers feel about adding unit tests to SU2?; * If a unit-testing framework were added to SU2, would you actually use it?; * Do developers have a preference (or experience with) any of the unit testing frameworks?; * Should unit tests be expected when submitting PRs?. ‚Äî; You are receiving this bec",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:4543,test,testing,4543,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,2,['test'],['testing']
Testability," committed to the develop branch.; > > * When a developer wants to implement something new, they create a new branch from develop, implement their thing, and merge it again with develop. You see that happening here, in the top of the page you see; > > ; > > > [pcarruscag](https://github.com/pcarruscag) wants to merge 2 commits into [develop](https://github.com/su2code/SU2/tree/develop) from [supersonic_profile](https://github.com/su2code/SU2/tree/supersonic_profile); > > ; > > ; > > You see in the section _Files Changed_ the changes compared to the current develop branch. This shows that this branch is up to date with current develop, only the new changes for the inlet profile show up.; > > I did not go through the code yet, but when you run it without having an inlet.dat file present, it should create one for you filled with a uniform profile. When you then use this file unaltered, does that work?; > ; > Hi, I got how the branches work. In this case, I first downloaded the 'develop' branch to make sure everything is consitent with Pedro, and then I downloaded and replaced the 6 new committed files that related to the supersonic inlet profile development. The code should be totally the same at this point. And I did a flat plate test, which actually I need to fill a uniform profile, since the code would only generated an empty one. However, a segment error still occurs, and I attched the error file with Valgrind output. The test files are on the above conversations so that you may also take a try. Thanks for the help! [error.txt](https://github.com/user-attachments/files/16323710/error.txt). From the error, I think The SU2_CFD encountered an invalid memory read operation during an attempt to read the inletUNI.dat file, causing the program to crash with a segment error (SIGSEGV). The specific error occurs in the CConfig::GetInletPtotal function, which seems attempts to access memory that has not been properly initialized or allocated. Any ideas? @pcarruscag @bigfooted",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/2327#issuecomment-2241548890:1671,test,test,1671,https://su2code.github.io,https://github.com/su2code/SU2/pull/2327#issuecomment-2241548890,2,['test'],['test']
Testability," first added to document the related existing behavior. These tests serve to check that the existing behavior isn't damaged by the new code. Then new tests are added to prove that the new behavior is working correctly. For bug fixes, the process is simpler. A test is added to confirm that something is not behaving as expected. Then the code is fixed to make the test pass. What frameworks are available?. For a unit testing framework, here are the most popular options, with the following pros and cons:. Roll-your-own. * Requires no external dependencies; * The most flexible option; * Involves the most work to setup; * Will lack some of the more advances features of mature unit-testing frameworks. Boost Test. * Can be header only, statically linked, or dynamically linked; * If statically or dynamically linked, then Boost is not very lightweight; * Easy to add if you're already using Boost. Google Test. * Most common unit-testing framework; * Can be easily combined with Google's powerful GMock mocking library; * Compiling and linking can be somewhat painful. Catch2. * Used by FEniCS; * Makes unit tests easily readable with lots of syntactic sugar.; * Has a very simple syntax; * Is header-only; * Requires C++11 compilation; * Not as feature rich as Google Test or Boost Test. Questions. * How do developers feel about adding unit tests to SU2?; * If a unit-testing framework were added to SU2, would you actually use it?; * Do developers have a preference (or experience with) any of the unit testing frameworks?; * Should unit tests be expected when submitting PRs?. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/su2code/SU2/issues/698?email_source=notifications&email_token=AA5FFRG5U3Z55N4W2XWQED3PY3LJ5A5CNFSM4HTDQXQKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4GXUGGLA>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AA5FFRHOPE2MUJ2Z5RRV4HTPY3LJ5ANCNFSM4HTDQXQA>.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:4969,test,tests,4969,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,12,"['Test', 'test']","['Test', 'testing', 'tests']"
Testability," in advance!; > > ; > > ; > > Hi @rois1995 Of course! However, I'm still under testing, so I can't guarantee the result if the numerical scheme or the other options are changed. Which configuration file would you want?; > > By any chance, are you implementing or developing a transition model? Can you tell me what model you are willing to use if it's a model implementation? My next goal is to implement the AFT model or the k-w-gamma model, but I'm trying to implement a k-w-gamma model because it seems like the AFT model is being implemented by the other developer.; > ; > If you could send me the config files for the T3A, T3A- and NLF test cases it would be awesome!; > ; > I have implemented the same model as yours, the LM model, in parallel to you 'cause I needed it for some simulations. I also tried implementing the same version but related to the SA turbulence model, however it still is bothering me that I cannot seem to get good results on it.; > ; > If you want, I also tried the prolate spheroid test-case with good results. If you need I can give the configs and the meshes. The only thing about this test-case is that it is more related to the cross-flow transition, thus it needs to be implemented, which I think I'll do in these days.; > ; > I think that the k-w-gamma model is the way to go right after the implementation of the LM model since it has lots of equations in common. Do you think that you need another class for it or you will write on the same classes that you have already built (like the CTransLMSolver)?. The test case(T3A, T3A-, and NLF-0416) configuration files were uploaded to my git repository. Here is the [link](https://github.com/sun5k/SU2/tree/develop/TestCases/transition ). Suggestions for the prolate spheroid test-case is appreciated. However, my transition model is the LM-2009, and I have no plans for the 2015-LM model. Therefore, the cross-flow transition is left for future developers. I think the CTransGammaSolver, CTransGSolver, or the othe",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1592#issuecomment-1201919830:1214,test,test-case,1214,https://su2code.github.io,https://github.com/su2code/SU2/pull/1592#issuecomment-1201919830,1,['test'],['test-case']
Testability," mainly because of the stuff that GitHub generates to track the files. Easy to maintain/access alternatives are very welcome. Some releases ago, the grids were in another place (or lab server) and in Github we only had the config files, unfortunately we checked that for some users it was frustrating to download the config files and then go to another place to download the grids. From our practical point of view, the current setting is ideal to run the regression tests. But we are open to any change that benefits the SU2 users/developers community. . Now, it is very easy to download and modify the TestCases (keep in mind that the options in the config files change frequently) but, the price to pay is a large GitHub repository that it is difficult to download if you don‚Äôt have a good internet connection. Anyway, I think you are coming to Stanford in one week, it would be great to chat with you. We would love to have you and your group as a SU2 developer/user. Looking forward to meeting you and thanks for testing SU2. Best; Francisco. ## . Dr. Francisco Palacios; Engineering Research Associate at Stanford University; AIAA Senior Member, SIAM Member, and SU2 lead developer; Editorial Board Member for Scientific Report (Nature Publishing Group); Intel Parallel Computing Center. Personal webpage: http://adl.stanford.edu/people/fpalacios.html; SU2 webpage: http://su2.stanford.edu/. Department of Aeronautics and Astronautics; Durand Building. Room 357; Stanford University; Stanford CA 94305; United States. On Feb 3, 2015, at 1:32 PM, Lorena A. Barba notifications@github.com wrote:. > And why is your Test repo so large?; > Perhaps some data files would be happier living elsewhere?; > ; > I'm thinking that if your Tests load large mesh files, for example, these mesh files could be placed in a data repository (like Figshare, Data Dryad, Zenodo), and your configuration files for each test could fetch the data it needs. I would imagine that the input data does not change often (o",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/152#issuecomment-72909446:1138,test,testing,1138,https://su2code.github.io,https://github.com/su2code/SU2/issues/152#issuecomment-72909446,1,['test'],['testing']
Testability," of time spent; > in bug-fixing and maintaining.; >; > For more information, see this relevant Stack Exchange question.; > <https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>; > What do I propose?; >; > My research group at UT Austing has implemented a unit testing framework; > on our branch, which we're happy with. Some choices were arbitrary, and; > some choices were made based on our development environment. Those choices; > may be different for other groups. Here's what we have done:; >; > The unit testing framework is compiled and run using autotools. For more; > information on autotool's setup, see their documentation; > <https://www.gnu.org/software/automake/manual/html_node/Tests.html>.; > Since autotools is the build system for SU2, this involves minimal changes.; >; > Using automake, the build process for building unit tests becomes:; >; > '''; > ./bootstrap; > ./configure; > make; > make check; > '''; >; > We use Boost's unit testing framework; > <https://www.boost.org/doc/libs/1_70_0/libs/test/doc/html/index.html>.; > This provides a convenient set of macros for instatiating tests, grouping; > tests into suites, and running checks. This choice was based on what is; > available in our development setup.; >; > We have integrated our unit tests into our Travis CI regression testing.; > Every time we push commits or submit a pull request, the unit tests are run; > and checked.; > What is my vision for unit testing in SU2?; >; > I am *not* proposing that we start trying to get 100% code coverage with; > pre-existing code. That would not provide a good return on investment.; >; > Instead, I see people adding unit tests as they write new code and as they; > find bugs. For each new behavior added to SU2, tests are first added to; > document the related existing behavior. These tests serve to check that the; > existing behavior isn't damaged by the new code. Then new tests are added; > to prove that",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:4241,test,testing,4241,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['test'],['testing']
Testability," or formal verification tests.; > Instead, it serves a unique purpose. Consider the three following use cases:; >; > - You're developing a new feature, and you want to test it to see if; > it works. You could do a full simulation, but that takes a lot of time and; > computing power. You want to check if your new behavior behaves as you; > suspect before you throw a lot of resources at it.; > - You submit a PR and discover that one of the regression tests has; > failed. But...why? You know that something is broken, but its hard to track; > down what broke. You want more granular test coverage that can demonstrate; > what broke.; > - You are fixing a very small bug. You know that you should prove that; > your bug fix worked, but it doesn't seem logical to dedicate an entire; > validation case to one small bug fix. You want to write a small test for a; > small fix.; >; > In all of these cases, unit testing fills a unique role. Unit testing; > increases time spent in development, but decreases the amount of time spent; > in bug-fixing and maintaining.; >; > For more information, see this relevant Stack Exchange question.; > <https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>; > What do I propose?; >; > My research group at UT Austing has implemented a unit testing framework; > on our branch, which we're happy with. Some choices were arbitrary, and; > some choices were made based on our development environment. Those choices; > may be different for other groups. Here's what we have done:; >; > The unit testing framework is compiled and run using autotools. For more; > information on autotool's setup, see their documentation; > <https://www.gnu.org/software/automake/manual/html_node/Tests.html>.; > Since autotools is the build system for SU2, this involves minimal changes.; >; > Using automake, the build process for building unit tests becomes:; >; > '''; > ./bootstrap; > ./configure; > make; > make check; >",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:3153,test,testing,3153,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['test'],['testing']
Testability," revision e6e6e6b are very small, aside from an extra test file. But revision d1e3a18 fails the regression tests and revision e6e6e6b passes the regression tests. Specifically, it's only the CHT incompressible case that's failing. The test results show:. test_vals (stored): 0.000000, 0.000000, -7.685301, -12947.783696; sim_vals (computed): 0.000000, 0.000000, -7.685301, -12947.783678 ; delta_vals: 0.000000, 0.000000, 0.000000, 0.000018. It's only the total heat flux that's different, and it's only off by 1E-7%. I believe that these changes are due to floating-point errors. To check and make sure nothing is going crazy, I ran the test case under both the develop and the PR branches. When I compared the solution files, I couldn't find any points where the solution differed by more than 0.0003%. The differences seem to be very small. The two differences between revision d1e3a18 and revision e6e6e6b can be summarized as follows:. 1. In the `CNumerics::GetViscousIncProjJacs()` calculation on the develop branch, a quantity called `theta` is calculated. `theta` is the magnitude of the `val_normal` parameter, squared. The catch is that `val_normal` is passed as a unit vector (named `UnitNormal` in `CAvgGradInc_Flow::ComputeResidual`). So `theta` should always be equal to one, with some floating point errors. In the failing revision, the value is set explicitly to one. In the passing revision, the magnitude is calculated explicitly. I checked, and the difference between `theta` and 1.0 is always of the order 1E-16 or less.; 2. The second change affects where the area is multiplied into the Jacobian. When the area is multiplied at a later stage, very small differences in the calculated quantities appear. I don't like revision e6e6e6b, and I would like to revert it. The question then is how to update the tests. We could just update the regression test values, but I would propose fixing the regression test. It seems to be sensitive to what I believe are unimportant differences.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/626#issuecomment-444655022:2020,test,tests,2020,https://su2code.github.io,https://github.com/su2code/SU2/pull/626#issuecomment-444655022,3,['test'],"['test', 'tests']"
Testability," stay healthy and well and I hope to meet you in person next time we have a meeting (fingers crossed‚Ä¶.maybe next year?). Best wishes, Juan; > [‚Ä¶](#); > On Jun 18, 2020, at 1:27 AM, SaettaE ***@***.***> wrote: Proposed Changes Addition of a new actuator disk model with a variable load and swirl distributions along disk radius. Contributors: Theoretical and Applied Aerodynamic Research Group (TAARG) of University of Naples Federico II. EttoreSaetta, lorenzorusso07, rtogna. Related Work Introduction of new options in the config. file. Introduction of an additional input file that contains the propeller data. Introduction of additional c++ functions. Addition of code lines to existing functions preserving the original actuator disk model. PR Checklist [X ] I am submitting my contribution to the develop branch. My contribution generates no new compiler warnings (try with the '-Wall -Wextra -Wno-unused-parameter -Wno-empty-body' compiler flags). [ X] My contribution is commented and consistent with SU2 style. I have added a test case that demonstrates my contribution, if necessary. I have updated appropriate documentation (Tutorials, Docs Page, config_template.cpp) , if necessary. You can view, comment on, or merge this pull request online at: #1027 <#1027> Commit Summary Update config_template.cfg File Changes M config_template.cfg <https://github.com/su2code/SU2/pull/1027/files#diff-2c2f226c0183e7633cf165c6d3862450> (5) Patch Links: https://github.com/su2code/SU2/pull/1027.patch <https://github.com/su2code/SU2/pull/1027.patch> https://github.com/su2code/SU2/pull/1027.diff <https://github.com/su2code/SU2/pull/1027.diff> ‚Äî You are receiving this because you are subscribed to this thread. Reply to this email directly, view it on GitHub <#1027>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AA5FFRGLBAHYBVTV3GBSLATRXHFYXANCNFSM4OBLB3CQ>. Thank you very much, I hope we can give an useful contribution.; I hope to see you in person too. Best regards,; Ettore",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/pull/1027#issuecomment-646601487:1331,test,test,1331,https://su2code.github.io,https://github.com/su2code/SU2/pull/1027#issuecomment-646601487,1,['test'],['test']
Testability," testing in SU2?. I am not proposing that we start trying to get 100% code coverage with pre-existing code. That would not provide a good return on investment. Instead, I see people adding unit tests as they write new code and as they find bugs. For each new behavior added to SU2, tests are first added to document the related existing behavior. These tests serve to check that the existing behavior isn't damaged by the new code. Then new tests are added to prove that the new behavior is working correctly. For bug fixes, the process is simpler. A test is added to confirm that something is not behaving as expected. Then the code is fixed to make the test pass. What frameworks are available?. For a unit testing framework, here are the most popular options, with the following pros and cons:. Roll-your-own. * Requires no external dependencies; * The most flexible option; * Involves the most work to setup; * Will lack some of the more advances features of mature unit-testing frameworks. Boost Test. * Can be header only, statically linked, or dynamically linked; * If statically or dynamically linked, then Boost is not very lightweight; * Easy to add if you're already using Boost. Google Test. * Most common unit-testing framework; * Can be easily combined with Google's powerful GMock mocking library; * Compiling and linking can be somewhat painful. Catch2. * Used by FEniCS; * Makes unit tests easily readable with lots of syntactic sugar.; * Has a very simple syntax; * Is header-only; * Requires C++11 compilation; * Not as feature rich as Google Test or Boost Test. Questions. * How do developers feel about adding unit tests to SU2?; * If a unit-testing framework were added to SU2, would you actually use it?; * Do developers have a preference (or experience with) any of the unit testing frameworks?; * Should unit tests be expected when submitting PRs?. ‚Äî; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:4569,Test,Test,4569,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,1,['Test'],['Test']
Testability," the solution at the inlet corner is completely wrong, while the outlet is ok most likely because characteristics are outgoing as it is supersonic. The artifacts disappear if we disable MUSCL everywhere (1st order solution) or disable it only on boundaries (not ideal solution, but disabling only on corners would still be good enough for now I believe). Using ```WEIGHTED_LEAST_SQUARES``` seems to not present the same issue, in this test case at least, as the stencil ""does not care"" about the boundary states. The boundary conditions are:; - ```MARKER_SYMMETRY``` at centerline; - ```MARKER_EULER``` at wall; - ```MARKER_RIEMANN= (INLET, TOTAL_CONDITIONS_PT, 904388, 542.13, 1.0, 0.0, 0.0)``` at inlet; - ```MARKER_RIEMANN= (OUTLET, STATIC_PRESSURE, 200000.0, 0.0, 0.0, 0.0, 0.0)``` at outlet. I tried both with and without a slope limiter as there are no discontinuities, but it makes no difference on the artifacts:. ```; SLOPE_LIMITER_FLOW= VENKATAKRISHNAN_WANG; VENKAT_LIMITER_COEFF= 0.1; ```. # Complete test case ZIP; [mdm_coolprop_nozzle.zip](https://github.com/su2code/SU2/files/15403732/mdm_coolprop_nozzle.zip). # Inlet pressure zoom; ![Screenshot from 2024-05-22 15-06-36](https://github.com/su2code/SU2/assets/79575547/9ba71127-cb12-4c5f-8e49-3ea9e839b1f4). # Notation: ; - ""1st order"" no MUSCL; - ""2nd order"" MUSCL as implemented in SU2; - ""2nd order (BC 1st order)"" I simply disabled MUSCL on ALL physical boundaries in the upwind residual computations, see code snippet below. # Proof of concept code modification for ""2nd order (BC 1st order)"":; To show that the error lies in MUSCL/gradients at boundaries I added these two lines of code in the upwind gradient computation; ![image](https://github.com/su2code/SU2/assets/79575547/27f2a79b-824d-4a32-a626-73cd87750c0c). # Residuals:; ![image](https://github.com/su2code/SU2/assets/79575547/3f0800fe-478e-433d-8495-cd4964d0f8ee). # Mesh:; ![image](https://github.com/su2code/SU2/assets/79575547/0ebaf86b-fbf9-40b1-aeb9-8764a90a1440)",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/2285#issuecomment-2124781449:1320,test,test,1320,https://su2code.github.io,https://github.com/su2code/SU2/issues/2285#issuecomment-2124781449,2,['test'],['test']
Testability," this case with the NACA 0012 airfoil, the reduced frequency (k=0.0814) is lower than the previous case and the amplitude is slightly higher at 2.51deg. . [pitching_NACA0012.zip](https://github.com/su2code/SU2/files/3963762/pitching_NACA0012.zip); ![NACA0012_CL](https://user-images.githubusercontent.com/33747655/70848145-115c1900-1e65-11ea-9f5d-7e73e6ac349e.png). Once again, using reference from computational and experimental results, the lift results are very similar for both boundary conditions. For this case, moment results were also available. . ![NACA0012_CM](https://user-images.githubusercontent.com/33747655/70848146-115c1900-1e65-11ea-9e24-4c55550ee945.png). The sign convention was inverted in the paper and neither BC matched exactly to the reference which had a coarser mesh than the one used here but the Euler wall looks to be in better agreement with the reference and captures the overall shape. I've attached the case files for this as well and it would be interesting to see the results when run with the change you've made to reproduce the same convective flux strategy at the boundary. As a final test I ran the rotating frame case, again from @economon 's thesis which is a steady problem with simulated grid motion. I was able to run and replicate the flow characteristics using the Euler wall boundary condition but with symmetry plane the residuals were straightaway at machine precision and the flow never develops around the airfoil. [rotating_frame.zip](https://github.com/su2code/SU2/files/3963763/rotating_frame.zip). Overall from these 2D airfoil cases, there are some unexpected variations between the two boundary conditions. A closer look at grid motion with the symmetry plane is needed. It would also be interesting to run the cases with symmetry plane using the convective flux residuals calculated in the same way as the Euler wall to see if that takes them closer to the original results, similarly as seen in the fixed grid problem. Best wishes,; Charanya",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/828#issuecomment-565716260:3150,test,test,3150,https://su2code.github.io,https://github.com/su2code/SU2/issues/828#issuecomment-565716260,1,['test'],['test']
Testability," to SU2 in one of our branches. >@pcarruscag; >(...) being able to use PETSc or HYPRE would be interesting as it would give us access to AMG, and @talbring 's branch feature_template_linear_solver would make such an integration compatible with AD. (...). >@EduardoMolina; >(...) When Brian (@bmunguia ) and I mentioned PETSc, it was an idea to try a different Newton-Krylov (with preconditioner) library in order to improve the convergence of SU2.; Since the slow convergence of the SU2-FV is the main feedback that I received from other users from industry and academia, I think it worth try an external library and evaluate the performance. (...). >@pcarruscag ; >(...) That is something I am also interested in as for some of my structural cases the current linear solvers simply do not converge. (...). >@economon ; >I would add one practical comment for consideration: it is worth checking whether the main restriction we have is related to approximations in the Jacobian that limit the effective CFL we can use or whether the convergence of the linear solver itself is a problem (speed or complete lack of convergence). A quick test without resorting to another library is to increase the fill-in for ILU-preconditioned GMRES, which is very expensive/slow but should converge difficult problems, and to check how high we can take the CFL when allowing each nonlinear iteration to converge to a tight tolerance in the linear solver, say 1e-14 (you can output the linear solver residuals to verify convergence). If we can take the CFL higher with a more performant linear solver, then it could be worth the effort to try other options.; >If the CFL must remain low for stability, then perhaps we should look at the quality of the Jacobians we construct to see if we can improve, or even try exact Jacobians with AD if we can afford it. A more advanced CFL ramping strategy could also be helpful here to get us closer to a solution before trying to aggressively converge. I think that is everyone.",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/648#issuecomment-460853218:3453,test,test,3453,https://su2code.github.io,https://github.com/su2code/SU2/issues/648#issuecomment-460853218,2,['test'],['test']
Testability," to construct my custom BC inheriting from one of the existing ones. Put this new BC_TYPE boundary condition in my dynamically-linked library.; > ; > * BUT no recompiling of SU2_CFD; the program should provide facilities to dynamically load libs at RUNTIME (e.g. list of custom ibs in case config file).; > ; > * Now, switching between my custom BC types and the standard ones only requires to edit the config file. For example, the inlet BC of the SA turbulence model is defined in CTurbSASolver::BC_Inlet(); We can place this definition in a separate file bcinit.cpp and dynamically link this file so you have a libbcinit.so file. SU2 knows about libbcinit.so and BC_Inlet() at compile time. ; In your testcases directory, you can put a copy of bcinit.cpp and redefine the boundary condition BC_Inlet. If you change the boundary condition, you only compile bcinit.cpp in your testcase directory and create a libbcinit.so in your testcase directory. You then make sure that when SU2 is looking for dynamically linked libraries, it searches your testcase directory before it searches the SU2 installation directory. . As you see, this can be used for redefining existing (at compile time) functions and modifying its content. I find it especially useful for creating custom initial conditions. If you want to create a completely new custom boundary condition BC_Custom(), it is probably easiest to predefine this structure and create a custom_bc option in the config file. In a CFD problem, there are only a limited number of possibilities (for types of boundary conditions, and systems of equations), so I'm not sure when a BC_Custom() is useful, or when the tipping point is where self-registering classes will become useful for its implementation. Recompiling the code completely takes maybe 2 minutes for me, so I never saw compiling times as a problem. However, this concept could reduce code duplication and improve readability and maintainability, so I'm curious to see the progress on this...",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/1058#issuecomment-680758665:1190,test,testcase,1190,https://su2code.github.io,https://github.com/su2code/SU2/issues/1058#issuecomment-680758665,1,['test'],['testcase']
Testability," unit-testing framework and unit-tests to SU2. After; > chatting with @economon <https://github.com/economon>, I've decided to; > move the discussion here to get additional input.; > What is unit testing?; >; > For those not familiar with unit testing, unit testing allows the testing; > of small bits of behavior, ideally using isolated bits of code. It is not; > intended to replace validation testing or formal verification tests.; > Instead, it serves a unique purpose. Consider the three following use cases:; >; > - You're developing a new feature, and you want to test it to see if; > it works. You could do a full simulation, but that takes a lot of time and; > computing power. You want to check if your new behavior behaves as you; > suspect before you throw a lot of resources at it.; > - You submit a PR and discover that one of the regression tests has; > failed. But...why? You know that something is broken, but its hard to track; > down what broke. You want more granular test coverage that can demonstrate; > what broke.; > - You are fixing a very small bug. You know that you should prove that; > your bug fix worked, but it doesn't seem logical to dedicate an entire; > validation case to one small bug fix. You want to write a small test for a; > small fix.; >; > In all of these cases, unit testing fills a unique role. Unit testing; > increases time spent in development, but decreases the amount of time spent; > in bug-fixing and maintaining.; >; > For more information, see this relevant Stack Exchange question.; > <https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>; > What do I propose?; >; > My research group at UT Austing has implemented a unit testing framework; > on our branch, which we're happy with. Some choices were arbitrary, and; > some choices were made based on our development environment. Those choices; > may be different for other groups. Here's what we have done:; >; > The unit testing fr",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:2795,test,test,2795,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['test'],['test']
Testability," use Boost's unit testing framework; > <https://www.boost.org/doc/libs/1_70_0/libs/test/doc/html/index.html>.; > This provides a convenient set of macros for instatiating tests, grouping; > tests into suites, and running checks. This choice was based on what is; > available in our development setup.; >; > We have integrated our unit tests into our Travis CI regression testing.; > Every time we push commits or submit a pull request, the unit tests are run; > and checked.; > What is my vision for unit testing in SU2?; >; > I am *not* proposing that we start trying to get 100% code coverage with; > pre-existing code. That would not provide a good return on investment.; >; > Instead, I see people adding unit tests as they write new code and as they; > find bugs. For each new behavior added to SU2, tests are first added to; > document the related existing behavior. These tests serve to check that the; > existing behavior isn't damaged by the new code. Then new tests are added; > to prove that the new behavior is working correctly. For bug fixes, the; > process is simpler. A test is added to confirm that something is not; > behaving as expected. Then the code is fixed to make the test pass.; > What frameworks are available?; >; > For a unit testing framework, here are the most popular options, with the; > following pros and cons:; > Roll-your-own; >; > - Requires no external dependencies; > - The most flexible option; > - Involves the most work to setup; > - Will lack some of the more advances features of mature unit-testing; > frameworks.; >; > Boost Test; >; > - Can be header only, statically linked, or dynamically linked; > - If statically or dynamically linked, then Boost is not very; > lightweight; > - Easy to add if you're already using Boost; >; > Google Test; >; > - Most common unit-testing framework; > - Can be easily combined with Google's powerful GMock mocking library; > - Compiling and linking can be somewhat painful; >; > Catch2; >; > - Used by FEniCS; > - Ma",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499278427:5193,test,tests,5193,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499278427,2,['test'],['tests']
Testability," want to test it to see if it works. You could do a full simulation, but that takes a lot of time and computing power. You want to check if your new behavior behaves as you suspect before you throw a lot of resources at it.; * You submit a PR and discover that one of the regression tests has failed. But...why? You know that something is broken, but its hard to track down what broke. You want more granular test coverage that can demonstrate what broke.; * You are fixing a very small bug. You know that you should prove that your bug fix worked, but it doesn't seem logical to dedicate an entire validation case to one small bug fix. You want to write a small test for a small fix. In all of these cases, unit testing fills a unique role. Unit testing increases time spent in development, but decreases the amount of time spent in bug-fixing and maintaining. For more information, see this relevant Stack Exchange question.<https://scicomp.stackexchange.com/questions/206/is-it-worthwhile-to-write-unit-tests-for-scientific-research-codes>. What do I propose?. My research group at UT Austing has implemented a unit testing framework on our branch, which we're happy with. Some choices were arbitrary, and some choices were made based on our development environment. Those choices may be different for other groups. Here's what we have done:. The unit testing framework is compiled and run using autotools. For more information on autotool's setup, see their documentation<https://www.gnu.org/software/automake/manual/html_node/Tests.html>. Since autotools is the build system for SU2, this involves minimal changes. Using automake, the build process for building unit tests becomes:. '''; ./bootstrap; ./configure; make; make check; '''. We use Boost's unit testing framework<https://www.boost.org/doc/libs/1_70_0/libs/test/doc/html/index.html>. This provides a convenient set of macros for instatiating tests, grouping tests into suites, and running checks. This choice was based on what is avai",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/698#issuecomment-499250240:2354,test,tests-for-scientific-research-codes,2354,https://su2code.github.io,https://github.com/su2code/SU2/issues/698#issuecomment-499250240,2,['test'],['tests-for-scientific-research-codes']
Testability," where integration to the wall makes sense and a fuselage marker where wall functions (or even an inviscid BC) is the right thing to do. So let‚Äôs indeed do something like what Tom suggests (in the spirit of MARKER_MONITORING) so that one can control which markers get wall functions applied. If a list of markers is not specified in the config file, the default behavior should be that all no-slip walls get wall function BCs. If a list of markers is specified, then those and only those markers listed get wall function Bfs (with the others getting integration to the wall treatment). Now, what you point out in the second half of your message is the ultimate in flexibility: not only specifying wall functions in a subset of the no-slip wall markers, but also allowing for different kinds of wall functions to be used in those markers. I imagine that this would be a seldom used capability‚Ä¶but someone out there might have the need. I guess it does not seem to me that the coding of the most flexible logic is that much more complicated, so we may as well do that. If you guys think it is too complicated, the advertised options in the config file can allow some simpler behavior. My two cents,. Juan. On Sep 5, 2017, at 9:58 PM, Edwin van der Weide <notifications@github.com<mailto:notifications@github.com>> wrote:. Juan,. I think that having the flexibility to apply wall functions on only a subset of the viscous wall boundaries would be useful. E.g., if you are interested in a wing, you can apply integration to the wall there, but apply wall functions on the fuselage. My preference would be to have a dedicated BC type for that, i.e. Tom's second suggestion. Apart from this, we can have the different wall model types as a single input parameter, i.e. you apply the same wall model type for all viscous boundaries. Or would you like to have the flexibility to specify this as well per individual marker?. Edwin. ‚Äî; You are receiving this because you commented.; Reply to this email directl",MatchSource.ISSUE_COMMENT,su2code,SU2,v8.1.0,https://github.com/su2code/SU2/issues/399#issuecomment-327377108:1209,log,logic,1209,https://su2code.github.io,https://github.com/su2code/SU2/issues/399#issuecomment-327377108,2,['log'],['logic']
